[{"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(int(5.0),min(i2, ( divInt(( int(7.0) + i0 ),divInt(len(saveChr(( i1 + ( min(divInt(int(2.0),i2), ( max(int(1.0), i1) * int(7.0) )) - int(7.0) ) ))),i2)) + i0 ))):divInt(int(9.0),abs(int(8.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 38, 11, 8, 5, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(( i2 * min(max(( int(7.0) - i1 ), divInt(abs(int(7.0)),i2)), int(1.0)) ))),int(7.0))) + i0 )) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 9, 8, 5, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i0:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 10, 1, 3, 0, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(7.0)], i2)[mod(i2,int(7.0)):abs(int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 10, 7, 7, 3, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], len(saveChr(mod(i2,int(7.0)))))[divInt(int(5.0),min(i2, ( divInt(( len((\"\"R\"\" + in1.rstrip())) + i1 ),( min(( i1 + ( i2 * ( int(7.0) - i1 ) ) ), ( max(int(2.0), i2) + int(5.0) )) * int(7.0) )) - i0 ))):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[int(0.0):i0].rstrip()[abs(i2):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 12, 3, 2, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[divInt(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + int(7.0) ):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 9, 0, 26, 8, 5, 5, 3, 6, 1, 1, 11, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(\"\"R\"\"[i0:int(0.0)], abs(mod(i2,int(7.0))))[divInt(i2,min(i0, ( i2 + divInt(int(5.0),i2) ))):( len(s0) + ( i1 * ( i2 - ( int(7.0) + i0 ) ) ) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 1, 2, 1, 0, 3, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 3, 0], [0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 0, 34, 8, 9, 5, 3, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(divInt(i2,int(0.0))))[( int(7.0) + min(len(saveChr(( ( divInt(int(5.0),i0) + divInt(min(( i1 * max(int(7.0), ( int(7.0) - i2 )) ), abs(max(int(1.0), int(7.0)))),int(7.0)) ) - int(9.0) ))), i0) ):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 3, 2, 1, 0, 0, 1, 3, 3, 1, 0, 2, 2, 2, 0, 3, 3, 2, 1, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 2, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 0, 16, 2, 6, 0, 2, 8, 1, 1, 15, 4, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(saveChr(i0), int(0.0))\\ns0 = in1[max(mod(i2,min(mod(int(3.0),i2), i0)), int(5.0)):len((\"\"R\"\" + getCharFromString(in2, abs(int(7.0)))).rstrip())]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 0, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 36, 10, 8, 6, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:abs(min(mod(i2,int(0.0)), mod(int(2.0),len(saveChr(i2)))))], ( divInt(( int(7.0) + i0 ),divInt(min(( i1 + ( max(( int(7.0) * i2 ), ( abs(i1) - i2 )) + int(2.0) ) ), int(1.0)),i0)) * i0 ))[int(7.0):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 34, 10, 8, 6, 4, 7, 1, 1, 15, 4, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(mod(i0,len(s0[( i2 + int(1.0) ):( int(7.0) + min(i0, divInt(( mod(int(5.0),i0) * ( len((\"\"R\"\" + getCharFromString(in1, ( i1 - min(max(divInt(int(7.0),int(7.0)), ( min(int(1.0), i2) + int(7.0) )), i1) ))).lstrip()) * i1 ) ),i0)) )]))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 2, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 0, 0], [0, 0, 2, 1, 0, 2, 1, 2, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), i0):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 2, 0, 2, 3, 1, 0, 0, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[mod(i0,int(0.0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[min(mod(int(0.0),i0), mod(i2,int(7.0))):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 1, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 3, 2, 1, 5, 0, 1, 10, 3, 2, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(saveChr(mod(i0,int(1.0))).rstrip()):] not in in0[( i2 + int(7.0) ):( int(5.0) + abs(i0) )].lstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 1, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = in1[mod(i0,int(0.0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i0):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i0):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(0.0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 3, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 12, 0, 40, 12, 8, 6, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( ( int(0.0) + i0 ) + ( i2 * saveOrd(in0) ) ):] not in s0[mod(int(7.0),i1):i0].capitalize()[i1:mod(divInt(int(5.0),i2),( min(( i1 - divInt(min(( len(saveChr(i2)) + divInt(min(int(7.0), i0),int(6.0)) ), int(1.0)),i0) ), i0) * divInt(int(7.0),max(int(7.0), abs(i1))) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 8, 1, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 0, 2, 1], [0, 1, 1], [3, 3, 2, 0, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 3, 2, 2, 1, 1, 2, 1, 0, 3, 0, 0, 2, 0, 2, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [3, 0, 2, 0, 3, 0, 1, 2, 1, 0, 3], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 16, 0, 56, 18, 11, 7, 11, 5, 1, 1, 14, 5, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[min(mod(i0,i1), mod(divInt(int(0.0),divInt(int(4.0),abs(i2))),i0)):].capitalize()):]:{:\\nres0 = in1 not in saveChr(( divInt(int(5.0),i1) + ( min(( i2 + divInt(len(in0.rstrip()),mod(min(i1, divInt(max(int(8.0), i2),int(1.0))),mod(i0,i0))) ), ( int(1.0) * abs(int(7.0)) )) - max(i0, min(( ( int(7.0) + int(9.0) ) - divInt(int(8.0),i1) ), len((\"\"R\"\" + saveChr(i0)).capitalize()))) ) ))[i0:divInt(i2,( int(5.0) - i1 ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4, 5], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 5, 5, 1, 4, 1, 3, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 1, 12, 0, 4, 0, 0, 8, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1) != i0\\ni1 = int(0.0)\\nin0 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = getCharFromString(in2[abs(int(7.0)):i2], int(5.0))[i2:int(7.0)][:saveOrd(saveChr(i1))]\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 12, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0.capitalize()[mod(int(07.0),i0):mod(i0,int(5.0))][:( int(7.0) + abs(i2) )]):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[abs(len(in1)):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 226}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = (in1 + in0) not in s0[max(i0, int(1.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 3], [1], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 14, 14, 12, 0, 50, 16, 8, 8, 8, 8, 1, 1, 15, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile (in1 + in0) not in s0[int(7.0):]:{:\\nres0 = ( i0 != int(7.0) or ( in1[max(mod(i2,int(5.0)), mod(int(7.0),abs(i2))):( divInt(( min(i0, divInt(len(getCharFromString((\"\"R\"\" + saveChr(( i1 + ( divInt(( int(4.0) + i2 ),divInt(min(int(1.0), i1),int(7.0))) * int(7.0) ) ))), i2)),i0)) - mod(int(9.0),max(int(8.0), abs(i0))) ),( ( ( int(5.0) + int(0.0) ) * divInt(int(4.0),i0) ) - int(8.0) )) - i1 )].endswith(in0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 0, 0, 2, 0, 5, 1, 2, 1, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( len(in1) + i0 ):]:{:\\nres0 = ( ( i2 != len(in1) or True ) and in0.startswith(s0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 1, 3, 0, 1, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):].startswith(getCharFromString(s0, i0)[i2:abs(mod(i2,int(0.0)))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 20, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 14, 14, 10, 0, 49, 16, 9, 9, 7, 7, 0, 1, 10, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[i1:]) != int(0.0) or True ) and in0 not in s0[abs(mod(i1,int(7.0))):mod(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len(in0[min(i0, ( ( divInt(int(8.0),i2) + ( max(int(1.0), i1) * int(7.0) ) ) - int(7.0) )):]) + i1 )) * divInt(divInt(int(9.0),abs(int(8.0))),max(i2, ( ( ( int(5.0) - int(0.0) ) - mod(int(4.0),i2) ) * int(8.0) ))) )))] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 281}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 26, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 9, 1, 2, 0, 1, 4, 1, 1, 10, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):saveOrd(\"\"R\"\"[mod(int(0.0),i0):])]:{:\\nres0 = saveChr(int(7.0))[:i2].capitalize() == in1[int(5.0):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 325}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 12, 2, 3, 0, 2, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, int(07.0))[i2:] not in in0[int(5.0):max(mod(i2,int(7.0)), mod(int(4.0),abs(i2)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i0:i2].rstrip()[abs(i2):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 291}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = s1[len(in0):] not in getCharFromString(s0, i0)[int(0.0):abs(mod(i2,int(4.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 4, 3, 3, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(saveOrd(in1), ( int(1.0) + i0 )):]:{:\\nres0 = in1[( i2 + ( mod(int(7.0),abs(i2)) * i0 ) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 305}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 5, 1, 12, 2, 3, 1, 1, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i0):]:{:\\nres0 = in1[:i2] not in in0\\ni0 = len(s0[( i0 + int(0.0) ):i1].rstrip()[int(7.0):abs(int(5.0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 2, 1, 0, 1], [0, 2], [1, 1, 2], [0], [0, 0], [], [], [1], [], [0, 0], [], [], [2, 0], [], [], [], [1, 0, 1, 1, 1], [0, 8, 1, 4, 6], [2, 0, 0, 2], [1, 0], [3, 3, 1, 2, 2, 0, 1, 1, 2, 0, 1], [1, 0, 1], [2, 0, 0], [1, 1], [1, 0], [4, 4, 0, 4], [], [0], [4, 4, 0, 0], [3, 2], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 0, 5, 5, 4, 2, 11, 3, 2, 2, 2, 4, 0, 1, 4, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in1.capitalize().rstrip():{:\\nloopBreak% = 0\\nwhile not b1:{:\\ni2 -= abs(min(int(0.0), mod(( i0 - int(81.0) ),int(4.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = divInt(i2,int(6.0))\\ns0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [], [], [0, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 33, 10, 8, 4, 6, 4, 0, 0, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0.capitalize()[len(in2[len(in1):]):] not in saveChr(mod(int(07.0),i1))[mod(i2,abs(( int(5.0) + min(i2, i0) ))):divInt(divInt(int(7.0),i1),divInt(len(in1),( i2 + ( min(divInt(max(i1, ( abs(int(6.0)) * i2 )),int(1.0)), int(7.0)) - i0 ) )))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 0], [0], [2, 0, 1], [0], [3], [0], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = ( i0 + int(3.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 1], [1], [3, 3, 0, 0, 0], [0], [1, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= max(min(i1, i2), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [1], [1], [], [0], [], [], [], [3], [1], [0], [], [], [], [], [0], [0, 1, 0, 1], [4, 8, 4, 4], [0, 2, 1, 2, 0, 2], [1], [3, 3, 2, 0, 0, 1, 0, 0, 0], [1], [0, 0], [1], [1], [], [], [], [1], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 7, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= min(min(mod(i2,i1), int(48.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0], [0], [2, 0, 0], [1], [], [1], [1], [], [], [], [], [], [], [], [0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(i1,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 5, 8, 1], [1, 0, 0, 0, 2, 1, 2, 2, 0], [0], [1, 2, 0, 1, 1, 0, 2, 2, 0, 1, 3, 2, 2, 2, 3, 0, 1, 2, 2, 1, 0, 2, 0, 3, 1, 1, 2, 1, 1, 0, 1, 2, 2, 1, 2, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 2, 4, 0], [2, 2, 2, 1, 2, 0, 2, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [1, 1], [1], [], [2, 4, 1], [1], [], [0], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 6, 1, 0, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(4.0)\\ns1 = saveChr(divInt(i0,int(0.0)))[int(0.0):i0]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 1, 1, 0, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[divInt(len(in1),i0):]:{:\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [2], [1, 1], [], [0, 0], [], [], [1], [5], [1], [0], [], [], [], [], [], [0, 0, 1, 1], [9, 7, 6, 0], [1, 0, 2, 0], [0, 0], [0, 1, 1, 0], [], [], [2, 2], [1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\nloopBreak% = 0\\nwhile int(976.0) != int(0.0):{:\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [1], [], [], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [], [2], [1], [3, 3], [], [2, 4], [1], [], [2, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 3], [2, 0, 0], [1], [0, 0, 1], [], [], [2], [], [4, 2], [1], [], [0, 1], [], [], [0], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i0\\nin1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 4], [2, 0, 0, 0], [1], [2, 1, 0, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(2.0),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0], [1], [1], [], [0], [], [], [], [1], [1], [0], [], [], [], [], [0], [1, 1], [5, 9], [1, 1, 0, 0], [0], [3, 2, 0, 2, 1, 3, 0, 1, 2, 0, 3], [1, 1, 0], [0, 4, 3], [1], [1, 1], [0, 5], [0, 0, 0, 0, 0, 0, 1], [], [0, 0], [], [], [], [2, 1, 1, 0, 2, 3, 2], [0], [21, 13], [1, 5, 6], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 2, 4, 1, 11, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif min(mod(i1,mod(int(5.0),saveOrd(s0))), i1) \\g int(9.0):{:\\ni0 = ( i0 - len(in2) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1], [1, 2, 1, 1], [0], [1, 0, 1], [0], [0], [], [], [3], [2], [1], [0], [], [], [], [], [], [1, 0, 1], [6, 0, 0], [2, 0, 0, 1, 0, 1, 0, 1], [1, 1], [3, 2, 1, 0, 0, 2, 3, 0, 0, 0, 1, 0], [0, 1], [1, 1], [0, 1, 0], [1], [3, 0], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 8, 2, 12, 2, 2, 3, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += max(( int(6.0) - i0 ), i0)\\nloopBreak% = 0\\nfor in0 in s0:{:\\nres0 = mod(max(i1, i0),i1) == int(00.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [4], [1], [0], [], [], [], [], [], [1], [3], [1, 1, 1], [1], [2, 0, 1, 2, 0, 0], [1, 1], [], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 6, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = mod(i1,int(3.0)) \\le divInt(i1,i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1], [8, 2, 1, 9], [0, 2], [1], [2, 1, 3, 2, 1, 1], [0, 1], [4], [0, 2, 0], [1, 1], [1], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 6, 2, 1, 2, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( int(8.0) * saveOrd(s1[mod(int(2.0),int(1.0)):]) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [0], [0], [], [], [1], [], [0], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 2, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [3, 3, 1], [], [], [], [1, 1], [4, 9], [0, 2], [1], [3, 2, 1, 1, 3, 0], [0], [2, 3, 2], [1, 0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 0, 1], [], [0], [4, 4, 0, 0], [3, 0], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 1, 0, 2, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(in1, abs(( int(4.0) - int(9.0) ))).rstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [1, 1], [1], [1], [], [], [1], [], [], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [1], [1], [0], [], [0], [], [], [], [1, 1, 1], [1], [], [], [3, 3, 1], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s1) \\g saveOrd(getCharFromString(in1, int(1.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [3], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 1], [6, 0, 1, 7], [1, 1, 0, 0], [1], [3, 2, 2, 0, 1, 1, 0, 2, 1, 2, 1, 2, 0, 0], [1, 0, 0, 1, 1], [0], [0, 2], [1, 1, 0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 7, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += min(mod(( i1 * int(6.0) ),int(0.0)), i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 2], [1], [0], [1], [], [3, 3, 2, 0, 3, 0, 1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(02.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 1, 1], [8, 5, 3, 9, 1, 1], [0, 2, 1], [1], [2, 1, 3, 2, 1, 0, 3, 2, 1, 1, 0], [1, 0, 1], [0, 0, 2], [0, 0], [1, 0], [1], [], [], [4, 0], [2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 3, 1, 11, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += mod(int(8.0),min(( int(53.0) + i2 ), min(divInt(int(9.0),int(1.0)), i1)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 1], [7, 8, 2, 5, 5, 8, 7], [0, 0, 0, 2, 0], [0, 1], [1, 2, 0, 3, 3, 2, 3, 0, 0, 3, 0, 3, 0, 3, 2, 2, 1, 1, 1], [0, 1, 1, 0], [1, 2, 3, 4, 1, 4], [1, 1], [0, 1], [1, 1, 1, 3, 0], [], [], [2, 2, 2, 0, 2, 0, 0, 0], [], [], [0, 2, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 5, 0, 19, 4, 6, 2, 2, 5, 0, 0, 8, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s1[int(7.0):][( i0 - max(abs(divInt(len(s1[i0:i0]),saveOrd(in0))), i2) ):][max(i0, saveOrd(s0)):mod(( int(8.0) - int(2.0) ),int(5587.0))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [1], [1], [0], [], [], [], [], [], [1, 1], [1, 4], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(1.0) \\g int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\ni2 = max(i2, int(07.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 9, 1, 5, 4, 5, 9, 0, 3, 9, 4, 1, 4], [2, 1, 0, 0, 2, 2], [1, 0], [1, 2, 2, 2, 0, 3, 0, 3, 1, 1, 2, 0, 1, 3, 3, 3, 1, 0, 1, 3, 1, 0, 0, 3], [0, 0, 0, 1], [0, 2, 3, 2, 3, 0, 2, 0], [1, 0, 2, 0], [0], [0, 2], [], [], [4, 0, 2, 2, 2, 4, 0], [3, 2], [1], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 13, 4, 2, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(2.0)\\ni1 = ( ( ( i0 + min(i0, abs(int(9.0))) ) * int(1.0) ) + divInt(i2,int(54.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [5], [0, 0, 2], [0], [0], [2, 1], [], [0], [], [1, 1, 1, 1], [6, 4, 3, 4], [2, 2, 2, 1], [], [2, 0, 1, 2, 3, 2, 0, 1, 2, 2, 2, 0, 0, 3, 2, 3, 3, 1], [1, 1, 1, 0, 1, 0], [4, 1, 4, 3], [0, 1, 1], [0, 0, 1], [4, 0], [], [], [4, 0, 2, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1, 0, 0], [], [1, 1], [], [0], [], [], [2, 1], [], [], [], [], [], [], [], [], [1], [1], [1, 2], [1, 0], [3, 1], [], [3], [1, 1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in2)\\ni2 = int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 0], [1], [0, 0, 3], [1], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [0], [0], [], [1], [], [0], [], [], [], [1], [], [0], [], [], [], [], [4], [], [], [4, 4], [3, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(i1).lstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 0], [], [0, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 2], [1], [3, 3, 0, 0, 0], [0], [2, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= abs(min(i1, i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 3], [1], [0], [0], [], [0], [], [], [], [1, 1, 1], [1], [], [], [3, 3, 1], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = len(s0)\\ni1 += len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [0], [0], [], [], [1], [], [1], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1, 4, 1, 0], [1, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 1, 1, 2], [1], [1, 2, 0, 0, 2, 3, 2, 2, 1, 2, 1, 2, 2, 2, 0, 0, 3, 2, 2, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0, 3, 3, 1, 0, 3, 2, 2, 2, 3, 0, 1, 2, 1, 1, 3, 3, 1, 3, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [1, 2, 4, 0, 2, 1, 1, 2, 0, 1, 1, 2], [2, 0, 2, 1, 2, 2, 2, 2, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1], [], [0], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 14, 1, 61, 20, 12, 9, 12, 2, 0, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in saveChr(int(0.0))[:divInt(i1,i0)]:{:\\ni0 *= divInt(max(mod(divInt(int(0.0),divInt(int(0.0),divInt(divInt(divInt(i0,i2),abs(divInt(( saveOrd(s1) + int(7.0) ),( int(3.0) * min(int(6.0), int(1.0)) )))),divInt(( int(4.0) - i0 ),abs(( ( int(3.0) * mod(i0,i2) ) * int(0.0) )))))),int(4.0)), i0),max(max(int(8.0), i2), abs(mod(( ( min(i0, int(1.0)) * ( int(4.0) * int(1.0) ) ) + max(max(int(0.0), abs(i1)), i1) ),i2))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [9, 7, 7], [1, 2, 1], [1, 0], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i2\\ni1 = int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 2, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 0, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 4, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 7, 7, 9, 0, 33, 10, 7, 6, 4, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( min(len(s0[i1:]), int(0.0)) != mod(mod(i1,int(7.0)),( int(5.0) + abs(i1) )) or False ) and in2 not in in1[divInt(( ( i1 + i0 ) * ( min(len(s1), i2) * ( min(divInt(int(7.0),i1), ( max(int(2.0), i1) + int(1.0) )) * int(7.0) ) ) ),i2):] )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 3, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 3, 4, 1, 2, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = len(in1[mod(abs(i0),mod(i2,int(0.0))):]) != ( int(7.0) + min(i2, i0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [0, 0, 0, 0, 0, 1, 1, 1], [6, 2, 5, 3, 7, 5, 0, 7], [1, 1, 0, 0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(625375.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [2], [], [0], [], [], [], [], [0], [], [], [1], [], [0], [0], [1], [0], [2], [], [1, 0], [], [], [], [], [2, 4], [], [], [0, 2], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif True:{:\\ns2 = in1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 1], [1], [3, 3, 0, 0, 0], [0], [1, 3], [1, 0], [], [0], [], [], [0], [3, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= max(len(s0), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [0], [1, 2], [], [], [], [], [4], [], [], [0, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0], [], [], [3, 0], [], [0], [0], [], [0], [], [], [], [], [], [0, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\ni0 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [], [1], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 0, 1, 1], [9, 5], [2], [0], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [8, 6, 4], [1, 2], [0], [2, 1, 3, 2, 1, 1, 0], [1, 0], [1], [1], [0], [0], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 1, 7, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = divInt(int(8.0),max(( int(6.0) - int(4.0) ), i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1, 7], [2], [], [2, 2, 1, 0, 1], [1, 1], [], [], [1, 1], [2, 2, 2], [], [], [4, 3, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 2, 0, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(mod(mod(int(1.0),i2),int(7.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1], [0, 4, 0, 9], [2], [], [1, 0], [], [], [], [], [1], [], [], [4, 4], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = saveChr(int(04.0)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [], [], [1], [], [], [], [], [5], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [3, 1, 6], [1, 2], [1], [1, 0, 0, 1], [], [2], [0], [], [0, 2, 1], [1], [0], [0, 4, 1], [0], [], [], [0], [9], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2:{:\\ni1 += int(316.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [1, 0], [4, 0], [1, 2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni1 += int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1, 1, 0, 0, 1], [0, 6, 5, 1, 1, 6, 1, 1], [1, 2, 0, 0, 2], [1, 0], [2, 3, 1, 0, 0, 1, 2, 1, 2, 1, 3, 1], [1, 0, 0], [0, 4, 3], [1, 0, 0, 0], [0, 0], [5, 1], [], [], [2, 0, 2, 0], [], [], [2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 4, 2, 6, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= divInt(min(int(0651.0), i2),i0)\\ni0 = int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0 not in in1\\ni0 = len(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [3], [1], [1], [0], [], [], [], [], [], [1, 1], [8, 7], [0], [], [1, 1, 0, 0], [], [0], [], [], [2, 0], [1], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\nres0 = int(8.0) \\g int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0, 2], [], [0], [], [], [1], [], [0], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [1, 1], [], [0], [], [], [1, 0], [], [1, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [0], [], [0], [], [0], [], [], [1], [5], [0, 1], [0], [], [2], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1], [7, 5, 0, 4, 7, 4, 8, 0], [], [], [1, 2, 3, 3, 1], [1], [2, 3], [], [1], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 8, 8, 0, 0, 5, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not int(7.0) != mod(abs(len(s1)),int(5047480.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 2], [0], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 2, 2, 3, 2, 1, 1, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 2, 3, 0, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s0[len(in2):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 0, 1], [4, 3, 3, 9, 3, 7], [1, 1, 1, 2], [0], [2, 0, 2, 0, 2, 1, 2, 1, 0], [1, 0, 1, 1], [3], [1], [0, 0, 0], [2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 4, 1, 9, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = divInt(i1,( i1 - divInt(int(43.0),divInt(int(3937.0),i2)) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [1, 0], [], [], [], [], [], [], [1], [6], [1], [], [0, 1, 3, 0], [], [], [], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:i1]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 1], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [2, 0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [0, 6, 2, 0, 0, 4, 3, 0, 7, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 3, 2, 2, 3, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [2, 1], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [4, 0], [1], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [0, 2], [1], [2, 1, 3], [0], [3], [1, 1], [1], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( int(5.0) - len(in0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 1, 1], [2, 2, 0, 1, 0, 1], [1, 2], [1, 1, 2, 0], [0], [0, 0, 0], [], [], [0], [], [0, 2], [0], [0], [0], [], [0], [0], [1, 1, 1, 1], [6, 7, 8, 3], [2, 0, 0, 0, 2, 1, 0, 1], [1, 0, 0], [2, 3, 2, 0, 2, 1, 2, 2, 0, 0, 1, 3, 3, 0, 1, 2, 0, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [2, 4, 4, 2], [1, 2, 0, 2, 2, 2], [0, 0, 0, 0], [4, 3, 0, 4, 0, 5], [], [0], [0, 0, 0, 4, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 1, 2, 2, 5, 2, 13, 5, 3, 4, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif b0:{:\\nloopBreak% = 0\\nwhile in1 in in0:{:\\ni2 -= ( abs(divInt(i0,( int(6.0) * divInt(( i0 + i0 ),int(7.0)) ))) * saveOrd(s0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = saveOrd(in1.capitalize())\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [0], [0], [], [], [0], [], [0, 2], [], [0], [2], [], [], [], [0], [2], [2, 0], [], [0, 0], [], [], [], [], [1, 0, 2], [], [0], [0, 4, 2, 0], [1, 2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 3, 0, 1, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s0:{:\\nb0 = not saveChr(i2) in s2[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [0, 1, 1], [3, 3, 0, 0, 0, 2, 0, 1, 1, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 0, 8, 1, 2, 0, 1, 5, 1, 1, 10, 1, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[:len(in0)] not in \"\"R\"\"[i2:i0].rstrip()[i2:mod(i0,int(0.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [1], [1], [], [0], [], [], [], [3], [1], [0], [], [], [], [], [0], [0, 1, 0, 1], [4, 8, 4, 4], [0, 2, 1, 2, 0, 2], [1], [2, 3, 0, 0, 3, 1, 0, 0, 0], [1], [0, 0], [1], [1], [], [], [], [1], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 7, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= mod(min(i2, i1),min(int(48.0), i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0, 2], [3, 1], [0, 1, 1], [0, 0], [], [3, 0], [0], [], [], [1, 1], [5, 7], [0, 1, 2], [], [3, 1, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 2, 2, 3, 0, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( max(int(5.0), i0) \\ge i1 and int(7.0) \\g i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [1, 1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [0, 2], [0], [4], [2], [], [1], [], [1, 1], [0, 8], [], [], [1, 3, 3, 1], [0], [3], [1], [], [1, 4, 1], [], [], [0, 3, 4, 2, 0, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not s1.startswith((in1[:int(0.0)].capitalize() + s1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 0, 0, 0, 1], [0, 2, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 1, 2, 3, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0], [0], [2], [0], [2], [], [], [], [], [1, 1], [0, 2], [2, 0, 0], [], [2, 2, 0, 1, 1, 0], [0, 1], [], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 2, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(( divInt(i2,int(0.0)) - int(2.0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 9, 2, 5, 4, 5, 9, 0, 3, 9, 4, 1, 4], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [1, 0], [1, 2, 2, 1, 0, 2, 3, 3, 1, 1, 1, 2, 3, 3, 3, 3, 1, 0, 1, 3, 1, 0, 0, 3], [0, 0, 0, 1], [0, 2, 3, 2, 3, 0, 2, 0], [1, 0, 2, 0], [0], [0, 2], [], [], [4, 0, 2, 2, 2, 4, 0], [3, 2], [1], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 3, 2, 11, 3, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= int(29.0)\\ni2 = ( ( int(2.0) + i1 ) * ( min(abs(int(54.0)), int(5.0)) + int(9.0) ) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [0, 1, 1], [0, 9, 2], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(09.0) \\l int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 0, 7, 1, 8, 5, 8, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 1, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 1, 1, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 12, 2, 3, 0, 2, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(saveChr(i0)[int(0.0):], int(7.0))[mod(i2,int(5.0)):divInt(int(7.0),abs(i2))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\l int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1], [8], [2], [1], [3, 1, 0], [1], [4], [2], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= saveOrd(s0.capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [0], [3, 0, 1, 1], [], [2], [2], [], [4, 3], [1], [], [1, 0], [], [], [1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(i1)\\nin1 = \"\"F\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0, 0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 1, 0, 1], [1, 1, 5, 7, 7, 0, 2, 8, 2], [0, 0, 2, 1, 1, 1, 1], [], [1, 3, 2, 2, 2, 1, 3, 1, 0, 0, 3, 1, 2, 3, 2, 3, 3, 3, 2, 0, 0, 1, 2, 2, 2, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0], [1, 1, 4, 1, 0, 4, 3], [1, 0, 2, 1, 1, 2], [1, 0, 0], [5, 5, 3, 4], [], [], [3, 0, 2, 0, 0, 0, 1], [], [], [1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 6, 0, 29, 9, 7, 6, 3, 4, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g max(mod(( divInt(int(1.0),max(int(5.0), i0)) - i0 ),saveOrd((in2 + in2[:int(77.0)]))), divInt(max(( min(saveOrd(in0), len(in1)) + ( i2 * i1 ) ), int(0.0)),( ( ( i1 - int(2.0) ) - int(82.0) ) * i1 )))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [1, 0, 0, 0, 0, 0, 1], [6, 6, 4, 3, 8, 0, 4], [1, 2], [1], [2, 2, 3], [1], [], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [], [0], [0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 2, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [3, 3, 1], [], [], [], [1, 1], [4, 9], [0, 2], [1], [3, 2, 3, 1, 3, 0], [0], [2, 3, 2], [0, 0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 0, 1], [], [0], [3, 0, 0, 0], [3, 0], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (in1 + s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 0, 0, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(7.0):]:{:\\ni0 = abs(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [2], [0, 2, 0], [], [0, 0], [], [], [0, 3, 3], [3], [0, 0, 1], [0], [], [2, 0], [], [1], [], [0, 0, 1, 0, 1, 1], [5, 8, 9, 7, 8, 9], [0, 2, 1, 0, 0, 2, 2], [], [0, 0, 2, 2, 1, 0, 2, 2, 0, 3, 1, 2, 3, 1, 0, 0], [1, 1, 1, 1, 1], [1, 2], [], [1, 1, 0, 0, 0], [0], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 3, 1, 3, 1, 0, 2, 0, 0, 0, 6, 6, 6, 0, 16, 5, 2, 0, 5, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not res0\\ns0 = saveChr(i0)\\nres0 = i2 \\ge mod(mod(int(589.0),i1),divInt(divInt(i0,max(int(78.0), divInt(abs(int(9.0)),i0))),i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [1, 4], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [4], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = getCharFromString(saveChr(int(0.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 5, 5, 4, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 2, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 0], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1], [2, 0, 0, 0, 2, 0, 0, 2, 0, 2], [1, 1], [1, 2, 0, 1, 1, 0, 2, 0, 1, 0, 1, 3, 2, 2, 0, 0, 1, 2, 2, 3, 1, 2, 1, 3, 1, 1, 0, 2, 2, 0, 3, 2, 0, 1, 0, 0, 0, 1, 1, 0, 3, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [1, 2, 4, 0, 1, 1], [2, 0, 1, 1, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 4], [], [], [1, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 4, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(42.0)\\ni0 += divInt(i0,int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [0], [], [0, 1], [], [], [], [], [], [], [], [], [0, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 7, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[mod(i0,int(0.0)):]\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0], [1], [], [0], [1], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 3, 0, 1, 7, 8, 3], [2, 0, 2, 1, 2, 2], [1], [3, 2, 1, 3, 0, 3, 3, 2, 1, 0, 3, 1, 2, 3, 3, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0], [4, 1, 0, 2, 0, 0, 1, 0, 1], [2, 2, 0], [0, 1, 0], [4, 4, 5], [], [], [4, 0], [0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 6, 1, 25, 4, 9, 3, 2, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= saveOrd(getCharFromString(in1, ( int(4.0) * max(i0, min(abs(divInt(int(6.0),i2)), min(int(3.0), mod(min(max(i1, int(0.0)), int(1.0)),min(max(( i2 + int(7.0) ), int(8.0)), i2))))) )))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [1], [3, 0, 1, 1], [], [0], [1], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= min(i1, int(4.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [4], [1], [0], [], [0], [], [], [], [0, 1], [7, 5], [0], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(75.0) \\le i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [0, 1, 1, 1], [0, 8, 9, 1], [2, 1], [1], [2, 2, 2, 1, 1, 3, 0], [0, 0, 0], [3], [1, 2, 2, 2], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 1, 7, 3, 1, 4, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= ( ( ( int(08.0) * int(9.0) ) * len(s1) ) * i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [0, 0, 0, 1], [6, 9, 2, 5], [0], [], [1, 0], [0], [2], [], [], [4, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(int(6925.0)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [2, 2], [5], [0, 1], [0], [], [2, 0], [], [], [], [], [], [1, 2, 0], [0], [2, 0, 0, 0], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = divInt(i2,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [1], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [0], [0], [1, 0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [2], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 1], [], [], [], [], [0], [5], [0, 0], [0], [], [2], [], [], [], [1, 1, 0, 0, 1, 1, 0, 1], [3, 1, 5, 0, 6, 2, 9, 8], [0, 0, 1, 1, 2], [0, 1], [2, 3, 3, 1, 3, 3, 0, 3, 3, 1, 0, 2, 0, 1, 1, 1], [0, 0], [1, 0, 0, 2, 0, 1], [1, 2], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 4, 1, 16, 2, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( max(min(int(3.0), min(abs(i0), min(max(int(1.0), i1), ( i1 - int(506.0) )))), int(2.0)) * int(98.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [0], [0, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (saveChr(i1) + saveChr(i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 5, 8, 1], [2, 0, 0, 0, 2, 1, 2, 2, 0], [1], [1, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 2, 2, 2, 3, 0, 1, 2, 2, 1, 0, 2, 1, 0, 1, 1, 2, 1, 1, 0, 1, 2, 2, 1, 2, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 2, 4, 0], [2, 2, 2, 0, 2, 0, 2, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1], [1], [], [2, 4, 1], [1], [], [2], [1], [], [10], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 7, 1, 30, 12, 2, 6, 7, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(4.0)\\ns1 = saveChr(divInt(i0,int(0.0)))[( i0 * ( divInt(int(0.0),( max(divInt(mod(divInt(abs(i0),int(7.0)),divInt(( int(3.0) * i2 ),( int(6.0) + i1 ))),int(1.0)), int(4.0)) * divInt(int(3.0),int(0.0)) )) + i2 ) ):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 0], [], [2, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveChr(i1) != in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0, 0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 5, 7, 7, 2, 2, 8, 1, 1, 6, 8, 0, 2, 1, 0, 8, 8, 8, 7, 9], [0, 0, 2, 1, 2, 1, 1, 1, 0], [], [1, 3, 2, 2, 2, 1, 3, 1, 0, 0, 3, 1, 2, 3, 2, 3, 3, 3, 2, 0, 0, 1, 2, 2, 2, 0, 1, 0, 0, 2, 1, 2, 1, 3, 2, 2, 3, 2, 0, 1, 2, 1, 1, 3, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 0, 4, 3, 4, 1, 4], [0, 0, 2, 1, 1, 2, 0, 1, 0, 2], [1, 0, 0, 0, 0], [5, 5, 3, 4], [], [], [4, 0, 2, 0, 0, 0, 1], [3], [0], [1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 21, 21, 9, 0, 45, 15, 10, 10, 5, 4, 0, 0, 6, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g max(mod(( divInt(int(1.0),max(int(5.0), i0)) + i0 ),max(int(77.0), divInt(max(( min(saveOrd(in2.lstrip()), len(in2[:( i2 + i1 )])) * int(2.0) ), ( ( ( i2 - int(2.0) ) - i1 ) * i1 )),( int(8116.0) + ( int(80.0) - saveOrd(in0) ) )))), divInt(( max(( i1 + int(2108.0) ), divInt(int(8.0),int(879.0))) * saveOrd(in1) ),i0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [1, 3, 1, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 2, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 2, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 12, 2, 3, 1, 1, 4, 1, 1, 11, 2, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[:int(0.0)][len(s1[int(75.0):i0]):]:{:\\nres0 = in1 not in in1[:len(saveChr(mod(i2,int(7.0))))].rstrip()[( int(7.0) + abs(i0) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nin1 = in0[abs(i1):]\\ni1 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [1], [3], [1, 1, 0], [1], [2, 0, 1, 2, 0, 0], [1, 1], [], [0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 6, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = divInt(i1,int(3.0)) \\le divInt(i1,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0], [9, 9, 0, 3], [1, 2, 0, 2], [1], [2, 0, 1, 2, 0, 1, 3, 3, 0, 0, 0], [0, 0], [1, 2], [1, 0], [1], [1, 4], [], [], [0, 2, 0], [], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [8, 9, 1], [1], [1], [1], [], [], [1], [], [1, 0], [], [], [0], [], [], [], [3, 0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(891.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [0], [0, 1, 1], [0], [0, 0], [], [], [1], [], [2], [], [3], [], [], [], [], [1, 1, 1, 1], [6, 2, 9, 6], [0, 1, 0, 0, 0, 1, 0, 0], [0, 0], [0, 3, 1, 1, 0, 2, 0, 0, 3, 1, 2, 0, 1, 3, 3, 0, 1], [0, 0, 0], [3, 4, 3, 3], [0, 1, 0], [], [1, 0, 3, 1, 1, 5], [1], [0], [2, 2, 0, 4, 1, 4, 4, 4, 2, 0, 1, 0], [1, 1, 1, 2], [], [0, 0, 2], [3], [], [], [], [10]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 5, 1, 10, 1, 2, 1, 0, 2, 1, 1, 7, 3, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s1[i0:len(saveChr(int(6.0)))][int(2.0):i1] != \"\"\"\\\\\"\"\"\\nloopBreak% = 0\\nfor s0 in saveChr(( i0 + i0 )):{:\\ni0 = saveOrd(saveChr(int(9.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 1, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0[len(in1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [3], [0, 0, 1], [], [1], [], [], [], [3, 0, 3], [24], [], [], [6, 23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 1, 0, 0, 0, 3, 1, 0, 0, 2], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"#Y>\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 6, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 2, 3, 0, 2, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 3], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 4, 0, 4, 1, 4, 0, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [3, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [0, 1], [1, 1], [0], [], [0, 1], [], [], [], [], [3, 3], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 != int(11.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = i0 != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [0, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 0], [], [1, 1, 3, 1], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\g int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 0, 1, 2, 0, 3], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 3, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 6, 1, 1, 0, 1, 6, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nb2 = (s2[i0:] + in1) not in in0.capitalize()[int(7.0):mod(i2,len(s0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 2, 1, 2, 0, 1, 0, 0, 4, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif (s0 + in0) not in in1[:len(in1)]:{:\\ni0 = i1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [3], [1, 0], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 1, 1, 0, 2, 3, 2, 0, 3, 1, 1, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[:len(in2)] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1], [6, 5, 9, 1], [], [], [1], [], [], [], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:int(6591.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0, 0], [1], [3, 0, 1], [0], [3], [2, 2], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 3, 0, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 1, 2, 1, 0, 2, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 0, 2, 0, 3, 0, 1, 2, 1, 1, 0, 0, 3, 0], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 33, 10, 7, 6, 4, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:max(min(i0, i2), abs(mod(i2,int(0.0))))]:{:\\nres0 = in1 not in getCharFromString(in1, ( int(6.0) + ( min(( divInt(divInt(int(5.0),i0),( len(in0) + ( i1 - divInt(min(( int(7.0) - i2 ), max(i0, int(8.0))),int(1.0)) ) )) + int(7.0) ), int(7.0)) * i2 ) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0, 1, 2], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [1, 1], [8, 4], [2], [], [2, 1, 3, 1, 0], [1], [0], [0, 1], [1], [0], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 3, 0, 1, 1, 0, 0, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 0, 1, 2, 1, 3], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 3, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 49, 14, 10, 8, 6, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[len(getCharFromString(in1[:i0], int(0.0))[abs(mod(i2,int(0.0))):mod(int(5.0),min(i2, ( divInt(( int(7.0) - i0 ),( max(( i1 + ( min(divInt(int(2.0),i2), ( max(abs(i1), int(1.0)) * int(7.0) )) - i0 ) ), i0) + i0 )) * int(7.0) )))][max(int(9.0), len(saveChr(i0))):divInt(divInt(( int(8.0) - int(5.0) ),( int(0.0) - i0 )),int(4.0))]):] not in (\"\"R\"\" + in0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0, 0], [0], [3, 0, 1], [0], [3], [2, 2], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 5, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 2, 9, 2], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0, 1, 2, 1, 0, 2, 1, 2, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 0, 2, 1, 2, 0, 2, 1, 0, 3, 3, 2, 2, 2, 1, 1, 1, 3, 0, 2, 0, 2, 3, 0, 0, 1, 2, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [4, 2, 2, 0, 3, 0, 1, 2, 1, 0, 0, 2, 4, 3], [0, 0, 2, 0, 0, 2, 1, 1, 0, 0, 2, 1, 0, 2, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 3, 3, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 5, 1, 1, 3, 2, 1, 0, 19, 19, 21, 1, 76, 24, 14, 13, 11, 4, 1, 0, 15, 5, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( ( saveOrd(s0[abs(i0):]) != i2 or True ) and getCharFromString(in2[:abs(( i2 + int(0.0) ))], ( ( min(i0, mod(( divInt(int(7.0),i1) + ( len(saveChr(( i2 * min(divInt(( int(5.0) + i1 ),divInt(max(int(7.0), i0),int(7.0))), int(1.0)) ))) + i0 ) ),i0)) * divInt(int(7.0),abs(( max(i1, i2) - ( ( int(7.0) - int(5.0) ) + divInt(int(8.0),i1) ) ))) ) + int(5.0) )) not in in0[int(0.0):min(i0, mod(int(4.0),( i2 * ( int(8.0) - i1 ) )))].rstrip()[min(abs(( divInt(divInt(int(59.0),int(9.0)),int(2.0)) + saveOrd((\"\"R\"\" + saveChr(i2)).capitalize()) )), divInt(i2,mod(len(in0),i0))):i0] ):{:\\ni2 = int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1, 0, 0], [], [1, 1], [], [0], [], [], [2, 1], [], [], [], [], [], [], [], [], [1], [0], [1, 2], [1, 1], [3, 1], [], [3], [1, 2], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1], [6, 6, 2, 8], [0, 2], [0], [1, 0], [], [], [1], [], [3, 5, 5], [], [], [4, 0, 0, 0], [2, 2, 1, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2.capitalize()\\ni0 = int(6628.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\ni1 = abs(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [], [], [], [], [], [], [], [1, 1], [9, 4], [1, 2], [0], [1, 1, 1], [], [], [], [1], [1, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0], [0, 2], [1], [0], [0], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [], [], [1, 2], [0], [0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [4], [], [], [0, 2], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = i1 \\ge i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 3], [5], [0], [0], [], [0], [], [], [], [], [], [2, 1], [1], [0, 0], [], [2], [1], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [0, 1], [1, 1], [0], [], [0, 1], [], [], [1], [], [3, 3], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 != int(11.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0, 0], [0], [], [2, 0, 3, 1, 1], [0], [1], [1], [], [5, 3], [], [], [4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(in0, ( i0 - max(int(0.0), int(0.0)) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1, 1, 2], [0], [0, 0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [5, 9], [0, 1, 2, 0], [1], [3, 3, 2, 1, 2, 0, 2, 0, 1, 0], [1, 1, 1], [0, 2], [2], [0, 1, 1], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 10, 3, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= min(abs(divInt(int(5.0),mod(i1,mod(i2,int(9.0))))), i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [2, 8, 4], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(284.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [2], [0], [0], [], [], [0], [2], [2], [], [5], [], [], [], [], [], [], [2, 0, 2, 1, 0], [], [0], [], [], [], [], [4, 1, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in saveChr(i2):{:\\ns1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 2, 2], [], [0], [], [], [2, 0], [], [0], [], [], [0], [], [1], [], [1], [8], [1, 0, 0, 0, 0, 1], [0], [1, 1, 3], [1], [4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [0], [1], [0], [2], [], [], [], [], [1, 1], [0, 2], [2, 0, 0], [], [2, 2, 0, 1, 1, 0], [0, 1], [], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( divInt(i2,int(0.0)) - int(2.0) ) \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 1, 1, 1, 2, 1, 0, 2, 2, 0, 0, 2, 2, 0, 1, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 0, 2, 2, 0, 1, 1, 2, 0, 1], [0, 2, 0, 0, 0, 0, 1, 0, 2, 1], [2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 0, 1, 2, 0, 2, 2, 2, 1, 2, 0, 0, 0, 2, 2], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 2, 0, 3, 0, 2, 1, 2, 3, 0], [0, 2, 1], [0, 0, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 2, 1], [0, 0, 0], [1, 1, 4, 4, 3, 0, 4, 2, 1, 1], [2, 1, 3, 3, 1, 0], [0, 0], [0, 1], [1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 9, 1, 8, 5, 8, 9, 7, 6, 2, 7, 0, 1, 5, 7, 8, 4, 6, 9, 2, 5, 4, 7, 6, 8, 0, 4, 2, 1, 9, 7, 0, 0, 8, 5], [0, 0, 0, 2, 0, 2, 0, 2, 2, 1, 1, 1, 1, 2, 0, 2, 2, 0, 1, 1, 0, 0, 1, 1, 1, 2, 0, 2, 1, 0, 1, 1, 1, 2, 1, 0, 0, 2, 0], [0, 1, 1], [0, 3, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 2, 1, 1, 3, 0, 0, 2, 3, 2, 3, 3, 0, 2, 2, 3, 0, 1, 3, 2, 1, 1, 1, 1, 1, 3, 2, 3, 0, 3, 0, 1, 0, 1, 0, 0, 2, 1, 0, 3, 1, 0, 3, 2, 3, 1, 3, 1, 2, 0, 3, 1, 0, 0, 1, 1, 3, 1, 1, 3, 3, 2, 2, 1, 1, 1, 3, 2, 3, 1, 3, 2, 1, 3, 1, 0, 3, 0, 2, 0, 0, 3, 2, 3, 3, 3, 0, 0, 3, 3, 1, 2, 0, 3, 3, 0, 3, 0, 0, 2, 1, 2, 3, 1, 1, 0, 1, 3, 2, 0, 3, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [3, 3, 2, 0, 4, 0, 3, 3, 0, 2, 1, 0, 4, 4, 1, 1, 1, 1, 0, 4, 2, 2, 4, 4, 2, 3, 0, 0, 4, 2, 4, 3], [2, 0, 2, 0, 1, 2, 0, 2, 0, 2, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 1], [2, 3, 4, 3, 4, 3, 2, 0, 2, 1, 0, 3, 2, 0, 2, 5, 2, 3, 4, 3, 3, 2, 2, 4, 4, 0, 2, 5, 5, 5, 3, 5, 0, 0, 3, 3, 1, 5, 1, 2, 3, 3, 5, 3, 3, 3, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 3, 3, 0, 0, 4, 4, 4, 0, 1, 4, 1, 4, 2, 2, 2, 0, 1, 4, 4, 1, 2, 1, 2, 0, 0, 4, 0, 4, 1, 0, 2, 4, 0, 0, 0, 0, 4, 4, 1, 1, 2, 0, 2, 1, 4, 2, 1, 4, 4, 1, 0, 2, 1, 2, 4, 3, 2, 0, 1, 1, 4, 0, 4, 0, 1, 2, 4, 3, 3, 4, 0, 1, 0, 1, 0, 2, 4, 3, 0, 0, 1, 0, 2, 1, 2, 1, 0, 0, 4, 4, 3, 0, 1], [1, 0, 2, 2, 1, 3, 3, 1, 2, 0, 3, 1, 1, 0, 2, 1, 3, 1, 1, 0, 2, 2, 1, 0, 1, 0], [3, 1, 4, 5], [0, 2, 0, 1, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2], [0, 2, 2, 3, 0, 2, 2, 2, 0, 3, 2, 3, 3, 0, 3, 0, 2, 0, 1, 2, 1, 3, 0, 0, 3], [8, 10, 1, 1, 14, 6, 1], [16, 7, 21], [8, 2, 0, 7, 6, 9, 1], [0, 4, 22, 13, 26, 27, 30, 9]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 6, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in0:{:\\nin1 = in0\\ni0 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = saveChr(len(in0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [0, 1, 1, 1], [0, 8, 9, 1], [2, 1], [1], [2, 2, 3, 1, 1, 3], [0, 0], [3], [1, 0, 2], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 5, 2, 1, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= ( ( len(s1) + int(08.0) ) * int(9.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [0, 2], [1], [0, 0, 3], [1], [], [2], [1], [], [], [], [], [], [], [1, 2, 0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 1, 0, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 0, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 1, 2, 0, 0, 1, 1, 3, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3, 2, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 10, 1, 3, 0, 1, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = getCharFromString(in1, max(i0, int(0.0)))[abs(mod(int(7.0),int(5.0))):] not in in0[i2:int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [2], [1], [0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 3, 3, 3, 9], [1, 2, 2, 0], [], [2, 2, 1, 2, 1, 2, 2, 3, 0, 0, 1, 0, 3, 0, 1], [1, 1, 1, 1, 1], [2, 0], [], [1, 1, 1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 15, 5, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = mod(mod(int(1.0),mod(int(3.0),divInt(mod(abs(i1),i2),int(3.0)))),i2) == min(i0, int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [2], [0, 0, 1, 0], [0], [3], [1, 3, 1], [1], [0, 0], [], [1, 1, 1, 1], [8, 5, 7, 1], [0, 2, 0], [1], [1, 1, 0, 2, 3, 1, 1, 0], [0, 1], [1], [1, 0], [], [5, 2], [1], [], [1, 2, 4], [1], [], [0], [3], [], [], [], [6]], "fitness": 31, "mapping_values": [1, 4, 4, 0, 4, 0, 2, 0, 0, 2, 1, 4, 1, 0, 3, 1, 2, 0, 2, 2, 2, 1, 3, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\ni0 -= int(8.0)\\nb1 = ( int(5.0) == i2 or True )\\nin2 = \"\"#\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [1], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += len(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 0, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 0, 2, 0, 2, 2, 1, 0, 3, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 1, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 11, 3, 2, 1, 2, 5, 0, 1, 9, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[len(in2):] != saveChr(mod(int(0.0),i0)).rstrip()[mod(int(7.0),int(0.0)):( int(7.0) * i2 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 6, 2, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 3, 1, 0, 2, 3, 3, 0, 2, 1, 1, 0, 1, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 3], [0, 0, 1, 1, 0, 2, 2, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 4, 2, 2, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [9], [0], [0], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0, 0], [0], [], [2, 0, 3, 1, 1], [0], [1], [1], [], [5, 3], [], [], [4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(in0, ( i0 - max(int(0.0), int(0.0)) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [1], [1], [0], [], [], [], [], [], [1, 1], [8, 8], [2], [1], [2, 1, 3, 1], [1], [4], [0], [1], [0], [], [], [0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = mod(int(8.0),saveOrd(s0)) \\g int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [0, 0], [], [], [0, 3], [0], [0, 1], [0], [], [1], [], [1], [], [], [], [1, 2], [0], [0, 2, 3, 0], [0], [4], [2], [], [1, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 2, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\nres0 = i1 \\l ( saveOrd(s1) * i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(in0), i0):]:{:\\nb2 = int(0.0) != abs(divInt(i1,int(2.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1], [0, 7, 8, 7, 7, 7, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 2, 1, 2, 1, 0, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 2, 1, 2, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 5, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 9, 8, 6, 3, 6, 1, 1, 15, 3, 2, 5, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1[len(in2):i0][i0:])]:{:\\nb1 = in0[:abs(mod(( int(0.0) + ( int(7.0) + min(i0, divInt(i2,( int(8.0) * i1 ))) ) ),divInt(len(saveChr(( i2 - min(max(( int(7.0) + i1 ), ( abs(int(7.0)) * i0 )), int(7.0)) ))),int(7.0))))].rstrip()[i0:i0] not in (\"\"R\"\" + in2.lstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 0], [], [0, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [1], [7], [0, 2, 0, 2], [0, 1], [2, 1, 3, 2, 3, 3, 0, 3, 0], [0, 1], [4, 2, 0, 3, 0], [1, 0], [1, 1], [3, 4, 3], [1], [], [0, 1, 3, 0, 0], [], [], [], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 2, 9, 2, 4, 2, 1, 1, 1, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( int(7.0) - saveOrd(in0) )\\ni2 += mod(abs(min(i0, len(\"\"u\"\"))),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [0, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [3, 2, 3], [], [0], [], [], [1], [], [1], [], [], [], [0, 0], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1, 0], [], [0], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [1], [1], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 4, 0, 7, 3], [2, 1, 1, 0, 2, 1], [], [0, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 0, 2, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0], [1], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1], [0, 1], [], [], [2, 2, 0], [], [0, 2], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 0, 15, 6, 0, 3, 3, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1[i2:( i1 + mod(int(1.0),( int(3.0) + divInt(i1,int(4.0)) )) )][:mod(( i0 * i2 ),int(0.0))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [2], [1, 1], [], [0, 0], [], [], [], [3], [0, 1], [0], [], [2], [], [], [], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [4, 6, 0, 1, 3, 9, 1, 6, 6, 4, 9, 8, 7, 6, 1, 9, 5, 2, 2], [2, 0, 1, 0, 1, 2, 1, 2, 0, 2], [0, 0, 1], [2, 2, 3, 2, 3, 3, 2, 0, 3, 1, 2, 2, 3, 1, 1, 2, 1, 0, 0, 2, 1, 2, 0, 1, 0, 1, 0, 1, 3, 1, 0, 2, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0], [1, 2, 1, 4, 2, 4], [1, 1, 2, 0], [1, 0, 1, 0, 1, 1], [], [1], [], [2, 4, 2, 1], [1], [], [1, 0], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 17, 17, 10, 2, 34, 10, 6, 4, 6, 0, 1, 0, 4, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(divInt(max(( abs(max(mod(i0,saveOrd(saveChr(int(4.0))[:divInt(mod(abs(int(60.0)),int(13.0)),( int(9.0) - i1 ))])), i0)) - ( int(1.0) * mod(i1,int(6.0)) ) ), i2),int(6.0)),i1)\\nloopBreak% = 0\\nwhile not int(4.0) \\ge saveOrd(\"\"U\"\"[int(987619.0):i2]):{:\\ni0 = ( int(5.0) + i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [2, 0, 2], [], [0, 0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 8, 9, 7, 0, 1, 2, 6, 7, 5, 5, 2, 0], [2, 1, 0, 1, 1, 2, 2, 2, 0, 1, 0, 0], [], [0, 1, 1, 0, 0, 2, 1, 0, 3, 3, 3, 1, 1, 3, 0, 0, 2, 0, 3, 2, 2, 0, 2, 0, 3, 2, 1, 1, 1, 2, 1, 2, 0, 0, 2, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0], [1, 3, 4, 2, 1, 1], [1, 1, 2, 0, 1, 1], [0, 1, 0], [2, 3, 2, 3, 1, 0, 2, 0, 5], [], [], [4, 2, 0, 2, 2, 2, 0, 0, 2, 3, 3, 4, 4, 0, 3, 0, 2, 3, 4, 2, 4, 0, 0], [2, 3, 2, 1, 0], [2], [0, 1, 1, 2, 2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 12, 0, 37, 9, 6, 6, 3, 9, 0, 0, 23, 5, 1, 7, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[i2:int(5.0)].capitalize()\\nb0 = int(68.0) == i1\\ns2 = in0[i0:][:divInt(int(9701.0),i1)][:max(len(s1), saveOrd(((s0.capitalize().strip() + (s2 + (saveChr(int(2.0)) + getCharFromString(s0, int(6.0))[:abs(i1)])[:i2])) + in2)[mod(i2,max(( divInt(i2,( i0 - max(( int(7.0) - int(5.0) ), int(5.0)) )) * ( int(2.0) + ( i1 - i0 ) ) ), ( int(0.0) - i0 ))):]))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [2, 0], [0], [0], [], [], [], [2], [3], [2], [0], [5], [], [], [], [], [1], [3], [0], [], [1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [], [], [], [0, 0], [], [], [0, 4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s0.endswith(s0.capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [0, 2, 1, 0], [0], [2, 3, 3, 0, 0, 0], [1], [0, 2], [1], [1], [5], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 6, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(min(abs(i2), i1),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1], [1, 2, 0, 1, 0, 0, 0], [2], [1, 0, 2, 2, 2, 2], [], [0, 0, 0, 0], [], [], [0], [2], [0, 0], [0], [], [1], [], [1], [], [0, 1, 1], [6, 2, 6], [0, 0, 1, 2, 0, 1, 1, 1], [0, 1, 0], [1, 2, 0, 0, 1, 1, 2, 0, 1, 0, 0], [0, 0], [4], [2, 1, 1], [], [0, 0, 1, 0, 3], [], [], [4, 0, 0, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(62.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [2], [0], [1], [0], [4], [], [], [], [], [0, 1, 0, 1], [0, 5, 5, 7], [1, 1], [1], [3, 1, 2, 0, 2, 2, 3, 0, 3, 3], [0, 1, 1], [2, 3, 4, 4], [0], [0, 1], [2, 5], [], [], [4, 4, 0, 0], [1, 2], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(int(05.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [1, 2, 2], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 0, 0, 1, 1, 1], [4, 9, 2, 6, 9, 5, 4, 8, 9], [0, 2, 0], [1], [1, 2, 2, 3, 1, 1, 2, 0, 2, 0, 0, 1], [1, 1, 0, 1], [0], [0], [0, 0, 1], [2, 2], [], [], [2, 0, 0, 2, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s2[int(49.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0, 2], [1], [0], [0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 0], [1, 0, 1, 2], [], [2, 0, 2, 0, 0, 2, 0, 1], [0, 0, 1], [], [0, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [0], [0, 0, 1], [0], [4], [3, 0], [1], [], [], [1, 1, 0, 1, 1, 1], [9, 4, 9, 2, 8, 3], [2, 1, 0], [], [1, 0, 0, 3, 2, 2, 3, 0, 3, 2, 1, 1, 1, 1], [1, 0, 1], [0, 4, 3], [0, 1], [0], [5], [], [], [0, 0, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( res0 or int(9.0) \\l i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [3, 3, 1], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [0], [0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 1], [3, 7], [2, 1], [], [3, 2, 1, 0, 1, 0], [1, 1], [0], [], [1, 1], [5, 2, 2], [], [], [4, 3, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = min(mod(int(3.0),i2), int(7.0)) \\ge i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 0], [2], [2, 2], [], [0, 0], [], [], [2, 3, 3], [3], [1, 0, 1], [0], [], [1, 0], [], [1], [], [1, 1], [9, 4], [1, 0, 0, 2, 2, 2, 0, 2], [], [0, 0, 3, 2, 3, 3, 3, 2, 3, 0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 0, 1], [0, 1, 1], [0, 1], [0, 0], [0, 4, 3], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = saveChr(i1)\\nin1 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [0], [0, 2, 1], [0], [4], [3, 0], [1], [], [], [1, 1, 0, 1, 1, 1], [9, 4, 9, 2, 8, 3], [2, 1, 0], [], [2, 0, 0, 3, 2, 2, 3, 0, 3, 2, 1, 1, 1, 1], [1, 0, 1, 0], [0, 4, 3], [0, 1], [0, 0], [5, 2], [], [], [0, 4, 0, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 5, 5, 3, 0, 14, 4, 3, 2, 2, 2, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( in2.startswith(saveChr(divInt(i2,i1))) or min(( divInt(saveOrd(s2),i0) + len(saveChr(( int(9.0) - int(4.0) ))) ), int(92.0)) \\l int(8.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [2, 2], [5], [0, 1], [0], [], [2, 0], [], [], [], [], [], [2, 2, 0, 0], [0, 0], [0, 0, 0, 0], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i2\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [0, 1], [], [0], [], [], [3, 0], [], [0], [], [], [0], [], [], [], [], [], [0, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 3, 2, 1, 0, 4, 0, 1, 0, 1, 4, 4, 2, 0, 2, 2, 2, 0, 4], [], [], [2, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 0, 1], [1, 2], [0, 1], [], [0], [], [], [2], [5, 0, 3], [1, 1, 1], [0, 0, 0], [1], [], [], [], [0], [1, 1, 1, 0, 1, 1, 1, 0, 1], [2, 4, 7, 9, 7, 4, 3, 6, 9], [2, 1, 1, 1, 0], [1], [0, 1, 1, 1, 2, 3, 1, 2, 3, 1, 3, 1, 3, 3, 3, 0, 0, 0], [1, 0], [1, 4, 3, 2, 1, 1], [1, 1], [0], [2, 2], [], [], [4, 0, 4, 0, 0], [2, 2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 1, 7, 7, 5, 1, 18, 2, 6, 2, 1, 2, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i2 != int(2.0):{:\\nloopBreak% = 0\\nwhile int(4.0) \\l int(7.0):{:\\nb2 = divInt(max(int(97.0), ( saveOrd(s2.capitalize()) - int(4.0) )),len(s2.capitalize())) \\ge int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 -= abs(max(max(i1, i1), i0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [0], [0], [0, 0], [], [1], [], [0], [], [0, 1, 1], [0, 3, 5], [1], [], [1, 1, 0], [], [], [], [], [3, 5], [], [0], [2, 2, 2, 0], [], [], [1, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 3, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2[:int(03.0)][int(5.0):][:i1]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [0, 0], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [0, 1, 2, 1], [1], [3, 3, 0, 0, 1], [0], [1, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 5, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= max(min(i1, i2), int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2], [0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [0], [0, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [0, 2, 2, 5], [], [], [3, 4, 4, 4, 0, 0, 0], [1, 3, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 6, 3, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (saveChr(i1) + s2.capitalize().rstrip(s2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 1, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 2, 1, 2, 0, 1, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 2, 3, 2, 1, 0, 2, 2, 1, 0, 2, 1, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 0], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = s1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2], [0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 1, 0, 2, 2, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 33, 11, 6, 4, 7, 4, 1, 0, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"R\"\"[:len(s0)] not in in2[mod(mod(int(0.0),i0),( i2 + int(7.0) )):divInt(int(5.0),len(in1.capitalize()[i2:i0]))][divInt(divInt(int(7.0),i1),( abs(( i2 + divInt(min(( len(in2) * i1 ), mod(min(int(6.0), i2),int(1.0))),int(7.0)) )) - i0 )):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [3, 4, 7, 9, 5, 0, 1, 6, 4, 0, 4], [2, 0, 2, 1, 1], [0], [3, 0, 1, 3, 0, 2, 3, 0, 2, 0, 1, 3, 1], [0, 1], [1, 1, 3, 2], [2], [1], [5], [], [], [2, 0], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(i0, int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [0, 1, 1, 1], [0, 8, 9, 1], [2, 1], [1], [2, 2, 1, 3, 1, 3], [1, 0], [3], [1, 0, 2], [0], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 5, 2, 1, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= divInt(( int(08.0) + len(s1) ),int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [9, 4, 7], [2], [0], [2, 1, 1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(int(9.0),int(47.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [0], [0], [], [], [1, 3], [5], [1], [0], [], [0], [], [], [], [0, 1], [9, 3], [0], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(93.0) != i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [2, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 1, 1, 0, 1, 4, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\ni0 = len(in1[:mod(i1,int(0.0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [0], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [3], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = getCharFromString(saveChr(int(0.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [0, 0], [], [0], [], [], [2, 3], [2], [1], [0], [], [0], [], [], [], [1, 1], [6, 0], [1, 0, 1, 1, 2], [0], [2, 3, 2, 0, 1, 0, 3, 2, 0, 1, 0, 0], [0, 1, 1], [4, 4], [1, 1], [1, 0], [2, 1, 4], [], [], [2, 2, 2, 0, 0, 0], [], [], [0, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 12, 3, 2, 1, 2, 2, 0, 0, 5, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( saveOrd(s2[mod(i1,int(6.0)):][i0:][saveOrd(s1):divInt(i1,int(0.0))]) - i1 ) == i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [], [0, 0], [], [], [1, 1, 3], [], [0, 0], [], [], [1, 0], [], [0], [], [], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [], [], [], [], [], [], [], [3, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [0, 2], [], [0, 2, 0], [], [0], [3, 0], [1], [], [], [0], [2], [2], [], [0, 0], [], [], [], [], [5, 4], [], [], [0, 4, 2, 0], [1, 2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1, 1], [0], [], [2], [], [], [], [1, 0, 1], [8, 9, 7], [2], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(8.0) \\ge i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 2, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = saveOrd(in1[( int(0.0) + i0 ):]) != ( i2 + int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0, 2], [0], [0, 0, 1], [0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 0], [1], [2, 0, 3], [1], [4], [0], [1, 0, 0, 0, 0, 0, 1, 0], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += mod(i0,saveOrd(s1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [1, 1], [6, 4], [2, 0, 2, 0, 0], [], [2, 2, 1, 0, 0, 2, 1, 0, 0, 0], [0, 0, 0], [1, 1], [0, 1, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 8, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( ( int(6.0) + i2 ) - i0 ) == ( int(4.0) - i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [3], [], [4], [1], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= saveOrd(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 1, 5, 4, 5, 9, 8, 0, 9, 4, 1, 6, 0, 9, 4, 3, 1], [1, 1, 0, 0, 1, 2, 0, 2], [1, 0], [1, 2, 1, 2, 0, 2, 3, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 0, 1, 3, 1, 2, 0, 1, 2, 3, 3, 1, 2, 1, 0, 3, 0, 2, 1], [0, 0, 0, 1, 0, 0], [0, 2, 0, 2, 3, 0, 2, 0, 0, 1, 2], [1, 0, 2, 0, 2, 0], [0], [0, 2, 4], [], [], [4, 2, 2, 2, 2, 4, 0, 0], [3, 2], [2], [0, 1, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 4, 1, 24, 4, 7, 4, 1, 3, 0, 0, 8, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2.capitalize()[int(2.0):( int(9.0) - ( i1 + ( min(abs(int(154.0)), min(int(5.0), abs(int(9.0)))) * len(in1) ) ) )][:int(8.0)][:min(int(0.0), i1)][int(9.0):abs(int(4.0))].strip()\\ni0 += divInt(i0,int(1.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 0, 2, 1, 0, 2, 1, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 14, 14, 12, 0, 50, 16, 8, 7, 9, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nb2 = ( ( i0 != mod(int(0.0),i2) or True ) and in1[mod(int(7.0),( divInt(int(5.0),max(i2, i0)) + divInt(divInt(int(7.0),i1),( abs(( i2 + divInt(min(( len(in0) * i1 ), mod(min(int(6.0), i2),int(1.0))),int(7.0)) )) - i0 )) )):].startswith(s0[i0:divInt(int(7.0),max(int(9.0), abs(i2)))].capitalize()[( ( ( int(8.0) + int(5.0) ) * mod(int(0.0),i0) ) - int(4.0) ):int(8.0)]) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [0], [0, 2], [0], [0, 0], [], [], [0], [0], [1], [0], [5], [], [], [], [], [1, 1], [3, 9], [0, 2], [], [1, 0, 1], [], [2], [], [], [4, 1, 5], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(3.0) \\l i0\\nin1 = saveChr(int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 0], [0], [0, 0], [0], [], [0], [], [], [], [1, 0, 1, 1], [9, 3, 4, 0], [], [], [1, 2, 1, 1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0, 1, 0], [], [1, 0, 1], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 9, 0, 9, 5, 8, 3, 4, 9, 2, 1, 7, 3, 4, 6, 6], [2, 1, 2, 2, 1, 0, 1], [1, 0], [1, 2, 2, 3, 1, 1, 0, 1, 2, 0, 2, 0, 3, 1, 1, 2, 3, 3, 1, 3, 1, 2, 0, 3, 1, 0, 2, 1, 1], [1, 1, 1, 0, 1, 1, 0], [0, 0, 4, 1, 1, 3], [1, 0, 0], [1, 1, 0, 0, 0], [4, 5], [], [], [0, 4, 3, 3, 4, 0, 4], [0, 1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 0, 0], [], [1, 1, 0, 0], [], [0, 0], [], [], [0, 2, 0], [5], [0, 1], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0, 0], [0, 1], [0, 0, 3, 2, 1, 2, 0, 1, 1, 1, 0, 2, 0, 0, 0, 2, 3, 0], [1, 0, 1, 0, 1, 1], [2, 0], [2, 0, 2], [0, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 0, 4, 0, 2, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 5, 2, 9, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\ni2 *= i0\\nb0 = b2\\nb0 = abs(divInt(int(7.0),( i1 + int(0.0) ))) != int(6.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 2, 2], [], [0], [], [], [2, 0], [], [0], [], [], [0], [], [1], [], [1], [8], [1, 0, 0, 0, 0, 1], [0], [1, 1, 3], [1], [4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 2], [1], [0], [2, 1, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = divInt(int(4.0),int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 1, 1, 0, 1, 4, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nin2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = mod(len(in1),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 8, 5, 3, 9, 9, 0, 7, 9, 0], [0], [1], [1, 0, 1, 3, 1, 1], [0], [1], [1], [], [3, 0, 2], [], [], [3, 0, 2, 0], [1], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (s0 + s2[int(3.0):i0])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [], [0], [], [], [2, 2], [2, 0], [1, 0, 1], [0, 0], [], [2], [], [], [], [1, 1, 1, 1, 1, 1], [1, 0, 0, 4, 8, 2], [0, 2, 0], [0], [0, 3, 2, 1, 1, 1, 3, 2, 1, 1, 2, 0, 1, 0, 0, 1], [0, 0, 1, 1], [1, 4, 4], [0, 1], [0, 1], [], [], [], [4, 0], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 2, 3, 2, 0, 1, 0, 0, 0, 6, 6, 2, 0, 13, 3, 2, 2, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 == max(( int(1.0) + int(0.0) ), int(0.0))\\nb2 = not saveOrd(saveChr(( int(4.0) - int(8.0) ))) \\l divInt(i2,int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [1, 0], [1], [0], [], [3, 3, 4, 0, 3, 0, 1, 2, 1], [1], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 10, 0, 33, 10, 7, 5, 5, 6, 0, 1, 11, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = in1[:len(in0)] not in s0[i0:i2].rstrip()[abs(mod(i0,int(0.0))):( int(7.0) * mod(i0,divInt(( divInt(int(5.0),i1) - ( abs(( i2 * len(saveChr(min(divInt(int(7.0),i1), ( max(int(7.0), i0) - int(5.0) )))) )) + i0 ) ),i1)) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [2, 0], [], [0, 0], [], [], [3, 2, 3], [], [], [], [], [], [], [], [], [], [], [1, 2, 1, 2, 2, 1], [1], [3, 2, 0, 0, 2, 0, 0], [0, 1], [4], [0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 0], [1], [], [0, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 4], [], [], [0], [2, 1, 3], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 6, 1, 13, 1, 3, 0, 1, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)][len(in1):]:{:\\nres0 = getCharFromString(saveChr(i0)[int(0.0):i2], mod(i2,int(7.0))) not in in0[int(5.0):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = max(i0, i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [3, 9, 6], [1, 2], [0], [1, 0, 0, 1], [], [2], [0], [], [1, 4, 1], [1], [0], [0, 4, 1], [0], [], [], [0], [9], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in1:{:\\ni1 = int(396.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [1], [], [2, 2], [0], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [4, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 3, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 1, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in0[saveOrd(in1):]:{:\\ns1 = in0[i0:max(int(0.0), abs(( i2 + int(7.0) )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 6, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 0, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 4, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0], [3], [], [4], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [1, 1, 3], [], [0, 0], [], [], [1, 0], [], [0], [], [1, 0, 1], [8, 4, 0], [2], [0], [2, 2, 1, 3, 1], [0, 1], [4], [1], [0], [3, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 3, 3, 1, 1, 5, 2, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\ni2 = ( divInt(int(8.0),saveOrd(in0)) - int(40.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [], [1, 2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [4, 7, 4, 5, 8, 9, 8, 2, 7, 7, 9, 9, 6, 4, 2, 3, 6, 9], [1, 2, 2, 2, 1, 2, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0], [1, 2, 2, 0, 0, 3, 2, 2, 0, 2, 2, 2, 2, 0, 3, 0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 2, 0, 0, 2, 3, 2, 1, 1, 3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 0, 1, 1, 0, 3, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0], [1, 4, 1, 0, 1, 1], [2, 1, 1, 2, 2, 1, 0, 2, 0, 2, 0, 1, 0], [0, 0, 1, 1, 0, 0, 1], [5, 0], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 16, 2, 51, 19, 6, 13, 7, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(47.0)\\nin2 = saveChr(( ( i2 - i2 ) - max(( divInt(i2,divInt(( ( mod(i1,saveOrd(s0)) * i2 ) * i1 ),( mod(i1,( int(4.0) - int(5.0) )) + divInt(( ( i0 * i0 ) + divInt(max(( int(8.0) * int(9.0) ), min(max(( int(8.0) + i0 ), mod(int(2.0),int(7.0))), ( int(7.0) - i1 ))),int(9.0)) ),int(9.0)) ))) + i0 ), max(i0, int(642369.0))) ))\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [2], [], [2], [], [], [], [], [0, 1], [3, 8], [0], [1], [1], [], [], [0], [], [3, 0], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in0 == s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [], [2, 0, 0], [0], [], [0], [], [2, 5], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 1, 0, 1, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2[:( i0 + i1 )].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [8, 2], [1], [0], [1], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(82.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 6, 0, 3, 0, 0, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1[len(in0):i0][i2:] not in saveChr(abs(int(0.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1], [4], [2, 0, 1, 0, 2, 0, 2], [1], [3, 2, 2, 2, 2, 0, 0, 3, 1, 2, 0, 0, 2, 0, 0], [1, 0, 1, 0, 0, 1], [1, 3], [0, 0, 2, 0], [0, 1, 1], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 7, 1, 15, 6, 2, 4, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += max(divInt(( mod(( i0 + i1 ),len(in1)) * int(4.0) ),( i0 + i2 )), mod(i0,i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [1], [], [1, 1], [0, 8], [], [], [1, 1, 3, 1], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\g int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [1, 1, 0], [], [0], [], [], [0, 2, 1], [4], [0, 1], [0], [], [0], [], [], [], [1, 1, 1, 0, 1, 0, 1], [7, 0, 6, 9, 1, 2, 7], [2, 0, 2, 0, 1, 1, 0], [1, 1], [0, 0, 3, 2, 2, 2, 1, 2, 1, 1, 1, 2, 3, 0, 0, 0], [1, 0, 1, 1, 0], [2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\ni2 += i0\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0], [1, 0], [1], [0], [], [0], [], [], [0], [5], [1, 0], [0], [], [1], [], [1], [0], [1, 0], [7, 7], [1], [], [1, 0, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(7.0) != i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [1, 5], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 2, 3], [2, 1, 1, 0, 2, 1], [], [3, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 0, 2, 1, 1], [1, 1, 0, 1, 1, 0, 1, 0], [1], [0, 0, 1, 0, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1], [2, 1], [], [], [4, 2, 0], [2], [0, 2], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 15, 6, 1, 2, 4, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1[:max(mod(i2,divInt(int(1.0),( int(3.0) + mod(i1,int(9.0)) ))), mod(( i1 + i0 ),int(4.0)))].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [], [], [], [3, 2, 3], [], [2, 0, 1, 0, 2, 0], [0, 0], [], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 4, 9, 8, 1, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 2, 2, 0, 1, 2, 1, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 0, 2, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 1, 1, 2, 1], [], [1, 1, 1, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 2], [0], [22], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 10, 2, 3, 0, 2, 5, 0, 1, 8, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nin1 = in0[len(saveChr(mod(int(0.0),max(mod(int(7.0),int(5.0)), int(7.0))))[int(2.0):].rstrip()):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 8], [2, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [0, 1], [1], [0, 0, 2], [1], [], [2, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4, 1, 0, 2, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0[i2:]\\ni1 += ( i1 - i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [], [], [1], [], [], [], [], [2, 5], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2[:int(1.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [], [0, 0], [], [], [0, 0], [2], [0, 1], [0], [], [1], [], [0], [], [0, 1], [2, 3], [1, 1], [], [0, 0], [], [2], [], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\nb0 = i1 == i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [0], [0, 2], [], [3], [1], [], [0], [], [], [], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = min(i0, ( i2 + i1 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [2], [1, 1], [], [0, 0], [], [], [], [3], [0, 1], [0], [], [2], [], [], [], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [4, 6, 0, 1, 3, 9, 1, 6, 6, 4, 9, 8, 7, 6, 1, 9, 5, 2, 2], [2, 1, 1, 2, 1, 2, 1, 2], [0, 1, 1], [1, 2, 0, 2, 3, 3, 2, 0, 0, 1, 2, 2, 3, 1, 1, 1, 1, 0, 2, 2, 1, 2, 0, 1, 1, 1, 1, 1, 3, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1], [1, 2, 1, 4, 2], [1, 1, 2, 0, 0], [1, 0, 1, 0, 1, 1], [], [], [], [2, 4], [1], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 17, 17, 7, 2, 25, 8, 3, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(4.0)\\nloopBreak% = 0\\nwhile not ( i1 - mod(max(abs(( i1 - i2 )), int(60.0)),divInt(mod(max(int(13.0), int(9.0)),int(1.0)),int(6.0))) ) \\ge i1:{:\\ni2 *= divInt(( int(6.0) + ( i1 + int(4.0) ) ),int(9876195.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 7, 3, 9, 7, 1, 7, 3, 7, 5, 0, 4, 4, 1, 3, 6, 8, 5, 9, 4, 4, 0, 1], [2, 2, 1, 0, 2, 1, 2, 0, 0, 2, 0, 2, 2, 0, 1, 0, 2, 0], [1], [1, 2, 2, 3, 2, 2, 2, 3, 3, 2, 3, 3, 2, 3, 2, 0, 3, 0, 1, 3, 0, 1, 2, 3, 0, 0, 2, 2, 0, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 1, 3, 0, 1, 0, 0, 3, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 3, 1, 3, 3, 1, 2, 1, 3, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 3, 1, 3, 4, 1, 4, 3, 4, 0, 1, 2, 4, 3, 4, 4, 2, 1, 3, 1, 3, 2, 2], [2, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0], [], [4, 5, 2, 0, 4, 5, 3, 1, 4], [1, 0, 0, 1, 1, 1, 1, 1], [0], [1, 1, 2, 2, 1, 4, 2, 0, 0, 4, 0, 2, 1, 2, 4, 2, 1, 0, 0, 2, 1, 4, 0, 1, 0, 1], [3, 0, 0, 2, 1], [5, 3], [0, 2, 0, 0, 1, 0, 1], [3, 3, 0, 2, 0, 3, 2, 2], [20], [10], [5, 6, 4], [6, 24, 11]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [2], [0], [0], [], [1], [], [0], [], [0, 0, 1, 0, 0, 0], [1, 8, 8, 8, 1, 2], [2, 0, 2, 1, 0], [], [3, 1, 1, 0, 3, 2, 3, 2, 0, 0], [1, 1], [2, 1], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [2], [2], [1], [0], [], [], [], [], [], [1], [3], [1], [1], [1, 0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [0, 0], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [1], [0], [3, 1], [], [2], [0], [], [0, 4, 5, 1], [], [0], [4, 4, 0, 0], [3, 2], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in1.capitalize().strip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1], [3, 8, 5, 3, 8, 9, 0, 7, 9, 0], [0], [1], [1, 2, 1, 3, 1, 1], [0], [1], [2], [], [3, 4], [], [], [3, 0, 2, 4], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 6, 1, 1, 1, 0, 2, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (in1 + saveChr(int(3.0))[( int(8.0) * max(int(5.0), int(3890.0)) ):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [3], [0], [1], [1], [], [], [2], [], [0, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 1], [0, 8, 9, 1], [2, 1], [1, 1], [3, 2, 1, 1, 1, 3], [0, 0], [3], [1, 0, 1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 4, 1, 1, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= len(s1)\\ni1 += ( int(0.0) - int(8.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 1], [1], [2, 2], [], [0], [], [], [2], [1], [2, 2, 1], [0], [0], [2], [], [], [0], [1, 0, 1], [5, 9, 5], [1, 2], [1], [1, 0, 3, 0], [], [3, 4], [1], [], [1, 3, 4, 5, 3, 2], [], [], [2, 2, 0, 0, 0, 0, 1], [0, 1, 3], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in0[:int(5.0)][:i1]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [], [1, 3, 2, 0, 2, 3, 3, 1, 2, 1, 0], [0, 0, 0], [1, 3, 2], [0, 0, 2], [1], [2, 2, 2, 5], [], [], [3, 0, 4, 4, 0, 0, 0], [3, 0, 3], [5], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 6, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (s2 + getCharFromString(s2, int(5.0)).strip(in2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [2], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [], [0], [], [], [1], [0], [1, 0], [0], [], [1], [], [1], [0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [7, 4, 0, 9, 6, 7, 3, 6, 9, 5, 8], [1, 2, 1, 2, 1], [], [1, 1, 0, 1, 0, 2, 3, 0, 2, 2, 0, 2, 1, 2, 1, 3, 0, 3, 1, 0], [1, 0, 1, 0, 0, 1, 0], [2, 1, 2], [1, 2, 2, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 7, 7, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(740967.0) \\l int(3.0):{:\\nb1 = False\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 2], [0], [2, 0, 1], [1], [], [1], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(i2,int(5.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 0, 1], [], [0], [], [], [1], [2], [1], [0], [], [], [], [], [], [1, 0, 1], [6, 9, 0], [1, 0, 0, 1, 1, 2, 2, 1], [1, 1], [3, 2, 1, 0, 0, 2, 3, 0, 0, 0, 1, 0], [0, 1], [1, 1], [2, 1, 0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 8, 2, 12, 2, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= max(( int(6.0) - i0 ), i0)\\nb1 = mod(max(i1, i1),i2) == int(90.0)\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = int(0.0) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1], [1, 2, 0, 1, 0, 0, 0], [2], [1, 0, 2, 2, 2, 2], [], [0, 0, 0, 0], [], [], [0], [2], [0, 0], [0], [], [1], [], [1], [], [0, 1, 1], [7, 2, 6], [1, 0, 1, 2, 0, 1, 1, 1], [0, 1, 0], [1, 2, 0, 0, 1, 1, 2, 0, 1, 0, 0], [0, 0], [4], [2, 1, 1], [], [0, 0, 1, 0, 3], [], [], [4, 0, 0, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(72.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 0], [5], [0, 0], [0], [], [2, 0], [], [], [], [1, 1], [2, 4], [2, 0, 0, 0], [1], [0, 1, 0, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [3, 0, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 11, 2, 5, 2, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[min(abs(i0), min(( int(0.0) + int(7.0) ), ( int(5.0) + len(in0) ))):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 4, 9, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 0, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4], [1], [0], [2, 0, 4, 4, 0, 0, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString(saveChr(len(s1)), i0)):]:{:\\nin1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [1], [], [0], [], [], [], [2, 5], [1, 1], [0], [], [2], [], [], [], [1, 0, 1], [7, 4, 3, 2, 7, 4, 8, 2, 4, 4], [2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [1], [1, 0, 2, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [3, 3, 1, 0, 3, 0, 1, 2, 1], [2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [2, 1, 3, 4], [1], [], [0, 2, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0], [3, 2, 2, 3, 0, 0, 2, 1], [0, 2], [1, 1, 1], [1], [], [24], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 1, 7, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(7.0) == i2:{:\\ni0 *= ( ( int(43.0) + i2 ) - i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 1, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in0), i0):]:{:\\nres0 = in1[:i2] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 0], [2], [1, 0], [], [0, 0], [], [], [0, 3, 3], [3], [1, 0, 1], [0], [], [1, 0], [], [1], [], [], [], [0, 2, 1, 0, 0, 2, 2], [0], [0, 0, 0], [], [], [], [], [0], [], [], [4], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\nb0 = i1 \\ge i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 8, 1, 3, 0, 1, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1)]:{:\\nres0 = i0 != int(7.0)\\ni0 = abs(mod(i2,int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1], [0, 6, 2, 8], [2], [0], [1, 0], [], [], [1], [], [3, 5, 5], [], [], [4, 3, 0, 0], [2, 2, 1, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (in2 + in2).capitalize()\\ni2 = int(06.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 1], [2, 0, 1, 1], [0], [1, 2, 1, 1], [0], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [9, 9], [1, 0, 2, 2, 1, 1, 1], [0, 0, 0], [0, 2, 0, 0, 2, 1, 3, 2, 1, 3], [0, 1, 1], [4, 3], [2, 1, 1], [0, 1], [0, 4, 1, 4], [], [0], [4, 4, 4, 0, 0], [1, 2, 1, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 2, 10, 3, 2, 1, 2, 4, 0, 1, 5, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in saveChr(i1):{:\\ni0 = ( i2 * i2 )\\nin1 = saveChr(divInt(int(9.0),saveOrd(s1))).capitalize()\\ni1 = mod(int(9.0),len(in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [], [], [1], [], [], [], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:int(6.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 0, 8], [2, 1], [0], [3, 1, 2, 3, 1, 1, 1, 0], [0], [2, 0, 0], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(int(1.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1], [5, 1, 2, 6, 8, 8, 2, 5, 0, 8, 4, 1, 8, 5, 0, 1, 2, 4, 2, 9, 2], [2, 0, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0], [0], [0, 3, 0, 1, 0, 2, 0, 2, 3, 1, 2, 0, 3, 0, 2, 0, 0, 0, 0, 2, 2, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0], [4, 1, 0, 3, 2], [1, 2, 2, 2], [0, 1, 1, 0], [3, 4], [], [], [4, 2, 2, 2, 4, 0, 4, 2, 4], [2, 0, 2, 1], [], [0, 0, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 12, 0, 25, 6, 3, 3, 3, 2, 0, 0, 9, 4, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = getCharFromString(in1, i2)[saveOrd(saveChr(i0)[int(5.0):i2].capitalize()):][( i1 - ( max(int(1.0), divInt(i0,min(i2, mod(i2,i2)))) * i2 ) ):i2][mod(( i1 * int(26.0) ),i0):int(8.0)].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [0], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 2], [2], [2, 2], [], [0], [], [], [], [], [0, 2], [], [2], [2], [], [], [0], [], [], [], [], [], [], [], [], [], [1, 4, 1, 4, 3], [0, 0, 0, 1], [], [0, 0, 3, 0], [], [], [], [3, 3, 0, 3], [], [], [], [5, 24, 8, 23]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1\\ns1 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 2], [], [0], [], [], [0], [], [], [], [1, 1], [4, 5], [0, 0], [1], [2, 0, 1], [0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 2], [], [], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [3, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\nin0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 0, 0, 0, 1, 0, 2, 0], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 2, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 4, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 2, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 1], [4, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 14, 1, 50, 17, 9, 9, 8, 5, 1, 0, 15, 4, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile (s0 + in0) not in in1[len(in1):]:{:\\ni0 = len(saveChr(i2)[mod(abs(( i0 + int(0.0) )),( int(7.0) + min(i1, divInt(( divInt(int(5.0),i1) * ( saveOrd((\"\"R\"\" + saveChr(( i2 - max(divInt(( int(7.0) + i1 ),divInt(max(int(8.0), i0),int(1.0))), i0) ))).lstrip()) * i0 ) ),i1)) )):].rstrip(s2)[divInt(int(7.0),abs(( max(i0, ( ( mod(int(7.0),int(9.0)) - divInt(int(8.0),i2) ) - int(5.0) )) * i0 ))):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 3, 1, 2, 5, 0, 1, 10, 3, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\nb0 = in1.capitalize()[len(saveChr(divInt(int(0.0),i0))):] not in in0[mod(i2,int(7.0)):( int(5.0) + abs(i2) )].rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 1], [], [], [], [], [0], [5], [0, 0], [0], [], [2], [], [], [], [1, 1, 0, 0, 1, 1], [3, 1, 5, 0, 6, 2], [0, 0, 1, 2, 2], [0, 1], [2, 3, 1, 1, 0, 3, 0, 3, 3, 1, 0, 2, 0, 1], [0, 0], [0, 0, 0, 2, 0], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 5, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( min(int(3.0), int(1.0)) - i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1, 3], [5], [1], [0], [], [0], [], [], [], [0, 1], [7, 5], [0], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(75.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [4], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = getCharFromString(saveChr(int(0.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 5, 9, 2, 2], [0, 2, 2, 0, 1, 0, 0, 2, 1, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 3, 1, 0, 1, 1, 0, 0, 0, 1, 3, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 1, 2, 1, 1, 2, 2, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 1, 0, 1, 3, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 36, 8, 10, 7, 1, 5, 0, 1, 11, 4, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in getCharFromString(in2, len(in1[len(in1):]))[i0:]:{:\\nres0 = saveChr(i2)[max(mod(i2,int(0.0)), ( int(7.0) + min(len(in0.rstrip()), ( ( ( int(5.0) + i0 ) * ( min(( i1 - max(abs(( int(7.0) + i0 )), max(max(int(7.0), i0), int(1.0))) ), int(7.0)) * i2 ) ) - i1 )) )):i0] == saveChr(int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [1, 0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [0, 6, 2, 0, 0, 4, 3, 0, 7, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 3, 2, 2, 3, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [2, 1], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [4, 0], [1], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 0, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0], [1, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 13, 3, 3, 1, 2, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:max(min(mod(int(0.0),i0), divInt(i2,int(7.0))), ( i2 + abs(i0) ))]:{:\\nres0 = in1 not in in1[i1:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [0], [2], [0], [0], [], [], [0], [2], [2], [], [5], [], [], [], [], [], [], [2, 0, 2, 1, 0], [], [0], [], [], [], [], [4, 1, 0], [], [0], [0, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [0, 1, 1, 1], [], [1, 1, 2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 1], [0, 3, 2, 2, 5], [0, 1, 1, 1, 1, 0, 2, 1], [1, 1], [1, 3, 2, 0, 1, 2, 0, 3, 2, 2, 0, 0, 3, 1, 0, 1], [0, 1, 1, 0], [4, 1, 0], [0, 2, 2, 2], [0, 0], [0, 3, 2], [1], [], [2, 0, 4], [], [], [0], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 7, 2, 16, 4, 3, 4, 2, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(0.0)\\ni1 *= saveOrd(s0[( i1 * int(32.0) ):divInt(i1,max(divInt(( i1 * i0 ),min(int(2.0), i2)), int(5.0)))])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [0, 1], [1, 1], [0], [], [0, 1], [], [], [1], [], [3, 3], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 != int(11.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [2, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [1], [3, 0, 1, 1], [], [2], [1], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:abs(i0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 9, 1, 5, 4, 5, 9, 0, 3, 9, 4, 1, 4], [1, 1, 0, 0, 2, 2], [1, 0], [1, 2, 2, 2, 0, 2, 3, 3, 1, 1, 1, 0, 1, 3, 3, 3, 1, 0, 1, 3, 1, 0, 0, 3], [0, 0, 0, 1], [0, 2, 3, 2, 3, 0, 2, 0], [1, 0, 2, 0], [0], [0, 2], [], [], [4, 0, 2, 2, 2, 4, 0], [3, 2], [1], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(29.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [2], [0, 1], [], [], [], [], [2, 3], [1], [0, 1], [0], [], [0], [], [], [], [], [], [1, 2, 2], [1], [0, 0, 3], [], [3], [1], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b2:{:\\nres0 = i1 \\g i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [4, 2, 8], [0, 0], [1], [2, 1, 0], [1], [], [1], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= divInt(int(4.0),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 1], [], [0, 0], [], [], [3, 2, 3], [], [], [], [], [], [], [], [], [], [], [1, 2, 1, 2, 2, 1], [0], [2, 2, 0, 0, 2, 0, 0], [0, 1, 1], [4], [0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 0], [1], [], [0, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 7, 3, 0, 1, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in0\\ni1 = ( mod(i2,i1) + mod(i2,i2) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [0], [], [], [], [1, 1], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [2], [0, 1, 0], [0], [4], [2, 0], [1], [], [], [1, 0, 0, 1], [3, 4, 8, 5], [2], [], [1, 1], [], [], [], [], [], [], [], [4, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 4, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not int(3.0) == int(485.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1], [8], [2, 2, 1], [1], [0, 1, 3, 3, 0, 0, 0], [1, 1], [0, 3], [0], [0, 1], [0], [], [], [1, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [1], [1], [1], [0], [], [], [], [], [0], [1], [1], [1], [0], [3, 3, 1, 0], [], [4, 4], [0], [], [1, 4], [], [], [0, 4, 4], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [9, 7, 2], [1, 0, 1], [1, 0], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\ni1 = int(972.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 7], [1], [0], [1], [], [], [2], [], [5, 0], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(47.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [0, 0, 1], [4, 9, 5], [1, 2], [0], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\ge int(495.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0], [], [1, 1, 0], [], [0], [], [], [0, 2, 1], [5], [0, 2], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0], [0, 1], [0, 0, 3, 2, 2, 2, 2, 2, 1, 0, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [2, 0], [1, 0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\ni2 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [], [1], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 0, 1, 1], [9, 5], [2], [0], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [1], [0], [1], [0], [], [], [], [], [], [1, 1], [3, 7], [0], [], [0, 1, 0, 0], [], [0], [], [], [2, 0], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\nb1 = i0 \\l int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [0], [0], [0], [], [1], [], [1], [], [1], [0], [0, 2], [], [2, 0, 1, 0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [1, 1], [6, 4], [2, 2, 2, 0, 0], [], [2, 2, 1, 0, 0, 1, 1, 2, 0, 0], [0, 1, 0, 0], [1, 1], [2, 1, 2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( mod(int(6.0),i2) * i2 ) == int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [1, 0], [1], [0], [], [], [2], [], [4, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 2], [1, 0, 1, 2], [0], [3, 3, 3, 2, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1], [1, 2, 2, 1, 2], [2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 12, 2, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = max(abs(abs(( max(divInt(i0,int(5.0)), i1) * int(7.0) ))), abs(i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 1, 0], [2], [0, 0, 2], [], [0], [], [], [1, 2], [2, 1], [1, 0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1], [0, 8, 9, 8, 5], [1, 2, 0, 1, 2, 1, 2, 2], [], [2, 0, 3, 1, 2, 1, 0, 2, 0, 3, 1, 3, 0, 3, 0, 0, 1, 3, 0, 2, 2, 0, 1, 1], [0, 1, 0, 0, 0, 1], [4, 1, 4, 0, 1, 2], [2, 0, 2, 1], [1, 1], [1, 1], [1], [], [0, 1], [], [], [], [0], [16], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( i1 * saveOrd(s1) ) == int(0.0):{:\\nb1 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [5, 6], [1, 2], [0], [2, 0, 1], [0], [], [1], [], [], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = ( i2 - int(56.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [1, 1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 6, 4, 8, 0, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 2, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 3, 3, 0, 2, 1, 0, 3, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 2, 1, 2, 1, 0, 1, 3, 0, 2, 3, 1, 2, 3, 0, 2, 2, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 1, 3, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nb2 = ( ( len(in1[i0:]) != i2 or True ) and in0 not in \"\"R\"\" )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 1, 2, 0, 0, 2, 3, 2, 0, 1, 3, 2, 2, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 14, 14, 12, 0, 50, 15, 9, 7, 8, 6, 1, 1, 15, 4, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1.rstrip()[i2:]) != int(0.0) or True ) and saveChr(abs(mod(i0,int(7.0))))[mod(int(5.0),min(i2, ( int(7.0) + divInt(i0,i1) ))):( len(in0[divInt(i2,int(2.0)):min(( ( i1 + divInt(max(int(1.0), i2),int(7.0)) ) * divInt(i0,i0) ), mod(int(7.0),abs(int(9.0))))]) - max(i1, divInt(( ( int(8.0) + int(5.0) ) * ( int(0.0) - i1 ) ),int(4.0))) )] not in (\"\"R\"\" + getCharFromString(s0, int(8.0))).lstrip() )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [], [], [0, 1], [0], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [], [0], [], [], [2], [], [2], [], [2], [], [], [], [], [0, 1, 0, 0, 1, 1], [0, 3, 1, 2, 2, 6], [2, 0, 2, 2], [1, 1], [0, 0], [1, 0], [], [0, 1, 0, 2], [0], [2], [1], [], [1, 0], [], [], [], [3], [], [], [], [14]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\nb2 = \"\"+\"\" == s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [3, 6, 8], [1], [0], [1, 1, 3], [], [1, 4], [1], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(368.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [0], [1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [3, 1, 6], [1, 2], [1], [1, 0, 0, 1], [], [2], [2], [], [1, 4, 1], [1], [0], [2, 4, 1], [0], [], [], [0], [9], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(316.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [3], [1], [0], [], [], [], [], [], [0, 1, 1], [9, 4, 3], [1, 2], [0], [1, 1, 1], [1], [], [], [1], [1, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(94.0) \\ge int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [3, 8, 8], [2, 1], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [3, 3, 0, 2, 0, 3, 2, 2], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(388.0) \\le i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [2, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 2, 2, 2, 0, 1, 0, 2, 3, 3, 2, 2, 3, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 13, 0, 53, 16, 10, 6, 10, 6, 1, 0, 14, 3, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[len(s0):]:{:\\nin0 = getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(int(5.0),min(( divInt(( i2 + int(7.0) ),i0) + divInt(len((\"\"R\"\" + saveChr(min(divInt(( max(divInt(int(2.0),i1), ( mod(int(1.0),i2) * int(7.0) )) - int(7.0) ),i1), i2))).capitalize()),divInt(max(max(int(9.0), max(i0, divInt(( divInt(int(8.0),int(5.0)) + ( int(0.0) * i0 ) ),int(4.0)))), i0),i1)) ), int(8.0))):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 9, 1, 5, 3, 5, 8, 0, 3, 9, 4, 1, 4], [1, 1, 0, 0, 2, 2], [1, 0], [3, 2, 2, 2, 0, 2, 3, 3, 1, 1, 1, 0, 1, 3, 3, 3, 1, 0, 1, 3, 1, 0, 0, 3], [0, 1, 0, 1], [0, 2, 3, 2, 3, 0, 2, 0], [1, 0, 2, 0], [0, 1], [0, 2], [], [], [4, 0, 2, 2, 2, 4, 0], [3, 2], [1], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 4, 2, 13, 4, 3, 3, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= min(( divInt(( i1 + mod(abs(len(s0.rstrip())),int(29.0)) ),int(1.0)) * int(53.0) ), i0)\\ni0 = int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1, 3, 2, 1, 1, 3, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 0, 4, 0, 0, 1, 4, 4, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 13, 0, 58, 17, 12, 9, 8, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(max(i0, i2), max(mod(i2,int(0.0)), ( ( min(int(7.0), divInt(( divInt(int(5.0),i0) + ( saveOrd(in1) + ( i1 * min(min(divInt(int(7.0),i2), ( max(int(7.0), i1) - int(1.0) )), int(7.0)) ) ) ),i2)) + i0 ) * divInt(int(7.0),saveOrd(in1[divInt(saveOrd(s1),i0):])) ))):]:{:\\nres0 = getCharFromString(s0[( ( ( int(9.0) - int(8.0) ) - mod(int(5.0),i2) ) * int(0.0) ):int(4.0)], int(8.0))[max(divInt(int(59.0),int(9.0)), saveOrd(saveChr(i2))):i2] not in (\"\"R\"\" + in1.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 0, 1], [], [0], [], [], [1], [2], [1], [0], [], [], [], [], [], [1, 0, 1, 1], [6, 7, 0, 7], [2, 0, 2, 1, 0, 1, 2, 1], [0, 1], [3, 2, 1, 1, 0, 2, 3, 0, 0, 0, 1, 0], [1, 1], [1, 1], [2, 1, 0], [1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 7, 2, 12, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(mod(int(6.0),int(70.0)), i0)\\nb1 = mod(max(i2, i1),i0) == int(7.0)\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [0, 0], [], [1], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [1, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1], [7], [2], [1], [1], [], [], [0], [], [5], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 2, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 3, 0, 0, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = getCharFromString(s0, saveOrd(s0[len(in1):]))[i1:] not in saveChr(int(3.0))[abs(mod(i1,int(7.0))):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 2], [0], [1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [1], [5], [1, 2, 2], [0], [2, 0, 0, 1], [0], [2], [0, 1], [], [1, 4, 1], [1], [0], [0, 4, 1], [0], [], [], [0], [9], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = ( i2 + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 2, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [3, 3, 1], [], [], [], [1, 1], [4, 9], [0, 2], [1], [3, 2, 0, 1, 3, 0], [0], [2, 3, 2], [1, 0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 0, 1], [], [0], [4, 4, 0, 0], [3, 0], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 2, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(in1, abs(( i0 - int(4.0) ))).rstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 1, 3, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 4, 4, 3, 0, 11, 0, 4, 0, 0, 6, 1, 0, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in0):] == in1:{:\\nres0 = ( len(s1) != i0 or ( getCharFromString(in0[int(0.0):abs(int(7.0))], i1)[int(5.0):i2][:int(7.0)].endswith(saveChr(saveOrd((\"\"R\"\" + s1.rstrip())))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 3, 8, 5, 9, 9, 2, 2], [0, 0, 1, 2, 1, 1, 1, 1, 1, 2, 1, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 5, 0, 13, 2, 3, 0, 2, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1[min(i0, int(0.0)):].capitalize()):]:{:\\nres0 = in1 not in saveChr(i0)[mod(i1,int(4.0)):mod(int(5.0),len(in0[i2:i1]))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1], [2, 0, 0, 0], [2], [0, 0, 1], [], [0, 0, 0], [], [], [3, 3], [0, 5], [1, 0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1], [2, 1, 3], [1, 2, 1, 0, 2], [1], [1, 1, 0, 2, 0, 0, 3, 0, 3], [0], [0, 3], [2, 1], [], [2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 0, 3, 0, 0, 2, 2, 3, 2, 0, 1, 0, 1, 0, 2, 2, 5, 1, 9, 1, 2, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(2.0) \\l int(1.0):{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = i1 != ( i2 * i1 )\\ni0 -= min(i2, len(s2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [1], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 5, 1, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += max(len(s0), mod(int(0.0),i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [], [], [0, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [1, 1, 0, 0], [], [0, 0, 0, 2], [], [0, 0], [], [], [1, 1], [], [2, 0], [0, 0], [3], [1], [], [], [], [1, 0, 1, 1, 0, 0, 0, 1], [8, 5, 7, 1, 5, 9, 4, 1], [0, 2, 0], [1], [1, 1, 3, 2, 3, 1, 1, 0], [0, 1], [1, 3], [1, 2], [], [5, 2], [1, 0, 1], [], [1, 2, 4, 2, 0, 2, 1], [3], [2], [0, 1, 1], [3, 0, 3], [5], [], [], [6, 18]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 1, 0, 8, 1, 2, 1, 0, 1, 3, 0, 7, 1, 1, 3, 3, 1, 0, 0, 2], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = \"\"#\"\" != in2[:int(8.0)].strip()[int(57.0):max(( len(\"\"F/\"\"[:int(1.0)]) - int(5941.0) ), i0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [1], [1, 1], [0], [0], [], [], [3], [], [0], [0], [], [0], [], [], [0], [0, 0, 1, 0, 1, 1, 1], [4, 8, 1, 4, 5, 0, 9], [0, 0, 0, 2, 0, 0], [1, 0], [3, 3, 1, 2, 3, 0, 1, 3, 2, 2, 3, 1, 3, 1, 0, 0, 0], [0, 0, 0], [2, 0, 0, 1, 1, 3], [1, 0, 1, 2], [], [0, 4, 0, 4], [], [0], [4, 4, 0, 0], [3, 2], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 7, 7, 6, 2, 17, 3, 6, 4, 0, 1, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif res0:{:\\ni0 -= abs(min(int(481.0), ( min(i0, int(45.0)) + max(( ( max(int(0.0), len(s0.capitalize().rstrip())) - int(9.0) ) * i0 ), i2) )))\\ni0 = i0\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [0], [0], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [], [2], [], [5], [], [], [], [], [], [], [2, 0], [1], [0], [], [], [0], [], [0, 2], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s0.endswith(s2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 5], [1], [], [0, 1, 1], [], [], [], [], [5, 0, 2], [1], [], [3, 0, 1, 0, 1, 3, 0, 2, 0], [0, 0], [0], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (s0 + \"\"R\"\")\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 2, 3, 1, 4, 0, 1, 0], [2, 0, 1], [1, 0], [0, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 3, 1, 2, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1[mod(int(0.0),i1):])]:{:\\nres0 = mod(i2,int(7.0)) != ( int(1.0) + abs(i2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1], [8, 4, 8, 8, 2, 4, 3, 7], [0, 2, 1, 2, 0], [], [3, 3, 3, 3, 2, 1, 1, 2, 1, 0, 0, 1, 3, 1, 0, 0, 3, 1, 1], [1, 1], [0, 0, 1, 2, 0, 0], [], [0, 0], [5, 0, 4], [], [], [4, 2, 2, 0], [0], [], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 4, 0, 19, 2, 6, 0, 2, 2, 0, 0, 4, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(s0[min(min(max(abs(divInt(int(8.0),int(4.0))), divInt(int(8.0),i0)), i2), int(8.0)):min(int(2.0), i1)][i2:], min(int(4.0), int(37.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1], [2, 0, 0, 0, 2, 0, 0, 2, 0, 2], [0], [0, 2, 0, 1, 1, 0, 2, 0, 1, 0, 1, 3, 2, 2, 0, 0, 1, 2, 2, 3, 1, 2, 1, 3, 1, 1, 0, 2, 2, 0, 3, 2, 0, 1, 0, 0, 0, 1, 1, 0, 3, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [1, 2, 4, 0, 1, 1], [2, 0, 1, 1, 2, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 4], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 5, 1, 0, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\ns1 = saveChr(divInt(i0,int(42.0)))[:int(0.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [1], [0], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 3, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 0, 2, 0, 2, 3, 2, 1, 3, 2, 3, 0, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 4, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 4, 0, 1, 7, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, max(len(in1[i0:]), i2))[:int(0.0)]:{:\\nres0 = in2 not in saveChr(mod(i2,int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 1, 1, 0, 0], [0], [2, 1, 0, 0], [0], [0, 0], [], [], [2, 1], [5, 0], [1, 1], [0, 0], [], [], [], [], [0], [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 8, 2, 6, 8, 1, 4, 0, 0, 9, 0, 5, 9], [0, 2, 2, 2], [0], [2, 1, 1, 0, 2, 0, 2, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1], [], [0], [0, 1, 1], [5, 0, 0, 3], [1], [0], [0, 0], [0, 1, 3], [], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 1, 4, 1, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 13, 13, 4, 1, 13, 4, 0, 1, 3, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\ns0 = in0\\ni0 = divInt(int(5.0),int(82.0))\\nb2 = i2 != mod(i2,( int(68.0) + mod(int(14.0),i2) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = int(0.0) \\l int(09059.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 1], [], [], [], [], [], [], [], [1, 0, 0], [0, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0, 1, 2], [], [0], [], [], [2], [0], [0], [0], [], [1], [], [1], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 4], [2, 0, 0, 0], [0], [2, 1, 0, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [2, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(int(2.0),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1], [], [1, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 1, 0, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 5], [], [], [0], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 2], [2], [2, 2], [], [0], [], [], [], [], [0, 2], [], [2], [2], [], [], [0], [], [], [], [], [], [], [], [], [], [1, 4, 1, 4, 3], [0, 0, 0, 1], [], [0, 0, 3, 0], [], [], [], [3, 3, 0, 3], [], [], [], [5, 24, 8, 23]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1\\ns1 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [3, 0], [3], [1, 0], [0], [], [0], [], [], [], [0, 0, 0, 0, 0, 1], [0, 6, 9, 6, 7, 9], [2], [], [3, 1, 3, 0], [], [2, 4], [], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 6, 6, 0, 0, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(int(069679.0)) \\ge saveOrd(in2):{:\\nres0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 6, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [1, 3, 2, 2, 0, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1[int(0.0):][len(in1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 0, 0, 1], [2, 2, 0, 1, 0, 1], [2, 2], [1, 1, 1, 1], [], [0, 0], [], [], [2], [2], [1, 0], [0], [], [1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [3, 5, 8, 7, 3, 3, 4, 1, 0, 1], [0, 2, 2, 1, 0, 1, 1, 2], [1, 0, 1, 0], [3, 0, 3, 3, 1, 2, 1, 0, 2, 3, 1, 3, 1, 0, 3, 1, 1, 2, 0, 1, 3, 1, 2, 1, 0, 3, 3], [0, 1, 0, 1, 0, 0], [0, 4, 0, 0, 4, 1, 3, 2, 4], [1, 2, 2, 1, 0], [0, 0], [4, 4, 1], [1], [], [4, 2, 4, 0, 2, 1, 4, 3, 0, 0], [3, 2, 2], [2], [2, 1], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 6, 6, 2, 4, 0, 2, 0, 0, 0, 1, 2, 1, 0, 1, 0, 1, 0, 8, 8, 8, 4, 22, 3, 7, 4, 1, 3, 1, 0, 10, 3, 1, 2, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(i0, saveOrd(in1.capitalize()[min(int(3.0), ( int(5.0) - i2 )):].strip())) == divInt(min(int(8.0), saveOrd(\"\"U\"\"[:int(7.0)])),i2):{:\\nloopBreak% = 0\\nwhile True:{:\\ni1 *= max(int(3.0), int(3.0))\\ni0 = ( i1 * int(4.0) )\\ni1 -= len((in1 + s1).capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [0, 1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[saveOrd(in1):]:{:\\ni0 = len(in1[i2:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [1], [2], [2], [], [5], [], [], [], [], [], [], [0], [], [0], [], [3, 1, 2, 0, 3, 0, 1, 2, 1], [], [], [4, 1, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in saveChr(i0):{:\\nb1 = s1.endswith(s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 1, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = s2[len(in0):] not in s0[i0:i2].rstrip()[max(int(2.0), i2):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [0, 2], [0], [], [], [], [2], [], [2], [], [5], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [3], [0, 2], [], [3], [1], [], [0, 4, 1], [1], [], [], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 3, 1, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in0.endswith(saveChr(len(\"\"u\"\")))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [9, 2], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(92.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1, 0, 0, 0, 1], [9, 1, 4, 2, 9, 3, 5, 9, 6], [2, 0, 0, 2], [0], [2, 0, 3, 3, 0, 1, 0], [1, 0], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 6, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(i0,max(abs(i0), int(9.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [1, 3], [1], [0], [0], [], [0], [], [], [], [1, 1, 1], [1], [0], [0], [3, 3, 1], [], [0, 4], [], [], [1, 4], [], [], [0, 4, 0], [0], [1, 0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = min(saveOrd(s1), int(1.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 1], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(21.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [0, 9, 6, 9, 5, 6], [2, 2, 0, 0, 2, 0, 1, 2, 1, 1], [], [2, 3, 2, 1, 1, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 2, 2, 3, 0, 2, 2, 3, 0, 0, 1, 3, 2, 3, 1, 0, 0, 0, 3, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 3, 2, 1, 3, 2, 3, 4, 2, 1, 0, 1], [2, 0, 0, 0, 0], [0, 1, 0, 1], [4, 5, 1, 2], [1, 1], [], [3, 0, 0, 4, 4, 1, 2, 0, 4, 2, 0, 2, 4, 1], [0, 3, 0, 2, 1], [0], [2, 0, 1], [1, 1], [], [17, 0], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (in2 + s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [2, 0], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 2], [], [0], [], [], [0], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1], [4, 2], [1], [1], [1, 2, 3, 3, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 2, 1], [], [0, 0], [], [], [1, 0, 1], [], [0, 0], [], [], [0, 0], [], [1], [], [0, 1], [6, 9], [2, 1], [0], [3, 1], [], [2], [], [], [4, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b0\\nin1 = in1\\ni2 = abs(int(69.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [2], [1], [0], [], [], [], [], [], [], [], [1, 1], [0], [3, 0], [], [4], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(in2) == i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [0, 1], [], [0], [], [], [1], [1], [0], [0], [], [1], [], [0], [], [], [], [0, 2, 2], [1], [3, 0, 3], [], [3], [1], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [0], [5], [1], [0], [], [], [], [0], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 6, 2, 9, 0, 4, 3, 0, 8, 4, 4], [0, 2, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 2, 0, 3, 2, 2, 3, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 1], [1, 1, 2, 1, 2, 0], [1, 0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [1], [2, 1], [], [0], [], [], [2], [5], [1, 2], [0], [1], [], [], [], [0], [1, 0, 1], [5, 8, 4], [0, 0], [0], [0, 1, 1, 0], [1], [], [], [0], [2, 3, 0, 0, 2], [], [], [0, 3, 2, 0, 0, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 3, 3, 2, 1, 3, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i0 != int(5.0):{:\\ns2 = in0\\n:}\\ni0 = int(84.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [1, 1, 0, 1], [4, 5, 0, 1], [0, 0, 1], [], [0, 2, 0, 1, 0, 3, 2, 2, 1, 0, 1, 0], [0, 0, 0, 1], [3, 3], [1, 2, 0], [1], [5, 0, 2], [1], [], [3, 4, 4, 0, 0, 3, 1, 2, 0], [3, 0], [1], [2, 1], [2], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 != ( i0 - int(4.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [5, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 2, 3], [2, 1, 1, 0, 2, 1], [], [3, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 0, 2, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0], [1], [0, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0], [2, 1], [], [], [4, 2, 0], [3], [0, 2], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 15, 6, 1, 2, 4, 2, 0, 0, 3, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1[:max(mod(i2,divInt(int(1.0),( int(3.0) + mod(i1,int(9.0)) ))), divInt(( i1 * i0 ),int(4.0)))].lstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 1, 0], [], [0], [], [], [0, 2, 1], [4], [0, 1], [0], [], [0], [], [], [], [1, 1, 1, 0, 1, 0, 1], [7, 0, 6, 9, 1, 2, 4], [2, 0, 2, 0, 1, 1, 0], [0], [0, 0, 3, 2, 2, 2, 1, 2, 1, 1, 1, 1, 3, 0, 0, 0], [1, 0, 1, 1, 0], [2, 0], [1, 0], [0, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 7, 7, 3, 1, 12, 4, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\ni2 = i0\\nb1 = i2 \\le abs(divInt(( divInt(int(7.0),mod(int(0.0),int(6.0))) - int(91.0) ),int(24.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 0], [], [], [1], [3], [0, 0], [1], [0, 0, 3], [1], [], [0], [1], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [0, 0, 0, 1], [5, 9, 5, 6], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(5956.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 5], [1], [], [0, 1, 1], [], [], [], [], [5, 0, 2], [1], [], [3, 4, 1, 0, 1, 3, 0, 2, 0], [2, 0], [0], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 4, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (\"\"R\"\".capitalize() + s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1], [4, 2], [1], [1], [1, 2, 3, 3, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [3, 0], [], [2], [2, 1, 2, 1, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 1], [9, 9, 0, 3, 9, 5], [2, 2, 2], [1], [2, 0, 1, 1, 1, 1, 3, 3, 0, 0, 0], [1, 0], [1, 2], [0], [0], [1, 4], [], [], [2, 2, 0], [], [], [2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 1, 0, 0, 1, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1[divInt(i2,int(9.0)):][int(9.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(s0), i0):]:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [2], [], [1, 0], [1, 0, 1, 1, 0], [], [], [], [3, 2, 2, 5], [], [], [3, 4, 3, 0, 0, 0], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (getCharFromString((s2 + s2), int(1.0)) + in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [1], [1], [], [0], [], [], [], [3], [1], [0], [], [], [], [], [0], [0, 1, 0, 1], [4, 8, 4, 4], [0, 2, 1, 2, 0, 2], [1], [2, 3, 0, 0, 0, 1, 0, 0, 0], [1], [1, 0], [1], [1], [], [], [], [1], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= mod(max(i2, i1),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1], [1, 2, 0, 1, 0, 0, 0], [2], [1, 0, 2, 2, 2, 2], [], [0, 0, 0, 0], [], [], [0], [2], [0, 0], [0], [], [1], [], [1], [], [1, 1, 1], [6, 2, 6], [0, 0, 1, 2, 0, 1, 1, 1], [0, 1, 0], [3, 2, 0, 0, 1, 1, 2, 0, 1, 0, 0], [0, 0], [4], [2, 1, 1], [], [0, 0, 1, 0, 3], [], [], [4, 0, 0, 0], [3], [4], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 2, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s0.rstrip(s0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1], [7, 7, 5, 3], [2, 2], [0], [1, 1, 2, 0, 3, 3, 2, 3, 2, 1, 0, 1], [0, 0, 0, 0], [1, 3, 2], [0, 0, 1, 0], [], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 4, 0, 0], [1, 1, 2, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (saveChr(int(7.0)) + saveChr(int(7.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [0], [], [1, 1, 0, 0, 1], [8], [2, 2, 1], [1], [0, 1, 3, 3, 0, 0, 0], [1, 1], [0, 3], [0], [0, 1], [0], [], [0], [1, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 2, 1, 2, 1, 0, 0, 0], [1, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2 not in in2\\ni2 += len(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [0], [], [], [], [1], [3], [1], [0], [], [], [], [], [], [0, 1], [], [1, 2], [0], [0, 0], [], [4], [], [], [0, 2], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2:{:\\nb1 = i1 \\ge i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 6, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 0, 0, 1, 3, 0, 2, 2, 2, 1, 1, 2, 0, 2, 0, 2, 0, 2, 1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 3, 2, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 2, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 1, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 11, 0, 29, 9, 4, 3, 6, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s2[:len(getCharFromString(\"\"R\"\"[i1:int(0.0)], max(mod(i2,i2), i0)))] not in s2[int(7.0):min(i0, mod(( mod(int(5.0),int(7.0)) + ( i1 + divInt(i1,divInt(i2,( int(0.0) + i0 ))) ) ),divInt(i0,i2)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [2], [1], [1], [], [], [2], [], [], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 3, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 34, 8, 9, 4, 4, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in1):i0]):][int(0.0):]:{:\\nres0 = getCharFromString(in0[:abs(mod(i0,int(7.0)))], mod(int(5.0),min(i2, ( divInt(( int(7.0) + i0 ),len(saveChr(min(mod(i1,max(abs(( int(2.0) * i2 )), ( max(int(1.0), i1) * int(7.0) ))), int(7.0))))) - i2 ))))[:i0] not in (\"\"R\"\" + in1.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [2], [1], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [0], [1, 1, 1, 1], [7, 7, 5, 3], [1, 2], [0], [1, 3, 3, 0, 2, 3, 2, 1, 2, 1, 0, 1], [0, 0, 0, 1], [1, 3, 2], [1, 2, 2, 0], [0], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 2, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (saveChr(int(7.0)) + saveChr(max(len(s2.capitalize()), i1)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [1, 0], [1], [2, 3, 1, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += ( abs(int(9.0)) * i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [3, 0], [], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [2, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [1], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1], [2, 0, 0, 0, 2, 0, 0, 2, 0, 2], [1], [1, 2, 0, 0, 2, 3, 2, 2, 1, 2, 1, 2, 2, 2, 0, 0, 3, 2, 2, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0, 3, 3, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 2, 4, 0, 2, 1], [2, 0, 2, 1, 2, 2, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [], [2], [], [1], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [], [], [2, 4], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 not in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 3, 9, 7, 1, 7, 3, 7, 5, 0, 4, 4, 1, 3, 6, 8, 5, 9, 4, 4, 0, 1], [0, 2, 1, 0, 2, 1, 2, 0, 0, 2, 0, 2, 2, 0, 1, 0, 2, 0], [0], [1, 2, 2, 3, 2, 2, 2, 3, 3, 2, 3, 3, 2, 3, 2, 0, 3, 0, 1, 3, 0, 1, 2, 3, 0, 0, 2, 2, 0, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 1, 3, 0, 1, 0, 0, 3, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 3, 1, 3, 3, 1, 2, 1, 3, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 3, 1, 3, 4, 1, 4, 3, 4, 0, 1, 2, 4, 3, 4, 4, 2, 1, 3, 1, 3, 2, 2], [2, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0], [], [0, 5, 2, 0, 4, 5, 3, 1, 4], [0, 0, 0, 1, 1, 1, 1, 1], [0], [1, 1, 2, 2, 1, 4, 2, 0, 0, 4, 0, 2, 1, 2, 4, 2, 1, 0, 0, 2, 1, 4, 0, 1, 0, 1], [3, 0, 0, 2, 1], [5, 3], [0, 2, 0, 0, 1, 0, 1], [3, 3, 0, 2, 0, 3, 2, 2], [20], [10], [5, 6, 4], [6, 24, 11]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 4, 0, 1, 0, 0, 0, 4, 1, 0, 1, 2], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(7.0)\\ns0 = \"\"#?U5\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [0, 3], [3], [0, 1], [0], [], [1], [], [1], [], [0, 0, 1], [4, 6, 2], [0, 0, 1], [1, 1], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\ni1 *= int(462.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [4], [1], [0], [], [], [], [], [], [1], [3], [1, 1, 1], [1], [2, 0, 1, 2, 0, 0], [1, 1], [], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 6, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = mod(i1,int(3.0)) \\le divInt(i1,i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [1], [], [], [], [], [], [], [1, 0, 1], [8, 5, 2], [2, 1, 0, 2], [0, 0], [0, 2, 0, 1], [0], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 2, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\ni0 = ( i2 * int(8.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 0], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(20.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [3, 7], [2, 0, 0], [], [2, 2, 2, 2, 1, 0, 0, 0, 1], [1, 1, 0, 0], [], [0, 2], [1, 0], [2, 2, 2], [], [], [4, 3, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 9, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(mod(divInt(( ( int(3.0) + i2 ) * i0 ),i0),int(7.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [2, 0, 1, 0, 2, 0], [], [], [], [], [], [], [0, 1, 0, 0, 1, 0], [0, 3, 6, 2, 2, 6], [0, 0, 1, 2], [1, 1], [2, 0, 2, 1, 0, 1], [1, 0], [], [2, 1, 0, 2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 4, 2, 6, 2, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= mod(i0,( int(03.0) - i1 ))\\ni2 += int(622.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [0], [1], [], [0], [1], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 4, 8, 2], [2, 0, 2, 1, 2], [1], [3, 0, 1, 0, 2, 3, 3, 2, 1, 0, 1, 1, 3, 2, 3, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0], [4, 1, 4, 3, 0, 0], [1, 2, 0], [0, 1, 0], [0, 1], [], [], [2, 4, 0, 0, 0], [0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 1, 0, 1, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= saveOrd(getCharFromString(s0, i0)[:int(1.0)])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [0, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 1, 0], [2], [0, 0, 2], [], [0], [], [], [1, 2], [2, 1], [1, 0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1, 1, 1], [0, 8, 9, 8, 5], [1, 2, 0, 1, 2, 1, 2, 2], [], [3, 0, 3, 1, 2, 1, 0, 2, 0, 3, 1, 3, 0, 3, 0, 0, 1, 3, 0, 2, 2, 0, 1, 1], [1, 1, 0, 0, 0, 1], [4, 1, 4, 0, 1, 2], [2, 0, 2, 1], [1, 1], [1, 1], [1], [], [0, 1], [], [], [], [0], [16], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) == i1:{:\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2, 1], [1], [2, 0, 0], [0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i2 + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 5, 8, 1], [2, 0, 0, 0, 2, 1, 2, 2, 0], [1], [1, 0, 0, 1, 2, 1, 2, 2, 1, 2, 3, 2, 2, 2, 3, 0, 1, 2, 2, 1, 0, 2, 1, 3, 1, 1, 2, 1, 1, 0, 1, 2, 2, 1, 2, 1, 0, 1, 1, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 2, 4, 0], [2, 2, 2, 1, 2, 0, 2, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [1, 1], [1], [], [2, 4, 1], [1], [], [2], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 3, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(4.0)\\ns1 = saveChr(i0)[i0:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [5, 7], [2, 0, 1, 2], [0], [3, 3, 0, 0, 3, 0, 2, 3, 1, 0], [0], [1, 2, 2, 1, 2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(abs(i0), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [3], [1], [0], [], [], [], [], [], [0, 0, 0, 1], [5, 9, 1, 3], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(5913.0) \\ge i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0, 0], [], [], [], [], [], [0, 1, 1], [0, 9, 1], [1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(09.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [6, 4, 4, 9, 9, 0, 0, 2, 7, 0, 4, 9, 3], [2, 0, 1, 0, 1, 0, 1], [], [2, 2, 1, 0, 3, 2, 1, 2, 0, 0, 1, 2, 2, 0, 0, 3, 2, 2, 1, 1, 3, 1, 0, 2, 1, 2, 3, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 1, 3, 3], [2, 1, 1, 2, 1, 0], [1, 1, 0, 0, 1], [], [1], [], [4, 1], [1], [], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 6, 0, 23, 8, 3, 3, 5, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( mod(int(64.0),i2) * max(( int(4.0) - ( i0 - i1 ) ), int(9.0)) ) == mod(divInt(i0,i1),max(divInt(mod(int(9.0),int(0.0)),len(saveChr(int(02.0)))), i0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 0, 0], [0, 0], [0, 1], [], [], [], [], [2], [], [], [4], [3], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [0, 0, 1, 1], [0, 8, 9, 1], [2, 1], [1], [2, 2, 3, 3, 1, 3, 0, 1], [1, 0], [3, 2, 0], [1, 0, 2], [0], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 1, 8, 2, 3, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= divInt(( len(s1) + abs(int(089.0)) ),min(i1, int(1.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 0], [1], [0, 0, 3], [1], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [1, 0], [0], [0], [], [3, 3, 4, 0, 3, 0, 1, 2, 1], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [], [], [2, 1], [1], [0, 0], [], [2], [1], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i2 != i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [2, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni2 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 0, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s0[i2:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0], [1], [], [0], [1], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 3, 0, 1, 7, 8, 3], [2, 0, 2, 1, 2], [1], [3, 1, 1, 2, 0, 3, 3, 2, 1, 0, 3, 1, 2, 3, 3, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0], [2, 1, 0, 2, 0, 0], [2, 2, 0], [0, 1, 0], [4, 4, 5], [], [], [2, 4, 0, 0, 0], [0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= abs(int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [0], [1], [0], [], [], [], [], [], [1, 1], [6, 4], [2, 0, 2, 0, 0], [], [2, 2, 1, 0, 0, 2, 1, 0, 0, 0], [0, 1, 1], [1, 1], [0, 1], [1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 8, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( mod(int(6.0),i2) + i0 ) \\l mod(int(4.0),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\l int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [1, 1, 0, 0, 1], [4, 5, 4, 0, 9], [0, 2, 0], [0], [1, 1, 0, 2, 3, 0, 1, 2], [0, 1], [1], [2, 0], [], [5, 2], [1, 1], [], [3, 0, 4, 0], [1], [], [0], [3, 1], [], [15], [], [15]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = (in2 + saveChr(int(4.0))).endswith(s2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [], [0, 2, 0], [], [4], [3, 0], [1], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [2], [], [], [4, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 3, 0, 1, 2, 1, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( saveChr(int(0.0)).startswith(saveChr(i2)) or res0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2], [0], [0, 0, 0], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [3], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [1, 3, 0], [1, 2], [1], [1, 0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(130.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [0, 0], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1[max(i0, int(075.0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [2, 1, 1], [0, 0], [1, 3, 0], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(2.0)\\ni1 = abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [3], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [1, 3, 0], [1, 2], [1], [1, 0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(130.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 1], [1, 1], [1], [1], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(41.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [0, 1], [1], [3, 1], [], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(int(5.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nin1 = in0[abs(i1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [1, 3, 9, 4, 2, 3, 5, 9, 2, 4, 9], [2, 2, 0, 0, 2, 1, 0, 0, 1, 0], [], [3, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 2, 2, 1, 2, 3, 2, 0, 2, 0, 0, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 3], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0], [2, 1, 4], [], [], [2, 2, 0, 2, 0], [], [0, 2], [1, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 10, 0, 35, 14, 2, 6, 8, 3, 0, 0, 5, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1[max(mod(i2,divInt(int(1.0),( int(3.0) + mod(i2,int(9.0)) ))), mod(( i0 + i0 ),int(4.0))):i2][:( int(2.0) * ( int(3.0) * ( mod(mod(int(59.0),( len(in1[mod(i1,divInt(i0,i0)):i1]) * int(24.0) )),i0) - int(9.0) ) ) )]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 3, 1, 1, 2, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[mod(mod(int(0.0),i0),( i2 + int(7.0) )):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 2], [2, 1], [0], [2, 3, 3, 0], [1], [2, 4], [], [0], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(abs(saveOrd(s0)),i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [0, 2], [0, 1, 1], [2, 1, 3], [0], [3], [1, 1], [1], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( int(5.0) - len(in0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [0], [0, 1], [0], [], [], [], [1], [0], [1], [0], [], [], [], [], [], [1, 1, 0, 0, 0, 1, 1], [0, 3, 6, 5, 2, 6, 9], [0, 1, 1, 0, 0], [0], [2, 0, 1, 1, 2, 0, 3, 0, 0, 3, 1], [1, 1], [0, 3], [0], [1, 1], [2, 1, 1], [], [0], [0, 4, 4, 1, 4, 0], [3, 3, 2], [2, 1], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 1, 9, 2, 1, 0, 2, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s1:{:\\nb1 = mod(i0,int(0.0)) \\l int(3.0)\\ni1 = mod(i1,min(i0, i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [0], [2, 0], [0], [0, 0], [], [], [0, 2], [2], [2, 0], [], [5], [1], [], [0], [], [0, 0, 1], [4, 4, 3], [2, 0, 2, 1, 0], [], [1], [], [], [], [], [2, 0, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(int(443.0))\\nb0 = s0.endswith(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [0], [], [], [], [], [], [], [1, 0], [0, 2], [1, 0], [1], [1, 1, 3], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0, 2], [1], [0], [0], [], [0], [], [], [], [0, 1], [7, 0], [1, 0, 1, 2], [], [2, 0, 2, 0, 0, 2, 0, 1], [0, 0, 1], [], [0, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0], [9, 9, 4, 3], [1, 2, 0, 2], [1], [0, 0, 1, 2, 0, 1, 3, 3, 0, 0, 0], [1, 1], [1, 2], [1, 0], [1], [1, 4], [], [], [2, 2, 0], [], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1[:i1][:i2]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 0], [], [], [], [], [0], [0, 1, 1], [3], [], [3, 3, 2, 0, 3, 1, 1, 3, 1], [], [], [2, 3], [], [], [0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 2, 2, 0, 2, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 2, 3, 1, 0, 0, 0, 3, 0, 3, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3, 1, 4, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 17, 1, 62, 18, 13, 8, 10, 7, 1, 1, 14, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nb2 = in1[max(i0, int(0.0)):abs(mod(i2,int(7.0)))] not in in0\\ni2 = mod(int(5.0),min(i0, ( divInt(( len(s0[i1:divInt(min(( i2 + ( divInt(( int(7.0) + i1 ),divInt(max(int(4.0), i2),int(1.0))) * int(7.0) ) ), i0),i0)]) - mod(int(7.0),abs(int(9.0))) ),max(i1, ( ( ( int(8.0) + int(5.0) ) * divInt(int(0.0),i2) ) - int(4.0) ))) - mod(len(in1[mod(max(int(8.0), i2),i2):i0]),saveOrd(getCharFromString((\"\"R\"\" + saveChr(i2)), min(i0, int(59.0))))) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [0, 1], [1], [0], [0, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [0], [1, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [3, 2, 2, 5], [], [], [0, 4, 4, 4, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [2, 0, 2], [0, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(1.0)\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0], [], [1, 0], [], [2], [2, 1], [], [1], [], [0, 1, 0, 1, 0, 1], [7, 5, 0, 2, 0, 9], [2, 1, 2, 2, 1], [1], [2, 2, 1, 2, 3, 2, 0, 0, 3, 1, 0, 0, 1], [1, 1, 0, 0], [1, 0], [0, 1, 0], [1, 1], [0, 0, 4], [], [], [0, 3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 5, 1, 13, 4, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += mod(mod(int(75.0),( max(( i1 - i2 ), min(int(02.0), i2)) + i1 )),int(09.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [0, 3, 0, 1, 3, 1, 0, 1, 2, 1, 0, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 1, 2, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 2, 0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[i0:len(in2)]:{:\\nres0 = in1[i2:] != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [1, 2, 1, 0], [2, 0], [2, 1], [], [0], [], [], [], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 8, 7, 5, 4, 6, 1, 2], [2, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0], [2, 0, 2, 1, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0, 2, 0, 1, 2, 1, 2, 3, 2, 0, 3, 1, 3, 1, 2, 0, 3, 2, 2, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [2, 3, 3, 2], [0, 2, 2, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1], [3, 1, 3, 5, 3, 4], [], [0], [0, 4, 2, 2, 4, 0, 0, 2, 0], [3, 0, 1], [5], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 6, 1, 11, 4, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\nloopBreak% = 0\\nwhile mod(i2,mod(int(2.0),i0)) == ( i0 + i1 ):{:\\ni1 = ( i1 * int(6.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [2], [0, 2], [], [0], [], [], [2], [5], [0, 2, 1], [0], [0], [2], [], [], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 8, 7, 3, 5, 1, 6, 7, 0, 0, 7, 9, 5, 5, 5], [2, 2, 0, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1], [], [3, 0, 3, 2, 1, 2, 1, 0, 3, 3, 3, 1, 2, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 2, 3, 1, 0, 0, 0, 2, 0, 1, 0, 2, 3, 0, 2, 3, 0, 0, 3, 3, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 3, 1, 2, 2, 2, 1, 1, 0, 0, 0, 2, 0], [0, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 1, 3, 5, 3, 2], [], [], [2, 2, 4, 0, 0, 0, 0], [3], [5], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 0, 9, 9, 7, 0, 28, 8, 6, 5, 3, 4, 0, 0, 7, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not s1.strip(s1)[:min(i2, max(( int(3.0) + mod(int(87.0),i2) ), len(in0)))][:max(abs(int(35.0)), ( int(1.0) + ( mod(i0,i1) - int(6.0) ) ))] in in2:{:\\nb2 = ( divInt(int(7.0),i1) + ( abs(int(0.0)) + i2 ) ) != i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [2], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [0, 1, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 4, 1, 1, 8, 2, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1.capitalize())]:{:\\nres0 = \"\";\"\" not in saveChr(i0)[:int(08.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [0, 2, 0], [0], [2, 0, 0], [0], [], [1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( i2 - i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 2, 1], [1], [3, 3, 0, 0, 0], [0], [1, 0], [2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= max(min(i1, i2), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1], [0, 9, 6, 9, 5, 6, 8, 2], [2, 2, 0, 0, 2, 0, 1, 2, 1, 1, 2], [1], [2, 3, 2, 1, 1, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 2, 2, 3, 0, 2, 2, 3, 0, 0, 1, 3, 2, 3, 1, 0, 0, 0, 3, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 1, 3, 2, 3, 4, 2, 1, 0, 1], [2, 0, 0, 0, 0, 1, 2, 2, 0, 2], [0, 1, 0, 1], [5, 3, 1, 2], [1, 1], [], [3, 0, 0, 4, 4, 1, 2, 0, 4, 2, 0, 2, 4, 1], [0, 3, 0, 2, 1], [0], [2, 0, 1], [1, 1], [], [17, 0], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 11, 1, 39, 10, 12, 10, 1, 4, 1, 0, 11, 3, 1, 2, 1, 0, 1, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= ( max(( int(0.0) + int(9.0) ), ( len((in2 + in0)) + ( abs(max(len(getCharFromString(\"\"r\"\".lstrip(), abs(( i2 + i0 )))), len(s1[( ( saveOrd(getCharFromString(s2[i0:( divInt(abs(i2),i0) + int(6.0) )], max(( min(int(9.0), i1) - i2 ), i1))) * max(i1, int(5.0)) ) * i2 ):]))) + int(6.0) ) )) * int(82.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [3], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [0, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 0], [], [1, 2, 3, 1], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\ge ( len(s1) - int(8.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [0], [], [0, 2], [], [0], [2], [], [], [], [0], [2], [2, 0], [], [0, 0], [], [], [], [], [1, 5, 2], [], [0], [0, 4, 2, 0], [1, 2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 3, 0, 1, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2:{:\\nb0 = not saveChr(i2) in s2[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [0], [], [], [0, 3], [], [], [0], [], [], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 2, 3, 2, 6, 8, 4], [0, 0, 0, 0, 2], [0, 0], [1, 3, 3, 3, 2, 2, 3, 1, 3, 3, 2, 3, 2, 2, 2, 1, 2, 3, 1, 2, 1, 3, 1, 3, 1, 3, 3, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1], [3, 0, 0, 4, 4, 2, 1, 4, 4, 3, 3, 4], [2, 0, 2, 0, 1, 1], [0, 0, 0], [4, 4, 4, 4, 3, 3, 5, 5], [], [], [4, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0], [0], [], [1, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 3, 2, 29, 8, 12, 5, 3, 8, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(5.0)\\ni0 = len(getCharFromString(in1, min(min(( ( saveOrd(in1) * int(6.0) ) + saveOrd(in1[:abs(( max(( divInt(divInt(int(2.0),( saveOrd(in1) * int(3.0) )),divInt(int(2.0),saveOrd(in0))) + int(6.0) ), len(in0[int(8.0):])) - len(in2) ))]) ), saveOrd(in2[i0:])), int(4.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 7, 3], [2, 0, 1, 0, 2, 1], [], [0, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 2, 0, 1, 0, 2, 0, 2, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1], [1], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0], [0, 1], [], [], [2, 2, 0], [], [0, 2], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 21, 9, 0, 4, 5, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1[i2:mod(i0,divInt(int(1.0),( int(3.0) + mod(i1,int(9.0)) )))][:mod(( ( i0 + int(4.0) ) * i2 ),( i1 * divInt(int(7.0),int(3.0)) ))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 0, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 1, 7, 0, 2, 0, 0, 2, 0, 0, 6, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(in1[i0:i2][int(0.0):len(in2)][i1:][i1:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1], [1], [1, 2], [], [0, 0], [], [], [0], [], [0], [], [], [0], [], [], [0], [1], [9], [1], [1], [3, 1], [], [2], [1], [], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= abs(int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0], [], [1, 0], [], [4], [], [], [4, 2, 4, 5], [], [], [4, 3, 0, 2, 0, 0], [0, 1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = getCharFromString((s2 + in1[:int(2.0)]), i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 5, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s0 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [9, 4, 7], [2], [0], [2, 1, 1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(int(9.0),int(47.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [0], [3], [], [3], [1], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 3], [0], [0, 0], [0], [], [0], [], [], [], [1, 0, 1, 1], [9, 3, 4, 0], [], [], [1, 2, 1, 1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [], [], [0, 1], [1], [0, 0], [], [2], [1], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 != i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [1, 0], [1], [0], [], [], [2], [], [4, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 12, 1, 34, 10, 7, 5, 5, 6, 0, 1, 11, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in2):i0] not in s0[i2:].rstrip()[abs(mod(i0,int(0.0))):( int(7.0) * divInt(i0,divInt(( divInt(int(2.0),i1) - ( abs(( i2 * len(saveChr(min(divInt(int(7.0),i0), ( max(int(7.0), i0) - int(1.0) )))) )) + i0 ) ),i0)) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 0], [1, 1, 1, 1], [], [1, 1, 2], [], [], [], [], [2], [3, 0], [0, 1, 2], [0, 0], [], [3], [1], [], [], [1, 1, 1, 1, 1], [0, 3, 2, 8, 5], [0, 0, 1, 1, 1, 0, 2, 1], [0, 1], [2, 0, 2, 0, 1, 1, 0, 0, 2, 2, 1, 0, 3, 1, 0, 1], [0, 1, 1, 0], [0, 1], [0, 1, 2, 1], [0, 0], [0, 3, 2], [1], [], [2, 0, 1], [], [], [0], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 5, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( i0 + divInt(i1,int(0.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [0, 1], [1], [3, 0, 1], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= max(i1, int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [3], [], [3], [0], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [2], [1, 0], [], [0], [], [], [0], [0], [0, 1], [0], [], [1], [], [0], [], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 1, 2, 4, 2, 2, 0, 7, 4, 2], [2, 0, 2], [1], [2, 1, 1, 0, 3, 1, 2, 0, 1], [0, 1], [1, 4], [1, 1], [0, 1], [2], [], [], [3], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 10, 10, 3, 1, 9, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile True:{:\\ni2 -= ( int(11.0) - int(24.0) )\\nb0 = i0 \\l max(int(2207.0), divInt(i2,int(42.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0, 2], [], [0], [], [], [1], [], [0], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [], [0, 0], [], [2], [2, 1], [], [0], [], [], [], [], [1], [], [], [], [], [], [0, 0, 4], [], [], [0, 3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 6, 0, 3, 0, 0, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):len(in1)]:{:\\nres0 = i0 != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = abs(int(7.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 1], [0, 3, 0, 7, 4], [1, 1, 1, 2], [1, 1], [1, 2, 2, 0, 1, 0], [0, 1], [], [1, 1, 0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 4, 2, 6, 2, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(0.0)\\ni1 -= ( divInt(i1,int(3074.0)) + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [8, 2], [0, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1, 1], [6, 0], [0, 1, 1, 0], [1], [3, 1, 3, 3, 0, 2, 1, 2, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 1], [0, 2], [1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += abs(int(6.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [0, 0, 0, 1], [7, 9, 1, 8], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(7918.0) \\l i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [2], [1], [0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 4, 5], [1, 1], [], [1, 2, 1, 0], [0], [], [0, 0, 2, 1, 2, 1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) == ( int(8.0) + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1], [], [0], [], [], [1], [], [], [], [], [], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0, 0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:][i2:]:{:\\nin1 = \"\"R\"\"\\ni0 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [2, 0], [0], [0], [], [], [], [2], [3], [2], [0], [5], [], [], [], [], [1], [3], [0], [], [1, 0], [], [], [], [], [0, 0], [], [], [0, 4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s0.endswith(s0.capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [], [0, 0], [], [], [1, 1, 3], [], [0, 0], [], [], [1, 0], [], [0], [], [], [8, 4], [], [], [], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [], [], [], [3, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1], [1, 2, 1, 1], [1], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [0], [0, 1, 0, 0, 0, 0, 1], [3, 7, 7, 5, 9, 5, 3], [2, 1, 0, 1, 0, 1, 1, 0], [1, 0], [3, 1, 0, 0, 2, 3, 1, 2, 0, 0, 3, 0, 0], [1, 0], [3, 4, 1], [2, 2], [1], [1, 5, 2], [], [], [4, 0, 0, 4, 2, 4, 2, 4], [3, 1, 1, 1], [2], [2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 7, 7, 8, 2, 13, 2, 3, 2, 1, 3, 0, 0, 8, 4, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= len(s1.strip())\\nif in2 in saveChr(int(37.0)):{:\\ni1 = i0\\n:}\\ns2 = saveChr(i1)[mod(saveOrd(saveChr(int(75953.0))[( i0 * i1 ):]),max(i1, i0)):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0], [], [], [1, 2, 2], [4], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [1, 3, 2], [1, 2], [], [1, 3, 0, 2, 3, 1, 0, 1], [1], [0, 0], [], [0], [2, 3], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 8, 1, 2, 0, 1, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(1.0) \\le min(i1, divInt(min(int(3.0), i2),int(2.0)))\\ns2 = in0.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [3, 5, 7], [1], [0], [3], [], [3], [], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 6, 2, 9, 0, 4, 3, 0, 8, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 2, 0, 3, 2, 2, 3, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 1], [1, 1, 2, 1, 2, 0], [1, 0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 2, 3, 0, 4], [1], [0], [1, 0, 0, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [1], [], [], [0], [1, 1, 1, 1], [7, 7, 5, 3], [1, 0], [0], [1, 3, 2, 0, 2, 1, 2, 1, 2, 3, 0, 1], [0, 0, 0, 1], [1, 3, 2], [1, 2, 2, 0], [0], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 0, 0, 0], [2, 0, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 6, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (getCharFromString(s2.capitalize(), int(7.0)).capitalize() + s2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [1, 0, 0, 0, 0, 0, 1], [6, 6, 4, 3, 8, 0, 4], [1, 2], [1], [2, 2, 3], [1], [], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 2, 2], [], [0], [], [], [2], [], [0], [], [], [1], [], [1], [], [1], [8], [1, 0, 0, 0, 0, 1], [0], [1, 1, 3], [1], [4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1], [8, 6, 4, 3], [1], [0], [2, 1, 3, 2, 1, 1], [1, 1], [3], [1], [0, 1], [0], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 6, 2, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = divInt(int(8.0),len(saveChr(mod(int(64.0),int(3.0)))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [9, 4, 7], [2], [1], [2, 1, 1], [0], [], [0, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += ( int(9.0) - int(47.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 0], [], [0], [], [], [0], [], [], [], [], [], [2, 0], [], [3, 0], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [3, 3], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1], [4, 2], [1], [0], [1, 2, 3, 3, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [0, 2], [2], [], [0], [], [], [1, 3], [], [0, 2, 0], [], [4], [3, 0], [1], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [2], [], [], [4, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 2, 1], [0, 1], [0], [0], [0], [], [], [0], [3], [1, 2], [0], [], [1], [1, 0], [0], [0], [1, 1], [7, 2], [0, 0], [0], [0, 1, 2], [], [], [], [], [0, 3, 0, 4], [], [0], [3, 3, 3, 4, 4, 0, 0], [1], [], [2, 2, 0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\ge int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2], [1, 1], [1], [2, 1, 3], [1], [3], [0], [0], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += divInt(int(2.0),len(in2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [1], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [], [3, 2, 0, 3, 0], [0], [2, 4], [1], [], [5, 5, 3, 4, 5], [], [], [4, 0, 0], [3, 0], [2], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2.strip()\\nin0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0], [1, 1], [0], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 1, 0, 1], [0, 8, 8, 6, 8, 7, 2], [2, 1, 1], [1, 1], [0, 2, 1, 1, 3, 3, 2, 1, 2, 0, 1, 3, 1], [0, 0, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 0, 2], [0], [1, 5], [], [0], [0, 2, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 4, 1, 0, 3, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i1\\nloopBreak% = 0\\nfor s1 in in2:{:\\ni1 += ( int(0.0) * int(8.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [1], [], [0], [], [], [], [2, 5], [0, 1], [0], [], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 2, 7, 4, 8, 2, 4, 4], [2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [1], [3, 0, 2, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [3, 3, 1, 0, 3, 0, 1, 2, 1], [2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [4, 1, 3, 4], [], [], [0, 2, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0], [3, 2, 2, 3, 0, 0, 2, 1], [0, 2], [1, 1, 1], [1], [], [24], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 4, 1, 7, 2, 1, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not len(in1) == i2:{:\\ni0 *= ( ( int(7.0) + i2 ) - i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 6, 0, 1, 8, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in0 + in1):{:\\nres0 = in1[len(in0):] not in s0[i0:i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 2, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 1, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [2, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 10, 7, 5, 5, 5, 1, 1, 14, 4, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1.rstrip()[:len(saveChr(i0)[i2:abs(mod(i0,int(0.0)))])] not in in0[( int(7.0) * divInt(i0,divInt(( divInt(int(5.0),int(7.0)) * ( abs(( i1 * len((\"\"R\"\" + saveChr(min(divInt(int(7.0),i2), ( max(int(1.0), i2) - int(7.0) )))).lstrip()) )) + i0 ) ),i0)) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [2, 0, 2], [], [0, 0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [5, 6, 8, 9, 7, 0, 1, 2, 6, 7], [2, 1, 0, 0, 1], [], [0, 1, 3, 0, 0, 2, 0, 0, 3, 3, 3, 1, 1], [1], [2, 2, 4, 2], [], [0], [2, 3, 1, 3, 1, 0, 2, 0], [], [], [4, 2, 0, 2, 2, 2, 0, 0, 2, 3, 3, 4, 4, 0, 3, 0, 2, 3, 4, 2], [2, 3, 2, 1], [2], [0, 2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 12, 1, 4, 0, 1, 5, 0, 0, 8, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[i2:int(5.0)].capitalize()\\nb0 = abs(i1) == i0\\ns1 = in0[:divInt(i0,i1)][:abs(saveOrd(s1))][abs(int(6.0)):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [1, 0], [], [], [], [], [], [], [1, 1, 1], [0, 4, 6], [0, 2, 0], [1], [0, 0, 3, 2, 0, 1, 2, 1, 1], [0, 0], [3], [2, 2], [], [2, 1, 4, 2], [1], [], [4, 2, 2, 3, 4, 4, 3, 0, 0, 3, 4, 0], [2, 0, 1], [], [1, 0], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = in1 not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 3, 2], [0, 0], [], [1, 2, 3, 3, 3, 1, 3, 0, 0], [0], [4, 2, 3], [2], [], [4, 0], [], [], [0], [], [], [1, 2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 4, 3, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 0, 2, 3, 2, 0, 1, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 1, 1, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 34, 8, 8, 5, 3, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(getCharFromString(in1[len(in1):], i0)):]:{:\\nres0 = saveChr(int(0.0))[abs(mod(i2,int(7.0))):divInt(int(5.0),min(i2, ( abs(mod(int(7.0),i0)) + ( min(( i1 + int(2.0) ), i2) * ( int(5.0) - i1 ) ) )))] not in in0[( max(int(7.0), i2) + min(int(5.0), i0) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1, 0, 0, 0, 1], [2, 1, 4, 2, 9, 3, 5, 9, 6], [2, 0, 2, 2], [0], [2, 0, 1, 3, 0, 1, 0], [1, 0], [1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(i0,int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 0, 1, 1], [], [0], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\ns1 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [], [0, 0], [], [], [2], [], [0], [], [], [2], [], [1], [], [1, 0, 0, 0, 0, 1], [2, 3, 1, 3, 0, 8], [2, 0], [0, 1], [1, 1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(2.0)\\ni0 *= int(31308.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 0, 1, 1], [], [0], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\ns1 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [3, 8], [0], [0], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(38.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 0, 5], [], [], [3, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (s0 + in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 0, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 12, 2, 5, 1, 1, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[min(abs(i0), min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in0) ))):i1] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0], [0, 2, 1], [0, 0], [0], [0], [0], [], [], [1], [3], [1, 1], [0], [], [1], [], [0], [0], [0, 1], [7, 2], [0, 0], [0], [0, 1, 0], [], [], [], [], [0, 3, 0, 4], [], [0], [3, 0, 3, 3, 4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = i0 \\ge int(72.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [0, 1], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 9], [2, 1, 0], [0, 1], [1, 0], [], [3], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(2.0)\\ni1 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = ( ( len(in1[mod(int(0.0),i0):]) != mod(i2,int(7.0)) or True ) and in0 not in s0.capitalize()[( int(5.0) + abs(i2) ):i0] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 2], [], [0, 0], [], [], [1, 2, 2], [4], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [2, 5, 2], [1, 2], [], [1, 2, 0, 2, 3, 1, 0, 1], [1, 0], [0, 2], [2], [0], [2, 5], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 8, 2, 1, 1, 1, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(2.0) \\le divInt(i1,( min(int(5.0), i2) * int(2.0) ))\\ns2 = in2.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [1, 8, 6], [1, 1], [1], [3, 1, 0, 3, 1, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [2, 0, 0], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(int(18.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [2], [0, 2], [], [0], [], [], [2, 0], [3], [0, 2, 1], [0], [0], [0], [], [], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 8, 7, 3, 5, 1, 6, 7, 0, 0, 7, 9, 5, 5, 5], [2, 2, 0, 0, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1], [], [3, 0, 3, 2, 1, 2, 1, 0, 3, 3, 3, 1, 2, 1, 2, 2, 0, 0, 1, 2, 0, 2, 0, 2, 3, 1, 0, 0, 0, 2, 0, 1, 0, 2, 3, 0, 2, 3, 0, 0, 3, 3, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 3, 1, 2, 2, 2, 1, 1, 0, 0, 0, 2, 0], [0, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 1, 3, 5, 3, 2], [], [], [2, 2, 4, 0, 0, 0, 0], [3], [1], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 7, 7, 4, 0, 19, 5, 5, 3, 2, 3, 0, 0, 6, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = s1.rstrip()[:min(i2, max(( int(3.0) + mod(int(87.0),i2) ), len(s1)))][:max(abs(int(35.0)), ( int(1.0) + ( mod(i0,i0) - int(6.0) ) ))] in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [], [], [], [], [], [], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0], [], [], [1, 2, 2], [5], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [1, 5, 2], [0, 2], [], [1, 3, 1, 0, 3, 1, 0, 1], [1], [0, 0], [], [0], [2, 5], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 7, 0, 2, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(1.0) != min(int(5.0), i0)\\ns2 = saveChr(min(int(2.0), i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 4, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 3, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 2], [5], [0, 1], [0], [], [0, 0], [], [], [], [1], [7], [2, 1, 1, 0, 2, 2], [], [2, 0, 2, 0, 0, 3, 0, 2, 0, 2, 0, 3, 0], [1, 0, 1, 1], [0, 2], [0], [0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 0], [2], [1, 1], [], [0, 0], [], [], [2], [2], [1, 0], [0], [], [1], [], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [3, 2, 8, 7, 3, 3, 4, 4, 0, 1, 4, 3, 2, 9, 2], [0, 2, 2, 1, 0, 1, 1], [1, 1], [3, 0, 0, 0, 1, 2, 1, 0, 2, 0, 1, 3, 1, 0, 3, 1, 1, 2, 3, 1, 3, 1, 2, 0, 0, 3, 3], [0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 4, 1, 3, 2, 4], [2, 2, 2, 1, 0], [0, 0], [4], [1], [0], [4, 2, 4, 1], [3, 2], [2], [2], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= min(i2, i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 2, 0, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 3], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 4, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 3, 1, 1, 8, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"[min(mod(int(0.0),i0), i1):].capitalize()):]:{:\\nb2 = in1 not in saveChr(i2)[int(7.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 6, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 0, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 2, 0, 2, 1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 3, 2, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 1, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 12, 0, 29, 9, 4, 3, 6, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s2[:len(getCharFromString(\"\"R\"\"[i1:int(0.0)], max(mod(i2,i2), i0)))] not in in0[int(7.0):min(i0, mod(( mod(int(5.0),i1) + ( i1 + divInt(i2,divInt(i0,( int(7.0) + i0 ))) ) ),divInt(i2,i2)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [8], [0, 1, 2, 1], [1], [3, 3, 1, 0, 0], [0], [1, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 5, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= max(min(int(8.0), i1), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0, 2], [], [0], [], [], [1], [], [0], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [1, 1, 3], [5], [0, 0, 0], [0], [], [0, 2, 0], [], [], [], [1], [0], [2], [], [3, 1, 3, 0], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 3, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b1:{:\\nb1 = not res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [0, 1, 0, 1], [0, 9, 2, 4], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(09.0) \\l int(24.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1], [6, 0], [1, 0], [1], [1, 1, 0], [], [], [1], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(6.0) \\l int(0.0)\\ni1 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1], [], [2, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1, 0], [4], [0, 1, 0], [0], [], [3, 0], [1, 0], [], [], [1], [3], [1, 0], [1], [0, 0, 3], [1], [], [0], [1], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( i1 \\le i0 or b0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (s0 + s2) not in in1.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 0, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 7, 7, 11, 0, 34, 8, 8, 5, 3, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in2[i0:][i2:]) != abs(mod(i2,int(0.0))) or True ) and getCharFromString(in0[:( int(7.0) + min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(i2)),i1)) * min(max(( int(7.0) - i2 ), ( abs(int(7.0)) + i0 )), int(1.0)) )) )], int(7.0))[i0:i1] not in (\"\"R\"\" + s0.rstrip()) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 2, 1], [0], [0, 0, 1, 0, 0], [], [0, 0, 0], [], [], [0, 2, 3, 3], [2, 5], [0, 1, 0], [0, 0], [], [1, 0], [], [0], [], [1], [5], [2, 0, 1, 2], [1], [0, 1, 0, 0], [], [], [0], [], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\nb2 = i2 == int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0], [1], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0, 2], [], [], [], [], [], [], [], [], [1], [2], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [0], [0], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0], [2, 0], [2], [0], [0], [], [], [], [2], [1], [0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 6, 0], [1, 1, 0, 2], [], [0, 0, 0, 3, 1, 1, 0, 0], [1], [2, 4, 2, 0, 3, 0, 1, 2, 1], [], [1], [2, 0, 1], [], [0], [4, 0, 2, 4, 2, 4, 4], [2, 1, 0, 1], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 5, 0, 1, 0, 0, 3, 0, 1, 4, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 == i1:{:\\nloopBreak% = 0\\nfor s2 in s0.capitalize():{:\\ns1 = saveChr(i0)[abs(int(4.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 2, 2], [2, 0, 1, 1], [], [2, 0, 2, 0, 2, 1, 2, 2, 3, 1, 0, 0, 1], [1, 0, 0, 0, 1], [0, 0], [0, 2, 1, 0], [0, 0], [2, 3], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 13, 5, 1, 3, 2, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[divInt(i2,( i0 + ( int(1.0) * ( divInt(min(int(2.0), i1),i1) - int(2.0) ) ) )):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 2, 7], [2, 1, 1, 2, 2, 1], [], [3, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 3, 0, 2, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0], [2], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1], [2, 1], [], [], [2, 2, 0], [], [0, 2], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 0, 16, 6, 1, 2, 4, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1[abs(mod(i2,mod(int(1.0),( int(3.0) + mod(i1,int(9.0)) )))):mod(( i1 + i2 ),int(4.0))][:i2]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0], [], [], [], [], [0], [2, 3], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1], [5, 6, 3], [1, 1, 0, 2], [], [0, 0, 1, 3, 1, 1, 0, 0], [1], [1, 0], [], [1], [2, 0], [], [], [3, 2, 2, 3, 0], [1], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 2, 0, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 == i1:{:\\nb0 = int(5.0) \\ge max(int(6.0), int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0], [0], [2, 0, 0], [1], [], [1], [1], [], [], [], [], [], [], [], [0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(i1,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 2, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [3, 3, 1], [], [], [], [1, 1], [4, 9], [0, 2], [1], [3, 2, 2, 1, 3, 0], [0, 1], [2, 3, 2], [1, 0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 0, 1], [], [0], [4, 4, 0, 0], [2, 1, 3], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 6, 2, 2, 1, 1, 2, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = saveChr(abs(( mod(int(4.0),len(in1)) - i0 ))).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [], [0, 0], [], [], [2, 1], [], [1], [], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 2], [3], [0, 0, 1], [0], [], [3, 0], [0], [], [], [1, 0, 1], [1, 4, 1], [0, 0], [], [2, 1, 1, 0], [0], [4], [1], [], [5, 1], [], [], [3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 3, 3, 1, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( b2 and ( int(1.0) - int(41.0) ) \\ge i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 6, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 2, 2, 2, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 3, 0, 0, 1, 2, 0, 3, 2, 2, 1, 0, 2, 0, 2, 2, 2, 0, 2, 1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 3, 2, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 1, 3, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 4, 2, 1, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 3, 1, 1, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\ni1 = len(in1[:i2])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [2, 1], [], [0], [], [], [0], [], [], [], [], [], [0, 2], [1], [3, 0], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [2], [1, 1], [], [0, 0], [], [], [1], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1], [9, 7, 2, 0], [1, 2, 1, 0], [0, 0], [0, 1, 1, 0], [], [], [2, 2], [1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\nloopBreak% = 0\\nwhile int(9.0) != int(72.0):{:\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [3], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [1, 2, 0], [1, 2], [1], [1, 0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(120.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [1, 2], [], [], [], [], [2], [5], [1, 2], [0], [5], [], [], [], [0], [1, 0, 1], [5, 8, 4], [0, 2, 2, 1], [0], [0, 1, 2, 0, 0], [0], [], [1], [0], [2, 0, 0, 4, 2], [], [], [0, 3, 2, 4, 0, 0], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 4, 1, 5, 1, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i0 != int(5.0):{:\\ni2 = ( i2 - i1 )\\n:}\\ns2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 5, 1], [], [], [4, 0, 0], [3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2.lstrip(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2], [1], [0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [], [0], [], [5, 3], [], [], [4, 4, 0], [0, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [0], [1, 2], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 0, 0, 1], [0, 8, 0, 7, 1, 5], [0, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 0], [], [1, 1, 3, 1], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(0.0) \\g int(80.0):{:\\nb0 = len(s1) == int(715.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [3], [1], [0], [2], [], [], [], [], [1], [0], [2, 0, 0], [], [2, 2, 0, 1, 0, 0], [0, 1], [], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 6, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( divInt(i2,int(0.0)) - i0 ) \\ge i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [3], [3, 5], [0, 1, 1], [0, 0], [], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 2, 7, 4, 8, 2, 4, 4], [0, 2, 1, 0], [1], [3, 0, 2, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [3, 3, 1, 0, 3, 0, 1, 2, 1], [2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [3, 1, 3, 4], [1], [], [0, 2, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0], [0, 1, 3], [0, 2], [1, 1, 1], [1], [], [24], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 0, 0, 0, 2, 2, 3, 0, 8, 2, 1, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not len(in0) \\ge i0:{:\\nres0 = mod(divInt(int(7.0),i2),i1) != int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 1], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1, 5], [0, 0, 0, 0, 2, 0, 0, 2, 0, 2], [1], [3, 2, 0, 0, 2, 3, 2, 2, 1, 2, 1, 2, 2, 2, 0, 0, 3, 2, 2, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0, 3, 3, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 2, 4, 0, 2, 1, 0, 1], [0, 0, 2, 1, 2, 2, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 10, 1, 47, 16, 8, 6, 11, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += max(divInt(i0,i0), divInt(abs(mod(divInt(int(4.0),divInt(int(0.0),divInt(divInt(divInt(i0,i2),saveOrd(saveChr(divInt(( min(int(0.0), ( int(7.0) + abs(int(3.0)) )) * int(6.0) ),divInt(( int(1.0) - i0 ),max(( ( int(4.0) * mod(i0,i2) ) * int(3.0) ), int(0.0)))))[:i0])),min(max(int(4.0), int(8.0)), int(1.0))))),int(5.0))),i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 9, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 2, 2, 0, 1, 0, 1, 2, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 0, 0, 2, 3, 2, 2, 2, 3, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 2, 0, 3, 2, 1, 0, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = in1 not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 2, 1, 0, 2, 1, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s2[i0:].startswith(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 2, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 2, 2, 1, 1], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 == s2\\ni0 = len(s2[len(s1):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [1, 2, 2], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 0, 1, 1, 1], [4, 9, 2, 6, 9, 5, 4, 8, 9], [0, 2, 0], [1], [1, 2, 2, 3, 1, 1, 2, 0, 2, 0, 0, 1], [1, 1, 0, 1], [0], [0], [0, 0, 1], [2, 2], [], [], [2, 0, 0, 2, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s2[int(4.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 3, 1, 1, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 18, 11, 0, 55, 17, 11, 8, 9, 7, 1, 1, 15, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = in1[max(i2, int(07.0)):abs(mod(i2,int(5.0)))][mod(int(7.0),min(i2, ( divInt(( len(in0[i0:divInt(min(( i1 + ( divInt(( int(4.0) + i2 ),divInt(max(int(1.0), i1),int(7.0))) * int(7.0) ) ), i2),i0)]) - mod(int(9.0),abs(int(8.0))) ),max(i0, ( ( ( int(5.0) + int(0.0) ) * divInt(int(4.0),i2) ) - int(8.0) ))) - int(59.0) ))):] not in s0[:mod(len(getCharFromString((\"\"R\"\" + saveChr(int(9.0))), int(2.0))),len(in1))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [2], [2, 1], [], [0, 0], [], [], [], [], [2], [], [1], [], [], [], [], [], [], [0, 1], [0], [0], [], [], [], [], [2, 2, 5, 2], [], [], [4, 0, 0, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 4, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s2.capitalize() not in s2:{:\\nin2 = s2\\ni0 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2, 1, 2, 1], [1, 0], [3, 0, 2, 1, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 2, 5, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += abs(i1)\\ni2 = ( int(0.0) * i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [2, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [3, 0], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1], [0, 7, 8, 7, 7, 7, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0, 2], [0, 1, 1], [3, 3, 1, 0, 3, 2, 2, 1, 2, 1, 3, 0, 2, 0, 2, 1, 0, 3, 3, 3, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 33, 7, 10, 4, 3, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[:len(\"\"R\"\"[len(in1):])]:{:\\nres0 = in1.startswith(in0[int(0.0):i0].capitalize()[abs(divInt(( int(7.0) + ( int(8.0) + min(i1, divInt(i2,( int(7.0) * i2 ))) ) ),len(saveChr(min(max(i1, abs(max(mod(int(7.0),i2), ( min(int(7.0), i1) - int(7.0) )))), i0))))):i0])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 1, 1], [], [], [], [], [], [], [], [0, 0], [], [], [], [], [], [1], [5], [2, 1, 0, 1, 2, 0, 2], [1, 1, 0], [0, 0, 2, 0, 0, 0], [1, 0], [], [1, 1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 5, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\ni0 -= i1\\ni2 = divInt(i0,i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [1, 2, 0], [1, 0], [1, 0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(5.0)\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0], [], [1, 0, 0], [], [0], [], [], [0, 2, 1], [5], [0, 2], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0], [0, 1], [0, 0, 3, 2, 2, 2, 2, 2, 1, 0, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [0, 0], [1, 0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s0[len(in2):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0], [], [0, 1, 0], [], [0], [], [], [0, 2, 1], [5], [0, 1], [0], [], [0], [], [0], [], [1, 1, 1, 0, 1, 0, 1], [7, 0, 6, 1, 1, 2, 4], [2, 0, 2, 0, 1, 1, 0], [0], [0, 0, 3, 2, 2, 0, 1, 2, 1, 1, 3, 1, 3, 0, 0, 0], [1, 0, 1, 0, 0], [2, 0], [1, 0], [0, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [5], [0, 1], [0], [], [2], [], [], [], [1, 1], [2, 4], [2, 0, 0, 0], [1], [2, 1, 0, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 2, 0, 5, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not divInt(int(2.0),i2) != abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 1], [0], [0, 1], [0], [0], [], [], [1], [], [2], [], [0], [], [], [], [], [1], [9], [1], [0], [3, 1], [], [2], [0], [], [0, 3, 5, 1], [], [0], [4, 4, 0, 0], [3, 2], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 2, 0, 0, 4, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s0.capitalize().strip() in in0\\ni1 = abs(int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 0, 1], [2, 7, 0, 3, 8], [2], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(27038.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [3], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [1, 3, 0], [1, 2], [1], [1, 0], [], [], [0], [], [4, 4, 4, 4, 3, 3, 5], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(130.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [1, 0], [0], [3], [], [3], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [0], [1], [0], [2], [], [], [], [], [1, 1], [0, 2], [2, 0, 0], [], [2, 2, 0, 1, 1, 0], [0, 1], [], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( divInt(i2,int(0.0)) - int(2.0) ) \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 0], [0], [0, 0], [0], [], [0], [], [], [], [1, 0, 1, 1], [9, 3, 4, 0], [], [], [1, 2, 1, 1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 3, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [1, 0, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[int(0.0):]:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [8, 8, 1, 3, 8, 4, 9, 7, 5, 0, 2, 5], [1, 2], [1], [1, 1, 2, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4], [2, 1], [1, 0], [0], [], [], [4, 1], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(8813.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [2], [], [], [], [], [1, 0, 1], [0, 2, 4], [2, 0, 0], [], [2, 3, 0, 1, 1, 0], [0, 1], [4], [2, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 5, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( saveOrd(saveChr(i2)) * int(0.0) ) \\l int(24.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [3, 7], [1], [], [2, 2, 1, 0, 1], [1, 1], [], [], [1, 1], [5, 2, 2], [], [], [2, 3, 0, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 2, 0, 0, 2, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (s2 + s2)[:mod(mod(int(3.0),i1),int(7.0))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 2, 1], [], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [], [1, 0, 0, 1], [3, 1, 5, 1], [2, 1, 0], [1, 1], [3, 1, 0], [], [4], [0, 2], [], [1, 5, 2], [], [], [4, 0, 0, 4], [3, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += saveOrd(s1.lstrip())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1], [0], [2, 1], [1, 1, 1], [0, 1], [], [4], [0], [], [5], [], [], [2, 0], [], [1, 0], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [2], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = getCharFromString(saveChr(int(0.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [0, 3], [3], [0, 1], [0], [], [1], [], [1], [], [1, 0, 1], [4, 1, 2], [0, 2, 1], [1, 1], [0, 1], [], [], [2, 2], [], [2, 1], [], [], [4, 0, 4], [3, 1], [5], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 1, 0, 2, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i2\\ns2 = s1.strip(saveChr(int(4.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 2, 0, 0, 1, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 2, 0, 2, 3, 1, 2, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 0, 1, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 2, 3, 0, 1, 2, 1, 0], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 15, 0, 56, 18, 10, 10, 8, 6, 0, 1, 11, 2, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1[:i0])]:{:\\nin0 = s0[:i2].rstrip()[abs(mod(i0,int(0.0))):( int(7.0) * divInt(i0,divInt(( divInt(int(5.0),i1) - ( abs(( i2 * len(saveChr(min(( ( i1 - divInt(max(int(7.0), divInt(int(7.0),i0)),i2) ) + i0 ), ( int(1.0) * abs(( max(i0, ( mod(divInt(int(7.0),int(7.0)),( int(9.0) - i1 )) - int(8.0) )) * int(5.0) )) )))) )) + min(i0, int(0.0)) ) ),int(4.0))) )][i1:i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [5], [2, 0], [0], [0, 0, 1], [0], [], [1], [], [3, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [17], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (in2 + \"\"R\"\")\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1], [5, 7, 5, 6], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(5756.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [6, 9, 1], [2, 0, 2], [1, 0], [1, 3, 1, 0], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 4, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(6.0)\\ni0 = min(int(9.0), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [0], [], [2], [], [2], [], [], [], [], [1, 0, 1, 0, 1, 1], [4, 4, 1, 4, 3, 0], [0, 0, 0, 2, 1], [1], [0, 3, 0, 3, 0, 0, 1, 1, 3, 1, 3, 1], [1], [2, 1, 0, 3], [2], [], [4, 1, 4], [1], [], [2, 0, 2, 3, 2, 4, 4, 4, 0, 3, 4, 1, 2, 0], [2, 1, 3, 1], [5], [2, 2, 1, 1], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 5, 1, 12, 0, 4, 1, 0, 3, 1, 0, 14, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\nb0 = in1[abs(i0):] == (saveChr(max(i2, i1)).capitalize()[:int(4.0)] + s1.strip((saveChr(int(41.0)) + \"\"U\"\")))[min(int(43.0), len(in1[:int(0.0)])):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [0], [0], [0], [], [1], [], [1], [], [1], [0], [0, 2], [1], [2, 0, 1, 0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [5, 1], [2], [0], [3], [], [4], [], [], [1], [1], [], [4, 1], [2], [], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"R\"\".capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1], [8], [2, 2, 1], [1], [0, 1, 3, 3, 0, 0, 0], [1, 1], [0, 3], [0], [0, 1], [0], [], [], [1, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [2], [0], [], [], [], [], [5], [1], [0], [], [], [], [], [0], [1, 0, 1], [5, 8, 1], [0], [], [2, 1, 1, 0], [1], [], [], [0], [5, 0, 5, 3, 4], [1], [0], [3, 0, 1, 4, 3, 3, 0, 0, 4], [3, 1], [1], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 1, 0, 0, 1, 5, 1, 1, 9, 2, 1, 0, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in (s0 + \"\"F\"\"):{:\\nin2 = ((in0 + in1) + saveChr(divInt(int(5.0),int(81.0)))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 1, 1], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 4], [2, 0, 0, 0], [1], [2, 1, 0, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(2.0),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1, 0, 0, 0], [0], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [2, 4, 1], [0, 0, 0, 1, 2], [], [3, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0], [0, 1, 1], [1], [0], [0, 0], [5, 2, 4, 4], [], [0], [0, 2, 4, 0], [3], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [0, 1, 0, 0, 1, 1], [9, 9, 4, 3, 9, 5], [0, 2, 0, 0], [1], [2, 0, 1, 2, 1, 1, 3, 3, 0, 0, 0], [1, 0], [1, 0], [0], [1], [4, 3], [], [], [2, 2, 0], [], [], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 4, 0, 11, 2, 2, 1, 1, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in0[mod(i0,int(99.0)):( int(439.0) + int(5.0) )][max(min(i2, i0), i0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0], [], [0, 0], [], [0], [], [], [0, 2], [], [0, 0, 2], [], [2], [1, 1], [1], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [], [1, 1], [], [], [], [3, 3], [], [], [], [9, 30]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 8], [2, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [0, 1], [1], [0, 3, 0], [1], [], [3, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (in0 + s0)\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [0], [], [], [2], [], [1], [], [1], [2], [2], [0], [1], [], [], [2], [1, 1, 1, 0, 0, 0, 1, 0], [5], [], [0], [4, 4], [3, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(2.0)).lstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 2], [], [0], [0], [], [0], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [4, 5, 4, 0, 9, 0, 7, 2, 2, 6, 1, 6, 7, 8], [0, 2, 0, 2, 2, 1, 2, 0, 0], [0], [1, 1, 0, 2, 3, 1, 1, 0, 2, 1, 0, 2, 2, 0, 0, 0, 1, 2, 1, 2, 1, 3, 0, 0], [0, 1, 1, 0, 1, 1], [1, 0], [2, 0], [1, 1, 0, 0], [3, 2], [1, 1], [], [2, 0, 2, 2, 3, 2, 0, 4], [1], [], [1, 0, 2, 0], [3, 1], [], [15], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 9, 1, 24, 6, 2, 2, 4, 2, 0, 0, 8, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in0[:int(4.0)].endswith((s2[int(5.0):i0] + saveChr(( max(int(4.0), int(090.0)) * i2 )))[mod(int(72.0),i0):][mod(( i2 + i2 ),i1):int(26.0)])\\ni2 = divInt(int(1.0),divInt(int(678.0),min(i0, i0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1], [5, 7, 5, 0], [2], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(5750.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [1], [], [], [], [], [], [], [1, 0, 1], [9, 5, 2], [2, 1, 1, 2], [0, 0], [1, 2, 0, 1], [0], [], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(9.0)\\ni1 = ( i1 + int(52.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [], [1], [], [0], [], [], [], [1], [1], [0], [], [], [], [], [], [1, 0, 1, 1], [9, 5], [2], [0], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 1, 1, 1, 2, 1, 0, 2, 2, 0, 0, 2, 2, 0, 1, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 0, 2, 2, 0, 1, 1, 2, 0, 1], [0, 2, 0, 0, 0, 0, 1, 0, 2, 1], [0, 1, 2, 0, 2, 2, 2, 1, 0, 2, 0, 1, 2, 0, 2, 2, 2, 1, 2, 0, 0, 0, 2, 2], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 2, 0, 3, 0, 2, 1, 2, 3, 0], [0, 2, 1], [0, 0, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 2, 1], [0, 0, 0], [1, 1, 4, 4, 3, 0, 4, 2, 1, 1], [2, 1, 3, 3, 1, 0], [0, 0], [0, 1], [1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 9, 1, 8, 5, 8, 9, 7, 6, 2, 7, 0, 1, 5, 7, 8, 4, 6, 9, 2, 5, 4, 7, 6, 8, 0, 4, 2, 1, 9, 7, 0, 0, 8, 5], [2, 0, 0, 2, 0, 2, 0, 2, 2, 1, 1, 1, 1, 2, 0, 2, 2, 0, 1, 1, 0, 0, 1, 1, 1, 2, 0, 2, 1, 0, 1, 1, 1, 2, 1, 0, 0, 2, 0], [0, 1, 1], [0, 3, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 2, 1, 1, 3, 0, 0, 2, 3, 2, 3, 3, 0, 2, 2, 3, 0, 1, 3, 2, 1, 1, 1, 1, 1, 3, 2, 3, 0, 3, 0, 1, 0, 1, 0, 0, 2, 1, 0, 3, 1, 0, 3, 2, 3, 1, 3, 1, 2, 0, 3, 1, 0, 0, 1, 1, 3, 1, 1, 3, 3, 2, 2, 1, 1, 1, 3, 2, 3, 1, 3, 2, 1, 3, 1, 0, 3, 0, 2, 0, 0, 3, 2, 3, 3, 3, 0, 0, 3, 3, 1, 2, 0, 3, 3, 0, 3, 0, 0, 2, 1, 2, 3, 1, 1, 0, 1, 3, 2, 0, 3, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 3, 2, 0, 4, 0, 3, 3, 0, 2, 1, 0, 4, 4, 1, 1, 1, 1, 0, 4, 2, 2, 4, 4, 2, 3, 0, 0, 4, 2, 4, 3], [2, 0, 2, 0, 1, 2, 0, 2, 0, 2, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 3, 4, 3, 4, 5, 2, 0, 2, 1, 0, 3, 2, 0, 2, 5, 2, 3, 4, 3, 3, 2, 2, 4, 4, 0, 2, 5, 5, 5, 3, 5, 0, 0, 3, 3, 1, 5, 1, 2, 3, 3, 5, 3, 3, 3, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [0, 0, 4, 4, 0, 0, 0, 3, 3, 0, 0, 4, 4, 4, 0, 1, 4, 1, 4, 2, 2, 2, 0, 1, 4, 4, 1, 2, 1, 2, 0, 0, 4, 0, 4, 1, 0, 2, 4, 0, 0, 0, 0, 4, 4, 1, 1, 2, 0, 2, 1, 4, 2, 1, 4, 4, 1, 0, 2, 1, 2, 4, 3, 2, 0, 1, 1, 4, 0, 4, 0, 1, 2, 4, 3, 3, 4, 0, 1, 0, 1, 0, 2, 4, 3, 0, 0, 1, 0, 2, 1, 2, 1, 0, 0, 4, 4, 3, 0, 1], [1, 0, 2, 2, 1, 3, 3, 1, 2, 0, 3, 1, 1, 0, 2, 1, 3, 1, 1, 0, 2, 2, 1, 0, 1, 0], [3, 1, 4, 5], [0, 2, 0, 1, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2], [0, 2, 2, 3, 0, 2, 2, 2, 0, 3, 2, 3, 3, 0, 3, 0, 2, 0, 1, 2, 1, 3, 0, 0, 3], [8, 10, 1, 1, 14, 6, 1], [16, 7, 21], [8, 2, 0, 7, 6, 9, 1], [0, 4, 22, 13, 26, 27, 30, 9]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in0:{:\\nb0 = not True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [1, 0, 1], [3], [0, 0], [0], [], [0, 0], [], [], [], [1], [0], [2], [], [0, 1, 3, 0], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b1:{:\\nb0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [0, 1], [1], [0, 3, 2], [1], [], [1, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = \"\"R\"\"\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0, 2], [1], [0], [0], [], [0], [], [], [], [0, 1], [7, 0], [1, 0, 1, 2], [], [2, 0, 2, 0, 0, 2, 0, 1], [0, 0, 1], [], [0, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [3, 0], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 4, 3, 0, 4], [1], [0], [3, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (s0 + s0) not in s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 2, 1], [0], [0, 0, 1, 0, 0], [], [0], [], [], [0, 2, 3, 3], [2, 5], [0, 1, 0], [0, 0], [], [1, 0], [], [0], [], [1], [5], [2, 0, 1, 2], [1], [0, 1, 0, 0], [], [], [0], [], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\nb2 = i2 == int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [2, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 1, 4], [], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 10, 1, 2, 0, 1, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[:len(in1)]:{:\\nb0 = in1[len(getCharFromString(saveChr(i0)[int(0.0):i1], mod(i0,int(0.0)))):] not in in0[i2:int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [3], [1], [0], [], [], [], [], [], [0, 1], [9, 0], [0, 1, 2, 1], [1], [3, 2, 0, 0, 0, 1], [1], [0, 0], [1, 0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 6, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(divInt(i0,i1), i2) \\ge int(90.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [], [], [], [], [], [3, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [0, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 0], [], [1, 1, 3, 1], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\g int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 8, 8, 10, 0, 34, 8, 8, 5, 3, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nb1 = ( ( len(in1[i0:i2]) != abs(int(4.0)) or True ) and in0 not in saveChr(i2)[int(7.0):mod(int(1.0),min(i0, ( ( divInt(int(7.0),i1) + ( len(s0[divInt(i2,max(max(( int(2.0) + i1 ), ( abs(int(1.0)) * i2 )), int(7.0))):int(7.0)]) - i0 ) ) + i0 )))] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [2, 1], [1], [0], [], [], [0], [], [4, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 2], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 3, 4, 0, 3, 2, 0, 0, 5, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(saveChr(min(mod(int(0.0),i0), mod(i1,abs(divInt(int(7.0),min(i2, i0)))))).capitalize()):] not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [2, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2[i0:]\\ni2 = len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0], [0], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [0], [0, 2, 1], [0], [4], [3, 0], [1], [], [], [1, 1, 0, 1, 1, 1], [9, 4, 9, 2, 8, 3], [2, 1, 0], [], [1, 0, 0, 3, 2, 2, 3, 0, 3, 2, 1, 1, 1, 1], [1, 0, 1], [0, 4, 3], [0, 1], [0], [5], [], [], [0, 4, 0], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 1, 1, 2, 0, 3, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( in2.startswith(saveChr(int(9.0))) or i2 \\l i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 0], [], [], [0, 1, 0, 0, 1], [4, 8, 4, 8, 6], [2, 0], [0], [2, 1, 1], [1], [], [0, 0], [0], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(int(48.0),int(486.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 11, 0, 40, 12, 8, 4, 8, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),mod(int(0.0),i0)):]:{:\\nres0 = in1[( i2 + int(7.0) ):divInt(int(5.0),len(in0))] not in s0[i2:i0].capitalize()[divInt(divInt(int(7.0),i1),( abs(( i2 + divInt(min(( len(saveChr(i1)) * mod(min(int(6.0), i2),int(1.0)) ), int(7.0)),i0) )) - i0 )):divInt(int(7.0),max(int(9.0), abs(i0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [2], [1, 0], [], [], [], [], [2], [5], [2, 1], [0], [1], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 5, 9, 5, 7, 7, 9, 5, 6, 3, 5, 7, 2, 1], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 0], [1], [0, 2, 2, 2, 3, 0, 3, 2, 2, 3, 2, 0, 1, 2, 3, 0, 0, 2, 2, 0, 2, 0, 2, 1, 3, 2, 0, 3, 2, 0, 0, 2, 3, 2, 2, 3, 2, 0, 2, 1, 3, 1, 3, 1, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 0, 2, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 2, 1, 2, 1, 2, 3, 1, 0, 2], [0, 2, 1, 1, 1, 0, 0, 0, 1, 2, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [5, 1, 5], [], [], [0, 2, 0, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 15, 15, 19, 1, 68, 24, 11, 12, 13, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\nloopBreak% = 0\\nwhile in2 not in s1[:( ( ( max(i2, min(( ( abs(divInt(i0,int(4.0))) * ( max(i1, i2) - divInt(mod(i1,( i2 - divInt(int(8.0),abs(( i0 - max(divInt(i0,i0), ( abs(divInt(divInt(len(in2),divInt(i0,mod(int(5.0),max(int(9.0), min(int(5.0), int(7.0)))))),i0)) + mod(mod(int(7.0),i1),int(9.0)) )) ))) )),i2) ) ) + ( i2 + i0 ) ), mod(( int(5.0) - mod(int(6.0),abs(i1)) ),i0))) * int(3.0) ) + int(5.0) ) - int(7.0) )]:{:\\nb2 = int(2.0) != int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [], [0], [], [], [], [], [0, 0], [], [], [0, 1], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [0, 3], [3], [0, 1], [0], [], [1], [], [1], [], [0, 0, 1], [4, 1, 2], [0, 0, 1], [1, 1], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\ni1 *= int(412.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 3, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 2, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 6, 0, 3, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[max(abs(int(0.0)), i1):]:{:\\nres0 = in1 not in in1[abs(i2):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [1], [0, 0], [], [3], [1], [], [3], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = len(in1.capitalize()) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1[len(in0):] not in s1[int(0.0):i0].rstrip()[abs(i0):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [0], [0], [0], [], [1], [], [1], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [0], [0], [0], [], [1], [], [1], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [0], [2], [1], [0], [], [1], [], [1], [], [1], [], [0, 1], [0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [2, 0], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 6, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 1, 1, 2, 0, 0, 0, 2, 0, 1, 0, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 0, 1, 3, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 2, 0, 0, 0, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0], [3, 1, 2, 2, 3, 0, 1, 2, 1, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 14, 14, 15, 1, 56, 18, 10, 10, 8, 5, 1, 0, 9, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[max(i0, int(0.0)):]:{:\\nres0 = ( abs(mod(i2,int(7.0))) != divInt(int(5.0),abs(i2)) or ( in1.endswith(in0[( divInt(( len(\"\"R\"\") - i2 ),divInt(min(( i1 + ( divInt(( int(7.0) * i1 ),divInt(i1,int(4.0))) - max(int(1.0), int(7.0)) ) ), i2),i0)) + mod(int(7.0),abs(int(9.0))) ):max(i0, ( ( ( int(8.0) * int(5.0) ) - divInt(int(6.0),i0) ) - int(4.0) ))]) and True ) )\\ni2 = max(( ( i0 * i1 ) + i0 ), int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 5], [1, 1], [0], [0, 1, 1], [], [], [], [], [5, 0, 2], [1], [], [3, 4, 1, 0, 1, 3, 0, 2, 0], [2, 0], [0], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [3, 3], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [1], [3, 2, 2, 3, 3, 1, 1, 0, 0, 0], [1, 1, 1], [4, 0, 2], [1], [1, 0, 1], [4, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 9, 2, 3, 1, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= saveOrd(saveChr(mod(divInt(min(abs(int(3.0)), int(3.0)),i2),i0)).capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 1], [], [0], [0], [], [0], [], [0], [], [], [], [0, 0, 0, 0, 0, 1, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [3, 8], [2], [], [1, 2, 1, 0, 1], [1, 1], [], [], [1, 1], [2, 2, 2], [], [], [4, 3, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [6, 4], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(6.0) \\g int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1], [0, 1, 1], [3, 0, 2, 1, 0, 2, 1, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 1, 0, 3, 0, 4], [1], [0], [2, 0, 3, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 32, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 12, 0, 49, 16, 8, 7, 9, 6, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(i0):]:{:\\nres0 = (s1[mod(int(0.0),i2):mod(int(7576.0),( divInt(int(1.0),len(s0)) + i2 ))] + in0[i0:divInt(divInt(int(7.0),i1),( abs(( i2 + divInt(min(( len(saveChr(i1)) * mod(min(int(7.0), i2),int(9.0)) ), int(8.0)),i0) )) - i0 ))].capitalize()[divInt(int(5.0),max(int(04.0), abs(i1))):( ( ( int(8.0) + int(5.0) ) * mod(int(9.0),i1) ) - int(922.0) )]).startswith((\"\"R\"\" + s0.rstrip()))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 328}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 34, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = in1[max(i2, i2):].endswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 295}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 0], [], [0, 0], [], [], [3], [], [2], [], [2], [], [], [], [], [], [], [1, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [0, 1], [1], [0, 3, 0, 0], [1], [], [3, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [1], [0], [17], [], [], []], "fitness": 37, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 4, 1, 0, 1, 0, 4, 1, 0, 9, 3, 2, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (in0 + s0)\\nres0 = s0 == getCharFromString(\"\"R\"\"[:i1].rstrip(), ( i1 + i1 )).rstrip()\\n", "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1, 1], [2, 1], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 2, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 10, 0, 32, 10, 6, 7, 3, 6, 0, 1, 11, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[( len(in1) + ( i0 + len(in1[( i2 * int(0.0) ):]) ) ):]:{:\\nres0 = in0 not in s0[i0:int(7.0)].rstrip()[abs(int(5.0)):divInt(( divInt(int(7.0),i0) - ( min(( i1 + len(saveChr(min(divInt(i2,i1), ( i0 * int(7.0) )))) ), i0) - int(1.0) ) ),i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 403}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1, 1], [1, 0], [0, 0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 2, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 1, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 0, 1, 1, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 38, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 1, 1, 6, 1, 1, 4, 2, 2, 1, 17, 17, 14, 1, 56, 18, 9, 7, 11, 6, 0, 0, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( ( len(s0[mod(mod(int(0.0),i0),( int(7.0) + divInt(divInt(int(5.0),len(in1)),i2) )):]) != i2 or True ) and in1[:divInt(( int(7.0) + i0 ),( abs(divInt(i1,( min(mod(len(in1),i2), divInt(min(int(6.0), i1),int(1.0))) * int(7.0) ))) - i2 ))].startswith(in0[i0:( int(7.0) + max(int(9.0), abs(i0)) )].capitalize()[( ( mod(int(8.0),int(5.0)) * divInt(int(0.0),i0) ) - int(4.0) ):max(mod(i0,int(8.0)), int(59.0))]) ):{:\\nres0 = True\\n:}else:{:\\ni2 = int(9.0)\\n:}\\ns0 = saveChr(i0)\\n", "other_info": {}, "test_fitness": 301}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 42, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 6, 0, 0, 10, 1, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0.startswith(in2):{:\\nres0 = ( saveOrd(in1) != len(in1[i0:]) or ( in0.endswith(s0[i2:abs(int(0.0))].rstrip()[i2:]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 43, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i2:]:{:\\nres0 = in0.startswith(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 433}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):].startswith(in1)\\n", "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 1, 9, 0, 3, 0, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(getCharFromString(s1[i1:int(0.0)], abs(int(7.0)))[i2:int(5.0)][:i2])\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(s2)):{:\\nres0 = in1[max(i1, i2):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [2, 0, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 8, 8, 9, 0, 33, 9, 7, 5, 4, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[:len(in1)]:{:\\nres0 = ( ( len(in1[i2:]) != int(0.0) or True ) and in0 not in getCharFromString(s1[abs(mod(i0,int(7.0))):i2], int(5.0))[saveOrd(saveChr(i2)):mod(( divInt(int(7.0),i1) * ( len((\"\"R\"\" + in1.rstrip())) + divInt(i2,( min(( int(2.0) - i1 ), ( max(int(1.0), i0) - int(7.0) )) - int(7.0) )) ) ),i0)] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 4, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [2, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 5, 3, 1, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[:len(in1)]:{:\\nres0 = in2[:len(in0)] not in getCharFromString(s1, i0)[int(0.0):abs(mod(i1,int(0.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 0, 2, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 9, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 2, 3, 2, 3, 1, 3, 3, 0, 0, 0, 3, 2, 3, 2, 1, 0, 0, 0, 2, 3, 1, 2, 0, 3, 1, 2, 2, 3, 0, 1, 1, 2, 1, 3], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 4, 2, 2, 3], [0, 0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 4, 4, 3, 1, 0, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 8, 0, 26, 6, 8, 3, 3, 7, 1, 1, 15, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = in1 not in in1[( len(in0) + ( saveOrd(saveChr(int(0.0)).capitalize()[:abs(min(i2, i2))][i0:len((\"\"R\"\" + s0))][( min(mod(int(7.0),i1), i2) + i1 ):mod(saveOrd(in1),int(5.0))]) * divInt(i2,abs(int(9.0))) ) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 0, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [20], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 9, 8, 7, 2, 5, 1, 1, 11, 2, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"U\"\"):]:{:\\nres0 = in1[len(s2):] not in in0[i0:i2].rstrip()[abs(( i0 + int(0.0) )):( int(7.0) + min(i0, mod(( ( int(5.0) * int(7.0) ) - ( len(saveChr(( i1 + min(max(( int(4.0) * i2 ), divInt(max(int(1.0), i1),int(7.0))), i0) ))) - i0 ) ),i2)) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 9, 1, 2, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [1, 3, 0, 1, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 2, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 0, 1, 1, 0, 1, 0], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = len(in1) != i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 6, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 0, 0, 3, 1, 2, 1, 0, 2, 3, 2, 0, 0, 2, 2, 1, 0, 3, 3, 3, 0, 2, 1, 1, 0, 2, 1, 2, 1, 3, 0, 2, 3, 0, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 2, 3], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 0, 3, 0, 0, 5, 0, 1, 10, 3, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = getCharFromString(in1, len(saveChr(i0))) not in in0[int(0.0):max(i2, i2)].rstrip()[int(8.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 3, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 6, 1, 13, 1, 3, 0, 1, 5, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(in1), i0):]:{:\\nres0 = (in1 + getCharFromString(saveChr(int(0.0))[:i2], mod(i2,int(7.0)))) not in in1[int(5.0):int(7.0)]\\ni0 = max(i0, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 1, 4], [1], [0], [2, 0, 0, 0, 2, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 10, 0, 3, 0, 0, 5, 0, 1, 11, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1 not in getCharFromString(in2[:len(saveChr(i0))], int(0.0))[abs(int(7.0)):i2][int(5.0):i0][:int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 0, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 10, 0, 38, 11, 8, 4, 7, 5, 1, 1, 14, 4, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nres0 = in1[len(saveChr(mod(int(7.0),i0))[mod(i2,int(0.0)):( int(5.0) * abs(i2) )].rstrip()):] not in in0[i0:divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( len((\"\"R\"\" + saveChr(divInt(min(i1, ( max(int(6.0), i2) * int(1.0) )),int(7.0)))).lstrip()) - i0 ) ), i0),mod(int(7.0),abs(int(9.0)))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 637}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 0, 0, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 0, 0, 3, 0, 4, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i1:]:{:\\nres0 = ( ( saveOrd(in1) != i2 or True ) and in1[i2:] not in s1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 1, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 50, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 1, 3, 1, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] in s0[:i0].rstrip()[i2:abs(( i0 + int(0.0) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 572}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0, 2], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 6, 6, 11, 0, 32, 9, 6, 5, 4, 6, 1, 0, 15, 3, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1[mod(len(in2),i0):] == in1[i2:]:{:\\nres0 = ( len(in1) != ( i0 + int(0.0) ) or ( in0[i0:int(7.0)].rstrip()[abs(int(5.0)):( divInt(( int(7.0) + i1 ),divInt(min(( i2 * len(saveChr(min(( i1 - i0 ), divInt(i0,int(7.0))))) ), i0),int(1.0))) + i2 )].endswith((\"\"R\"\" + s0.lstrip())) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 345}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [2, 3, 0, 1, 2, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 1, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 1, 49, 18, 7, 8, 10, 5, 1, 1, 8, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(\"\"R\"\"),i0):]:{:\\nres0 = getCharFromString(in2, int(0.0)) not in in1\\ni2 = mod(( i0 + int(9.0) ),divInt(int(5.0),max(i0, ( divInt(( abs(i1) + ( min(divInt(i2,( divInt(mod(int(7.0),i1),( len(in0[:int(4.0)]) * i2 )) - int(1.0) )), int(7.0)) + i0 ) ),i0) * ( int(7.0) - min(int(9.0), max(i2, ( divInt(divInt(int(8.0),int(5.0)),divInt(int(0.0),i2)) - int(4.0) ))) ) ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 484}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 0, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 6, 1, 9, 2, 1, 1, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(i0,i2):]:{:\\nres0 = s0 not in in1[i0:]\\ni0 = max(( i1 + int(0.0) ), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 484}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 53, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 5, 0, 1, 10, 3, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString(in1, len(in1))):]:{:\\nres0 = saveChr(i0) not in in0[int(0.0):i2].rstrip()[:mod(i2,int(7.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 659}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 54, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[i0:]:{:\\nres0 = in1 != in1[i2:i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 688}, {"genotype": [[0], [1, 1, 0, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2, 0], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 2, 2, 0, 2, 0], [0, 0], [1, 1], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 9, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 1, 2, 1, 1, 2, 0, 1], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 2, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 3, 1, 3, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4, 3], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4, 0, 2, 5, 3], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0, 4, 2, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 2], [17], [], [5], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 3, 0, 2, 1, 1, 0, 0, 3, 3, 4, 0, 12, 2, 3, 0, 2, 7, 1, 1, 14, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i1:]:{:\\nres0 = ( in0 not in in1[len(in0):] or s0[i1:int(0.0)] not in in1[len(getCharFromString((\"\"R\"\" + saveChr(mod(i1,int(7.0)))), mod(int(5.0),abs(i1)))):] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 692}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 8, 0, 38, 12, 8, 5, 7, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(max(int(07.0), int(5.0)), abs(mod(i2,int(7.0)))):]:{:\\nres0 = in0 not in in1[mod(int(4.0),min(i2, ( divInt(( len(in0) + i2 ),divInt(min(( i0 + ( divInt(( int(1.0) * i1 ),divInt(max(int(7.0), i2),int(7.0))) - int(9.0) ) ), i1),i2)) + mod(int(8.0),abs(int(5.0))) ))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 692}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 0, 2, 1, 0, 2, 1, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 1, 5, 1, 0, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1.startswith(in1[i0:])\\ni2 = mod(int(7.0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [], [2], [0, 0], [3], [], [], [], [], [0, 1, 1], [9, 9, 1], [1], [1], [1, 1], [], [], [1], [], [0, 5, 2, 3], [], [], [3, 3, 4, 2, 2, 0, 0, 0, 0], [3], [1], [1, 2], [], [], [], [], []], "fitness": 60, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 9, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ((s0[int(99.0):][:int(1.0)].rstrip() + in2) + s2) != in0\\n", "other_info": {}, "test_fitness": 583}, {"genotype": [[0], [0, 0, 1, 1], [2, 0, 0, 0], [0], [0, 0, 1], [0], [0, 0, 0], [], [], [3, 3], [0, 5], [1, 0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1], [6, 1, 3], [1, 2, 2, 0, 2], [1], [1, 1, 1, 2, 0, 0, 3, 0, 3], [0], [0, 3], [0, 1], [], [2, 3], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 3, 3, 1, 1, 3, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in0:{:\\nres0 = int(6.0) \\l int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = True\\ni1 += int(3.0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 0, 0], [], [0], [], [], [2, 3, 2, 0], [3, 0], [1, 0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1], [3, 5, 8], [2, 1], [0], [1, 0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 4, 2, 3, 2, 0, 1, 0, 0, 0, 3, 3, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(3.0) \\ge i2\\nres0 = b2\\nb0 = int(5.0) \\l int(8.0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0, 0], [], [0], [], [0], [], [], [3, 3], [5], [0, 1, 0], [0], [], [3, 0], [1], [], [], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [9, 6, 4, 8, 2, 9, 0, 1, 1, 1, 3], [1, 0, 2, 0, 2], [], [2, 2, 1, 2, 2, 1, 3, 2, 1, 3, 2, 3, 3, 2, 3, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 1], [3, 4, 3, 1, 1, 0], [0, 2, 2, 1], [1, 0, 1, 1], [1, 4, 0, 2], [], [], [2, 0, 2, 4, 4, 0, 0, 0], [3, 3], [5, 0], [0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 10, 10, 5, 0, 25, 8, 5, 4, 4, 4, 0, 0, 8, 2, 2, 2, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( mod(int(9.0),divInt(( int(6.0) + len(s1[mod(int(4.0),saveOrd(in1.lstrip().strip(s0)[( len(s2) * max(( max(mod(int(8.0),int(29.0)), i1) * i0 ), i2) ):])):i0]) ),i2)) - int(011.0) ) != int(1.0) or res0 )\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1, 1], [1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 2, 1, 0, 2, 1, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 5, 1, 1, 0, 1, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):].endswith(s2[:i0])\\ni2 = mod(int(0.0),i2)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [], [0, 0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1], [6, 7], [1, 1, 1], [1], [0, 1, 0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i1 \\l int(6.0)\\ni1 *= i1\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [], [0], [], [], [3], [3], [1], [0], [], [], [], [], [], [], [], [1, 0, 2], [1], [3, 0, 0], [], [4], [2], [], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= saveOrd(in1)\\nres0 = i0 \\ge i2\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [2], [0, 1], [0], [], [2], [], [], [], [0, 0, 1], [8, 9, 7], [2], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not int(897.0) == i2\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [1, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] in in1.capitalize()\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [0], [], [], [0, 3], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1], [0, 5], [0, 2, 2, 1, 1], [1, 1], [0, 2, 0, 2, 1, 3, 1, 0, 0], [1, 1], [4], [1, 1, 0], [0, 0], [0, 5, 4, 4, 3, 0, 4], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 9, 2, 1, 0, 2, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 == divInt(i2,divInt(int(0.0),saveOrd(s0[int(5.0):])))\\nres0 = i2 \\le i1\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1], [1], [0], [], [0], [], [], [3], [0], [1, 0], [0], [], [1], [], [1], [0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [7, 0, 0, 9, 6, 5, 3, 6, 9, 5, 8], [1, 2, 1, 2, 1], [], [1, 1, 0, 1, 0, 2, 3, 0, 2, 2, 0, 2, 1, 2, 1, 3, 0, 3, 1, 0], [1, 0, 1, 0, 0, 1, 0], [2, 1, 2], [1, 2, 2, 2], [1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(70.0) \\l int(0965.0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [], [0], [], [], [1], [], [0], [], [1], [0], [2], [], [0, 0], [], [], [], [], [4], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [0], [0], [0, 0], [], [1], [], [0], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 0, 0, 1], [5, 3, 1, 4], [1], [], [1, 0], [], [], [], [], [4], [0, 1], [], [1], [], [], [], [0, 3], [20], [], [], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 1, 0, 0, 1], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"U\\\\\\t\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 0, 0, 0], [1], [0, 2, 0], [], [0, 0, 0], [], [], [3, 2], [5], [1, 0, 2], [0], [1], [1], [], [1], [1], [1, 0, 0, 1, 1, 1, 1], [7, 7, 7, 9, 2, 4, 7], [1, 2, 0, 1, 2, 0, 2], [], [1, 0, 0, 1, 0, 3, 0, 0, 2, 2, 3, 0, 1, 2, 0, 1, 1], [0, 0, 0], [4, 3], [1, 2, 2], [], [1, 1, 1, 3, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [], [4, 0, 3, 2, 3, 3, 0, 1, 3, 1, 4, 0, 2, 4, 4, 3, 3, 3, 3, 1, 2, 2, 1, 1, 2, 0, 1, 0, 4, 1], [0, 1, 2, 0, 0], [], [2, 2, 1, 2, 1], [1, 0, 0, 0, 2, 1, 2, 2, 1, 1, 3], [3, 10, 20], [19, 20, 9, 2], [5, 7, 1], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 3, 0, 0, 2, 1, 3, 1, 1, 1, 0, 1, 1, 7, 7, 7, 0, 17, 3, 2, 3, 0, 6, 11, 0, 30, 5, 0, 5, 11, 3, 4, 3, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) != i1:{:\\nres0 = False\\n:}else:{:\\ns1 = getCharFromString(s1, i2)\\nb2 = (((s1 + \"\"t\"\") + (\"\"DKU5\"\" + saveChr(int(779.0))))[i0:] + in0) not in getCharFromString(((((\"\"u\"\" + \"\"7\"\"[saveOrd(\"\"1\"\"):][:i1]) + s0[:i2]) + \"\"jc\"\") + s0), ( ( len(getCharFromString(\"\"%\"\", i0)) - int(2.0) ) * ( i2 * int(4.0) ) )).capitalize()[int(7.0):]\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 3, 8, 0, 0, 9, 6, 6, 7, 1, 1, 5, 9], [2, 1, 0, 0, 1, 2, 2, 1, 2, 1], [0], [2, 3, 2, 0, 2, 2, 3, 3, 2, 1, 3, 3, 0, 2, 1, 2, 0, 3, 1, 2, 1, 1, 2, 0, 2, 1, 1, 3, 2, 1, 2, 0, 2, 0, 2, 2, 3, 1, 3, 3, 0, 0, 0], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 0, 0, 3, 4, 2, 1, 0, 2, 4], [1, 2, 2, 1, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0], [2, 4], [1, 1], [], [0, 1, 1], [], [], [], [2, 1], [], [12], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 10, 1, 43, 15, 10, 5, 10, 1, 2, 0, 3, 0, 0, 0, 2, 0, 1, 1, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(max(divInt(i1,mod(( min(min(( int(0.0) - len(s2) ), saveOrd(\"\"2\"\")), i0) * divInt(int(3.0),( i0 * abs(int(8.0)) )) ),mod(int(00.0),int(966.0)))), ( i1 - divInt(int(7.0),int(11.0)) )),max(( int(5.0) - divInt(i2,mod(i2,divInt(divInt(min(int(9.0), abs(saveOrd(\"\"m\"\"))),i1),i2))) ), i1))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [], [2], [], [5], [], [], [], [], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [3, 8, 5, 3, 9, 3, 7, 7, 9, 0], [0], [1], [1, 1, 1, 3, 1, 1], [0], [1], [1], [], [3, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1], [], [3, 3, 2, 4, 1, 3, 1, 0, 3, 1, 3, 0, 1], [1], [], [2], [2, 0, 0, 1, 2, 0, 2, 0, 1, 0], [16, 10, 4, 0, 23], [24, 20], [9, 9, 2], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 2, 10, 0, 13, 1, 0, 1, 10, 5, 2, 3, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ((saveChr(int(3.0))[int(85.0):] + \"\"9QK\"\") + (\"\"y\"\" + in0)).endswith((\"\"9E2\"\" + (s0 + \"\"AuX\"\")))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [8, 3, 0], [1], [0], [2, 2, 3, 3, 2, 1, 1, 2, 3, 1], [1, 1, 1, 1], [2, 4, 3], [], [1, 1, 0, 0], [0], [1], [], [0, 1], [2], [], [], [1], [], [2], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 10, 4, 3, 0, 4, 1, 1, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = mod(mod(abs(saveOrd(s0)),divInt(int(8.0),int(3.0))),divInt(len(\"\"c\"\"),int(0.0)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 3, 3, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 2], [17], [], [4, 7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 11, 0, 50, 16, 10, 8, 8, 7, 3, 1, 16, 2, 0, 3, 3, 1, 0, 2, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ((in1 + in0[max(i0, int(7.0)):]) + s0[abs(mod(i2,int(7.0))):mod(int(5.0),min(i2, ( divInt(( len(getCharFromString((\"\"R\"\" + saveChr(i0)), divInt(min(( i1 + ( divInt(( int(7.0) + i2 ),divInt(max(int(4.0), i1),int(1.0))) * int(7.0) ) ), i2),i0))) - mod(int(7.0),abs(int(9.0))) ),max(i0, ( ( ( int(8.0) + int(5.0) ) * divInt(int(0.0),i0) ) - int(4.0) ))) - len(in1) )))]) not in \"\"47\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [4], [0, 1], [0], [], [2], [], [], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 4, 7, 6, 0, 0, 8, 5, 2, 8, 6], [2], [0], [2, 1, 1, 3, 3, 1, 1, 2, 1, 3, 2, 2, 1, 1, 3, 1, 0, 1, 1], [1, 1, 1, 1], [0, 4, 2, 3], [], [0, 1, 0, 1], [1, 0, 5, 3], [0, 1, 1], [], [3, 1, 4, 2, 3, 1, 3, 2, 4, 2, 0, 0, 0, 0], [3, 0], [5], [0, 1, 0], [0, 0, 3], [8, 6], [], [], [19]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 11, 11, 1, 0, 19, 4, 4, 0, 4, 4, 3, 0, 14, 2, 1, 3, 3, 2, 0, 0, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not divInt(int(9.0),int(47.0)) \\le min(saveOrd((\"\"IG\"\" + (\"\":\"\" + (getCharFromString(s1[int(6.0):int(0.0)], mod(int(0.0),abs(divInt(mod(int(8.0),int(5.0)),len(s0)))))[:int(2.0)] + in2))[i2:int(8.0)].strip(in0))), int(6.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 2, 2], [], [0, 0], [], [], [1, 0, 1], [], [0, 0], [], [], [1, 0], [], [1], [], [], [], [2, 1], [0], [3, 0], [], [2], [], [], [4, 5, 2], [0, 0, 0, 0, 0, 1], [], [0, 1], [], [], [], [1, 3, 2, 0, 2, 2], [24], [16], [6, 3, 1], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 0, 2, 0, 0, 0, 6, 1, 1, 3, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\nin1 = in2\\ns2 = \"\"q^6Y31\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 7, 0, 3, 5, 8, 9, 9, 0, 6, 1, 1, 7, 0, 1, 1, 4, 8, 8, 5, 2, 1, 8, 3, 9, 6, 7, 8, 8, 7, 4, 7, 0, 0, 9, 1, 0, 4, 9, 6, 3, 2, 0, 2], [0, 0, 0, 0, 2, 2, 0, 1, 1, 2, 0, 2, 2, 2, 0, 0, 2, 1, 2, 0, 2, 1, 1, 2, 0, 1, 2, 0, 2, 0, 0, 1, 0], [], [1, 1, 2, 2, 3, 1, 2, 1, 2, 1, 2, 2, 2, 1, 0, 0, 3, 3, 2, 0, 0, 3, 1, 2, 2, 2, 2, 1, 2, 1, 1, 0, 1, 1, 2, 1, 2, 2, 1, 0, 0, 2, 2, 1, 1, 2, 3, 1, 2, 0, 1, 3, 0, 2, 0, 0, 3, 3, 1, 0, 0, 0, 3, 1, 3, 3, 2, 0, 0, 1, 0, 0, 3, 1, 2, 1, 2, 3, 3, 1, 0, 0, 3, 3, 3, 1, 2, 1, 2, 1, 2, 3, 3, 1, 1, 2, 0, 2, 2, 0, 2, 2, 2, 1, 2, 0, 1, 2, 2, 3, 1, 3, 2, 3, 1, 0, 2, 2, 1, 1, 2, 0, 3, 2, 0, 3, 0, 2, 3, 3, 3, 1, 2, 3, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0], [2, 1, 4, 2, 1, 4, 1, 0, 4, 3, 1, 2, 1, 0, 3, 1, 2, 3, 1, 3, 0, 1, 4, 2, 2, 2, 4, 2], [1, 2, 2, 2, 0, 2, 1, 2, 1, 0, 0, 2, 1, 0, 1, 2, 2, 2, 2, 1, 2], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0], [4, 0, 5, 3, 4, 2], [1, 1, 1, 1, 1, 1, 1, 1], [], [4, 2, 2, 2, 2, 1, 2, 2, 2, 2, 0, 1, 2, 2, 3, 3, 3, 1, 0, 3, 1, 3, 4, 0, 0, 3, 2, 2, 2, 0, 1, 1, 0, 1, 2, 4, 2, 1], [0, 0, 1], [], [1, 1, 1, 2, 2, 1, 0, 1, 0, 0, 0, 2, 1, 2, 2], [1, 3, 0, 3, 2, 3, 3, 0], [1, 9], [24], [3], [30, 14, 22, 19]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 45, 45, 33, 0, 142, 43, 28, 21, 22, 6, 8, 0, 38, 3, 0, 15, 8, 2, 1, 1, 4], "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( int(1.0) \\g int(4.0) and ( ( abs(int(70.0)) - mod(int(35899.0),divInt(int(061.0),( divInt(( int(1.0) * i0 ),i0) * max(saveOrd(getCharFromString(\"\"y\"\"[divInt(i0,i0):][:abs(int(7.0))][:( mod(divInt(( int(0.0) * ( int(1.0) + int(1.0) ) ),i2),int(4.0)) * int(8.0) )][:mod(int(8.0),divInt(( int(5.0) - i2 ),i0))], mod(( int(2.0) * int(1.0) ),divInt(max(int(8.0), ( i1 - int(3.0) )),saveOrd(in1[:i1][( i2 + i0 ):max(min(int(9.0), i2), i2)][:i2][saveOrd(\"\"_\"\"):]))))), int(6.0)) ))) ) + len((((\"\"B\"\" + s0) + (\"\"+\"\" + (getCharFromString(in2, max(( i0 * i0 ), int(7.0))) + in0))) + (in1[:i2][i1:][abs(int(8.0)):( int(8.0) - divInt(max(min(int(7.0), i2), i0),len(\"\"3\"\")) )] + \"\"=\"\"))[max(abs(int(4.0)), ( int(7.0) + divInt(int(0.0),mod(len(s2),max(int(0.0), int(9.0)))) )):mod(i2,( ( i1 - ( ( ( int(1.0) * mod(i1,int(0.0)) ) * mod(( len(\"\":\"\") * int(4.0) ),min(divInt(max(int(9.0), i2),divInt(divInt(int(6.0),int(3.0)),mod(i0,saveOrd(saveChr(divInt(i1,abs(i2)))[divInt(abs(abs(saveOrd(\"\"J\"\"[int(2.0):]))),( abs(int(0.0)) * i0 )):])))), i2)) ) - i0 ) ) * i0 ))][i1:i0]) ) \\le int(2.0) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1], [2, 0, 0, 0, 0], [0], [1, 0, 0], [0], [0, 0, 0], [], [], [0, 2], [], [2, 2], [], [3, 3], [], [], [], [], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 3, 2, 5, 4, 8, 5, 8, 4, 8, 9, 8, 8, 6, 6, 2, 6, 2, 0, 5, 3, 0, 5, 0, 7], [0, 1, 0, 1, 1, 1, 1, 1, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 2], [0], [3, 0, 3, 2, 1, 2, 3, 3, 3, 3, 2, 1, 3, 0, 1, 3, 0, 2, 2, 1, 0, 0, 0, 1, 2, 2, 1, 2, 3, 1, 0, 2, 3, 3, 2, 3, 0, 3, 1, 1, 2, 0, 3, 0, 2, 0, 2, 2, 3, 3, 2, 1, 0, 0, 3, 1, 0, 3, 2, 0, 3, 2, 1, 2, 2, 0, 1, 0, 1, 1, 3, 2, 2, 3, 0, 1, 1, 1, 1, 1, 3, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 2, 4, 1, 2, 3, 2, 0, 0, 3, 1, 4, 3, 0, 4, 2, 0, 0, 3, 0, 0, 2], [0, 0, 2, 1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0], [4, 4, 5, 2, 3, 5, 4, 5], [1, 1, 1, 1, 1, 1, 1], [0], [0, 2, 0, 4, 2, 1, 4, 4, 1, 0, 3, 2, 3, 3, 2, 1, 0, 1, 2, 2, 2, 0, 1, 2, 0, 2, 0, 1, 1], [3, 0, 1], [2], [1, 2, 0, 0, 2, 0, 2, 1, 2], [1, 0, 2, 3, 2, 2, 2], [14], [15], [1, 4, 9, 0], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 25, 25, 19, 1, 82, 21, 22, 9, 12, 8, 7, 1, 29, 3, 1, 9, 7, 1, 1, 4, 1], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in1:{:\\ni0 = min(i1, abs(( int(93.0) + ( saveOrd(in2[:max(abs(len(\"\"p\"\"[( int(2.0) + abs(i0) ):].strip())), int(5.0))]) * min(i1, mod(( int(4.0) - i1 ),i1)) ) )))\\nb0 = getCharFromString(saveChr(i1), int(8584.0)) != \"\"O\"\"\\nb2 = s2 != (((\"\"1\"\"[divInt(mod(int(8.0),mod(min(int(9.0), i1),mod(len(in0),max(mod(saveOrd(\"\")\"\"),i2), len(in2[int(8.0):][int(8.0):( i2 + min(i1, ( i0 - ( divInt(saveOrd(\"\"4\"\"),abs(divInt(int(6.0),i1))) + i1 ) )) )][min(int(6.0), i0):]))))),min(mod(i2,len(in1[:( int(2.0) - divInt(( i1 + int(6.0) ),i0) )])), int(2.0))):int(0.0)] + in2[min(mod(divInt(min(i2, int(5.0)),int(3.0)),int(0.0)), int(5.0)):]) + \"\"9\"\")[int(0.0):abs(int(7.0))] + \"\"0\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 0, 1], [0, 1], [1, 1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [0], [1, 1, 1], [8, 3, 0], [0, 0, 1, 2, 2, 0], [0, 0], [0, 2, 0, 1, 0, 3, 2, 1, 2, 1, 0], [1, 1, 1], [2], [], [0, 1, 1], [5], [1], [0], [1], [], [], [], [1], [], [2], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 3, 3, 6, 2, 11, 3, 1, 0, 3, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"c\"\":{:\\nif i0 \\le divInt(i0,int(8.0)):{:\\ni1 = i2\\ni2 = abs(mod(int(3.0),mod(int(0.0),i0)))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [8, 4, 2, 4, 8, 8], [1, 2, 2, 0, 2, 1, 0], [], [1, 3, 2, 2, 1, 2, 2, 3, 2, 2, 3, 1, 1, 2, 0, 1, 0, 2, 3, 1, 3, 2, 0, 2, 0, 3, 0, 0, 3, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0], [1, 2, 0, 2, 3, 1, 3], [2, 2, 1], [0, 0, 1, 1, 0, 0, 1], [2, 5], [0, 0, 0, 1], [], [0, 1], [], [], [], [3, 1, 1, 1], [], [7, 7, 12], [], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 7, 0, 30, 10, 7, 3, 7, 1, 4, 0, 2, 0, 0, 0, 4, 0, 3, 0, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(8.0) \\ge max(divInt(divInt(int(4.0),mod(mod(abs(divInt(( min(int(2.0), int(4.0)) * divInt(i1,int(8.0)) ),i2)),( abs(int(8.0)) * len(s2) )),mod(i2,( i0 - max(i2, i1) )))),len(\"\"^hhm\"\")), i0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 2, 1, 0, 7, 1, 8, 9, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 1, 0, 0, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 1, 1, 2, 3], [0, 0, 2, 2, 0, 2, 1, 0, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [0, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 12, 0, 49, 14, 11, 8, 6, 6, 2, 1, 16, 4, 1, 4, 2, 1, 0, 0, 1], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):len(in1[i0:])]:{:\\nres0 = in0 not in getCharFromString(saveChr(int(0.0))[abs(mod(i2,int(4.0))):( int(5.0) + min(i2, ( mod(( mod(i1,( len((\"\"R\"\" + s0.capitalize()).rstrip()) + ( i1 * divInt(min(max(int(7.0), i2), ( max(max(i1, int(2.0)), int(1.0)) * i1 )),i0) ) )) + divInt(int(0.0),abs(int(7.0))) ),len(\"\";\"\")) * i0 )) )], i1)[divInt(( int(1.0) - int(8.0) ),( int(9.0) + i0 )):int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [0], [], [], [1, 3, 3], [], [0, 0, 2], [], [2], [0, 2], [], [], [], [0, 0, 1], [4, 5, 3], [], [], [1], [], [], [], [], [], [0, 0, 0, 1, 1], [], [2, 1, 1], [], [], [1], [0, 0, 2, 2, 0], [24, 18, 0], [], [6, 4], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 2, 0, 0, 0, 3, 3, 0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 3, 0, 0, 1, 5, 3, 0, 2, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = res0\\nres0 = not \"\"YS64\"\"[:int(453.0)] == \"\"A\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 2, 2, 1, 2, 2, 0, 1, 2, 1, 2, 2, 2, 1, 0], [1, 0, 0, 0, 1, 0, 2, 2], [0, 1, 1, 1, 2, 0, 0], [0, 0, 0, 0], [0, 0, 0], [], [], [3, 2, 0, 0], [0, 4, 0, 2], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 2, 2, 0], [0, 0, 0, 0], [1, 1, 2, 4], [3, 3, 3, 1, 2, 2, 2, 2, 2, 1, 3, 0], [1, 0, 0, 0], [1, 1], [1, 0], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 8, 6, 7, 7, 8, 3, 2, 0, 5, 5, 9, 9, 0, 5, 1, 8, 7, 8, 5, 5, 7, 3, 4, 6, 9, 3, 4, 4, 0, 1, 8, 1, 3, 8, 7, 0, 8, 9, 7, 3, 0], [1, 0, 0, 1, 0, 2, 1, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 1, 0], [1, 0, 1], [1, 1, 3, 0, 1, 1, 0, 2, 0, 2, 1, 1, 0, 2, 1, 1, 0, 1, 0, 1, 0, 1, 3, 0, 0, 2, 3, 2, 0, 0, 2, 0, 2, 2, 2, 1, 2, 1, 1, 0, 0, 3, 1, 0, 3, 3, 2, 3, 2, 2, 2, 1, 3, 1, 1, 1, 1, 2, 1, 2, 3, 2, 3, 0, 0, 3, 1, 0, 1, 3, 1, 3, 3, 2, 1, 3, 3, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 1, 3, 1], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [3, 4, 1, 3, 2, 2, 3, 2, 1, 3, 2, 0, 0, 0, 2, 1, 3, 4], [2, 1, 2, 0, 1, 2, 2, 0, 2], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 0, 2, 4, 0, 2, 1, 0, 1, 5, 2, 3, 4, 3, 4, 5, 5], [1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0], [2, 0, 2, 0, 0, 4, 0, 2, 1, 2, 1, 2, 0, 4, 2, 0, 0, 2, 2, 2, 2, 2, 1, 4, 0, 1, 4, 4, 4, 2, 4, 1, 0, 0, 2, 2, 0, 4, 0, 1], [1, 3, 1, 1, 0, 3, 2, 0], [5, 1], [0, 2, 1, 2, 2, 1, 2, 1, 0, 1, 1, 0, 2, 1], [3, 0, 2, 3, 2, 2, 3], [21], [], [6, 5, 6], [8, 31, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 15, 15, 8, 7, 4, 3, 0, 0, 4, 4, 20, 4, 4, 12, 4, 2, 2, 43, 43, 25, 3, 90, 20, 18, 9, 13, 17, 7, 4, 40, 8, 2, 14, 7, 1, 0, 3, 3], "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( ( int(6.0) \\l int(0.0) or False ) and not len(in0[i1:int(867.0)]) \\le int(7832055.0) ) and not not not not i0 \\l divInt(i0,divInt(int(9.0),int(9.0))) )\\nif s0[i1:] not in s2:{:\\nloopBreak% = 0\\nfor in1 in saveChr(( int(0.0) * int(518.0) )):{:\\ni0 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nfor s0 in s2:{:\\nloopBreak% = 0\\nfor s1 in \"\"%\"\"[:int(7.0)]:{:\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= int(8557.0)\\nif \"\"V6\"\"[i2:] not in s0[int(3.0):]:{:\\ns1 = in2[:saveOrd(s2)].strip(\"\"`\"\"[:i0][:i2][( max(( i2 + i2 ), ( i0 - mod(divInt(divInt(int(4.0),mod(int(6.0),int(9.0))),i0),i0) )) * len(saveChr(int(3.0))) ):i2][:abs(abs(divInt(len(in0),divInt(mod(( int(4.0) * abs(int(4.0)) ),int(0.0)),int(1.0)))))][int(8.0):])\\nloopBreak% = 0\\nfor in1 in \"\"5\"\":{:\\nloopBreak% = 0\\nwhile ( int(1.0) + divInt(max(mod(len(saveChr(i0)),i0), abs(int(3.0))),i0) ) == int(8.0):{:\\nloopBreak% = 0\\nwhile False:{:\\nb2 = ( getCharFromString(\"\"6\"\".capitalize()[min(int(7.0), min(min(( int(0.0) * abs(max(int(8.0), i2)) ), i1), i1)):i0].rstrip(), int(9.0)) == in0 and in1.startswith(in2[:mod(len(getCharFromString(in2, mod(int(7.0),int(3.0)))),saveOrd(\"\"%\"\"))][int(0.0):]) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 4, 6, 6, 7, 1, 1, 9, 3, 9, 3, 4, 8, 0, 1, 3, 5, 2, 9, 2, 2, 3, 6, 4, 9, 1, 2, 0, 3, 5, 6, 9, 4, 4, 2, 6, 4, 8, 5, 3, 2, 5, 6, 5, 3, 2, 8, 7, 3, 6, 0, 5, 0, 8, 8, 2, 6, 2, 9, 8, 1, 6, 2, 3, 0, 0, 7], [2, 2, 2, 0, 0, 1, 1, 0, 0, 1, 0, 2, 1, 2, 0, 1, 1, 0, 1, 2, 2, 0, 0, 0, 1, 2, 1, 0, 2, 1, 1, 1, 2, 1, 2, 1, 1, 0, 0, 0, 2, 1, 0, 2, 2, 1, 1, 2, 1, 1, 0, 0, 0, 1, 2, 1], [], [2, 2, 1, 0, 0, 2, 1, 2, 0, 3, 2, 2, 0, 3, 0, 2, 1, 2, 3, 0, 3, 2, 2, 0, 3, 1, 0, 2, 3, 0, 0, 0, 2, 3, 1, 3, 3, 1, 1, 2, 1, 2, 0, 3, 3, 3, 2, 0, 1, 2, 2, 1, 2, 2, 1, 3, 1, 2, 3, 2, 0, 0, 3, 0, 1, 2, 1, 0, 0, 0, 3, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 2, 0, 3, 1, 0, 1, 2, 0, 1, 3, 2, 3, 0, 3, 3, 2, 1, 3, 3, 3, 0, 1, 2, 3, 1, 0, 1, 3, 3, 3, 3, 3, 3, 2, 0, 1, 3, 2, 3, 2, 2, 3, 3, 0, 1, 1, 1, 3, 2, 2, 3, 1, 1, 0, 3, 1, 3, 3, 3, 1, 3, 1, 1, 2, 0, 2, 3, 1, 0, 1, 0, 0, 1, 2, 2, 1, 2, 2, 0, 2, 3, 2, 1, 3, 2, 3, 3, 1, 2, 1, 2, 3, 0, 3, 2, 1, 0, 0, 0, 1, 0, 0, 3, 3, 1, 2, 3, 1, 2, 1, 0, 0, 1, 1, 0, 3, 2, 0, 0, 1, 2, 0, 1, 2, 0, 0, 3, 2, 0, 1, 3, 0, 0, 0, 1, 1, 2, 1, 1, 3, 1, 3, 1, 3, 3, 2, 2, 3, 2, 1, 1, 1, 0, 2, 0, 1, 3, 1, 1, 2, 3, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 4, 1, 0, 2, 1, 1, 0, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 1, 3, 4, 3, 3, 2, 0, 3, 0, 0, 2, 2, 1, 1, 3, 3, 4, 4, 0, 4, 0, 4, 2, 4, 4, 4, 1, 3, 4, 1, 0, 4, 3, 1, 0, 4, 1, 2, 3, 0, 4, 2, 2], [2, 1, 2, 2, 1, 1, 1, 2, 0, 0, 1, 0, 0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 2, 1, 1, 1, 2, 1, 0, 2, 2, 2, 2, 2], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 4, 4, 2, 0, 1, 5, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [2, 2, 1, 2, 1, 2, 4, 2, 0, 2, 2, 2, 1, 1, 2, 2, 1, 2, 4, 2, 4, 0, 2, 0, 4, 2, 2, 4, 2, 2, 2, 2, 4, 0, 0, 4, 2, 4, 1, 0, 4, 4, 2, 1, 1, 4, 1, 0, 2, 4, 4, 1, 2, 4, 4, 4, 1, 2, 2, 4, 2, 2, 0, 2, 4, 1, 4, 3, 0, 2, 4, 4], [3, 3, 0, 3, 2, 2, 0, 2, 1, 1, 3, 1, 2, 1, 2, 2, 2, 0, 0, 1, 1], [5, 5, 3, 3], [0, 2, 1, 1, 0, 1, 2, 0, 0, 1, 1, 0, 1, 1, 2, 1, 0, 1, 2, 2, 1, 2, 0, 0, 1, 1, 2, 0, 2], [1, 2, 3, 0, 2, 0, 1, 0, 2, 1, 3, 1], [18, 1, 3], [17, 16, 13, 8], [7, 3, 2], [5, 26]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 67, 67, 56, 0, 245, 61, 64, 34, 27, 9, 12, 0, 72, 21, 4, 29, 12, 3, 4, 3, 2], "tree_depth": 95, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( mod(int(6.0),i2) * i2 ) == ( int(466.0) - ( i2 * max(mod(( i0 * max(i0, ( int(7.0) - ( min(i1, max(( ( i1 - saveOrd(\"\"r\"\"[int(1.0):][i0:mod(max(i0, i1),i0)]) ) - divInt(min(int(1.0), abs(max(int(9.0), int(3.0)))),( int(9.0) * divInt(i2,max(min(max(( i1 + int(3.0) ), divInt(( int(4.0) + divInt(( int(8.0) - abs(int(0.0)) ),divInt(max(( i2 + i0 ), abs(i1)),int(1.0))) ),divInt(int(3.0),i1))), i0), i1)) )) ), max(int(5.0), abs(i2)))) + ( min(( divInt(int(2.0),i2) - ( i0 - mod(i0,min(int(9.0), i0)) ) ), int(2.0)) * ( i1 - int(2.0) ) ) ) )) ),min(divInt(min(i2, max(len(\"\"7\"\"[:( int(3.0) * saveOrd(s2[len(\"\"\"\"\"[len(\"\"S\"\"):i1][int(6.0):][:( abs(int(4.0)) - i0 )]):int(9.0)].strip(\"\"3\"\"[:min(len(getCharFromString(in1, min(min(abs(abs(divInt(i2,int(1.0)))), max(divInt(max(( divInt(len(in1[:len(s2.capitalize()[i1:][:int(2.0)][int(0.0):int(3.0)][:saveOrd(s0)].capitalize()[( divInt(saveOrd(getCharFromString(\"\"B\"\".capitalize()[int(5.0):], int(6.0))),i1) - min(int(9.0), saveOrd(s1)) ):][:min(saveOrd(saveChr(int(4.0))), abs(int(4.0)))].lstrip(saveChr(int(2.0))))]),divInt(i1,( saveOrd(\"\"q\"\"[:int(6.0)]) * i2 ))) + int(4.0) ), i1),i2), int(8.0))), divInt(( int(5.0) * divInt(( i1 - ( saveOrd(\"\"D\"\") - mod(int(3.0),saveOrd(\"\"2\"\".lstrip(in2))) ) ),( max(len(saveChr(int(2.0))[( int(5.0) - ( saveOrd(\"\"n\"\".capitalize()) * i1 ) ):]), max(mod(int(6.0),i0), i0)) - i0 )) ),int(5.0))))[i2:i1].strip(saveChr(min(saveOrd(\"\"[\"\".capitalize().capitalize()), int(3.0)))[divInt(len(in1[int(2.0):][:( int(8.0) + i0 )].capitalize()[:i2][int(7.0):int(3.0)]),i2):max(( i1 * i1 ), int(6.0))])[:( i2 * int(0.0) )]), mod(i1,i1))][min(mod(i0,int(5.0)), saveOrd(getCharFromString(\"\"i\"\", i0)[i0:i1])):int(0.0)])[:int(8.0)]) )]), ( int(8.0) * int(2.0) ))),max(int(6.0), abs(int(2.0)))), len(getCharFromString((in1 + saveChr(min(divInt(mod(saveOrd(saveChr(( int(9.0) * int(8.0) ))),int(1.0)),i2), ( i1 * int(6.0) )))[abs(int(2.0)):]), int(3.0))))), mod(abs(int(00.0)),int(7.0))) ) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [1, 0, 2], [], [0, 0], [], [], [1], [], [0, 2], [], [4], [2], [], [], [], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 1, 2, 4, 9, 2, 2, 8, 3, 2, 1, 5, 1, 0, 3, 8, 8, 8, 2, 1, 9, 9], [2, 0, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 0, 2, 2, 2, 2, 1, 2, 1], [1], [2, 1, 1, 0, 3, 1, 2, 1, 3, 1, 0, 2, 3, 3, 3, 3, 2, 1, 3, 3, 0, 0, 2, 0, 1, 3, 2, 3, 1, 2, 1, 2, 0, 1, 0, 0, 3, 1, 0, 0, 1, 1, 0, 0, 1, 0, 3, 2, 2, 0, 3, 1, 2, 3, 0, 0, 0, 3, 3, 1, 3, 2, 2, 1, 0, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1], [1, 4, 0, 0, 0, 2, 2, 4, 1, 4, 4, 0, 3, 4, 4, 4, 2], [1, 1, 1, 2, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0], [2, 4, 4, 0, 4, 4, 3, 2, 1], [0, 1, 1, 1, 1, 1], [], [3, 4, 2, 1, 3, 2, 4, 3, 2, 2, 2, 2, 2, 2, 4, 4, 0, 0, 1, 2, 0, 1, 4, 2, 3, 2, 2, 2, 4, 0, 2, 0, 1, 2, 0, 0, 2, 0, 1, 4, 4], [2, 0, 2, 1, 2, 0, 3, 1], [1], [1, 1, 0, 0, 1, 0, 2, 0, 0, 0, 2, 2, 0, 2, 2, 1], [1, 1, 1, 1, 1, 1], [], [9, 4, 10, 7, 25, 14], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 22, 22, 21, 1, 69, 13, 17, 7, 7, 9, 6, 0, 41, 8, 1, 16, 6, 0, 6, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= ( int(1.0) - int(1.0) )\\nb1 = not (\"\"je\"\"[:i0].capitalize() + (getCharFromString((saveChr(max(int(24.0), divInt(int(9.0),saveOrd(s2)))).capitalize()[int(2.0):i2][mod(min(min(min(abs(mod(int(2.0),abs(saveOrd(in1)))), i1), i2), ( i1 - int(8.0) )),max(divInt(saveOrd(\"\"k\"\"),int(3.0)), divInt(int(2.0),divInt(i1,int(1.0))))):][i2:i1][:saveOrd(in1[int(5.0):i1])][i2:int(1.0)][int(0.0):i2] + \"\"h\"\"), i2)[:int(38.0)] + (getCharFromString(s0, i0)[min(( ( i2 * len(in1[int(8.0):]) ) - ( saveOrd(\"\"z\"\") + i2 ) ), i2):i2][saveOrd(in1[saveOrd(in0):]):][int(82.0):] + s2[:abs(( divInt(int(1.0),i1) + int(9.0) ))])[i2:int(9.0)].capitalize())).startswith(\"\"o\"\")\\ns1 = saveChr(i1).rstrip()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [0], [1, 2], [0], [0, 0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 4, 2, 0, 5, 9, 4, 2, 7, 0, 1, 1, 3, 3, 4, 1], [1, 1, 1, 2, 1, 0, 0, 0, 0, 2, 1, 0, 1, 2, 0, 1, 1, 1, 2], [0], [1, 2, 2, 0, 2, 1, 2, 0, 0, 1, 2, 1, 3, 2, 0, 3, 1, 2, 2, 2, 2, 2, 0, 3, 2, 3, 0, 1, 2, 1, 1, 0, 2, 1, 3, 0, 1, 1, 2, 3, 0, 2, 3, 2, 1, 3, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 3, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 4, 2, 0, 0, 2, 2, 4], [1, 1, 2, 0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [3, 2, 3, 3, 2], [0, 0, 1, 1], [0], [0, 4, 3, 2, 1, 2, 4, 4, 2, 0, 1, 0, 4, 4, 4], [3, 3, 3, 1, 0, 1], [0, 4, 3], [0, 2, 2], [1, 2, 1, 2], [], [24, 25], [5, 4], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 19, 1, 59, 20, 9, 10, 10, 5, 4, 1, 15, 6, 3, 3, 4, 0, 2, 2, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s2:{:\\ni1 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = (\"\"y5z\"\"[( ( i1 - divInt(int(4.0),mod(i1,i2)) ) - int(20594.0) ):( int(2.0) * min(( i1 + min(int(7.0), ( divInt(mod(mod(( i0 - saveOrd(in0[( abs(i0) - int(0.0) ):].lstrip(\"\"4\"\").rstrip(s2)[( int(1.0) + int(1.0) ):]) ),i0),mod(int(3.0),min(i0, int(3.0)))),int(4.0)) - ( min(i2, ( abs(mod(int(1.0),abs(i1))) + i0 )) + i1 ) )) ), divInt(i2,mod(i0,divInt(i1,i1)))) )] + saveChr(saveOrd(getCharFromString(saveChr(i1), i2)))).lstrip()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0], [1], [2, 1], [], [0, 0], [], [], [], [2], [1], [0], [], [], [], [], [1], [1, 1, 0, 1, 0, 1, 1, 1], [5, 8, 5, 1, 6, 4, 8, 7], [1, 1, 2, 2, 0, 2, 2], [0, 1], [3, 1, 0, 0, 2, 3, 1, 3, 2, 0, 0, 0, 3, 2, 1, 1, 1, 1, 0], [1, 1, 0], [0, 3, 1, 4], [2, 0, 1], [1, 0], [1, 1], [0, 1, 1, 0, 1], [], [2, 1, 2, 4, 1, 4, 0, 2, 4, 1], [3, 2, 0], [3], [0, 1, 0], [0, 2, 0, 1, 3], [12, 16], [20], [1], [4]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 8, 8, 7, 1, 19, 3, 4, 1, 2, 2, 5, 0, 10, 3, 1, 3, 5, 2, 1, 1, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif min(int(5.0), i1) == i1:{:\\ns1 = \"\"M1\"\"[mod(len(\"\"Q\"\".lstrip(s1.capitalize())[:int(8.0)]),max(divInt(i2,i2), i0)):saveOrd(getCharFromString(\"\"u!\"\", ( int(51.0) * int(64.0) ))[int(8.0):int(7.0)])]\\n:}else:{:\\ni2 = i2\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 2, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 1, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 1, 3, 0, 1, 1, 1, 0, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 14, 14, 11, 0, 51, 14, 12, 11, 3, 6, 2, 1, 15, 3, 2, 4, 2, 1, 0, 0, 1], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.rstrip()[len(in1[len(in1):]):]:{:\\nres0 = ( ( i0 != i2 or True ) and saveChr(abs(( int(0.0) + int(7.0) )))[( int(5.0) + max(i0, ( len(in0[( int(7.0) * int(4.0) ):( min(( i0 - max(max(( int(1.0) + i1 ), ( max(int(7.0), i2) * int(7.0) )), i1) ), i0) - i0 )]) - mod(int(9.0),min(( abs(i2) * divInt(divInt(( int(8.0) + int(5.0) ),( int(0.0) + i1 )),int(4.0)) ), len(\"\"R\"\"))) )) ):int(8.0)] not in (\"\";\"\" + s0.lstrip()) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [0], [2], [0], [], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 1, 1, 1], [5, 9, 4, 4], [1, 2, 1, 0, 2, 2], [0], [0, 0, 2, 0, 1, 2, 3, 3, 3, 2, 1, 3, 2, 0, 3, 1, 2, 0, 3, 1, 0], [1, 1, 0, 1, 0], [4, 0, 1, 4, 2, 3], [2, 1], [0, 0, 0], [0, 2, 0, 4], [1, 1, 1], [0], [0, 4, 2, 4, 2, 4, 0, 1, 2, 1, 4, 1], [3, 0, 0, 3], [2, 1], [2, 0, 1], [2, 0, 1], [5], [4], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 6, 0, 21, 5, 6, 2, 3, 4, 3, 1, 12, 4, 2, 3, 3, 1, 1, 1, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2:{:\\ns0 = getCharFromString(getCharFromString(in1, i1)[i2:divInt(i1,int(5.0))], divInt(saveOrd(\"\"2\"\"),min(max(( int(9.0) * saveOrd(\"\"F\"\"[:divInt(i0,abs(int(4.0)))]) ), ( i2 - len(\"\"e\"\".rstrip()) )), int(4.0))))[i2:].strip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [2, 1, 2, 0, 2, 1, 1], [1, 1], [1, 3, 3, 0, 2, 2, 0, 3, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0], [4, 0, 4], [1, 2, 2], [0], [], [1], [], [2, 1, 4, 4], [3, 1], [2], [0], [1], [], [14], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 7, 2, 11, 2, 3, 3, 1, 0, 1, 0, 4, 2, 1, 1, 1, 0, 1, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(1.0)\\ni1 *= saveOrd(\"\"o\"\"[min(i2, ( divInt(i0,saveOrd(saveChr(i2).strip())) * i1 )):i1])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1, 1], [1, 0], [0, 0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0, 0, 1], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [3, 0, 3, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0, 0], [17, 16], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 1, 4, 2, 2, 0, 6, 6, 12, 0, 33, 9, 6, 5, 4, 5, 2, 0, 17, 3, 2, 4, 2, 2, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( ( mod(len((s0 + (in2[i0:i2] + in1[len(saveChr(( i0 + int(0.0) ))):i0].rstrip()[int(7.0):abs(int(5.0))][( divInt(( int(7.0) + i1 ),divInt(min(( i2 * len((\"\"R\"\" + in1.lstrip())) ), min(( i1 - i0 ), divInt(i0,int(7.0)))),i0)) + int(1.0) ):]))),i0) != i1 or True ) and \"\"Q\"\" not in in0 ):{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1], [1, 2, 0, 1, 2, 0, 0], [1, 0], [0, 1, 1, 2, 0], [0], [0, 0, 0], [], [], [1, 1], [5], [1, 2, 0], [0], [0], [1], [], [0], [1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 4, 7, 0, 4, 5, 8, 5, 5, 0, 6, 5, 0, 9, 1, 3, 6, 7, 5, 5, 9, 0, 3, 9, 7, 9, 7, 2, 9, 7, 8, 6, 1, 4, 9, 0, 7, 2], [2, 2, 1, 2, 1, 0, 1, 0, 2, 2, 0, 2, 1, 0, 2, 1, 0, 1, 1, 1, 1, 0, 1, 2, 2, 0, 2], [1, 0], [2, 1, 1, 0, 0, 1, 0, 1, 0, 2, 1, 2, 1, 1, 2, 2, 1, 3, 0, 0, 3, 1, 2, 2, 3, 1, 2, 2, 2, 3, 3, 1, 3, 1, 1, 3, 0, 0, 3, 2, 3, 2, 0, 3, 2, 0, 1, 0, 1, 2, 2, 2, 0, 3, 3, 1, 1, 1, 2, 2, 0, 1, 3, 2, 2, 2, 2, 0, 1, 2, 3, 2, 1, 1, 3, 3, 3, 1, 2, 1, 2, 0, 2, 3, 3, 1, 3, 3, 2, 3, 0, 2, 0, 2, 1, 2, 0, 0, 0, 1, 2, 0, 3, 3, 3, 0, 2, 2, 3, 1, 1, 2, 2, 0, 1, 0, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1], [1, 3, 3, 1, 3, 4, 3, 2, 2, 4, 0, 1, 3, 0, 3, 0, 0, 4, 4, 4, 0, 1, 4, 2, 1, 1], [2, 2, 1, 0, 2, 1, 0, 1, 1, 2, 0, 0, 1, 2, 0, 2, 0, 0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [5, 5, 2, 1, 0, 5, 3, 0, 2, 0, 2, 3, 2], [1, 0, 1, 1, 1, 1, 1, 1, 1], [0], [4, 3, 2, 4, 4, 3, 1, 3, 0, 1, 2, 2, 2, 4, 1, 0, 1, 2, 2, 4, 0, 0, 4, 4, 0, 1, 4, 0, 4, 4, 4, 2, 2, 4, 0, 4, 0, 0, 1, 0, 2, 0, 2, 1, 1], [3, 1, 0, 1, 0, 2, 3, 3, 2, 3, 1, 2, 2], [4, 1, 4, 5], [2, 2, 1, 0, 2, 2, 2, 2, 0, 2], [1, 2, 2, 0, 2, 1, 1, 1, 2], [8], [18, 4, 25, 7], [0, 3, 2, 6], []], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 1, 3, 0, 0, 2, 1, 3, 1, 1, 1, 0, 1, 1, 38, 38, 27, 2, 118, 36, 26, 18, 19, 13, 9, 1, 45, 13, 4, 10, 9, 1, 4, 4, 0], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = mod(int(9.0),int(4.0)) != i2\\nif (saveChr(i2)[int(7.0):] + getCharFromString((\"\"s\"\" + (in2 + \"\"03\"\")), i1)).rstrip(saveChr(int(0.0))[i2:divInt(int(45.0),( int(8.0) * int(5.0) ))][:( divInt(int(5.0),max(i1, i0)) * len(\"\"I\"\") )][int(06.0):]) in in2:{:\\ni1 -= divInt(mod(len(\"\"2\"\"),int(50913.0)),divInt(mod(divInt(max(len(getCharFromString(s2, int(6.0))[saveOrd(s1):][int(7.0):]), int(5.0)),len(s0.rstrip().capitalize())),i0),i2))\\n:}else:{:\\ni2 = abs(( abs(divInt(i0,saveOrd(\"\"e\"\"))) + divInt(i2,int(59.0)) ))\\nloopBreak% = 0\\nfor in2 in in0.rstrip(saveChr(i1).strip(s0.capitalize()[int(0.0):][( ( divInt(i0,min(max(int(3.0), int(9.0)), int(7.0))) * ( ( i2 - int(9.0) ) + len(s2.capitalize()) ) ) - ( mod(mod(divInt(i1,int(7.0)),( min(( int(2.0) - int(9.0) ), len(s0)) * min(min(int(7.0), divInt(int(8.0),( i0 + ( saveOrd(\"\"z\"\") + saveOrd(s2) ) ))), int(6.0)) )),saveOrd(in0[min(mod(max(i1, ( i1 - divInt(int(1.0),( i1 * i1 )) )),i0), int(4.0)):( i1 + saveOrd(\"\"h\"\"[abs(max(i2, divInt(( max(int(9.0), int(0.0)) * ( divInt(i2,int(7.0)) + i0 ) ),i2))):]) )])) + int(2.0) ) ):]).capitalize()):{:\\ns2 = \"\"6\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = True\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [1, 2, 0, 0, 2, 1], [1, 2], [1, 1, 2, 1], [], [0, 0], [], [], [], [5], [2, 1], [0], [1], [], [], [], [0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [3, 6, 8, 2, 9, 3, 9, 6, 5, 8, 2, 9, 5, 3, 5, 4, 4, 0, 8, 4, 5, 7, 0, 1, 4, 0, 0, 0, 0, 8], [1, 1, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 2, 2, 0], [1, 1, 0], [0, 1, 3, 1, 0, 1, 1, 2, 3, 3, 0, 1, 2, 3, 3, 0, 2, 0, 2, 0, 3, 1, 2, 3, 0, 2, 2, 3, 0, 2, 2, 2, 3, 3, 0, 1, 2, 3, 2, 2, 3, 0, 1, 0, 0, 2, 3, 1, 2, 0, 3, 3, 2, 0, 2, 1, 1, 0, 3, 0, 0, 3, 0, 1, 2, 2, 0, 1, 1, 2, 3, 1, 0, 3, 0, 1, 2, 0, 3, 1, 3, 1, 2, 3, 1, 1, 1, 2, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [1, 4, 0, 0, 1, 0, 3, 4, 0, 2, 3, 0, 2, 2, 4, 3, 0, 2, 3, 3, 2, 3], [2, 0, 0, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0], [5, 5, 3, 0, 4, 2, 2], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [], [0, 1, 3, 1, 3, 3, 1, 1, 2, 2, 0, 4, 3, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 0, 4, 1, 2, 0, 4, 4, 1, 2, 0, 0, 3, 3, 4, 2, 4, 2, 1, 1, 4, 1], [2, 3, 3, 3, 2, 3, 1], [5, 5, 3, 1], [2, 0, 1, 2, 1, 2, 1, 1, 0, 0, 2, 1, 0], [2, 1, 1, 1, 0, 3, 0, 0, 2, 0, 2, 0, 3, 0, 0, 2, 3, 2, 3, 1, 1, 3, 1, 3, 2, 3, 1, 2, 2, 3, 2], [15, 4, 11, 11, 4, 8, 18], [11, 6, 4, 14, 6, 9, 13], [4, 4, 5, 2, 6, 7, 7, 8, 1], [19, 25, 3, 17, 6, 4, 25, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 0, 2, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 1, 30, 30, 26, 3, 90, 23, 22, 17, 8, 7, 31, 0, 46, 7, 4, 13, 31, 7, 7, 9, 8], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i1\\nif in2 not in \"\"4l\"\":{:\\ni0 += int(368.0)\\n:}\\nin2 = (\"\"geP:EL\"\" + ((\"\"4L5\"\" + \"\"E\"\") + in0[max(int(2.0), i1):int(93965.0)][int(8.0):]))\\nloopBreak% = 0\\nwhile ( saveOrd((\"\"@IS26\"\"[:min(i0, int(2.0))] + \"\".og\"\"[:( min(max(i0, divInt(i0,divInt(i1,min(int(9.0), mod(len(\"\"#\"\"),i2))))), ( ( saveOrd(\"\"j\"\"[i1:]) + ( ( divInt(min(abs(i0), int(5.0)),( len(\"\"!\"\"[:( ( min(i1, int(3.0)) - i1 ) - i0 )]) * ( abs(int(5.0)) * divInt(i0,abs(saveOrd(s0[mod(i0,( int(4.0) * int(4.0) )):i0][:len(\"\"7\"\".strip(in1[i1:i1]))]))) ) )) - min(i0, int(0.0)) ) * ( ( i0 * int(8.0) ) * int(4.0) ) ) ) * ( abs(int(5.0)) + i1 ) )) + len(\"\"@\"\".lstrip(s2[i1:]).strip(s2)) )][int(70.0):]).capitalize()) + ( i2 - len(((\"\"n\"\"[int(1.0):abs(int(4.0))].rstrip()[:mod(len(\"\"7\"\"),int(0.0))].capitalize() + saveChr(int(0.0))) + \"\"8*1\"\")) ) ) != int(0.0):{:\\ni2 = divInt(i0,int(08.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [0, 3], [3], [0, 1], [0], [], [1], [], [1], [], [1, 0, 1], [4, 1, 2], [0, 1, 1], [1, 1], [0, 3, 1], [], [4], [2, 2], [], [], [0, 1], [], [2, 1], [], [], [2], [1, 1], [], [17, 3], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 3, 0, 1, 2, 0, 0, 2, 0, 2, 0, 0, 1, 2, 0, 2, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i1\\ni1 *= saveOrd(\"\"rd\"\"[int(4.0):])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 2, 2, 1, 2, 1, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 2, 2, 3, 2, 1, 1, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 1, 3, 0, 1, 1, 1, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 40, 11, 11, 9, 2, 7, 2, 1, 15, 2, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[saveOrd(in0):] not in s0[i1:i1].rstrip()[abs(( i2 + int(6.0) )):( int(7.0) + max(( ( len(\"\"R\"\") * ( int(5.0) - int(7.0) ) ) + ( min(( i2 * max(max(( int(4.0) - i2 ), mod(max(int(1.0), i1),int(7.0))), i2) ), i1) - i1 ) ), ( int(7.0) * len((\"\"3\"\" + saveChr(divInt(len(in1),i1)))) )) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 2], [], [0, 0], [], [], [3, 3], [], [2], [], [2], [0], [], [], [], [], [8, 4], [], [], [], [], [], [], [], [3, 2, 3], [0, 1], [], [0, 1, 0], [], [], [], [0, 1], [19], [10], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 3, 0, 0, 0, 2, 1, 1, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0 == \"\"Tk\"\"\\ns2 = in0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [2, 1, 2], [1], [0, 1, 0], [], [], [1], [], [3], [0, 1], [], [3, 2, 4, 1], [1], [], [2], [3, 2], [], [], [2], [11]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 3, 0, 0, 1, 0, 1, 2, 0, 4, 1, 0, 1, 2, 0, 0, 1, 1], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\nin0 = (saveChr(int(9.0))[i2:] + \"\"(2\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [2, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 2, 1, 0, 1, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 2, 4, 3, 0, 4, 0], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 1, 0], [17, 15], [21], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 16, 16, 13, 0, 56, 17, 11, 8, 9, 8, 4, 0, 16, 2, 0, 4, 4, 2, 1, 0, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in s2[max(i0, int(0.0)):]:{:\\nres0 = ( abs(mod(i2,int(7.0))) != mod(int(5.0),min(i2, ( divInt(( len(in1) + i0 ),divInt(min(( i1 + ( divInt(( int(7.0) * i2 ),divInt(max(int(4.0), i1),int(1.0))) - int(7.0) ) ), i2),i0)) + mod(int(7.0),abs(int(9.0))) ))) or ( in0[max(i0, ( ( ( int(8.0) * int(5.0) ) - divInt(int(0.0),i1) ) - int(4.0) )):i0].endswith(s0[len(getCharFromString((\"\"R\"\" + saveChr(mod(int(8.0),i1))), int(59.0))):len(in1)]) and True ) )\\ns0 = \"\";vP\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [2], [], [0], [], [], [], [], [0, 1], [4, 5], [1], [], [0, 1, 1], [], [], [], [], [5, 2, 2], [1, 1], [], [3, 4, 1, 0, 1, 3, 0, 2, 0], [2, 0], [0], [2, 1], [0, 2], [17], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 5, 1, 0, 0, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = (\"\"R\"\".capitalize() + in2) in \"\"8\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 7, 7, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1, 2, 1, 2, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 2, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 2, 0, 3, 2, 3, 2, 0, 3, 0, 3, 3, 3, 2, 1, 1, 1, 1, 0, 3, 1, 0, 2, 3, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [4, 3, 2, 0, 3, 0, 1, 0, 1, 3, 2, 1, 1, 0, 1, 0, 1, 3], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 22, 22, 17, 0, 76, 22, 18, 10, 12, 7, 2, 1, 16, 3, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[saveOrd(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(divInt(int(7.0),( int(5.0) + min(i2, divInt(( ( len(saveChr(i2)) + ( min(divInt(i1,divInt(i1,( int(7.0) * i2 ))), divInt(max(int(2.0), i1),min(int(5.0), i2))) - i0 ) ) - mod(int(7.0),max(int(5.0), len((\"\"R\"\" + in1.rstrip())))) ),i0)) )),( ( ( int(9.0) * int(8.0) ) - divInt(int(5.0),i0) ) - int(0.0) ))))[mod(divInt(i1,abs(divInt(max(( i2 * max(i1, min(max(min(( int(4.0) + int(8.0) ), int(59.0)), int(9.0)), i2)) ), max(int(2.0), i0)),divInt(len(\"\"0\"\"),int(2.0))))),int(772.0)):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 2], [], [], [], [], [0], [], [2], [], [2], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 6, 4, 5, 6, 9, 9, 6], [2, 0, 0, 1, 1, 1, 1], [1], [0, 0, 1, 1, 3, 3, 1, 3, 3, 1, 2, 3, 3, 2, 0, 1, 0, 3, 2, 0, 0, 2, 3, 2, 0, 1, 3, 3, 1, 1, 3], [1, 0, 0, 1, 0], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2, 4], [2, 2, 0], [0, 0], [1, 0, 0, 5], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [], [2, 1, 3, 4, 1, 3, 2, 2, 1, 4, 4, 1, 2, 0, 0, 2, 1, 3, 0, 1], [2, 0, 3], [0], [0, 2, 1, 0, 1], [0, 0, 3, 2, 1, 3, 1, 0, 0, 2, 2], [20, 19, 16, 17], [3, 7], [6, 2, 5], [5, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 7, 0, 31, 5, 11, 3, 2, 4, 11, 0, 20, 3, 1, 5, 11, 4, 2, 3, 2], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = \"\"U\"\"[i2:i0] == (\"\"T\"\"\".capitalize() + (\"\"6\"\"[:int(43.0)][int(6.0):] + getCharFromString(\"\"d>h\"\".lstrip(), len(s1[max(int(4.0), abs(min(int(5.0), divInt(len(s0),min(( i0 * int(6.0) ), i1))))):max(( i1 * i1 ), divInt(abs(( i1 + int(9.0) )),max(abs(int(9.0)), int(6.0))))]))))\\ns0 = \"\"QR2\"\"[:saveOrd((in2 + \"\"5\"\"))]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 2, 0, 0], [0, 0], [0, 2], [0, 0], [0, 0], [], [], [1], [3], [1], [0], [], [], [], [], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 4, 6, 9, 7, 5, 2, 4, 0, 6, 3, 3, 9, 6, 5, 5, 5, 0, 0, 7, 8, 4, 2, 7, 7, 3, 4, 4, 9, 9, 5, 8, 0, 6, 4, 5, 2, 7, 9, 0, 0, 9], [0, 2, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 0, 1, 1, 0, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 0, 0, 0, 1, 2, 0], [0], [0, 0, 2, 1, 0, 2, 2, 3, 3, 1, 3, 0, 0, 0, 2, 2, 2, 1, 1, 3, 2, 3, 1, 2, 1, 1, 3, 3, 0, 1, 1, 0, 2, 2, 0, 1, 3, 2, 3, 2, 2, 0, 1, 3, 3, 0, 2, 0, 0, 0, 0, 1, 2, 2, 2, 1, 2, 3, 3, 2, 0, 3, 1, 2, 2, 1, 2, 1, 2, 0, 1, 2, 1, 1, 3, 1, 2, 0, 0, 2, 2, 3, 2, 2, 3, 0, 2, 1, 0, 0, 1, 2, 2, 0, 3, 0, 3, 2, 0, 3, 1, 2, 2, 0, 2, 3, 2, 2, 0, 3, 1, 3, 3, 3, 1, 0, 3, 0, 1, 0, 2, 2, 0, 3, 2, 1, 2, 0, 3, 2, 0, 3, 1, 1, 1, 1, 0, 3, 1, 1, 2, 0, 1, 0, 3, 0, 3, 1, 2, 3, 3, 3, 0, 3, 3, 0, 2, 3, 3, 1, 2, 3, 3, 0, 2, 0, 1, 1, 2, 3, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [4, 1, 0, 3, 3, 3, 1, 0, 0, 0, 0, 4, 3, 1, 3, 2, 3, 0, 1, 0, 0, 0, 2, 1, 4, 3, 4, 2, 4, 4, 2, 0, 3, 4, 1, 1, 0, 3, 4, 4, 0, 2], [0, 2, 1, 2, 1, 2, 0, 2, 2, 0, 2, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1, 1, 2], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 2, 5, 1, 3, 0, 5, 5, 4, 2, 5, 5, 0, 4], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0], [0, 2, 2, 2, 0, 4, 2, 1, 4, 2, 2, 4, 2, 0, 4, 4, 0, 1, 1, 0, 4, 1, 4, 1, 3, 3, 2, 0, 2, 2, 1, 2, 0, 1, 2, 0, 4, 2, 0, 4, 4, 2, 2, 4, 1, 2, 0, 4, 2, 4, 1, 2, 0, 1, 2, 2, 1, 1], [3, 2, 0, 3, 2, 0, 1, 3, 0, 1, 3, 3, 0], [1, 4, 0, 1, 5], [1, 2, 1, 0, 0, 1, 1, 1, 0, 1, 1, 2, 0, 1, 0, 2, 1, 2, 2, 2], [2, 2, 2, 1, 3, 3, 3, 2, 2, 3, 3, 3, 0, 0], [14, 17], [3], [1, 1, 5, 6, 8], [24, 22, 24, 24, 21, 26]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 44, 44, 42, 0, 174, 49, 42, 24, 25, 14, 14, 2, 58, 13, 5, 20, 14, 2, 1, 5, 6], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2:{:\\nloopBreak% = 0\\nfor in2 in s1[:i0][i2:][:divInt(int(101.0),i0)]:{:\\nb1 = ( mod(saveOrd(\"\"1\"\"[max(int(4.0), min(i1, i1)):i0].rstrip()),( divInt(( int(6.0) + int(9.0) ),len(getCharFromString(in0[:divInt(len(s0.capitalize().rstrip(\"\"1\"\")),int(7.0))], ( int(5.0) * int(2.0) ))[:len(\"\"5\"\")][max(i0, int(4.0)):int(0.0)].capitalize())) - i0 )) * divInt(( i0 - int(6.0) ),min(divInt(min(mod(mod(i1,int(3.0)),min(min(i1, ( i0 * i1 )), i0)), i0),int(3.0)), ( mod(divInt(int(9.0),( saveOrd(in2) + len(getCharFromString(\"\"d\"\", divInt(i0,max(int(6.0), divInt(divInt(int(5.0),mod(int(5.0),mod(i0,int(5.0)))),( int(0.0) * int(0.0) )))))) )),len(saveChr(int(7.0)))) * mod(i0,i2) ))) ) \\ge ( mod(abs(( ( len(\"\"?\"\") + i2 ) * mod(int(8.0),i2) )),i1) + int(4.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = ((in1[:( divInt(i0,min(i1, max(( i1 + min(int(2.0), divInt(( i0 - divInt(min(( ( i2 + min(int(7.0), abs(max(saveOrd(\"\"=\"\"[:int(7.0)][i1:len(s2[:i2])]), int(3.0)))) ) * i2 ), ( mod(i2,saveOrd(\"\"?\"\")) - ( int(4.0) - ( i1 * abs(( i2 + saveOrd(in2[int(4.0):]) )) ) ) )),int(9.0)) ),int(9.0))) ), int(5.0)))) + i2 )] + in2[saveOrd(getCharFromString(saveChr(int(8.0)), int(0.0))):( i1 - int(6.0) )].lstrip()) + \"\"68?\"\".rstrip()[i1:abs(i0)][:min(int(45.0), mod(len(s0[saveOrd(getCharFromString(\"\"<\"\", max(i0, max(min(i0, ( len(in1[saveOrd(\"\"[\"\"):]) - int(2.0) )), divInt(saveOrd(\"\"O\"\"[min(i1, divInt(i2,int(7.0))):][int(9.0):]),( abs(int(0.0)) * int(0.0) )))))[:i0].strip(\"\"R\"\")):]),int(9.0)))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 1, 0, 1], [9, 9, 0, 3, 9, 5, 6, 6], [0, 2, 2, 2], [1], [2, 0, 1, 1, 1, 1, 3, 3, 0, 0, 0], [1, 0], [1, 2], [0], [1], [4, 4, 1, 1], [1, 1, 1], [], [2, 2, 2, 2, 3, 2, 3, 4, 3, 1, 3, 0, 1, 0, 4, 1, 0], [0, 3], [5], [2, 2, 1, 2, 1], [0, 3, 3], [11], [], [], [28, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 4, 0, 11, 1, 2, 0, 1, 4, 3, 0, 17, 2, 1, 5, 3, 1, 0, 0, 2], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = ((getCharFromString((\"\"L\"\" + (in1 + \"\"]\"\")), mod(i0,int(9.0))) + s1)[:int(9.0)] + \"\"=\"\".strip(s1))[int(0395.0):][:int(66.0)][max(abs(i2), i2):][i2:]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [2], [1, 1], [], [0, 0], [], [], [], [3], [0, 1], [0], [], [2], [], [], [], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 0, 1, 3, 9, 7, 6, 6, 4, 9, 8, 7, 4, 1, 9, 5, 2, 7, 2, 7, 9, 7, 0, 1, 4, 6, 3, 0, 5, 3], [2, 0, 1, 0, 1, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 1, 2, 2, 2], [0, 1, 1], [2, 2, 2, 2, 3, 3, 2, 0, 3, 1, 2, 3, 3, 1, 1, 1, 1, 0, 2, 2, 3, 2, 0, 1, 0, 1, 1, 1, 3, 1, 0, 2, 1, 3, 3, 2, 3, 2, 2, 2, 0, 2, 2, 3, 0, 2, 0, 2, 1, 1, 0, 3, 3, 1, 0, 3, 3, 2, 1, 1, 2, 3, 0, 3, 0, 2, 3, 0, 3, 1, 1, 2, 2, 0, 3, 2, 0, 2, 1, 0, 3, 2, 1, 3, 0, 2, 3, 0, 1, 1, 3, 0, 3, 3, 0, 3, 0, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0], [1, 2, 1, 4, 2, 3, 2, 2, 2, 1, 1, 0, 1, 2, 1, 3, 4, 4, 4, 0, 1, 3, 1, 2, 0, 1, 2], [1, 1, 2, 0, 2, 0, 2, 1, 0, 0, 0, 2], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [2, 3, 3], [1, 1, 1], [], [2, 4, 4, 0, 4, 2, 1, 1, 2, 4, 0, 2, 0, 4, 1], [1, 1, 3, 3, 0], [2, 5], [2, 2, 0, 0, 1], [2, 1, 1], [], [0, 10], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 31, 31, 24, 2, 99, 27, 27, 12, 16, 3, 3, 0, 15, 5, 2, 4, 3, 0, 2, 1, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(divInt(( mod(max(abs(divInt(i0,max(int(4.0), mod(saveOrd(saveChr(abs(int(60.0)))[int(13.0):]),int(9.0))))), int(7.0)),i1) - ( ( len(saveChr(mod(i0,int(6.0)))) - i1 ) * int(6.0) ) ),int(4.0)),int(9874195.0))\\nloopBreak% = 0\\nwhile not abs(int(2.0)) \\ge i2:{:\\ni0 += mod(int(7.0),abs(abs(( max(divInt(divInt(divInt(i2,( ( max(i0, ( i2 * ( int(2.0) + int(7.0) ) )) * i0 ) - min(max(int(9.0), i0), abs(max(( int(7.0) + int(0.0) ), mod(len(s2),i0)))) )),saveOrd(\"\"9\"\"[i0:].strip())),mod(saveOrd(\"\"a\"\"),i0)), saveOrd(in0.strip(in0[int(1.0):int(4.0)])[mod(( i1 + min(divInt(i1,mod(int(6.0),i2)), max(divInt(int(3.0),len(getCharFromString(\"\"k\"\", i0))), ( max(i0, int(0.0)) + int(5.0) ))) ),abs(i1)):min(max(i2, abs(i2)), int(3.0))])) * i2 ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 2], [5], [0, 1], [0], [], [2, 0], [], [], [], [1], [7], [2, 1, 1, 0, 2, 2, 2, 1, 2], [], [2, 0, 2, 0, 3, 3, 0, 2, 0, 2, 0, 2, 0, 2, 2, 0, 3, 0, 2, 3, 0], [1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 3, 3], [0, 1], [0, 1, 0, 0, 0, 0], [3], [1], [], [1, 0], [], [], [], [2], [], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 9, 0, 21, 8, 4, 2, 6, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not divInt(i2,mod(i1,min(abs(i1), divInt(i0,divInt(i2,( i2 + ( divInt(i2,len(\"\"1\"\")) - i1 ) )))))) != divInt(len(in0),i2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1], [2, 2, 0, 0, 2, 0, 0], [2, 2, 2], [1, 2, 2, 1], [], [0, 0, 0, 0], [], [], [], [4], [1, 2, 2], [0], [3, 5], [], [], [], [], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 0, 3, 0, 9, 0, 3, 9, 4, 8, 3, 5, 8, 5, 9, 0, 4, 1, 0, 9, 1, 5, 8, 2, 4], [2, 1, 0, 2, 0, 2, 0, 0, 2, 2, 0, 1, 2, 2, 1, 1, 1, 1, 2, 1, 0, 2, 0, 1, 1, 1, 2, 0, 0, 1, 2, 0, 2, 0, 1, 0, 1, 0, 0, 1], [1, 1], [2, 2, 2, 0, 3, 1, 0, 2, 2, 3, 1, 0, 1, 1, 0, 0, 0, 2, 1, 3, 1, 1, 0, 2, 1, 2, 2, 0, 2, 1, 0, 0, 1, 2, 2, 3, 3, 3, 0, 0, 2, 0, 3, 2, 1, 3, 0, 0, 3, 1, 2, 0, 3, 3, 2, 2, 1, 0, 2, 2, 3, 3, 3, 1, 3, 1, 1, 3, 2, 0, 2, 2, 3, 0, 3, 1, 2, 0, 2, 0, 0, 2, 0, 1, 1, 2, 2, 0, 1, 1, 1, 0, 0, 0, 2, 2, 0, 0, 1, 0, 2, 2, 3, 3, 1, 2, 2, 2, 3, 0, 0, 3, 2, 0, 3, 2, 0, 3, 3, 1, 3, 3, 2, 0, 3, 3, 0, 0, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [1, 0, 3, 1, 0, 2, 0, 1, 1, 2, 1, 1, 0, 1, 1, 1, 3, 2, 3, 1, 2, 1, 1, 4, 4, 3, 0, 4, 4], [1, 2, 2, 0, 2, 2, 1, 1, 0, 2, 0, 1, 0, 0, 2, 1, 2, 0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 4, 0, 1, 5, 4, 3], [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [4, 4, 0, 4, 1, 2, 1, 3, 3, 2, 2, 1, 3, 2, 2, 1, 1, 3, 1, 2, 1, 0, 2, 0, 2, 3, 1, 1, 0, 2, 1, 4, 1, 1, 0, 1, 2, 1, 4, 4, 1], [3, 3, 0, 2, 3, 1], [5, 2, 5], [2, 1, 1, 2, 2, 2, 2, 0, 1, 2], [1, 3, 0, 2, 3, 1, 0, 3, 0, 1, 0, 1, 3, 2, 0, 0, 1, 3, 3, 3], [7, 25, 21, 3, 16, 10], [8, 6, 14, 5, 20], [8, 8], [14, 18, 2, 18, 25, 29, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 0, 4, 0, 0, 0, 1, 3, 1, 2, 0, 0, 0, 0, 26, 26, 40, 2, 129, 37, 29, 18, 21, 7, 20, 0, 41, 6, 3, 10, 20, 6, 5, 2, 7], "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile divInt(mod(mod(i2,max(int(1.0), i1)),mod(( min(int(1.0), i0) - int(0.0) ),int(30.0))),i2) \\le i0:{:\\nloopBreak% = 0\\nwhile s0.strip().strip(getCharFromString(\"\"i+\"\", i2)) != \"\"H8\"\"[mod(int(9.0),len(((\"\"/\"\"[:int(0.0)][:int(3.0)] + (\"\"g\"\"[i0:][( int(9.0) * ( divInt(i0,mod(int(4.0),i2)) * i2 ) ):] + \"\"Z\\\\\\t\"\")) + (\"\"VoD\"\" + \"\"f\"\"[int(8.0):])))):]:{:\\ni0 += ( ( max(min(abs(i1), i2), ( i2 * min(( int(3.0) * max(i1, i1) ), max(int(5.0), ( i1 - abs(max(mod(mod(int(8.0),i1),mod(divInt(max(min(max(int(5.0), max(int(9.0), int(0.0))), max(( i2 - ( divInt(len(in1),i1) + abs(int(4.0)) ) ), divInt(i0,( i2 * i0 )))), ( i1 + int(1.0) )),int(0.0)),divInt(( i1 - int(9.0) ),int(1.0)))), int(5.0))) ))) )) + i1 ) + i2 )\\ns0 = s1[i0:]\\nloopBreak% = 0\\nwhile (\"\"/\"\" + \"\"8\"\")[divInt(divInt(i0,i1),int(8.0)):i2].endswith(in2):{:\\nin1 = \"\"Q\"\"[:( divInt(len(\"\"K\"\".capitalize()),max(int(2.0), ( ( divInt(abs(i0),i2) * max(mod(i0,max(mod(i1,saveOrd(\"\"u\"\")), saveOrd(in0))), int(4.0)) ) - len(\"\"@\"\") ))) * min(mod(i0,saveOrd(\"\"^\"\"[saveOrd(saveChr(i1).strip(\"\"(\"\")):])), i0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 2, 0, 1], [1, 0, 0], [1, 2], [0, 0], [0], [], [], [0], [], [0, 0, 2, 0, 0, 2], [], [0, 5], [3, 3, 0, 2], [1, 0], [], [1], [0, 0, 1, 0, 1, 1], [1, 3, 0, 3, 6, 9], [0, 2, 2], [0], [0, 1, 0, 1, 1], [1, 0], [], [1], [], [3, 5, 3, 0, 5, 5, 0, 0], [0, 1, 1, 1, 0, 0, 1], [0, 0], [4, 0, 2, 1, 1, 1, 0, 4, 3, 0, 3, 1, 3, 0, 0], [0, 1], [], [0], [3, 3, 1, 3, 0, 1, 3], [6], [7, 18], [], [22, 25, 1, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 1, 0, 6, 0, 2, 4, 2, 0, 1, 6, 6, 3, 1, 5, 0, 0, 0, 0, 8, 7, 2, 15, 2, 0, 1, 7, 1, 2, 0, 4], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( ( getCharFromString(in0, i0) in \"\"=@\"\"[int(130.0):i2] or b0 ) and not \"\"h\"\".endswith(\"\"\\\\\\n\"\") ):{:\\nloopBreak% = 0\\nfor in2 in in0:{:\\nloopBreak% = 0\\nfor s0 in saveChr(int(36.0)):{:\\ni2 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = (in2 + (\"\"Gs)\"\" + (s0 + s0)))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0, 2], [], [1], [2], [], [0], [], [0, 1, 1], [6, 2, 1], [1], [], [3, 1, 3, 3, 1, 0], [], [3, 0, 2], [], [], [], [0, 1, 1, 1, 1, 1], [], [2, 3, 1, 3, 1, 1, 2, 1, 3, 4, 1], [1], [], [1, 2], [2, 0, 2, 3, 1, 1], [15], [24, 18], [4, 2], [22]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 3, 3, 1, 0, 6, 0, 3, 0, 0, 0, 6, 0, 11, 1, 0, 2, 6, 1, 2, 2, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not (\"\"4P\"\" + (\"\"2\"\" + \"\"=\"\"))[:len(\"\"y\"\"[int(62.0):])] not in (saveChr(min(abs(int(1.0)), i1)) + \"\"s\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0, 0], [0], [0], [0], [0], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [0, 1], [0], [0], [], [], [], [], [1, 3, 0, 1], [0, 1, 0, 1, 0, 1], [0], [3, 0, 3, 3, 0, 3, 1, 1, 3, 0, 4, 1], [0], [], [], [1, 0, 3, 0, 0, 0], [11, 4, 13, 22], [6], [], [11]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 6, 1, 12, 1, 0, 0, 6, 4, 1, 0, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in (in0 + ((s0 + (\"\"gL\"\" + \"\"(E\"\")) + (s1 + getCharFromString(\"\"NW\"\", i0)))):{:\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 6, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1, 2, 1, 3, 3, 3, 1, 3, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 0, 1, 1, 1, 3, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1, 1, 1, 1], [0], [2, 3, 0, 1, 3, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0, 3, 1, 1], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 0, 1, 0, 1, 3], [17, 20, 7], [10, 4], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 21, 21, 13, 0, 61, 16, 15, 7, 9, 3, 6, 0, 20, 2, 0, 5, 6, 3, 2, 0, 1], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (s0 + \"\"R\"\")[len((\"\"U\"\" + in2[len((\"\"k\"\" + saveChr(i0))[int(08.0):max(mod(int(2.0),min(mod(int(7.0),len(\"\"H\"\"[:i2])), ( mod(( int(2.0) + i2 ),mod(min(( i0 * divInt(i0,i1) ), int(1.0)),i1)) * divInt(max(i2, i0),abs(( i0 - i2 ))) ))), mod(max(min(int(7.0), max(i2, mod(( int(4.0) + int(9.0) ),int(8.0)))), ( int(5.0) * i1 )),int(0.0)))]):int(4.0)].capitalize()[:( int(8599.0) - max(max(len(in1), int(2.0)), max(int(2.0), mod(int(6.0),int(2.0)))) )])):] not in (\"\"e\"\" + \"\";\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [2, 1, 2, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0], [1, 0, 0, 2, 1, 0, 1, 2, 0], [0], [0, 0, 0, 0, 0, 0], [], [], [3, 2, 2, 1, 3], [2, 5, 4], [1, 1, 1, 2, 0], [0, 0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [4, 4, 5, 1, 1, 9, 6, 6, 1, 2, 2, 0, 3, 7, 7, 2, 0, 0, 3, 2, 2, 2], [0, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 0, 0, 2, 0, 0], [0, 1, 1], [1, 1, 1, 3, 1, 3, 1, 2, 2, 3, 3, 0, 0, 1, 0, 0, 2, 1, 0, 2, 2, 0, 2, 1, 3, 2, 2, 1, 1, 0, 2, 1, 2, 3, 3, 1, 1, 3, 3, 2, 0, 0, 3, 1, 3, 1, 0, 2, 1, 3, 3, 0, 1, 0, 3, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0], [0, 3, 0, 3, 0, 1, 3, 1, 0, 2, 2, 0, 3, 1, 1], [2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0], [0, 1, 1, 1, 0, 1, 1], [3, 1, 3, 4, 1, 5, 4, 4], [1, 1, 1], [0], [2, 4, 4, 1, 4, 4, 2, 2, 4, 0, 4, 4, 0, 0, 2, 1, 3, 3, 4, 1, 0, 0], [0, 0, 1, 3, 3, 1, 3, 1], [0, 2, 0], [1, 1, 1, 0], [1, 0, 2], [18], [17], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 2, 9, 1, 6, 0, 0, 5, 3, 5, 3, 1, 1, 0, 0, 1, 22, 22, 17, 3, 61, 12, 14, 9, 5, 8, 3, 1, 22, 8, 3, 4, 3, 1, 1, 1, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) == int(4.0):{:\\ni0 = int(5.0)\\n:}else:{:\\nloopBreak% = 0\\nfor in0 in getCharFromString(getCharFromString(\"\"r\"\", min(int(1.0), len(saveChr(int(1.0))))), ( ( min(len(s1.strip()[:i1][:i2].lstrip()), int(9.0)) * i2 ) + i2 ))[:( int(6.0) * i1 )]:{:\\nres0 = divInt(( i1 + mod(int(6.0),min(( mod(int(1.0),int(2.0)) * i2 ), mod(int(2.0),( max(len(saveChr(int(0.0))), int(3.0)) * max(min(divInt(i2,i1), abs(int(7.0))), abs(int(7.0))) )))) ),i2) != ( int(2.0) * min(len(in0.lstrip()), i2) )\\nb2 = int(0.0) \\le i0\\nin1 = s1\\ni0 *= max(int(0.0), int(3.0))\\nb2 = \"\"S\"\"[i2:int(2.0)] != ((saveChr(i0) + \"\"9\"\") + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += int(22.0)\\nin1 = in1\\n:}\\nb1 = res0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 1, 5, 0, 0, 4], [1, 1], [0], [2, 1, 0, 2, 0, 4, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 3, 2, 1, 8, 2, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in \"\"R\"\"[len(in2):]:{:\\nres0 = s1[i0:] in getCharFromString(\"\";\"\", len(saveChr(i1)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [0, 0], [1], [0, 0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2, 0, 2, 0, 2], [0], [0, 0, 3, 3, 0, 3, 0, 0], [0], [4, 3, 1], [], [], [3, 4, 2, 5, 1, 5, 5, 2], [0, 1, 1, 1], [0, 0], [3, 0, 0, 4, 3, 1, 3, 4, 1, 2, 0, 4, 0, 0, 2, 3, 0, 2, 1], [3, 1, 3], [3, 3], [0, 1, 2], [2, 1, 2, 3], [], [7], [0, 8], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 8, 0, 3, 0, 0, 8, 4, 2, 19, 3, 2, 3, 4, 0, 1, 2, 1], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in (in1 + s2):{:\\nloopBreak% = 0\\nfor in2 in (\"\"0h\"\" + (saveChr(i1) + \"\"8\"\")).lstrip(s1[i2:saveOrd(in2.lstrip(in2))]):{:\\ni0 = len((s2 + \"\")\"\"[i2:])[:max(i0, i2)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 2, 1, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 0, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 2], [17], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 2, 2, 2, 0, 0, 14, 14, 10, 0, 49, 15, 10, 9, 6, 7, 2, 1, 14, 2, 0, 3, 2, 1, 0, 1, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( \"\"R\"\" not in in1 or len(in0) != i1 ) and s0[int(0.0):].endswith(in1[abs(mod(i1,int(7.0))):mod(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len(getCharFromString((\"\"3\"\" + saveChr(min(i0, ( max(( int(2.0) + i2 ), mod(abs(int(1.0)),i0)) * int(7.0) )))), int(7.0))) - i1 )) + ( divInt(int(9.0),max(int(8.0), abs(i2))) * divInt(( ( int(5.0) - int(0.0) ) - ( int(4.0) * i2 ) ),int(8.0)) ) )))]) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2, 1, 1], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [2], [0, 1], [], [1], [], [], [], [1, 1], [], [7, 3], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 0, 2, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"hd\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 3, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 0, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 0, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 3], [1, 0, 3], [2, 1, 0, 0, 1], [0, 0], [17, 10], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 8, 0, 23, 7, 5, 3, 4, 6, 2, 1, 16, 4, 3, 4, 2, 2, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(saveChr(i1)[i2:i0].rstrip())] not in in0[mod(i0,int(0.0)):( int(7.0) * divInt(i1,divInt(( divInt(int(5.0),i2) - ( abs(i1) * i0 ) ),abs(len((\"\"R\"\" + s0.lstrip(\"\"K\"\")).lstrip())))) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 1, 2, 0, 1, 1, 1, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1, 3], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 1], [1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 2, 3], [17], [], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 17, 17, 11, 1, 52, 15, 11, 9, 6, 8, 3, 1, 16, 2, 0, 4, 3, 1, 0, 1, 1], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] not in s0[i1:int(0.0)]:{:\\nres0 = ( abs(mod(i2,int(7.0))) != mod(int(5.0),min(i2, ( divInt(( int(7.0) + i1 ),( len(in1[min(i2, ( max(( int(2.0) + i0 ), divInt(abs(int(1.0)),i1)) * int(7.0) )):]) - int(7.0) )) + i1 ))) or ( getCharFromString((\"\"R\"\" + saveChr(( divInt(int(9.0),max(int(8.0), min(i1, divInt(( ( int(5.0) * int(0.0) ) - ( int(4.0) - i2 ) ),int(8.0))))) * int(59.0) ))), int(9.0)).endswith(s1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = saveOrd(\"\"1;\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [3, 8, 8], [2, 1], [0], [1, 0], [], [], [], [], [4], [1], [], [1], [], [], [], [3, 3, 0, 2, 0, 3, 2, 2], [], [], [], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"@\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [0], [0, 1], [0], [], [], [], [1], [0], [1], [0], [], [], [], [], [], [1, 1, 0, 0, 0, 1, 1, 1], [0, 3, 6, 3, 2, 6, 9, 7], [0, 1, 0, 0], [0], [2, 0, 1, 1, 2, 1, 3, 0, 0, 3, 1, 1], [1, 1], [0, 3], [0], [1, 0], [2, 1, 1, 2], [1], [0], [2, 4, 4, 0, 4, 0, 3, 0, 2, 1], [3, 3, 3], [2, 1, 5], [0, 1], [2], [], [], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 4, 1, 12, 2, 2, 0, 2, 4, 1, 1, 10, 3, 3, 2, 1, 0, 0, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s1.rstrip().strip()[mod(i0,int(0.0)):int(3.0)]:{:\\nb1 = divInt(int(6326.0),min(i1, i0)) \\l len(s1.strip((s2 + \"\"6\"\"[:int(9.0)])))\\ni0 = int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1, 1], [1, 2, 0, 2, 1, 1], [1, 0], [2, 2, 0, 1], [0], [0], [], [], [0, 2], [], [0, 2, 0, 2], [], [0, 1], [3, 0], [1], [], [0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 7, 3, 4, 6, 0, 8, 7, 4, 6, 5, 6, 9, 4, 0, 4, 7], [2, 0, 2, 2, 2, 1, 2, 0, 2, 0, 0, 0], [0], [0, 0, 2, 1, 0, 1, 3, 2, 3, 3, 1, 3, 1, 2, 0, 1, 0, 3, 3, 1, 2, 1, 0, 1, 2, 2, 1, 0, 1, 0, 0, 2, 3, 1, 2, 2, 1, 2, 0, 3, 1, 1, 1, 3, 0, 3], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1], [0, 2, 2, 0, 0, 4, 0, 4, 1, 4, 3], [0, 0, 2, 0, 1], [1, 1, 0, 0, 0], [5, 4, 2, 1, 3, 0, 5, 3], [1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0], [0, 4, 2, 0, 1, 3, 3, 0, 2, 2, 1, 4, 0, 3, 4, 2, 2, 4, 2, 1, 2, 4, 1, 1, 0, 1], [1, 2, 0, 1], [], [2, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 3, 3, 1, 0, 1, 2], [6, 22, 1, 13], [2, 4, 7], [1], [24, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 0, 3, 0, 1, 2, 1, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 4, 1, 0, 5, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in1\\nif ( saveChr(i2) in s2[i0:] or b0 ):{:\\ns1 = \"\"G\"\"\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 6, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 0, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 3, 2, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1, 0], [0, 2, 4, 2, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 4, 2, 1, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 0], [17, 0], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 14, 0, 33, 10, 5, 5, 5, 5, 2, 1, 14, 2, 0, 5, 2, 2, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nres0 = s2[:len(getCharFromString(\"\"R\"\"[i1:int(0.0)], max(mod(i2,i2), i0)))] not in in0[int(7.0):min(i0, ( ( mod(int(5.0),i1) + ( len((\"\"A\"\" + saveChr(mod(i1,divInt(i2,( int(7.0) + i0 )))))[:divInt(i0,i2)]) + i2 ) ) - ( i1 + i0 ) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [4, 0, 5, 4, 3, 7, 0, 3, 9, 7, 1, 6, 5, 9, 9, 1, 8, 9, 9, 9], [2, 1, 1, 2, 0, 1, 0, 2, 1, 2, 2], [1], [3, 2, 2, 1, 2, 3, 3, 1, 2, 2, 3, 0, 3, 1, 3, 0, 2, 0, 2, 2, 0, 1, 3, 1, 3, 3, 1, 3, 0, 2, 3, 2, 3, 3, 2, 0, 0, 1, 3, 0, 0, 2, 2, 1, 1, 1, 1, 2, 3, 1, 2, 3, 3, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0], [3, 0, 3, 1, 2, 2, 0, 2, 2, 2, 0, 1, 0, 0, 2, 1, 3], [0, 1, 2, 0, 2, 1, 2, 1, 2, 0, 0, 1], [1, 1, 1, 1], [0, 2], [0, 0, 1, 1, 0, 1], [], [2, 1, 3, 3, 1, 0, 0, 1], [], [], [0], [1, 0, 2, 3, 2, 0], [17, 14], [23], [4, 7], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 20, 11, 1, 55, 15, 17, 12, 4, 2, 6, 0, 8, 0, 0, 1, 6, 2, 1, 2, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += len(\"\"xR4\"\"[( ( int(4.0) - ( min(len(((\"\"]\"\" + s0) + s2)), int(0543.0)) * mod(( max(i1, abs(int(7.0))) + abs(i1) ),( i2 * ( mod(i0,int(0.0)) - min(int(3.0), abs(abs(int(9.0)))) ) )) ) ) * abs(i1) ):( min(( max(min(mod(i0,i2), int(71.0)), min(i1, i2)) - mod(( int(6.0) * int(5.0) ),int(9.0)) ), int(91.0)) + ( abs(int(899.0)) + ( max(len(\"\"7O\"\"), int(9.0)) - i2 ) ) )])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [1, 2, 2, 1, 2, 1, 1, 1, 2, 2, 0, 0, 1, 2, 0, 2, 0, 1, 1], [1, 0, 0, 2, 0, 2, 2], [0, 2, 1, 1, 1, 2, 0, 2, 0, 1, 0, 2], [0, 0, 0], [0, 0, 0, 0], [], [], [2, 2, 2, 1, 2], [0, 3], [2, 1, 1, 2, 2, 2, 0, 0, 2, 0], [0, 0], [4, 1, 5, 1, 2], [0, 3, 1], [1], [0], [1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 5, 5, 7, 7, 3, 2, 2, 1, 4, 2, 4, 3, 7, 1, 7, 3, 5, 6, 8, 0, 5, 1, 6, 4, 8, 9, 7, 0, 0, 3, 0, 7, 4, 2, 8, 2, 0, 6, 0, 7, 8, 9, 9, 6, 6, 5, 8, 0, 3, 7, 8, 2, 5, 6, 2, 7, 1, 4, 1, 0, 7, 5, 7, 2, 1, 4, 5, 1, 2, 8, 3, 2, 9, 1], [0, 1, 1, 0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 1, 0, 0, 0, 1, 1, 2, 2, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 0, 0, 2, 0, 2, 1, 1, 0, 1, 1, 2, 0, 2, 2, 2, 0, 0, 0, 2, 0, 2, 1, 0, 1, 0, 2, 2, 1, 0, 0, 1, 1, 0, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2], [1, 0, 1, 1], [3, 0, 2, 0, 2, 2, 3, 0, 3, 2, 0, 2, 3, 3, 0, 3, 1, 2, 0, 2, 1, 0, 3, 2, 0, 1, 1, 1, 1, 0, 2, 3, 3, 2, 2, 3, 1, 2, 1, 2, 1, 1, 0, 0, 0, 2, 0, 2, 3, 3, 2, 0, 2, 3, 1, 1, 2, 0, 2, 2, 0, 2, 3, 1, 3, 0, 1, 2, 2, 0, 1, 1, 0, 2, 3, 3, 3, 0, 2, 2, 3, 0, 0, 1, 3, 3, 3, 0, 1, 2, 1, 3, 0, 1, 2, 1, 0, 3, 3, 3, 2, 2, 3, 1, 3, 1, 0, 3, 1, 0, 2, 1, 2, 3, 0, 2, 1, 0, 0, 1, 2, 0, 2, 3, 1, 1, 2, 2, 0, 1, 3, 2, 1, 2, 0, 1, 1, 0, 1, 2, 3, 3, 1, 3, 3, 3, 2, 3, 0, 0, 2, 0, 0, 3, 0, 3, 3, 0, 1, 1, 3, 2, 2, 3, 1, 0, 1, 0, 1, 3, 2, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 3, 1, 1, 2, 3, 0, 0, 1, 3, 2, 0, 2, 0, 3, 3, 3, 2, 1, 1, 0, 0, 0, 2, 3, 2, 3, 0, 1, 0, 2, 3, 0, 0, 0, 3, 2, 2, 2, 3, 1, 1, 0, 1, 3, 1, 1, 2, 0, 1, 1, 2, 3, 3, 3, 0, 0, 3, 3, 1, 2, 2, 3, 1, 0, 0, 2, 3, 1, 3, 1, 2, 3, 2, 2, 0, 3, 3, 3, 2, 1, 0, 1, 2, 2, 2, 0, 2, 1, 3, 0, 1, 0, 3, 3, 0, 2, 0, 2, 0, 2, 0, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1], [1, 4, 4, 3, 4, 1, 1, 4, 3, 2, 2, 2, 3, 4, 0, 1, 0, 4, 3, 1, 4, 4, 2, 0, 3, 0, 4, 4, 1, 0, 4, 1, 1, 0, 4, 0, 1, 1, 2, 1, 0, 1, 0, 0, 2, 3, 2, 2, 4, 0, 2, 3, 2, 0, 3, 3, 3, 1, 4, 0, 1, 1, 4, 0, 4, 1, 1, 0, 0, 2, 1, 1, 3, 2, 3, 0, 4, 1], [0, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 0, 1, 2, 0, 2, 0, 1, 0, 2, 0, 1, 0, 1, 2, 1, 1, 2, 1, 0, 1, 0, 1, 2, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1], [4, 2, 3, 5, 4, 3, 5, 5, 0, 5, 5, 1, 3, 0, 5, 5, 1, 3, 5, 1, 0, 3, 2, 0, 0, 1, 1, 0, 5, 2, 4, 4, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0], [1, 4, 0, 3, 2, 2, 4, 1, 2, 1, 0, 4, 4, 3, 3, 3, 0, 4, 3, 4, 4, 2, 0, 2, 1, 2, 4, 2, 1, 1, 0, 0, 0, 1, 1, 2, 0, 4, 0, 2, 2, 0, 2, 2, 4, 4, 1, 0, 0, 0, 2, 2, 0, 1, 2, 1, 3, 2, 0, 4, 1, 4, 0, 4, 0, 2, 2, 0, 0, 2, 1, 2, 4, 2, 1, 1, 4, 1, 2, 1, 2, 0, 2, 1, 0, 4, 1, 1, 0, 3, 4, 2, 1, 3, 0, 1, 4, 3, 1, 4, 4, 2, 4, 1, 4, 1, 2, 1, 0, 0, 1, 0, 4, 1], [1, 3, 1, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 2, 1, 3, 3, 3, 3, 2, 2, 3, 2, 0], [1, 0, 1, 4, 5, 2], [0, 2, 0, 1, 1, 2, 2, 2, 0, 0, 2, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 1], [1, 3, 1, 0, 3, 0, 1, 3, 3, 1, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 2, 0, 2, 3, 2, 0, 0, 2, 0, 1, 0, 1, 3, 0, 3, 2, 0, 1], [1, 7, 11, 24, 18, 24, 11, 25, 15, 7, 17, 19], [16, 0, 10, 3, 5, 20, 21, 1], [9, 2, 3, 8, 7, 1, 1], [15, 19, 8, 28, 9, 14, 18, 30, 10, 29, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 19, 19, 7, 12, 3, 4, 0, 0, 5, 2, 10, 2, 5, 3, 1, 1, 1, 75, 75, 76, 4, 285, 71, 78, 38, 36, 33, 38, 3, 114, 24, 6, 27, 38, 12, 8, 7, 11], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\"q,a\"\".startswith(saveChr(max(i0, ( i1 + divInt(( saveOrd(in1) - i1 ),saveOrd((\"\"B\"\".rstrip()[( i0 - ( len(\"\":\"\"[saveOrd(s2):i2]) - max(int(85.0), mod(i2,mod(int(57.0),i2))) ) ):][max(mod(i2,int(7.0)), int(3.0)):int(2.0)] + saveChr(int(2.0))))) ))))\\nif i2 \\l mod(saveOrd(getCharFromString((((in0 + (in2[:len(\"\"H\"\"[:mod(mod(abs(int(1.0)),( int(4.0) * ( int(2.0) * int(4.0) ) )),i0)])].capitalize().capitalize() + getCharFromString(\"\"k\"\"[i2:], i2)[( i0 * ( abs(abs(( i0 - mod(len(\"\"%\"\"),int(3.0)) ))) - int(7.0) ) ):]).capitalize()) + in1) + in0), ( i1 * mod(mod(i0,mod(saveOrd(in2),int(1.0))),min(i0, int(73.0))) ))),( mod(i0,int(5.0)) * int(68.0) )):{:\\nloopBreak% = 0\\nfor in2 in \"\"]\"\":{:\\ns0 = \"\"d\"\"\\nloopBreak% = 0\\nfor in2 in in2[i1:]:{:\\ni1 -= ( max(min(saveOrd(getCharFromString(s1, i2)), ( divInt(len(in0[i2:i1][int(0.0):max(saveOrd(getCharFromString(\"\"L\"\".capitalize(), saveOrd(s0))[i0:int(5.0)][( int(1.0) + abs(i2) ):]), int(6.0))]),divInt(int(4.0),i2)) - min(len(in2), min(divInt(mod(saveOrd(in2),int(8.0)),saveOrd(s1[int(9.0):][:i1])), max(int(7.0), i1))) )), ( int(0.0) * mod(min(i0, ( int(0.0) + i0 )),i0) )) * int(3.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = ( i1 + ( saveOrd(\"\"9\"\") - int(07.0) ) )\\ni0 += int(4.0)\\nloopBreak% = 0\\nwhile ( ( i0 * int(2.0) ) + max(mod(int(82060.0),divInt(i2,int(789.0))), int(9.0)) ) \\ge i0:{:\\nloopBreak% = 0\\nfor in0 in \"\"2YSf\"\"[int(6.0):]:{:\\nin2 = (s1[divInt(max(min(int(6.0), saveOrd(\"\"&\"\".capitalize())), min(max(( max(i2, i1) - ( i1 + i0 ) ), abs(i1)), max(min(i1, int(5.0)), int(8.0)))),max(mod(( min(int(0.0), i2) - int(3.0) ),i0), int(7.0))):] + getCharFromString(s0, min(divInt(int(8.0),i2), i2)))\\nb2 = in0.capitalize() not in s2[abs(len(s0)):abs(abs(saveOrd(\"\"+\"\"[min(abs(int(2.0)), len(saveChr(int(5.0))[int(6.0):mod(abs(i2),i0)])):int(2.0)])))][min(mod(i0,mod(i0,len(\"\"/\"\"[len(\"\"_\"\"):len(\"\"3\"\".lstrip())]))), divInt(int(7.0),int(1.0))):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = \"\"Y8\"\"[i0:]\\nloopBreak% = 0\\nwhile s1[i2:( max(( saveOrd(\"\"\"\\\\\"\"\"[i1:int(4.0)]) * i0 ), ( min(i1, i0) - i2 )) - max(divInt(mod(mod(max(int(1.0), int(0.0)),i2),int(7.0)),saveOrd(s1)), int(5.0)) )].endswith(\"\"7\"\".rstrip()):{:\\nb2 = \"\"L\"\" not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b1:{:\\ni1 *= int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( (\"\"Z\"\"[:( i0 - int(2.0) )].rstrip((in2 + \"\"1\"\")) + (\"\"P\"\" + \"\"u\"\".strip()[int(1.0):( min(saveOrd(\"\"H\"\".capitalize()), max(i0, i1)) + max(min(int(4.0), ( mod(min(int(5.0), i1),i0) - ( abs(int(1.0)) + max(int(2.0), ( max(divInt(( i1 - len(\"\"v\"\"[:abs(len(s2))]) ),mod(int(8.0),i0)), int(3.0)) * mod(( divInt(i2,( int(2.0) - min(i2, int(9.0)) )) + i0 ),saveOrd(in1)) )) ) )), max(i0, ( i0 + divInt(i0,mod(i0,int(1.0))) ))) )].capitalize().capitalize()).strip(\"\"^\"\")) == in1 or True )\\ns1 = getCharFromString(\"\"R*1Tb\"\", i2)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 5, 1, 6, 7, 8, 8], [0, 2, 2, 0, 1, 2, 1, 2, 1, 0, 0, 1, 0, 1, 2, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 2, 2, 2, 2, 1, 0, 2, 3, 2, 2, 2, 3, 2, 1, 2, 2, 2, 1, 0, 1, 1, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 2, 0, 0, 1, 3, 1, 3, 2, 3, 3, 3, 3, 2, 1, 1, 1, 2, 3, 0, 1, 3, 3, 2, 2, 1, 2, 3, 0, 3, 3, 3, 0, 3, 0, 3, 3, 1, 0, 3, 0, 3, 1], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 2, 0, 3, 0, 1, 1, 1, 1, 1, 3, 3, 3, 0, 2, 1, 1, 4, 4, 2, 4, 1, 4, 0, 4, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0], [0, 1, 4, 5, 3, 0, 4, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 1, 4, 1, 0, 1, 1, 1, 1, 2, 0, 2, 0, 2, 4, 1], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1, 2, 1, 2], [0, 2, 3, 0, 0, 3, 1, 3], [17, 12, 14], [19], [0], [20, 19, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 25, 25, 16, 0, 90, 26, 27, 11, 15, 9, 8, 1, 28, 3, 1, 8, 8, 3, 1, 1, 3], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\nres0 = in2[len(in0):] not in s0[:i0][int(0.0):abs(mod(i2,int(7.0)))][mod(int(5.0),min(( divInt(( divInt(int(7.0),i2) + divInt(len(getCharFromString((\"\"R\"\" + \"\"0\"\"), divInt(mod(( min(divInt(int(2.0),divInt(( ( int(1.0) + i0 ) * int(7.0) ),int(7.0))), i1) - i2 ),( max(max(int(9.0), max(i1, divInt(divInt(mod(int(8.0),int(5.0)),mod(int(0.0),i2)),mod(i1,i0)))), int(4.0)) + max(int(8.0), max(( len(\"\";\"\".capitalize()) * len(in1) ), len(\"\"M\"\"))) )),min(( int(59.0) - int(9.0) ), int(2.0))))),( abs(i0) - int(2.0) )) ),max(max(( ( int(5.0) * divInt(saveOrd(\"\"O\"\"),i1) ) + saveOrd(\"\":\"\") ), abs(saveOrd(\"\"t\"\"))), i0)) + max(i1, saveOrd(in0[min(int(1.0), i2):])) ), saveOrd(in0[:i0]))):len(\"\",\"\".rstrip()[int(6788.0):])]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1, 2, 2, 0, 2, 1, 1, 0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [1, 1, 0, 0, 1], [0, 3, 0], [17, 24], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 18, 18, 15, 0, 57, 17, 11, 7, 10, 5, 3, 0, 17, 3, 1, 5, 3, 2, 0, 0, 1], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[:len(in2)] not in in1.capitalize():{:\\nres0 = ( len(\"\"R\"\") != i0 or ( saveChr(int(08.0))[:max(mod(int(2.0),min(mod(int(7.0),len(in1[i2:( mod(( int(2.0) + i2 ),mod(min(( i0 * divInt(i0,i1) ), int(1.0)),i1)) * divInt(max(i2, i0),abs(( i0 - i2 ))) )])), mod(max(len((\"\";\"\" + \"\"Y\"\"[:int(7.0)].rstrip())[max(i2, mod(( int(4.0) + int(9.0) ),int(8.0))):( int(5.0) * i1 )]), int(0.0)),int(4.0)))), ( divInt(i0,divInt(int(8599.0),int(2.0))) - i2 ))].endswith(in0) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 9, 9, 9, 4, 2, 4, 4, 1, 6, 8, 2, 9, 9, 7, 1, 6, 8, 5, 4, 2, 5, 8, 2, 1, 4], [1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 0, 2], [1], [2, 3, 0, 3, 3, 1, 1, 1, 0, 2, 1, 0, 1, 0, 3, 2, 3, 2, 2, 2, 1, 2, 3, 1, 3, 2, 1, 2, 1, 2, 1, 3, 3, 0, 3, 1, 3, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 0, 3, 1, 2, 1, 1, 0, 0, 1, 1, 3, 3, 2, 3, 0, 3, 0, 2, 2, 1, 0, 1, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 2, 4, 1, 3, 3, 0, 0, 0, 4, 3, 2, 0, 3, 0, 3], [1, 2, 0, 1, 0, 0, 1, 1, 0, 2, 2, 1, 1, 1], [1, 0, 0, 1, 0, 0], [0, 2, 0, 3, 4, 0, 2], [1, 1, 1, 1, 1], [], [3, 4, 4, 2, 1, 0, 3, 2, 4, 3, 0, 2, 4, 4, 2, 1, 4, 1, 4, 0, 4, 2, 2, 2, 0, 0, 2, 2, 4, 2, 2, 1, 0, 1, 0], [3, 3, 3, 3, 0, 2, 0, 3, 1], [2, 3, 2, 4, 3], [0, 1, 1, 0, 1, 2, 1, 2, 0, 2, 0], [1, 1, 1, 3, 0], [15], [10, 16, 6], [], [31]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 13, 1, 73, 19, 16, 14, 6, 7, 5, 0, 35, 9, 5, 11, 5, 1, 3, 0, 1], "tree_depth": 69, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= mod(min(i2, abs(saveOrd((\"\"k\"\"[int(2.0):int(2.0)].lstrip(s0).strip() + ((s2 + getCharFromString(\"\"q\"\"[int(9.0):i1], ( int(9.0) * i2 )).rstrip(\"\"g\"\".capitalize())[:int(9.0)]).strip()[:i1] + getCharFromString(s0, max(divInt(len(in0[:( ( ( int(4.0) + divInt(len(in1),int(2.0)) ) - min(mod(int(4.0),divInt(int(4.0),( int(1.0) + min(min(i2, saveOrd(saveChr(int(6.0))[len(\"\"`\"\"[( ( int(8.0) + int(2.0) ) - int(9.0) ):int(9.0)][( int(7.0) - ( int(1.0) + ( i2 * abs(int(6.0)) ) ) ):]):( int(8.0) * int(5.0) )][i1:])), i1) ))), int(4.0)) ) - int(2.0) )][min(len(s0), ( min(i2, len(\"\"P\"\")) - i1 )):][:( divInt(int(5.0),i0) - int(8.0) )].lstrip(s2)),int(2.0)), int(14.0)))))))),i2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [1, 0, 0, 1], [4, 4, 8, 5], [1, 1, 0, 0], [], [3, 0, 2, 2, 0, 2, 3, 3, 1, 0, 2, 1, 2, 2, 3, 3, 0], [0, 0, 1, 0, 1, 0], [2, 2, 2, 4, 4], [0, 1, 2, 1], [1, 0], [3, 5], [0, 0, 1, 0, 1, 1], [], [4, 4, 2, 0, 1, 1, 1], [0, 3], [4], [2], [3, 0, 3, 0, 1, 0], [24, 1, 9], [6], [], [6, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 17, 6, 5, 4, 2, 2, 6, 0, 7, 2, 1, 1, 6, 3, 1, 0, 2], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = getCharFromString(in2[abs(i1):].rstrip(\"\"#Y>\"\"), ( ( i1 + mod(abs(abs(int(4.0))),i0) ) - ( int(485.0) * divInt(( saveOrd(\"\"Bg\"\") - saveOrd(\"\"J\"\") ),i0) ) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 2, 2, 1, 2, 1, 0, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 3, 1, 3, 1, 1, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 4, 0, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 1, 0], [1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 3], [17], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 18, 18, 12, 1, 57, 16, 13, 8, 8, 9, 3, 1, 17, 2, 0, 4, 3, 1, 0, 1, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[max(i1, int(0.0)):] not in in0\\nloopBreak% = 0\\nwhile ( abs(mod(i0,int(7.0))) != mod(int(5.0),min(i2, ( divInt(( len(s0[i2:divInt(min(( i1 + ( divInt(( int(7.0) + i2 ),divInt(max(int(4.0), i1),int(1.0))) * int(7.0) ) ), i0),i1)]) - mod(int(7.0),abs(int(9.0))) ),max(i2, ( ( ( int(8.0) + int(5.0) ) * divInt(int(0.0),i0) ) - int(4.0) ))) - saveOrd(in1[int(8.0):min(int(59.0), saveOrd(getCharFromString((\"\"R\"\" + saveChr(int(9.0))), int(2.0))))]) ))) or ( s1.endswith(\"\"6;\"\") and True ) ):{:\\ni0 = saveOrd(s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 0, 0], [2, 0], [0, 1, 0, 0], [0], [0, 0, 0, 0], [], [], [1, 0, 3], [2, 5], [0, 1, 0, 0, 1, 2], [0, 0], [5], [2, 2, 1], [], [1, 0], [], [1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1], [1, 7, 2, 9, 1, 8, 1, 1, 4, 7, 5, 9, 4, 6], [1, 2, 1, 0, 0, 2], [1, 1], [2, 2, 0, 2, 1, 0, 1, 0, 2, 3, 2, 3, 1, 1, 3, 1, 1, 1, 0, 1], [1, 0, 0, 1, 1], [4, 1, 3], [2, 0, 2], [0, 0, 0], [4, 5, 4, 3, 5], [0, 0, 1, 0, 1, 1], [0], [0, 3, 1, 0, 0, 3, 3, 2, 1, 1, 4, 0], [1], [], [0], [3, 0, 0, 2, 3, 1], [12, 24], [1], [5], [15, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 4, 0, 0, 3, 2, 6, 2, 1, 3, 0, 1, 0, 14, 14, 5, 1, 20, 5, 3, 3, 3, 5, 6, 1, 12, 1, 0, 1, 6, 2, 1, 1, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not divInt(( i1 * ( int(1.0) + i2 ) ),int(72.0)) == i1\\nloopBreak% = 0\\nwhile not False:{:\\ni0 *= divInt(saveOrd(in1),divInt(max(int(91.0), int(8.0)),len((\"\",MY\"\" + in2))))\\nloopBreak% = 0\\nfor in1 in in0:{:\\nb0 = int(11.0) != int(4.0)\\nres0 = ((\"\"5)\"\"[int(75.0):i0] + \"\"b\"\") + saveChr(int(946.0))).endswith(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 0, 2], [2], [2, 2], [], [0], [], [], [], [], [0, 2], [], [2], [2], [], [], [0], [], [], [], [], [], [], [], [0, 0, 2, 1, 2, 2, 2], [], [1, 4, 1, 4, 3], [0, 0, 0, 1], [], [1, 0, 3, 0], [], [], [], [3, 3, 0, 3], [7], [], [], [5, 24, 8, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 2, 0, 0, 0, 4, 1, 0, 0, 3], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"\"?H%\"\"\\nin1 = s1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 8, 1, 8, 8, 2, 0, 8, 0, 1], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 0, 1, 0, 0, 1, 0, 2, 1, 1, 2, 0], [1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 0, 2, 2, 3, 2, 1, 2, 3, 3, 1, 3, 2, 2, 2, 2, 0, 2, 3, 0, 3, 2, 3, 2, 1, 3, 0, 3, 2, 2, 0, 0, 3, 1, 3, 0, 2, 2, 3, 1, 2, 1, 1, 3, 3, 2, 3, 0, 3, 3, 0, 2, 1, 0, 3, 2, 0, 1, 1, 0, 1, 0, 0, 2, 1, 2, 2, 0, 0, 0, 3, 2, 0, 2, 2, 1, 0, 0, 2, 0, 2, 0, 3, 0, 3, 0, 1, 3, 0], [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2, 0, 0, 4, 0, 2, 3, 0, 3, 0, 4, 1, 2, 1, 0, 0, 2, 2, 2, 3, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 0, 1, 2, 2, 1, 2, 0, 0, 2, 1, 1, 2, 2, 0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4, 5, 3, 3, 2, 3], [1, 1, 1, 1, 1], [0], [2, 4, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0, 2, 2, 4, 2, 1, 1, 3, 1, 2, 0, 3, 0, 2, 0], [0, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1, 0, 1, 1, 2], [0, 0, 3, 2, 3], [17, 23], [], [9], [20, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 28, 28, 38, 1, 139, 44, 31, 26, 19, 12, 5, 1, 31, 4, 2, 9, 5, 2, 0, 1, 2], "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1[i0:]))[i2:]:{:\\nres0 = in1 not in in0[int(0.0):max(mod(i2,int(9.0)), mod(int(5.0),abs(i0)))]\\ni1 += divInt(( ( min(i2, divInt(len(s0[divInt(i1,divInt(mod(( int(7.0) + i2 ),( min(int(4.0), i0) * int(1.0) )),int(7.0))):i0]),i2)) - ( int(7.0) + max(int(9.0), abs(i1)) ) ) * ( ( divInt(int(8.0),int(5.0)) - ( int(0.0) - i2 ) ) * int(4.0) ) ),max(( i2 + ( divInt(abs(( int(8.0) + ( min(min(int(59.0), saveOrd(saveChr(( divInt(( ( i2 - divInt(min(i2, abs(( len((\"\"R\"\" + in1.rstrip())) + ( int(9.0) - min(i2, len(\"\"X\"\")) ) ))),divInt(mod(i2,i2),min(int(2.0), saveOrd(in2)))) ) * i1 ),divInt(( max(int(2.0), ( int(8.0) * int(1.0) )) - abs(max(divInt(min(i1, min(abs(i1), divInt(int(8.0),i2))),abs(( i2 * int(8.0) ))), int(2.0))) ),i1)) + int(0.0) )))), i2) + i1 ) )),( int(8.0) * ( ( i0 - i1 ) - i0 ) )) * abs(( i0 * mod(( int(0.0) + i1 ),i0) )) ) ), divInt(i2,mod(i1,len(\"\";\"\"[:i1].lstrip()[len(\"\"9\"\"):i2][:int(1.0)])))))\\nin0 = (\"\">\"\" + in0[:len((s2 + in0[i0:]))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [0, 2], [0], [0], [0], [], [], [1], [1, 3], [0, 0, 2, 0, 1, 1], [0, 0], [5], [1, 3, 3], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1], [6, 8, 2, 6, 9, 6, 6], [2, 2, 1, 1, 0, 2, 1, 0, 2], [], [2, 2, 3, 2, 3, 3, 2, 1, 0, 0, 1, 0, 1, 2, 1, 0, 0, 3, 2, 2, 0, 1, 0, 0, 2, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 3, 3, 1], [2, 2, 2, 2, 0, 0], [1, 0], [5, 5, 0, 0], [1], [0], [0, 0, 2, 4, 1, 2, 0], [1], [], [1, 0], [3], [], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 0, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 7, 7, 9, 0, 28, 8, 4, 6, 2, 4, 1, 1, 7, 1, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2:{:\\nloopBreak% = 0\\nwhile True:{:\\nb1 = ( s0.endswith(saveChr(( ( min(mod(len(\"\";\"\"),len(s0[( int(6.0) * i2 ):i2])), int(8.0)) * i1 ) * int(2.0) ))[:( int(6.0) * i1 )]) or ( i0 \\g max(( divInt(i2,int(9.0)) + i1 ), i0) and ( i2 + int(6.0) ) \\ge int(6.0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [], [0, 2], [], [1], [2], [], [], [], [], [], [2, 1], [1], [3], [], [3], [0], [], [5], [0, 1], [], [0, 1], [], [], [], [0, 0], [11, 12], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not in2 not in \"\"LM\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 7, 8, 7, 7, 7, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 2, 1, 2, 1, 0, 0, 0, 1, 1, 0, 0, 2, 1, 1], [0, 1, 1], [3, 2, 0, 0, 3, 2, 2, 1, 2, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 2, 1, 0, 3, 1, 3, 3, 3, 2, 2, 0, 0, 3, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0, 2, 1], [17], [11], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 19, 19, 17, 0, 66, 20, 14, 12, 8, 6, 3, 0, 17, 3, 1, 5, 3, 1, 1, 1, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[:len(in2[mod(i0,i0):len(in1)][( ( int(0.0) + divInt(int(7.0),abs(i0)) ) + ( i2 * divInt(int(8.0),i1) ) ):])] not in saveChr(( min(( i2 - len(in1[:min(divInt(int(7.0),i1), ( max(int(7.0), i0) + int(7.0) ))]) ), i0) * i0 ))[i1:divInt(int(7.0),abs(divInt(max(i1, ( ( ( int(7.0) - int(9.0) ) - mod(int(8.0),i0) ) * int(5.0) )),divInt(int(048.0),( int(59.0) + i0 )))))]:{:\\nres0 = ( len(saveChr(int(92.0))) != min(min(abs(( ( i2 + i1 ) - len((\"\"R\"\" + in0.rstrip())) )), i1), int(2.0)) or ( \"\"0l\"\".endswith(s0) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [2, 0, 2, 1, 2, 0, 0, 2, 1, 1, 1, 0, 2, 2, 1, 0], [1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 2, 1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0], [], [], [0, 0, 3, 2, 0, 2, 3, 1], [0, 3], [1, 0, 2, 2, 0, 0, 2, 1, 0, 2], [0, 0], [1, 0, 3, 2], [2, 0, 0, 2], [], [0], [0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [7, 7, 3, 7, 1, 2, 0, 4, 6, 2, 7, 1, 1, 9, 8, 6], [2, 2, 2, 2, 2, 0, 2, 2, 1, 0, 2, 1], [1, 1, 0], [1, 2, 0, 2, 0, 1, 1, 1, 1, 0, 1, 2, 0, 0, 1, 0, 3, 0, 2, 0, 0, 1, 3, 1, 1, 1], [0, 1, 0, 1], [1, 2], [1, 0, 0, 2], [1, 1], [5, 2, 0, 2, 3, 5, 4, 2, 2, 3, 0, 1, 1, 0, 3, 3], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0], [0, 0, 3, 2, 0, 3, 0, 4, 0, 1, 0, 2, 2, 1, 0, 3, 2, 4, 3, 3, 4, 0, 0, 4, 0, 1, 1, 1, 1, 0, 4], [2, 2, 0, 2, 1], [], [2, 0, 2, 0], [2, 0, 3, 0, 3, 1, 1, 3, 1, 1], [10, 6], [22, 11, 8, 19], [4], [2, 6, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 6, 10, 4, 5, 0, 0, 8, 2, 10, 2, 4, 4, 0, 0, 2, 16, 16, 12, 3, 26, 4, 2, 4, 2, 16, 10, 4, 31, 5, 0, 4, 10, 2, 4, 1, 3], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l ( i2 - mod(i2,int(7.0)) ):{:\\nb0 = not in2 not in s2\\nloopBreak% = 0\\nfor s0 in (s2[int(371.0):] + (in0 + in2.capitalize())):{:\\nb0 = \"\"4\"\" in in1\\nloopBreak% = 0\\nfor s2 in \"\"K\"\"[int(2.0):][int(0.0):i2]:{:\\ni2 += int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += ( i0 * i2 )\\nif res0:{:\\nb2 = b0\\n:}\\ns2 = in0\\ni2 = int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = (((getCharFromString(s0, i1) + s1) + s1.capitalize()).capitalize()[max(i0, mod(i2,i1)):int(2.0)] + \"\"\\\\\\t\"\") != \"\"G\"\"\\n:}\\nloopBreak% = 0\\nfor s0 in \"\"#wl<i\"\":{:\\nloopBreak% = 0\\nfor in0 in \"\"t\"\":{:\\nres0 = abs(int(71.0)) \\ge int(19.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not in0 == saveChr(int(86.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 3, 9, 7, 1, 7, 3, 7, 5, 0, 4, 4, 1, 3, 6, 8, 5, 9, 4, 4, 0, 1], [2, 2, 1, 0, 2, 1, 2, 0, 0, 2, 0, 2, 2, 0, 1, 0, 2, 0], [1], [2, 2, 2, 3, 2, 2, 2, 3, 3, 2, 3, 3, 2, 3, 2, 0, 3, 0, 1, 3, 0, 1, 2, 3, 0, 0, 2, 2, 0, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 1, 3, 0, 1, 0, 0, 3, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 3, 1, 3, 3, 1, 2, 1, 3, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 3, 1, 3, 4, 1, 4, 3, 4, 0, 1, 2, 4, 3, 4, 4, 2, 1, 3, 1, 3, 2, 2], [2, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 5, 2, 0, 4, 5, 3, 1, 4], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0], [1, 1, 2, 2, 1, 4, 2, 0, 0, 4, 0, 2, 1, 2, 4, 2, 1, 0, 0, 2, 1, 4, 0, 1, 0, 1], [3, 0, 0, 2, 1], [5, 3], [0, 2, 0, 0, 1, 0, 1], [0, 3, 0, 2, 0, 3, 2, 2, 3, 2, 3, 0], [20, 25, 3, 23], [10], [5, 6, 4, 4], [6, 24, 11, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 21, 17, 1, 88, 30, 21, 13, 18, 8, 12, 0, 26, 4, 1, 7, 12, 4, 0, 4, 4], "tree_depth": 77, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= ( divInt(( len(\"\"U\"\") + divInt(divInt(mod(len(\"\"#Z5\"\"),max(( len(\"\"D\"\"[saveOrd(s0[( max(mod(i2,saveOrd(in2)), i1) - int(7.0) ):len(getCharFromString(s2, i0))].strip(\"\"?\"\"[int(7.0):divInt(saveOrd(getCharFromString(\"\"6\"\"[i2:i1], ( mod(i2,int(3.0)) - ( divInt(min(max(( mod(( mod(mod(( divInt(( mod(abs(saveOrd(s0)),len(in1)) * saveOrd(\"\"4\"\"[:int(9.0)]) ),( int(7.0) * mod(int(1.0),saveOrd(in2.capitalize())) )) + i0 ),i0),int(7.0)) + int(3.0) ),int(7.0)) + int(5.0) ), divInt(i2,divInt(( int(0.0) + int(4.0) ),mod(int(4.0),abs(i0))))), int(1.0)),i2) + i2 ) ))[:max(i0, int(3.0))]),int(6.0))])):][i1:int(8.0)]) + divInt(int(5.0),i0) ), i2)),int(9.0)),len(\"\"(\"\")) ),int(4.0)) + max(len(in0), int(4.0)) )\\ns1 = \"\"4\\\\\\\\X\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [0], [0, 2], [0], [1], [2], [], [1], [], [0, 1, 0, 0, 1, 1], [0, 3, 3, 8, 6, 0], [2], [], [1, 1, 0, 3, 1], [], [4], [], [], [0, 2, 2, 4, 4], [1, 0, 1], [], [0, 2, 3, 0, 3, 3, 2, 3, 0, 1, 1, 2, 0, 0], [], [], [1, 0, 0], [3, 0, 1], [25], [15], [], [14]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 6, 6, 1, 0, 5, 0, 1, 0, 0, 5, 3, 0, 14, 0, 0, 3, 3, 1, 1, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not s0 not in (s2 + (((s2 + \"\"+\"\")[int(03.0):int(386.0)] + \"\"Zp\"\") + in1[i2:saveOrd(in1)]))[:int(0.0)]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 6, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 2, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 2, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 1, 1, 0, 2, 1, 3, 1, 3, 1, 2, 2, 0, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 3, 1, 2, 1, 0], [0, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 4, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 2, 3, 0], [1, 0], [2, 2, 0, 2, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 8, 0, 45, 15, 9, 8, 7, 7, 2, 1, 16, 4, 1, 3, 2, 1, 0, 0, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(in0[i0:int(0.0)].rstrip()[max(divInt(i2,int(7.0)), mod(int(6.0),min(i2, len(s0)))):].capitalize())) not in (\"\"R\"\" + getCharFromString(in1, ( mod(int(7.0),( mod(int(2.0),( i0 + ( divInt(( int(1.0) + i0 ),divInt(len(\"\";\"\"),max(i1, mod(int(7.0),int(7.0))))) - i2 ) )) * ( int(9.0) + abs(int(8.0)) ) )) * max(int(5.0), ( ( i2 - int(0.0) ) - int(4.0) )) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 0, 0], [2], [0, 1, 1], [], [0, 0], [], [], [0], [0], [1, 2], [0], [2], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 1, 1, 2, 9, 0, 6, 6, 8, 7, 3, 2, 0, 4, 2, 3, 2, 4, 9, 8, 8, 2, 6], [2, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 0, 0], [0, 1], [2, 2, 0, 1, 0, 0, 0, 2, 2, 3, 3, 2, 2, 3, 2, 3, 2, 1, 1, 1, 1, 2, 1, 3, 2, 0, 1, 1, 0, 0, 0, 2, 1, 1, 1, 2, 1, 3, 2, 3, 2, 0, 1, 2, 0, 2, 1, 3, 0, 0, 2, 3, 1, 2, 0, 2, 2, 1, 3, 0, 1, 2, 2, 1, 1, 1, 0, 2, 0, 0], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 2, 4, 0, 1, 3, 2, 0, 0], [1, 1, 2, 1, 1, 1, 1, 1, 2, 0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0], [5, 3], [1, 1, 1, 0, 1], [], [4, 3, 0, 4, 3, 1, 4, 4, 1, 2, 4, 3, 3, 1, 2, 0, 1], [1, 2, 0, 2, 1], [0], [1, 0], [0, 0, 3, 1, 2], [18, 0], [7], [3], [31]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 25, 25, 19, 2, 70, 23, 10, 10, 14, 2, 5, 0, 17, 5, 0, 2, 5, 2, 1, 1, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( divInt(i2,int(0.0)) - i0 ) \\l i0:{:\\nb0 = saveChr(i1) == (in2 + (\"\"S\"\" + getCharFromString(\"\"A\"\".capitalize(), ( mod(min(min(divInt(( abs(mod(saveOrd(saveChr(mod(int(2.0),int(0.0)))[:int(1.0)]),int(1.0))) - mod(int(2.0),min(mod(i0,int(9.0)), int(0.0))) ),i0), i1), i1),divInt(int(6.0),int(6.0))) * int(87.0) ))).capitalize())\\ni1 = ( int(320.0) - max(( len(((\"\"`\"\" + in0[divInt(i1,int(4.0)):( i0 - divInt(int(2.0),abs(i1)) )]) + \"\"h3\"\")) - i1 ), ( min(int(324.0), mod(i2,( ( int(9.0) - min(i1, int(8.0)) ) - mod(divInt(int(8.0),int(2.0)),int(6.0)) ))) * i1 )) )\\ni1 += divInt(i0,i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [0, 2, 0, 0, 0, 0], [2], [1, 1, 1, 1, 1], [], [0, 0, 0, 0, 0], [], [], [2, 1], [], [0, 2], [], [1], [2], [], [], [], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 5, 4, 3, 7, 9, 9, 4, 9, 9, 6, 2, 4, 4, 3, 0, 7, 6], [1, 2, 2, 2, 0, 2, 2, 1, 0, 2, 0, 2, 1, 0, 0, 1], [1, 0, 0, 0, 1], [3, 1, 2, 3, 3, 1, 0, 2, 3, 2, 1, 0, 2, 1, 0, 2, 3, 3, 0, 3, 2, 2, 1, 0, 1, 2, 3, 3, 3, 0, 3, 1, 2, 2, 2, 2, 3, 2, 0, 1, 3, 0, 1, 3, 0, 1, 2, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0], [3, 1, 2, 2, 4, 2, 0, 0, 2, 2, 0, 4, 0, 0], [1, 1, 0, 0, 1, 2, 1, 1, 0, 2, 2], [0, 0, 0, 0, 0], [5, 0, 5], [1, 1], [], [0, 4, 2, 0, 0, 1, 1], [2], [], [1], [0, 1], [20], [7], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 1, 5, 0, 5, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 18, 18, 16, 5, 51, 14, 14, 11, 5, 3, 2, 0, 7, 1, 0, 1, 2, 1, 1, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in2)\\nloopBreak% = 0\\nwhile not s0[:int(0.0)].capitalize() not in in2:{:\\ni2 = ( max(abs(int(543.0)), i2) - divInt(abs(( int(7.0) + i2 )),divInt(int(99.0),i0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = ( saveOrd(\"\"U\"\") + abs(i2) )\\ni1 = min(divInt(( int(499.0) - i0 ),int(6.0)), ( min(abs(abs(i2)), min(int(24.0), ( divInt(( ( saveOrd(\"\"h\"\") * divInt(i0,int(4.0)) ) - min(i2, int(3.0)) ),min(i1, int(0.0))) - ( i0 + int(7.0) ) ))) * i0 ))\\ni1 *= int(6.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 2, 2, 0, 0], [1, 2, 2], [0, 1], [], [0, 0], [], [], [3, 1], [5], [0, 0, 2, 1], [0], [2], [0, 1], [], [1], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 9, 2, 5, 3, 0, 6, 1, 7, 4, 2, 4, 7, 7], [0, 1, 1, 1, 0, 0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 2, 1, 1, 0], [0], [0, 2, 2, 0, 0, 3, 2, 2, 0, 2, 3, 2, 2, 0, 3, 2, 1, 2, 3, 1, 0, 2, 3, 1, 1, 3, 2, 3, 3, 1, 2, 3, 3, 3, 1, 0, 3, 0, 2, 1, 2, 1, 1, 2, 0, 3, 2, 3, 1, 0, 1, 2, 2, 0, 0, 2, 2, 0, 3, 1, 2, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 0], [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [3, 3, 3, 2, 2, 0, 3, 1, 0, 3, 0, 2, 1, 4, 1, 4, 4, 1], [0, 1, 0, 2, 1, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0], [0, 5, 2, 4, 3, 1, 5], [0, 0, 1, 1, 1, 1, 1, 1], [], [3, 3, 4, 0, 1, 4, 2, 3, 4, 0, 0, 2, 1, 0, 2, 4, 0, 2, 1, 1, 2, 0, 1, 2, 0, 1], [0, 3, 2, 0], [2], [1, 1, 2, 0, 0, 2], [3, 0, 1, 3, 3, 3, 0, 0], [7, 22, 5], [7], [], [26, 14, 27, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 0, 2, 0, 0, 2, 1, 4, 1, 1, 2, 0, 1, 1, 15, 15, 19, 1, 72, 21, 18, 8, 13, 7, 8, 0, 26, 4, 1, 6, 8, 3, 1, 0, 4], "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif res0:{:\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile ((getCharFromString(s0, i0) + \"\"[Hh\"\") + (in2.capitalize() + s2)[:divInt(mod(i1,i1),len(\"\"+\"\"[:mod(( i1 + ( len(in1) - mod(mod(i0,len(getCharFromString(in0, divInt(int(8.0),mod(abs(int(8.0)),i0)))[( abs(int(9.0)) + int(2.0) ):])),min(mod(len(\"\"\\\\\\\\\"\"[max(int(5.0), ( min(len(\"\"\"\"), min(int(3.0), i0)) * abs(i2) )):( int(0.0) - mod(int(6.0),int(1.0)) )]),( i1 + max(mod(saveOrd(s1[int(7.0):i1]),int(4.0)), mod(divInt(i2,i1),divInt(( i1 + max(int(2.0), ( i1 - int(4.0) )) ),saveOrd(\"\"W\"\")))) )), saveOrd(in2[max(int(7.0), i0):]))) ) ),i2)]))].strip()) == \"\"F\"\":{:\\nb1 = int(7.0) != i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = i0\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 2, 2, 1, 2, 1, 0, 1, 2, 0, 0, 0, 0, 2, 1, 0], [0, 2, 2, 1, 0, 2], [2, 2, 1, 1, 0, 2, 0, 1, 0, 0], [0, 0], [0, 0, 0, 0, 0, 0], [], [], [0, 2, 3, 2, 0, 3], [5, 2], [2, 0, 0, 1, 2, 0, 0, 1, 0, 2], [0, 0], [1, 2, 3], [1, 3, 1, 0, 0], [0], [1, 1], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 0, 3, 8, 6, 9, 0, 7, 1, 8, 6, 6, 6, 3, 5, 0, 8, 8, 2, 1, 0, 5, 3, 7, 8, 0, 8, 7, 0, 1, 3, 4, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 2, 0, 1, 2, 2, 0, 1, 1, 2, 0, 0, 0, 2, 0, 2, 1, 0, 2, 2, 1, 2, 1, 2, 2, 2, 2, 0], [0, 0, 0], [2, 0, 0, 0, 3, 3, 0, 0, 3, 3, 2, 2, 0, 2, 0, 1, 1, 0, 1, 2, 2, 3, 0, 2, 1, 2, 0, 0, 3, 2, 3, 2, 0, 0, 0, 0, 1, 2, 1, 0, 1, 1, 2, 3, 0, 1, 2, 3, 0, 2, 2, 3, 2, 0, 3, 0, 0, 3, 1, 3, 3, 2, 3, 1, 0, 2, 0, 0, 1, 3, 1, 2, 2, 0, 2, 2, 0, 2, 1, 2, 1, 2, 2, 1, 2, 0, 2, 3, 3, 1, 2, 0, 0, 1, 3, 3, 2, 0, 1, 1, 2, 3, 3, 3, 2, 3, 2, 3, 0, 1, 3, 2, 1, 3, 1, 2, 0, 0, 2, 3, 3, 1, 1, 1, 3, 1, 3, 1, 0, 0, 2, 3, 3, 2, 3, 0, 1, 1, 2, 1, 1, 3, 1], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], [1, 4, 1, 3, 3, 4, 0, 1, 4, 4, 4, 1, 0, 3, 1, 2, 2, 4, 4, 0, 0, 2, 1, 2, 0, 3, 2, 4, 0, 4, 1, 0, 1, 4, 2], [0, 2, 2, 2, 0, 2, 0, 0, 2, 1, 0, 2, 1, 1, 2, 2, 2, 2, 2, 2], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [2, 4, 3, 4, 0, 2, 0, 4, 1, 4, 0, 4, 1, 1, 0, 3, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0], [0, 3, 0, 0, 4, 1, 4, 1, 1, 4, 4, 4, 2, 4, 1, 2, 4, 1, 4, 0, 4, 4, 4, 1, 1, 2, 1, 1, 4, 0, 4, 2, 4, 4, 3, 3, 2, 1, 0, 2, 0, 2, 0, 4, 0, 1, 1, 3, 4, 0, 0, 4, 2, 0, 0], [3, 0, 1, 0, 2, 2, 1, 0, 1, 0, 0, 2, 2, 1, 2, 0, 0, 0], [0], [2, 1, 2, 1, 0, 0, 2, 1], [1, 2, 2, 3, 1, 3, 2, 1, 3, 1, 1, 2, 2, 0, 2, 1, 3], [12], [13, 15, 10, 17, 8, 1], [9, 9, 2, 2, 2, 2], [21, 8, 3, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 6, 10, 2, 6, 0, 0, 6, 2, 10, 2, 3, 5, 1, 2, 1, 34, 34, 39, 3, 143, 39, 35, 20, 19, 18, 17, 2, 55, 18, 1, 8, 17, 1, 6, 6, 4], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in1:{:\\nloopBreak% = 0\\nwhile (in0 + in1) not in \"\"n99\"\".lstrip():{:\\nloopBreak% = 0\\nwhile False:{:\\ns0 = getCharFromString(\"\"<\"\", mod(i1,i2))\\nif ( i2 != max(saveOrd(\"\"p\"\"), i0) and saveChr(i1) == getCharFromString(\"\"%\"\".capitalize()[max(len(saveChr(( ( i2 + ( i1 * int(5.0) ) ) * int(1.0) ))[:i2]), int(0.0)):].capitalize(), divInt(divInt(len(\"\"2\"\"),i0),( int(3.0) * ( i0 + i1 ) ))) ):{:\\ns2 = getCharFromString(s0, saveOrd(saveChr(( min(divInt(i0,i2), i0) * i1 ))))\\ni2 = int(8.0)\\ni2 = mod(int(6.0),i0)\\n:}else:{:\\nloopBreak% = 0\\nfor in1 in getCharFromString(getCharFromString(\"\"k\"\", int(9.0)), int(0.0)):{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = \"\"\"\"\\nb2 = res0\\ni1 = divInt(max(i1, int(7.0)),( saveOrd(\"\"r\"\"[i2:]) + ( ( saveOrd(\"\"i\"\") + mod(i0,saveOrd(in1.capitalize())) ) * i0 ) ))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i0 == max(int(18.0), min(len(saveChr(mod(max(int(6.0), i2),( i0 - i2 )))[:int(6.0)].capitalize()), abs(int(6.0)))):{:\\nb2 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = ((\"\"22\"\"[divInt(( i1 + divInt(( i0 * divInt(int(3.0),mod(int(5.0),( ( int(0.0) - mod(i2,( abs(saveOrd(s0)) - int(8.0) )) ) * divInt(i2,i1) ))) ),int(8.0)) ),saveOrd(in1[min(mod(i2,int(2.0)), int(1.0)):divInt(min(abs(max(mod(abs(divInt(min(i1, int(0.0)),len(s1[( int(5.0) * abs(int(3.0)) ):]))),( i2 * i2 )), mod(saveOrd(getCharFromString(s1, min(int(7.0), int(8.0)))),int(0.0)))), saveOrd(\"\"M\"\")),int(8.0))])):max(int(7.0), i2)] + \"\"2b`\"\") + (getCharFromString(s0, i2) + in0)).capitalize() != getCharFromString(s0[:( min(max(( saveOrd(s1) * i0 ), int(0.0)), int(1.0)) * ( int(3.0) * int(4.0) ) )], abs(int(2.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 1, 1, 0, 2, 0, 2, 1], [1, 0], [0, 2, 0, 2, 2, 0, 2], [0], [0, 0, 0], [], [], [1, 2, 2, 0, 3], [5], [1, 0, 0, 0], [0], [], [0, 0, 1], [], [0], [0], [1, 1, 1, 1, 1], [1, 5, 2, 8, 3], [0, 0, 1, 0, 2], [], [1, 3, 0, 0, 3, 1, 0, 1, 2, 1, 0, 0, 1], [1], [0, 0], [], [0], [2, 5, 3, 2, 3, 3, 0, 1, 3, 5, 4, 0, 5], [0, 0, 0, 0, 1, 0, 1, 1], [0], [4, 0, 4, 0, 1, 3, 3, 0, 3, 3, 2, 1, 0, 3, 1, 2, 0, 3, 2, 0, 3, 0, 0], [2, 1], [], [1, 1, 0], [0, 0, 3, 3, 3, 3, 0, 0], [4, 18, 24, 6], [], [], [2, 27, 5, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 2, 7, 1, 3, 0, 0, 5, 1, 4, 1, 0, 3, 0, 1, 1, 5, 5, 5, 0, 13, 1, 2, 0, 1, 13, 8, 1, 23, 2, 0, 3, 8, 4, 0, 0, 4], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(1.0) != min(i0, i0)\\ns2 = in2.capitalize()\\nb2 = b2\\nin0 = saveChr(min(int(5.0), i1))\\ns2 = in0\\nif b0:{:\\nres0 = True\\nloopBreak% = 0\\nfor in0 in \"\"ES\\\\\\t\\\\\\\\\"\"\":{:\\ns0 = ((s1 + ((\"\"Y\"\"[:int(2.0)] + in0) + (\"\"G\"\" + in2[:divInt(int(8.0),i0)]))) + (in1[i2:int(3.0)] + (s0 + in2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0, 0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 3, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0, 0], [17, 6], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 11, 2, 34, 9, 8, 6, 4, 7, 2, 1, 16, 3, 1, 4, 2, 2, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:saveOrd(in1)]:{:\\ni0 = len((in1 + getCharFromString(in0[abs(int(0.0)):saveOrd(saveChr(mod(i1,int(75.0))))], i2)[int(7.0):len((\"\"R\"\" + s0.rstrip()))])[i2:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += mod(( divInt(int(2.0),i2) + ( min(divInt(i1,( max(( int(1.0) * i0 ), ( abs(int(7.0)) - i0 )) + int(7.0) )), int(9.0)) * i0 ) ),i1)\\nin1 = \"\"G\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 1, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 3, 0], [17, 2], [20], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 4, 1, 8, 0, 0, 3, 4, 2, 1, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[len(in1):] not in \"\"u;C\"\"[int(0.0):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 1, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 0, 1, 2, 1, 1, 2, 1, 2, 0, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 3, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 3, 3, 0, 0, 3, 1, 2, 3, 0, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 3, 0, 0, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 2], [1, 1], [0], [4, 0, 0, 2, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 1], [17], [0], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 2, 5, 2, 1, 2, 2, 0, 0, 17, 17, 14, 0, 62, 16, 16, 9, 7, 7, 2, 1, 15, 3, 1, 3, 2, 1, 1, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1)):{:\\nres0 = ( ( len(\"\"R\"\"[i1:]) != int(0.0) or abs(mod(i1,int(7.0))) \\l divInt(int(5.0),min(i1, ( divInt(( int(7.0) + len(in1) ),( min(max(i0, ( abs(( int(2.0) + i1 )) * divInt(max(int(1.0), i2),int(7.0)) )), int(7.0)) - i1 )) + ( divInt(int(9.0),max(int(8.0), min(i1, divInt(( ( int(5.0) * int(0.0) ) - ( int(4.0) - i2 ) ),int(8.0))))) * i1 ) ))) ) and in0[len(s0[min(min(i2, i0), max(int(59.0), mod(len(saveChr(i1)),int(9.0)))):i0]):] not in (\"\"a\"\" + s2.rstrip()) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [0, 1], [], [], [], [], [], [], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 4, 2, 7, 7, 1, 1, 1, 9, 8, 0, 9, 9], [1, 1, 2, 1, 0, 2, 2], [1], [3, 1, 2, 3, 1, 1, 3, 1, 1, 0, 1, 1, 0, 3, 1, 3, 0, 3, 3, 1, 1, 3, 3, 0, 3, 3, 0, 2, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [4, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4], [0, 2], [0], [1, 5], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], [], [3, 1, 2, 4, 2, 3, 3, 2, 4, 3, 1, 1, 2, 1, 3, 3, 3, 0, 2, 1, 0, 1, 1], [3, 1], [5], [2, 0, 1, 0, 1], [0, 3, 2, 0, 2, 1, 2, 3, 0, 1, 2, 1], [24, 16, 18], [16, 19, 15], [7, 8, 1, 3], [11, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 7, 1, 31, 2, 11, 2, 1, 2, 12, 0, 23, 2, 1, 5, 12, 3, 3, 4, 2], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += saveOrd((\"\"Y\"\" + ((saveChr(int(1.0))[:divInt(min(int(84.0), int(27.0)),min(int(7.0), int(1.0)))] + (\"\"(\"\" + \"\"7\"\")) + \"\"Q\"\"[i1:int(1.0)])[int(1.0):i2].strip((((s1 + \"\"8q1\"\"[:min(int(9.0), min(i1, max(min(int(8.0), int(0.0)), min(max(i0, min(saveOrd(in2), i2)), ( int(9.0) * int(9.0) )))))]) + \"\"&\"\") + \"\"St3p\"\"))[i2:]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1], [2, 1, 1, 1, 2, 0, 1], [1, 1], [1, 0, 0, 0, 0], [], [0], [], [], [1, 1, 0, 3], [0, 1, 1], [0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 0, 0], [4, 0, 4], [1, 2, 3], [0], [1], [1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [8, 2, 2, 9, 4, 1, 4, 7, 5, 6, 5, 6, 6], [2, 2, 1, 2, 0, 2, 2], [0], [2, 1, 3, 2, 1, 1, 0, 1, 1, 0, 2, 3, 0, 1, 3, 3, 2, 3, 3, 0, 3, 3, 1, 1, 0, 0], [1, 1, 0, 1], [4, 4, 0, 2, 4, 4, 0, 1], [1], [1, 0, 1], [1, 4, 2, 5, 5], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1], [], [4, 0, 1, 3, 1, 0, 1, 0, 1, 1, 3, 4, 4, 4, 0, 3, 1, 1, 1, 2, 2, 0], [2, 2, 0, 0], [], [2, 2], [2, 3, 3, 1, 1, 0, 1, 3, 0, 3], [16, 6], [2, 0, 3], [6], [13, 7, 28, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 0, 1, 0, 0, 4, 3, 9, 3, 3, 3, 1, 1, 2, 13, 13, 7, 1, 26, 4, 8, 1, 3, 5, 10, 0, 22, 4, 0, 2, 10, 2, 3, 1, 4], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif False:{:\\ni2 = mod(int(8.0),saveOrd(s1.capitalize()))\\nb1 = divInt(int(22.0),int(94147.0)) \\l i2\\nb1 = int(5.0) \\g int(6.0)\\n:}else:{:\\nif \"\"6\"\".startswith((\"\"*$\"\" + in1)):{:\\nb0 = not ( \"\"ca\"\" in s2 and \"\"Q\"\".startswith(\"\"d\"\") )\\n:}else:{:\\nres0 = i1 \\g ( saveOrd((getCharFromString(getCharFromString(in2, i2), int(5.0)).capitalize() + (\"\"]\"\" + \"\"G\"\"))) - min(abs(mod(saveOrd(\"\"_\"\"),saveOrd(in2[i0:][min(max(int(6.0), int(6.0)), i2):]))), i2) )\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [2], [17], [], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 4, 1, 1, 8, 2, 0, 2, 1, 0, 0, 1, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\nres0 = getCharFromString(in1, len(\"\"5\"\")) not in saveChr(i0)[:int(08.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 9, 6, 9, 5, 6, 3, 2, 9, 3, 3, 9, 1, 6, 6, 8, 7, 8, 8], [2, 2, 0, 0, 2, 0, 1, 2, 1, 1, 0], [], [2, 3, 2, 1, 1, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 2, 2, 3, 0, 2, 2, 3, 0, 0, 1, 3, 2, 3, 1, 0, 0, 0, 3, 0, 1, 0, 2, 2, 3, 1, 3, 1, 3, 1, 0, 1, 3, 2, 1, 2, 1, 2, 1, 1, 3, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [1, 3, 2, 1, 3, 2, 3, 4, 2, 1, 0, 1, 4, 1, 0, 1, 2], [2, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [5, 5, 1, 2, 3, 3, 0], [1, 1, 0, 0, 1], [], [3, 0, 3, 4, 4, 1, 2, 0, 4, 2, 0, 2, 4, 1, 0, 3, 0, 2, 0, 1], [0, 3, 0, 2, 1], [0], [2, 0, 1, 1], [1, 1, 2, 3, 1], [], [17, 0, 13], [9], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 11, 0, 57, 15, 17, 5, 10, 7, 5, 0, 20, 4, 1, 4, 5, 0, 3, 1, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in2 + (getCharFromString(\"\"r\"\".lstrip(), ( max(divInt(int(0.0),int(9.0)), mod(len(s1[( abs(max(len(getCharFromString(s2[abs(divInt(i2,i2)):len(\"\"a\"\".capitalize()[:( mod(saveOrd(in0),i0) * ( divInt(abs(i0),i2) + int(6.0) ) )])], max(mod(min(int(9.0), i0),i1), i2))), max(i1, int(5.0)))) + i1 ):]),mod(divInt(saveOrd((in0 + s0[:int(6.0)])),max(int(3.0), min(int(2.0), i0))),int(93.0)))) + max(mod(int(391.0),mod(int(668.0),( int(7.0) + int(8.0) ))), abs(int(8.0))) )) + \"\"9%n\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 6, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 0, 1, 0, 3, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 0, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 1, 2, 1, 0, 2, 2, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 3, 3, 0, 1, 2, 1, 1, 0, 1, 4, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 2], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 7, 0, 32, 7, 10, 4, 3, 7, 1, 1, 15, 3, 0, 4, 1, 0, 0, 1, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + len(saveChr(len((\"\"4\"\" + in1.capitalize())))) ):( ( divInt(int(5.0),i0) + divInt(min(( i1 * max(abs(i2), int(7.0)) ), i0),max(max(int(7.0), int(1.0)), int(7.0))) ) - int(7.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [2, 1, 1, 2, 0, 2, 1, 2, 1, 0], [2, 0, 2, 1], [0, 2, 2, 0, 2, 0], [0], [0, 0], [], [], [0, 1, 2], [2, 3, 5, 4], [1, 0, 1, 1, 2, 2, 2, 1], [0, 0, 0, 0], [4, 2, 1], [3], [1], [], [0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [5, 6, 8, 7, 5, 4, 6, 6, 6, 1, 1, 8, 1, 9, 6, 3, 1, 5, 8, 0, 5, 7, 9], [1, 0, 0, 2, 2, 1, 1, 2, 2, 1, 1, 1, 0, 2, 2, 2, 0, 1, 0, 0], [], [0, 0, 1, 3, 1, 1, 0, 0, 0, 0, 3, 0, 2, 3, 0, 2, 1, 1, 2, 3, 0, 3, 3, 1, 1, 1, 1, 1, 0, 0, 1, 0, 2, 1, 3, 2, 3, 1, 2, 0, 0, 0, 2, 0, 3, 0, 1, 0, 2, 3, 0, 3, 0, 3, 1, 3, 1], [1, 1, 0, 1, 0, 1, 1, 0], [2, 0, 2, 2, 1, 0, 0, 4, 2, 2, 0, 1, 3], [1, 1, 1], [1, 1, 1, 1, 1], [2, 0, 3, 3, 1, 2, 1, 2, 0, 4, 2, 0, 4], [1, 1, 1, 0, 0, 1, 1], [0], [3, 2, 2, 3, 0, 4, 0, 1, 4, 1, 2, 4, 0, 3, 3, 0, 1, 4, 2, 2, 3, 0, 0, 4, 4, 1, 2, 2, 4, 2, 1, 3, 0, 4, 2, 0, 4, 4, 0], [1, 1, 3, 3, 1, 0, 2, 1, 2, 2], [1, 2], [2, 1, 2, 1, 0, 0, 2, 1, 2], [0, 1, 3, 3, 3, 1, 1], [22], [20, 19, 12], [], [10, 6, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 4, 6, 1, 2, 0, 0, 3, 4, 8, 4, 3, 1, 1, 0, 1, 23, 23, 20, 0, 57, 8, 13, 3, 5, 13, 7, 1, 39, 10, 2, 9, 7, 1, 3, 0, 3], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 == i0:{:\\nb0 = ( int(5.0) \\ge abs(int(6.0)) or int(8.0) != i0 )\\ns2 = ((s0 + saveChr(i2))[:i2][i1:] + in0)\\nloopBreak% = 0\\nfor in0 in \"\"W\"\":{:\\ns1 = saveChr(min(i1, mod(abs(i2),mod(int(7.0),int(5.0)))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile \"\"u\"\".startswith(s2.rstrip()[( abs(i2) - max(min(int(4666.0), int(1.0)), int(1.0)) ):]):{:\\nb1 = ((s1 + \"\"\"\\\\\"\"\") + (s2 + s0)[int(81.0):int(96.0)][:i1].strip()) == saveChr(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif getCharFromString(\"\"#>t\"\", int(3.0)) not in \"\"m\"\"[:i1].capitalize()[mod(int(1.0),min(( saveOrd((in1 + saveChr(int(5.0)))) - mod(i0,i2) ), i2)):][mod(i2,abs(i0)):int(805.0)]:{:\\ns2 = s0[i1:]\\nb2 = ( abs(i0) - min(i0, max(int(7.0), len(in1.capitalize().capitalize()))) ) \\le int(9.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [], [], [], [0, 3], [5, 1], [0, 1, 2, 2], [0, 0], [0, 0], [3], [1], [], [], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 4, 9, 0, 6, 4, 3, 1, 8, 4, 4, 4, 2, 6, 0, 8, 0, 5, 8, 3, 1, 1, 6, 6, 6, 2, 7, 8, 7, 8, 8, 3, 8, 0], [0, 0, 2, 0, 0, 0, 1, 2, 0, 2, 0, 1, 0, 2, 2, 2, 2], [1], [0, 2, 2, 3, 1, 3, 2, 1, 1, 1, 0, 0, 2, 0, 2, 0, 3, 2, 2, 0, 1, 0, 3, 1, 2, 0, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 2, 1, 1, 2, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 2, 0, 1, 0, 2, 2, 1, 2, 1, 1, 2, 0, 0, 1, 3, 0, 0, 2, 3, 3, 0, 2, 1, 0, 2, 1, 0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1], [2, 1, 3, 0, 4, 0, 4, 0, 3, 0, 2], [2, 1, 2, 0, 2, 0, 2, 1, 2, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0], [4, 3, 5, 2, 5, 2, 3, 3, 2, 4], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1], [], [0, 2, 3, 3, 4, 3, 2, 1, 4, 2, 4, 4, 0, 4, 1, 2, 2, 1, 2, 4, 0, 2, 1, 3, 2, 0, 3, 2, 2, 2, 4, 0, 1, 0, 1, 3, 0, 2, 3, 3, 1, 4, 3, 4, 0, 1, 0, 1, 0, 1], [3, 3, 2, 3, 3, 2, 2, 3, 0], [2, 3, 1, 3, 3], [1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 2, 1], [1, 3, 2, 2, 3, 0, 0, 2, 1, 1, 1, 0, 1, 2, 0, 1, 1, 0], [21, 8, 20, 18, 5], [14, 13, 22, 1, 18, 24, 2], [8, 2, 9, 6], [29, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 1, 4, 1, 2, 1, 1, 0, 0, 34, 34, 17, 0, 77, 23, 11, 10, 13, 10, 18, 0, 50, 9, 5, 12, 18, 5, 7, 4, 2], "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( i0 != ( divInt(abs(int(0.0)),max(mod(int(4.0),int(9.0)), int(06.0))) * i0 ) or in1 in (((\"\"o\"\"[i2:( i0 - ( i0 * len(in0.rstrip().capitalize()[( mod(i0,int(43.0)) + i1 ):].lstrip(\"\"^\"\".lstrip(\"\"8\"\"[:min(int(1.0), mod(i2,mod(int(8.0),saveOrd(in2.capitalize()[mod(int(44.0),min(( int(4.0) * saveOrd(\"\"2\"\"[mod(mod(int(26.0),int(08.0)),( int(0.0) + int(5.0) )):min(mod(int(8.0),int(3.0)), int(1.0))]) ), int(1.0))):]))))][int(6.0):int(6.0)]))) ) )] + (s2[( i0 * int(6.0) ):] + (in2.capitalize()[i2:][divInt(divInt(int(2.0),( int(7.0) - int(8.0) )),mod(i0,i1)):int(7.0)][:len(\"\"?\"\")] + s2))).strip() + \"\"VI9\"\") + (in0 + ((\"\"n\"\" + (getCharFromString(in0, i0) + \"\"w\"\").lstrip(s2)) + \"\"bUs6S\"\")[:i2]))[:( min(abs(i2), ( int(8838.0) * i2 )) + divInt(int(0.0),i2) )] )\\nres0 = in1 in \"\"ycF\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 0, 2, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0, 2, 0, 0, 1, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 3, 1, 0, 1, 3, 3, 2, 3, 1, 0, 0, 0, 0, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2, 0, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 2, 4, 4, 3, 0, 4], [1, 1], [0], [2, 1, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [10], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 17, 17, 18, 1, 65, 18, 14, 8, 10, 7, 2, 1, 15, 2, 0, 4, 2, 1, 1, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(s2):]:{:\\nres0 = in1[max(i0, int(0.0)):] not in in1\\nloopBreak% = 0\\nwhile ( abs(mod(i2,int(7.0))) != mod(int(5.0),min(i2, ( divInt(( len(in0[i0:divInt(min(( i1 + ( divInt(( int(7.0) + i2 ),divInt(max(int(4.0), i1),int(1.0))) * int(7.0) ) ), i2),i0)]) - mod(int(7.0),abs(int(9.0))) ),max(i0, ( ( ( int(8.0) + int(5.0) ) * divInt(int(0.0),i2) ) - int(4.0) ))) - divInt(i0,abs(int(8.0))) ))) or ( s0[i2:int(59.0)].endswith(getCharFromString((\"\"k\"\" + saveChr(min(abs(divInt(max(int(9.0), i0),i0)), i1))), i0)) and True ) ):{:\\ni1 = saveOrd(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 3, 0, 4], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 32, 8, 8, 5, 3, 6, 2, 1, 15, 3, 2, 5, 2, 1, 0, 0, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[saveOrd(in1[len(in1):i0][i2:]):]:{:\\nres0 = in0[:abs(int(0.0))].rstrip()[i2:int(7.0)] not in saveChr(mod(int(1.0),min(i0, ( ( divInt(int(7.0),i1) + ( len((\"\"R;\"\" + s0.lstrip())) + divInt(i2,max(max(( int(2.0) * i1 ), ( abs(int(1.0)) - i2 )), int(7.0))) ) ) + int(7.0) ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [0, 4, 5], [2, 0, 0, 1], [], [0, 3, 3, 0, 3, 2, 2, 2, 0, 1, 3, 0, 1], [1, 0, 0], [0, 1, 3, 4], [0, 1], [0], [5, 3, 0, 5], [0, 1, 1, 1], [], [4, 3, 3, 2, 0, 1, 0, 3, 2, 0, 1, 1], [0], [], [1, 1], [2, 2, 2, 2], [], [], [6, 6, 6, 0], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 4, 2, 1, 4, 4, 0, 12, 1, 0, 2, 4, 0, 0, 4, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(((in0[:i2] + \"\"66\"\") + s0), min(max(i0, len((in2[:divInt(( ( i0 + int(0.0) ) - saveOrd(\"\"6\"\") ),i1)] + \"\"0\"\"))), int(45.0)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 9, 2, 3, 5, 8, 0, 6, 1, 0, 6, 6, 8, 9, 3, 3, 8], [2, 1, 2, 1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0], [3, 0, 2, 3, 2, 2, 1, 3, 2, 2, 3, 1, 3, 3, 2, 0, 0, 0, 2, 3, 1, 1, 1, 0, 0, 0, 3, 1, 3, 2, 2, 3, 1, 1, 3, 0, 3, 3, 2, 0, 2, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [2, 4, 4, 3, 3, 1, 1, 1, 0, 0, 0, 4, 1], [0, 2, 1, 0], [1, 1, 0, 0, 1, 1, 0], [2, 4, 4, 3], [0, 0, 0, 1, 1], [], [3, 1, 0, 3, 0, 3, 2, 4, 4, 4, 2, 0, 4, 2, 0, 1], [1, 1, 3, 1], [3], [2, 1, 2], [2, 0, 0, 2, 2], [17, 22], [], [3, 6, 7], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 12, 2, 45, 11, 13, 4, 7, 4, 5, 0, 16, 4, 1, 3, 5, 2, 0, 3, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i1)\\ni2 = mod(saveOrd((\"\"3RW6\"\" + s2)),( mod(int(09.0),saveOrd((in1 + (saveChr(divInt(divInt(len(saveChr(int(2.0))),len(in1[:max(mod(i1,i0), i1)].lstrip(saveChr(( max(int(3.0), int(5.0)) + int(8.0) ))))),i0))[i0:] + in0[i0:])))) * max(int(0610.0), min(( ( min(int(66.0), int(89.0)) - min(i1, saveOrd(\"\"7\"\")) ) + max(mod(i0,divInt(int(3.0),int(3.0))), i1) ), int(8.0))) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [0], [0], [], [], [1, 3], [5], [1], [0], [], [0], [], [], [], [0, 0, 1, 1, 1, 0, 0, 1], [3, 3, 4, 2, 3, 4, 4, 1], [0, 0], [], [1, 2, 1, 3, 2, 0, 2, 2, 3, 0, 1, 3, 1], [0, 1, 0, 0], [4, 2, 4], [0, 0, 1], [1], [2], [1, 0, 0, 1], [], [4, 3, 4, 0, 1, 2, 1], [3, 0], [2], [1], [1, 1, 2, 2], [], [1, 13], [2, 2], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 2, 0, 13, 4, 3, 3, 1, 1, 4, 0, 7, 2, 1, 1, 4, 0, 2, 2, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(334.0) != ( int(2.0) + saveOrd((getCharFromString(s2, mod(i0,( ( abs(i0) + int(3.0) ) - saveOrd(\"\"b\"\") ))) + \"\"n22\"\"[:int(441.0)]).strip()) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 1, 0, 7, 3, 1], [1, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 2, 2], [1], [2, 2, 2, 2, 3, 0, 0, 2, 2, 3, 2, 1, 1, 1, 0, 0, 2, 0, 3, 0, 3, 0, 3, 3, 0, 3, 2, 3, 2, 2, 2, 3, 0, 0, 2, 2, 3, 3, 1, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 2, 0, 3, 2, 1, 1, 3, 3, 2], [1, 2, 2, 1, 2, 0, 1], [0, 1, 0, 1, 1, 0, 0, 1], [0, 4, 3, 0, 1], [0, 0, 0, 0, 1], [0], [4, 4, 0, 4, 1, 0, 0, 4, 0], [3, 3, 0, 0], [5, 2], [], [3, 2, 1, 2, 2], [], [16], [6, 3, 5], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 14, 1, 44, 14, 11, 7, 8, 5, 5, 1, 9, 4, 2, 0, 5, 0, 1, 3, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1.strip().strip(getCharFromString(\"\")6q35\"\", divInt(mod(divInt(( min(i1, i0) - ( mod(min(( int(1.0) * int(1.0) ), int(0.0)),i0) * i2 ) ),( i0 - abs(i0) )),min(i0, len(in0))),abs(i2)))):{:\\ni0 *= max(( max(mod(divInt(( len(s0) + i0 ),i0),divInt(mod(len(getCharFromString(s1, abs(int(7.0)))),i1),int(3.0))), int(1.0)) - i2 ), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0, 1], [], [], [], [], [0, 2], [3], [0, 0, 1], [0], [], [3, 0], [0], [], [], [1], [1], [0, 0], [], [3, 1, 0, 0], [], [4], [], [], [5, 1], [1], [], [1, 0, 0], [], [], [], [2], [], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( b2 and saveOrd(\"\"8\"\") \\ge int(1.0) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [1, 0, 1], [4, 0, 1], [1, 2], [1], [3, 3, 2, 1, 3, 3, 1, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 4, 2, 4], [0], [1, 1, 1, 0, 0, 0, 1, 0], [2], [1], [], [0, 1], [], [], [], [0], [25], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 3, 3, 1, 1, 8, 1, 5, 1, 1, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni1 += max(max(mod(int(4.0),saveOrd(s2)), abs(int(01.0))), saveOrd(\"\"Z\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 7, 7, 8, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 0, 1, 3, 3, 1, 3, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 0, 0, 2, 0, 2, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 3, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 0, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [1, 4, 0, 1, 0, 4, 2, 4, 2, 1, 4, 3, 2, 4, 0, 1, 0], [0, 2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 3, 0], [5, 10], [], [], [20, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 4, 1, 5, 1, 0, 0, 4, 2, 0, 0, 2], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"F\"\":{:\\nb2 = getCharFromString(in2, len(\"\";+K\"\")) not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [2], [0, 2], [], [0], [], [], [2], [1], [2, 2, 1], [0], [0, 2], [2], [], [], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [3, 8, 7, 3, 5, 1, 6, 7, 0, 0, 7, 4, 5, 5, 1], [1, 0, 0, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1], [], [3, 2, 0, 1, 1, 2, 0, 2, 3, 3, 3, 1, 2, 1, 2, 1, 3, 3, 1, 2, 0, 1, 0, 2, 0, 1, 0, 0, 0, 2, 0, 1, 0, 2, 3, 0, 2, 3, 0, 0, 3, 3, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 0], [0, 1, 2, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 0], [0, 1, 1, 0, 0], [0, 0, 0, 0, 0], [1, 1, 3, 5, 3, 2], [0, 1, 1], [], [2, 2, 4, 0, 2, 0, 1, 1], [3], [1], [1, 1, 1], [3, 3, 2], [], [], [2], [8, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 15, 15, 6, 0, 27, 7, 6, 2, 5, 2, 3, 0, 8, 1, 1, 3, 3, 0, 0, 1, 2], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s1.rstrip()[:min(divInt(i1,int(3.0)), int(87.0))][:divInt(i0,( max(abs(max(int(35.0), ( int(1.0) + divInt(int(6.0),min(abs(int(7.0)), divInt(i0,int(0.0)))) ))), i1) - divInt(i1,int(074551.0)) ))] in s1[:i2]:{:\\nb2 = \"\"%*\"\" == \"\"2\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [1], [], [0], [], [], [], [2, 5], [2, 0, 1, 0, 2, 0], [0], [5], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 2, 7, 4, 8, 2, 4, 4], [2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [1], [3, 0, 2, 1, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [3, 1, 3, 4], [1], [], [0, 1, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0], [3, 2, 2, 3, 0, 0, 2, 1], [0, 5], [1, 1, 1], [2], [], [24], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 2, 1, 0, 7, 3, 1, 1, 1, 0, 0, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in0.endswith(\"\"9\"\"):{:\\ni2 += len(s1.capitalize().capitalize()[:i0].lstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0], [1, 1], [0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1], [1, 9, 5, 3, 8, 3, 0, 0], [1, 2, 2, 1, 1, 0, 1, 2, 0, 0, 0], [1, 0], [1, 0, 0, 0, 3, 2, 2, 0, 3, 3, 1, 3, 1, 0, 0, 2, 3, 1, 1, 0, 2, 0, 1, 0, 1], [0, 1, 0, 0], [1, 2, 3, 3, 0], [1, 0, 1, 0], [0], [2, 4], [1, 1], [0], [2, 2, 4, 0, 2, 4, 2, 2, 1, 2, 2, 1], [2, 0], [], [2, 0, 2, 1, 0, 1, 2], [2, 3], [], [], [5], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 11, 2, 25, 4, 5, 4, 1, 2, 2, 1, 12, 2, 0, 7, 2, 0, 0, 1, 1], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(1.0)\\nloopBreak% = 0\\nfor s2 in in1.capitalize()[i2:i2][i1:]:{:\\ni1 = max(( divInt(i0,abs(len(getCharFromString(\"\"5\"\"[int(9.0):len(\"\"^\"\"[int(5.0):][:i1])][:i2], ( min(int(3.0), int(8.0)) + i0 ))[( i0 - int(3.0) ):]))) + i0 ), int(00.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [2, 0, 0, 0, 2, 1], [2, 2], [0, 0, 1, 1], [], [0, 0, 0], [], [], [3, 3], [0, 5, 2, 1], [1, 0, 1, 1, 1], [0, 0, 0, 0], [], [2], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1], [6, 6, 3, 4, 9, 9, 4, 1, 7, 3, 3, 6, 1, 0, 8, 6, 3], [1, 2, 2, 1, 2, 2, 0, 0, 1, 1, 0, 2, 0, 1, 2, 1, 1], [1, 1], [2, 1, 1, 0, 0, 3, 0, 0, 2, 0, 3, 2, 3, 0, 3, 3, 1, 2, 3, 2, 2, 0, 2, 2, 1, 1, 2, 0, 3, 3, 2, 1, 0, 2, 3, 2, 3, 2, 3, 0, 3, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 3, 3, 2, 4, 0, 1, 4, 2, 3, 2, 2], [0, 1, 0, 1, 1, 1, 2, 2, 0, 0, 1], [0, 0, 0, 1, 1, 1], [2, 2, 4], [0, 1, 1], [], [0, 1, 2, 4, 1, 4, 4, 4, 4, 0, 0], [3, 0, 2, 1, 0], [4], [2], [1, 3, 2], [], [24], [1], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 0, 3, 0, 0, 2, 4, 5, 4, 0, 1, 0, 0, 0, 17, 17, 17, 2, 54, 15, 12, 11, 6, 3, 3, 0, 11, 5, 1, 1, 3, 0, 1, 1, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( int(6.0) + int(6.0) ) \\l i1:{:\\nres0 = not i2 != min(i2, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = ( i2 - len(s2) ) == divInt(len(\"\"y>\"\"),i2)\\ni0 += abs(saveOrd(\"\"1\"\".rstrip(getCharFromString(saveChr(int(3.0)).capitalize(), divInt(min(( divInt(i0,mod(( int(4.0) - int(9.0) ),mod(i1,max(saveOrd(getCharFromString(s2, ( int(9.0) - i1 ))), ( abs(( len(in1) - ( abs(i0) * abs(i2) ) )) * i0 ))))) + i1 ), ( int(4.0) + mod(int(1.0),i2) )),int(7.0))))[i1:]))\\nloopBreak% = 0\\nwhile int(3.0) \\g int(36108.0):{:\\ni1 -= int(63.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [1, 2, 0, 1], [2], [1, 2, 0], [], [0], [], [], [0, 3], [5], [1, 2], [0], [3], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1], [5, 6, 2, 3, 2, 6, 8, 4, 8, 9, 4, 9, 4, 9, 2], [0, 0, 0, 0, 2, 1, 1, 0], [0, 0], [1, 3, 3, 3, 2, 2, 3, 1, 3, 2, 2, 0, 2, 2, 2, 1, 2, 3, 1, 2, 1, 3, 1, 3, 1, 3, 3, 0, 1, 0, 0, 0, 0, 1, 2, 2, 3, 1, 1, 2, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 4, 0, 2, 1, 4, 4, 3, 3, 4], [2, 1, 2, 0, 1, 1, 2, 2, 1], [0, 0, 1], [4, 4, 4, 4, 3, 3, 5, 3], [0, 1], [], [4, 0, 0, 2, 0, 0, 0, 2, 0, 1, 0], [0], [], [0, 2], [3, 2], [], [], [2], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 15, 15, 8, 1, 42, 12, 11, 9, 3, 8, 2, 0, 11, 1, 0, 2, 2, 0, 0, 1, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(5.0)\\nloopBreak% = 0\\nwhile max(min(min(( ( saveOrd(getCharFromString(in1, int(6.0))) * min(( ( i0 - ( divInt(( int(2.0) * ( abs(int(3.0)) + divInt(int(2.0),max(int(6.0), saveOrd(in1))) ) ),int(8.0)) - saveOrd(in1[len(in1):i0]) ) ) - int(4.0) ), i0) ) * i2 ), i1), i1), int(8.0)) != mod(( len(in0) * int(94.0) ),int(9.0)):{:\\nin0 = in2[( i0 - int(492.0) ):]\\nb0 = \"\"\"2\"\" != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 0, 1, 9, 8, 2, 1, 6, 9, 0, 2, 0, 5], [0, 2, 0, 1, 0, 1, 2, 2, 1, 1, 1, 0], [1, 0], [3, 1, 2, 3, 0, 2, 3, 1, 3, 2, 2, 0, 0, 2, 1, 2, 3, 2, 2, 1, 3, 0, 3, 0, 2, 1, 1, 2, 2, 1, 0, 1, 1, 3, 3, 2, 2, 1, 0, 3, 0, 0, 1, 2, 1, 3, 3, 0, 3, 0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 4, 3, 0, 0, 4, 3, 3, 0, 2, 4, 0, 2], [1, 0, 0, 0, 1, 2], [1, 1, 0, 1, 1, 1, 1, 0, 1], [1, 2], [1, 1, 0, 0, 0, 0, 1], [], [2, 4, 0, 2, 0, 1, 2, 4, 1, 2, 4, 2, 1], [3, 0, 1], [2], [0, 2, 0, 2, 2], [1, 2, 2, 0, 3, 2, 3], [14], [4], [9, 7, 8], [16, 19]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 12, 1, 50, 14, 13, 6, 9, 2, 7, 0, 13, 3, 1, 5, 7, 1, 1, 3, 2], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= min(int(4.0), ( saveOrd(s1.strip()[i2:mod(len(s2[int(4.0):]),min(( mod(i0,i1) + ( int(0.0) + divInt(min(mod(mod(int(1.0),saveOrd(\"\"e\"\")),i0), len(getCharFromString(\"\"9\"\", i1)[mod(int(9.0),int(8.0)):( mod(int(2.0),i2) + int(1.0) )])),int(6.0)) ) ), len(saveChr(min(( divInt(int(9.0),i2) - abs(i1) ), i1))[int(0.0):])))]) * mod(int(205.0),saveOrd(\"\"7O-8:\"\"[min(i1, abs(i0)):])) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [], [0], [], [], [3], [], [0, 2], [], [1], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 4, 8, 2, 8, 6, 8, 2, 8, 3, 8, 9, 2, 7, 8, 9, 7, 1, 2, 3, 0, 8, 3, 8], [2, 1, 2, 1, 2, 0, 2, 2, 0, 2, 0, 2, 1, 0, 1, 1, 1, 0, 0, 1, 2], [0], [0, 3, 3, 3, 3, 0, 3, 0, 3, 3, 2, 0, 2, 3, 3, 0, 1, 2, 0, 3, 3, 0, 3, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1, 1, 3, 0, 2, 3, 1, 0, 1, 2, 0, 2, 2, 3, 3, 1, 3, 1, 1, 1, 2, 1, 3, 2, 1, 1, 3, 3, 3, 1, 1, 2, 2, 3, 2, 0, 3, 1, 1, 3, 3, 0, 2, 2, 0, 3, 0, 2, 0, 0, 3, 1, 2, 2, 2, 0, 0, 3, 2, 3, 1, 3, 2, 0, 1, 2, 3, 3, 0, 3, 3, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 4, 1, 1, 0, 3, 0, 0, 1, 1, 2, 3, 1, 0, 4, 2, 3, 3, 0, 0, 0, 1, 1, 3, 2, 4, 4, 4, 4, 1, 4, 1, 4, 2, 4, 4], [1, 1, 0, 1, 1, 1, 1, 2, 1, 2, 1, 0, 1, 1, 2, 2, 0], [0, 0, 1, 0, 1, 0, 0, 1], [0, 5, 5, 0, 3, 1, 5, 3, 4, 5, 5, 1, 5, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1], [], [0, 3, 0, 2, 3, 3, 0, 0, 2, 0, 3, 1, 4, 1, 0, 0, 0, 4, 2, 0, 2, 2, 2, 1, 4, 2, 0, 1, 1, 1, 3, 4, 0, 4, 0, 0, 0, 3, 1, 3, 1, 2, 0, 0], [3, 1, 0, 0, 2], [3], [1, 0, 1, 2, 1, 2, 0, 1], [0, 3, 3, 2, 3, 0, 3, 3], [3, 5], [], [8], [28, 27, 27, 10, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 24, 24, 21, 1, 104, 25, 37, 17, 8, 16, 8, 0, 44, 5, 1, 8, 8, 2, 0, 1, 5], "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\nres0 = not s0 not in (in2 + ((in2 + s0) + in0[max(min(saveOrd((\"\"D\"\" + \"\"]\"\".lstrip(s1))), max(i2, max(i1, min(len(in2), ( i2 - ( min(min(i0, int(1.0)), ( i2 - max(max(i2, abs(len(in0))), ( int(4.0) + divInt(max(( int(8.0) - min(( int(2.0) - int(8.0) ), saveOrd(saveChr(i0))) ), divInt(abs(int(6.0)),i2)),int(8.0)) )) )) - mod(i0,( ( len(in1[:len(\"\"\\\\\\\\\"\"[int(2.0):][:min(int(8.0), int(3.0))][int(8.0):])]) - ( int(9.0) * min(( int(2.0) - int(7.0) ), min(max(max(int(8.0), int(9.0)), divInt(mod(len(getCharFromString(in2[( i2 * abs(int(7.0)) ):int(1.0)], saveOrd(\"\"8\"\"))),saveOrd(\"\"\\\\\\\\\"\")),i1)), ( ( i0 - saveOrd(\"\"F\"\") ) + i1 ))) ) ) - ( i1 - i1 ) )) ) ))))), saveOrd((getCharFromString(in2, int(2.0)) + s1.capitalize()))):( divInt(( i0 * i0 ),max(divInt(saveOrd(in2),int(3.0)), max(mod(i1,int(0.0)), ( saveOrd(s1) * abs(i2) )))) + saveOrd((\"\"\"\\\\\"\"\" + (\"\"-\"\" + s0[:saveOrd(s1)]))) )])[:int(838.0)])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [0, 0, 1], [], [1], [], [], [], [2, 3, 2], [], [], [8, 8], [31]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 1, 0, 0, 0, 3, 0, 0, 2, 1], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"8`8\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [2, 0, 0, 2, 0, 1], [1, 0], [1, 2, 2, 2], [0], [0, 0, 0], [], [], [], [2], [1], [0], [], [], [], [], [0], [1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [8, 9, 3, 8, 9, 7, 8, 0, 7, 3, 8, 8, 4, 5, 4, 1, 5, 0, 3, 1, 7, 4, 1, 0, 3, 6, 9, 5, 6, 4, 0, 4, 4, 0], [1, 2, 2, 2, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 1, 2, 0, 1, 0, 2], [1], [2, 0, 0, 0, 1, 2, 2, 0, 2, 1, 1, 1, 3, 1, 0, 2, 2, 2, 0, 0, 1, 1, 2, 3, 0, 0, 0, 2, 2, 3, 2, 0, 0, 1, 2, 1, 2, 1, 3, 3, 1, 0, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 2, 3, 3, 2, 1, 0, 3, 0, 3, 1, 2, 3, 3, 2, 1, 2, 0, 1, 1, 0, 1, 3, 0, 0, 1, 2, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [1, 0, 4, 4, 2, 2, 1, 1, 0, 0, 0, 2, 3, 2, 4, 1], [0, 0, 2, 0, 0, 0, 1, 2, 1], [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [1, 3, 1, 1, 4, 5, 5, 3, 0, 4, 3], [0, 1, 0, 1, 0, 1, 1, 1, 1], [0], [2, 1, 1, 3, 3, 0, 3, 4, 2, 1, 2, 2, 2, 4, 2, 4, 2, 0, 2, 1, 1, 2, 2, 3, 2, 4, 1, 0, 0, 3, 0, 3, 0, 2, 0], [2, 3, 1, 1], [4], [2, 1, 1, 1, 1, 2, 0, 1, 0, 1, 0, 2], [1, 2, 2, 3, 2, 2, 3, 3, 1], [], [0, 19], [6, 0, 1, 0], [3, 10, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 3, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 34, 34, 24, 1, 80, 20, 16, 9, 12, 11, 9, 1, 35, 4, 1, 12, 9, 0, 2, 4, 3], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( i1 + i2 ) == i2:{:\\ni2 += int(8.0)\\n:}\\ns1 = \"\"a6\"\"[mod(( i2 * mod(int(938.0),int(9.0)) ),int(7807.0)):]\\nloopBreak% = 0\\nfor in0 in \"\"0\"\":{:\\ns1 = ((s1 + (\"\"10\"\"[:max(int(3.0), i0)].capitalize() + saveChr(( ( ( i1 + i0 ) + int(8.0) ) + int(8.0) ))[mod(min(i1, i0),i1):].rstrip(in1[divInt(divInt(saveOrd(\"\"\"\\\\\"\"\"[:( i0 - i0 )]),int(4.0)),mod(int(5.0),( int(4.0) * saveOrd(\"\"*\"\") ))):abs(int(1.0))])[:i0][:abs(i1)][:( int(503.0) - i0 )])) + (saveChr(i2)[int(17.0):max(max(min(mod(min(min(divInt(int(4.0),i0), abs(i1)), len(\"\"t\"\")),int(1.0)), mod(abs(saveOrd(in2)),mod(int(0.0),mod(i2,int(3.0))))), int(6.0)), i0)] + in2)[:int(9.0)][max(i1, i0):int(56.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = (s0 + (in1 + in0[mod(int(40440.0),i2):]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 1, 0], [0], [2, 0, 2], [0], [0], [], [], [1], [], [2], [], [3], [], [], [], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 1, 6, 1, 8, 7, 7, 3, 6], [1, 0, 2, 2, 2, 0], [1], [1, 0, 1, 2, 0, 2, 3, 2, 3, 1, 3, 2, 3, 0, 2, 0, 1, 1, 3, 1, 2, 2, 2, 0, 1, 3, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0], [1, 3, 3, 1, 4, 3], [1, 1, 0, 2, 1], [1, 1, 1], [1, 0, 2, 1, 1, 5, 2, 1, 4, 1, 0, 0], [1, 1, 1, 0, 1], [0], [0, 3, 3, 2, 0, 4, 4, 3, 1, 3, 2, 1, 2, 2, 0, 1, 0, 2, 2, 0, 0, 1, 0, 0, 0], [2, 3], [1], [1, 1, 2, 0, 2, 0], [3, 0, 1, 1, 2], [9], [21, 25], [2], [10]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 6, 0, 28, 8, 6, 5, 3, 12, 5, 1, 25, 2, 1, 6, 5, 1, 2, 1, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s0:{:\\ns2 = ((s1[:int(891.0)] + (\"\"\"\\\\\"\"\" + (\"\"J\"\"[:i1] + s1[int(6.0):mod(i0,( max(mod(len(\"\"v\"\"),int(1.0)), len(in2)) - ( max(i2, ( i2 - int(8.0) )) + int(7.0) ) ))][saveOrd(s2[int(7.0):( mod(( i2 * int(3.0) ),len(s1)) - int(6.0) )][i0:]):])).rstrip().capitalize()) + \"\"z2\"\")\\nb1 = in1 != s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = s0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [9, 7, 5, 3, 0, 2, 9, 0, 7, 6, 5, 9, 3], [2, 2, 2, 1, 2, 0, 1, 1, 2, 0, 1, 2, 0, 2, 2, 2, 0, 0, 0, 1, 2], [0], [1, 3, 2, 0, 2, 3, 2, 2, 2, 1, 0, 1, 0, 1, 3, 1, 3, 1, 0, 2, 3, 3, 3, 2, 0, 3, 0, 0, 1, 0, 2, 1, 2, 2, 2, 0, 2, 0, 0, 2, 1, 1, 0, 0, 0, 3, 0, 2, 2, 3, 2, 2, 0, 0, 3, 0, 2, 0, 2, 3, 3, 3, 0, 3, 3, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [2, 3, 2, 3, 2, 1, 0, 0, 0, 2, 2, 1, 3, 4, 4, 0], [1, 0, 2, 0, 0, 0, 2, 0, 1, 1, 0, 2], [0, 0, 1, 1, 0, 0, 1], [3, 0, 2, 5, 0, 5, 1, 3, 4], [1, 1], [], [3, 4, 4, 4, 4, 0, 0, 2, 2, 2, 1, 2, 2, 3, 2, 1, 4, 4, 0, 0, 4, 4, 0, 3, 0, 0, 0], [3, 0, 3, 0, 1, 1, 3, 3], [4, 5, 3, 1], [1, 2, 0, 1, 0, 2], [1, 1], [], [18, 24], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 21, 0, 67, 19, 16, 12, 7, 9, 2, 0, 27, 8, 4, 6, 2, 0, 2, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (getCharFromString(getCharFromString(s0, int(9.0)).strip(s2), abs(( i2 - ( len(\"\"s\"\"[( ( divInt(int(7.0),i2) + int(5.0) ) * i2 ):int(3.0)][abs(int(0.0)):][:len((\"\"y\"\"[int(29.0):] + saveChr(i1))[divInt(abs(max(min(( i2 + min(i0, i1) ), int(0.0)), i1)),( int(7.0) + mod(( ( i2 + ( i0 * i1 ) ) + ( int(6.0) - int(5.0) ) ),i2) )):i0][:i2])]) - min(i2, mod(divInt(abs(divInt(( i2 + i0 ),abs(i0))),( i0 * mod(max(len(saveChr(saveOrd(in2))), i1),saveOrd(s0)) )),min(int(9.0), i2))) ) ))).rstrip(in2.rstrip().lstrip((s1 + in0))) + in1)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 2, 0, 2, 2, 2, 0, 0, 2, 2, 2, 1, 0, 2, 1, 2, 1, 2, 0, 0, 2, 0, 2, 2, 1, 1, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 0], [2, 1, 0, 2, 1, 0, 1, 1, 2, 0, 0, 1, 1, 1, 0], [0, 2, 1, 2, 2, 0, 1, 0, 1, 0, 2, 1, 1, 1, 0, 0, 2, 1, 0, 2, 1, 1, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [1, 3, 2, 1, 2, 0, 0, 2, 2], [3, 2, 3, 5, 0, 3, 4, 1], [2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 0, 1, 0, 1, 0, 1, 2, 0, 0, 2, 0, 2, 1], [0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 2, 2, 0, 1, 0, 5, 3], [1, 3, 2, 3, 1, 0], [1, 0], [1, 1], [1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 4, 5, 9, 2, 1, 9, 2, 9, 3, 6, 5, 0, 1, 9, 6, 2, 0, 9, 7, 1, 2, 9, 2, 0, 2, 1, 8, 4, 4, 3, 9, 7, 1, 4, 8, 6, 5, 6, 5, 6, 1, 7, 0, 3, 9, 9, 5, 9, 7, 7, 1, 8, 0, 5, 6, 0, 4, 5, 5, 9, 1, 0, 1, 9, 6, 2, 2, 6, 1, 2, 8, 5, 2, 9, 4, 5, 8, 1, 3, 0, 3, 1, 7, 9, 4, 5, 6, 6, 4, 6, 4, 9, 6, 0, 7, 4, 8, 7, 2, 3, 5, 0, 8, 2, 4, 9, 2, 6, 7, 9, 4, 9, 6, 1, 9, 2, 6, 1, 3, 8, 8, 6, 7, 4, 3], [1, 0, 2, 1, 2, 2, 2, 1, 1, 0, 1, 0, 1, 2, 0, 2, 2, 0, 0, 1, 2, 1, 0, 2, 2, 1, 2, 0, 2, 0, 1, 2, 2, 1, 1, 0, 0, 1, 1, 0, 2, 1, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 2, 2, 0, 2, 0, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 0, 0, 2, 2, 1, 0, 2, 2, 2, 1, 2, 1, 0, 1, 1, 1, 1, 2, 0, 2, 0, 0, 1, 2, 1, 2, 1, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 1, 1, 2, 2, 0, 0, 0, 2, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 3, 0, 3, 0, 3, 0, 3, 2, 2, 0, 1, 3, 0, 3, 3, 0, 2, 2, 1, 2, 2, 0, 0, 2, 2, 3, 3, 2, 1, 3, 0, 0, 1, 3, 0, 0, 0, 2, 3, 1, 0, 2, 0, 3, 0, 3, 0, 0, 2, 3, 2, 0, 3, 1, 1, 0, 3, 0, 3, 3, 3, 2, 1, 0, 3, 3, 0, 0, 2, 2, 2, 1, 2, 3, 0, 0, 0, 3, 1, 0, 1, 2, 2, 3, 2, 3, 1, 2, 1, 3, 1, 2, 0, 1, 1, 2, 1, 3, 0, 2, 1, 1, 2, 1, 1, 1, 1, 1, 3, 0, 2, 2, 3, 3, 3, 2, 3, 3, 2, 2, 3, 3, 1, 1, 0, 3, 0, 2, 2, 0, 0, 0, 3, 0, 1, 0, 3, 3, 3, 3, 1, 0, 2, 1, 2, 3, 3, 0, 3, 1, 2, 1, 0, 0, 3, 3, 1, 2, 1, 1, 1, 3, 1, 3, 1, 0, 3, 3, 3, 2, 3, 0, 1, 0, 2, 1, 1, 1, 3, 3, 0, 0, 2, 0, 3, 3, 2, 3, 2, 2, 2, 0, 0, 3, 2, 1, 1, 0, 2, 3, 3, 0, 0, 2, 0, 3, 2, 3, 3, 2, 1, 2, 0, 0, 1, 2, 0, 1, 1, 0, 3, 3, 2, 2, 1, 3, 3, 0, 0, 1, 2, 3, 0, 1, 3, 0, 1, 3, 1, 3, 1, 0, 1, 3, 3, 1, 0, 1, 2, 0, 1, 3, 3, 3, 2, 1, 2, 3, 0, 1, 2, 1, 1, 3, 1, 0, 3, 2, 2, 2, 2, 2, 2, 3, 3, 0, 2, 3, 0, 1, 2, 2, 0, 0, 0, 3, 0, 2, 3, 3, 0, 2, 1, 1, 1, 0, 1, 2, 3, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 3, 0, 2, 2, 2, 0, 2, 0, 3, 1, 2, 1, 1, 1, 3, 0, 1, 1, 0, 1, 3, 3, 3, 3, 1, 2, 2, 0, 0, 0, 3, 2, 0, 0, 1, 0, 1, 2, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 1, 0, 0, 0, 1, 2, 2, 2, 2, 1, 3, 0, 0, 3, 2, 1, 0, 3, 1, 1, 3, 3, 1, 2, 1, 0, 0, 3, 2, 3, 1, 1, 2, 3, 2, 0, 3, 0, 0, 3, 0, 3, 1, 2, 1, 1, 3, 3, 3, 3, 1, 1, 1, 2, 2, 3, 1, 3, 2, 3, 2, 2, 2, 0, 1, 3, 2, 1, 0, 3, 2, 0, 3, 0, 3, 0, 3, 1, 2, 0, 1, 1, 3, 1, 3, 1, 3, 1, 2, 2, 0, 1, 2, 3, 2, 3, 0, 3, 2, 1, 3, 1, 2, 1, 2, 0, 3, 3, 2, 1, 0, 2, 2, 1, 2, 3, 1, 3, 3, 2, 2, 0, 1, 1, 1, 0, 3, 2, 0, 3, 1, 0, 3, 0, 3, 0, 2, 0, 1, 1, 1, 2, 3, 0, 1, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [2, 4, 3, 1, 3, 0, 1, 2, 3, 4, 1, 1, 0, 0, 1, 1, 2, 1, 0, 3, 2, 2, 4, 0, 1, 0, 0, 4, 3, 0, 3, 4, 2, 2, 3, 2, 0, 0, 0, 0, 2, 0, 2, 3, 4, 3, 4, 0, 4, 2, 0, 2, 0, 0, 0, 0, 0, 2, 3, 0, 3, 2, 2, 4, 0, 2, 1, 2, 0, 0, 0, 3, 0, 4, 4, 4, 1, 1, 2, 3, 3, 3, 0, 0, 0, 4, 1, 2, 1, 0, 0, 0, 1, 1, 3, 1, 4, 3, 4, 0, 1, 1, 1, 2, 3, 2, 4, 0, 1, 2, 0, 4, 3, 2, 0, 3, 1, 3, 1, 2, 1, 1, 4, 1, 1, 2, 1, 1, 0, 2, 4, 4, 1, 1, 2, 0, 4, 0, 3, 0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 0, 2, 1, 2, 2, 0, 1, 1, 0, 2, 1, 0, 2, 0, 0, 2, 0, 2, 0, 2, 2, 2, 0, 1, 1, 1, 0, 0, 2, 0, 1, 2, 1, 2, 0, 2, 2, 1, 2, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [4, 1, 3, 3, 4, 2, 2, 2, 3, 1, 3, 3, 0, 2, 5, 5, 4, 1, 1, 4, 5, 5, 4, 0, 1, 0, 0, 2, 0, 2, 3, 5, 1, 5, 3, 2, 0, 0, 2, 1, 5, 5, 1, 3, 1, 5, 4, 4, 0, 1, 1, 0, 5], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [1, 0, 3, 4, 0, 1, 3, 3, 2, 0, 4, 1, 0, 1, 4, 4, 2, 0, 0, 3, 2, 3, 3, 0, 4, 1, 4, 2, 1, 0, 0, 0, 1, 3, 1, 1, 2, 1, 0, 4, 2, 2, 4, 0, 2, 1, 4, 2, 1, 1, 0, 0, 2, 0, 4, 1, 4, 2, 0, 0, 4, 4, 1, 2, 1, 0, 1, 0, 2, 1, 2, 2, 4, 1, 4, 0, 4, 0, 0, 1, 0, 3, 4, 4, 4, 4, 1, 2, 0, 4, 2, 2, 0, 2, 1, 4, 1, 3, 3, 0, 4, 0, 3, 0, 4, 3, 4, 2, 1, 0, 3, 2, 4, 4, 2, 2, 0, 4, 4, 0, 4, 1, 0, 2, 4, 1, 2, 4, 2, 1, 2, 1, 0, 1, 2, 4, 0, 0, 1, 4, 2, 4, 1, 4, 1, 2, 2, 4, 2, 4, 1, 2, 4, 4, 4, 4, 0, 2, 1, 1, 2, 4, 4, 2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 1, 2, 4, 1, 0, 0, 1, 2, 1, 1], [0, 1, 0, 2, 0, 0, 2, 0, 0, 3, 2, 0, 3, 3, 3, 2, 3, 1, 3, 2, 1, 3, 2, 1, 2, 1, 2, 0, 2, 2, 0, 3, 2, 3, 0, 0, 0, 2, 0, 0, 0, 0, 1, 3, 2], [5, 5, 3, 2, 1, 3, 1, 0, 3, 4], [0, 0, 2, 0, 1, 0, 1, 1, 2, 0, 2, 0, 2, 1, 0, 1, 0, 0, 2, 1, 0, 1, 0, 0, 1, 1, 2, 2, 2, 2, 2, 1, 2, 0, 1, 1, 0, 2, 2, 0], [1, 1, 3, 0, 0, 3, 1, 3, 1, 0, 1, 1, 3, 3, 3, 3, 3, 2, 1, 3, 1, 0, 2, 0, 3, 1, 0, 2, 3, 3, 2, 0, 2, 3, 2, 3, 2, 1, 2, 3, 2, 1, 0, 2, 1, 2, 2, 3, 1], [13, 11, 10, 12, 1, 16, 10, 10], [2, 25, 7, 24, 19, 14, 16, 11, 24, 14, 7, 24, 5], [6, 0, 5, 0, 6, 1, 1, 7, 6, 1, 9, 2], [20, 3, 18, 18, 20, 19, 12, 23, 17, 19, 23, 19, 15, 13, 31, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 38, 38, 15, 23, 5, 16, 0, 0, 9, 8, 23, 8, 9, 6, 2, 2, 7, 126, 126, 132, 9, 505, 118, 140, 60, 63, 53, 49, 5, 183, 45, 10, 40, 49, 8, 13, 12, 16], "tree_depth": 81, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = \"\"c\"\".startswith(in1)\\nloopBreak% = 0\\nwhile (getCharFromString(s1, i1) + \"\"z;NL\"\") == ((in0[i0:abs(i2)] + saveChr(saveOrd(\"\"h\"\"))) + in0):{:\\nin1 = \"\"/y\"\"\\nif getCharFromString(s2[i1:len(s2)].capitalize(), i2) == (((s2 + getCharFromString(\"\"K\"\", max(mod(divInt(i2,int(3.0)),len(getCharFromString(\"\"t\"\"[i2:min(max(i1, ( ( int(4.0) - ( mod(i1,i0) - mod(( abs(len(in0)) - mod(int(5.0),saveOrd(s1)) ),i1) ) ) - i0 )), int(9.0))], max(i1, i2)))), i0))) + in0)[mod(max(int(2.0), i2),mod(i2,min(i0, min(i0, i1)))):] + \"\"o/\"\"):{:\\nloopBreak% = 0\\nfor in0 in (\"\";\"\" + \"\":\"\"):{:\\nloopBreak% = 0\\nwhile \"\")\"\"[:mod(max(mod(i2,max(int(1.0), int(9.0))), i1),abs(i0))] == s0:{:\\ni2 += max(min(len(getCharFromString(s2, divInt(int(2.0),i2))[:abs(abs(i1))][i2:( ( mod(int(9.0),divInt(saveOrd(\"\">\"\"[:i0]),i2)) - i0 ) + min(int(3.0), i1) )].capitalize()), int(6.0)), mod(divInt(max(divInt(min(int(5.0), divInt(int(0.0),min(int(1.0), ( i2 + int(9.0) )))),int(6.0)), mod(int(2.0),saveOrd(getCharFromString(\"\"6\"\"[i2:], divInt(int(0.0),int(9.0)))))),mod(int(7.0),int(1.0))),int(2.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = \"\"q\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(9.0) \\ge int(2.0):{:\\nloopBreak% = 0\\nfor in2 in in1:{:\\nif len(s1) == i1:{:\\ns1 = in1[mod(( min(len(\"\".\"\".strip(in2[saveOrd(in2):].capitalize())), ( abs(abs(( ( len(getCharFromString(\"\"l\"\".strip(\"\"M\"\"[abs(int(0.0)):int(2.0)]), i1)) + min(i0, mod(( i0 + i1 ),i1)) ) + min(i0, int(1.0)) ))) + i2 )) + min(min(abs(min(int(8.0), i1)), ( int(4.0) + divInt(abs(len(in1)),i0) )), saveOrd(\"\"0\"\")) ),int(4.0)):divInt(int(3.0),i2)]\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nres0 = i0 \\ge len(s0)\\nif saveOrd(\"\"B\"\"[int(9.0):]) != divInt(int(7.0),int(1.0)):{:\\ni2 -= int(4.0)\\n:}\\nloopBreak% = 0\\nwhile \"\":\"\".lstrip(s1.strip())[min(int(8.0), saveOrd(s0.capitalize())):int(6.0)][:i0] in s0:{:\\nb2 = \"\"y\"\" not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nfor s0 in (saveChr(abs(min(abs(divInt(min(i1, int(5.0)),i1)), ( int(6.0) - int(5.0) )))).rstrip() + \"\"Q\"\".capitalize().lstrip(s2[:int(6.0)])):{:\\ni0 = min(min(i0, i0), divInt(i2,min(min(( abs(divInt(divInt(divInt(i2,i0),len(saveChr(( int(1.0) - int(7.0) )))),i2)) - ( min(len(in0[i0:i1][( i2 * abs(divInt(abs(saveOrd(\"\"5\"\"[divInt(int(0.0),mod(i2,i1)):])),int(3.0))) ):mod(i0,int(9.0))]), int(9.0)) + i2 ) ), min(abs(( divInt(int(5.0),max(abs(i1), i1)) + int(9.0) )), divInt(min(i2, int(7.0)),min(i1, int(7.0))))), min(int(1.0), len(\"\">\"\".rstrip())))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = False\\nloopBreak% = 0\\nfor in2 in ((s1 + in2.capitalize()) + (in0 + saveChr(int(8.0)))):{:\\ns2 = (\"\":\"\"[:i2].capitalize() + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(0.0) \\l min(saveOrd((saveChr(int(5.0))[i1:int(6.0)] + s0[divInt(i1,int(0.0)):saveOrd(getCharFromString(s2.capitalize(), saveOrd(\"\"0\"\".capitalize())))][:max(mod(int(4.0),( max(i1, int(5.0)) * ( int(5.0) - int(9.0) ) )), abs(int(1.0)))].capitalize())), i1):{:\\nif ( len(s1) \\ge ( mod(mod(( mod(mod(len(getCharFromString(\"\"K\"\", len(\"\"6\"\"[:i1].lstrip()[:( min(i0, int(0.0)) * ( ( i0 * i2 ) + i2 ) )]))[min(i1, ( min(saveOrd(\"\",\"\"[i0:]), divInt(int(1.0),int(9.0))) - int(6.0) )):i2]),int(2.0)),( max(i2, int(2.0)) - i2 )) + int(6.0) ),i1),int(1.0)) * i2 ) or not int(2.0) \\le divInt(abs(max(i1, mod(divInt(( i0 - mod(i1,min(int(8.0), ( int(5.0) + int(2.0) ))) ),int(9.0)),min(i1, int(4.0))))),int(5.0)) ):{:\\ni1 = i1\\ni2 *= int(8.0)\\ni0 += min(max(max(len(in2), int(1.0)), divInt(( i2 + i0 ),i0)), max(mod(i1,i2), int(3.0)))\\nb2 = \"\"1\"\" in in2.capitalize()[i1:]\\n:}else:{:\\nif ( False and s1.endswith(\"\"*\"\") ):{:\\nb0 = b0\\n:}else:{:\\nin0 = getCharFromString(\"\"1\"\", int(0.0))[( int(3.0) * saveOrd(getCharFromString(\"\"o\"\", ( len(getCharFromString(\"\"7\"\".capitalize()[:mod(int(1.0),int(7.0))], saveOrd(getCharFromString(getCharFromString(getCharFromString(getCharFromString(s1, ( min(int(9.0), i2) + i1 )), i0), int(4.0)), mod(divInt(( ( int(5.0) * max(i0, i2) ) + max(divInt(int(6.0),i1), max(int(6.0), int(4.0))) ),abs(len(\"\"`\"\"[int(6.0):( int(4.0) * i2 )]))),i1))[abs(( saveOrd(\"\"6\"\") * int(9.0) )):]))[int(6.0):][( min(mod(i2,max(i2, i1)), abs(i0)) * min(int(0.0), ( int(7.0) + int(4.0) )) ):]) - saveOrd(saveChr(len(in2[:abs(min(int(8.0), int(7.0)))].rstrip(\"\"h\"\"[int(2.0):( mod(len(in1[int(3.0):]),max(( len(\"\"K\"\") - divInt(mod(( i0 - int(5.0) ),max(divInt(int(0.0),i0), abs(( i1 + max(i0, max(i1, saveOrd(in1))) )))),int(8.0)) ), ( i2 + int(2.0) ))) * int(4.0) )])))[:max(int(9.0), max(int(2.0), abs(int(6.0))))]) ))) ):].lstrip(\"\"1\"\")\\n:}\\nloopBreak% = 0\\nfor s0 in s1:{:\\ni1 = ( mod(i1,int(7.0)) + ( max(mod(max(i1, min(mod(int(9.0),abs(int(4.0))), ( int(9.0) - divInt(i0,saveOrd(\"\"y\"\")) ))),saveOrd(\"\"9\"\".capitalize()[mod(int(6.0),i1):])), ( mod(int(1.0),( max(int(9.0), max(abs(( ( i1 * int(2.0) ) - int(6.0) )), int(1.0))) * i1 )) + min(( i2 * saveOrd(s1) ), int(3.0)) )) * i2 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = s0 != \"\"2\"\"\\nin2 = \"\"`\"\"[min(i0, len(\"\"f\"\")):i0]\\n:}\\n:}\\ni0 -= ( i2 * int(8.0) )\\n:}else:{:\\ni1 = int(8.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = int(6.0) \\g ( min(i0, int(743.0)) - i1 )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [3, 5, 7], [1], [0], [1], [], [], [], [], [4], [1], [], [1], [], [], [], [1], [], [19], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"t\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [0], [0], [], [], [2], [3], [2, 0, 0, 1, 0, 2, 0, 2], [0], [2, 5, 3], [2, 3, 3, 2], [0, 0], [], [], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 3, 8, 9, 2, 9, 5, 3, 3, 5, 2, 9], [2, 1, 0, 1, 0, 2, 0, 0, 1, 2, 0], [], [0, 1, 1, 0, 2, 2, 0, 2, 0, 1, 0, 1, 3, 2, 0, 3, 3, 1, 3, 0, 1, 3, 2, 1, 0, 3, 0, 1, 3, 3, 0, 0], [0, 1, 0, 1, 1], [3, 1, 3, 4, 2, 4, 2, 0], [2, 2], [1, 1, 0], [5, 1, 3, 0], [1, 1, 1, 1, 1], [0], [4, 0, 4, 0, 4, 2, 2, 1, 4, 4, 0, 2, 0, 1, 1, 4, 4, 2, 4, 2, 4, 4, 4, 2, 1, 1], [1, 1, 3, 3, 3, 0, 3, 2, 1, 0, 2], [5, 1, 5, 2], [1, 0, 1, 2, 0, 0], [1, 0, 3, 3, 2], [25], [12], [8], [29, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 8, 1, 3, 4, 2, 0, 0, 12, 12, 11, 0, 32, 5, 8, 2, 3, 4, 5, 0, 26, 11, 4, 6, 5, 1, 1, 1, 2], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveChr(i2) == in2:{:\\nb2 = not ( int(038.0) \\ge int(929.0) and ( saveChr(i1).endswith(s1) and not \"\"m\"\"[( mod(i0,( i1 * int(5.0) )) * i0 ):int(3.0)][:len(in0.strip(s0[:mod(i2,max(len(\"\"Z\"\"), int(3.0)))]).rstrip())].strip(\"\"^\"\") != getCharFromString(saveChr(saveOrd(getCharFromString(\"\"@\"\"[i0:int(5.0)].capitalize(), abs(divInt(int(2.0),i0)))))[saveOrd(\"\"8\"\"):i1].capitalize()[int(9.0):].strip(), abs(min(i2, i0))) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [2, 2, 0, 0, 1, 0, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 0, 1], [1, 2, 2, 1, 1, 1, 1, 1], [1, 0, 2, 1, 2, 1, 0, 1, 1, 0], [], [0, 0, 0, 0], [], [], [2, 0, 0], [5, 4, 0], [2, 2, 1, 0, 2, 2, 1, 0, 2, 2, 0, 0, 0, 1], [0, 0, 0], [0, 5, 3, 3, 0, 1], [1, 2, 2, 2, 1], [], [1, 1], [1, 1, 0, 0, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [5, 2, 7, 2, 4, 4, 6, 6, 8, 7, 1, 9, 9, 2, 3, 2, 2, 0, 2, 4, 1, 6, 1, 5, 7, 6, 8, 6, 7, 5], [2, 1, 0, 1, 0, 2, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 2, 2, 0, 1, 0, 0, 0, 2, 0], [0, 1, 0, 0, 0], [3, 2, 1, 1, 1, 3, 0, 3, 3, 0, 2, 1, 0, 0, 1, 3, 2, 2, 3, 2, 1, 0, 2, 3, 1, 3, 0, 0, 3, 1, 2, 0, 0, 2, 1, 0, 0, 3, 1, 1, 1, 1, 1, 0, 1, 0, 3, 1, 1, 2, 1, 0, 1, 3, 2, 1, 0, 0, 1, 3, 1, 2, 3, 0, 2, 1, 0, 2, 0, 0, 0, 2, 2, 0, 3, 0, 1, 0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 4, 3, 3, 1, 0, 1, 0, 2, 2, 0, 1, 3, 0, 0], [2, 1, 1, 1, 2, 1, 0, 0, 1, 2, 0, 1], [1, 1, 1, 1], [0, 5, 5, 3, 1, 3, 3, 2, 4, 4, 2], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [], [0, 1, 2, 0, 0, 2, 3, 0, 1, 0, 3, 2, 2, 1, 4, 4, 2, 1, 1, 3, 0, 1, 4, 0, 0, 4, 3, 4, 1, 4, 2, 4, 4, 4, 2, 1, 1, 2, 0], [2, 3, 2, 1, 1, 0, 1, 1, 0], [0], [1, 2, 0, 2, 0, 1, 2, 0], [2, 1, 1, 2, 0, 2, 2, 1, 0, 0, 1], [17, 7, 4], [25, 17, 8, 24], [4, 5, 9, 8], []], "fitness": 9223372036854775807, "mapping_values": [1, 18, 18, 8, 10, 0, 4, 0, 0, 3, 3, 14, 3, 6, 5, 0, 2, 6, 30, 30, 29, 5, 78, 15, 15, 12, 4, 11, 11, 0, 39, 9, 1, 8, 11, 3, 4, 4, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0 in \"\"4z\"\":{:\\nloopBreak% = 0\\nwhile in2[:min(mod(int(5.0),int(27.0)), int(2.0))].endswith(in2):{:\\ni2 = saveOrd((in0 + \"\"r\"\")[i1:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = len(s1) != len((\"\"5\"\"[i0:][( int(4.0) * i1 ):i0] + \"\"R\"\"[int(4.0):max(( mod(min(( int(6.0) - i2 ), ( max(int(6.0), min(i0, i0)) - abs(int(8.0)) )),mod(i2,i0)) - ( int(7.0) * i0 ) ), i1)].lstrip().capitalize()))\\nin0 = \"\"9\"\"\\ni0 -= abs(int(19923.0))\\n:}else:{:\\nloopBreak% = 0\\nwhile False:{:\\nif (in0 + \"\"8i\"\") != s2.capitalize():{:\\nin1 = in1\\n:}else:{:\\nif saveChr(int(2.0)) != (saveChr(int(2.0)) + \"\"H\"\"):{:\\nif int(0.0) \\le int(2.0):{:\\ni2 = i0\\n:}\\nif not getCharFromString(saveChr(int(4.0))[:i0], min(int(1.0), int(6.0))) in saveChr(( int(1.0) + i1 )):{:\\nif getCharFromString(\"\"E\"\"[int(5.0):], max(( int(7.0) + i1 ), i1)) not in \"\"y\"\":{:\\nb0 = not not False\\n:}\\n:}else:{:\\ni2 = int(6.0)\\n:}\\n:}\\ni2 = len(s2[int(8.0):( min(i2, ( int(6.0) - i0 )) * mod(i1,i0) )])\\n:}\\nb0 = i0 \\l ( ( i0 + min(i2, int(75.0)) ) - i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 1, 2, 2, 0, 2, 0, 2, 1, 2, 2, 2, 1, 0, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 0], [0, 1, 0, 1, 1, 2, 0, 1, 1, 1, 1], [0, 1, 1, 2, 0, 0, 1, 0, 2, 1, 0, 1, 2, 1, 1], [0, 0, 0], [0, 0, 0, 0, 0], [], [], [0, 1, 1, 3, 3, 1, 2], [0, 3, 5, 2, 4], [1, 0, 2, 2, 0, 1, 1, 2, 2, 0, 1, 0, 0, 2, 1], [0, 0, 0, 0, 0], [2, 3, 5, 5, 2], [0, 3, 1, 1, 0], [0], [0, 1], [1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 2, 1, 9, 1, 4, 3, 0, 8, 3, 7, 6, 8, 7, 1, 2, 4, 8, 9, 1, 5, 5, 2, 4, 4, 8, 8, 2, 8, 3, 3, 1, 2, 7, 7, 7, 8, 9, 9, 4, 1, 1, 5, 1, 7, 2, 4, 0, 8, 8, 1, 7, 6, 9, 9, 3, 1, 0, 7], [2, 1, 2, 2, 1, 0, 1, 2, 0, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 2, 2, 1, 2, 0, 0, 1, 2, 2, 2, 0, 2, 1, 2, 0, 2, 0, 1, 2, 2, 1, 0, 2, 2, 1, 1, 1, 0, 1, 0, 2, 0], [0, 0, 0, 1, 1, 0, 1], [2, 2, 0, 1, 1, 0, 1, 3, 2, 0, 2, 1, 2, 0, 0, 3, 0, 1, 3, 1, 0, 0, 0, 3, 2, 3, 1, 2, 2, 2, 1, 1, 1, 0, 3, 1, 1, 0, 2, 3, 3, 2, 1, 2, 1, 3, 2, 3, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 1, 0, 1, 2, 0, 0, 1, 2, 0, 0, 0, 2, 2, 3, 0, 3, 3, 3, 2, 2, 1, 0, 0, 0, 2, 0, 3, 3, 1, 1, 0, 1, 2, 3, 3, 0, 2, 0, 1, 2, 3, 0, 2, 2, 2, 0, 2, 3, 1, 0, 0, 1, 0, 0, 1, 3, 1, 0, 1, 2, 3, 2, 3, 1, 3, 1, 3, 1, 2, 1, 1, 0, 0, 1, 3, 0, 2, 1, 0, 1, 0, 0, 1, 3, 2, 2, 3, 3, 0, 3, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 3, 3, 2, 2, 1, 0, 2, 1, 1, 0, 1, 3, 0, 1, 2, 0, 2, 3, 0, 0, 1, 0, 3, 1, 1, 0, 3, 1, 1, 0, 2, 3, 2, 1, 0, 0, 2, 1, 2, 0, 0, 0, 3, 1], [0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [3, 2, 3, 3, 2, 3, 0, 4, 0, 0, 4, 3, 0, 4, 0, 0, 3, 0, 2, 1, 0, 2, 4, 4, 0, 1, 1, 2, 3, 0, 0, 1, 0, 2, 2, 3, 1, 1, 0, 2, 3, 3, 0, 4], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 0, 0, 0, 0, 2], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [5, 3, 4, 1, 5, 0, 5, 1, 1, 4, 1, 4, 3, 2, 1, 4, 0, 1, 3, 2, 4, 3, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0], [4, 3, 0, 0, 3, 1, 4, 2, 1, 2, 4, 2, 4, 4, 2, 4, 2, 0, 2, 0, 0, 0, 2, 0, 4, 2, 1, 4, 1, 4, 4, 4, 2, 1, 2, 1, 1, 4, 4, 2, 4, 2, 0, 4, 4, 2, 2, 0, 0, 4, 0, 2, 1, 2, 0, 1, 4, 0, 3, 2, 0, 2, 0, 1, 0, 1, 1, 2, 2, 3, 1, 2, 4, 0, 3, 2, 1, 0, 1, 0, 2, 1, 4, 4], [1, 2, 2, 2, 2, 2, 0, 0, 2, 3, 0, 1, 0, 1, 2, 0, 3, 2, 3, 3, 1, 1], [0, 0, 4], [1, 0, 0, 0, 2, 1, 1, 1, 1, 2, 2, 0, 1, 1, 0, 1, 0, 0, 0, 2, 2, 1, 1], [2, 0, 0, 1, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 0, 3, 1, 1, 2], [1, 2, 5, 23], [9, 12, 13, 16, 23, 6, 3], [2, 3, 9, 9, 2, 8, 5], [10, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 17, 17, 7, 10, 3, 4, 0, 0, 5, 3, 10, 3, 4, 3, 1, 1, 3, 38, 38, 44, 4, 140, 34, 28, 14, 21, 20, 11, 3, 63, 18, 2, 18, 11, 3, 4, 4, 0], "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( divInt(i2,int(0.0)) - int(2.0) ) \\l i1\\ni2 = int(1.0)\\nloopBreak% = 0\\nfor in2 in saveChr(len((in0 + in1))):{:\\nif b1:{:\\ni2 = mod(i1,divInt(int(9.0),( i0 - i1 )))\\nloopBreak% = 0\\nfor s1 in (\"\"2B\"\" + \"\"Cj\"\"[:abs(i2)].capitalize()):{:\\nin2 = s0[int(1.0):].capitalize()[len(in2[:int(4.0)]):i0].capitalize().capitalize()[i2:i1].capitalize()[len(s1):mod(abs(int(3.0)),divInt(divInt(divInt(int(0.0),int(8.0)),int(3.0)),i1))]\\nif s1 == in1[:len(getCharFromString(\"\"m\"\"[:int(7.0)], int(6.0)))]:{:\\nb1 = getCharFromString(\"\"3\"\", i0) != getCharFromString(\"\"9\"\"[:divInt(min(saveOrd(\"\"n\"\"[divInt(int(8.0),( int(7.0) + min(divInt(min(i2, int(1.0)),divInt(int(2.0),saveOrd(\"\"F\"\"))), i0) )):]), len(saveChr(divInt(( int(4.0) + int(8.0) ),i0)))),int(9.0))], ( i0 - i1 )).lstrip().capitalize()\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( int(1.0) \\ge divInt(i0,i0) and i1 != mod(( min(i0, saveOrd(getCharFromString(saveChr(min(min(( mod(int(5.0),i0) + i1 ), i1), mod(i1,len(s1[min(int(5.0), int(2.0)):i2]))))[int(4.0):], mod(abs(max(i2, ( i1 + int(4.0) ))),mod(min(i2, ( divInt(( i0 + ( abs(int(8.0)) - i0 ) ),i1) - int(8.0) )),i2))))) * i2 ),int(2.0)) ):{:\\nloopBreak% = 0\\nwhile getCharFromString(in1[:saveOrd(in0)][:int(8.0)], i2).capitalize().endswith(s2.lstrip()):{:\\nloopBreak% = 0\\nfor s1 in \"\"q\"\"[int(3.0):divInt(saveOrd(in1[:divInt(min(int(3.0), max(int(1.0), max(int(2.0), ( int(7.0) * int(7.0) )))),i0)]),i2)]:{:\\nres0 = \"\"9\"\".endswith(s0.capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(7.0)\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\ns1 = (in0[abs(i2):( int(8.0) - i0 )] + s2[int(9.0):i2])\\ni0 -= i1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0, 0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 1], [1, 1, 5, 7, 7, 2, 2, 8], [0, 0, 2, 1, 1, 2, 1], [], [1, 3, 2, 2, 2, 1, 3, 1, 0, 0, 3, 1, 2, 3, 2, 3, 3, 3, 2, 0, 0, 1, 2, 2, 2, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 4, 4, 0, 4, 3], [1, 0, 2, 1, 1, 2], [1, 0, 0], [5, 5, 3, 4], [1], [], [3, 0, 2, 0, 0, 0, 1], [], [], [0, 2], [2], [], [], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 4, 0, 22, 6, 7, 3, 3, 4, 1, 0, 7, 0, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g min(mod(( divInt(int(1.0),max(int(5.0), i0)) - i0 ),saveOrd((in2 + in2[int(77.0):divInt(saveOrd(in0),( min(saveOrd(in1), len(\"\"9\"\")) + ( i2 * i1 ) ))]))), int(2.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [2, 1, 1, 1, 2, 2, 1, 0, 0, 0, 2, 1], [1, 1, 2, 0], [2, 1, 2, 2, 0, 0, 0, 1], [0], [0, 0, 0], [], [], [0, 0, 1, 2, 2], [2, 4, 5], [0, 1, 0, 0, 1, 0, 2, 0, 2, 1, 0, 0], [0, 0, 0], [1, 4], [3, 1, 3, 2, 2, 0, 0], [0, 0], [0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 2, 2, 8, 5, 0, 5, 0, 5, 6, 3, 5, 8, 1, 5, 5, 7, 2, 5, 1, 7, 9, 4, 1, 8, 6], [0, 0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1, 1, 1, 1, 0, 1, 0, 2, 0, 2, 1, 1, 0, 0, 2, 2, 0, 0], [0, 1], [2, 0, 2, 0, 1, 1, 0, 0, 2, 2, 1, 0, 3, 1, 0, 1, 0, 2, 3, 2, 1, 3, 0, 2, 0, 1, 2, 2, 3, 0, 2, 0, 0, 2, 1, 1, 3, 1, 2, 3, 1, 3, 3, 0, 3, 2, 2, 2, 2, 0, 1, 2, 0, 1, 0, 3, 1, 1, 0, 3, 1, 1, 0, 2, 2, 0, 0, 2, 0, 1, 1, 2, 3, 0, 2, 0, 1, 2, 0, 1, 2, 3, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 1, 1, 3, 0, 4, 4, 1, 0, 3, 1, 3, 3], [0, 1, 2, 1, 1, 2, 1, 0, 0, 0, 0, 2, 0, 2], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 3, 2, 5, 3, 4, 2, 1, 2, 5, 4, 0, 5], [1, 0, 0, 0, 1, 1, 1, 1, 1], [0], [1, 0, 1, 4, 2, 3, 0, 0, 4, 2, 2, 4, 0, 1, 2, 1, 4, 4, 3, 1, 2, 1, 2, 2, 0, 4, 3, 0, 0, 2, 0, 0, 4], [0, 3, 2, 1, 1, 0, 1], [4], [0, 1, 0, 2, 1, 2, 2, 0], [3, 0, 0, 1, 2, 3, 1, 3, 2], [10, 22], [10, 22], [7, 7], [15, 0, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 12, 12, 4, 8, 1, 3, 0, 0, 5, 3, 12, 3, 2, 7, 2, 1, 2, 26, 26, 30, 2, 92, 27, 13, 14, 14, 13, 9, 1, 33, 7, 1, 8, 9, 2, 2, 2, 3], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( ( i0 + mod(i0,int(0.0)) ) == int(2.0) and True ):{:\\ns0 = \"\",\"\"\\ni1 = i1\\nin0 = s2\\nif ( i1 \\le divInt(( int(2.0) - i0 ),min(int(8.0), i2)) and not \"\"KWk7\"\" not in getCharFromString((in2 + in0)[int(5.0):i1], divInt(max(( int(0.0) * max(i1, ( i2 - int(5.0) )) ), ( divInt(len(in1.capitalize()[i0:divInt(i0,i1)][:( int(0.0) - int(5.0) )].rstrip(\"\"\"\")),min(int(6.0), divInt(saveOrd(\"\"w\"\"[int(3.0):]),saveOrd(saveChr(max(i1, min(( ( mod(mod(i1,int(5.0)),( i1 * int(8.0) )) - i0 ) + len(saveChr(int(1.0))) ), int(5.0)))))))) + i1 )),max(int(5.0), int(7.0)))) ):{:\\nloopBreak% = 0\\nwhile not (\"\".\"\" + \"\"7\"\"[:i0]).startswith(s2[( divInt(i2,i0) + ( i2 + int(2.0) ) ):][int(5.0):]):{:\\ns1 = getCharFromString((s2 + in2), divInt(len(in1[i1:divInt(i1,int(1.0))]),( i0 * int(7.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = divInt(len(s0),i0) != i2\\nb0 = b1\\n:}else:{:\\nb2 = b2\\n:}\\nloopBreak% = 0\\nfor in2 in saveChr(i2):{:\\ni0 += mod(( int(9.0) * int(4.0) ),mod(i0,int(186.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 1, 5, 4, 5, 9, 8, 0, 9, 4, 1, 4, 0, 9, 4, 3, 1, 7, 0, 2, 8], [1, 1, 0, 0, 2, 2, 0, 2, 1, 0, 1, 1, 1, 2], [1, 0], [1, 2, 1, 2, 0, 2, 3, 3, 1, 3, 1, 3, 1, 3, 3, 3, 1, 0, 1, 3, 1, 2, 0, 1, 2, 3, 3, 1, 2, 0, 3, 3, 0, 3, 2, 1, 3, 0, 3, 1, 2, 1, 3, 0, 3, 3, 0, 3, 2, 2, 3, 0, 1, 0, 3, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 2, 3, 2, 3, 0, 4, 0, 0, 1, 2, 1, 2, 2, 0, 0, 0, 3, 1, 0, 1], [1, 0, 2, 0, 2, 0, 0, 1], [0, 1, 1], [0, 2], [1], [], [4, 2, 2, 2, 2, 4, 0, 0, 1, 4], [3, 2, 1], [2], [0, 0, 1, 0], [0], [10], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 22, 14, 2, 59, 10, 21, 8, 3, 2, 1, 0, 10, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(69.0)\\ni1 = ( int(1.0) + ( i0 * ( min(abs(int(54.0)), len(s0.capitalize()[int(5.0):abs(int(9.0))][:len(s2)][min(saveOrd(\"\"K\"\"), int(8094.0)):i0][int(1.0):min(int(4.0), divInt(i2,int(0.0)))].strip())) + ( min(max(int(9.0), ( i2 * abs(max(i0, abs(( int(4.0) + abs(i2) )))) )), min(int(31.0), mod(int(7.0),min(i1, min(len(saveChr(i0)), max(( mod(min(i1, int(0.0)),i1) + max(int(2.0), i1) ), int(8.0))))))) - i2 ) ) ) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [7, 1, 7, 2, 9, 3, 5, 9, 6, 0, 2], [2, 0, 2, 2, 2, 0, 1, 1], [0], [2, 1, 2, 3, 3, 0, 0, 3, 0, 3, 3, 1, 2, 3, 1, 3, 0, 0, 3, 3, 2, 1, 1, 3, 0, 1, 3, 0], [1, 0, 0, 1], [1, 0, 0, 2, 0, 4, 0, 3, 3, 2, 4], [0, 1], [0, 1], [2, 4, 3, 3], [0, 1, 0, 0, 1, 1, 1], [], [4, 2, 1, 3, 0, 3, 1, 3, 2, 2, 0, 3, 3, 1, 4, 0, 2, 1, 4, 4, 0], [1, 2, 2, 0], [], [1, 0, 2, 2], [2, 1, 1, 0, 2, 1, 2], [10], [23, 4, 9], [9, 1, 8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 8, 1, 28, 4, 11, 2, 2, 4, 7, 0, 21, 4, 0, 4, 7, 1, 3, 3, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(int(7.0),( max(min(i0, i2), min(i2, abs(min(int(1.0), ( saveOrd(saveChr(int(7.0))) + min(i2, i0) ))))) - len(\"\"9x\"\"[:len((s2 + (\"\"eK1\"\" + (in1[mod(int(293596.0),int(0.0)):][abs(i1):int(2.0)] + ((\"\"j\"\" + in0.capitalize()) + \"\"8\"\"[saveOrd(getCharFromString(in0, i1).capitalize()):])))))]) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 4, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 1, 1], [1], [22, 17], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 7, 0, 34, 9, 9, 3, 6, 5, 3, 1, 15, 4, 1, 3, 3, 1, 2, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(\"\"B\"\"))[abs(i0):] not in saveChr(min(mod(int(0.0),int(7.0)), ( int(5.0) + len(\"\"w\"\"[i1:divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len((\"\"r\"\" + getCharFromString(in0, divInt(int(1.0),i1))).rstrip()), divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)) )),i1)]) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 8, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 3, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [13], [], [20]], "fitness": 9223372036854775807, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(i0, ( divInt(( int(8.0) + len((\"\"R\"\" + in1.lstrip()).rstrip()) ),divInt(min(divInt(i1,max(abs(max(int(7.0), i2)), ( len(\"\"n\"\") * int(7.0) ))), i1),abs(int(1.0)))) - i1 )) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 9, 0, 34, 8, 11, 4, 4, 7, 2, 1, 16, 3, 2, 4, 2, 1, 1, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1, 0, 1], [2, 1, 2, 2, 0, 1], [0, 2, 2], [1, 1, 0], [0], [0, 0], [], [], [2, 1], [2, 4], [1, 0, 1], [0, 0], [], [0], [], [], [], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [5, 1, 8, 1, 8, 2, 8, 9, 0, 6, 8, 2, 3, 2, 8, 1, 9, 4, 7, 4, 6, 1, 7, 5, 0, 2, 7, 5], [1, 2, 2, 1, 1, 2, 2, 0, 0, 1, 2, 1, 0], [1, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 3, 1, 1, 2, 3, 3, 1, 1, 3, 3, 0, 1, 3, 1, 1, 3, 0, 1, 1, 2, 2, 2, 1, 1, 3, 1, 2, 0, 3, 1, 0, 3, 3, 0], [1, 1, 0, 1, 1], [3, 1, 1, 4, 0, 1, 3, 0, 0, 0, 3], [1, 1], [1, 0, 0, 1], [5, 1, 2, 2, 5], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [0], [3, 3, 3, 2, 2, 3, 2, 4, 1, 4, 3, 4, 2, 2, 0, 1, 4, 0, 1, 3, 1, 0, 1, 2, 1, 0], [2, 0, 0, 1], [], [2, 0, 0, 2, 0, 0], [3, 0, 3, 1, 0, 2, 0, 1, 2, 0, 1, 1], [0, 6, 2, 9], [4, 7, 3, 8], [9, 4], [14, 1]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 3, 3, 1, 1, 0, 0, 2, 2, 3, 2, 0, 1, 0, 0, 0, 28, 28, 13, 2, 43, 5, 11, 2, 4, 5, 12, 1, 26, 4, 0, 6, 12, 4, 4, 2, 2], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in ((((\"\"+A\"\".capitalize()[int(5.0):i1] + getCharFromString((getCharFromString(s1[i2:i2][i1:], i1) + \"\"\\\\\\ne\"\"), int(181.0)))[int(8.0):i2][len(saveChr(int(2.0))):] + s2) + \"\"G9Ch\"\") + (\"\"4\"\" + s2)):{:\\ni2 -= int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile mod(max(max(int(90.0), int(68.0)), saveOrd(\"\"J\"\")),min(i0, int(2.0))) == max(int(32.0), int(81.0)):{:\\nloopBreak% = 0\\nwhile b2:{:\\ni0 = len(\"\"di\"\"[i1:int(9474.0)])\\nb1 = int(6.0) \\le divInt(( divInt(int(1.0),int(75.0)) - min(int(027.0), mod(i2,min(int(5.0), i1))) ),min(len(in2), i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 0], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1], [0, 6, 2, 8], [2], [0], [1, 0], [], [], [1], [], [3, 5, 2], [0, 1], [], [1, 3, 0, 0], [2, 2, 1, 2], [], [], [2, 0], [19], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 1, 0, 1, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"1T\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0, 2, 2, 1, 2], [1], [3, 0, 2, 2, 2, 1, 0, 3, 3, 2, 3, 3, 3, 1, 1, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 0, 2, 0, 0, 0, 2, 3, 2, 0, 2, 2, 0, 1, 0, 3, 2, 2, 0, 3, 0, 3, 2, 1, 2, 2, 1, 0, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 1, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [13], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 16, 0, 56, 17, 11, 9, 8, 4, 2, 1, 14, 4, 2, 4, 2, 1, 1, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = \"\"R\"\"[i0:] not in saveChr(mod(( ( int(0.0) + i2 ) + len(in1[abs(divInt(min(len((\"\"n\"\" + saveChr(max(int(7.0), int(1.0)))).lstrip()), ( max(int(7.0), divInt(int(2.0),int(1.0))) * i2 )),i0)):( int(7.0) - i1 )]) ),( i2 + i1 )))[i2:divInt(abs(( i0 * divInt(divInt(i0,int(7.0)),i2) )),max(( ( i0 - max(i2, min(( int(9.0) - mod(divInt(int(8.0),i2),i1) ), int(5.0))) ) * int(0.0) ), i2))].rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0], [1, 1], [0], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [0, 8, 5, 6, 8, 9, 2], [1, 1, 2, 0, 2, 2], [1, 1], [2, 2, 1, 1, 3, 3, 2, 1, 2, 0, 1, 3, 3, 2, 0, 3, 3, 3, 3, 0, 2, 3, 0], [0, 0, 0, 1, 0, 1], [3, 2, 2, 2, 1, 1, 3, 3, 3], [1, 0, 2, 1, 2, 2], [0, 0], [1, 5, 5], [1, 1], [0], [0, 4, 1, 4, 4, 4, 4, 1, 0], [1, 3, 0, 3, 3], [1, 2, 1], [], [2, 3], [], [], [6], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 6, 2, 23, 6, 9, 6, 2, 3, 2, 1, 9, 5, 3, 0, 2, 0, 0, 1, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= ( ( int(0.0) + int(8.0) ) * len(s1) )\\nloopBreak% = 0\\nfor in2 in saveChr(abs(( int(5.0) - divInt(i1,int(6.0)) ))):{:\\ni2 *= abs(abs(( i0 * max(max(len(\"\"6\"\"), len(getCharFromString(\"\"#\"\".rstrip().strip(), i2).rstrip())), divInt(len(in2),i2)) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0], [2, 1, 1], [1], [1, 2], [], [0], [], [], [0], [], [0, 2, 2], [], [4, 4], [3], [1], [], [0], [0, 1], [9, 3], [0, 1, 0, 2], [1], [3, 0, 0, 2, 0, 1], [1], [2], [0], [1], [5, 1, 5, 1], [0, 1, 1, 1, 1], [], [0, 3, 3, 4, 1, 1, 2, 4, 2, 3, 3, 4, 1, 4, 4, 0, 0, 0, 1], [3, 2, 3, 2, 3], [1, 0, 0], [1, 1], [0, 3, 0, 1, 3], [6, 25], [13, 5], [], [7, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 3, 0, 2, 1, 1, 0, 1, 2, 2, 4, 1, 6, 1, 1, 1, 1, 4, 5, 0, 19, 5, 3, 2, 5, 2, 1, 0, 2], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( in2.startswith(((\"\"G$\"\".rstrip() + \"\"Z\"\") + ((\"\"n\"\".lstrip() + s1.lstrip().capitalize()) + in2)[:abs(i0)].capitalize()[:i1])) or s1.startswith(\"\"^\"\") ):{:\\ni0 += mod(i2,int(93.0))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 3], [5], [0, 1, 0], [0], [], [3, 0], [1], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [9, 7, 9, 8, 2, 9, 0, 1, 1, 1, 3], [1, 0, 0, 0, 2], [], [2, 3, 1, 2, 2, 1, 3, 2, 1, 3, 2, 3, 3, 2, 3, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0], [3, 4, 3, 4, 1, 0], [0, 2, 1, 2, 2], [1, 0, 1], [1, 4, 0, 2], [1], [], [2, 0, 2, 4, 4, 0, 0, 0, 1], [2, 3], [5, 0], [0, 1], [1], [], [7], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 5, 5, 5, 0, 23, 7, 6, 5, 2, 4, 1, 0, 9, 2, 1, 2, 1, 0, 1, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( ( len(s1[int(9.0):mod(divInt(int(7.0),saveOrd(in1.strip(s0).capitalize()[:( int(9.0) + len(s2) )])),( saveOrd(\"\"h\"\") * max(( min(( int(8.0) - int(2.0) ), i1) * i0 ), i0) ))]) * i0 ) != i2 or res0 )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 6, 9, 5, 6, 0, 7, 6, 1], [2, 2, 0, 0, 2, 0, 1, 2, 1, 1, 2, 0, 0], [], [2, 3, 2, 1, 1, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 2, 2, 3, 0, 2, 2, 3, 0, 0, 1, 3, 2, 3, 1, 0, 0, 0, 3, 0, 1, 0, 1, 1, 3, 3, 0, 2, 1, 1, 3, 3, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0], [1, 3, 2, 1, 3, 2, 3, 4, 2, 1, 0, 1, 1, 2, 1, 1], [2, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1], [5, 5, 1, 2], [1, 1], [], [3, 2, 0, 4, 4, 1, 2, 0, 4, 2, 0, 2, 4, 1, 4], [0, 3, 0, 2, 1], [0], [2, 0, 1, 2], [1, 1], [], [17, 0], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 13, 0, 50, 11, 16, 5, 6, 4, 2, 0, 15, 5, 1, 4, 2, 0, 2, 0, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in2[( max(divInt(int(0.0),int(9.0)), mod(len(getCharFromString(\"\"r\"\".lstrip(), ( abs(max(len(s1[abs(divInt(i2,i2)):len(getCharFromString(s2[:( mod(saveOrd(\"\"a\"\".capitalize()[i0:]),( divInt(abs(i0),i2) * int(6.0) )) + max(mod(min(int(9.0), i0),i1), i2) )], max(i1, int(5.0))))]), i1)) + int(6.0) ))),int(0.0))) + max(abs(i2), ( int(7.0) + int(6.0) )) ):] + saveChr(max(max(i0, int(1.0)), i0)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0], [1], [1, 1], [], [0, 0], [], [], [2], [2], [1, 0], [0], [], [1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [3, 2, 8, 7, 3, 3, 4, 5, 0, 9], [0, 2, 1, 1, 0, 1, 1], [1, 0], [3, 0, 3, 3, 1, 2, 1, 2, 2, 0, 0, 3, 2, 0, 3, 1, 1, 2, 0, 1, 3, 1, 2, 1, 0, 3, 3], [0, 1, 0, 1, 0, 0], [3, 1, 0, 0, 4, 3, 3, 2, 4], [1, 2, 2, 1, 0], [0, 0], [4], [1, 1], [], [4, 2, 4, 1, 4, 2, 0, 1], [3, 2, 2], [2], [2, 1], [0, 2], [20], [], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 6, 6, 7, 2, 22, 5, 6, 4, 2, 1, 2, 0, 8, 3, 1, 2, 2, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(\"\"U\"\".capitalize()[i0:].strip()) == max(min(int(3.0), ( int(2.0) - divInt(( i2 * i1 ),min(divInt(i1,saveOrd(in1[:int(8.0)].capitalize())), int(7.0))) )), ( i0 * int(3.0) )):{:\\ni1 -= len(\"\"2\"\")\\n:}else:{:\\ni1 = int(3.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 2, 1], [1, 0], [2, 2], [0], [0], [], [], [], [], [2], [], [4], [], [], [], [0], [0, 1, 1, 1], [0, 6, 6, 3], [0], [0], [1, 2, 3, 2, 1, 2, 1, 3, 3, 0], [1, 1, 1], [3, 2, 4], [], [0, 1, 1], [5, 0, 5, 2, 1, 3, 0, 1], [0, 0, 0, 1, 1, 1], [0], [4, 0, 1, 4, 0, 2, 3, 0, 1, 4, 1, 0, 4, 0], [2, 2, 0, 2], [], [0], [2, 3, 0, 1, 2, 3], [6], [1], [9, 2], [2, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 4, 4, 1, 0, 10, 3, 3, 0, 3, 8, 6, 1, 14, 4, 0, 1, 6, 1, 1, 2, 2], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2.capitalize().startswith(\"\"9\\\\\\tGb\"\"):{:\\ns0 = in2.capitalize()\\nloopBreak% = 0\\nfor s2 in (s1 + \"\"2\"\")[int(06.0):divInt(len(getCharFromString(\"\">\"\", mod(int(6.0),mod(int(3.0),abs(saveOrd(in0)))))),i0)]:{:\\ns0 = s1.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0], [9, 9, 0, 3], [0, 2, 0, 2], [1], [2, 0, 1, 2, 0, 1, 3, 3, 0, 0, 0], [0, 0], [1, 2], [1, 0], [1], [1, 4], [0, 0, 0, 1], [], [2, 2, 1], [], [], [1, 1], [1, 0, 2, 1], [2], [24, 18], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 0, 6, 2, 0, 2, 0, 1, 4, 0, 3, 0, 0, 2, 4, 1, 2, 1, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"yC1s\"\"[:( i0 - int(9.0) )][:( i2 + int(90.0) )]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [1], [0], [0], [0], [], [1], [], [1], [], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 5, 0, 7, 5, 6, 3, 6, 5, 2, 0, 8, 6, 3, 6, 1], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0, 1], [], [2, 0, 1, 0, 3, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 2, 0, 3, 0, 0, 3, 1, 2, 3, 3, 0, 1, 1, 1, 3, 1, 3, 2, 0, 0, 0, 3, 1], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 4, 0, 0, 1, 1, 2], [1, 2, 0, 1, 1, 0], [1, 0, 0, 1, 0], [4], [1], [], [2, 4, 1], [1], [], [0], [3], [], [], [], [4]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 11, 0, 38, 11, 8, 6, 5, 1, 1, 0, 3, 1, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(mod(i0,int(0.0)))[i2:min(( divInt(int(50756.0),( divInt(mod(i0,divInt(( i0 - ( i1 * min(i2, i1) ) ),saveOrd(\"\"!\"\"))),int(365.0)) + ( min(min(i0, int(2.0)), int(0.0)) - int(8.0) ) )) - max(int(63.0), max(( i0 + i0 ), i1)) ), abs(int(61.0)))]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 6, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 1, 2], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 2, 0, 3, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 1, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 0, 2, 3, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 0, 1, 2, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1, 1, 1], [0], [2, 0, 1, 2, 0, 0, 2, 1, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3, 3], [17], [], [], [20, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 14, 0, 56, 18, 11, 10, 8, 5, 3, 1, 15, 3, 1, 4, 3, 1, 0, 0, 2], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[len(s0):] not in \"\";\"\"[i0:mod(abs(( i2 + int(0.0) )),( int(4.0) + mod(i2,( divInt(( ( i0 * min(len(getCharFromString(saveChr(divInt(i1,( min(max(int(5.0), i2), divInt(min(int(6.0), i1),int(2.0))) - int(1.0) ))), i2)[int(0.0):divInt(int(7.0),max(int(1.0), abs(i0)))]), ( ( ( int(8.0) + int(5.0) ) * mod(int(0.0),i0) ) - int(4.0) )) ) - divInt(i1,i2) ),( saveOrd((\"\"!\"\" + in0.rstrip())) * i1 )) + i2 )) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 1, 2, 0, 0, 2, 3, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 7, 7, 10, 0, 34, 10, 7, 4, 6, 6, 2, 0, 15, 2, 0, 3, 2, 1, 0, 0, 1], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(\"\"R\"\"):] in in2[len(in1):]:{:\\nres0 = ( mod(int(0.0),i0) != mod(i2,int(7.0)) or ( (in1 + in0)[( int(5.0) + abs(i2) ):i0].endswith((\"\";\"\" + saveChr(divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( len(s0) * divInt(min(i1, ( max(int(6.0), i2) - int(1.0) )),int(7.0)) ) ), i0),i0)))).capitalize()) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 6, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 3, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 1, 1, 0, 2, 1, 3, 1, 3, 1, 2, 2, 0, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 3], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 2, 0], [1, 0], [2, 2, 1, 2, 1], [0, 0, 0], [17, 0, 18], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 8, 0, 49, 16, 11, 8, 8, 7, 3, 1, 16, 3, 0, 4, 3, 3, 0, 0, 0], "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(getCharFromString(saveChr(mod(int(0.0),max(mod(i0,int(9.0)), ( int(6.0) + min(i2, len(in0[mod(( int(7.0) + min(mod(max(( i2 - ( divInt(( int(2.0) - i0 ),divInt(abs(max(i0, mod(int(1.0),int(7.0)))),i1)) + ( int(7.0) * len(s0) ) ) ), int(9.0)),len((\"\"R\"\" + in1.capitalize()))), int(8.0)) ),( ( i1 - int(5.0) ) - int(0.0) )):])) ))))[:divInt(int(4.0),i2)], int(8.0))):] not in \"\"AS\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1], [2, 2, 0, 1, 2, 1, 0], [2, 2, 0], [0, 0, 1, 0], [0], [0, 0], [], [], [0, 3, 2], [0, 4, 0], [1, 2, 0, 1, 1, 0], [0, 0, 0], [3], [2, 1], [], [0], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 9, 2, 6, 8, 6, 5, 3, 2, 1, 8, 4, 5, 9, 2, 4, 9, 9, 7, 8, 4, 8, 9, 4, 5, 8, 0, 3, 8, 9, 5, 9, 3, 6, 8, 0, 7, 3, 4, 6, 3, 6, 1, 2, 0, 9, 5, 8, 0, 2, 8, 9, 4, 3, 5, 4, 7, 4, 9, 4, 6, 3, 5, 7, 1, 5, 9, 0, 4, 4, 3], [2, 2, 2, 2, 0, 1, 2, 1, 2, 1, 0, 2, 2, 0, 1, 2, 0, 0, 2, 2, 2, 1, 1, 2, 0, 1, 2, 2, 2, 0, 1, 0, 2, 0, 1, 2, 2, 0, 2, 0, 0, 1, 1, 0, 0, 1, 1, 0, 2, 2, 0, 1, 2], [1], [1, 1, 3, 0, 2, 3, 3, 1, 1, 0, 1, 1, 0, 3, 3, 2, 1, 0, 0, 2, 0, 1, 1, 3, 3, 0, 1, 1, 3, 2, 3, 3, 0, 1, 1, 2, 2, 1, 1, 1, 3, 2, 3, 1, 0, 1, 1, 2, 1, 2, 2, 0, 0, 1, 3, 0, 1, 2, 2, 1, 3, 1, 1, 2, 3, 3, 0, 2, 3, 0, 1, 2, 3, 3, 3, 2, 0, 3, 1, 2, 1, 2, 3, 0, 2, 1, 2, 2, 0, 0, 1, 2, 1, 3, 2, 1, 1, 1, 3, 0, 2, 2, 2, 2, 1, 2, 0, 1, 0, 0, 2, 2, 2, 1, 0, 3, 0, 2, 2, 3, 2, 3, 0, 0, 0, 0, 2, 3, 3, 3, 2, 2, 0, 0, 2, 1, 2, 3, 3, 1, 1, 1, 1, 3, 0, 3, 1, 3, 1, 3, 1, 3, 3, 0, 3, 1, 1, 0, 1, 2, 1, 3, 0, 0, 3, 0, 3, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 1, 1, 2, 3, 1, 3, 2, 1, 0, 2, 2, 3, 2, 2, 3, 2, 0, 3, 0, 0, 1, 3, 0, 3, 1, 2, 0, 0, 2, 1, 0, 1, 3, 1, 2, 3, 0, 2, 1, 1, 2, 2, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0], [2, 0, 0, 1, 2, 0, 4, 0, 0, 2, 4, 2, 4, 4, 2, 2, 4, 3, 3, 1, 4, 1, 4, 2, 3, 4, 1, 3, 1, 1, 0, 2, 3, 1, 1, 4, 1, 2, 3, 1, 3, 1, 4, 1, 3, 4, 2, 2, 1, 0, 4, 1, 3], [2, 1, 2, 0, 0, 2, 2, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 0, 0, 0, 2, 2, 0, 1, 2, 0, 2, 0, 1, 2], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0], [5, 5, 5, 4, 3, 0, 5, 1, 5, 0, 4, 4, 0, 4, 3, 3, 5, 2, 5, 0, 2, 1, 1, 1, 4, 0, 2, 4], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [1, 3, 1, 3, 1, 2, 3, 1, 3, 3, 4, 0, 1, 3, 0, 3, 0, 0, 3, 2, 2, 0, 4, 3, 0, 1, 3, 0, 3, 3, 4, 0, 0, 1, 4, 4, 2, 2, 1, 0, 2, 3, 2, 0, 3, 4, 2, 3, 3, 2, 2, 4, 0, 0, 4, 4, 2, 2, 4, 1, 1, 2, 4, 2, 4, 4, 4, 2, 4, 0, 2, 0, 0, 0, 2, 1, 0, 1, 0, 2, 2, 0, 0, 4, 2, 4, 2, 2, 2, 2, 1, 4, 2, 1, 0, 4, 0, 2, 4, 0, 4, 4, 2, 0, 4, 2, 0, 0, 4, 2, 1], [3, 0, 0, 3, 3, 1, 2, 3, 3, 1, 1, 2, 0, 0, 0, 0, 3, 0, 0, 2, 3, 0, 2, 3], [5, 5, 2, 3, 5, 5, 1, 2], [0, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 0, 2, 0, 1, 1, 2, 1, 2, 1, 0, 0, 0, 2, 2, 2, 1, 2], [0, 3, 0, 0, 3, 3, 0, 0, 2, 3, 3, 0, 3, 0, 3, 3, 3], [12, 3, 22, 10, 23, 6, 22], [], [2], [21, 6, 3, 13, 11, 1, 0, 8, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 1, 2, 0, 0, 3, 3, 6, 3, 1, 2, 0, 1, 0, 71, 71, 53, 1, 223, 56, 53, 32, 25, 28, 17, 1, 111, 24, 8, 29, 17, 7, 0, 1, 9], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(092.0) \\l int(6.0):{:\\nloopBreak% = 0\\nwhile \"\"M\"\" != (\"\"<D\"\" + (\"\"W#\"\" + (\"\"\"\" + ((in2.strip(\"\"K\"\") + (in2 + (in2 + in1))) + (in0[abs(i2):][( min(min(int(8.0), int(6.0)), i2) * int(5.0) ):] + getCharFromString((s0 + \"\"X\"\"), int(3.0)))))[i2:max(abs(( int(2.0) - i2 )), i0)])):{:\\nb0 = not ( i1 * int(1.0) ) \\le int(8.0)\\nres0 = min(saveOrd((in2 + ((getCharFromString(s1, i2) + in2) + \"\"2\"\"))), int(45.0)) \\l int(92.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in \"\"*\"\"[min(mod(min(abs(i1), int(4.0)),int(9.0)), divInt(mod(int(9.0),int(7.0)),int(8.0))):][saveOrd(in1):].strip().strip((in1[divInt(abs(int(4.0)),i2):int(89.0)] + (saveChr(int(45.0)) + ((s0.capitalize()[( int(8.0) + ( ( i1 + i0 ) * int(0.0) ) ):saveOrd(in1)][i2:] + saveChr(int(3.0))[divInt(( int(8.0) * saveOrd(\"\"(\"\") ),int(9.0)):][int(5.0):( abs(abs(i2)) + ( saveOrd(\"\"G\"\") + i0 ) )].strip(saveChr(int(9.0))[mod(len(getCharFromString(getCharFromString(getCharFromString(in0, len(in0[:max(divInt(i1,saveOrd(in2)), int(3.0))]))[( int(6.0) - divInt(max(i2, mod(int(8.0),( divInt(i0,i0) + int(0.0) ))),( int(7.0) - saveOrd(s2) )) ):( int(3.0) - int(4.0) )], int(6.0)), abs(i2)).capitalize()[divInt(mod(divInt(( int(3.0) - ( i2 - int(6.0) ) ),i2),i1),divInt(( mod(int(1.0),i1) + len(\"\"\\\\\\n\"\"[:i2]) ),( ( saveOrd(in2) - ( max(i0, i1) + i2 ) ) * i2 ))):]),mod(len(\"\"W\"\"),max(max(( ( i2 + i0 ) + ( int(2.0) + mod(min(abs(int(0.0)), int(9.0)),int(5.0)) ) ), int(8.0)), len(s0)))):i1]).lstrip(s2[:max(int(0.0), max(int(2.0), saveOrd(s1)))][int(8.0):])) + getCharFromString(\"\"\"\"[max(abs(i0), len(getCharFromString(\"\"%\"\"[int(9.0):], int(4.0)))):i2][int(3.0):mod(int(5.0),max(i0, i1))][len(s1):i2][:max(i2, saveOrd(getCharFromString(s1, i0)))].strip(in1.capitalize()[i2:])[int(4.0):], mod(int(7.0),max(i0, ( ( int(4.0) * int(9.0) ) * divInt(len(getCharFromString(s0[int(4.0):], saveOrd(s2[:( int(6.0) + i0 )].capitalize())).rstrip()),mod(mod(abs(( mod(abs(mod(i1,max(i1, i0))),int(3.0)) - min(i0, saveOrd(in1)) )),int(5.0)),( i1 * i1 ))) )))))[( int(7.0) + i0 ):]))[int(1.0):max(int(5904.0), divInt(len(\"\"\"\\\\\"\"\"[i2:].strip()),( int(4.0) * int(3.0) )))]):{:\\ni2 += ( ( i0 - i1 ) * i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [2, 0, 2, 0, 0, 1, 2, 1, 1, 0, 1], [2, 1, 1], [2, 2, 1, 2, 2, 2, 0, 1], [0], [0, 0, 0, 0], [], [], [0, 1], [2], [2, 0, 1, 2], [0], [5, 5], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 1, 5, 9, 8, 6, 8, 2, 4, 7, 9, 4, 2, 9, 5, 1, 1, 5, 6, 5, 2, 9, 2, 2, 6, 8, 8, 7, 3], [2, 0, 2, 1, 0, 2, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 0, 2, 0, 2, 2, 1, 2, 1], [0, 1], [1, 3, 3, 3, 2, 3, 0, 1, 3, 3, 1, 1, 0, 3, 0, 2, 1, 3, 1, 0, 2, 3, 1, 3, 2, 1, 0, 0, 2, 2, 3, 3, 1, 1, 1, 2, 2, 0, 3, 2, 0, 2, 3, 1, 0, 1, 0, 2, 3, 2, 3, 0, 3, 2, 2, 0, 1, 2, 0, 0, 3, 1, 3, 3, 0, 2, 0, 1, 1, 1, 1, 3, 2, 3, 2, 1, 0, 1, 1, 3, 0, 3, 3, 2, 3, 3, 1, 1, 0, 1, 0, 2, 3, 1, 2, 3, 3, 3, 0, 2, 2, 1, 0, 3, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [3, 1, 4, 3, 4, 4, 0, 0, 3, 4, 2, 4, 3, 1, 1, 2, 2, 3, 0, 0, 1, 0, 2, 3, 3, 0, 4, 2, 2, 4, 2, 4], [0, 2, 2, 1, 2, 1, 2, 0, 2, 0, 2, 0, 1, 0], [1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 0, 0, 5, 0, 0, 0, 2, 2, 5, 1, 3, 2, 4, 0, 4, 5, 4, 2, 4, 4, 5, 3, 1, 3, 2], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0], [4, 2, 1, 0, 0, 3, 4, 4, 0, 4, 1, 0, 0, 2, 1, 1, 4, 2, 4, 0, 3, 3, 0, 3, 1, 3, 2, 4, 0, 2, 0, 1, 1, 3, 4, 0, 2, 4, 1, 2, 1, 1, 1, 0, 0, 3, 4, 4, 2, 0, 0, 4, 4, 0, 2, 3, 3, 4, 2, 1, 4, 1, 1, 1, 3, 3, 3, 4, 0, 0, 4, 0, 2, 4, 0, 0, 4, 2, 2, 2, 0, 1, 0, 1], [1, 2, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 3, 2, 2, 3], [3, 5, 4, 0, 3], [0, 1, 2, 2, 1, 1, 0, 0, 1, 2, 1, 1, 0, 0], [3, 2, 1, 3, 2, 0, 1, 3, 1, 1, 0, 0, 2, 2, 0, 2, 3, 0, 3, 2, 3], [5, 18, 4, 4, 22], [24, 25, 0, 20], [3, 7, 3, 2, 9, 8], [1, 1, 10, 15, 24, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 3, 8, 0, 4, 0, 0, 2, 1, 4, 1, 2, 1, 0, 0, 2, 30, 30, 24, 2, 105, 23, 32, 14, 10, 27, 21, 0, 84, 19, 5, 14, 21, 5, 4, 6, 6], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveChr(int(56.0)).endswith(\"\"\\\\\\n3\"\"[len(in1):max(saveOrd(s1), ( len((s0.lstrip(getCharFromString(\"\"y\"\", i2)).capitalize() + s0)) + int(1.0) ))]):{:\\nin2 = s0\\nif b0:{:\\ns0 = \"\"\\\\\\n\"\"[:saveOrd(\"\"7F\"\")]\\n:}\\ni0 = saveOrd(getCharFromString(s0, int(5.0))[int(9.0):].strip(((s2 + (\"\"z\"\" + (getCharFromString(s2, i2)[min(i1, ( int(8.0) * min(int(6.0), i0) )):] + in2[:( len(\"\"\"\\\\\"\"\") * int(8.0) )]))) + \"\"au\"\")))\\ns1 = (getCharFromString(in0, saveOrd(getCharFromString(\"\"S\"\", ( int(2.0) - i2 ))[:i2])) + \"\"E\"\"[mod(divInt(abs(saveOrd(\"\"3\"\")),int(4.0)),int(7.0)):int(9.0)])\\nif ( ( i0 * len(\"\"2E\"\") ) - ( i2 * divInt(max(int(4.0), i2),int(2.0)) ) ) == i0:{:\\ns2 = in1\\ns0 = in1\\nb1 = (getCharFromString(getCharFromString(in2[mod(max(mod(abs(i1),abs(( divInt(i1,int(9.0)) + divInt(i1,i2) ))), len(in1)),int(5.0)):min(min(i2, ( i0 * int(1.0) )), int(1.0))], int(5.0)), int(65.0)) + getCharFromString(s2.capitalize(), max(divInt(min(( int(2.0) + i2 ), int(9.0)),int(2.0)), abs(i0)))).endswith(((\"\"9\"\"[len(\"\",\"\".capitalize()):].rstrip(\"\"W\"\") + \"\"?\"\") + (((in1.lstrip() + in1) + in2.capitalize()) + in0.capitalize()[:len(s1)]))[:mod(min(saveOrd(in0[int(2.0):int(6.0)][i2:int(8.0)][:i2].lstrip(\"\"8\"\")), ( abs(int(8.0)) * ( abs(saveOrd(s2)) + abs(i1) ) )),( mod(int(7.0),i2) - saveOrd(\"\"%\"\") ))])\\n:}else:{:\\ni1 += int(3.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [], [1], [1], [], [], [], [1], [0, 0], [1, 1], [], [2, 4, 3, 1, 1], [2], [], [2], [1, 1], [], [14, 19], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 2, 0, 5, 1, 0, 1, 2, 0, 2, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (\"\"o\"\" + \"\"t\"\").capitalize()[int(2.0):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1, 1, 0, 1, 1, 2, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 2, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 0, 3, 1, 1, 2, 0, 3, 2, 0, 3, 3, 2, 2, 0, 0, 3, 2, 0, 2, 0, 0, 3, 1, 1, 0, 3], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [3, 3, 2, 0, 1, 0, 1, 2, 1, 3, 0, 4, 2, 0, 1, 2, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2, 2], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0, 3], [17, 22], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 20, 0, 77, 23, 19, 14, 9, 7, 3, 1, 16, 3, 1, 4, 3, 2, 0, 0, 1], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[divInt(i0,abs(( i2 + int(0.0) ))):( int(7.0) + min(i2, divInt(( divInt(int(5.0),i0) * ( max(( i1 - min(max(divInt(( i2 + divInt(abs(int(7.0)),i1) ),int(7.0)), int(1.0)), i2) ), i0) * divInt(int(7.0),max(( len(saveChr(i0)) - ( ( mod(int(7.0),int(9.0)) - divInt(int(8.0),i2) ) * int(5.0) ) ), min(saveOrd((\"\"R\"\" + in1.rstrip())), i1))) ) ),abs(int(0.0)))) )], int(4.0))[( i1 + min(( i0 + max(abs(( mod(i1,i1) - abs(( i2 * ( i1 * i0 ) )) )), max(int(8.0), int(59.0))) ), i0) ):saveOrd(\"\"W;\"\")]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 2, 3, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1, 3, 0, 0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 2, 0, 3, 3, 4, 1, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 2, 2, 4], [0, 2, 3, 1], [1, 0], [2, 2, 0, 0, 1, 0, 1], [0, 2], [19], [], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 14, 0, 55, 17, 10, 6, 11, 7, 2, 1, 20, 4, 1, 7, 2, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(getCharFromString(in0[:i0], int(0.0))[abs(mod(i2,int(7.0))):mod(int(5.0),min(i2, ( divInt(( int(7.0) + i0 ),divInt(len((\"\"T\"\" + s0.rstrip()).capitalize()),divInt(( divInt(len(\"\"7\"\"),( int(2.0) + i1 )) * mod(divInt(int(1.0),i2),int(7.0)) ),int(7.0)))) - i1 )))]):i2][( saveOrd(in1) + max(int(9.0), max(i0, divInt(( divInt(int(8.0),int(5.0)) * divInt(int(0.0),i0) ),int(4.0)))) ):] not in saveChr(i0)[:i1][int(8.0):min(i2, i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 4, 4, 3, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 10, 3, 2, 1, 2, 4, 1, 1, 6, 0, 0, 2, 1, 0, 0, 1, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"2\"\":{:\\nres0 = in2 == in1[min(len(in1), mod(mod(i0,( i0 + int(3.0) )),i2)):][int(7.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [0, 0], [2], [0, 0], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [8, 1, 2, 1, 5, 3, 6, 4, 1, 0, 0, 8, 2, 5, 5, 5], [2, 0, 1, 1, 2, 2, 1, 2, 2, 2], [], [2, 1, 2, 2, 2, 3, 1, 2, 0, 1, 2, 0, 3, 0, 3, 3, 0, 1, 3, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 2, 3, 3, 1, 1, 1, 3], [1, 1, 0, 1, 0, 0, 0, 1], [0, 4, 3, 0, 4, 1, 0, 3], [2, 0, 0, 0], [0, 1, 1, 0], [3, 5, 0, 2, 2, 5, 2, 1, 3, 1], [1, 1, 0, 0, 1], [0, 0], [0, 3, 3, 0, 2, 4, 4, 2, 1, 0, 2, 4, 3, 3, 0, 2, 1, 2, 4, 0, 3, 2, 0, 2, 1, 0], [1, 1, 2, 0], [], [0, 0, 2, 0, 2, 1, 2], [1, 2, 3, 1, 2], [], [8, 21], [8, 8], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 10, 0, 37, 8, 8, 4, 4, 10, 5, 2, 26, 4, 0, 7, 5, 0, 2, 2, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2:{:\\nloopBreak% = 0\\nfor s0 in ((s2 + saveChr(divInt(int(8.0),mod(( mod(min(int(1.0), ( i2 * int(2.0) )),( i0 + saveOrd(saveChr(i1)) )) + len(\"\"i\"\"[min(i1, int(1.0)):saveOrd(s2)]) ),i2)))[int(53641.0):i2]) + ((in2 + \"\"8\"\"[( i1 + int(0.0) ):i2]) + getCharFromString(s2, int(0.0))[i2:]).capitalize()[int(82.0):]):{:\\ns1 = (in0[:i2] + \"\"[v8\"\"[divInt(max(min(int(5.0), int(5.0)), int(5.0)),len(s1)):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 0, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 3, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [1, 0, 3, 0, 2, 2, 1, 2, 2, 3, 2, 1, 1, 3, 1, 2, 2, 0, 3, 1, 0, 0, 1, 0, 1, 1, 3, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 2, 0, 4], [1, 1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 6], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 2, 1, 6, 1, 2, 3, 2, 1, 0, 10, 10, 8, 0, 30, 7, 5, 4, 3, 6, 2, 1, 16, 3, 1, 5, 2, 2, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[int(9.0):][i2:]:{:\\nres0 = in1[min(i2, mod(( int(7.0) + ( divInt(len(in1),( int(5.0) + int(7.0) )) * abs(int(3.0)) ) ),divInt(( i2 - min(int(1.0), i0) ),i1))):int(7.0)] not in getCharFromString(s2[:i2], int(7.0))[int(9.0):len(saveChr(i1))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( i2 != int(8.0) or ( (\"\"R\"\" + s0.rstrip()).endswith(\"\"G\"\") and True ) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 3, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [1, 5, 4, 5, 3, 0, 4], [1, 0, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 1, 1, 2, 0], [17, 20], [8, 4], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 10, 10, 9, 0, 39, 9, 11, 2, 7, 6, 5, 0, 17, 4, 1, 4, 5, 2, 2, 1, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s1[len(in2):] not in in1[len(in2):]:{:\\nres0 = ( i0 != int(0.0) or ( getCharFromString(saveChr(abs(mod(i2,int(5.0))))[mod(int(5.0),min(i2, divInt(divInt(( int(7.0) + i0 ),divInt(len((\"\"R\"\" + in0.capitalize()).rstrip()),( i1 + mod(min(max(int(2.0), abs(i2)), max(int(1.0), i1)),int(0.0)) ))),int(7.0)))):i2], i0)[mod(int(1.0),abs(int(8.0))):len(\"\"ie4U\"\")].endswith(s0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [0], [], [0, 2], [], [5], [2], [], [], [], [1, 1, 1, 1], [6, 4, 4, 5], [2, 1, 1], [], [0, 0, 1, 0, 3, 1, 3, 1, 3, 1], [], [4, 1, 3], [], [], [1, 5, 1, 3, 2], [0, 0, 0, 0, 1], [0], [0, 4, 4, 2, 4, 2, 2, 0, 2, 4, 0, 4, 4, 2, 4, 0, 1], [2, 3, 3, 2, 3, 0, 1], [2, 3, 1], [0, 2, 1, 2, 2], [0, 3, 2, 3, 1], [11], [25], [7], [20, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 4, 4, 3, 0, 10, 0, 3, 0, 0, 5, 5, 1, 17, 7, 3, 5, 5, 1, 1, 1, 2], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2:{:\\nb0 = not s1[:i2][i1:].lstrip(in0.capitalize()[int(6.0):])[i1:saveOrd(getCharFromString(saveChr(int(4.0))[max(int(4.0), len(s2)):], int(5.0)).rstrip())].strip().capitalize().endswith(\"\"L;7.z\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [2], [1, 1], [], [0, 0], [], [], [], [3], [0, 1], [0], [], [2], [], [], [], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [4, 6, 0, 9, 3, 9, 1, 6, 6, 5, 9, 8, 7, 6, 1, 9, 5, 2, 9], [2, 0, 0, 0, 1, 2, 1, 2], [0, 1, 1], [2, 2, 3, 2, 3, 3, 2, 0, 0, 1, 2, 2, 3, 1, 1, 1, 1, 0, 2, 2, 1, 2, 0, 1, 0, 1, 1, 0, 3, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1], [3, 2, 1, 4, 2], [1, 1, 2, 0, 2], [1, 0, 1, 0, 1, 1], [], [1], [], [2, 4, 4, 1], [1, 2], [], [0], [0], [3], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 17, 17, 8, 2, 28, 9, 4, 5, 5, 0, 1, 0, 4, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(( len(saveChr(( abs(max(divInt(i0,i0), int(4.0))) - mod(divInt(saveOrd(\"\"D\"\".capitalize()),int(60.0)),int(93.0)) ))[int(9.0):int(1.0)]) - i0 ),( ( int(6.0) * mod(i1,int(6.0)) ) + i2 ))\\nloopBreak% = 0\\nwhile not int(5.0) \\ge int(9876195.0):{:\\ni1 *= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 1, 0], [], [0], [], [], [0, 2, 1, 3], [5, 1], [0, 0, 2, 1, 1], [0, 0], [5], [2, 3, 3], [1], [], [], [1, 1, 1, 1, 1, 1, 0, 1], [7, 0, 6, 0, 3, 0, 0, 8], [2, 0, 1, 0, 1, 1, 0], [0], [0, 1, 3, 2, 2, 3, 2, 2, 1, 2, 0, 1, 1, 1, 1, 0, 1, 0], [1, 0, 1, 0, 1], [2, 0, 2], [2, 0], [1, 1, 1, 1], [3], [0, 1], [], [0, 1], [], [], [], [0, 3], [15], [], [], [27]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 2, 2, 5, 2, 1, 2, 1, 0, 0, 8, 8, 5, 1, 18, 5, 2, 2, 3, 1, 2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not ( in0.endswith(\"\"P\\\\\\\\\"\") or i2 != int(7.0) )\\ni0 = abs(mod(( min(mod(( int(0.0) * mod(i1,int(6.0)) ),int(0.0)), int(3.0)) + int(0.0) ),i0))\\nb2 = int(08.0) \\g i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 0, 2, 0, 2, 0, 2, 0, 0, 2, 1, 2, 0, 0, 2, 0, 0], [0, 2, 0, 2, 0, 1], [0, 1, 2, 0, 0, 1, 1, 2, 2, 0, 0], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 2, 0, 1, 3, 1], [0, 1, 2, 2], [0, 1, 1, 1, 0, 1, 2, 2, 2, 0, 0, 0, 2], [0, 0, 0, 0], [0, 5, 5, 4], [3, 3, 0, 1, 2], [1, 1], [0], [1], [1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 9, 3, 9, 1, 7, 1, 1, 9, 1, 2, 2, 2, 4, 3, 3, 4, 2, 5, 6, 0, 2, 3, 6, 9, 5, 7, 5, 7, 3, 8, 7, 8, 0, 9, 7, 3, 8, 2, 7, 4, 8, 1, 0, 2, 2, 8, 5, 0, 7, 0, 6, 3, 0, 3, 8, 1, 2, 0, 8, 0], [1, 2, 2, 0, 1, 2, 0, 1, 2, 0, 2, 2, 2, 1, 1, 2, 0, 1, 2, 2, 0, 2, 0, 1, 1, 2, 0, 0, 1, 0, 1, 2, 1, 1, 0, 1, 0, 0, 1, 2, 1, 0, 1, 0, 0, 1, 1, 1, 1, 2, 2, 1, 0, 2, 1, 1, 2, 2], [1, 1, 1], [3, 0, 2, 2, 1, 0, 1, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 2, 2, 0, 1, 0, 1, 0, 1, 3, 3, 0, 3, 3, 2, 0, 0, 3, 3, 1, 2, 1, 3, 2, 0, 2, 1, 2, 0, 2, 2, 0, 2, 2, 2, 1, 2, 2, 2, 0, 2, 2, 3, 0, 3, 2, 0, 0, 3, 0, 2, 0, 3, 1, 0, 0, 0, 0, 2, 3, 2, 0, 1, 2, 3, 3, 0, 3, 3, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 0, 3, 3, 0, 3, 3, 0, 3, 3, 3, 3, 1, 0, 3, 2, 1, 0, 3, 0, 2, 1, 3, 3, 1, 0, 3, 3, 2, 2, 0, 3, 1, 2, 1, 3, 3, 1, 0, 3, 1, 3, 0, 0, 1, 1, 2, 1, 1, 0, 2, 1, 3, 1, 1, 2, 3, 1, 3, 2, 0, 3, 2, 1, 2, 2, 2, 3, 3, 3, 2, 0, 2, 0, 3, 3, 3, 0, 1, 2, 2, 1, 0, 3, 3, 2, 3, 3, 3, 0, 1, 0, 3, 3, 0, 3, 2, 3, 0, 3, 0, 1, 2, 2, 3, 3, 3, 3, 1, 0, 3, 2, 2, 1, 1, 3, 1, 0, 1, 3, 1, 1, 0, 2, 0, 1, 1, 2, 3, 0, 1, 0, 1, 0], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [1, 3, 2, 3, 2, 3, 3, 4, 2, 2, 4, 1, 0, 3, 1, 3, 0, 1, 0, 1, 1, 2, 2, 0, 2, 0, 0, 1, 4, 1, 2, 2, 4, 3, 0, 1, 4, 4, 2, 1, 4, 2, 3, 3, 1, 1, 3, 0, 4, 3, 1, 3, 0, 3, 2, 3, 1, 3, 3, 3, 3, 2, 2, 0, 1, 4, 0, 0, 3, 4], [2, 1, 2, 0, 1, 1, 1, 2, 1, 1, 2, 0, 1, 0, 1, 1, 0, 0, 2, 1, 0, 2, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [5, 4, 1, 3, 0, 5, 2, 5, 1, 1, 5, 1, 4, 4, 4, 5, 5, 3, 4, 0, 1, 2, 5, 4, 1, 3, 3, 1, 4, 0, 5, 5, 5], [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0], [3, 3, 3, 0, 2, 2, 1, 3, 4, 4, 0, 0, 1, 3, 0, 3, 1, 2, 0, 0, 4, 4, 1, 1, 4, 0, 3, 0, 0, 3, 4, 2, 1, 0, 4, 4, 0, 1, 1, 4, 1, 3, 1, 2, 2, 2, 1, 4, 0, 4, 4, 1, 2, 0, 1, 4, 0, 2, 0, 2, 0, 4, 2, 4, 2, 2, 2, 2, 1, 4, 1, 4, 2, 1, 0, 1, 0, 2, 0, 4, 2, 0, 2, 2, 1, 1, 0, 4, 1, 1, 4, 2, 2, 4, 4, 0, 0, 1, 2, 0, 0, 4, 4, 3, 1, 0, 4, 4, 4, 4, 0], [3, 2, 0, 3, 2, 2, 3, 1, 3, 2, 2, 3, 0, 2, 1, 0, 3, 1, 1, 1, 2, 2, 0, 0, 3, 0, 0, 1], [2, 2, 4, 1, 4, 4, 0], [2, 2, 1, 1, 1, 0, 2, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 2, 2, 2, 2, 0, 0], [1, 2, 0, 1, 2, 3, 0, 3, 3, 2, 3, 2, 3, 2, 2, 3, 1, 0, 1, 3, 3, 2, 2, 2, 3, 2, 2, 0, 0, 1, 0, 2, 3, 0, 1, 2], [12, 23, 0, 13, 2, 25, 25], [13, 4, 17, 11, 2, 3], [9, 2, 6, 4, 5, 2, 5, 0, 3, 6, 9, 3, 8], [13, 21, 13, 30, 18, 8, 8, 13, 26, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 17, 17, 6, 11, 3, 9, 0, 0, 6, 4, 13, 4, 4, 5, 2, 1, 1, 61, 61, 58, 3, 228, 52, 70, 32, 23, 33, 36, 3, 111, 28, 7, 23, 36, 7, 6, 13, 10], "tree_depth": 81, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( max(i1, mod(divInt(int(0.0),i2),int(9.0))) \\l int(3.0) or int(9.0) \\g int(1.0) )\\ni2 *= int(7119.0)\\nloopBreak% = 0\\nfor in2 in (((in1 + \"\"n9\"\"[int(12.0):][i0:]) + (s1.capitalize().strip() + in0)) + \"\"M\"\"):{:\\ns0 = (in2 + (\"\"e2\"\" + s2[:len(in2)]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile abs(len(getCharFromString(\"\"*X\"\".strip(), abs(( ( i1 - int(2.0) ) * i2 ))))) == int(24.0):{:\\nb2 = ( i0 == int(334.0) or \"\"<\"\" in s1.capitalize() )\\nloopBreak% = 0\\nfor s1 in (in2 + s1):{:\\nb0 = (\"\"*\"\"[:len(in1)].capitalize() + saveChr(len(in1)).rstrip(\"\"6\"\")).endswith(\"\"_\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += i2\\nloopBreak% = 0\\nwhile \"\"4/\"\".rstrip().endswith((\"\"52\"\" + \"\"%r\"\"[saveOrd(in1.capitalize()):][abs(( i0 - i2 )):abs(saveOrd(\"\"A\"\".rstrip(in2[:int(2.0)]).capitalize()))][:mod(int(5.0),max(( i2 - mod(int(6.0),divInt(i2,mod(mod(i1,divInt(( ( int(0.0) - ( mod(divInt(i1,mod(( min(i2, len(\"\"l\"\")) * mod(i0,i1) ),max(i2, mod(i2,len(getCharFromString(in2, int(2.0))))))),i0) - i2 ) ) - i0 ),i1)),( min(mod(i1,int(3.0)), divInt(max(min(i2, max(max(i0, ( i0 * int(6.0) )), abs(int(9.0)))), abs(int(5.0))),( ( i1 + min(abs(i0), min(min(i1, max(saveOrd(in0[max(abs(int(7.0)), i2):abs(divInt(int(5.0),i1))]), saveOrd(in1[i1:( int(7.0) - len(saveChr(min(int(3.0), i0))[:max(saveOrd(\"\"%\"\"[mod(( i1 + saveOrd(getCharFromString(\"\"*\"\", int(8.0))) ),( int(7.0) - abs(max(int(8.0), i0)) )):saveOrd(\"\"5\"\"[:int(0.0)].rstrip(s0))][:abs(i0)][i1:int(9.0)][int(7.0):( int(3.0) - int(8.0) )]), i2)].capitalize()) )]))), ( int(2.0) + len(\"\"0\"\") ))) ) + int(7.0) ))) * int(4.0) )))) ), ( len(s1) - int(8.0) )))])):{:\\ni1 += max(( i0 * max(( int(1.0) * divInt(( mod(len(s2[min(saveOrd(saveChr(mod(i1,divInt(i0,len(in2[max(len(\"\"3\"\"[i0:][int(0.0):]), ( ( int(2.0) * i1 ) + min(len(\"\"[\"\"), ( abs(len(in1)) - max(i1, int(2.0)) )) )):]))))), i1):len(saveChr(len(\"\"6\"\")))]),i1) - len(\"\"9\"\") ),( len(saveChr(i2)) * abs(i2) )) ), int(8.0)) ), ( divInt(abs(min(max(saveOrd(s1.capitalize().capitalize()[int(5.0):i1][min(( mod(int(0.0),int(7.0)) + min(int(0.0), i0) ), int(6.0)):]), len(in0)), int(3.0))),int(0.0)) * i2 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in0 in \"\"NCcZ3_Zd\"\":{:\\ns1 = in1[( i1 - int(3.0) ):int(8120.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = in2\\nif b1:{:\\nres0 = True\\n:}else:{:\\nb1 = not getCharFromString(getCharFromString((\"\"8\"\" + in2), ( saveOrd(getCharFromString(getCharFromString(saveChr(i1), int(8.0)), i2).lstrip()) + int(0.0) )), i2).startswith(in2)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 1, 0], [2], [0, 0, 2], [], [0], [], [], [1, 2], [3, 1], [0, 2, 1], [0, 0], [5], [1], [], [1], [], [1, 1, 1, 1, 1], [0, 8, 9, 8, 5], [1, 2, 0, 1, 2, 1, 2, 2], [], [2, 0, 3, 0, 2, 1, 0, 2, 0, 3, 1, 3, 0, 3, 0, 0, 1, 3, 0, 2, 2, 0, 1, 1], [1, 1, 0, 0, 0, 1], [4, 1, 4, 0, 1, 2], [2, 0, 2, 1], [1, 1], [1, 1], [1], [], [0, 1], [], [], [], [0], [16], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile False:{:\\nb1 = s1.endswith(\"\"Q\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [2, 0, 2, 0, 0, 2, 1, 0, 1, 1], [2, 1, 2], [1, 0, 0, 2, 0, 1, 0], [], [0, 0, 0, 0], [], [], [3, 3, 2, 2], [0, 5], [1, 0, 1, 2, 2, 0, 2], [0, 0], [3, 2, 3], [1, 1], [], [0, 0], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 1, 3, 8, 6, 3, 2, 9, 8, 3, 1, 4, 5, 3], [0, 2, 0, 0, 0, 0, 1, 0, 2, 2, 0, 2, 1, 2, 1, 2, 2, 2, 1, 2], [0, 1], [1, 1, 0, 0, 0, 0, 1, 2, 0, 2, 2, 2, 1, 2, 3, 3, 0, 2, 0, 1, 0, 1, 2, 0, 2, 3, 0, 3, 3, 0, 3, 2, 0, 3, 0, 3, 1, 2, 3, 2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 2, 3, 0, 1, 3], [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0], [2, 1, 3, 1, 2, 3, 3, 1, 4, 2, 4], [0, 2, 2, 1, 1, 0, 2, 0, 1, 1], [1, 1, 1, 0, 1, 0], [4, 2, 3, 3, 2, 2], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [], [1, 0, 1, 3, 4, 1, 2, 2, 0, 1, 0, 1, 2, 2, 0, 2, 2, 1, 0, 2, 1, 1], [3], [1, 0], [0, 2, 2, 2, 2, 1, 0], [2, 3, 3, 0, 0, 0, 2, 1, 0, 0, 1], [17, 18, 15, 5, 17], [1, 4], [8, 5], [19, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 3, 7, 0, 4, 0, 0, 4, 2, 7, 2, 3, 2, 0, 2, 1, 14, 14, 20, 2, 54, 15, 11, 10, 6, 6, 11, 0, 22, 1, 1, 7, 11, 5, 2, 2, 2], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(6.0) \\l int(13.0):{:\\ni0 = i2\\nif True:{:\\nres0 = i0 != i0\\n:}else:{:\\nres0 = \"\"8\"\" != in1\\nloopBreak% = 0\\nwhile \"\":\"\" == (\"\"&RS\"\".rstrip() + s2[i0:][int(86.0):( i0 + mod(mod(( int(3.0) * ( abs(max(i1, mod(i0,int(2.0)))) * i2 ) ),int(9.0)),divInt(i2,( len(\"\"P\"\") - i0 ))) )]):{:\\nin0 = in0\\nb2 = True\\ni2 -= max(abs(i1), len(\"\"5\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = s2[mod(i2,len(\"\"b\"\"[:i1][max(int(8.0), ( saveOrd(s2) + ( i2 * ( int(3.0) + divInt(( int(1.0) - i2 ),i2) ) ) )):])):][i1:] != \"\"FR\"\"[( abs(i2) - int(453.0) ):saveOrd(\"\"e\"\")]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 0, 1], [1, 2], [0, 1], [], [0], [], [], [2], [4, 3, 5], [1, 1, 1], [0, 0, 0], [1], [], [], [], [0], [1, 1, 1, 1, 1, 0, 1, 0, 1], [8, 4, 7, 9, 7, 4, 3, 6, 9], [2, 1, 1, 1], [1], [0, 1, 1, 1, 2, 3, 1, 2, 3, 1, 0, 1, 3, 1, 0], [1, 0], [1, 4, 0], [1, 1], [0], [2, 2], [1], [], [1, 0, 4, 0, 0], [2, 2], [], [1], [2], [], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 1, 9, 9, 4, 1, 15, 2, 3, 2, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i2 \\le int(8.0):{:\\nloopBreak% = 0\\nwhile int(4.0) \\ge int(7.0):{:\\nb2 = divInt(max(int(9.0), ( saveOrd(\"\"8\"\") - int(7.0) )),i1) != int(43.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 -= min(int(69.0), i1)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [2, 0, 0, 1], [0], [0, 1, 1], [0], [0, 0], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [0, 1, 0, 0, 1, 1, 1, 1], [4, 6, 2, 2, 5, 4, 3, 1], [2, 2, 1, 0, 2, 1, 1, 0], [1, 1], [1, 3, 2, 3, 0, 0, 3, 0, 1, 2, 3, 2, 1, 0, 0, 1, 1, 3, 0], [0, 0, 1], [1, 2, 0, 4, 3], [1, 0, 2, 2], [1], [5, 5], [1, 0, 0, 1], [0], [4, 4, 4, 2, 3, 1, 3, 4, 2, 4, 2, 1, 0], [2, 2, 1, 2, 1], [], [2, 1, 0], [0, 3, 2, 2], [20], [], [3, 3], [10]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 8, 8, 8, 2, 19, 3, 5, 4, 1, 2, 4, 1, 13, 5, 0, 3, 4, 1, 0, 2, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in saveChr(int(46.0)).capitalize().capitalize():{:\\nb2 = b0\\ni2 -= max(( abs(i2) + i1 ), min(i0, int(225.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= ( saveOrd((\"\"U\"\" + (saveChr(mod(int(4.0),i1))[:i1].capitalize() + \"\"\"\\\\\"33\"\"[int(3.0):int(1.0)]))[len(in2):]) * i0 )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 0, 1, 0, 1, 1, 2, 0], [0, 2, 0, 1, 2, 2, 2, 2], [1, 1, 0, 1, 1, 2, 2, 1, 0, 1, 1, 0, 1], [0, 0], [0, 0, 0, 0, 0, 0], [], [], [2, 1, 2], [2, 4, 0, 1, 1, 2], [2, 2, 1, 2, 0, 1, 0, 1, 1, 2, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [0, 4, 1, 4], [1, 3, 2, 2, 3], [0, 0], [1], [1], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 3, 9, 5, 9, 8, 3, 3, 6, 0, 1, 0, 8, 5, 1, 0, 1, 0, 1, 7, 8, 7, 6, 1, 4, 4, 3, 2, 5, 2, 9], [2, 2, 1, 0, 0, 0, 1, 1, 0, 0, 1, 2, 2, 0, 2, 1, 1, 2, 0, 1, 2, 0, 2, 1, 1, 2, 2, 2, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0], [3, 1, 0, 0, 0, 3, 1, 1, 1, 1, 0, 0, 2, 1, 0, 0, 1, 1, 2, 1, 1, 2, 1, 2, 3, 1, 1, 1, 1, 2, 3, 0, 2, 3, 0, 1, 1, 3, 2, 2, 0, 0, 0, 3, 3, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 0, 3, 1, 0, 0, 1, 0, 1, 1, 3, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0], [3, 1, 2, 2, 2, 2, 2, 0, 3, 0, 3], [1, 1, 1, 2, 2, 1, 2, 2, 0, 1, 1], [0, 1, 0, 0, 1, 1], [5, 2, 3, 2, 5, 1, 1, 5, 4, 3, 1, 5, 5, 4], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0], [0, 1, 4, 2, 3, 3, 2, 2, 4, 2, 0, 1, 0, 1, 2, 3, 4, 0, 0, 4, 1, 2, 1, 0, 1, 0, 1, 2, 0, 4, 1, 2, 0, 0], [2, 3, 2, 3, 1], [2, 3], [0, 2, 0, 2, 0, 1, 1, 2], [0, 3, 0, 3, 2, 0, 2, 2, 3, 2, 3, 2, 0, 3, 0], [7, 20, 5, 24, 10], [], [6, 8, 1, 0, 6], [14, 30, 21, 5, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 21, 21, 8, 13, 2, 6, 0, 0, 3, 6, 15, 6, 4, 5, 2, 1, 1, 31, 31, 30, 8, 69, 13, 11, 11, 6, 14, 15, 2, 34, 5, 2, 8, 15, 5, 0, 5, 5], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= len(in2)\\ni2 = int(0.0)\\nb2 = \"\"H\"\" in ((s2[i1:].strip()[i0:i0][max(int(3.0), int(9.0)):] + \"\"+\"\") + in0)[int(59.0):int(8.0)].capitalize()\\ni0 = i1\\ni1 -= i0\\nloopBreak% = 0\\nfor s2 in \"\"U\"\":{:\\nloopBreak% = 0\\nwhile (in2.capitalize() + s1)[divInt(int(33.0),i0):i1].startswith(\"\"_6\"\".lstrip(\"\"F\"\"[:int(6.0)])):{:\\ns1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in \"\"8\"\":{:\\nif int(0108.0) == ( int(5.0) - int(10.0) ):{:\\nloopBreak% = 0\\nwhile in0 not in \"\"1<0\"\":{:\\ns1 = in2[:( int(1.0) * mod(abs(int(0.0)),int(1.0)) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile int(7.0) \\le int(8.0):{:\\ni2 = divInt(abs(i2),( abs(i0) * int(7.0) ))\\nb1 = ( int(6.0) \\l abs(( divInt(i2,i1) - i1 )) and abs(min(( mod(len(saveChr(i2)),i0) * mod(( int(1.0) * i1 ),( i2 + min(int(4.0), i0) )) ), i2)) \\g int(4.0) )\\ni1 -= i1\\ni2 -= int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = \"\"\"6Y(K\"\".startswith(in2[int(2.0):])\\nloopBreak% = 0\\nwhile not not ( len(in1) \\g i2 and i2 == i1 ):{:\\ni0 = int(529.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [1, 3, 9, 4, 2, 3, 5, 1, 3, 7, 0, 1, 0, 1, 3, 1, 0, 9], [2, 1, 1, 0, 0, 1], [], [3, 2, 0, 3, 3, 2, 1, 2, 0, 1, 2, 2, 2, 1, 3, 2, 2, 1, 2, 1, 1, 1, 0, 2, 1, 2, 3, 2, 3, 1, 1, 3, 3, 2, 1, 3, 2, 0, 0, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 2, 3, 0, 1, 3, 0, 0, 2, 4], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [2, 1, 0], [1, 1, 1], [], [2, 2, 0, 4, 4, 1, 2, 0, 4, 3, 1, 1], [0, 2, 2], [0, 2], [1, 0, 2], [2, 0, 0], [4, 1], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 5, 0, 45, 14, 10, 7, 7, 3, 3, 0, 12, 3, 0, 3, 3, 2, 0, 1, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1[max(divInt(i2,abs(len(getCharFromString(\"\"1\"\".capitalize(), divInt(int(1.0),mod(i1,int(3.0))))))), mod(mod(( int(9.0) + min(( ( int(4.0) + mod(int(2.0),int(3.0)) ) * int(5.0) ), i1) ),( int(1.0) * ( max(( len(s0[int(3.0):]) * int(7.0) ), min(min(( int(0.0) - abs(divInt(i0,i0)) ), int(1.0)), int(0.0))) * int(13.0) ) )),int(1.0))):int(09.0)][:saveOrd((\"\"E\"\" + \"\"B\"\").capitalize())]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1, 5, 5, 6, 1, 0, 7, 3, 8], [2, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 0], [1], [1, 2, 0, 0, 2, 3, 2, 2, 1, 2, 1, 2, 2, 2, 0, 0, 3, 2, 2, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0, 3, 3, 1, 2, 2, 2, 0, 3, 0, 1, 1, 2, 0, 2, 0, 2, 3, 1, 3, 3, 2, 0, 1, 1, 2, 0, 3, 2, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [1, 2, 4, 0, 2, 1, 3, 1, 0, 3, 0, 2], [2, 0, 2, 1, 2, 2, 2, 0, 2, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [1, 1, 0, 4], [1], [], [2, 4, 0, 4, 3, 0, 2, 0, 2, 4, 4, 4, 1], [1, 0, 2, 2, 2], [], [1, 2, 2], [3], [], [], [], [7]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 21, 16, 1, 71, 25, 12, 10, 16, 4, 1, 0, 13, 5, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(4.0)\\ns1 = saveChr(divInt(i0,i0))[:divInt(max(mod(divInt(int(0.0),divInt(int(0.0),divInt(divInt(divInt(i0,i2),abs(divInt(( saveOrd(s1) + int(7.0) ),( int(3.0) * min(int(6.0), int(1.0)) )))),divInt(( int(4.0) - i0 ),abs(( ( int(3.0) * mod(i0,i2) ) * int(0.0) )))))),int(4.0)), i0),max(len(getCharFromString((s0 + in1[int(8.0):]), divInt(( mod(i2,max(i0, int(1.0))) * int(5.0) ),( i1 + mod(i0,( min(int(5.0), len(\"\"$\"\".capitalize().capitalize().capitalize()[min(( i2 * int(6.0) ), int(1.0)):])) * divInt(i0,abs(mod(i0,int(0.0)))) )) )))), int(738.0)))]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0], [3, 0, 2, 0, 3, 1, 1, 3, 1, 3, 3], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [5, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0, 0, 3], [6, 17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 10, 1, 49, 15, 11, 6, 9, 6, 3, 1, 15, 3, 1, 3, 3, 2, 0, 0, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):min(abs(i0), min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in1[i1:]) )))]:{:\\nres0 = in0 not in \"\"G\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = divInt(divInt(( int(7.0) + i0 ),( max(int(7.0), i1) - max(len(getCharFromString(\"\"R\"\"[divInt(int(1.0),i2):divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i1)], i2)), ( int(8.0) - len(saveChr(mod(len((\"\";\"\" + s0.rstrip())),i0))) )) )),( divInt(mod(int(5.0),int(0.0)),( int(4.0) + i0 )) * int(8.0) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 1], [0], [0], [], [], [], [], [4, 5, 1], [0, 1], [], [3, 0, 2, 3, 0, 1], [], [], [2], [0, 2], [13], [], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 0, 6, 0, 0, 1, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (in2 + (s1 + \"\"N2\"\")[i1:])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 2, 1], [0], [2, 0, 1, 0, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [2, 5], [0, 1, 0], [0, 0], [], [1, 0], [], [0], [], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [5, 7, 3, 3, 2, 9, 8, 5, 1, 5, 2, 3], [2, 0, 1, 2, 2, 0, 0, 2], [1], [3, 1, 0, 0, 2, 1, 3, 2, 1, 3, 2, 2, 3, 2, 0, 0, 1, 3, 3, 2, 1, 0, 1, 2, 2, 3, 2, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 0, 1, 0], [4, 2, 1, 1, 1, 4, 2], [0, 2, 0, 0, 1], [0, 1, 0, 1, 1], [2, 2, 3, 0, 5], [0, 0, 0, 0, 1], [0], [0, 2, 0, 4, 2, 1, 0], [2], [], [2, 2], [3, 1, 2, 3, 0], [1], [10], [9], [10, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 1, 5, 1, 2, 0, 0, 4, 1, 3, 1, 0, 2, 0, 1, 0, 12, 12, 8, 1, 31, 9, 7, 5, 5, 5, 5, 1, 7, 1, 0, 2, 5, 1, 1, 1, 2], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s2\\nb0 = True\\ni2 += saveOrd(in0[int(5.0):])\\nb2 = i0 == i1\\nloopBreak% = 0\\nfor s0 in \"\"\"\\\\\"k9#B\"\"[divInt(int(7332.0),abs(mod(int(98.0),max(divInt(mod(max(( i2 * i2 ), int(5.0)),max(saveOrd(in2), ( int(1.0) + i0 ))),int(5.0)), ( mod(abs(( i0 + i2 )),int(2.0)) - int(3.0) ))))):].capitalize():{:\\nres0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [2, 1, 2, 0], [0, 2], [2, 0], [0], [0], [], [], [1], [5], [1, 2], [0], [0], [], [], [0], [], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [5, 5, 0, 4, 6, 4, 8, 0, 3, 6, 5, 7], [1, 2], [], [1, 2, 3, 3, 0, 1, 2, 1, 3, 0, 1], [1, 0], [2, 3, 1], [0], [1], [1, 5, 3, 2, 1], [0, 1, 0, 0, 0, 0, 0, 1], [0], [0, 0, 3, 3, 4, 0, 1, 4, 1], [1, 1], [], [], [0, 3, 2, 3, 3, 1, 1, 0], [13, 10], [7, 16], [4], [12, 0, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 2, 0, 11, 2, 3, 1, 1, 5, 8, 1, 9, 2, 0, 0, 8, 2, 2, 1, 3], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2:{:\\nin0 = s2\\nloopBreak% = 0\\nwhile int(5.0) != mod(abs(len(((saveChr(i1) + s1) + \"\"N)\"\"))),int(50464803.0)):{:\\nb1 = saveChr(( int(65.0) + max(i2, int(7.0)) )) in \"\"4&hqK\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [3, 3], [], [0], [0], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [3], [0, 0, 1], [], [1], [], [], [], [3, 0, 3], [24], [], [], [12, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 1, 0, 0, 0, 3, 1, 0, 0, 2], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\")Y>\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [2, 0, 1, 2, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 4, 4, 5], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0, 3, 2, 0, 1], [0, 1, 3, 3], [1, 0], [1, 2, 0, 0, 1], [0, 2, 0], [17, 4], [], [8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 8, 8, 10, 0, 34, 9, 7, 5, 4, 8, 3, 1, 21, 4, 2, 5, 3, 2, 0, 1, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[:len(in1)]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] not in getCharFromString(saveChr(i0)[int(0.0):abs(mod(i1,int(0.0)))], i2)[int(5.0):saveOrd((\"\"R\"\" + in1.lstrip()).rstrip())]:{:\\nb1 = ( i2 != mod(( divInt(int(7.0),i1) * ( len(\"\"8\"\") + divInt(i2,( min(( int(2.0) - i1 ), ( max(int(1.0), i0) * int(7.0) )) - int(7.0) )) ) ),i0) or ( in1.endswith((in2[:i0] + \"\"E\"\")) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 6, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 3, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 1, 3, 2, 0, 2, 0, 1, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 4, 1, 0, 1], [0, 0, 2, 2, 2, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 3, 3, 1], [17], [16], [], [20, 21, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 6, 0, 26, 7, 6, 4, 3, 6, 5, 1, 16, 3, 1, 5, 5, 1, 1, 0, 3], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(getCharFromString(in0[:i0], int(0.0))[abs(mod(min(int(7.0), mod(int(5.0),len(saveChr(i2)))),( mod(( int(7.0) + i2 ),int(2.0)) + saveOrd((\"\"R\"\" + s0.rstrip())) ))):( i1 * ( i1 * int(5.0) ) )]):int(7.0)][i2:] not in \"\";<)q\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1, 0, 0, 0, 1], [2, 1, 4, 2, 9, 3, 5, 9, 6], [2, 0, 2, 2, 1, 2], [0], [2, 0, 2, 3, 0, 3, 0, 3, 2, 2, 1, 2, 3, 1, 0, 2, 0, 0], [1, 0, 0, 0, 1, 0], [1, 2, 0, 4], [0, 2, 2, 1], [0, 1], [3], [0, 1, 1], [], [2, 1, 1], [], [], [2], [1, 1, 2], [], [2, 20], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 6, 0, 18, 6, 4, 4, 2, 1, 3, 0, 3, 0, 0, 1, 3, 0, 2, 1, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"cu\"\"[divInt(i2,( max(i0, abs(i2)) + min(( ( int(2.0) * mod(saveOrd(\"\"2\"\"),int(1.0)) ) * i2 ), ( i1 - i2 )) )):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 1, 2, 2, 1, 0, 0, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 0, 0, 1], [1, 2, 1, 1, 1], [1, 0, 2, 2, 0, 1, 2, 1, 1, 2, 2, 0, 1, 0, 2], [], [0, 0, 0, 0, 0, 0, 0], [], [], [1, 2, 0, 2, 1, 2], [5, 5, 0, 0], [1, 1, 0, 1, 2, 2, 0, 0, 2, 1, 0, 0, 0], [0, 0, 0, 0], [1, 4, 4], [3, 0, 1, 3, 0, 1], [0, 0], [1, 0], [1, 1, 0, 1], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 7, 8, 6, 9, 4, 6, 3, 5, 3, 4, 9, 4, 0, 4, 6, 5, 2, 1, 2, 8, 0, 4, 8, 5, 2, 0, 6, 0, 9, 6, 2, 2, 5, 3, 6, 0, 8, 0, 8, 7, 3, 1, 8, 4, 6, 5, 3, 8, 9, 1, 6, 2, 9, 1, 9, 7, 4, 1, 7, 9, 4], [0, 1, 0, 1, 0, 2, 0, 0, 1, 1, 0, 1, 1, 1, 2, 0, 2, 2, 0, 0, 0, 1, 0, 1, 2, 2, 2, 1, 2, 2, 0, 0, 1, 0, 2, 1, 0, 0, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 0, 1, 1, 1, 0, 2, 2, 0, 0, 1, 0, 0, 0, 1, 2, 0, 0, 2, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 1, 1], [2, 1, 1, 3, 3, 0, 3, 0, 0, 1, 3, 2, 0, 2, 2, 1, 2, 0, 0, 0, 2, 3, 2, 2, 2, 3, 0, 3, 2, 1, 2, 2, 1, 1, 3, 1, 0, 0, 0, 2, 3, 1, 2, 3, 1, 1, 1, 1, 2, 2, 1, 2, 3, 3, 1, 3, 2, 2, 0, 3, 2, 2, 1, 1, 3, 1, 0, 3, 3, 0, 2, 0, 2, 1, 3, 3, 2, 0, 2, 0, 0, 2, 3, 0, 2, 0, 0, 0, 3, 2, 3, 1, 2, 1, 3, 3, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 0, 3, 2, 2, 2, 3, 0, 3, 1, 0, 2, 2, 2, 2, 1, 1, 3, 1, 3, 2, 3, 1, 3, 2, 2, 3, 3, 1, 3, 3, 3, 1, 0, 2, 0, 3, 0, 3, 0, 2, 1, 2, 0, 2, 0, 0, 2, 2, 1, 2, 0, 1, 3, 3, 2, 0, 3, 3, 3, 0, 2, 1, 3, 2, 1, 3, 2, 1, 3, 1, 0, 2, 0, 3, 3, 0, 0, 2, 2, 0, 0, 0, 0, 3, 1, 0, 0, 0, 3, 0, 3, 2, 2, 1, 2, 1, 0, 3, 2, 0, 2, 0, 0, 2, 0, 2, 0, 3, 1, 3, 1, 0, 1, 0, 3, 0, 0, 2, 0, 1, 3, 3, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 2, 0, 3, 1, 0, 3, 2, 2, 3, 0, 2, 3, 0, 1, 0, 1, 3, 2, 0, 2, 3, 0, 2, 2, 2, 3, 3, 2, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 3, 3, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [2, 4, 1, 1, 2, 3, 4, 0, 0, 4, 1, 4, 2, 2, 1, 1, 2, 2, 0, 2, 4, 0, 0, 0, 4, 4, 4, 4, 0, 4, 2, 1, 1, 3, 1, 0, 1, 2, 0, 1, 0, 4, 4, 0, 1, 4, 4, 4, 2, 1, 1, 4, 4, 1, 3, 1, 3, 3, 0, 3, 2, 0, 3, 3, 1, 0, 2], [2, 1, 0, 0, 1, 0, 2, 2, 0, 0, 1, 2, 1, 1, 1, 0, 1, 2, 1, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 2, 1, 0, 1, 1, 2, 1, 2, 0, 0, 0, 1, 2, 0, 2, 1], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [1, 0, 4, 3, 0, 1, 3, 0, 1, 5, 3, 1, 2, 3, 5, 0, 1, 1, 2, 3, 5, 5, 3, 3], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [], [1, 2, 4, 0, 1, 2, 1, 1, 2, 0, 0, 0, 0, 3, 2, 4, 0, 4, 4, 2, 0, 2, 2, 1, 2, 1, 0, 1, 2, 0, 1, 0, 0, 0, 1, 1, 3, 2, 1, 3, 1, 4, 0, 0, 2, 4, 1, 1, 3, 2, 4, 1, 1, 3, 1, 2, 2, 0, 1, 2, 0, 2, 2, 1, 2, 1, 4, 0, 1, 4, 3, 0, 1, 4, 2, 1], [0, 0, 1, 3, 1, 0, 2, 0, 3, 2], [2, 1], [2, 1, 0, 0, 2, 2, 1, 2, 0, 0, 1, 0, 1, 2, 2, 1, 0, 2, 2], [0, 3, 1, 1, 1, 1, 3, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 2, 2, 1, 3, 0, 0, 3, 1, 0, 1], [10, 18, 19, 21, 11, 11, 15], [4, 13, 8, 23, 20, 25, 14], [6, 0, 8, 9], [21, 14, 20, 7, 13, 14, 25, 11, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 20, 20, 5, 15, 0, 7, 0, 0, 6, 4, 13, 4, 3, 6, 2, 2, 4, 62, 62, 80, 5, 280, 82, 67, 46, 39, 24, 27, 0, 76, 10, 2, 19, 27, 7, 7, 4, 9], "tree_depth": 79, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= ( int(1.0) - int(786.0) )\\nb1 = abs(saveOrd(\"\"K\"\")) != i1\\nif max(i0, i1) != int(9.0):{:\\nloopBreak% = 0\\nwhile ( max(( i0 + ( mod(int(4.0),( i2 + i0 )) - i0 ) ), ( abs(( mod(mod(len(getCharFromString(s1, i1)[saveOrd(\"\"<\"\"):]),( int(6.0) + mod(( int(3.0) * int(5.0) ),min(int(3.0), i1)) )),i0) * i1 )) + divInt(min(int(4.0), divInt(saveOrd(\"\"e\"\"[:int(9.0)]),int(4.0))),int(0.0)) )) \\l int(4.0) and \"\"ni\"\" not in s0[divInt(( int(65.0) + ( max(saveOrd(in1), int(2.0)) - abs(( ( i1 * abs(divInt(divInt(int(1.0),int(2.0)),max(int(8.0), i1))) ) - max(abs(i2), ( i0 - mod(int(0.0),abs(min(mod(i2,mod(i2,i0)), divInt(abs(i0),( i0 - i1 ))))) )) )) ) ),i0):saveOrd(in0)] ):{:\\ns0 = s1\\nin0 = (getCharFromString(s0, divInt(min(int(4.0), ( int(8.0) + min(min(i1, int(5.0)), int(2.0)) )),( ( divInt(( mod(mod(mod(i2,saveOrd(saveChr(divInt(( divInt(saveOrd(s1[i2:].strip()),saveOrd(\"\"x\"\"[:int(0.0)][i2:])) - mod(divInt(divInt(( int(6.0) * int(0.0) ),saveOrd(\"\"+\"\"[int(9.0):])),min(( saveOrd(in2) - int(6.0) ), abs(( ( max(max(int(2.0), len(\"\"S\"\")), max(min(int(2.0), i1), ( i2 * max(i2, abs(i0)) ))) * mod(int(5.0),( i0 - ( i1 - i0 ) )) ) - ( divInt(int(3.0),( i2 + int(6.0) )) + min(max(divInt(i1,min(saveOrd(in0[saveOrd(\"\"T\"\"):i0]), ( int(0.0) - min(divInt(int(8.0),max(mod(int(0.0),saveOrd(s1)), int(8.0))), i0) ))), ( i2 + saveOrd(s2) )), saveOrd(in0)) ) )))),i1) ),i2)))),( divInt(i1,i1) + i1 )),i2) + abs(int(7.0)) ),i1) * i1 ) - i1 )))[max(i2, max(( ( int(3.0) + mod(int(1.0),i1) ) - saveOrd(\"\";\"\") ), ( i0 - ( i1 * i1 ) ))):divInt(i1,mod(i0,saveOrd(\"\"$\"\")))] + (\"\"V\"\"[int(8.0):max(int(4.0), i2)] + (\"\"6\"\" + saveChr(int(6.0)))))\\nb2 = in2.startswith(s0)\\ni2 = i0\\nif b0:{:\\ns1 = getCharFromString(\"\"*\"\", len(\"\"0\"\"))[:i0]\\n:}else:{:\\nif False:{:\\ni1 = i0\\n:}\\ni0 -= mod(i0,int(5.0))\\ns1 = (\"\"+\"\".capitalize()[max(len(\"\"@\"\"), mod(i1,divInt(i2,int(3.0)))):i0] + (\"\"8\"\" + s2[i0:][:( int(8.0) * ( ( i2 + len(\"\"9\"\") ) + int(9.0) ) )]))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin0 = in2[i1:]\\nif \"\"u(LL\"\"[min(divInt(( len(\"\"<\"\"[i0:]) + ( abs(i1) - int(1.0) ) ),i0), int(6.0)):min(( i1 * mod(len(getCharFromString(in2, i1)),( divInt(( len(\"\"z\"\") + max(mod(i1,int(2.0)), int(9.0)) ),int(1.0)) * int(9.0) )) ), i0)][:i0].startswith((in0 + \"\"P\"\").rstrip()):{:\\nb2 = i1 \\l i1\\ni1 -= int(7417.0)\\n:}else:{:\\nb1 = ( b2 and True )\\n:}\\n:}\\nin0 = \"\"o\"\"[min(abs(int(9.0)), int(4.0)):].capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [6, 0, 7, 7, 7, 1, 7, 5, 4, 0, 6], [0, 1, 1, 0, 1, 2, 1, 0, 0, 2, 2, 2], [0], [3, 3, 3, 3, 0, 2, 1, 2, 0, 0, 3, 2, 1, 2, 2, 2, 2, 2, 0, 3, 1, 1, 2, 0, 3, 0, 2, 2, 1, 3, 1, 0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [4, 1, 4, 1, 1, 2, 3, 0, 1, 3, 3, 3, 4, 3, 2, 4, 3], [0, 2, 1, 1, 1, 2, 2], [1, 0, 1, 0, 1, 1], [5, 5, 2, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1], [], [4, 2, 4, 2, 1, 2, 0, 4, 4, 4, 4, 1, 3, 1, 0, 0, 4, 2, 3, 0, 1, 4, 1, 2, 0], [3, 0, 2, 2, 1, 1, 2, 3], [1, 0], [2, 1, 1, 0, 0], [1, 0, 1, 2, 3, 1, 1, 3], [20], [13, 11, 0, 24], [2], [31, 7]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 12, 1, 49, 13, 17, 7, 6, 5, 8, 0, 25, 8, 2, 5, 8, 1, 4, 1, 2], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(getCharFromString(\"\"nUl2\"\"[:max(saveOrd(in2[:max(i1, ( int(6.0) + ( i1 * i0 ) ))]), max(( int(0.0) - mod(divInt(mod(( ( i1 - abs(int(7.0)) ) - int(7.0) ),divInt(i2,len(saveChr(i1).capitalize().capitalize()))),mod(( int(7.0) * min(int(1.0), i0) ),i0)),i2) ), i2))], mod(max(len(saveChr(len(\"\"`\"\"))), len((\"\"a\"\" + in2))),saveOrd(s2)))[( int(7540.0) * len((s0 + \"\"y\"\")[abs(saveOrd(\"\"$\"\".lstrip())):len(s0[int(6.0):i2])].capitalize()) ):].rstrip())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1, 0, 1], [0], [2, 0, 0, 4, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3], [1, 0], [2, 1, 0, 0, 1], [0, 0, 1], [17, 15], [0], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 4, 4, 3, 0, 11, 0, 4, 0, 0, 5, 3, 0, 16, 4, 2, 4, 3, 2, 1, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in getCharFromString(in1, len(saveChr(i0)[int(0.0):abs(int(7.0))][:i1])):{:\\nres0 = ( int(5.0) != i2 or ( in1[int(7.0):saveOrd((\"\"R\"\" + in0.lstrip()).rstrip())].endswith(\"\"Pa\"\") and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 2, 2, 2, 2, 1, 1, 0, 2, 2, 0, 2, 1, 0, 1], [1, 0, 1, 1, 1, 0, 0, 1], [1, 1, 2, 1, 0, 1, 2, 0], [0, 0, 0], [0, 0, 0, 0], [], [], [2, 3, 0, 2], [0, 4], [0, 0, 1, 1, 0, 2, 2], [0, 0], [1, 1], [0, 1, 0], [], [0], [1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [8, 4, 6, 1, 3, 3, 3, 9, 1, 7, 0, 0, 3, 5, 3, 6, 9, 1, 2, 9, 5, 3, 3, 2, 7, 4, 8, 4, 5, 2, 5, 4], [0, 2, 2, 1, 0, 0, 1, 2, 1, 2, 1, 0, 2, 2, 1, 2, 1, 1, 0, 1, 2, 0, 0, 2, 2, 0, 2, 1, 0, 2, 0, 1, 1, 1], [1, 1, 0, 0], [2, 1, 0, 1, 0, 0, 3, 0, 0, 0, 1, 2, 1, 2, 1, 1, 2, 2, 2, 3, 2, 3, 0, 3, 2, 0, 0, 1, 3, 0, 1, 3, 2, 3, 2, 3, 1, 3, 0, 2, 2, 2, 1, 3, 0, 1, 1, 3, 3, 1, 0, 2, 1, 2, 2, 0, 0, 1, 2, 2, 2, 0, 3, 2, 1, 3, 3, 1, 2, 2, 3, 3, 2, 2, 1, 0, 3, 0, 0, 2, 2, 3, 2, 0, 0, 0, 0, 1, 1, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 1, 1, 3, 3, 0, 0, 0, 0, 3, 3, 1, 2, 3, 1, 3, 2, 0, 1, 2, 3, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [2, 0, 3, 4, 2, 1, 1, 2, 0, 4, 2, 3, 0, 3, 3, 3, 1, 0, 0, 2, 2, 3, 0, 1, 1, 4, 3, 1, 3], [1, 1, 2, 1, 0, 1, 2, 0, 0, 1, 0, 0, 2, 2, 1], [1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [0, 3, 3, 1, 5, 4, 5, 3, 4, 3, 0, 1, 2, 3, 3, 4], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0], [4, 2, 2, 2, 4, 2, 1, 1, 0, 2, 2, 1, 4, 4, 2, 2, 0, 0, 0, 0, 4, 2, 2, 0, 2, 1, 1, 4, 4, 0, 2, 0, 2, 0, 1, 4, 0, 1, 1, 0], [0, 1, 3, 1, 3, 0, 3, 1], [4, 5, 2], [2, 0, 2, 2, 1, 2, 2, 1, 0, 2, 2, 1, 2], [1, 1, 0, 0, 3, 1, 3, 2, 0, 1, 2], [3, 0, 17], [22, 12, 1, 23], [3, 1], [23, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 8, 8, 3, 4, 0, 0, 4, 2, 7, 2, 2, 3, 0, 1, 5, 32, 32, 34, 4, 120, 31, 29, 15, 18, 16, 11, 3, 40, 8, 3, 13, 11, 3, 4, 2, 2], "tree_depth": 66, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= mod(int(8.0),i2)\\nif b2:{:\\nloopBreak% = 0\\nfor s0 in getCharFromString(saveChr(int(4.0))[i2:][i1:abs(i0)][i0:], i1):{:\\nif True:{:\\nif int(6.0) \\l divInt(int(1.0),( int(3.0) - int(3.0) )):{:\\nif mod(( divInt(min(( len(\"\"w\"\"[i2:]) * saveOrd(\"\"m\"\") ), ( i1 - i2 )),int(3.0)) + abs(i1) ),int(9.0)) \\le max(mod(max(mod(abs(int(1.0)),min(i0, divInt(mod(mod(int(7.0),saveOrd(in0)),i2),int(0.0)))), int(0.0)),abs(len(\"\"D\"\"[int(3.0):][:i2]))), ( int(5.0) - divInt(mod(i1,i2),int(3.0)) )):{:\\ni1 *= divInt(( mod(i1,min(( int(6.0) + len(saveChr(len(in0[:int(9.0)][divInt(( len(s1) + max(divInt(divInt(int(1.0),i0),min(i1, i2)), ( ( min(mod(i0,i0), i2) - i2 ) + int(2.0) )) ),int(9.0)):])).rstrip(in2)) ), i0)) + int(5.0) ),abs(abs(len(in1))))\\n:}else:{:\\nin2 = in0[( i2 * int(3.0) ):][int(3.0):int(2.0)].strip(\"\"A\"\"[int(7.0):])\\n:}\\n:}\\n:}else:{:\\ni1 = int(4.0)\\n:}\\nloopBreak% = 0\\nfor in1 in \"\">\"\":{:\\nloopBreak% = 0\\nfor in0 in getCharFromString(s0.strip(), min(max(i0, i2), i0)):{:\\nres0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif s1[:i1] not in s2[max(saveOrd(\"\"b\"\"), int(845.0)):]:{:\\ni1 = mod(len(saveChr(int(2.0))),max(( i1 * int(5.0) ), ( len(in0) - int(4.0) )))\\n:}\\n:}\\nin0 = \"\"#3R\"\"\\nb2 = \"\"x1\"\" not in in1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 1, 2, 0, 0], [0, 2], [0, 0, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 0, 2, 2], [0, 0], [1, 5, 4, 2], [3, 3, 1, 3], [1, 0, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 2, 5, 7, 5, 9, 8, 5, 3, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 0, 1, 2, 1, 0, 0, 0, 0, 2], [0, 1, 1], [3, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 1, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1, 0, 2, 0, 3, 2, 2, 3, 3, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 2, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4, 2, 3, 2, 5], [1, 1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 2, 0, 1, 0, 4, 1, 4, 2, 3, 0, 2, 0, 1, 1], [0, 1, 1, 1], [1, 0], [2, 2, 0, 0, 1, 2, 0], [0, 3, 3, 3, 3], [17], [], [], [20, 15, 19, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 2, 1, 9, 1, 4, 4, 3, 1, 0, 19, 19, 14, 0, 60, 17, 11, 9, 8, 11, 5, 1, 27, 4, 0, 7, 5, 1, 0, 0, 4], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[int(0.0):int(4.0)], abs(mod(i0,int(5.0))))[divInt(int(7.0),min(i2, ( divInt(( int(2.0) + i2 ),( int(5.0) + ( i0 * ( i1 - divInt(int(7.0),i0) ) ) )) + int(5.0) ))):len(saveChr(int(9.0)))]\\nloopBreak% = 0\\nwhile ( i1 != min(int(8.0), i2) or ( (\"\"R\"\" + in1[:i1]).endswith(\"\";\"\") and True ) ):{:\\nb2 = ( s2.startswith(saveChr(( int(5.0) * max(int(3.0), min(i0, divInt(divInt(( int(4.0) - int(8.0) ),( int(59.0) - i0 )),int(9.0)))) ))) or \"\",\"\" == saveChr(i0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = (s2 + in2[int(2.0):i0])[( i2 * abs(mod(divInt(saveOrd(\"\":\"\"),saveOrd(\"\")\"\")),int(2.0))) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1], [3, 3, 6], [1], [0], [1, 0, 2, 1, 1], [1], [], [1], [1], [4], [0, 1], [], [3, 1, 2, 4], [1], [], [0], [1, 2], [], [12], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 5, 1, 0, 0, 1, 1, 2, 0, 4, 1, 0, 1, 2, 0, 1, 1, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (\"\"m6\"\" + saveChr(int(3.0))[i1:mod(int(3.0),int(6.0))])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 2, 1, 7, 4, 9, 8, 1, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 0], [0, 1, 1], [3, 3, 3, 3, 3, 2, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 0, 2, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 1, 0, 0, 1], [0], [22], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in \"\"W\"\":{:\\nin2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 1, 1, 0, 0], [0], [0, 2, 2, 1], [0], [0, 0], [], [], [1], [5], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 1, 1], [5, 1, 6, 4, 3, 3], [2, 0, 0, 2, 2, 1, 0], [0], [0, 0, 1, 0, 3, 1, 3, 0, 1, 0, 0], [0], [1, 3], [1], [], [4, 0, 3, 5, 1], [0, 1], [0], [0, 2, 2, 1, 4, 4, 4, 4, 2, 4, 0], [1, 2, 0, 3, 1], [3], [1, 1, 1], [1, 1], [], [6, 11], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 1, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 7, 1, 11, 0, 2, 0, 0, 5, 2, 1, 11, 5, 1, 3, 2, 0, 2, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in s0:{:\\nb1 = i2 != i0\\nin0 = \"\"gl\"\"[:int(5.0)][:i0]\\nin2 = saveChr(max(int(1643.0), len(getCharFromString(saveChr(i2)[:int(3.0)].lstrip(s1), i2).capitalize())))\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 1], [2, 1, 1, 2, 2, 0, 1, 1, 0], [0, 1, 2], [1, 1, 0, 0, 1, 1], [0], [0, 0], [], [], [3, 2], [4], [0, 2, 1, 2, 2, 2], [0], [2, 4, 2, 2], [3], [0], [], [1], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [2, 9, 6, 3, 1, 7, 3, 4, 2, 1, 8, 7, 3, 2, 6, 9], [2, 1, 0, 1, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 2, 2], [0, 0, 0, 0], [1, 0, 3, 1, 0, 1, 0, 0, 1, 0, 3, 2, 1, 3, 0, 3, 0, 2, 0, 0, 2, 1, 3, 1, 0, 0, 3, 0, 0, 3, 1, 0, 3, 0, 3, 0, 2, 3, 3, 1, 2, 1, 1, 1], [1, 1, 1, 1, 1], [3, 0, 4, 3, 2, 2, 2, 3, 0, 2, 1], [1, 0], [1, 1, 1, 1, 0], [4, 4, 1, 0, 3, 2, 2, 4], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0], [4, 2, 0, 2, 4, 4, 1, 0, 1, 3, 4, 1, 2, 3, 2, 4, 2, 1, 1, 4, 1, 2, 2, 3, 1, 4, 2, 4, 0, 1, 3, 3, 3, 0, 2, 1, 0, 4, 4, 1, 2, 0, 0], [2, 3, 2, 0, 1, 0, 3, 1, 3, 1], [2, 1, 5], [1, 0, 0, 0, 1, 1, 2, 1, 1, 2], [0, 1, 2, 3, 3, 3, 2, 3, 1, 3, 0, 1, 2, 2, 2], [1, 3], [2, 13, 0], [8, 5, 5, 7, 4], [18, 31, 16, 4, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 3, 6, 1, 2, 0, 0, 2, 1, 6, 1, 4, 1, 1, 0, 1, 16, 16, 20, 4, 44, 5, 11, 0, 5, 8, 15, 1, 43, 10, 3, 10, 15, 2, 3, 5, 5], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in1[:int(2.0)].capitalize():{:\\ni2 = i1\\ni0 = len(\"\"B\"\".capitalize().strip()[int(9.0):i1])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( s1 == \"\"c8\"\" and int(6.0) \\le i1 ):{:\\nloopBreak% = 0\\nwhile (getCharFromString(\"\"/`-\"\", i2) + (saveChr(int(31.0))[i2:min(mod(int(7.0),saveOrd(\"\"5\"\"[:i2])), len(\"\"!\"\"))] + getCharFromString(\"\"n\"\", i0))[mod(i0,i0):mod(int(34.0),abs(int(21.0)))]).startswith((\"\"^D\"\" + saveChr(i0)[:i1].rstrip())[abs(i1):][:i0]):{:\\nres0 = s0 == \"\"a5\"\"\\nb2 = (((in0 + \"\"7\"\"[:abs(int(8.0))]) + s2) + saveChr(i0).strip(\"\"4\"\")) == s2[len(in1):]\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 = min(i2, mod(abs(max(int(7.0), divInt(int(3.0),int(2.0)))),int(69.0)))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 1], [0, 1, 2, 1, 1, 1], [2], [1, 0, 2, 1, 1], [], [0], [], [], [2], [2], [0, 1, 0, 2], [0], [3], [3, 1], [0], [0], [], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 5, 2, 6, 9, 4, 8, 6, 1, 2, 3, 3, 2, 5, 4, 9, 4, 9, 7, 6], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1], [3, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 2, 2, 0, 2, 0, 3, 3, 0, 3, 3, 1, 3, 2, 1, 2, 0, 3, 0, 2, 2, 1, 2, 1, 1, 3, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0], [4, 0, 4, 3, 2, 4, 4, 4, 2], [1, 2, 0, 0, 0, 1, 2, 2, 0, 1], [0, 1, 0], [5, 2, 2, 1, 0, 1, 3, 4], [0, 0, 1, 1, 1, 1], [], [0, 4, 3, 4, 1, 4, 0, 1, 2, 4, 4, 3, 0, 1, 2, 2, 1, 0, 4, 2, 0, 0, 0], [3, 2, 1, 2, 3, 0], [5, 2], [1, 0, 2, 0], [1, 0, 1, 1, 1, 1], [24], [16, 15, 19, 0, 16], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 1, 5, 0, 1, 0, 0, 1, 1, 4, 1, 1, 2, 1, 1, 0, 20, 20, 12, 3, 39, 11, 9, 10, 3, 8, 6, 0, 23, 6, 2, 4, 6, 1, 5, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= saveOrd(in2)\\nb2 = ( i1 == int(052.0) and True )\\nloopBreak% = 0\\nwhile (\"\"qYp\"\".capitalize() + saveChr(( int(69.0) * min(i0, int(486.0)) ))).strip(s2) != \"\"t\"\":{:\\ns2 = (s1 + \"\"a\"\").strip().capitalize()[:( divInt(int(123325.0),mod(( i0 + ( i0 + saveOrd(\"\"q\"\"[len(s0):][i0:abs(saveOrd(getCharFromString(s1[int(4.0):saveOrd(in0)], ( int(9.0) + ( i0 - saveOrd(in1) ) ))))]) ) ),i0)) * ( divInt(int(4.0),( int(9.0) * int(7.0) )) + abs(i1) ) )]\\ni1 = int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 -= i0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 0, 0], [], [1, 2, 2], [], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 1, 1], [1, 2, 4, 0, 4, 3], [0], [0], [2, 1, 1, 2, 1, 3], [1, 0], [3], [1], [0], [2, 3, 4, 5], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], [], [1, 3, 3, 3, 4, 1, 1, 2, 0, 1, 4, 1, 0], [3, 2], [5], [1], [2, 3, 1, 2, 1, 2, 2, 1, 0, 2, 3, 1, 1], [1], [0, 12, 21, 11, 5], [5, 2, 1, 3, 0], [17, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 1, 1, 6, 2, 1, 1, 1, 4, 13, 0, 13, 2, 1, 1, 13, 1, 5, 5, 2], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = divInt(int(1.0),int(2404.0))\\ns2 = \"\"5\"\"\\nin0 = (((\"\".a2\"\".strip(\"\"m\"\") + in1[:( int(3.0) - len(\"\"13vB\"\") )]) + \"\"0?lf\"\".capitalize()) + in2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [1, 1, 3], [5], [0, 0, 0, 1, 2], [0], [1], [0, 2, 3], [0], [], [], [1, 1, 1], [0, 7, 1], [2], [], [3, 1, 3, 0, 2, 1, 1], [0], [2, 2], [1], [], [2, 3, 3], [0, 1, 0, 1, 0, 0, 1], [], [3, 1, 3, 3, 1, 0, 1, 2, 3, 0, 4, 0], [2], [], [1], [0, 3, 1, 3, 1, 2, 3], [8], [24, 22], [7], [21, 13, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 5, 1, 1, 3, 1, 0, 0, 3, 3, 1, 0, 7, 1, 2, 1, 0, 3, 7, 0, 12, 1, 0, 1, 7, 1, 2, 1, 3], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b1:{:\\nb1 = not ( abs(int(0.0)) != abs(i2) and (\"\"I<\"\" + ((\"\"y*\"\" + s2) + \"\"w7`\"\")) not in (in0 + in0.capitalize())[:( int(7.0) - int(1.0) )] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 1, 0, 2, 2, 1, 0, 2, 1, 1], [1, 0, 1, 2], [1, 1, 1, 2, 0, 0, 1], [0], [0, 0, 0], [], [], [1, 3, 3, 2], [4], [0, 0, 0, 2, 0, 1], [0], [1], [0, 0, 1, 2], [], [1], [0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 3, 1, 7, 4, 7, 1, 5, 0, 5, 0, 3, 2, 5, 0, 1, 7, 3, 2, 3, 9], [1, 0, 2, 2, 0, 2, 0, 0, 2, 1, 2, 2, 2, 2], [0, 0, 1, 0], [2, 1, 3, 3, 2, 0, 3, 3, 3, 2, 0, 2, 3, 3, 0, 0, 2, 1, 1, 1, 1, 0, 3, 1, 1, 3, 1, 0, 3, 3, 1, 1, 0, 1, 0, 1, 2, 0, 0, 3], [1, 1, 1, 1, 1, 0], [2, 4, 2, 2, 1, 0, 0, 0, 0, 4, 2, 3], [0, 1], [1, 1, 1, 1, 0], [0, 3, 0, 3, 2, 2, 4, 2], [1, 1, 1, 1, 0, 0, 1], [0], [2, 1, 3, 0, 1, 2, 4, 2, 2, 4, 1, 0, 1, 4, 0, 2, 3, 4, 2, 0, 1, 3, 0, 4, 0], [2, 3, 2, 0, 3], [5, 0], [1, 0, 2, 1, 1, 1], [0, 1, 3, 0, 1, 2, 0], [25, 25, 3], [15, 13], [8], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 4, 7, 1, 3, 0, 0, 4, 1, 6, 1, 1, 4, 0, 1, 2, 21, 21, 14, 4, 40, 6, 12, 2, 5, 8, 7, 1, 25, 5, 2, 6, 7, 3, 2, 1, 1], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = mod(int(8.0),abs(saveOrd(\"\"Z\"\"[:mod(i0,abs(abs(max(mod(i2,mod(min(min(i2, i0), divInt(int(3.0),int(1.0))),int(7.0))), int(4.0)))))])))\\nif b1:{:\\ni2 = i0\\n:}\\ni0 += min(int(7.0), int(150.0))\\nloopBreak% = 0\\nfor s0 in (in0 + \"\"p\"\"):{:\\nif res0:{:\\ns0 = \"\"\\\\\\t\"\".strip(in0)[:min(int(5.0), i2)][saveOrd(\"\"Z\"\"):].capitalize()[abs(int(0.0)):int(325.0)]\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = False\\nloopBreak% = 0\\nwhile s2.capitalize() not in (getCharFromString(s2[:i1], int(0.0)) + \"\"n8D\"\")[:i2]:{:\\nb2 = not int(173239.0) \\le ( i2 - i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = len((in1 + s2.lstrip()))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1], [0, 1, 2, 0, 0], [2], [0, 0, 0, 1], [], [0, 0, 0], [], [], [1, 1, 1], [4], [2, 1, 2, 2], [0], [1, 0, 2], [0], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [6, 2, 1, 6, 8, 6, 3, 0, 2, 3, 6, 6, 8, 8, 0, 0, 0, 7, 3, 4, 5, 2, 6, 0, 8, 3], [2, 0, 2, 0, 1, 2, 0, 1, 0, 0, 2, 0, 0, 0, 2, 1, 2, 0, 2, 1, 0, 2, 1, 2, 1, 1, 0, 0, 1, 1, 0, 2, 2, 0, 1, 0, 0, 1, 2, 0, 1, 2, 1], [1], [2, 0, 0, 0, 0, 3, 3, 2, 1, 0, 0, 0, 3, 3, 2, 2, 2, 3, 3, 3, 2, 2, 1, 3, 1, 2, 0, 1, 0, 3, 3, 1, 0, 2, 0, 1, 2, 2, 3, 0, 1, 0, 3, 1, 0, 3, 2, 2, 1, 0, 0, 0, 3, 0, 2, 0, 3, 1, 0, 3, 3, 3, 2, 2, 1, 0, 1, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 1, 0, 1, 2, 1, 1, 2, 0, 3, 2, 0, 3, 3, 1, 3, 1, 0, 1, 1, 2, 3, 0, 0, 2, 2, 0, 0, 3, 0, 0, 0, 2, 1, 3, 3, 2, 0, 1, 2, 2, 2, 0, 3, 3, 1, 0, 0, 0, 2, 1, 0, 0, 3], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [2, 4, 3, 1, 2, 0, 2, 4, 2, 0, 3, 3, 2, 1, 4, 3, 3, 4, 2, 4, 0, 0, 3, 0, 1, 1, 0, 3, 0, 3, 1, 3], [1, 1, 2, 0, 0, 1, 0, 2, 1, 1, 2, 2, 0, 0, 2, 1], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], [2, 1, 4, 2, 1, 4, 4, 4, 0, 2, 3, 4, 5, 4, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [], [4, 2, 3, 2, 1, 0, 4, 4, 3, 1, 0, 3, 3, 0, 3, 2, 4, 4, 2, 2, 0, 2, 4, 4, 1, 2, 1, 2, 4, 2, 2, 2, 0, 2, 1, 2, 0, 2, 0, 4, 0, 2, 1, 2, 2, 0, 4, 4, 2, 4, 2, 0, 4, 4, 4, 0, 4, 4, 1, 4, 0, 0, 3, 4, 1, 4, 1, 4, 0, 2, 0, 1], [3, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 0, 0, 0, 1, 0, 3, 1, 2, 3], [1, 5, 3], [1, 1, 0, 2, 0, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1], [2, 1, 1, 2, 0, 1, 2, 2, 3, 2, 0], [19, 0], [3, 5, 4], [8, 8, 7, 2, 4], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 3, 0, 0, 3, 1, 4, 1, 3, 0, 0, 0, 0, 26, 26, 43, 1, 130, 31, 32, 16, 16, 15, 11, 0, 72, 21, 3, 20, 11, 2, 3, 5, 1], "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = (\"\"8\"\"[:( i2 - i0 )] + s2)[:i2].rstrip() not in getCharFromString(getCharFromString((\"\"d\"\" + s1), i0), abs(saveOrd(((in1 + (s2[( int(6.0) - i1 ):i2][i0:].capitalize().capitalize()[len(getCharFromString(saveChr(max(mod(( divInt(abs(min(abs(divInt(( int(2.0) * saveOrd(\"\"f\"\") ),int(1.0))), divInt(i1,int(6.0)))),i0) + abs(min(int(8.0), i0)) ),divInt(i2,int(6.0))), divInt(mod(len(\"\"8\"\"[i0:int(3.0)]),i0),len(s1[:int(0.0)][i0:abs(mod(( int(2.0) + i2 ),i1))][i2:].capitalize()[max(i0, mod(i2,saveOrd(\"\"T\"\"[:int(3.0)]))):])))), i1)[len(in1[:len(in1[saveOrd(in1.capitalize()):])]):]):mod(( int(6.0) - i0 ),int(6.0))] + \"\"e\"\"[int(8.0):])) + s0[i2:][:divInt(abs(mod(i1,saveOrd(getCharFromString(s2[min(mod(i2,int(8.0)), i1):].capitalize()[int(0.0):].capitalize(), mod(int(0.0),int(0.0)))))),( i1 + min(( i0 * len(getCharFromString(getCharFromString(getCharFromString(in0, min(int(7.0), max(int(3.0), i0))), int(4.0)), int(5.0))) ), ( max(i1, i1) - ( ( i0 - i2 ) * min(i2, i0) ) )) ))]))))\\nb1 = i1 \\le divInt(int(2.0),len(saveChr(min(mod(i0,int(60.0)), ( ( ( i0 * len(getCharFromString(\"\"7\"\", max(int(8.0), i1))) ) + i2 ) + i0 )))))\\nloopBreak% = 0\\nwhile in1.strip(in2) in (saveChr(( int(3.0) * i1 )) + \"\"2)\"\"):{:\\nb1 = \"\"4\"\".capitalize() == in1.lstrip(s1[:i2])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= len(\"\"A\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [0, 0], [1], [2, 1, 0], [1], [], [0], [1], [1, 5], [1, 1], [], [3, 3, 4, 1, 1, 0], [2], [], [], [0, 2], [25], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 6, 1, 0, 0, 2, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = ((\"\"Z\"\".capitalize() + \"\"5\"\") + in2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 2, 1, 2, 0, 0, 2, 2, 1, 1, 1, 2, 2, 1, 1, 0, 1, 1], [0, 2, 0, 0, 0, 1, 1], [0, 2, 1, 1, 2, 0, 2, 0, 1, 1, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0], [], [], [0, 0, 3], [5, 4, 1, 0, 2], [1, 1, 2, 0, 1, 1, 0, 1, 2, 2], [0, 0, 0, 0, 0], [5, 1, 3], [3, 3], [1, 0], [], [0, 0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 8, 1, 1, 5, 2, 8, 4, 6, 8, 1, 7, 9, 4, 1, 5, 7, 1, 6, 1, 9, 2, 3, 8, 2, 7, 0, 1, 2, 8, 2, 5], [0, 2, 2, 0, 1, 1, 2, 0, 1, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 2, 2, 0], [1, 0, 1, 1], [0, 1, 3, 3, 1, 3, 3, 0, 0, 3, 2, 0, 3, 1, 1, 0, 0, 2, 3, 1, 2, 0, 3, 3, 0, 1, 2, 0, 3, 1, 0, 0, 1, 1, 1, 2, 2, 1, 3, 2, 2, 2, 0, 1, 2, 0, 0, 1, 3, 2, 3, 1, 0, 3, 3, 1, 2, 0, 1, 2, 1, 0, 0, 0, 0, 3, 1, 0, 1, 1, 2, 0, 1, 1, 2, 2, 3, 1, 3, 3, 3, 2, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [1, 4, 1, 3, 0, 1, 0, 1, 4, 0, 0, 3, 4, 1, 4, 3, 3, 2, 1, 4], [1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 0, 1, 1, 1, 0], [1, 0, 1], [3, 3, 4, 0, 2, 1, 3, 5, 0, 3, 1, 4, 4, 2, 0, 1, 2, 5, 4, 3, 5, 5, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0], [4, 2, 0, 3, 1, 0, 0, 0, 3, 2, 2, 4, 0, 1, 1, 1, 1, 0, 0, 4, 2, 0, 4, 2, 2, 1, 0, 2, 2, 0, 3, 4, 4, 4, 0, 1, 0, 2, 4, 2, 0, 0, 4, 1, 1, 2, 1, 0], [2, 3, 1, 1, 3, 2, 1, 2, 2], [4, 0], [1, 1, 0, 0, 0, 0, 2, 2, 1, 2, 0], [3, 3, 1, 1, 2, 0, 1, 3, 3, 3, 1, 2], [19], [18, 17, 14, 11], [3, 2], [3, 28, 15, 22, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 19, 19, 7, 12, 4, 4, 0, 0, 3, 5, 10, 5, 3, 2, 2, 0, 2, 33, 33, 28, 4, 88, 17, 20, 17, 3, 24, 12, 4, 48, 9, 2, 11, 12, 1, 4, 2, 5], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 != int(11.0)\\nloopBreak% = 0\\nfor in0 in in0[:max(saveOrd((\"\"\"\" + in1)), int(811.0))].capitalize():{:\\nloopBreak% = 0\\nwhile max(len(s0), i2) \\le i2:{:\\ns2 = s1\\nloopBreak% = 0\\nfor in0 in (in2.rstrip(\"\"]\"\")[min(mod(i0,max(int(5.0), int(2.0))), i1):i1][:divInt(min(int(8.0), ( i2 - max(saveOrd(\"\"s\"\"), i0) )),int(4.0))] + \"\"r\"\"):{:\\ni1 -= ( i0 * min(int(6.0), i0) )\\ni2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in \"\"3To\"\":{:\\nloopBreak% = 0\\nfor in0 in s1:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = saveChr(int(8.0)).endswith(s2[int(1.0):int(7.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = saveChr(( ( int(94.0) * min(( ( ( i0 - int(1.0) ) * ( i0 - i2 ) ) * int(5.0) ), len(\"\",\"\"[( saveOrd(s1) * int(7.0) ):i1][max(saveOrd(s2[int(1.0):][( i1 - int(6.0) ):]), mod(int(1.0),i0)):i1])) ) * i2 ))\\nif ( i0 \\g len((saveChr(int(9.0)).capitalize().lstrip() + in2)) or i1 \\l int(23.0) ):{:\\nif ( int(8.0) == ( i2 - int(2.0) ) and \"\"=\"\" not in in1 ):{:\\nres0 = in0[int(7.0):].capitalize()[:( ( len(in2) + int(0.0) ) - abs(max(saveOrd(\"\"_\"\".capitalize()), ( int(1.0) - int(2.0) ))) )] != \"\"l\"\"\\n:}\\ni0 -= i2\\n:}\\ni2 += int(82.0)\\nin2 = \"\"2\"\"[int(5.0):i0]\\ns0 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], [1, 2, 2, 2, 0, 1, 2, 0, 1, 2, 1, 0, 0, 2, 2, 0, 2, 1, 2, 0, 1, 1, 2, 2, 1], [1, 0, 0, 1, 1, 0, 0, 2, 0, 0, 1], [1, 2, 1, 1, 0, 1, 2, 2, 0, 2, 1, 0, 2, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [], [], [3, 1, 2, 0, 1, 0], [0, 1, 2, 5, 5], [0, 1, 2, 1, 0, 1, 1, 2, 0, 2, 0, 0, 0, 0, 2, 2, 0, 1, 2], [0, 0, 0, 0, 0], [0, 4, 1, 3, 5, 5], [3, 3, 3, 2, 2, 0, 3, 0], [1, 1, 0, 1], [], [1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 1, 7, 1, 8, 6, 8, 7, 8, 4, 2, 3, 6, 4, 3, 7, 7, 8, 1, 4, 3, 5, 9, 6, 2, 8, 1, 0, 9, 3, 6, 6, 0, 5, 3, 3, 5, 3, 3, 7, 2, 6, 8, 2, 8, 8, 3, 3, 0, 1, 7, 6, 4, 3, 3, 7, 9, 6, 7, 9, 1, 0, 0, 4, 2, 3, 0, 8, 2, 5, 1, 6, 9, 7, 6, 6, 0, 9, 1, 6, 3, 2, 9, 4, 6, 2, 4, 7, 8, 9, 0, 9, 4, 3, 7, 2], [1, 0, 0, 0, 2, 2, 1, 0, 0, 1, 1, 2, 2, 0, 2, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 2, 0, 1, 2, 0, 0, 0, 1, 2, 0, 2, 2, 2, 2, 0, 1, 1, 0, 1, 1, 2, 2, 2, 0, 2, 0, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 0, 2, 2, 2, 0, 1, 2, 1], [1, 0, 0, 0, 1], [1, 0, 3, 3, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 2, 0, 3, 3, 2, 3, 3, 1, 0, 3, 2, 2, 0, 0, 2, 3, 1, 0, 0, 0, 1, 2, 0, 2, 2, 2, 2, 1, 3, 0, 3, 1, 2, 2, 2, 1, 3, 0, 1, 3, 3, 2, 2, 2, 2, 1, 3, 3, 0, 3, 1, 3, 2, 0, 1, 3, 2, 2, 3, 1, 1, 3, 1, 2, 0, 1, 3, 2, 2, 2, 3, 1, 2, 3, 1, 2, 1, 3, 0, 3, 0, 2, 0, 2, 0, 1, 2, 1, 1, 2, 3, 2, 1, 0, 1, 1, 2, 2, 2, 2, 3, 0, 3, 2, 1, 0, 2, 2, 2, 0, 3, 1, 3, 1, 2, 0, 3, 1, 1, 3, 1, 2, 0, 1, 3, 1, 2, 2, 1, 3, 0, 2, 0, 0, 3, 2, 1, 1, 2, 3, 0, 3, 0, 1, 1, 3, 1, 1, 2, 1, 1, 0, 2, 0, 3, 2, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 2, 2, 0, 0, 0, 0, 1, 1, 0, 3, 2, 1, 0, 0, 0, 1, 0, 0, 3, 2, 1, 3, 2, 2, 2, 1, 3, 1, 3, 2, 2, 0, 1, 0, 1, 1, 3, 0, 3, 0, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 0, 3, 3, 1, 1, 2, 2, 1, 1, 2, 1, 2, 0, 2, 1, 1, 2, 2, 2, 2, 1, 3, 1, 0, 2, 3, 3, 2, 3, 3, 2, 1, 2, 3, 3, 0, 0, 0, 3, 1, 2, 3, 1, 1, 1, 2, 0, 2, 0, 3, 2, 0, 2, 1, 3, 1, 3, 3, 3, 3, 3, 1, 3, 0, 3, 3, 1, 0, 1, 0, 2, 3, 2, 0, 1, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [2, 1, 2, 4, 0, 2, 4, 4, 4, 1, 3, 2, 1, 1, 4, 0, 3, 4, 4, 0, 2, 4, 3, 0, 0, 3, 2, 1, 2, 1, 1, 0, 0, 0, 4, 1, 3, 2, 2, 2, 1, 4, 4, 4, 4, 0, 2, 3, 4, 1, 4, 4, 3, 2, 3, 1, 3, 2, 0, 4, 2, 2, 1, 4, 2, 4, 3, 2, 4, 1, 2, 1, 0, 2], [1, 2, 0, 2, 1, 0, 1, 1, 2, 2, 0, 2, 0, 2, 1, 1, 2, 0, 0, 0, 0, 2, 1, 1, 1, 0, 2, 0, 1, 0, 2, 1, 2, 2, 2, 0, 1, 1, 0, 0, 0, 1, 1, 0, 2, 0, 2], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [1, 0, 3, 4, 2, 3, 2, 4, 3, 5, 4, 2, 5, 5, 3, 1, 2, 0, 2, 0, 2, 4, 5, 0, 2, 4, 1, 3, 1, 4, 5, 0, 0, 4, 3, 4, 3, 4, 4, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [0, 4, 1, 2, 2, 2, 1, 1, 4, 4, 2, 0, 2, 2, 1, 4, 1, 0, 1, 1, 2, 2, 4, 1, 0, 4, 4, 0, 4, 4, 4, 4, 4, 2, 1, 4, 1, 3, 3, 3, 1, 3, 2, 1, 2, 1, 3, 4, 4, 0, 1, 0, 2, 2, 1, 2, 0, 0, 2, 1, 3, 3, 2, 3, 3, 4, 1, 1, 4, 2, 4, 0, 0, 2, 0, 3, 0, 0, 3, 2, 2, 0, 2, 3, 0, 4, 0, 0, 3, 2, 4, 4, 1, 1, 1, 1, 4, 2, 0, 1, 0, 0, 1, 0, 2, 1, 4, 2, 4, 2, 4, 4, 1, 0, 1, 2, 4, 0, 1, 1, 0, 4, 4, 3, 0, 1, 3, 2, 1, 1, 0, 4, 0, 0, 2, 1, 1], [0, 0, 0, 1, 1, 2, 2, 2, 3, 1, 0, 2, 2, 2, 3, 2, 2, 2, 1, 2, 0, 1, 3, 3, 1, 1, 1, 0, 3, 0], [3, 5, 4, 0, 2], [0, 0, 1, 1, 2, 0, 0, 2, 1, 2, 2, 1, 2, 2, 0, 2, 0, 2, 2, 1, 2, 2, 2, 2, 1, 2, 0, 0, 2], [3, 0, 3, 1, 1, 2, 0, 0, 3, 2, 1, 3, 2, 1, 3, 2, 0, 1, 2, 2, 3, 0, 1, 2, 2, 3, 1, 0, 0, 0, 0, 3, 3, 2, 0, 3, 2, 3, 3, 0, 0], [10, 22, 3, 6, 9, 23, 23, 7, 15, 19, 16, 22], [10, 0, 19, 17, 13, 16, 10], [1, 4, 9, 5, 5, 4, 8, 8, 6, 4], [29, 19, 4, 23, 20, 12, 29, 26, 21, 20, 23, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 25, 25, 11, 14, 6, 6, 0, 0, 6, 5, 19, 5, 6, 8, 4, 0, 4, 97, 97, 70, 5, 308, 86, 74, 47, 41, 40, 41, 6, 137, 30, 5, 29, 41, 12, 7, 10, 12], "tree_depth": 73, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(891.0)\\nif ( i0 \\l abs(max(divInt(abs(saveOrd(s1)),i0), ( i0 * min(abs(i2), saveOrd(getCharFromString(\"\"^\"\", saveOrd(\"\"K\"\"[:( i2 + saveOrd(\"\":\"\") )][max(( len(getCharFromString(getCharFromString(s0[:abs(int(7.0))], i1), max(( mod(i0,i0) * ( max(int(1.0), i1) - i1 ) ), i2))) + int(8.0) ), ( i2 - ( mod(( ( int(6.0) - saveOrd(\"\"k\"\"[i0:min(int(8.0), divInt(mod(mod(int(7.0),len(saveChr(i2))),int(8.0)),saveOrd(\"\"a\"\")))][saveOrd(in0):]) ) * mod(( mod(divInt(int(4.0),min(abs(i1), saveOrd(\"\"1\"\"))),int(2.0)) * len(\"\"W\"\") ),( i1 + int(3.0) )) ),min(mod(divInt(min(int(6.0), int(4.0)),len(saveChr(int(3.0))[( i1 * int(7.0) ):][abs(( divInt(( max(int(7.0), ( abs(int(8.0)) + divInt(int(1.0),max(i0, max(i1, ( i1 * divInt(i0,int(4.0)) )))) )) - ( int(3.0) - int(5.0) ) ),( min(( int(9.0) * i1 ), int(6.0)) + int(2.0) )) + ( mod(( mod(min(i0, min(( int(8.0) + i0 ), divInt(( divInt(i2,saveOrd(\"\"D\"\")) + int(1.0) ),max(int(0.0), divInt(i0,len(in1)))))),int(9.0)) * int(3.0) ),abs(int(6.0))) - mod(i1,int(6.0)) ) )):abs(int(0.0))])),( ( int(5.0) - abs(i2) ) - divInt(i0,i0) )), max(mod(int(3.0),int(3.0)), ( saveOrd(s2.capitalize().capitalize()) + i0 )))) * saveOrd(saveChr(i1).lstrip(getCharFromString(\"\"!\"\"[:int(5.0)].capitalize(), int(3.0))).capitalize()) ) )):saveOrd(\"\"4\"\".capitalize())][int(3.0):int(7.0)])))) ))) or (((\"\"t>\"\" + (\"\"9\"\"[( int(2.0) + int(682.0) ):] + \"\"r\"\"[i2:])) + (in0.strip(\"\";\"\").capitalize() + s2)) + \"\"5G\"\"[divInt(i0,saveOrd(in1[mod(divInt(int(8.0),int(8.0)),i2):])):][:i2]) in in0 ):{:\\nloopBreak% = 0\\nfor in2 in \"\"n\"\"[int(33017.0):int(6.0)]:{:\\nloopBreak% = 0\\nfor in1 in ((((\"\"5\"\".capitalize() + \"\"4\"\") + s2.capitalize()[int(4.0):int(3.0)].capitalize())[i2:] + in2) + in2[int(37.0):]):{:\\nin0 = (s1 + s2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 = divInt(( i0 - i1 ),i1)\\nif i0 \\g int(96.0):{:\\ni1 = int(79.0)\\n:}else:{:\\nres0 = ( i1 == min(divInt(int(1.0),i2), i2) or i2 != int(0.0) )\\n:}\\nif (s0[:i0][i2:] + (s2 + saveChr(abs(mod(int(0.0),len(s0)))))[mod(mod(( int(4.0) + saveOrd(s2) ),int(23.0)),max(mod(divInt(i0,int(0.0)),i1), int(82.0))):]).startswith((getCharFromString(\"\")J\"\", int(51.0)).capitalize()[saveOrd(\"\"q\"\"):] + \"\"88\"\")):{:\\ni1 = i2\\nin1 = \"\"^kX\"\"\\nin2 = saveChr(saveOrd(s0[i2:]))\\nloopBreak% = 0\\nfor s2 in \"\"X\"\":{:\\nloopBreak% = 0\\nfor in1 in s1:{:\\nb1 = ( in0 not in \"\"H\"\" and not not b2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( s1 != \"\"P\"\"[int(6.0):] or saveChr(int(9.0))[( int(7.0) * ( int(6.0) - ( ( ( int(6.0) * i2 ) * len(saveChr(abs(int(0.0)))) ) * int(9.0) ) ) ):].lstrip()[:mod(mod(int(1.0),int(6.0)),( int(3.0) + ( i1 - ( int(2.0) - int(9.0) ) ) ))].rstrip(\"\"[\"\").endswith(in1) ):{:\\nin2 = \"\"<\"\"\\nloopBreak% = 0\\nfor s0 in saveChr(mod(( ( ( int(4.0) + len(s0) ) + int(6.0) ) + i1 ),mod(max(len(\"\"6\"\"), ( abs(min(mod(int(2.0),( saveOrd(\"\"T\"\") - abs(i1) )), i2)) - i1 )),abs(int(4.0)))))[( max(int(7.0), int(8.0)) + int(9.0) ):divInt(i1,( i0 * saveOrd(in1) ))]:{:\\ni2 += ( i2 * mod(int(0.0),abs(int(9.0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = getCharFromString((in1 + \"\";4\"\").strip(), saveOrd((\"\">\"\"[len(\"\"]\"\"):abs(saveOrd(in0))] + getCharFromString(in1, max(int(4.0), abs(i2))))))\\n:}\\nloopBreak% = 0\\nfor in1 in in0:{:\\nif max(min(int(3.0), i0), int(7.0)) != i1:{:\\nb0 = \"\"Q\"\"[mod(abs(divInt(i2,int(2.0))),i1):].endswith(\"\"W\"\")\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 6, 1, 7, 0, 8, 9, 3], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1, 2, 2, 1, 0, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1, 2, 2, 0, 3, 2, 3, 3, 1, 1, 3, 1, 1, 1, 2, 2, 2, 0, 3, 2, 0, 2, 0, 1, 2, 0, 0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0], [3, 3, 1, 0, 3, 0, 1, 2, 1, 0, 2, 1, 4, 1, 0, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1, 0, 1], [0], [2, 0, 0, 4, 3, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0, 1], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 1, 1, 0, 2], [17, 15], [12, 25], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 26, 26, 19, 0, 76, 23, 16, 9, 14, 4, 5, 0, 18, 3, 1, 5, 5, 2, 2, 1, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( len(s0[len(in2):]) != i0 or True ) and (\"\"R\"\" + saveChr(int(08.0))[:max(mod(int(2.0),min(mod(int(7.0),len(in1[i2:( mod(( int(2.0) + i2 ),mod(min(( i0 * divInt(i0,i1) ), int(1.0)),i1)) * divInt(max(i2, i0),abs(( i0 - i2 ))) )])), mod(max(min(int(7.0), abs(i2)), mod(( int(4.0) + int(9.0) ),int(8.0))),( int(5.0) * i1 )))), int(0.0))]).capitalize() in (\"\"m\"\" + \"\"z\"\"[:int(4.0)].rstrip())[( divInt(i2,max(mod(saveOrd(in1),max(int(8599.0), int(2.0))), min(int(26.0), int(17.0)))) - int(0.0) ):( mod(divInt(i2,len(\"\"P7\"\")),mod(i1,divInt(i0,int(893.0)))) - ( i1 * i2 ) )] )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 1, 2, 0, 2, 2, 0, 3, 1, 2, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 0, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 5, 3, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 3, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 14, 0, 62, 20, 12, 9, 11, 7, 2, 1, 16, 2, 0, 4, 2, 1, 0, 1, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = in1[max(i2, int(075.0)):] not in (in0[abs(mod(i2,int(7.0))):mod(int(4.0),min(i2, ( divInt(( len(s0[i0:divInt(min(( i1 + ( divInt(( int(1.0) + i2 ),divInt(max(int(7.0), i1),int(7.0))) * int(9.0) ) ), i2),i0)]) - mod(int(8.0),abs(int(5.0))) ),max(i0, ( ( ( int(0.0) + int(4.0) ) * divInt(int(8.0),i1) ) - int(59.0) ))) - int(9.0) )))] + getCharFromString((\"\"R\"\" + saveChr(min(int(2.0), mod(i1,mod(( i2 * len(in1) ),int(2.0)))))), mod(len(\"\"2\"\"),i2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0], [0], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [0, 3, 8, 1, 4, 8, 5, 7, 1, 3, 1, 2, 6, 2, 1, 7], [2, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 2, 1, 0, 0, 0, 0, 1, 2, 1, 2, 1], [0, 1], [2, 3, 2, 2, 0, 2, 1, 2, 3, 2, 1, 0, 3, 0, 0, 2, 0, 0, 1, 2, 3, 2, 3, 2, 0, 3, 1, 0, 2, 1, 3, 3, 1, 1, 0, 3, 2, 3, 2, 0, 1, 0, 2, 1, 2, 2, 0, 2, 2, 0, 3, 2, 0, 0, 0, 1, 3, 1, 3, 3, 0, 3, 3, 2, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [2, 4, 3, 0, 3, 0, 2, 2, 4, 4, 3, 1, 0, 3, 0, 4], [0, 1, 2, 1, 2, 0, 0, 0, 0, 2, 2, 0, 2, 1], [0, 0, 0, 0, 0, 0, 1], [0, 2, 3, 2, 1, 4], [1, 1, 1, 1, 1], [0], [0, 2, 4, 2, 2, 0, 2, 1, 0, 3, 0, 2, 4, 3, 2, 1, 4, 2, 1, 1, 1, 0, 2, 4, 4, 4], [3, 0, 0, 0, 3, 1], [1, 1], [1, 0, 2, 0, 1, 1, 0, 1], [3, 0, 3, 0, 2], [8, 24], [], [0], [30, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 23, 2, 70, 20, 16, 14, 7, 6, 5, 1, 26, 6, 2, 8, 5, 2, 0, 1, 2], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2:{:\\ni2 = divInt(abs(divInt(( i2 + ( int(0.0) - divInt(saveOrd(in0[( int(3.0) * i0 ):][len(\"\"_\"\"[i0:i0]):( i1 - i0 )].rstrip()[:int(8.0)]),( min(divInt(len(s2),divInt(i0,min(int(1.0), i0))), ( int(4.0) * abs(abs(int(8.0))) )) + int(5.0) )) ) ),i2)),saveOrd((s1 + getCharFromString((\"\"I\"\"[:divInt(saveOrd(getCharFromString(\"\"\"\"[( i0 + int(7.0) ):i1], ( int(1.0) + ( mod(i2,( ( i1 + len(\"\"Y\"\") ) * ( i0 * i0 ) )) + i0 ) ))),int(3.0))] + \"\"0\"\"), max(int(1.0), min(len(in1), i0)))[:min(saveOrd(getCharFromString(saveChr(( i1 * i2 )).rstrip(), i1)[:i2]), int(2.0))])))\\ni1 -= int(6217.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 2, 2, 1, 1, 0, 0, 2, 0, 1, 1, 0], [1, 2, 0], [1, 1, 0, 0, 1, 1, 0, 2, 0], [0], [0, 0, 0, 0], [], [], [2, 1, 3, 1], [2, 4], [2, 0, 2, 1, 0, 2, 2, 0, 0, 0, 2, 1], [0, 0], [4, 3, 2, 5, 4], [3, 2, 1, 2, 3], [1, 1], [1], [1], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [5, 7, 8, 6, 6, 1, 9, 2, 6, 2, 5, 7, 3, 3, 9, 7, 5, 5, 0, 2, 9, 9, 9, 5, 2], [2, 1, 2, 0, 0, 2, 0, 0, 1, 0, 1, 0, 2, 2, 1, 1, 2, 2, 2, 0, 0, 2, 2, 1], [0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 2, 3, 1, 0, 0, 1, 2, 1, 2, 1, 0, 0, 3, 2, 0, 3, 3, 0, 2, 1, 3, 2, 3, 1, 2, 3, 0, 1, 3, 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 1, 1, 2, 2, 1, 3, 1, 1, 3, 3, 1, 0, 1, 0, 0, 3, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 2, 3, 2, 0, 3, 3, 4, 4, 4, 0, 4, 4, 0], [2, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 0], [1, 1, 4, 1, 1, 3, 0, 3, 4, 0, 2, 1, 1, 5, 3, 2], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0], [2, 0, 0, 4, 3, 2, 1, 3, 0, 4, 0, 4, 2, 1, 2, 4, 1, 2, 2, 2, 0, 1, 1, 1, 3, 1, 4, 1, 0, 2, 0, 2, 4, 2, 1, 3, 3, 0, 0, 4, 1, 4, 4, 4, 0, 2, 0, 0, 2, 3, 1, 3, 3, 1, 2, 0, 2, 0, 1], [3, 0, 2, 0, 0, 1, 1, 3, 0, 2], [5, 1], [1, 1, 2, 0, 1, 0, 1, 1, 0, 1, 2, 1, 2, 1], [1, 2, 1, 3, 1, 2, 1, 1, 3, 0, 2, 0, 3, 0, 3, 1, 1, 1, 1], [7, 13, 3], [17, 2, 4, 19, 5, 21, 8, 25, 3], [1, 5, 1], [6, 1, 26, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 12, 12, 3, 9, 1, 4, 0, 0, 4, 2, 12, 2, 5, 5, 2, 1, 1, 25, 25, 24, 4, 63, 10, 15, 9, 3, 16, 19, 1, 59, 10, 2, 14, 19, 3, 9, 3, 4], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = min(max(i1, i2), abs(i0))\\nif s1[:( len(s1) * int(5.0) )].startswith((\"\"r\"\"[:i0] + (in1 + getCharFromString(s1, i2))).strip(\"\"1\"\"[int(7.0):].capitalize())):{:\\nloopBreak% = 0\\nwhile ( getCharFromString(\"\"c\"\", ( int(8.0) * ( int(6.0) - i0 ) ))[i0:abs(( i1 - min(len(s1[:i0][( int(6.0) - len(\"\"#\"\") ):( saveOrd(\"\"e\"\") + int(1.0) )][:( saveOrd(\"\"5\"\") * i1 )]), int(9.0)) ))] != (\"\"t\"\" + getCharFromString(\"\"f\"\", saveOrd(in0))) or i0 == int(262.0) ):{:\\ni2 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = not s0[:int(57.0)] == saveChr(i1)[i1:i2]\\n:}else:{:\\nb1 = \"\"\\\\\\nH1N\"\"[:i2].endswith(((in0 + in1) + saveChr(int(339.0))))\\n:}\\ni2 += divInt(int(75.0),int(5.0))\\nloopBreak% = 0\\nfor s0 in \"\"[\"\":{:\\ni0 -= mod(divInt(int(0.0),min(int(2.0), int(9.0))),saveOrd(getCharFromString(s2.capitalize(), saveOrd(s1[int(9.0):])).rstrip()))\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = in2\\nb1 = not ( (\"\"D.vi\"\" + ((\"\"z\"\" + in0[i0:]) + s2[:int(95.0)]))[:i2].startswith(\"\"d\"\") or i2 \\le min(int(2.0), i1) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 0, 2, 2, 1, 2, 0, 2, 1, 1, 0, 0, 1, 1], [0, 1, 1, 2, 1], [0, 2, 0, 1, 0, 0, 1, 0, 2], [0], [0, 0, 0, 0], [], [], [3, 0, 2, 3, 2, 3, 3], [1, 2, 0], [0, 2, 1, 1, 2, 2, 0, 1, 0, 2], [0, 0, 0], [0, 2, 2, 0], [0, 2, 0], [], [], [0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [2, 9, 8, 6, 3, 1, 3, 1, 3, 7, 1, 0, 5, 7, 0, 9, 4, 7, 0, 8, 4, 7, 0, 2, 1, 9, 7, 2, 0, 5, 4, 3, 0, 8], [1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 2, 0, 1, 2, 2, 0, 2, 1, 0, 0, 2, 2, 0, 2, 1, 2, 0, 2, 2, 1, 2, 1, 2, 0, 2, 2, 1, 0, 0, 0, 2, 2, 1], [1, 1], [0, 0, 0, 0, 3, 3, 2, 2, 0, 2, 1, 1, 3, 0, 0, 1, 3, 2, 3, 0, 3, 0, 0, 3, 0, 2, 2, 2, 2, 2, 3, 2, 1, 0, 3, 1, 1, 2, 0, 0, 0, 2, 2, 0, 3, 0, 2, 0, 2, 0, 3, 3, 0, 2, 3, 3, 2, 3, 1, 2, 3, 3, 3, 3, 0, 0, 3, 2, 0, 1, 3, 3, 2, 1, 0, 2, 2, 1, 1, 1, 0, 0, 2, 1, 1, 0, 1, 0, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 2, 2, 3, 2, 3, 3, 3, 3, 1, 0, 1, 1, 0, 1, 0, 1, 2, 0, 2, 0, 1, 2, 2, 0, 3, 1, 2, 1, 0, 1, 1, 0, 2, 0, 3, 2, 0, 3, 0, 2, 3, 0, 2, 2, 0, 2, 1, 3, 3, 0, 1, 3, 3, 3], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1], [4, 1, 2, 2, 4, 0, 3, 3, 1, 4, 1, 2, 1, 0, 0, 4, 0, 3, 1, 2, 0, 4, 0, 0, 1, 1, 2, 0, 2, 0, 4, 4, 4, 4, 2, 2, 0, 2, 2, 4], [0, 0, 0, 0, 2, 2, 0, 2, 2, 1, 0, 2, 0, 1, 1, 0, 0, 2, 0, 2, 0, 1, 0, 1, 2, 2, 0, 0, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [1, 5, 2, 1, 5, 5, 5, 3, 3, 2, 4, 0, 1, 4, 1, 4, 2, 3, 1, 5, 4], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [0], [0, 4, 2, 0, 2, 4, 4, 4, 0, 4, 0, 0, 2, 4, 0, 1, 2, 2, 4, 4, 4, 1, 4, 1, 4, 0, 1, 4, 1, 1, 2, 0, 2, 0, 0, 1, 2, 2, 1, 0, 2, 0, 3, 4, 0, 0, 3, 0, 3, 4, 1, 0, 3, 4, 2, 3, 0, 0, 1], [1, 2, 0, 3, 1, 3, 3, 0, 2, 3, 0, 0, 3, 3, 1], [2, 1, 4, 1, 2, 5], [2, 2, 1, 0, 1, 1, 0, 1, 1, 2, 1], [0, 3, 3, 1, 0, 3, 1, 3, 1, 1, 0, 1], [15, 24, 0], [1, 4, 5, 18, 21], [], [26, 26, 21, 7]], "fitness": 9223372036854775807, "mapping_values": [1, 14, 14, 5, 9, 1, 4, 0, 0, 7, 3, 10, 3, 4, 3, 0, 0, 3, 34, 34, 46, 2, 152, 40, 40, 30, 12, 21, 12, 1, 59, 15, 6, 11, 12, 3, 5, 0, 4], "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2:{:\\nres0 = b0\\nif saveChr(i1) in s2[i0:]:{:\\nif i1 \\g i2:{:\\ns1 = getCharFromString(in2.strip(), saveOrd(saveChr(max(( ( i2 + ( int(29.0) + int(8.0) ) ) + abs(i2) ), i2)))).capitalize()[int(6.0):]\\nloopBreak% = 0\\nwhile abs(( saveOrd(in2) + i2 )) == min(i2, i2):{:\\nb2 = in2 == in0.rstrip()[:len(\"\"P\"\")]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif getCharFromString(\"\"[\"\".capitalize(), i1).rstrip(\"\"[\"\".rstrip())[:( ( divInt(( ( len(getCharFromString(in0, ( int(3.0) * i0 ))) * max(int(1.0), int(3.0)) ) + ( i0 * i2 ) ),i0) * ( ( i1 - saveOrd(\"\"b\"\") ) + i2 ) ) * mod(i2,( i0 + max(abs(i2), ( max(min(( min(int(1.0), ( saveOrd(getCharFromString(\"\"Y\"\", min(len(\"\"<\"\"), max(i1, i0)))) - abs(( i0 - int(3.0) )) )) + min(saveOrd(s2[:( int(7.0) + i2 )]), divInt(( int(1.0) * int(0.0) ),int(5.0))) ), i2), i0) + mod(int(7.0),int(0.0)) )) )) )][i2:int(9.0)] == in1[i1:min(divInt(divInt(min(max(i2, i0), int(4.0)),max(divInt(( divInt(abs(( min(abs(min(saveOrd(s0), int(7.0))), i2) * int(0.0) )),int(8.0)) + i2 ),int(4.0)), i1)),int(7.0)), ( i2 - ( i1 + int(0.0) ) ))]:{:\\ni2 -= divInt(( i0 * saveOrd(\"\"e\"\") ),int(2.0))\\n:}else:{:\\nres0 = not mod(int(1.0),i2) \\l int(9.0)\\n:}\\n:}else:{:\\nb2 = res0\\n:}\\ni2 *= int(7205.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = \"\"$f\"\"[:i1][:( i0 + saveOrd(s1) )] in in1[( i0 + saveOrd((s1.strip() + in1)) ):]\\ns2 = (in0 + (\"\"sA\"\".strip(s1) + (saveChr(i0) + (in2 + in1)[:mod(abs(i2),( ( i2 - mod(int(430.0),abs(min(i1, int(8.0)))) ) - abs(abs(saveOrd(\"\"v\"\"))) ))])))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 5], [2, 2], [], [0, 0], [], [], [], [], [4, 0], [1], [], [3, 4, 0, 4, 1], [0, 0], [], [], [3], [], [], [], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 1, 0, 5, 2, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (getCharFromString(s0, i2) + getCharFromString(\"\"\"\"\", i2))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 1, 9, 7, 3, 2, 4, 0, 8, 0, 5, 9], [2, 1, 0], [1, 0], [3, 1, 0, 2, 2, 1, 2, 2, 1, 1, 1, 1], [1, 0, 1, 1], [3], [1, 2], [1, 1, 0], [1, 5, 2], [1, 1], [], [4, 0, 3, 4, 1, 3, 4, 4, 1], [3, 1, 1, 2], [5], [], [1, 0], [4], [20], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 3, 2, 12, 4, 1, 2, 3, 2, 2, 0, 9, 4, 1, 0, 2, 1, 1, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= len(s1.strip((saveChr(int(319732.0)) + \"\"u\"\")))\\ni1 = i0\\nin2 = (saveChr(mod(( int(4.0) * mod(divInt(int(08.0),int(0.0)),int(5.0)) ),int(9.0))) + \"\"E\"\".capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1, 1, 1], [8, 4, 1, 0, 5, 6], [2], [], [2, 1, 1, 0, 3, 3, 1], [1], [3, 3], [], [0], [5, 2, 3, 3], [1, 1, 0, 1], [], [3, 4, 3, 1, 3, 4, 2, 2, 1, 1, 4, 2, 3, 0, 4, 0, 0], [2, 2, 1, 2], [], [1, 0, 2], [2, 2, 2, 0], [24], [], [0, 2, 0], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 1, 0, 7, 1, 2, 0, 1, 4, 4, 0, 17, 4, 0, 3, 4, 1, 0, 3, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = ((\"\"0\"\" + (\"\"2\"\"[divInt(int(8410.0),int(5.0)):i2][:len(\"\"0Y\"\")].capitalize() + saveChr(len((s2 + in0.capitalize())[int(6.0):])))).capitalize() + in0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1], [0, 2, 0, 0, 0, 2, 0], [0, 2], [2, 1, 0, 1, 1], [0], [0, 0, 0, 0, 0], [], [], [2], [], [0, 2], [], [1], [1], [], [1], [], [0, 1, 1, 0, 1], [6, 4, 2, 8, 5], [0, 0, 0, 1], [1, 1, 0], [0, 2, 1, 1, 1], [0], [], [2, 1, 2], [], [0, 2, 3, 3], [1, 1, 0, 1], [0], [0, 1, 1, 3, 0, 4, 1], [3], [1], [], [0, 0, 1, 2], [13, 2], [24], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 1, 5, 0, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 5, 5, 4, 3, 5, 1, 0, 3, 0, 4, 4, 1, 7, 1, 1, 0, 4, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\nloopBreak% = 0\\nfor in0 in \"\"N\"\":{:\\ni0 *= i0\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 -= ( int(64.0) * int(2.0) )\\nloopBreak% = 0\\nwhile \"\"C\"\" not in (in0 + \"\"y3\"\".rstrip()):{:\\ni1 = int(85.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1], [0, 2, 0, 1, 1], [1], [2, 0, 1, 1], [], [0, 0], [], [], [1], [], [2, 0], [], [0], [1], [], [0], [0], [1, 1, 1], [5, 7, 5], [1, 2, 1, 0, 0], [1, 0], [1, 3, 2, 0, 2, 3, 3, 1, 2, 1, 0, 0], [0, 0, 0], [1, 3, 2], [0, 0, 2, 2], [1], [3, 2, 2, 5], [1], [], [3, 0, 1, 4, 0, 0, 0], [1, 0, 3], [5], [], [3], [], [], [], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 2, 0, 0, 1, 0, 2, 0, 1, 1, 0, 1, 1, 3, 3, 5, 2, 12, 3, 3, 4, 0, 4, 1, 0, 6, 1, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (s2 + \"\"]\"\")\\nif saveChr(int(5.0)) in s2:{:\\nb1 = True\\ni1 += max(( i2 + ( len(in2) * abs(int(7.0)) ) ), ( int(5.0) * i1 ))\\ni0 = i0\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 1, 2], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 8, 6, 8, 8, 9, 2, 1, 2, 0, 7, 0, 3, 2, 7, 3, 3, 4, 9, 3, 4, 4, 0, 7, 8, 0], [0, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 0, 2, 0, 1, 2, 0, 2, 0, 0, 0, 1, 0, 2], [0], [1, 1, 3, 1, 0, 1, 0, 2, 0, 0, 1, 2, 2, 1, 3, 2, 3, 2, 1, 3, 1, 0, 3, 2, 1, 3, 0, 2, 3, 3, 0, 0, 0, 2, 2, 0, 0, 0, 0, 3, 0, 1, 2, 3, 2, 2, 2, 3, 0, 0, 3, 3, 1, 1, 3, 1, 0, 1, 0, 2, 3, 1, 0, 2, 3, 1, 1, 3, 0, 1, 3, 1, 2, 1, 1, 0, 3, 2, 1, 3, 0, 2, 0, 3, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 3, 1, 0, 2, 2, 4, 0, 4, 0, 1, 1, 3, 1, 0, 0, 4, 3, 2, 4, 2], [1, 1, 2, 2, 1, 0, 0], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 1, 2, 3, 0, 3, 4, 4, 1, 3, 3, 3, 3, 0, 5], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [], [0, 4, 2, 4, 2, 3, 4, 3, 3, 1, 3, 2, 2, 0, 3, 3, 2, 1, 3, 2, 4, 0, 0, 0, 2, 0, 0, 1, 3, 3, 0, 2, 0, 4, 3, 3, 3, 1, 1, 2, 3, 3, 0, 3, 0, 1, 4, 0, 0, 4, 2, 0, 3, 3, 4, 2, 1, 2, 2, 4, 1, 4, 2, 4, 1], [2, 3, 1, 1, 0, 0, 2, 3, 1, 1, 2], [5, 1], [1, 0, 2, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [1, 3, 0, 3, 1, 3, 0, 3, 0, 2, 2, 0], [14, 8, 7, 19], [1, 25], [4, 9], [14, 28, 24, 19]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 26, 26, 25, 1, 86, 18, 21, 7, 11, 15, 12, 0, 65, 11, 2, 14, 12, 4, 2, 2, 4], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\g int(8.0)\\ni0 = len(s1)\\ns1 = (saveChr(int(68.0)) + ((\"\"b\"\" + (s2[:i1][int(8.0):] + ((\"\"+\"\"[:i2] + (saveChr(( i2 - i2 ))[:int(9.0)] + in0)) + s0))) + in0))[mod(( int(212.0) - len(in1[divInt(max(divInt(int(0.0),min(int(7.0), i1)), abs(( int(0.0) * abs(i1) ))),divInt(saveOrd(in1),min(i2, i1))):i1]) ),( divInt(i2,i2) * i0 )):i2].strip(\"\"O]z\"\")[:saveOrd(((s1 + in0[i0:int(3.0)]) + getCharFromString((((\"\"?\"\" + \"\"I:\"\") + ((in0 + (in0 + \"\"H\"\")) + getCharFromString(in0, mod(min(mod(( mod(max(i1, i2),max(len(s0), int(2.0))) - int(7.0) ),max(int(3.0), i0)), int(3.0)),i2)))[:divInt(min(int(4.0), i0),( min(int(9.0), int(3.0)) + saveOrd(in2[:i0].capitalize()) ))]) + ((\"\"4\"\"[int(4.0):len(saveChr(int(4.0))[:mod(int(0.0),int(7.0))][i0:abs(divInt(int(8.0),saveOrd(\"\"9\"\")))])].rstrip() + saveChr(i1)) + \"\"T\"\".capitalize()[:( i0 + abs(int(0.0)) )])), i2)))].capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 1], [], [], [], [], [0], [5], [0, 0], [0], [], [2], [], [], [], [1, 1, 1, 0, 1, 1], [3, 1, 5, 0, 6, 2], [2, 0, 1, 0, 2], [0, 1], [2, 3, 3, 1, 1, 3, 0, 3, 3, 1, 0, 2, 0, 1], [0, 0], [0, 0, 0, 2, 3], [0, 2], [], [], [0, 0, 1], [], [1], [], [], [], [3, 3, 0], [11], [], [], [20, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 1, 10, 1, 5, 1, 0, 0, 3, 0, 1, 0, 0, 0, 3, 1, 0, 0, 2], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( min(min(int(3.0), int(1.0)), min(i0, abs(len(\"\";L\"\")))) + int(5.0) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [0], [], [], [0], [2, 4], [0, 1, 1], [0, 0], [], [3], [1], [], [], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 5, 4, 8, 9, 9, 1, 7, 8, 7, 9, 5], [2, 2, 2, 1, 1, 0, 1, 0, 1], [1, 1], [0, 2, 3, 2, 1, 0, 0, 3, 3, 2, 3, 1, 3, 0, 3, 3, 2, 1, 2, 3, 0, 2, 2, 0, 0, 1, 0], [1, 1, 0, 1, 1, 1, 0], [4, 4, 2, 1, 0, 4, 1, 3], [1, 1, 0], [0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0, 1, 1], [], [2, 0, 0, 1, 1], [], [], [2], [2, 0, 3], [25], [], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 12, 12, 9, 1, 27, 7, 8, 3, 5, 2, 3, 0, 5, 0, 0, 1, 3, 1, 0, 1, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( i2 == divInt(saveOrd(s0[divInt(int(05.0),i2):]),i2) or saveOrd(in2) \\le abs(( max(int(489917.0), min(i1, saveOrd(\"\"5Z\"\"))) - max(mod(int(87.0),mod(len(\"\";\"\"),i1)), divInt(( i0 - i1 ),int(95.0))) )) )\\ni0 += i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 3, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [2, 0, 1, 2, 0], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 1, 4], [1, 1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0, 4, 0], [0, 1, 3, 2], [1, 0], [1, 2, 0, 0, 1, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 9, 9, 9, 0, 33, 9, 6, 5, 4, 6, 2, 0, 19, 4, 1, 6, 2, 1, 0, 0, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s1[:len(in2)] not in in1[int(4.0):i0][int(3.0):]:{:\\nres0 = ( len(getCharFromString(saveChr(mod(i1,int(5.0)))[:i2][:int(7.0)], abs(i2))[mod(( divInt(int(2.0),i1) * ( saveOrd((\"\"R\"\" + in1.rstrip())) + divInt(i2,( len(\"\";\"\") - ( int(1.0) * i1 ) )) ) ),( min(int(7.0), i0) + int(7.0) )):int(9.0)]) != i0 or ( in0.endswith(s1.capitalize()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}]