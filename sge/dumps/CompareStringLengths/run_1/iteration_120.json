[{"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 6, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), int(8.0)) * int(9.0) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 191}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 6, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), int(8.0)) * int(9.0) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 191}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 3, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 6, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i2)):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), int(3.0)) * int(9.0) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 191}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 6, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), int(8.0)) * int(9.0) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 191}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 6, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(4.0), int(8.0)) * int(9.0) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 191}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 6, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), int(8.0)) * int(9.0) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 191}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 2, 0, 3, 2, 2, 0, 1, 1, 1, 3, 0, 3, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 4], [], [], [0, 0, 4, 0, 4, 4, 3, 2, 2, 0, 0, 0, 4], [0, 3, 2, 1], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 22, 22, 7, 0, 34, 10, 6, 2, 8, 6, 0, 0, 13, 4, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(mod(i2,max(( mod(i0,int(7.0)) + int(8.0) ), int(9.0))),min(i2, saveOrd(getCharFromString(in2, int(5.0)))))):{:\\nres0 = (in0[int(5.0):int(6.0)][i1:int(2174.0)] + in2).capitalize().rstrip(in1) not in saveChr(mod(i2,( divInt(mod(int(20.0),i1),int(65083.0)) - mod(i1,int(305.0)) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 3, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 1, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i2)):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), int(3.0)) * int(9.0) ),int(5.0))) not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 4, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 0, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 4, 0, 3, 2, 2, 0, 0], [2, 3, 2], [3], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 5, 0, 22, 5, 5, 1, 4, 6, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = in2.capitalize() not in in0.lstrip((in2[mod(( mod(int(0.0),i2) * int(8.0) ),int(9.0)):max(min(i1, int(5.0)), int(5.0))][int(6.0):i2] + in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), max(i2, int(2.0))):{:\\nres0 = getCharFromString(in2, ( mod(( i0 + int(8.0) ),int(9.0)) + int(5.0) )) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 201}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + int(2.0) )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i0,int(8.0)) - int(9.0) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 193}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 0, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 4, 3, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(i2,( i1 - int(2.0) ))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 201}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 193}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 3, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, divInt(( ( i2 - int(4.0) ) + int(8.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 201}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 1], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 5, 0, 19, 5, 4, 3, 2, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 * i0 )):{:\\nres0 = getCharFromString(in2, ( ( mod(i2,int(2.0)) - int(8.0) ) - int(9.0) )) not in in0[max(i1, i1):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 228}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 1, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(6.0), int(8.0)) * int(9.0) ),int(5.0))) not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 7, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 0, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [1, 2, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 4, 3, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i0 - i0 )):{:\\nres0 = getCharFromString(in2, mod(( i1 * i1 ),int(2.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 201}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 193}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 3, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 2, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 0, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 5, 0, 19, 6, 4, 2, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i2)):{:\\nres0 = getCharFromString(in2, ( ( divInt(i2,mod(int(2.0),int(8.0))) + max(i1, i1) ) - int(3.0) )) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 197}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 8, 9, 5, 5, 1, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 2, 0, 1, 1, 1, 2, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 4, 5, 0], [], [], [0, 0, 4, 0, 4, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 0, 20, 5, 4, 1, 4, 6, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = in2.capitalize() not in in1.rstrip((in2[max(mod(( i2 + int(7.0) ),int(8.0)), int(9.0)):mod(i1,i2)][int(5.0):int(5.0)] + s0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 0, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i0,int(9.0)) - int(8.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 193}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 5, 3, 1, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( mod(int(0.0),int(8.0)) * int(9.0) ),int(5.0))) not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 1, 0, 8, 1, 4, 0, 1, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), max(i2, int(2.0))):{:\\nres0 = in2.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 3, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [2, 3, 3, 2, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 0, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = getCharFromString(in2, mod(i0,i2)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 201}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 0, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 1, 0, 7, 1, 3, 0, 1, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), int(2.0)):{:\\nres0 = getCharFromString(in2, i2) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 201}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(( mod(i2,int(2.0)) - int(8.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 193}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 0, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), int(8.0)) * int(0.0) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 201}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 193}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 2, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), int(8.0)) * int(9.0) ),int(5.0))) not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 8, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i1 )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i2,int(2.0)) - int(8.0) ),int(8.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 201}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 3, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 3, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 2, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 3, 5, 0, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), divInt(i2,i2)):{:\\nres0 = getCharFromString(in2, mod(max(min(int(0.0), int(3.0)), int(9.0)),int(5.0))) not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 2, 9, 5, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 1, 2, 3, 3, 3, 0, 2, 3, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 1, 3, 0, 0], [1, 1], [1, 1, 0, 1], [4, 5, 5, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 0, 19, 2, 9, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(int(26.0), mod(max(len(in1), abs(i1)),mod(max(i0, i2),int(2.0)))) \\l len(in2):{:\\nres0 = int(9.0) \\le max(len(in2), min(int(5.0), int(6.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 1, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [3, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 4, 1, 0, 4, 0, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 1, 1, 7, 0, 17, 2, 7, 1, 1, 11, 0, 0, 13, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(in1) \\l max(mod(len(in2),abs(max(i0, ( i0 * i2 )))), i1):{:\\nloopBreak% = 0\\nwhile i1 \\le len(in0):{:\\nres0 = in1 != in1.capitalize()\\nin1 = (s1[i1:len(s0)][i1:int(1.0)] + in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = s0\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 202}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 5, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 0, 17, 2, 8, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), i1), int(26.0)) \\l len(in2):{:\\nres0 = int(7.0) \\le min(len(in2), int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 5, 7, 7, 6, 5, 3, 3, 6, 3], [2, 0, 2, 1, 0, 2, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 4, 1, 0], [1, 2, 2], [1, 0, 0, 1], [4, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 6, 0, 19, 3, 7, 3, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(( len(in1) - abs(max(i2, ( i0 * i2 ))) ), i1), int(22.0)) \\l len(in2):{:\\nres0 = min(i0, ( int(5.0) * i2 )) \\le int(7.0)\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1], [0, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), i1), int(26.0)) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 1, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 15, 2, 7, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in1) - abs(min(i1, ( i1 - i1 ))) ), i0), int(22.0)) \\l max(len(in2), i2)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 4, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 1, 1, 7, 0, 17, 2, 7, 1, 1, 9, 0, 0, 12, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i1 * i2 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile i1 \\le len(in0):{:\\nres0 = in1 != in1.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = (s1[i1:int(1.0)].rstrip(s0) + in1)\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 202}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 1, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 5, 4, 3], [], [], [0, 0, 4, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 21, 2, 9, 0, 2, 4, 0, 0, 7, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), i1), int(26.0)) \\l len(in2):{:\\nres0 = int(1.0) \\le min(len(getCharFromString((in0 + in2)[max(int(9.0), int(2.0)):], int(6.0))), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1, 1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 1, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 1, 1, 0], [1, 1], [0, 0, 0], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 2, 8, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(divInt(len(in1),abs(max(i1, ( i0 - i1 )))), i1), int(26.0)) \\l len(in2):{:\\nres0 = i2 \\le min(max(int(7.0), int(9.0)), int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 2, 9, 9, 8, 6, 5, 3, 3, 6, 3], [2, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 0, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [0, 1, 1, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1, 1], [1, 0, 0, 1], [4, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 15, 3, 6, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in1) - abs(min(i2, mod(i0,i0))) ), i1), int(22.0)) \\l divInt(len(in2),i2)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [1], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 2, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 1, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 8, 0, 19, 2, 7, 1, 1, 10, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i2) \\l len(in2):{:\\nloopBreak% = 0\\nwhile i1 \\le len(s1):{:\\nres0 = in1 not in in1.capitalize()\\nin2 = (s1[i1:int(1.0)][int(0.0):i0] + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = s0\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 202}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 4, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), i1), int(26.0)) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [2, 0, 2, 0, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 0, 4, 1, 0], [1, 0, 2], [1, 1, 0, 1], [4, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 6, 0, 19, 3, 7, 3, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(( len(in1) - abs(min(i2, ( i0 + i2 ))) ), i0), int(22.0)) \\l len(in2):{:\\nres0 = min(i0, ( int(7.0) * i1 )) \\le int(9.0)\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1, 1], [0, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 1, 1, 1, 2, 1, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 8, 1, 4, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(mod(len(in1),len(in2)), max(int(2.0), int(8.0)))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1, 1, 1], [1, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [0], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 8, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 0, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 4, 0, 14, 2, 6, 0, 2, 5, 0, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), i1), int(28.0)) \\l len(in2):{:\\nres0 = in1 in (in2 + in1)[int(7.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 222}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 9, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 3], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 4], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 4, 0, 0, 0], [2, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 4, 4, 4, 0, 18, 2, 8, 1, 1, 9, 0, 0, 12, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, ( i0 * i1 )))), i2), int(5.0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(s1):{:\\nres0 = in1.capitalize() != in2.rstrip(s1)[:int(8.0)][int(9.0):int(7.0)]\\nin2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 142}, {"genotype": [[0], [1, 1, 1, 1], [1, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 3, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 1, 0, 1], [4, 5, 3, 3, 4, 5, 1, 0, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 3, 3, 6, 0, 19, 2, 8, 1, 1, 9, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(int(1.0), mod(max(len(in1), abs(i0)),( i0 * max(i2, i2) ))) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(in0):{:\\nres0 = in1.capitalize() != (in2[i1:int(0.0)][int(8.0):i1] + s1)\\ns0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [0, 1, 1, 1], [0, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [5], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 0, 2, 2, 2, 3, 0, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 1, 18, 4, 6, 2, 2, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(mod(len(in1),len(in2)), max(i2, i0))\\ni2 = ( divInt(( min(i1, int(4.0)) * int(8.0) ),saveOrd(getCharFromString(in2, i2))) - i1 )\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 8, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 0, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [1, 0, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 14, 2, 7, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in1) - abs(min(i1, ( i0 + i1 ))) ), i0), int(28.0)) \\l abs(len(in2))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 222}, {"genotype": [[0], [1, 1, 1, 1], [1, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 2, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 7, 1, 4, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(mod(len(in1),len(in2)), abs(i2))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [4, 8, 8, 7, 6, 6, 4, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 2, 1, 1, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 11, 11, 4, 0, 31, 4, 13, 1, 3, 8, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(4.0), len(in1)), abs(max(i0, mod(( i1 * i1 ),int(8.0))))) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(s1):{:\\nres0 = in1.capitalize() != in2[max(divInt(int(8.0),int(7.0)), int(6.0)):int(6.0)][min(int(4.0), divInt(int(3.0),abs(abs(int(3.0))))):int(63.0)][abs(i2):]\\ns1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 142}, {"genotype": [[0], [1, 1], [2, 0], [1], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 4, 7, 8, 7, 6, 5, 3, 3, 6, 3], [2, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 2, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 0, 4, 1, 0], [1, 1, 1], [1, 1, 0, 1], [4, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 5, 5, 6, 0, 21, 4, 7, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(( len(in1) - abs(min(i2, ( i0 - i2 ))) ), i1), int(24.0)) \\l len(in2):{:\\nres0 = min(i0, ( int(7.0) - mod(int(8.0),int(7.0)) )) \\le i1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1, 1], [0, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(8.0) ))) + int(3.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 173}, {"genotype": [[0], [1, 1, 1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 3, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(7.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(6.0) ))) + divInt(int(9.0),( int(8.0) * i2 )) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(7.0) ))) + divInt(int(9.0),mod(int(8.0),i0)) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(len(in2),divInt(len(in0),( ( i2 + int(3.0) ) * int(8.0) ))) + int(3.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 167}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(8.0) ))) + int(3.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 173}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1, 2], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(8.0) ))) + int(3.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 173}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) * int(8.0) ))) + int(3.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 167}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 14, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(6.0) ))) + divInt(int(9.0),i2) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 14, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(7.0) ))) + divInt(int(9.0),int(8.0)) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [2, 0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [4], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 0, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 6, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nloopBreak% = 0\\nfor in2 in getCharFromString(in0, mod(( max(int(0.0), int(8.0)) * int(0.0) ),int(5.0))):{:\\nres0 = in2.startswith(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 239}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 4, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),abs(min(i1, ( i0 - i0 )))), i0), int(29.0)) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 3, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 8, 0, 19, 2, 7, 1, 1, 10, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile i1 \\le len(in0):{:\\nres0 = s1 != in1.capitalize()\\nin2 = (s1[i1:int(1.0)][int(0.0):i0] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin0 = s0\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 2, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 21, 3, 9, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), i1), int(0.0)) \\l len(in2):{:\\nres0 = int(6.0) \\le min(len(in1), max(int(7.0), ( int(9.0) - int(2.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 179}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(6.0) ))) + divInt(int(9.0),( int(8.0) * i2 )) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(7.0) ))) + divInt(int(9.0),( int(8.0) * i0 )) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 163}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) * int(8.0) ))) + int(3.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 167}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(8.0) ))) + int(3.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 173}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 3, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 2, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 2, 0, 19, 5, 6, 1, 4, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(mod(i2,( mod(max(int(0.0), int(3.0)),int(9.0)) * int(5.0) )),min(saveOrd(getCharFromString(in2, i2)), int(5.0)))):{:\\nres0 = in0 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 9, 1, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(9.0) ))) + mod(int(1.0),( int(8.0) * i0 )) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 175}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 3, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 3, 5, 1, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), max(i2, int(2.0))):{:\\nres0 = getCharFromString(in2, ( min(mod(i0,int(8.0)), int(9.0)) + int(5.0) )) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 210}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 2, 9, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 3, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 3, 5, 1, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(11.0) \\l max(mod(len(in1),len(in2)), max(i2, int(2.0))):{:\\nres0 = getCharFromString(in2, ( min(mod(i0,int(9.0)), int(9.0)) + int(5.0) )) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 5, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) * int(5.0) ))) + int(3.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 179}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 9, 3, 7, 6, 3, 6], [0, 1, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(19.0):]) \\le len(in2)\\ni0 *= i1\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1, 1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 1, 2, 0, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(7.0) ))),i0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 177}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 2, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 0, 19, 6, 4, 3, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, ( ( mod(divInt(int(2.0),int(8.0)),int(9.0)) - max(i2, i1) ) + int(5.0) )) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 210}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [0], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\ni1 = i2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i2,int(2.0)) + int(8.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 201}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 0], [1, 1, 2], [0, 0], [1], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 8, 0, 19, 2, 7, 1, 1, 10, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile i1 \\l len(in0):{:\\nres0 = in1 not in in1.capitalize()\\nin2 = (s1[i1:int(1.0)][int(0.0):i0] + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = s0\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 227}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [3], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 3, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 1, 15, 4, 4, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = in2.capitalize() != s0\\ni2 *= mod(( max(int(3.0), int(8.0)) - int(9.0) ),int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 186}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 2, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 5, 0, 19, 6, 4, 2, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i2,int(2.0)) + int(8.0) ),mod(max(i1, i2),int(9.0)))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 201}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 4, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i1,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), int(8.0)) * int(9.0) ),int(5.0))) not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 230}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [3, 5, 0, 5, 4, 3], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 14, 2, 7, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in0) - abs(min(i1, ( i1 - i2 ))) ), i2), int(22.0)) \\l abs(len(in2))\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) + divInt(len(in0),( ( i0 + int(4.0) ) + int(6.0) )) ) * divInt(int(9.0),( int(8.0) - i2 )) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 327}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 4, 3, 9, 0, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 0, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(mod(max(int(4.0), int(3.0)),int(9.0)),int(0.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 193}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [8, 8, 3, 8, 7, 7, 1], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 1, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(len(s1),( min(i2, int(8.0)) + ( int(8.0) + i2 ) ))) + divInt(int(3.0),i2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 309}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(i1,( ( i2 + int(4.0) ) + int(8.0) ))) + int(3.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(8.0) ))) + i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 184}, {"genotype": [[0], [1, 1], [2, 1], [0], [0, 2], [0], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 8, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 2, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [0, 0, 0], [4, 5, 4, 5, 4, 3], [], [0], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 0, 2, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = max(max(divInt(len(in1),abs(max(i1, divInt(i0,i2)))), i1), int(28.0)) \\l len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [0, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [2, 6, 3, 7, 6, 3, 6], [1, 1, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 14, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(26.0):]) \\le len(in2)\\ni1 *= i1\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 197}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1, 0, 4], [0, 1, 2, 0, 2, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 3, 0, 2, 0, 1, 3, 2, 1, 1, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [4, 3, 3, 0, 0, 4], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1, 1, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 2, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 8, 0, 36, 13, 6, 7, 6, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0[( ( i0 + mod(int(4.0),( int(6.0) + ( int(9.0) + i1 ) )) ) * int(8.0) ):i2][mod(i0,int(7.0)):( min(min(i2, ( i2 - int(7.0) )), saveOrd(s2)) * divInt(int(1.0),int(0.0)) )]),divInt(i2,int(4.0)))) + i0 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 5, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) * int(5.0) ))) + int(3.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], [0, 7, 9, 8, 7, 7, 1, 8, 1, 5, 4, 3, 7, 1, 4, 5, 2], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 3, 1, 1, 0, 1, 0, 2, 0, 1, 3, 2, 0, 2, 2, 2, 1, 1, 1, 3, 1, 1, 1], [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 0, 0, 1], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1, 1, 1], [2, 5, 1, 2, 4, 5], [1], [], [0, 0, 2, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 17, 17, 5, 0, 34, 11, 6, 5, 6, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(s1[( ( i1 + int(0.0) ) + int(7.0) ):divInt(min(int(9.0), int(8.0)),i0)][int(7.0):i2]),mod(i1,int(71.0)))) + min(( i2 * ( mod(mod(int(8.0),int(1.0)),int(5.0)) - max(int(43.0), int(71.0)) ) ), int(452.0)) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 9, 7, 6, 6, 5, 8, 3, 6, 3, 7, 5], [0, 1, 1, 2, 0, 1, 2, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 2, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 1, 0, 3, 0, 3, 0, 0, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 4, 4], [2], [1, 0, 1, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4, 3], [], [], [0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 4, 0], [2, 3, 2], [4], [0, 1, 0, 0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 7, 7, 8, 0, 35, 5, 15, 1, 4, 10, 0, 0, 14, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, divInt(i1,i1)))), i2), int(5.0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(s1):{:\\nres0 = in1[max(( int(8.0) * min(mod(int(9.0),abs(int(7.0))), mod(int(6.0),abs(abs(int(6.0))))) ), i0):saveOrd(in2[i1:saveOrd(s1)][i2:i2][:int(5.0)])] != in2\\nin1 = in0.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 149}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 4, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 3, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( i0 + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 0, 0, 1, 1, 2, 1, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [0, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [3, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [0], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(36.0):]) \\le len(in2)\\ni1 = i2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 244}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [0], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [2, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[int(16.0):]) \\le len(in2)\\ni1 = i2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 6, 3, 7, 6, 3, 6], [2, 1, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1, 0], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 2, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 4, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 4, 0, 21, 7, 4, 4, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\l max(mod(len(in1),len(in2)), ( i2 + i1 )):{:\\nres0 = getCharFromString(in1, mod(( ( divInt(int(3.0),( int(7.0) * max(i2, i1) )) + int(6.0) ) + int(3.0) ),int(6.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 195}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 2, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 3, 0, 18, 5, 4, 3, 2, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0[( int(4.0) + i0 ):int(6.0)][int(9.0):min(int(8.0), ( int(7.0) + i2 ))]),int(71.0))) + i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 1, 7, 7, 1], [0, 0, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 1, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( i0 + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 5, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) * int(5.0) ))) + int(3.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1, 0, 1], [2, 1, 0, 1], [1], [0, 2, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [4, 1, 3, 2, 1, 3, 0, 3, 1, 0, 1], [1, 1], [1, 1, 0, 1], [2, 5, 4, 5, 4, 3, 4], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 4, 4, 1, 3, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 8, 8, 6, 1, 26, 2, 11, 1, 2, 7, 0, 0, 10, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(s2) \\l max(mod(len(in2),abs(max(i1, mod(i0,i2)))), i1):{:\\nres0 = int(2.0) \\le len(in1)\\n:}else:{:\\nin2 = (in1 + in0)[int(6.0):]\\ni1 -= min(len(in1[:max(int(7.0), int(9.0))][int(2.0):int(6.0)]), min(int(5.0), max(int(3.0), i1)))\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le divInt(divInt(len(in2),divInt(len(in0),( ( i0 + int(9.0) ) + int(8.0) ))),min(i2, ( int(9.0) + i2 )))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 208}, {"genotype": [[0], [1, 1, 1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 3, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(len(in0),( divInt(i1,int(4.0)) + int(7.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 195}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 8, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 2, 0, 1, 3, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [2, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 0], [], [], [0, 0, 4, 0, 4, 0, 3, 2, 2, 2, 0, 4, 0, 4, 4], [0, 3, 2, 0, 1], [4], [0, 0, 1], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 6, 0, 23, 4, 6, 1, 3, 6, 0, 0, 15, 5, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(18.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = getCharFromString(in2, mod(i2,i0)) not in in0.rstrip((in2[:max(mod(( i2 + int(7.0) ),min(int(8.0), saveOrd(s0.capitalize()))), i1)][i2:int(9.0)][int(5.0):int(5.0)] + getCharFromString(saveChr(i1), int(6.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 187}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 8, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(18.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [5], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [2, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 2, 3, 3, 1, 1, 3, 0, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 5, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 11, 11, 4, 0, 32, 4, 14, 1, 3, 8, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(2.0), len(in1)), abs(max(i0, mod(( i1 * i1 ),int(8.0))))) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(s1):{:\\nres0 = in1.capitalize().endswith(in2[max(int(8.0), int(7.0)):min(int(6.0), int(6.0))][abs(int(5.0)):divInt(divInt(abs(abs(int(3.0))),int(3.0)),abs(i2))][int(63.0):])\\nin2 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 153}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 2, 8, 6, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 1, 1, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 1, 0, 9, 2, 3, 1, 1, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l max(mod(len(in1),len(in2)), ( i2 + int(2.0) )):{:\\nres0 = getCharFromString(in2, int(8.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 188}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 0, 9, 6, 6, 7, 3, 3, 6, 2, 7, 5], [0, 0, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 1, 2, 2, 2, 2], [2, 0], [1, 0, 0, 1], [4, 5, 0, 1, 3, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 0, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 9, 9, 3, 0, 29, 4, 13, 2, 2, 8, 0, 0, 10, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(in1)), abs(max(i0, mod(( i0 * i1 ),int(8.0))))) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(s0) \\le saveOrd(s1):{:\\nres0 = in0.capitalize() != in2\\ns1 = in2[max(int(0.0), int(9.0)):max(divInt(int(6.0),abs(int(6.0))), ( int(7.0) + abs(abs(int(3.0))) ))][int(3.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [0, 1, 1, 0, 0, 1], [0, 2, 1, 1, 0, 0], [2, 2], [0, 2, 0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 5], [1, 1, 2, 1], [0, 0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 3, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 3, 1, 1, 0, 1, 1, 3, 1, 0, 1, 3, 3, 1, 1, 2, 0, 3, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 1, 3, 1], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 5, 4, 3, 1, 4, 1, 3, 3], [0, 1, 1], [], [0, 0, 0, 0, 4, 0, 3, 1, 2, 0, 0, 0, 3, 0, 4, 0, 0, 4, 3, 3, 0, 3, 1, 0, 2, 1], [2, 3, 2, 0], [4], [0, 0, 1], [2, 3, 2], [], [], [2, 1], [23]], "fitness": 17, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 3, 0, 15, 2, 8, 1, 1, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), int(1.0)), int(3.0)) \\l len(in2)\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(in0):{:\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 252}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 0, 0, 1, 2, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 4, 0, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, max(mod(i2,i1), int(7.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 189}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 1, 1, 0], [2, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 4, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 0, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 1, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 8, 0, 17, 2, 7, 1, 1, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l max(i1, len(in2)):{:\\nloopBreak% = 0\\nwhile i1 \\le i0:{:\\nres0 = in0 != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 2, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 14, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(s2),( ( i0 + int(4.0) ) + int(6.0) ))) + divInt(int(9.0),i2) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], "other_info": {}, "test_fitness": 372}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 4, 8, 7, 7, 1], [0, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 1, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 * int(4.0) ) + int(6.0) ))) + divInt(i0,( int(4.0) - i2 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 212}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [9, 8, 6, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 1, 1, 0, 2], [2], [1, 1, 0, 1], [4, 5, 3, 3, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 3, 3, 5, 0, 19, 2, 9, 1, 1, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), i2), int(9.0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le max(max(int(8.0), int(6.0)), i1):{:\\nres0 = in0 != in1.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 173}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 0, 0, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 3, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 3, 3, 2, 1, 3, 3, 4, 3, 0, 2], [0], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 4], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 0, 0, 5, 0, 10, 2, 3, 1, 1, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(len(in1), mod(i0,i0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile i2 \\le ( i2 + i1 ):{:\\nres0 = in0 != in1\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 0, 1], [1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 0, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(int(1.0), len(in1)), abs(max(i0, mod(( i1 * i1 ),i2)))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 9, 4, 3, 9, 0, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 1, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 1, 0, 15, 4, 4, 0, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(19.0) \\l max(mod(len(in1),len(in2)), mod(int(4.0),i2)):{:\\nres0 = getCharFromString(in2, mod(mod(max(int(3.0), int(9.0)),int(0.0)),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 200}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [6, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5], [0, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 1, 3, 1, 1, 3, 1, 1, 3, 0, 2, 1, 3, 2, 1, 3, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 3], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 1, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 2, 2, 4, 0, 15, 2, 7, 1, 1, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i2 * i1 )))), i2), int(6.0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le int(9.0):{:\\nres0 = s1 != in1.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 1, 2, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 3, 2, 5, 1, 0, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 0, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 1, 1, 6, 0, 17, 2, 8, 1, 1, 9, 0, 0, 11, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i2, ( i1 * i2 )))), i2), i0) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(in0):{:\\nres0 = s2.capitalize() != (in2 + s1[i1:int(1.0)])\\ns0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 247}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 5, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 4, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(saveOrd(in1),len(in2)), max(i2, int(5.0))):{:\\nres0 = getCharFromString(in2, ( mod(( i0 + int(8.0) ),int(9.0)) + int(5.0) )) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 4, 3, 9, 0, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 4, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 1, 1, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l max(mod(saveOrd(in1),len(in2)), ( i2 * i0 )):{:\\nres0 = in2 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 320}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 4, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(saveOrd(in1),len(in2)), max(i2, int(2.0))):{:\\nres0 = getCharFromString(in2, ( mod(( i0 + int(8.0) ),int(9.0)) + int(5.0) )) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 2, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 0, 19, 5, 5, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(20.0) \\l max(mod(len(in1),len(in2)), max(i2, ( mod(( divInt(i0,int(2.0)) + int(8.0) ),int(9.0)) + min(i2, i1) ))):{:\\nres0 = getCharFromString(in2, int(5.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 195}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [6, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 6, 0, 17, 3, 7, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(( len(in1) - abs(i1) ),( i2 - i2 )), i2), i2) \\l max(i1, len(in2)):{:\\nres0 = len(in0) \\le int(66.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 0, 1, 1], [0, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 3, 0], [], [], [0, 0, 0, 2, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [1, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 3, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 1, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 - int(4.0) ) + int(8.0) ))) + divInt(min(i0, int(9.0)),i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 238}, {"genotype": [[0], [1, 1, 1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 1, 3, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 18, 6, 5, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(len(in0),( ( i1 + min(int(4.0), int(7.0)) ) + min(divInt(int(2.0),i2), int(8.0)) ))) + i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [3, 1, 3, 2, 1, 3, 0, 4, 1, 0], [1, 1], [0, 0, 0], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 18, 3, 8, 1, 2, 5, 0, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l max(divInt(len(in2),abs(max(i1, divInt(( i0 - i2 ),int(2.0))))), len(in1)):{:\\nres0 = i1 \\le min(saveOrd((in2 + in1)[int(6.0):]), int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 3, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 20, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( int(4.0) + min(int(7.0), int(9.0)) ))) + ( int(8.0) + divInt(int(7.0),i1) ) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 195}, {"genotype": [[0], [1, 1, 1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 0, 1, 1, 1, 3, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 20, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(( divInt(divInt(i1,int(4.0)),int(7.0)) + int(2.0) ),len(in0))) + ( int(8.0) + i2 ) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 384}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 9, 5, 6, 2, 8, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 0, 2, 2, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 2, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [1, 4, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1, 0, 1, 1], [4, 5, 5, 5, 5, 5], [], [], [0, 0, 4, 0, 2, 0, 2, 2, 4, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 20, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 22, 22, 7, 0, 34, 10, 6, 2, 8, 6, 0, 0, 11, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(saveOrd(in1),len(in2)), divInt(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), mod(int(8.0),int(9.0))) * min(saveOrd(in2[i2:int(9.0)]), int(5.0)) ),int(6.0))) not in in2.rstrip(in2)[:i0][int(2874.0):mod(i2,divInt(( mod(int(20.0),i2) - int(65083.0) ),mod(i1,int(305.0))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 391}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 4, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 2, 0, 0, 4, 0, 3, 2, 0, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 20, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 8, 0, 19, 2, 7, 1, 1, 10, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l len(in2[i1:saveOrd(in0)]):{:\\nloopBreak% = 0\\nwhile i1 \\le int(1.0):{:\\nres0 = in1.capitalize() != (in1[int(0.0):i0] + in2)\\ns1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = s0\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 272}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 8, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 1, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [3, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l max(mod(len(in2),abs(max(i1, mod(i0,i2)))), i1):{:\\nres0 = int(26.0) \\le len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 212}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 1, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 0, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 0, 1, 0, 2, 2, 2, 0], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 4, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 8, 8, 7, 0, 32, 3, 14, 1, 2, 8, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\ge min(max(int(1.0), int(8.0)), min(int(8.0), int(1.0))):{:\\nres0 = in0 != in1.capitalize()\\nin2 = s1[abs(int(6.0)):divInt(int(6.0),abs(abs(int(5.0))))].rstrip(in2)[int(3.0):min(i0, i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 1, 4, 0, 2], [], [], [0, 0, 0, 0, 4, 0, 3, 0, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 1, 1, 6, 0, 17, 2, 8, 1, 1, 11, 0, 0, 12, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(in1):{:\\nres0 = in1.capitalize() != (in2 + s1[i1:int(1.0)])\\ns1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = s2\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 243}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [8, 8, 3, 8, 7, 7, 1], [1, 0, 2, 2, 1, 1, 1], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 0, 2, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 1, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 10, 4, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\l ( divInt(len(in2),divInt(i1,( i0 + i2 ))) - int(8.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 268}, {"genotype": [[0], [1, 1, 0, 1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 5, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(len(in0),( ( divInt(int(4.0),int(5.0)) + int(3.0) ) + i1 ))) + ( int(8.0) * i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 257}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 3, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 23, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 4, 0, 15, 5, 3, 1, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(divInt(mod(i2,i2),int(0.0)),int(2.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 387}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 23, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 3, 0, 15, 5, 3, 1, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), ( i1 + i0 )):{:\\nres0 = getCharFromString(in2, mod(divInt(mod(i2,int(0.0)),int(2.0)),int(8.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 387}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 23, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), int(0.0)) * int(0.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 387}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 4, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 2, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 23, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 1, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), int(0.0)):{:\\nres0 = getCharFromString(in2, divInt(i2,mod(( max(int(0.0), int(8.0)) * int(9.0) ),int(4.0)))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 387}, {"genotype": [[0], [1, 1, 1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 3, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\l ( ( len(in2) + divInt(len(in0),( ( i1 + int(4.0) ) + int(7.0) )) ) * int(2.0) )\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], "other_info": {}, "test_fitness": 350}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i2,int(0.0)) - int(2.0) ),int(8.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], "other_info": {}, "test_fitness": 384}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 5, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( i1 + int(4.0) ) + int(7.0) ))) + divInt(int(5.0),( int(8.0) * i0 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 298}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 25, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),mod(len(in0),( ( i1 + int(4.0) ) + int(8.0) ))) + int(3.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 297}, {"genotype": [[0], [0, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 1, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [4, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 25, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(in0, int(16.0))) \\le len(in2)\\ni0 *= i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 309}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [3, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 25, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( divInt(len(in2),divInt(len(in0),int(46.0))) + ( i0 + int(9.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 308}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 1, 2, 2, 2, 1, 2, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),i0)) + ( i2 + int(4.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 3, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 1, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),len(in0)) + min(divInt(( i0 + int(4.0) ),int(6.0)), ( int(9.0) + divInt(int(8.0),i0) )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 289}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 0, 0, 3, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 1, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(1.0) ) + int(0.0) ))) + divInt(int(0.0),( int(3.0) - i0 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 289}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(len(in0),divInt(( i1 + int(4.0) ),int(8.0)))) + int(3.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 287}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 5, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 1, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 3, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 7, 7, 3, 0, 21, 2, 9, 1, 1, 8, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(in1)), abs(max(i0, mod(( i1 * i1 ),int(5.0))))) \\l len(in2):{:\\nloopBreak% = 0\\nwhile int(8.0) \\le len(in0):{:\\nres0 = s1 != in0.capitalize()\\nin2 = s1[:saveOrd(in2)][int(7.0):int(6.0)][max(int(6.0), int(5.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 388}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 2, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 2, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 5, 1, 4, 0, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 4, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 9, 9, 3, 0, 29, 4, 13, 1, 3, 7, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(in1)), abs(max(i0, mod(( i2 * i1 ),int(8.0))))) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in2) \\le saveOrd(s1):{:\\nres0 = in1.capitalize() != s0.rstrip(s1)[max(int(8.0), divInt(min(int(7.0), int(6.0)),abs(int(6.0)))):divInt(int(5.0),abs(abs(int(3.0))))][int(3.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], "other_info": {}, "test_fitness": 340}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 6, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 0, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [0, 1, 3, 2, 1, 3, 3, 1, 1, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 2, 2, 6, 0, 19, 2, 9, 1, 1, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), i2), int(1.0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le max(max(int(8.0), i1), i1):{:\\nres0 = in0 != in1.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 239}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 2, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 4, 0, 17, 6, 3, 2, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l mod(( max(len(in1), mod(i2,i0)) + ( divInt(mod(i2,int(2.0)),int(8.0)) - int(9.0) ) ),len(in2)):{:\\nres0 = getCharFromString(in2, i1) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 320}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [4, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 2, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 4, 0, 17, 6, 3, 2, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(4.0) \\l mod(( max(len(in1), divInt(i2,i0)) + ( divInt(mod(i2,int(0.0)),int(2.0)) - int(8.0) ) ),len(in2)):{:\\nres0 = getCharFromString(in2, i1) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], "other_info": {}, "test_fitness": 365}, {"genotype": [[0], [0, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 9, 3, 7, 6, 3, 6], [0, 1, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 1, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [1, 0], [], [5], [5], [], []], "fitness": 27, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 1, 8, 1, 3, 1, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[:int(19.0)]) \\le max(i0, divInt(len(in2),i1))\\ni1 *= i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 306}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1], [1, 4, 3, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 1, 2, 1, 3, 1, 1, 2, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 1, 0, 13, 3, 4, 0, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), mod(i1,int(4.0))):{:\\nres0 = getCharFromString(in2, mod(int(3.0),max(int(8.0), int(9.0)))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 370}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 1, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 3, 4, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),min(int(4.0), i1))) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 2], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [1], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 8, 0, 19, 2, 7, 1, 1, 10, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile i1 == len(in0):{:\\nres0 = in1 != in1.capitalize()\\nin2 = (s1[i1:int(1.0)][int(0.0):i1] + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = s0\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [8, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 0, 0, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [4, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(in0, int(8.0))) \\le len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 310}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [8, 8, 3, 8, 7, 7, 1], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 1, 3, 2, 2, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l divInt(( len(in2) + int(8.0) ),len(in0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 3, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 3, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 2, 0, 15, 3, 5, 0, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), mod(i2,i2)):{:\\nres0 = getCharFromString(in2, mod(max(min(int(0.0), int(0.0)), int(3.0)),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 370}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 1, 3, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 2, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 1, 0, 7, 1, 3, 0, 1, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),int(2.0)), len(in2)):{:\\nres0 = getCharFromString(in2, i2) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 395}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 7, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 1, 0, 8, 1, 4, 0, 1, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), max(i2, int(0.0))):{:\\nres0 = in2 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 451}, {"genotype": [[0], [1, 1, 0, 1, 1], [1, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 0, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 1, 2, 3, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [0, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2, 1], [1, 0, 0, 1], [3, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in0) * abs(int(1.0)) ), ( max(i0, i0) - i0 )), i2) \\l len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [3], [1], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [3, 6, 3, 2, 6, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 3, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 2, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 1, 1], [2, 4, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 2, 5, 5], [], [], [0, 0, 4, 4, 0, 0, 2, 2, 4, 0, 0], [2, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 29, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 6, 1, 23, 6, 5, 3, 4, 5, 0, 0, 10, 3, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(36.0) \\l abs(mod(saveOrd(in1),len(in2))):{:\\nres0 = in2.rstrip(s2).capitalize() not in in2.capitalize()[:( i2 + max(( mod(mod(i0,int(3.0)),int(2.0)) - int(6.0) ), min(i2, i1)) )][mod(int(5.0),int(5.0)):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(6.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 309}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1], [1, 4, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 1, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 0, 0, 1, 1], [4, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5, 3, 5], [], [0], [4, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 2, 0, 19, 4, 6, 2, 2, 8, 0, 1, 12, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in getCharFromString(in2, int(14.0)):{:\\nres0 = saveOrd(in2.rstrip(in0)) \\l mod(len(in2),len((in2[mod(i2,int(2.0)):( ( max(int(8.0), int(9.0)) * int(5.0) ) - int(5.0) )][min(saveOrd(in0), i0):int(6.0)] + in2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 341}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\l max(mod(len(in1),len(in2)), mod(i0,i2)):{:\\nres0 = getCharFromString(in2, mod(( max(int(10.0), int(0.0)) * int(1.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "other_info": {}, "test_fitness": 411}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 3, 1, 1, 1, 0, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 4, 2, 1, 3, 3, 4, 1, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 29, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 6, 6, 4, 0, 21, 2, 9, 1, 1, 9, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(saveOrd(in1),abs(max(i0, ( i1 * i1 )))), int(1.0)), int(8.0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(in0):{:\\nres0 = in1.capitalize() != (in2[max(int(8.0), int(7.0)):int(6.0)][i2:int(6.0)] + s1)\\nin2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 303}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 0, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le ( int(4.0) + len(in2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [4], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 0, 0, 1, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 3, 0, 8, 2, 3, 1, 1, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\l max(mod(len(in1),len(in2)), ( i0 + i2 )):{:\\nres0 = in2.startswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 295}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( mod(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) * i2 ))) + int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 380}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [4], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 2, 9, 5, 5, 6, 2, 0, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 0, 1, 2, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 4, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 22, 22, 8, 0, 35, 11, 5, 2, 9, 6, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( mod(int(0.0),i2) * int(2.0) ),mod(max(min(i1, int(9.0)), int(5.0)),int(5.0)))).startswith(in0.rstrip((in2[i2:int(6.0)][mod(i1,mod(( mod(int(2074.0),i1) - int(20.0) ),mod(i0,int(65083.0)))):int(305.0)] + in2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 300}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [1], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 5, 7, 6, 2, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 0, 3, 3, 0, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 2, 1, 3, 1, 3, 1, 3, 3, 1, 1, 3, 0, 3], [1, 0, 1, 1, 1], [1, 4, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 2], [2, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 4, 0, 0, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(saveOrd(in1), i0) \\l len(in2):{:\\nloopBreak% = 0\\nwhile abs(i1) \\le i1:{:\\nres0 = in0 not in in1\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [5], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 0, 3, 1, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [0, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 1, 0, 5, 0, 2, 0, 0, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(i2, len(s0)):{:\\nres0 = in2.endswith(getCharFromString(in2, int(2.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 0, 2, 2, 2, 2, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 4, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 0, 19, 5, 5, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),saveOrd(in2)), max(i2, i0)):{:\\nres0 = getCharFromString(in2, ( mod(( divInt(int(2.0),int(8.0)) + int(9.0) ),min(i2, i1)) - int(5.0) )) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 416}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 0, 3, 3, 0, 1, 0, 0, 1, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [0, 1, 0, 1], [4, 5, 3, 4, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 9, 1, 4, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(divInt(i1,len(in1)), abs(i0)), int(2.0)) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 0, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 1, 1, 0], [1, 1], [0, 0, 0], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 6, 0, 15, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(divInt(len(in1),i1), abs(i0)), divInt(i2,i1)) \\l i2:{:\\nres0 = int(26.0) \\le max(i1, len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5, 6, 2], [0, 1, 2, 2, 1, 1, 1, 1, 2], [1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 0, 0, 3, 3, 2, 1, 1, 0, 1, 2, 3, 1, 2, 1, 3, 3, 1, 1, 1, 2, 2, 1, 3, 2, 1, 3, 2, 0, 0, 1, 1], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2, 2, 2], [1, 0, 0, 1, 0, 1, 1], [4, 5, 5, 3, 4, 1, 1, 0, 4], [], [], [0, 2, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 2, 2, 0], [2, 3, 2], [4], [0, 0, 1, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 15, 15, 9, 0, 42, 10, 11, 3, 7, 8, 0, 0, 15, 1, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),( abs(i0) * divInt(i1,i2) )), i2), i1) \\l i1:{:\\nloopBreak% = 0\\nwhile max(len(in2[divInt(int(1.0),int(0.0)):i1]), int(8.0)) \\le mod(len(in2),int(7.0)):{:\\nres0 = in0.capitalize() != (in1[:( int(6.0) * saveOrd(s1) )][len(s1):int(6.0)] + s0[int(5.0):int(3.0)][divInt(mod(int(3.0),min(mod(int(63.0),abs(( i1 * i2 ))), int(75.0))),int(62.0)):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 1], [], [0, 0], [], [], [2], [4, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5, 0, 0, 1, 6, 2, 5, 4, 3, 1, 4, 9, 9, 1, 0, 3], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1, 1, 0, 2, 1, 1, 2, 1, 2, 2, 3, 1, 1, 2, 1, 2, 1, 1, 3, 3, 2, 0, 1, 0, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 3, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2, 1, 1, 0, 2, 2], [1, 0, 0, 1, 1, 0, 0, 1, 1], [4, 5, 3, 2, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 7, 7, 5, 1, 22, 7, 4, 4, 4, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(mod(( len(in1) * ( len(in2) - abs(divInt(i0,int(1.0))) ) ),int(0.0)), divInt(int(8.0),mod(int(7.0),i0))) \\le int(6.0):{:\\nloopBreak% = 0\\nwhile i2 \\le ( i2 - int(6.0) ):{:\\nb2 = in0 != s2\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni1 += int(5.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 9, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 2, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 1], [2, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 0, 18, 5, 5, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nb1 = getCharFromString(in2, max(( int(2.0) + ( mod(divInt(i2,int(9.0)),int(9.0)) + int(5.0) ) ), min(i0, i2))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [2, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 0, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 0, 4, 1, 0], [1, 2, 2], [1, 1, 1, 1, 1], [4, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 2, 2, 6, 0, 15, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(( len(in1) - abs(min(i2, ( i0 * i2 ))) ), i1), int(22.0)) \\l i0:{:\\nres0 = len(in2) != i1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 3, 8, 9, 9, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1, 1], [4, 5, 0, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l max(mod(len(in1),len(in2)), divInt(i2,i0)):{:\\nres0 = getCharFromString(s0, divInt(( max(int(3.0), int(8.0)) * int(9.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 2, 2, 0, 2, 3, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 0, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 4, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(70.0) \\l max(mod(len(in1),( mod(i2,( len(in2) + mod(i0,i2) )) - int(7.0) )), i1):{:\\nres0 = getCharFromString(in2, int(8.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 0, 1], [2, 2, 1, 0, 1, 0], [2, 1], [0, 2, 1, 0], [], [0, 0], [], [], [2, 1], [0, 5, 1], [2, 1, 1, 1], [0, 0, 0], [1], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 8, 2, 3, 6, 6, 0, 3, 3, 6, 3, 7, 5, 8, 6], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 2, 1, 1, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2, 1], [1, 0, 0, 1], [4, 5, 3, 2, 4, 5, 2, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 6, 6, 2, 4, 0, 2, 0, 0, 2, 3, 4, 3, 1, 0, 0, 0, 1, 15, 15, 6, 1, 35, 4, 14, 2, 3, 8, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in in2:{:\\nif max(max(int(1.0), len(in0)), abs(max(i0, mod(( i1 * i1 ),int(8.0))))) \\l len(s2):{:\\nb2 = len(in1.capitalize()) != saveOrd(in2[max(int(2.0), int(3.0)):min(int(6.0), int(6.0))][abs(int(0.0)):divInt(int(3.0),abs(abs(int(3.0))))][int(63.0):])\\ns2 = in2\\n:}else:{:\\ni2 -= abs(i1)\\nb1 = divInt(int(75.0),int(86.0)) \\g i1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [2, 0, 1, 0, 2], [0], [1, 1, 3, 2, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 4, 3, 3, 4], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [3, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(16.0) \\le int(3.0)\\ni2 = saveOrd((in0 + in2))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 1, 0, 2], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 5, 2, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"F\"\") \\l ( ( len(s0) + divInt(len(in2),( ( i1 + int(4.0) ) + divInt(int(8.0),i2) )) ) * ( int(3.0) - i1 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 3, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 18, 7, 4, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(s0),divInt(len(in0),( ( i1 - int(4.0) ) + int(7.0) ))) + divInt(min(( int(2.0) * i2 ), int(8.0)),i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [4, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [2], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 7, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 3, 2, 0, 1, 0, 0, 0, 7, 7, 3, 0, 19, 4, 6, 0, 4, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\le max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = not mod(mod(min(int(6.0), int(8.0)),int(7.0)),int(5.0)) \\le min(saveOrd(getCharFromString(in2, i2)), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2, 2, 2], [0, 0], [3, 5], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5], [2, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 2, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 3, 1, 3, 1, 1, 3, 1, 1, 1, 3, 3, 1, 3, 3, 3], [1, 0, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 3], [2], [1, 1, 0, 1], [4, 5, 3, 1, 2, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [1, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 1, 3, 1, 2, 0, 0, 0, 0, 1, 1, 4, 0, 11, 2, 4, 1, 1, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(in1)), abs(mod(i2,( i1 * i1 )))) \\l i2:{:\\nloopBreak% = 0\\nwhile in2 != in0:{:\\nres0 = s1.endswith(s2.capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 0, 21, 7, 3, 5, 2, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( ( len(in2) + divInt(len(getCharFromString((in0 + (s2[( ( i1 + int(4.0) ) - int(8.0) ):int(3.0)][i2:] + in1))[divInt(int(8.0),i2):], int(7.0))),i1) ) * ( i2 - int(7.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 3, 8, 4, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 3, 3, 2, 0, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5, 2, 2], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 4, 0, 21, 4, 6, 2, 2, 8, 0, 0, 11, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(12.0) \\l max(mod(len(in1),len(in2)), ( max(min(mod(i1,( i0 + int(3.0) )), int(8.0)), int(4.0)) - saveOrd(getCharFromString(in2, i2)) )):{:\\nb1 = in0 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = (s2[i1:int(5.0)][int(5.0):int(6.0)] + s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [0, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 1, 0, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [0, 1, 0, 1], [3, 5, 3, 0, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 6, 4, 2, 4, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = divInt(max(( max(( len(in0) - i0 ), mod(i0,i0)) - i1 ), int(29.0)),i2) \\l divInt(abs(mod(int(7.0),int(9.0))),int(2.0))\\nin2 = in0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [1], [1], [], [1], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [6, 4, 3, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 2, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 1, 1, 2, 2, 1, 1, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif False:{:\\nres0 = in1 not in in2\\ni2 *= int(64.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 0, 3, 1, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 2, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 5, 0, 11, 1, 4, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(i1, len(in1)), int(26.0)) \\l abs(i1):{:\\nres0 = mod(i0,i0) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [2, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4, 5], [1, 1, 1], [0, 0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 2, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 4, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 2, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 7, 0, 19, 3, 7, 1, 2, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i0 * divInt(i2,i2) )))), len(in2)), i1) \\l len(in0):{:\\nloopBreak% = 0\\nwhile i1 \\le int(1.0):{:\\nres0 = int(0.0) != i1\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 2, 2, 0, 0, 3, 2, 2, 0, 0, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 3, 1, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 6, 0, 21, 5, 4, 3, 2, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),( mod(i2,i0) + max(( ( i2 - i1 ) + int(2.0) ), int(8.0)) )), max(i1, i0)):{:\\nres0 = in2 not in getCharFromString(in2[int(9.0):int(5.0)], int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 0, 2], [], [0, 0], [], [], [3, 0], [0, 4, 1], [1, 1, 2, 1], [0, 0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 0, 2, 2, 1, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 1, 4, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 0, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 2, 3, 4, 3, 1, 0, 0, 0, 1, 2, 2, 9, 0, 19, 2, 6, 1, 1, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * i0 )))), i2), i2) \\l max(i1, i2):{:\\nloopBreak% = 0\\nwhile i0 \\le int(1.0):{:\\nres0 = in2 != in0\\nb0 = int(0.0) \\g i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = in1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [0], [0, 2], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [2], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 8, 9, 4, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 0, 5, 3, 5, 5], [], [0], [0, 0, 4, 0, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 7, 1, 3, 0, 1, 4, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in s0:{:\\nres0 = int(11.0) \\l max(mod(len(in2),len(getCharFromString(in0, int(0.0)))), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [2], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 0, 2, 3, 3, 3, 0, 1, 3, 2, 2, 2, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 4, 3, 1, 0, 4, 3, 2, 1], [2, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 0, 0, 0, 3, 3, 2, 0, 8, 1, 3, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l i2:{:\\nres0 = not mod(max(saveOrd(in1), len(in2)),i2) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [0, 1, 0, 1, 1], [1, 1, 3, 2, 4, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 2, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 7, 0, 5, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(int(26.0), len(in1)), abs(saveOrd(in2))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 2, 2, 1, 1, 1], [1, 1, 0, 0, 0], [3, 0, 2, 3, 3, 3, 0, 2, 0, 3, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 1, 0, 1], [4, 5, 3, 3, 4, 5, 1, 0, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 2, 2, 7, 0, 19, 2, 8, 1, 1, 9, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(i0, mod(max(len(in1), abs(i1)),( i2 * max(i2, i1) ))) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(in0):{:\\nb1 = in1.capitalize() != (in2[i1:int(1.0)][int(0.0):i1] + s1)\\ns0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le mod(divInt(len(in2),divInt(len(in0),( ( int(3.0) + int(8.0) ) * int(3.0) ))),int(8.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 6, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 2, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 2, 1, 1, 0, 2], [2], [1, 0, 0, 1], [1, 5, 3, 3, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 8, 8, 5, 0, 29, 5, 11, 1, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(max(( max(len(s1), abs(i0)) * divInt(i1,i1) ), i2),int(1.0)) \\l max(len(in2), abs(max(int(8.0), divInt(i1,int(6.0))))):{:\\nloopBreak% = 0\\nwhile int(7.0) \\le max(int(6.0), mod(int(6.0),min(abs(int(5.0)), int(3.0)))):{:\\nres0 = in0 != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 0, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 0, 3, 1, 0, 4, 3, 2, 1], [0, 2, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 4, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 0, 18, 5, 4, 2, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(mod(min(len(in1), ( i2 + i0 )),mod(( divInt(i0,int(2.0)) * int(8.0) ),int(9.0))), max(i1, i1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 3, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l divInt(divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) * int(7.0) ))),int(2.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 2, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 4, 0, 18, 4, 5, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), max(i2, int(2.0))):{:\\nres0 = ( mod(( i0 + int(8.0) ),int(9.0)) * int(5.0) ) \\le min(i2, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 0, 2, 3, 2, 2, 1, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 1, 0, 1], [3, 5, 1, 4, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 2, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( mod(i0,mod(max(divInt(( int(3.0) + len(in2) ),int(8.0)), int(3.0)),i2)) * mod(int(8.0),i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [2, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 3, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nin2 = getCharFromString(in0, mod(( max(int(4.0), int(8.0)) * int(3.0) ),int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [8, 8, 3, 8, 7, 7, 1], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 2, 3, 2, 2, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 0, 5, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le len(s0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 0, 3, 0, 1, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [1, 0, 0], [0, 5, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 9, 1, 4, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(s0),i1), abs(i0)), int(26.0)) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [8, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 3, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [0, 3, 3, 1, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 20, 5, 5, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(80.0) \\l min(mod(len(in1),len(in2)), ( i2 - i0 )):{:\\nres0 = getCharFromString(in2, divInt(( divInt(max(int(4.0), int(8.0)),int(9.0)) - min(i2, i1) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1], [4, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 0, 22, 9, 3, 5, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(min(divInt(len(in2),( ( i0 + int(4.0) ) + int(6.0) )), divInt(( ( int(9.0) + i2 ) * int(8.0) ),i2)),mod(i0,int(7.0))) - i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 3, 1, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 3, 2, 2, 2, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [3, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 2, 0, 16, 5, 4, 2, 3, 5, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), ( i2 + max(divInt(( divInt(i0,int(0.0)) - int(2.0) ),int(3.0)), int(1.0)) )):{:\\nb1 = in2.rstrip(in0) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 2, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 0, 0, 2, 2, 1, 1, 1, 1, 2, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 1, 1, 0, 1, 1], [1, 3, 3, 2, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [3, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l i2:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 2, 1, 2], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1], [4, 7, 9, 7, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 1, 0, 2, 0, 1, 1, 1, 1, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 0, 0, 2, 4, 5], [1], [], [0, 0, 1, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 4, 0, 21, 3, 9, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), i1), ( len(in2) - int(26.0) )) \\l min(len(in1), max(int(7.0), int(9.0))):{:\\nres0 = int(2.0) \\le int(6.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 1, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 0, 5, 5, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 1, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(s0)), mod(i2,int(0.0))):{:\\nres0 = getCharFromString(in2, mod(( max(int(8.0), int(9.0)) * int(5.0) ),int(5.0))) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 1, 2, 0, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [1, 0, 0], [0, 5, 1, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 4, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( mod(int(4.0),divInt(i1,len(in2))) + ( i2 + int(8.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 1, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [2, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [0, 1, 0, 1, 1], [4, 5, 4, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 1, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(int(2.0)):{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 1, 1, 0], [2, 2], [0, 0], [], [0, 0], [], [], [3], [0, 4], [1, 1, 1], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 2, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 0, 3, 3, 3, 1, 0, 3, 1, 1, 3, 1, 2, 1, 2, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 4, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 15, 2, 7, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(in1)), abs(max(i0, mod(( i1 * i2 ),int(8.0))))) \\l i2:{:\\nres0 = saveOrd(in2) \\le len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [2], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5], [0, 2, 1, 2, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 3, 3, 0, 1, 2, 0, 2, 1, 2, 3, 0, 1], [1, 0, 1, 1, 1, 0, 0], [0, 1, 3, 0, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 3], [0, 0, 1], [1, 0, 0, 1], [4, 3, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 13, 13, 7, 0, 40, 7, 15, 3, 4, 7, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(max(mod(len(in1),min(max(i0, ( i2 + i1 )), i2)), int(1.0)), len(in0)) \\l divInt(len(in0),saveOrd(s1)):{:\\nloopBreak% = 0\\nwhile int(9.0) \\le int(8.0):{:\\nb2 = in1.capitalize() != in2[max(int(7.0), int(6.0)):min(int(6.0), divInt(int(5.0),abs(abs(int(5.0)))))][abs(abs(i0)):int(3.0)][mod(i1,( int(63.0) + ( len(s1) - i1 ) )):int(75.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3, 0], [0, 4], [1, 0, 2], [0, 0], [1], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 1, 3, 1, 1, 3, 1, 1, 2, 1, 0, 2, 3, 3, 1, 1, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 0, 1, 0, 2, 2, 2, 0], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 4, 4, 0, 4, 4, 4, 2, 0, 0, 4, 3, 0, 2, 3, 4, 0, 4], [2, 3, 2, 2, 0, 3, 3, 1], [4, 0, 1], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 2, 1, 3, 1, 1, 1, 0, 0, 0, 8, 8, 7, 0, 31, 4, 12, 1, 3, 9, 0, 0, 20, 8, 3, 2, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile res0:{:\\nb0 = in0 not in s1.rstrip(getCharFromString(in1[len(in2):int(1.0)], min(int(8.0), int(8.0))).capitalize().capitalize()).capitalize()\\ns1 = (in2 + (in1.rstrip() + saveChr(max(int(7.0), int(6.0))))[divInt(int(6.0),i1):divInt(min(abs(int(5.0)), int(3.0)),abs(i0))]).lstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 3, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 0, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 21, 2, 10, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, divInt(i0,i2)))), i1), len(in2)) \\l min(int(2.0), len(in1)):{:\\nb0 = max(min(int(6.0), int(7.0)), int(9.0)) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 9, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 2, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l i2:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 0, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 2, 4, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in1) - abs(i1) ), i1), ( i1 - i0 )) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 0, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 2, 2, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(15.0) \\l i2:{:\\nres0 = in1 not in in2\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 1, 1, 2], [1, 2], [1, 2, 0], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2, 0], [1, 0, 0, 1], [4, 5, 3, 4, 4, 0, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 2, 2, 8, 1, 18, 3, 6, 2, 2, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(max(( max(len(in1), abs(i0)) * divInt(i0,i2) ), i2),i1) \\l max(i1, len(in2)):{:\\nloopBreak% = 0\\nwhile i1 \\le int(1.0):{:\\ni0 += int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin0 = in1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [2, 0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 8, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 0, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 4, 0, 3, 6, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nloopBreak% = 0\\nfor in2 in getCharFromString(in0, mod(i2,max(int(0.0), int(0.0)))):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 0, 0, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 4, 2, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 5, 0, 15, 5, 3, 2, 3, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(20.0) \\l max(mod(len(in1),len(in1)), ( i1 + i0 )):{:\\nres0 = getCharFromString(s2, mod(( divInt(i2,i1) - i1 ),int(2.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 0, 2, 3, 3, 3, 2, 2, 2, 0, 1, 1, 1, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [3, 1, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 0, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 7, 1, 3, 0, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(11.0):]) \\le min(i1, divInt(len(in2),i2))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 4, 3, 2, 1, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 1, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(saveOrd(in1), mod(len(s1),abs(max(i1, ( i0 - i2 ))))) \\l i2:{:\\nres0 = int(26.0) != len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 1, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 4, 1, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nb0 = getCharFromString(in2, max(mod(int(2.0),i2), int(8.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [2, 0, 2, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 3, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 0, 4, 1, 0], [1, 2, 0], [1, 1, 0, 1], [4, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 3, 3, 5, 0, 15, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(int(22.0), ( max(len(in1), abs(i2)) - ( i0 * i2 ) )) \\l i2:{:\\nres0 = int(7.0) \\ge min(len(in2), i0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 1, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le int(16.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 322}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 0, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 2, 1, 1, 0], [1], [1, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 0, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [3, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [0, 0, 0, 1], [0, 5, 3, 4, 4, 5, 1, 0, 4, 0], [1], [], [0, 0, 4, 0, 4, 0, 3, 2, 2, 0, 0, 0, 2, 1], [2, 3, 2], [4], [0, 0, 1], [3], [], [], [], [21]], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 8, 0, 18, 2, 6, 1, 1, 8, 1, 0, 14, 2, 1, 3, 1, 0, 0, 0, 1], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(1.0) \\l len(s0):{:\\nloopBreak% = 0\\nwhile divInt(max(len(in2), abs(i0)),( i0 * i2 )) \\le i2:{:\\nres0 = in0.capitalize() != in1.rstrip((in1[i2:max(i1, len(in2))][i1:i0] + s1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = \"\"<\"\"[:int(0.0)]\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [5], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 1, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 1, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 4, 0, 14, 2, 6, 0, 2, 5, 0, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i1,i2)))), i1), int(26.0)) \\l len(in2):{:\\nres0 = in1.endswith((in2 + in1)[int(7.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2, 2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [2], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 1, 2, 2, 1, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 0, 0, 0, 7, 7, 1, 0, 14, 4, 3, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,int(4.0))):{:\\nres0 = not mod(( int(8.0) * int(9.0) ),int(5.0)) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 7, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 1, 3, 1, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 4, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 7, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(int(27.0), len(in1)), int(7.0)) \\l abs(i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 1, 3, 1, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [4, 1, 2, 2, 0, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 0, 4, 3], [], [], [0, 2, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 11, 2, 4, 0, 2, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\l max(mod(abs(int(2.0)),abs(int(9.0))), mod(i1,i0))\\nin2 = in0[i0:]\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [8, 8, 3, 8, 7, 7, 1], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [4, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 2, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\l divInt(divInt(min(divInt(len(in2),( ( i2 + int(8.0) ) + int(8.0) )), int(3.0)),i2),mod(int(8.0),i2))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [0, 2, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0], [1, 1], [0, 1, 0, 1], [4, 5, 3, 0, 4, 3], [1], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(int(2.0), divInt(max(len(in1), abs(i0)),( i2 - i0 ))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 6, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 3, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 4, 1, 20, 2, 10, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(len(in2),i0)))), i2), int(26.0)) \\l min(int(7.0), len(in1)):{:\\ni1 -= max(min(int(6.0), int(2.0)), int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 0, 3, 1, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 4, 3, 2, 2, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 2, 4, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(saveOrd(in1), mod(len(in2),i1)) \\l abs(int(26.0)):{:\\nres0 = mod(i0,i2) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 321}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 3, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 3, 0, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 3, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 3, 0, 0, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\l max(i0, len(in1)):{:\\nb0 = in2 not in getCharFromString(in2, len(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [2], [0, 3], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 9, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [2, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 3, 0], [1, 0, 1, 1, 1, 0], [4, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 4], [2, 1], [0, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 1, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 8, 8, 6, 0, 33, 6, 13, 2, 4, 9, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile divInt(saveOrd(in1),( divInt(max(len(in2), i0),divInt(i1,i1)) * i2 )) \\l int(5.0):{:\\nloopBreak% = 0\\nwhile abs(max(len(in0), len(s1))) \\ge int(8.0):{:\\nb2 = in1.capitalize() != in2[int(9.0):saveOrd(s1)][:mod(int(7.0),max(int(6.0), ( int(6.0) - min(abs(int(5.0)), int(3.0)) )))][abs(i1):abs(i1)]\\ns1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [4], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 4, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 3, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 1, 1, 0, 1, 1], [2, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 4, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [1, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 1, 0, 16, 4, 6, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(( len(in1) * len(in2) )):{:\\nres0 = saveChr(mod(max(i2, mod(( min(int(0.0), int(8.0)) - int(9.0) ),int(4.0))),saveOrd(in2))).startswith(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [4, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [1, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 6, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(saveChr(len(in1))),( i2 + i0 )), mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0))):{:\\nres0 = in2.rstrip(in2) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 0, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 0, 0, 2, 2, 3, 1, 3, 1, 0, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 1, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 17, 3, 7, 0, 3, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(in1),max(int(0.0), i2)), i0):{:\\nb1 = in2 not in getCharFromString(in2, mod(mod(max(int(8.0), min(int(0.0), i2)),saveOrd(in0)),len(in2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 0], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 3, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [0, 1, 0, 1, 1], [1, 4, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [0, 0, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 2, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 4, 0, 12, 2, 5, 1, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb0 = max(saveOrd(in1), ( len(in2[abs(max(i1, divInt(i0,i2))):]) - i1 )) \\l int(26.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 1, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 8, 2, 2, 0, 2, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(12.0) \\l max(mod(int(4.0),len(in2)), mod(i2,i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [0], [0, 4], [2, 1], [0, 0], [0], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 2, 2, 3, 3, 3, 0, 2, 0, 0, 2, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3, 5, 4], [], [], [4, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0, 0, 4, 3, 0, 4, 0], [0, 3, 2, 3], [4, 0], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 6, 0, 22, 5, 7, 3, 2, 8, 0, 0, 17, 4, 2, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = getCharFromString(in1, max(( ( max(len(in2), abs(i1)) - ( i1 - i2 ) ) * mod(int(22.0),min(abs(i2), mod(int(7.0),i2))) ), int(9.0))) in (s0 + (in2 + in1.rstrip(in0)[int(7.0):i1]))[len((in2 + in1.lstrip()).capitalize()):]\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [2, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 0, 0, 1, 1], [3, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [1, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 2, 2, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in0),len(in2)), max(i2, int(2.0))):{:\\nb2 = saveChr(( divInt(( i0 + int(8.0) ),int(9.0)) + int(5.0) )) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [0, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 9, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 0, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2) \\le i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [4, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in1) \\l max(mod(len(in2),abs(max(i1, mod(i0,i2)))), i1):{:\\nres0 = int(26.0) \\le len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 312}, {"genotype": [[0], [1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 3, 4, 3], [], [], [0, 2, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 18, 2, 7, 0, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i0,i0)))), i0), int(26.0)) \\l len(in2[i0:]):{:\\nres0 = int(7.0) \\le min(int(9.0), int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 2], [0, 0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 5, 9, 7, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 1, 1, 0], [1, 1], [0, 1, 0], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 4, 0, 14, 2, 6, 0, 2, 5, 0, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(divInt(len(in1),abs(max(i1, mod(i0,i2)))), i1), int(29.0)) \\l len(in2):{:\\nb0 = in1 not in (in2 + in1)[int(5.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2, 1, 0], [1, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 1, 2, 0, 0, 0, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 0, 5], [], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 6, 6, 3, 3, 1, 1, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 1, 3, 3, 9, 3, 14, 3, 2, 2, 2, 5, 0, 1, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(7.0) \\l max(mod(len(in1),int(0.0)), ( i2 - i0 )):{:\\ni2 = i1\\ni2 -= mod(i0,i1)\\nif in2 not in getCharFromString(in2, int(7.0)):{:\\nloopBreak% = 0\\nfor in0 in s0:{:\\ni0 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [0, 7, 9, 8, 7, 7, 1, 3, 4, 2], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 1, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 2, 0, 1, 0, 2, 0, 1, 2, 3, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1, 0], [4, 5, 4, 3, 5, 5], [1], [], [2, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 5, 0, 26, 10, 3, 5, 5, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1[( divInt(int(0.0),divInt(len(in2),( ( i1 + int(7.0) ) + int(9.0) ))) + divInt(int(8.0),( ( i0 * int(7.0) ) - i2 )) ):mod(i1,int(7.0))]) \\le divInt(len(in1[int(13.0):int(42.0)]),i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 2, 9, 1, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 8, 2, 4, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(divInt(divInt(len(in2),( mod(i0,int(4.0)) + int(2.0) )),( int(9.0) + ( int(1.0) + i2 ) )),int(7.0)) * i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [3, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [2, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 0, 2, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l len(in1[mod(len(in2),len(in2)):mod(i2,i0)]):{:\\nres0 = in0 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 4, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 1, 1], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 0, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 0, 0, 5, 4, 3], [], [], [0, 4, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 15, 2, 7, 2, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in1) - abs(min(i1, ( i0 - i1 ))) ), i0), int(22.0)) \\l abs(len(getCharFromString(s0, i2)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 1, 1, 3, 3, 1, 1, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 2, 3, 0, 1, 0, 2, 2, 2, 0], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 4, 2, 0, 0, 0], [2, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 5, 5, 5, 0, 23, 2, 11, 1, 1, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), i2), i1) \\l abs(len(in2)):{:\\nloopBreak% = 0\\nwhile min(max(int(1.0), int(8.0)), min(int(8.0), int(7.0))) \\le abs(int(6.0)):{:\\nres0 = in0 != s1\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 1, 0, 1, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 1, 6, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(int(2.0), i1))), int(6.0)), i0) \\l i2:{:\\nres0 = int(7.0) \\le len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3, 2], [0, 4], [0, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1, 0], [1], [3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 2, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 0], [1, 0, 1, 1, 1], [1, 0, 3, 2, 1, 3, 3, 0, 1, 0, 2, 2, 2, 0], [2], [1, 1, 0, 1], [4, 5, 3, 2, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 4, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 2, 1, 3, 1, 1, 1, 0, 0, 0, 0, 0, 4, 0, 11, 1, 6, 0, 1, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nloopBreak% = 0\\nwhile max(min(len(in1), abs(max(len(in2), i0))), mod(i1,i1)) \\l i2:{:\\nb2 = in0 != s2\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [1, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 1, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 0, 3, 4, 0, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 4, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 11, 2, 5, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= max(min(mod(len(in1),saveOrd(in2)), min(i0, mod(i0,i0))), i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 6, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 2, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [3, 1, 3, 2, 1, 4, 3, 1, 1, 0, 2], [1, 2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 1, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 7, 1, 14, 2, 6, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l max(mod(len(in2),abs(max(i0, ( i1 - i1 )))), i2):{:\\nloopBreak% = 0\\nwhile i1 \\le saveOrd(in0):{:\\ni2 *= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [5, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [3, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 1, 0, 8, 1, 4, 0, 1, 5, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(50.0) \\l max(mod(len(in1),len(in2)), max(i2, int(2.0))):{:\\nres0 = in2.rstrip(in0) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 0, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 1, 0, 2, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 3, 3, 0, 1, 3, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 0, 4], [], [], [0, 0, 0, 0, 4, 4, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 5, 0, 17, 3, 8, 1, 2, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i2, ( i1 * i0 )))), i2), divInt(len(in2),len(in0))) \\l saveOrd(in0):{:\\nres0 = i0 \\ge int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 2, 2, 1, 1, 1], [1], [3, 2, 2, 3, 3, 3, 0, 2, 1, 3, 0, 0, 3, 3, 3, 0, 2, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 1, 0, 1], [4, 4, 3, 3, 4, 5, 1, 0, 4, 1], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 23, 4, 9, 1, 3, 10, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(mod(( max(len(in1), abs(i0)) * mod(int(1.0),max(i1, i2)) ),len(in1)), len(in0)) \\l saveOrd(in0):{:\\nloopBreak% = 0\\nwhile i2 \\le divInt(int(0.0),i1):{:\\nin1 = in2.capitalize()\\ns1 = (s0[int(8.0):int(7.0)][len(in1):int(6.0)] + s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 1], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 2, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 0, 0, 6, 0, 14, 2, 6, 1, 1, 8, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(abs(i0))), ( i0 * i2 )), i2) \\l i1:{:\\nloopBreak% = 0\\nwhile len(in2) \\le i1:{:\\nres0 = in0 != in1\\nin1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns1 = s0\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 0, 3, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 0, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 1, 0, 13, 4, 2, 1, 3, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\le max(mod(i2,len(in1)), mod(int(0.0),int(0.0))):{:\\nres0 = s0 not in getCharFromString(in2, mod(( int(1.0) * int(9.0) ),int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 0, 3, 1, 0, 2, 0, 0, 0, 1, 3, 0, 3, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 1, 1, 1, 0], [1, 1], [0, 0, 0], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 5, 0, 12, 2, 3, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(divInt(i1,len(in1)), int(2.0)), i0) \\l divInt(i2,i1):{:\\nres0 = i2 \\le int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 1, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1], [0, 3, 2, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 14, 3, 4, 2, 1, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l min(mod(len(in1),abs(max(i2, int(2.0)))), ( int(8.0) + ( i0 + int(9.0) ) )):{:\\nres0 = in2 not in getCharFromString(in2, int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 1, 0, 1, 0, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 0, 15, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, ( int(26.0) - int(7.0) )))), i2), int(9.0)) \\l i2:{:\\nres0 = i2 \\le len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 1, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 4, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 0, 1, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 3, 3, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( mod(min(divInt(max(( ( i0 + int(3.0) ) * int(8.0) ), int(3.0)),i2), divInt(int(8.0),i2)),int(7.0)) + i1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 2], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [3, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 4, 0, 11, 2, 5, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb2 = len(in1) \\l max(mod(len(in2),abs(max(i1, mod(i0,i2)))), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 0, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 6, 0, 15, 2, 5, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 \\l max(mod(max(len(in1), abs(i0)),mod(i2,i1)), i1):{:\\nres0 = int(26.0) \\le max(int(7.0), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [2, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [3], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [1, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 8, 1, 4, 0, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), max(i2, int(2.0))):{:\\nin2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 2, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 4, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 0, 19, 5, 6, 2, 3, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in1)), ( i2 * i0 )):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), mod(int(8.0),int(9.0))) - min(saveOrd(in0), i2) ),int(5.0))) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [0, 1, 0, 1], [4, 5, 3, 0, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(max(divInt(len(in1),abs(min(i1, ( i2 - i0 )))), i1), int(29.0)) \\l len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [4, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 3, 0, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [2, 5, 5, 3, 5, 5, 1], [], [], [0, 0, 4, 0, 2, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 0, 22, 4, 7, 1, 3, 7, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(40.0) \\l max(mod(len(s2),len(in2)), mod(i2,i0)):{:\\nb0 = getCharFromString(in2, mod(( max(min(i2, int(4.0)), int(8.0)) * saveOrd(in0[len((in2[:i1][int(9.0):int(5.0)] + in2)):int(5.0)]) ),i2)) not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 4, 6, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 1, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 0, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [5], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [4, 8, 8, 4, 6, 6, 5, 3, 3, 1, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 3, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 0, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 0, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 3, 0, 13, 2, 6, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(4.0), len(in1)), abs(len(in2))) \\l i0:{:\\nres0 = mod(( i1 * i1 ),int(8.0)) \\le len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1], [4, 6, 9, 3, 7, 7, 1, 8], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 2, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1, 3, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1], [4, 3, 1, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0, 1], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 0, 0], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 4, 0, 24, 9, 4, 5, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(max(( ( divInt(int(4.0),int(6.0)) + ( int(9.0) + ( int(3.0) + i0 ) ) ) + int(7.0) ), i2),mod(i2,int(7.0)))) - min(int(18.0), i0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 0, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 2, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 2, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [0, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 5, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 21, 4, 7, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(max(mod(len(in1),abs(mod(i1,( i0 - i2 )))), i1), int(26.0)) \\l max(int(7.0), len(in2)):{:\\nres0 = min(divInt(int(9.0),int(0.0)), int(6.0)) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 18, 5, 4, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = mod(( ( i2 - int(2.0) ) + int(8.0) ),int(9.0)) \\le max(i1, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 4, 2, 2, 2, 0, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 11, 11, 3, 0, 29, 3, 13, 1, 2, 9, 0, 0, 13, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(in1)), abs(max(i2, mod(( i1 * i1 ),int(9.0))))) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(s1):{:\\nres0 = in1[max(int(8.0), int(7.0)):min(int(6.0), int(6.0))][abs(int(5.0)):divInt(int(3.0),abs(abs(int(3.0))))][int(63.0):].rstrip(in2).capitalize() != s1\\nin2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [0], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [3, 9, 8, 5, 2, 6, 7, 5, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 0, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 0, 1, 2, 1, 3, 3, 1, 3, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 4, 1, 2, 2, 2, 3], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 4, 0, 4, 0, 2, 2, 2, 0, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 5, 5, 5, 0, 21, 1, 10, 0, 1, 8, 0, 0, 13, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(i0, len(in1)), abs(max(i1, mod(i1,i2)))) \\l i1:{:\\nloopBreak% = 0\\nwhile int(3.0) \\le len(in2):{:\\nres0 = in0.capitalize() in s1.rstrip(in1[len(in2):saveOrd(s1)][max(int(9.0), int(8.0)):saveOrd(in2)][int(5.0):int(2.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 8, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 1, 3, 2, 0, 0, 2, 2, 3, 0, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 0, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 0, 15, 4, 3, 2, 2, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(18.0) \\l max(mod(int(0.0),len(in1)), mod(i2,i0)):{:\\nres0 = in2 not in getCharFromString(in2, ( ( len(in0[i2:int(8.0)]) * int(9.0) ) - int(5.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 4, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 2, 5, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(saveOrd(in1), ( len(in2) - abs(min(i1, ( i1 - i1 ))) )) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [2, 1, 2, 2, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 2, 0, 1, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 0, 4, 1, 0], [1, 0, 2], [1, 1, 0, 1], [4, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 5, 0, 18, 2, 8, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(len(in1), abs(min(abs(i2), ( i1 - int(22.0) )))), i2) \\l int(7.0):{:\\nres0 = min(saveOrd(in2), i2) \\le ( int(9.0) + i1 )\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 0], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 0, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [1, 0, 0], [4, 5, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [1, 0, 1, 2, 2, 1, 0, 1, 1], [2], [2, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 0, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 0], [2, 0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3], [0, 4], [2, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 2, 1, 0], [1], [3, 3, 2, 3, 1, 3, 0, 2, 0, 0, 2, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 1, 1, 3, 2, 3, 3, 1, 1, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 4, 2, 1, 3, 4, 4, 1, 0, 2, 2, 2, 2], [2, 0], [1, 0, 0, 1], [2, 5, 3, 1, 4, 5, 1, 5, 4], [], [0], [0, 0, 3, 0, 4, 0, 2, 2, 2, 0, 0, 0], [1, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 11, 11, 4, 0, 31, 4, 13, 1, 3, 8, 0, 1, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s2 != in2:{:\\nloopBreak% = 0\\nfor in0 in (s1 + saveChr(max(max(mod(saveOrd(in1),int(1.0)), abs(i0)), ( i1 * i1 )))):{:\\nres0 = divInt(int(8.0),max(len(in2[saveOrd(s1):saveOrd(in2)][int(8.0):int(7.0)][max(int(6.0), int(6.0)):int(5.0)]), int(3.0))) \\l min(divInt(abs(abs(int(3.0))),int(63.0)), abs(i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 1, 3, 2, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 0, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 2, 4, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(int(26.0), len(in1)), mod(abs(i1),mod(i0,i2))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 4, 2, 3, 1, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 0, 2, 2, 0, 2, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [0, 1, 0, 1, 1], [0, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 1, 0, 7, 1, 3, 0, 1, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(14.0) \\l max(divInt(len(s0),len(in2)), int(2.0)):{:\\nres0 = getCharFromString(in2, i2) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3, 2], [0, 4], [0, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 0, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 3, 1, 3, 1, 2, 1, 3, 3, 1, 3, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 0, 3, 4, 1, 0, 2, 2, 2, 2, 3], [2], [1, 0, 0, 1], [4, 3, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 0, 3, 3, 2, 0, 0, 1, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 4, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 0, 15, 3, 3, 1, 2, 6, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(i2, len(in1)):{:\\nres0 = getCharFromString(in2.rstrip(in2), len(in0)) not in (in2[mod(i0,i2):int(2.0)][( mod(i1,int(8.0)) + int(9.0) ):int(5.0)] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 0, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 2, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [0, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 0, 12, 2, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(( len(in1) - i1 ), int(26.0)), i0) \\l mod(int(7.0),i2):{:\\nres0 = i1 \\le int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2, 2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 0, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 2, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 4, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 0, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 1, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 0, 0, 8, 0, 14, 2, 4, 1, 1, 7, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(i0, mod(max(len(in1), max(i0, ( i2 * i2 ))),i1)) \\l i1:{:\\nloopBreak% = 0\\nwhile i1 \\le i0:{:\\nb0 = in2 != in0\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = s1.capitalize()\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 9, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [1, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(19.0) \\l max(mod(len(s1),len(in2)), divInt(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(4.0), int(8.0)) * int(9.0) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [5, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 4, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 4, 0, 22, 4, 6, 1, 3, 6, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) != max(mod(len(in1),saveOrd(in2)), mod(i2,i0)):{:\\nb0 = getCharFromString(in2[mod(( max(int(6.0), int(8.0)) * int(9.0) ),int(5.0)):min(saveOrd(in0), i2)], int(5.0)) not in (in2[:int(6.0)][int(2174.0):i1] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 1, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 1, 0, 2, 3, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 1, 2, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 0, 19, 2, 9, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),max(int(26.0), i1)), mod(abs(i0),i2)), int(7.0)) \\l len(in2):{:\\nb1 = int(9.0) \\le min(len(in1), max(int(1.0), int(6.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 0, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 2, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 0, 19, 2, 9, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), int(26.0)), int(7.0)) \\l len(s2):{:\\nres0 = int(9.0) \\le min(len(in1), max(int(2.0), int(6.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 3, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 1, 0, 2, 3, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 0, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 3, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 14, 2, 8, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = max(min(( len(in1) - abs(min(i1, int(23.0))) ), i1), ( abs(int(7.0)) - len(in0) )) \\l saveOrd(s0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 3, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) == ( divInt(len(in2),divInt(len(s2),( ( i1 + int(4.0) ) + int(7.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 326}, {"genotype": [[0], [1, 1], [2, 1], [0], [0, 2], [0], [0, 0], [], [], [2], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 1, 1, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [0, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [0], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nb2 = max(max(( len(in1) - abs(max(i1, mod(i0,i2))) ), i1), int(26.0)) \\l len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 5, 0, 22, 7, 3, 4, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(len(in2[divInt(len((in0 + (s2[( ( i0 + int(3.0) ) * int(8.0) ):][:int(3.0)] + in1))[i2:divInt(int(8.0),i2)]),int(7.0)):i1]),( i2 + int(7.0) )) * int(1.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 9, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 1, 3, 3, 3, 0, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 3], [1, 0, 1, 1, 1], [1, 1, 4, 2, 1, 4, 3, 4, 1, 0, 2, 2, 2, 2, 4], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 0, 1, 5, 1], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 6, 1, 14, 1, 7, 1, 1, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(saveOrd(in1),abs(max(i0, i1))), i1), i2) \\l i1:{:\\nloopBreak% = 0\\nwhile int(5.0) \\le saveOrd(in2):{:\\ni1 *= len(in0)\\ns1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 8, 8, 7, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 1, 2, 3, 3, 2, 0, 0, 1, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 3, 1, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l int(8.0):{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 3, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in0),divInt(len(in0),( min(i1, int(4.0)) + int(7.0) ))) + ( int(9.0) + divInt(int(8.0),i0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [1, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 2, 2, 0, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 2, 3, 3, 4, 3, 1, 0, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),abs(max(i0, ( i1 * i2 )))), i2), i0) \\l len(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 1, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 1, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 4, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 0, 19, 4, 4, 2, 2, 6, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2.rstrip(in0), int(2.0)) not in (in2[mod(( i1 - int(8.0) ),int(9.0)):int(5.0)][max(i1, i1):int(5.0)] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [1], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [0, 0], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(in0[int(16.0):])\\ni2 = len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 2, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 3, 0, 21, 3, 9, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), ( int(26.0) - len(in2) )), int(7.0)) \\l min(len(in1), max(int(9.0), int(2.0))):{:\\nres0 = int(6.0) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [2], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [0, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l min(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0))) == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [2, 2, 2], [], [0, 0], [], [], [3], [1, 4], [0, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [7, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 0, 1, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 0, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 5, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 1, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 1, 1, 1, 5, 0, 15, 2, 7, 1, 1, 8, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif res0:{:\\nloopBreak% = 0\\nwhile max(max(mod(min(abs(max(i0, ( i0 * i2 ))), i2),int(7.0)), len(in1)), i0) \\g len(in2):{:\\nin2 = in1\\nin1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns1 = s0.capitalize()\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 2], [1, 1, 2], [0, 0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 9, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 3, 1, 1], [0, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 0, 3, 2, 4], [2, 2], [1, 0, 1, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 11, 11, 4, 0, 34, 5, 15, 2, 3, 8, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(( len(in1) * abs(max(i0, ( mod(i1,i1) * int(5.0) ))) ), len(in2)), len(in0)) \\l saveOrd(s1):{:\\nloopBreak% = 0\\nwhile max(int(8.0), int(9.0)) == min(divInt(int(7.0),abs(int(6.0))), mod(int(6.0),min(len(in1.capitalize()), int(5.0)))):{:\\nres0 = in2[int(3.0):abs(i1)][:saveOrd(s1)][int(3.0):int(63.0)] != in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 0, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0, 0], [3], [0], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 9, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 2, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 4, 2, 2, 2, 4], [0, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 2, 0], [2, 3, 2], [4], [0, 1, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 8, 8, 7, 0, 34, 5, 14, 1, 4, 9, 0, 0, 13, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(( i0 + divInt(i1,i1) ))), i2), int(5.0)) \\l max(len(in2), len(in0)):{:\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le int(8.0):{:\\nres0 = in1.capitalize() != in2[int(9.0):max(divInt(int(7.0),min(int(6.0), mod(int(6.0),saveOrd(s1)))), abs(int(5.0)))][:int(3.0)][abs(i1):abs(i1)]\\nin2 = in1[:i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 3, 2, 3, 3, 3, 0, 2, 3, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 0, 2, 0, 3, 3, 4, 1, 0], [1, 1], [0, 1, 0, 1], [4, 0, 3, 0, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 0], [0, 4], [1, 0], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 3, 6, 5, 3, 3, 6, 3], [1, 2, 1, 0, 2], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 2, 4, 5, 4, 3], [], [], [0, 4, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 4, 0, 14, 2, 6, 0, 2, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i2,i1)))), i0), int(26.0)) \\l len(getCharFromString(s2, int(7.0))):{:\\nres0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 0], [0, 4], [0, 1], [0, 0], [], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 3, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 0, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 3, 2, 1, 0, 4, 3, 2, 1], [1, 1], [1, 1, 0, 1], [4, 5, 3, 3, 4, 3], [], [], [0, 2, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 5, 0, 11, 1, 5, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb0 = max(len(in1), i1) \\l abs(max(min(i0, mod(i0,i0)), i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 1], [2, 3, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( mod(len(in0),divInt(len(in0),( ( i1 + int(4.0) ) + int(7.0) ))) + mod(int(9.0),( int(8.0) * i0 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [1, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 + i0 )):{:\\nb1 = getCharFromString(in2, mod(( divInt(i0,int(2.0)) - int(8.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 0, 0, 3, 2, 0, 0, 3, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 0], [], [], [0, 0, 4, 0, 4, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 2, 2, 5, 0, 12, 3, 3, 0, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\l i2:{:\\nres0 = mod(max(len(in1), mod(i0,i2)),len(in2)) \\le mod(i1,i2)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 1, 3, 0, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 0, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 2, 8, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), i1), int(26.0)) \\l min(int(7.0), min(int(9.0), len(in2))):{:\\nres0 = i1 \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [1, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [2, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [2, 3, 2, 0, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [3, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 7, 1, 18, 6, 3, 2, 4, 3, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = mod(max(( i2 + len((in1 + getCharFromString(in2, mod(i0,i2)))) ), ( divInt(mod(i1,int(10.0)),int(6.0)) - int(8.0) )),len(in2)) \\l i1\\ni0 = i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 9, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 0, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5], [2, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 3, 3, 0], [1, 0, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 3], [2, 0], [1, 0, 0, 1], [4, 0, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 4, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 0, 17, 3, 6, 2, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),( abs(i2) * ( i1 + i1 ) )), i2), int(1.0)) \\l max(int(9.0), int(8.0)):{:\\nloopBreak% = 0\\nwhile len(s0) \\le int(7.0):{:\\nin0 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 0, 1], [2, 2, 2, 1, 1, 1], [0, 2, 2], [0, 2, 0], [0], [0, 0], [], [], [3, 1, 2], [0, 4], [1, 1, 2, 0], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 1, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1, 0], [1], [3, 3, 2, 3, 1, 3, 0, 1, 0, 0, 0, 0, 3, 3, 2, 3, 1, 1, 3, 1, 0, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 2, 0, 1, 0, 2, 2, 2, 0], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [0], [0, 0, 0, 0, 4, 0, 2, 4, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 6, 6, 3, 3, 1, 0, 0, 0, 3, 2, 4, 2, 1, 1, 0, 0, 0, 2, 2, 4, 0, 11, 1, 4, 0, 1, 7, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nloopBreak% = 0\\nwhile max(max(mod(len(in0),int(1.0)), abs(i0)), int(8.0)) \\l i1:{:\\nloopBreak% = 0\\nwhile i1 \\le i2:{:\\nres0 = s1 != in1\\nin2 = s1.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 1, 3, 2, 0, 2, 1, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 1, 0, 13, 4, 3, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(int(08.0),len(in1)), mod(i0,mod(int(9.0),( len(in2) * int(5.0) )))):{:\\nres0 = getCharFromString(in2, int(5.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 9, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 3, 2, 1, 3, 1, 1, 0, 3, 0], [1, 1, 1, 1, 1], [1, 0, 3, 2, 1, 3, 4, 4, 3, 0, 2, 2, 2, 2, 3], [0], [1, 0, 0, 1], [4, 5, 3, 1, 0, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 4, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 5, 5, 4, 0, 21, 2, 10, 0, 2, 8, 0, 0, 12, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(min(mod(len(in1),abs(max(i0, divInt(i1,i1)))), i2), int(1.0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile saveOrd(in0) \\le saveOrd(s1):{:\\nres0 = s0.capitalize() != in2[len(s1):int(9.0)][int(8.0):min(int(7.0), int(6.0))].rstrip(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [2, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 6, 5, 6, 2, 1, 7, 5, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 2, 2, 2, 2, 1, 2, 3, 1, 3, 0, 0, 2, 1, 1, 0, 1, 2, 0, 2, 1, 2, 0, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 2, 2, 0, 0, 2, 0], [1, 1, 1, 0, 1, 0], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 7, 0, 30, 11, 5, 5, 6, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * ( mod(( mod(int(9.0),( min(int(8.0), min(i1, i2)) * ( int(9.0) * int(6.0) ) )) + i1 ),int(5.0)) + divInt(i2,mod(int(6.0),divInt(i1,i1))) ) )):{:\\nb2 = in2 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 3, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 4, 0, 2, 2, 2, 2, 3], [2], [1, 0, 0, 1], [4, 4, 3, 1, 5, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 8, 8, 4, 0, 28, 3, 13, 1, 2, 7, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), i2), int(1.0)) \\l len(in1):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(s1):{:\\nres0 = in2.capitalize() != in2[saveOrd(s1):int(9.0)][int(8.0):min(int(7.0), int(6.0))][abs(int(6.0)):divInt(int(5.0),abs(abs(int(5.0))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 2], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [1, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 0, 2, 2, 2], [2], [1, 0, 0, 1], [4, 1, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 11, 11, 4, 0, 31, 3, 14, 1, 2, 6, 0, 0, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(in1)), abs(max(i1, mod(( i1 * i1 ),int(8.0))))) \\l len(s1):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(s1):{:\\nres0 = in1.capitalize() != in2[max(int(8.0), int(7.0)):min(int(6.0), int(6.0))][min(int(5.0), divInt(int(3.0),abs(abs(int(3.0))))):int(63.0)][abs(i2):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [5, 4], [3], [0], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 3, 2, 8, 2, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 2, 2, 3, 2, 0, 1, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 3, 5, 5, 4], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 4, 1, 2, 1, 1, 0, 0, 14, 14, 4, 0, 23, 6, 4, 2, 4, 7, 0, 0, 11, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( in1.endswith(in2) and int(13.0) \\l max(mod(len(getCharFromString(in2, len(in0))),( i2 + divInt(( max(mod(i0,int(2.0)), int(8.0)) - int(2.0) ),int(5.0)) )), mod(i2,int(5.0))) ):{:\\nres0 = in2.startswith((in2[int(6.0):int(2174.0)][i2:int(20.0)] + in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [4], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 2, 0, 2, 0, 0, 0, 0, 3, 0, 3, 3, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [2, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 4, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 3, 3, 7, 0, 20, 3, 7, 1, 2, 9, 0, 0, 13, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(mod(len(in1),abs(( i0 * divInt(i0,i2) ))), i2)) \\l i1:{:\\nloopBreak% = 0\\nwhile max(i1, len(in2)) \\le len(in0):{:\\nres0 = in1.startswith(in1.capitalize())\\nin2 = (s1[int(1.0):int(0.0)][i1:int(8.0)] + s0.rstrip(in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 4, 4, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le mod(divInt(len(in0),divInt(len(in0),( i0 + i2 ))),min(int(3.0), int(8.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [0, 2], [0], [0, 0], [], [], [2], [3, 4], [1, 2], [0, 0], [4], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [2, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 0, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [4, 1, 3, 2, 1, 3, 0, 4, 1, 0], [1, 1], [1, 0, 0, 1], [4, 5, 4, 5, 4, 3], [], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 1, 4, 0, 1, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nb2 = saveOrd(in1) \\ge max(mod(len(in2),i2), abs(i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 1, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 3, 3, 2, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 1, 3, 5, 5], [1], [], [2, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 14, 3, 4, 1, 2, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1[len(getCharFromString(in2, abs(i2))):int(2.0)]),( mod(int(8.0),i0) + int(9.0) )), int(5.0)):{:\\nres0 = s1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0, 1], [2, 5, 1, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 14, 6, 3, 2, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le mod(divInt(len(in2),divInt(len(s1),( ( i1 + int(4.0) ) + int(7.0) ))),mod(int(9.0),int(8.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 3, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [1, 1], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i2)):{:\\nres0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 1, 4, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 14, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(s1),mod(len(in1),( ( i1 - int(4.0) ) + int(7.0) ))) + divInt(int(9.0),int(8.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 3, 3, 3, 3, 0, 2, 1, 0, 0, 0, 2, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 4, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 4, 4, 7, 0, 20, 2, 7, 1, 1, 10, 0, 0, 13, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(len(in1), abs(max(len(in2), i0))), mod(int(1.0),i0)) \\l i2:{:\\nloopBreak% = 0\\nwhile i2 \\le ( i1 * saveOrd(in0) ):{:\\nres0 = in1 != in1.capitalize()\\nin2 = (s1[:i1][int(0.0):int(8.0)][i1:int(7.0)] + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = s0\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 0], [0, 4], [1, 0], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 2, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 4, 0, 15, 3, 6, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(mod(mod(max(len(in1), abs(i1)),( i0 - i2 )),i1), int(26.0)) \\l max(int(7.0), len(in2)):{:\\nres0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nb0 = getCharFromString(in2, mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 0, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 6, 0, 15, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(( len(in1) - i1 ), abs(i2)), ( i2 - i2 )) \\l i2:{:\\nres0 = int(26.0) \\le max(i1, len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 7, 0, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 3, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 3, 0, 21, 4, 7, 1, 3, 7, 0, 0, 11, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(min(int(0.0), int(7.0)), int(0.0)) * saveOrd(in0) ),len(in2))) not in (in2[i2:int(5.0)][int(5.0):int(6.0)] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [2, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [9, 0, 0, 3, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 0, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 4, 0, 3, 4, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(90.0) \\l max(mod(len(in1),len(in2)), mod(i2,i2)):{:\\nin2 = getCharFromString(in0, mod(i2,max(int(0.0), int(3.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [2, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 1, 2, 2, 3, 2, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 2, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 7, 7, 2, 0, 19, 5, 6, 1, 4, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) == max(mod(len(in1),len(in2)), mod(i2,int(0.0))):{:\\nres0 = getCharFromString(s2, mod(( max(mod(int(8.0),int(9.0)), int(5.0)) * min(saveOrd(in0), i0) ),int(5.0))) not in in2\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 0, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 2, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [2, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 4, 0, 20, 4, 5, 1, 3, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(abs(i2),mod(i0,i2)), mod(( len(in1[int(4.0):int(8.0)]) * int(9.0) ),int(5.0))):{:\\nres0 = getCharFromString(in2, max(min(i1, int(5.0)), int(6.0))) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [2], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 3, 2, 3, 3, 3, 0, 2, 0, 2, 0, 1, 3, 0, 2, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 1, 1, 0], [1, 1], [0, 0, 0], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 4, 6, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 \\l max(divInt(max(len(in1), abs(i0)),divInt(i2,( i1 - int(26.0) ))), max(i2, divInt(len(in2),int(7.0)))):{:\\nb2 = int(9.0) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 0, 3, 3, 3, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 1, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 6, 6, 2, 0, 17, 3, 7, 0, 3, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\l max(mod(i1,len(in1)), max(max(i0, mod(mod(min(int(6.0), int(8.0)),int(9.0)),int(5.0))), saveOrd(in2))):{:\\nres0 = getCharFromString(in2, len(in0)) not in in2\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2, 1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 3, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 3, 0, 0, 0, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 4, 1, 4, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 10, 1, 6, 0, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),saveOrd(in2)), max(i1, saveOrd(in1))), i0) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [2, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 6, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 0, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 13, 4, 3, 1, 3, 4, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nin2 = getCharFromString(in0, mod(( i2 * int(6.0) ),int(8.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1, 0, 0], [1], [3, 3, 2, 3, 3, 3, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 0, 0, 0], [1, 0, 1, 1, 1], [1, 3, 0, 2, 1, 3, 3, 0, 1, 0, 2, 2, 2, 1], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 4, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 8, 8, 8, 0, 34, 4, 14, 1, 3, 8, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(len(in1), mod(min(abs(max(( divInt(i0,i1) * i1 ), i2)), len(in2)),len(in0))) \\l min(max(int(1.0), int(8.0)), min(int(8.0), int(7.0))):{:\\nloopBreak% = 0\\nwhile abs(int(6.0)) \\le divInt(int(6.0),abs(abs(int(5.0)))):{:\\nres0 = s1 != in1.capitalize()\\nin2 = s1[int(3.0):max(i1, i1)].rstrip(in2)[i0:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 3, 3, 3, 4, 1, 0], [1, 1], [1, 0, 0, 1], [4, 5, 3, 4, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 2, 5, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),abs(len(in2))), i1), divInt(i0,i0)) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [0], [0, 2], [0], [0, 0], [], [], [3, 1], [3, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 15, 5, 3, 2, 3, 4, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(1.0) \\ge max(mod(len(in2),len(getCharFromString(in0, ( i2 + i0 )))), mod(( divInt(i2,int(0.0)) - int(2.0) ),int(8.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [0, 3, 2, 0, 3, 3, 0, 1, 2, 2, 1, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 3, 0, 7, 1, 3, 0, 1, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\l max(mod(i0,len(in1)), len(in2)):{:\\nb0 = getCharFromString(in2, i2) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [1], [1], [], [1], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile False:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 2, 0, 1, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 0, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 2, 0, 19, 4, 6, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(100.0) \\l max(mod(len(in1),min(mod(mod(i2,int(8.0)),( max(int(9.0), int(5.0)) * int(5.0) )), int(6.0))), min(saveOrd(in2), i0)):{:\\nres0 = getCharFromString(in2, int(2174.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2, 1, 0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 3, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 2, 3, 1, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 9, 9, 3, 6, 1, 2, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 19, 19, 9, 5, 23, 4, 5, 4, 2, 6, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(( mod(len(in1),int(53.0)) * i2 ), i0):{:\\nres0 = in2 not in in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= mod(( len(s0) + int(8.0) ),int(9.0))\\nif int(5.0) \\le int(5.0):{:\\nloopBreak% = 0\\nfor in2 in in2:{:\\ni1 += max(min(i2, int(6.0)), int(2174.0))\\ni1 = int(20.0)\\ni1 = i0\\ni1 = int(65083.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 0, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [0, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 3, 5, 0, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l min(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, max(mod(min(int(0.0), int(8.0)),int(0.0)), int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [2, 2, 1, 2], [0, 0, 0], [1, 5], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 4, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 1, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1], [1, 2, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in in2:{:\\nres0 = getCharFromString(in2, int(14.0)).endswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [4, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 0, 2, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 1, 0, 1, 1], [1, 3, 0, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 4, 0, 19, 4, 7, 1, 3, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(len(in1), mod(min(max(min(i0, mod(i0,i0)), i2), int(40.0)),saveOrd(in2))) \\l divInt(len(getCharFromString(in2, ( int(2.0) + int(8.0) ))),int(9.0)):{:\\nres0 = in0 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 2, 8, 7, 4, 6, 5, 5, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 1, 1, 3, 0, 1, 3, 1, 0, 1, 3, 3, 1, 3, 3, 0], [1, 0, 1, 1, 1], [4, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 3], [2], [1, 0, 0, 1], [0, 5, 3, 2, 4, 5, 0], [], [], [0, 0, 0, 0, 4, 0, 2, 4, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 2, 1, 3, 1, 1, 1, 0, 0, 0, 0, 0, 4, 0, 11, 2, 5, 1, 1, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nloopBreak% = 0\\nwhile saveOrd(s0) \\l max(mod(len(in2),abs(max(i0, ( i1 * i1 )))), i2):{:\\nb1 = in0 != s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 0, 0, 0, 2, 2, 3, 1, 1, 1, 0, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [2, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 4, 0, 15, 3, 4, 0, 3, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1[len(getCharFromString(in2, i2)):i0]),i2), mod(mod(max(int(0.0), int(8.0)),int(9.0)),i1)):{:\\nres0 = in2 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 0, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 5, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 4, 0, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(i2,max(int(0.0), int(8.0)))) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [1, 0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 1, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 1, 5, 3, 5, 5], [], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 7, 7, 1, 0, 15, 4, 4, 1, 3, 6, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\l max(mod(len(in1),len(s1)), mod(i2,int(0.0))):{:\\nloopBreak% = 0\\nfor in2 in getCharFromString(in0, mod(( max(int(8.0), int(9.0)) + int(5.0) ),int(5.0))):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [4], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 5, 0, 19, 5, 4, 2, 3, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2[mod(( divInt(i2,int(0.0)) - int(2.0) ),int(8.0)):max(i1, i1)], int(9.0)).startswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 295}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [2], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 2, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 4, 0, 21, 3, 9, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), i1), int(26.0)) \\l len(in2):{:\\nb2 = int(7.0) \\le min(len(in1), max(( int(9.0) - int(2.0) ), int(6.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1], [1, 3, 0, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 5, 1, 19, 4, 5, 3, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),min(max(i2, int(2.0)), ( ( ( i1 + int(8.0) ) + int(9.0) ) + int(5.0) ))), min(i2, i1)):{:\\ni2 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 7, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [1, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(s1),len(in2)), mod(i2,i2)):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), int(7.0)) * int(9.0) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 2, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 5, 4, 3, 2, 2, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(s0),divInt(len(getCharFromString(in2, ( min(i1, int(4.0)) + int(8.0) ))[int(3.0):]),i2)) + ( int(8.0) + i2 ) ), int(7.0)) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 1, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 2, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 1, 1], [1, 3, 1, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 4, 0, 21, 5, 5, 2, 3, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),max(max(i2, int(2.0)), ( ( mod(i0,int(8.0)) + int(1.0) ) + divInt(min(i2, i1),int(5.0)) ))), int(5.0)):{:\\nres0 = in2 not in getCharFromString(in2, int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [1, 0], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [2, 2, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [0, 1, 0, 1], [4, 5, 3, 0, 4, 3], [], [], [0, 0, 1, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\nin0 = s0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 0, 1, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 1, 0, 1, 0, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1], [1, 3, 1, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [2, 5, 5, 0, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 18, 4, 4, 3, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(s2),max(( i0 + i0 ), ( ( int(2.0) - i2 ) + int(8.0) ))), i0):{:\\nres0 = int(9.0) \\le max(i1, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 0, 2, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 2, 2, 1, 3, 3, 3, 1, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 0, 1, 1, 2, 2, 2, 0], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 0, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 4, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 6, 0, 13, 1, 6, 0, 1, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, i1))), i0), i2) \\l i1:{:\\nloopBreak% = 0\\nwhile i1 \\le len(in2):{:\\nres0 = in0 != s1\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [5, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 3, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 3, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 4, 4, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) != max(len(in1), len(in2)):{:\\nres0 = getCharFromString(in0, max(mod(i2,i0), ( mod(( i2 + int(2.0) ),int(8.0)) - int(9.0) ))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 8, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 0, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 7, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(len(s0),divInt(len(in0),( ( i0 + int(3.0) ) * int(7.0) ))) + int(3.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 1, 2, 2, 0, 1, 1], [1], [3, 3, 2, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 3, 3, 1, 1, 2, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [0, 5, 3, 3, 4, 5, 1, 0, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 1, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 7, 0, 13, 2, 4, 1, 1, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(s0),abs(i2)), i1), ( i2 * i2 )) \\l i0:{:\\nloopBreak% = 0\\nwhile i1 \\le i1:{:\\nres0 = in2 != in0\\nin0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 0], [5, 2], [0, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [2, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 0, 4, 1, 0], [1, 2, 2], [1, 1, 0, 1], [4, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif res0:{:\\nb0 = in1 != in2\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2, 2], [], [0, 0], [], [], [0, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 9, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [1, 0, 1, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 1, 5, 3, 0, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 3, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 3, 0, 0, 0, 0, 1, 3, 1, 0, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [4, 1, 3, 2, 1, 4, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 1, 6, 0, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in1) \\l max(mod(len(in2),abs(max(saveOrd(in1), i1))), i0):{:\\nres0 = i2 \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [1, 2, 1, 2, 2, 1, 0, 1, 1], [2], [2, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [3, 3, 4, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 0, 5, 5, 4, 3], [], [], [3, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 13, 3, 3, 1, 2, 9, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (in2 + getCharFromString(in2, int(7.0)))\\nloopBreak% = 0\\nwhile len(in0) \\l mod(len(s0),saveOrd((in2[( i2 + i0 ):i2][mod(i1,i1):int(0.0)] + in2))):{:\\nin1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [0], [0, 2], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [5, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 3, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 15, 4, 4, 2, 2, 4, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(50.0) \\l max(mod(len(in2),len(getCharFromString(in0, ( i2 + i0 )))), mod(max(( i2 - int(2.0) ), int(8.0)),int(9.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 1, 1, 0], [1, 1], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 7, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 3, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 5], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 2, 1, 1, 7, 0, 17, 2, 7, 1, 1, 9, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(len(in1), mod(len(in2),abs(max(i0, ( i0 * i2 ))))) \\l i2:{:\\nif i1 \\le len(in0):{:\\nres0 = in1 != in1.capitalize()\\n:}\\n:}else:{:\\nin2 = (s1[i1:len(s0)][i1:int(1.0)] + in1)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 1, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 3, 3, 4, 5, 1, 5, 4], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 1, 0, 9, 1, 4, 0, 1, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), max(i2, int(2.0))):{:\\nres0 = getCharFromString(in0, int(8.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 5, 0, 15, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(int(26.0), mod(max(len(in1), abs(i1)),( i2 - i2 ))) \\l i2:{:\\nres0 = int(7.0) \\le max(i2, len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 3, 1, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 0, 0, 2, 2, 2, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 0, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [5, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 0, 15, 4, 3, 2, 2, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(min(len(in2), int(2.0)),i2), i0):{:\\nres0 = in2 not in getCharFromString(in2, ( mod(( i2 + int(3.0) ),int(1.0)) - int(5.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 2], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 8, 6, 6, 5, 5, 3, 6, 3, 7, 5], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 1, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 3, 3, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 4, 3, 3, 4, 1, 0, 2, 2, 2, 2, 3], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 0, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 5, 1, 1, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(int(1.0),len(in1)), abs(i2)), ( i0 * i2 )) \\l i1:{:\\nloopBreak% = 0\\nwhile int(9.0) == saveOrd(in2):{:\\nres0 = in0 != s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 4, 3, 9, 0, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 1, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 1, 0, 15, 4, 4, 0, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l max(mod(len(in1),len(in2)), mod(int(4.0),i2)):{:\\nb1 = getCharFromString(in2, mod(mod(max(int(3.0), int(9.0)),int(0.0)),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 4, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 4, 0, 19, 4, 5, 2, 2, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(max(len(in1), max(i2, int(2.0))),( mod(( i0 + int(4.0) ),int(9.0)) + int(5.0) )), min(i2, i1)):{:\\nres0 = in2 not in getCharFromString(in2, int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 0, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [7, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 3, 1, 1, 2, 0, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 1, 2, 1, 3, 3, 4, 1, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 0, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 4, 0], [2, 3, 2], [4], [0, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 21, 3, 9, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(max(abs(max(i0, ( i1 * i1 ))), int(7.0)),int(8.0)), len(in1)), len(in2)) \\l saveOrd(in0):{:\\nres0 = max(int(8.0), int(7.0)) \\le divInt(i2,int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [0], [], [], [0, 1], [1, 1, 1, 1, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [0, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 2, 0, 8, 2, 3, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(s0),len(in2)), ( i2 + i0 )):{:\\nres0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 0], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 1, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 0, 4, 1, 0], [1, 2, 2], [1, 1, 0, 1], [4, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 1, 2, 2, 4, 0, 15, 2, 8, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(( len(in1) - abs(min(i1, ( i0 * i2 ))) ), len(in2)), int(21.0)) \\l min(saveOrd(s2), i1):{:\\nres0 = b1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [2, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 1, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [1, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 4, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 7, 1, 3, 0, 1, 4, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),int(2.0)), len(in2)):{:\\nin2 = getCharFromString(in0, i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 2, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [0, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 2, 0, 19, 5, 6, 1, 4, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(s0),len(in2)), divInt(i2,mod(( mod(max(int(0.0), int(8.0)),int(9.0)) * int(5.0) ),min(saveOrd(getCharFromString(in2, i1)), int(5.0))))):{:\\nres0 = in0 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 7, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 2, 2, 0, 0, 3, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 2, 5, 0, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 4, 3, 2, 2, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(7.0) \\l max(mod(len(in1),( mod(i2,i2) + len(in2) )), ( i2 - i1 )):{:\\nres0 = getCharFromString(s2, int(7.0)) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 2, 3, 0, 1, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [1, 0, 0], [4, 5, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(max(mod(len(in1),( abs(i1) - int(26.0) )), i0), i0) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [1, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 1, 2, 0, 0, 1, 1], [1], [3, 3, 3, 1, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [0, 0, 3, 3, 1, 5, 1, 0, 4], [], [], [0, 1, 0, 0, 4, 0, 3, 2, 2, 0, 1, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 11, 1, 5, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(len(s0), int(1.0)), abs(max(i2, mod(i1,i2)))) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [0, 0, 0, 2, 2, 1, 0, 1, 1], [2], [2, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 1, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 0, 1, 1, 3, 3, 0, 1, 1, 0, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 1, 0, 4, 0, 3, 2, 2, 4, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 1, 2, 3, 4, 1, 0], [0, 1], [0, 1, 0, 1], [2, 5, 3, 0, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 1, 5, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(int(29.0), len(s2)), abs(max(i1, divInt(i0,i0)))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 0, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 4, 0, 19, 4, 5, 3, 1, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), max(i2, int(2.0))):{:\\nres0 = getCharFromString(in2[( ( ( i0 + int(8.0) ) + int(9.0) ) + int(0.0) ):min(i2, i1)], int(5.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 0, 0, 1], [2, 1, 1, 1, 0, 0], [2, 2], [0, 2, 0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 3], [1, 1, 2, 1], [0, 0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 3, 1, 1, 0, 1, 1, 3, 1, 0, 1, 3, 3, 1, 1, 2, 0, 3, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 1, 3, 1], [2], [1, 0, 0, 1], [4, 2, 3, 3, 4, 5, 1, 5, 4, 3, 1, 4, 1, 3, 3], [0, 1, 1], [], [0, 0, 0, 0, 4, 0, 3, 4, 2, 0, 0, 0, 4, 0, 2, 0, 0, 4, 3, 3, 0, 3, 1, 0, 2, 1], [2, 1, 2, 0], [4], [0, 0, 1], [2, 3, 2], [], [], [2, 1], [23]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 3, 0, 15, 2, 8, 1, 1, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), int(1.0)), int(8.0)) \\l len(s2):{:\\nres0 = len(in0) \\le saveOrd(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = in2.capitalize()\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [], [1, 1, 1, 1, 1], [5, 8, 9, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 18, 7, 3, 3, 4, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in1) \\le ( divInt(len(in2),divInt(len(in0),( divInt(i0,int(5.0)) + int(8.0) ))) + mod(int(9.0),( int(7.0) + i2 )) ):{:\\nres0 = s1[int(6.0):i2] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 9, 9, 0, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 1, 1, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 17, 7, 3, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( divInt(len(s2),divInt(len(s1),( ( i1 + int(4.0) ) + int(9.0) ))) + divInt(int(9.0),( int(0.0) * i0 )) )) \\le int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 2, 2, 1, 0, 1, 1], [2, 1], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [1], [], [0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [9, 0, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 2, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [0, 5, 4, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 0, 1, 0, 1, 1, 4, 4, 5, 0, 18, 4, 5, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(9.0) \\l max(divInt(len(s0),len(in2)), mod(i2,i0)):{:\\nif True:{:\\nb0 = max(mod(( i2 + int(0.0) ),int(7.0)), int(8.0)) \\le min(i1, i2)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 9, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 0, 0, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1], [2, 5, 5, 2, 4, 5], [1], [], [0, 4, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 5, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 0, 2, 0, 0, 1, 3, 3, 3, 3, 1, 2, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 4, 3, 2, 3, 3, 3, 0, 1, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 2, 5, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(saveOrd(in1), mod(len(in2),abs(len(in0)))) \\l i0:{:\\nres0 = i1 \\le ( i1 * i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 0, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 2, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 1, 19, 3, 8, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(i2, mod(max(len(in1), abs(i0)),mod(i2,i1))) \\l i2:{:\\ni1 -= ( max(int(26.0), len(in2)) - min(abs(int(7.0)), int(9.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(10.0) \\l max(mod(len(in2),len(getCharFromString(in0, mod(i2,i0)))), divInt(( max(int(0.0), int(0.0)) * int(9.0) ),int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 7, 9, 8, 7, 7, 1, 0, 5, 2, 3, 3], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 2, 1, 0, 2, 0, 1, 1], [0, 1, 1, 0, 0, 1, 1, 0, 0], [4, 3, 1, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 3, 0, 22, 9, 3, 5, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(max(( ( i1 + int(1.0) ) + int(7.0) ), divInt(int(9.0),mod(int(8.0),( int(7.0) + i0 )))),( i2 * int(7.0) ))) - int(105233.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [2, 2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 1, 3, 2, 0, 3, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 0, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 12, 12, 4, 0, 21, 5, 4, 2, 3, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(int(2.0),min(( i2 + len(in1) ), mod(( divInt(i0,int(8.0)) + int(9.0) ),int(5.0)))), max(i2, i1)):{:\\nloopBreak% = 0\\nwhile in2 not in getCharFromString(in2, int(5.0)):{:\\nb0 = int(6.0) \\le int(2174.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [6, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [2, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 19, 2, 9, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(s2),abs(max(i1, mod(i0,i2)))), i1), int(66.0)) == len(in2):{:\\nres0 = int(7.0) \\le min(len(in1), max(int(9.0), int(2.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 5, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(in1) \\le ( mod(len(in2),divInt(abs(( ( i0 + int(3.0) ) * int(8.0) )),int(3.0))) + i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 1, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), divInt(i2,i0)):{:\\nres0 = getCharFromString(s1, mod(( max(int(0.0), int(8.0)) * int(9.0) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [2, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 3, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 4, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 19, 5, 5, 2, 3, 4, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),saveOrd(in2)), ( i2 + i1 )):{:\\nin2 = getCharFromString(in0, mod(( divInt(max(int(0.0), int(2.0)),int(8.0)) - min(i2, i1) ),int(9.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 3, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 4, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(10.0) \\l max(mod(saveOrd(in1),len(in2)), mod(i2,i2))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [3, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 3, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [1, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 17, 4, 6, 2, 2, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(30.0) \\l max(mod(len(in1),len(in2)), max(i2, int(2.0))):{:\\nres0 = getCharFromString(in2, ( mod(( i0 - int(8.0) ),int(9.0)) + min(saveOrd(in0), i2) )) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [1], [1], [], [1], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile False:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 1, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 0, 0, 3, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [2, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 0], [], [], [0, 0, 4, 0, 4, 0, 3, 2, 1, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l i2:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 0, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 2, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [2, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(1.0) \\l abs(mod(i2,len(in1)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 3, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 1, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 6, 6, 2, 0, 15, 4, 4, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\le max(mod(len(in1),len(s1)), ( i2 * i1 )):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), int(3.0)) - int(9.0) ),int(5.0))) not in in0\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 422}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [1, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 2, 0], [1], [3, 3, 2, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 1, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 0, 0, 3, 2, 1, 0, 2, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 1, 1, 6, 0, 15, 2, 6, 0, 2, 6, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(int(1.0))), i0), divInt(i0,i2)) \\g i2:{:\\nloopBreak% = 0\\nwhile i1 \\le max(i1, len(in2)):{:\\nres0 = in0 != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = in2\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [2, 2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 2, 2, 0, 0, 2, 2, 3, 1, 0, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 2, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 8, 8, 5, 0, 22, 5, 5, 1, 4, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(11.0) \\l max(mod(len(in1),mod(divInt(i2,i0),( mod(abs(int(0.0)),i2) * int(8.0) ))), int(9.0)):{:\\nloopBreak% = 0\\nwhile in2 not in getCharFromString(in2, max(min(i1, int(5.0)), int(5.0))):{:\\nb1 = int(6.0) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 3, 2, 3, 3, 2, 0, 0, 3, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [3, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [3, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 3, 0, 8, 2, 3, 2, 0, 5, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\l max(( len(in0) + len(in2) ), ( i0 - i2 )):{:\\nres0 = in2.rstrip(in0) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [1, 2], [], [0, 0], [], [], [3, 1], [0, 4, 5], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 4, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 1, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 1, 2, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 4, 1, 18, 3, 7, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(abs(max(int(100.0), i2)),i0), divInt(mod(min(int(8.0), int(9.0)),int(4.0)),int(5.0))), saveOrd(in1)) \\l len(in2):{:\\ni2 *= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 1, 2, 3, 3, 2, 0, 0, 2, 1, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l int(2.0):{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [0, 2, 0, 2, 2, 1, 0, 1, 1], [2], [2, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 0, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [3, 0, 0, 0, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 3, 0, 2, 2, 3, 1, 1, 0, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 1, 18, 4, 7, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(30.0) \\l max(mod(len(in1),len(in2)), mod(max(i2, mod(( min(int(0.0), int(0.0)) * i1 ),int(9.0))),saveOrd(getCharFromString(in2, len(in0))))):{:\\ni2 -= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 3, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 2, 3, 3, 3, 1, 0, 0, 2, 2, 2, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [0, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1], [4, 5, 1, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 8, 1, 3, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(102.0) \\l mod(max(max(len(in1), int(8.0)), i2),i0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 2, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 2, 2, 3, 2, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1, 1], [2, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 2, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 5, 0, 18, 7, 2, 2, 5, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l mod(( abs(mod(( i2 + i0 ),divInt(mod(mod(i2,int(2.0)),int(8.0)),int(2.0)))) - len(in1) ),i1):{:\\nres0 = s2 not in getCharFromString(in2, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 0, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [1, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 1, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(s1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( mod(int(0.0),int(8.0)) * i2 ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [5, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 0, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 4, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 5, 0, 13, 1, 6, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(i1, len(in1)), abs(max(i0, mod(i2,i1)))) \\l i1:{:\\nres0 = int(56.0) \\le len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [1, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [3], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1], [4, 7, 9, 8, 7, 7, 1, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 2, 2, 0, 2, 2, 1, 2, 0, 1, 1, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [3, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 3, 1, 15, 6, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(4.0) \\le ( mod(i1,divInt(( int(7.0) + divInt(i0,int(9.0)) ),int(8.0))) + ( int(7.0) + int(71.0) ) ):{:\\ni2 *= int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 1, 1, 2, 0], [0, 0, 0, 1], [0, 2, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 3, 4, 2, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"u\"\") \\le ( divInt(len(s0),divInt(len(s2),( divInt(i0,int(4.0)) + int(6.0) ))) + mod(int(9.0),( int(8.0) + i0 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 3, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 2, 0, 0, 4, 3, 2, 1], [2, 2, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 6, 2, 21, 5, 5, 3, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(in1),abs(( i2 * i0 ))), mod(( mod(min(int(4.0), int(8.0)),int(9.0)) * min(i2, i1) ),int(5.0))):{:\\ni2 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(6.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 2, 3, 1, 1, 3, 1, 1, 3, 1, 0, 1, 3, 3, 1, 3, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 3], [1], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 1, 6, 0, 1, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(in1)), abs(max(i0, mod(i1,i1)))) \\l i2:{:\\nloopBreak% = 0\\nwhile int(9.0) \\le len(in2):{:\\nres0 = in0 != s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 0, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 2, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 4, 0, 20, 2, 9, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), i1), int(26.0)) \\l len(in2):{:\\nres0 = int(7.0) \\le min(abs(max(int(0.0), int(2.0))), int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 1, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 0, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 5, 0, 15, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(i1, mod(max(len(in1), abs(i0)),mod(i2,i1))) \\l i1:{:\\nres0 = int(26.0) \\le max(int(1.0), len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 1, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [3, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 1, 0, 0, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l len(in1):{:\\nb0 = in2 not in getCharFromString(in2, int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 1, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 4, 4, 0, 0, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 3, 3, 8, 0, 19, 2, 6, 1, 1, 9, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(int(1.0), mod(max(len(in1), abs(i0)),( i0 * i2 ))) \\l i2:{:\\nloopBreak% = 0\\nwhile i1 \\le max(i1, len(in2)):{:\\nres0 = s1 != in1.rstrip(in1).capitalize()\\nin2 = s1[i1:int(0.0)][int(8.0):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = in1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 2, 1, 15, 4, 4, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), max(i2, int(2.0))):{:\\ni0 = ( mod(( int(8.0) + int(9.0) ),int(5.0)) + int(5.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [3], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [5, 5, 5, 3, 5, 5], [1], [], [4, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 1, 18, 4, 5, 3, 1, 3, 0, 0, 5, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(( len(getCharFromString(in2, len(in2.rstrip(in2)))) * max(i2, int(2.0)) ), ( mod(( i0 + int(8.0) ),int(9.0)) + int(5.0) )):{:\\ni2 = min(i1, i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 3, 6, 6, 5, 5, 3, 6, 3, 7, 5], [0, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 1, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 3, 3, 0], [1, 0, 1, 1, 1], [1, 1, 2, 2, 1, 3, 3, 0, 1, 0, 2, 2, 2, 4, 3], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 7, 7, 3, 0, 23, 2, 11, 1, 1, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(abs(abs(max(i0, ( i2 * int(1.0) )))),i1), int(9.0)), len(in1)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile min(max(int(8.0), int(3.0)), min(int(6.0), int(6.0))) \\le abs(int(5.0)):{:\\nres0 = in0 != s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [1, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 0], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 1, 2, 2, 0, 1, 1], [1], [0, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [2, 5, 3, 3, 4, 5, 1, 0, 4], [], [], [0, 0, 0, 0, 1, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i2 \\l max(mod(max(len(s2), abs(i1)),( i2 * i2 )), i0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [1, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [2, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 1, 8, 1, 3, 1, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(int(16.0), len(s2[i1:])) \\le divInt(len(in2),i2)\\ni1 *= i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 0, 3, 3, 0, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [2, 1, 2], [1, 1, 1, 1, 1], [3, 5, 0, 5, 4, 3], [1], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 1, 5, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in0) * i1 ), abs(min(i1, i1))), i0) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [1], [], [1], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 1, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 1, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 2, 2, 2, 0, 8, 2, 3, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(s1)), divInt(i2,i0)):{:\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [2, 4], [2, 1], [0, 0], [4], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 0, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 5, 5, 4, 3], [], [], [4, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 4, 0, 22, 3, 8, 1, 2, 6, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile getCharFromString(in1, max(max(mod(len(in2),abs(max(i1, mod(i0,i2)))), i1), int(26.0))).startswith((in2 + in2)[( int(0.0) - len(in1[:min(int(9.0), int(2.0))][int(6.0):int(5.0)]) ):]):{:\\nres0 = int(3.0) == len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 9, 9, 8, 7, 7, 1], [0, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 1, 2, 3, 2, 1, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 1, 11, 4, 2, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = max(int(4.0), ( len(s2) + divInt(int(9.0),divInt(( i0 + int(9.0) ),int(8.0))) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4, 4], [1, 1, 2], [0, 0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 3, 3, 3, 3, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 2, 1, 3, 3, 0, 2, 1, 3, 0, 2, 1, 0, 1, 3, 0, 2, 1, 0], [1, 0, 1, 1, 1, 1, 0, 1], [0, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 4, 2, 2, 3, 4, 0], [2, 0], [1, 1, 0, 1, 0, 0], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0, 2, 0], [2, 3, 2], [4], [0, 0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 13, 13, 8, 0, 44, 8, 17, 2, 6, 9, 0, 0, 14, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(max(mod(len(in1),abs(max(i2, ( i0 * i2 )))), len(in2)), int(1.0)) \\l len(in0):{:\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le max(min(int(9.0), int(8.0)), abs(mod(int(7.0),saveOrd(in1.capitalize())))):{:\\nres0 = in2[int(6.0):divInt(int(6.0),abs(mod(int(5.0),abs(len(s1)))))][i1:divInt(int(5.0),saveOrd(in2))][i1:( int(3.0) + i0 )] != in1[int(63.0):min(i1, divInt(int(75.0),i0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 1, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 5, 0, 18, 3, 7, 3, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(( len(in1) - abs(min(i1, ( i1 - i1 ))) ), i0), int(22.0)) \\l abs(len(in2)):{:\\nres0 = int(7.0) \\le ( int(9.0) * i2 )\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3, 3], [0, 4], [1, 1, 0], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 2, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [4, 4, 0, 0, 4, 0, 4, 2, 2, 0, 0, 0], [2, 3, 2, 0], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 2, 2, 3, 2, 0, 1, 0, 0, 1, 4, 4, 8, 0, 21, 2, 7, 1, 1, 7, 0, 0, 11, 4, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(abs(abs(max(i0, ( i0 * i2 )))),i2), i1), len(in1.rstrip(in2).capitalize())) \\l i0:{:\\nloopBreak% = 0\\nwhile len(in0.capitalize()) \\le i1:{:\\nres0 = res0\\nin1 = getCharFromString(in1[int(1.0):int(0.0)][i0:int(8.0)], int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = s1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [4, 9, 2, 3, 1, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 2, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 2, 0, 14, 4, 4, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(49.0) \\l max(mod(len(in1),len(in2)), ( i2 * i0 )):{:\\nres0 = getCharFromString(in2, mod(( abs(int(2.0)) - int(3.0) ),int(1.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [0, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 0, 0, 1], [1, 5, 5, 5, 4, 3], [], [], [0, 4, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 14, 2, 6, 1, 1, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(s1) - abs(max(i1, mod(int(22.0),i0))) ), i2), int(7.0)) \\l len(getCharFromString(in2, int(9.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 0, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 0, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 0, 2, 2, 0, 0, 0], [3, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 4, 4, 4, 0, 18, 2, 8, 1, 1, 9, 0, 0, 11, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(5.0), len(in1)), i0) \\l abs(i1):{:\\nloopBreak% = 0\\nwhile mod(( i1 * i2 ),int(8.0)) \\le max(len(in2), len(in0)):{:\\nres0 = s1 != s0.rstrip(in2)\\ns1 = in2[saveOrd(in1):int(8.0)][int(7.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 6, 7, 6, 6, 5, 3, 3, 6, 5, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 2, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2], [0, 0, 0], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 0, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 9, 9, 3, 0, 29, 4, 13, 1, 3, 8, 0, 0, 10, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(in1)), abs(max(i0, divInt(( i1 * i1 ),divInt(len(in2),len(in0)))))) \\l saveOrd(s1):{:\\nloopBreak% = 0\\nwhile max(int(8.0), int(6.0)) \\le min(int(7.0), int(6.0)):{:\\nres0 = in1.capitalize() != in2[abs(int(6.0)):divInt(int(5.0),abs(abs(int(3.0))))][int(3.0):]\\ns1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 2, 9, 9, 8, 6, 5, 3, 3, 6, 3], [2, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 2, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 1, 1, 1], [1, 4, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1, 1], [1, 0, 0, 1], [2, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 2, 4, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(saveOrd(s2), mod(len(in2),abs(divInt(i2,i0)))) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 5, 1, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 3, 5, 3, 5, 5], [1], [], [0, 4, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 4, 0, 21, 4, 5, 2, 2, 6, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(getCharFromString(in0.rstrip(in2), max(i2, int(2.0))))), ( mod(( i1 + int(5.0) ),int(1.0)) - int(5.0) )):{:\\nres0 = in0 not in (in2[min(i2, i1):int(5.0)][int(6.0):int(2174.0)] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5, 1, 6, 6, 4, 6, 1], [0, 1, 1, 2, 1, 1, 0, 2, 0, 0, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 3, 2, 1, 0, 0, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 1, 2, 2, 0, 0, 1, 2, 3, 1, 1, 0, 3, 0, 2, 3, 2, 1, 1, 3, 3, 0, 0, 0, 1, 1], [1, 0, 1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 2, 1, 3, 3, 4, 1, 0, 2, 4, 3, 1, 1, 1, 0, 1], [2, 0], [1, 0, 0, 1, 1, 0, 1], [4, 5, 3, 3, 4, 5, 1, 5, 4, 4, 1, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 2, 0, 3, 0, 4, 0, 0, 4, 2, 2, 0], [2, 3, 2], [4], [0, 0, 1, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 19, 19, 12, 0, 55, 9, 18, 2, 7, 12, 0, 0, 21, 3, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(max(abs(max(i0, ( i1 * i1 ))), int(1.0)),int(8.0)), len(in1)), len(in2)) \\l saveOrd(in0):{:\\nloopBreak% = 0\\nwhile max(divInt(int(8.0),i2), i1) \\le int(7.0):{:\\nres0 = in0 != in1.capitalize()\\nin2 = (s1[min(int(6.0), divInt(int(6.0),abs(saveOrd(in2[:int(5.0)])))):int(3.0)][len((in1 + in1.rstrip(s1))):int(3.0)] + in1[mod(mod(i1,i0),int(63.0)):divInt(max(int(75.0), int(1.0)),i2)][max(i0, ( max(mod(int(6.0),int(6.0)), min(max(i0, i1), i2)) + int(4.0) )):int(61.0)].capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 0, 1, 2], [0, 0, 0], [1], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [9, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 0, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 4, 4, 4, 0, 15, 5, 3, 2, 3, 4, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(90.0) \\l max(mod(len(in1),len(in2)), ( i0 + i0 )):{:\\nres0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = getCharFromString(in0, divInt(( divInt(i2,int(2.0)) - i1 ),int(8.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 3, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 1, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 4, 2, 3, 5, 5], [], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 3, 0, 19, 4, 6, 1, 3, 4, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in1:{:\\nres0 = int(13.0) \\l max(mod(max(len(s2), mod(i2,i0)),mod(( max(int(0.0), int(8.0)) * int(9.0) ),int(5.0))), min(saveOrd(getCharFromString(in0, i2)), int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 5, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(abs(divInt(len(in2),( ( i0 + int(3.0) ) * int(8.0) ))),int(3.0)) + i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 0, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 4, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 2, 4, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(i1,len(in1)), abs(i0)), mod(i0,i0)) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 9, 4, 9, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 2, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 22, 22, 7, 0, 34, 10, 6, 1, 9, 6, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(19.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(mod(int(4.0),int(9.0)), int(9.0)) * min(saveOrd(in0[i2:int(8.0)]), int(5.0)) ),int(6.0))) not in (in2[:i1][int(2174.0):mod(i2,divInt(mod(divInt(int(20.0),i1),int(65083.0)),mod(i1,int(305.0))))] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [], [1, 0, 0, 1, 1, 0, 1, 0, 1], [4, 6, 9, 8, 7, 7, 1, 5, 3], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 2, 1, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 9, 9, 3, 0, 18, 7, 3, 3, 4, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( divInt(i0,int(4.0)) + i2 ))) + divInt(int(698.0),( int(7.0) + int(71.0) )) ):{:\\nres0 = s2[int(53.0):i2] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [2, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 0, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 0, 1, 2, 0, 0, 3, 3, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 3, 3, 3, 0, 8, 2, 1, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) == max(mod(i2,int(2.0)), ( i0 + i0 )):{:\\nres0 = in1 not in in2\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [3, 1, 3, 2, 0, 2, 0, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 0, 4, 3, 0, 2], [2], [0, 0, 0, 1], [4, 2, 3, 4, 4, 5, 4, 0, 4, 0], [], [], [4, 0, 0, 0, 4, 2, 4, 2, 0, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 4, 4, 8, 0, 21, 2, 7, 1, 1, 9, 0, 0, 12, 3, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(divInt(len(in1.capitalize()),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l len(s2):{:\\nloopBreak% = 0\\nwhile i1 \\le min(i1, int(1.0)):{:\\nb1 = in0 != in1[int(0.0):i0].capitalize()[int(8.0):int(7.0)].rstrip(in1)\\nin2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = in1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 1, 7, 6, 7, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 1, 0, 2, 2, 1, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [0, 1, 3, 2, 1, 3, 3, 4, 1, 0, 4, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 3, 5, 4], [], [], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 4, 4, 2, 0, 15, 2, 7, 1, 1, 7, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(max(int(1.0), len(in1)), abs(int(8.0))) \\l i0:{:\\nloopBreak% = 0\\nwhile mod(( int(1.0) * i1 ),int(7.0)) \\le max(len(in2), len(in0)):{:\\nres0 = s1 != in1\\nin2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [2, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 0, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 1, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 3, 3, 7, 0, 18, 3, 6, 1, 2, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(max(( max(len(in1), min(i0, divInt(i0,i2))) * i2 ), i1),max(i1, len(in2))) \\l i1:{:\\nloopBreak% = 0\\nwhile int(10.0) \\le int(8.0):{:\\nres0 = s1 != in1\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [2, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [3], [1], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 7, 3, 8, 6, 6, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 1, 3, 3, 2, 0, 3, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 1, 1], [2, 4, 3, 4, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [5, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 4, 0, 0, 2, 2, 4, 0, 0], [2, 3, 0], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 1, 1, 4, 0, 2, 1, 0, 4, 0, 0, 6, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(17.0) \\l abs(int(3.0)):{:\\nb2 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += saveOrd(in2.rstrip(in0).capitalize())\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [0, 0, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 2, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i1 \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 9, 5, 6, 2, 6, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 1, 3, 2, 1, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 4, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 1, 0, 15, 4, 3, 1, 3, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(int(0.0),saveOrd(in1)), divInt(int(8.0),i2)):{:\\nres0 = in2 not in getCharFromString(in2, mod(( len(in0[int(9.0):int(9.0)]) * int(5.0) ),int(6.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [0, 2], [0, 2], [0], [0, 0], [], [], [3], [5, 4], [1, 1, 2], [0, 0], [5], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 1, 1, 3, 3, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 3], [2], [1, 0, 0, 1], [4, 1, 3, 1, 4, 5, 1, 5, 4], [], [0], [0, 0, 0, 0, 4, 0, 0, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 17, 3, 8, 1, 2, 6, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in s1:{:\\nloopBreak% = 0\\nwhile max(max(mod(len(in0),abs(max(i0, ( i1 * i1 )))), i2), int(1.0)) != divInt(len(s1),len(in1)):{:\\nres0 = saveOrd(in2.capitalize()) \\le int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 0, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [1, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 9, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 2, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [0, 0, 1, 1, 1], [1, 4, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2, 1], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 2, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 11, 11, 3, 0, 31, 4, 14, 2, 2, 5, 0, 0, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(saveOrd(in1), int(1.0)) \\g len(in2[abs(max(i0, ( ( mod(i1,int(8.0)) * len(in0) ) - len(s1.capitalize()) ))):]):{:\\nres0 = saveOrd(in1[:max(int(8.0), int(7.0))][min(int(6.0), int(9.0)):abs(int(5.0))][divInt(int(3.0),abs(abs(int(3.0)))):int(63.0)]) \\le abs(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 0, 3, 0, 2, 0, 2, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [0, 1, 0, 1], [4, 5, 3, 0, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 19, 5, 6, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(max(divInt(len(in1),i1), abs(i2)), ( i0 - ( i1 - int(29.0) ) )) \\l min(mod(len(in2),divInt(int(7.0),int(9.0))), int(2.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [5, 8, 9, 7, 6, 6, 5, 3, 1, 6, 3, 7, 5, 1], [0, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 2, 3, 3, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 1, 1, 1, 0, 3, 3, 1], [1, 0, 1, 1, 1], [1, 1, 2, 2, 1, 3, 3, 4, 1, 2, 2, 2, 2, 2, 4], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 4, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 14, 14, 4, 0, 34, 5, 15, 1, 4, 8, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(abs(( abs(max(divInt(i0,i0), i1)) * int(58.0) )),len(in1)), len(in2)), saveOrd(in0)) \\l max(int(9.0), int(7.0)):{:\\nloopBreak% = 0\\nwhile abs(divInt(int(6.0),abs(int(6.0)))) \\le mod(int(5.0),abs(abs(int(3.0)))):{:\\nres0 = s1 != in1.capitalize()\\nin2 = in1[int(1.0):int(63.0)][:i2][abs(saveOrd(in2)):int(751.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [2, 0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [0, 3, 3, 4, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 4, 3, 1, 3, 6, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(70.0) \\l i2:{:\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = in2 not in getCharFromString(in0, mod(min(len(in2), mod(i2,i2)),mod(( len(in2) * int(6.0) ),int(8.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [3], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 2, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [4, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [1, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 5, 0, 17, 6, 3, 2, 4, 4, 0, 0, 6, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\l mod(( max(len(saveChr(mod(i0,i2))), ( divInt(mod(i1,int(10.0)),int(2.0)) + int(8.0) )) - len(in1) ),i1):{:\\nb0 = in2.rstrip(in2) != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 0, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 1, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [0, 1, 0, 1], [4, 5, 3, 0, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 10, 1, 5, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= max(max(divInt(len(in1),abs(min(i2, int(2.0)))), i0), i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2, 2], [], [0, 0], [], [], [2, 1], [5, 4], [2, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 1], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 0, 2, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 2, 3, 0, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 3, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 2, 5, 1, 0, 4, 0, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 2, 5, 5, 6, 0, 21, 4, 7, 1, 3, 11, 0, 0, 13, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(max(( max(len(in1), abs(i2)) * divInt(i0,i2) ), i2),i0) \\l len(in2):{:\\nif divInt(len(in0),i1) \\le int(00.0):{:\\nres0 = s1 != s2.capitalize()\\nin2 = (s1[int(8.0):len(s0)][int(7.0):int(6.0)] + in1)\\n:}\\n:}else:{:\\ns0 = s0\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 8, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [2, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(s2),len(in2)), mod(i2,i2)):{:\\nres0 = getCharFromString(in2, mod(( max(int(8.0), int(8.0)) * int(9.0) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1], [2, 1, 2, 2, 1, 0, 0], [1, 2, 2], [0, 2, 1, 1], [], [0, 0], [], [], [1, 3], [4, 4, 3], [1, 1, 0, 1], [0, 0, 0], [], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3, 9], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 2, 0, 2, 0, 1, 3, 0, 3, 3, 1, 0, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 3, 0, 2, 1, 3, 0, 1, 1, 0], [1, 1, 0], [0, 0, 0], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 7, 7, 3, 4, 0, 2, 0, 0, 2, 3, 4, 3, 0, 1, 0, 0, 1, 12, 12, 8, 2, 29, 3, 10, 3, 2, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(26.0) \\le max(divInt(len(in1),min(abs(i1), divInt(i0,( i2 - int(7.0) )))), max(i1, len(in2))):{:\\nb1 = min(int(9.0), i2) \\le int(2.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile res0:{:\\nloopBreak% = 0\\nwhile int(6.0) \\ge int(5.0):{:\\nin1 = in2\\ni1 -= max(int(3.0), max(int(3.0), i1))\\ni0 += min(int(63.0), int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [4, 5, 0, 5, 4, 3], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 7, 2, 5, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le ( divInt(len(in2),( int(4.0) + ( ( i1 + int(7.0) ) + int(9.0) ) )) * divInt(i0,( int(8.0) - i2 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 1, 2, 3, 1, 3, 2, 2, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 4, 2, 4, 5], [1], [], [0, 4, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le int(4.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [2, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 3, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 0, 2, 0, 3, 0, 4, 1, 0], [1, 2, 2], [1, 1, 0, 1], [4, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 7, 0, 21, 3, 7, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(int(22.0), ( max(min(abs(i2), ( i0 - i2 )), i1) * int(7.0) )) \\l min(len(in1), i0):{:\\nres0 = ( int(9.0) * i1 ) \\le min(int(7.0), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3], [], [], [], [10]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 18, 7, 4, 4, 3, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(\"\"\"\\\\\"\"\"),( ( i2 + min(int(4.0), divInt(int(7.0),( int(9.0) + i0 ))) ) + int(8.0) ))) * i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 0, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [0, 2, 1, 2], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [0, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nin1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 9, 5, 3, 3, 6, 3, 7, 5], [2, 1, 1, 2, 1, 1, 2], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 3, 0, 0, 3, 3, 3, 0, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 0, 1, 0, 2, 2, 2, 0], [0], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [1], [], [0, 0, 0, 0, 1, 0, 2, 4, 2, 0, 4, 0], [2, 3, 2], [4], [0, 0, 0], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 2, 2, 5, 0, 17, 2, 8, 1, 1, 6, 1, 0, 6, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(int(1.0), mod(max(len(in1), abs(i2)),( i1 + max(i1, i2) ))) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le min(i1, int(8.0)):{:\\nres0 = s1 != \"\"u\"\"\\nin1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [5, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 1, 3, 1, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 5, 0, 17, 2, 8, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, ( i2 - i2 )))), i2), int(56.0)) \\l len(in2):{:\\nb1 = i2 \\le max(saveOrd(in0), int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 1, 1, 0, 3, 1, 3, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 15, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(int(26.0), mod(i1,i0)))), i2), int(7.0)) \\l len(in2):{:\\nres0 = int(9.0) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 4, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 3, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 15, 1, 8, 0, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(len(in1), abs(max(len(in0), i1))), mod(i0,i2)) \\l i1:{:\\nres0 = int(26.0) \\le min(int(7.0), len(in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 1, 4], [1, 1, 1, 2], [0, 0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 0, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [4, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 1, 0, 0, 7, 0, 15, 2, 6, 1, 1, 7, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in1) \\l max(mod(i0,len(in2)), abs(i0)):{:\\nloopBreak% = 0\\nwhile ( i2 * i2 ) \\g i1:{:\\nres0 = i1 \\le max(i1, len(in0))\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = s1.capitalize()\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 4, 3, 9, 0, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 1, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 1, 15, 4, 4, 1, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\ni2 *= mod(mod(max(int(4.0), int(3.0)),int(9.0)),int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 1, 3, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 2, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 3, 3, 7, 0, 20, 2, 8, 1, 1, 9, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(max(len(in1), max(i0, ( i0 * i2 ))),i2), i1), len(s2)) \\l len(in0):{:\\nloopBreak% = 0\\nwhile saveOrd(in1) \\le i1:{:\\nres0 = in1.capitalize() != (in2[int(1.0):int(0.0)][i1:int(8.0)] + s1)\\ns0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 4, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [1, 3, 2, 3, 0, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 0, 0, 1, 1], [1, 3, 3, 4, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 1, 5, 5, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 4, 3, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),i2), mod(i2,i2)):{:\\nres0 = s1 not in getCharFromString(in2, ( ( len(in2) * int(0.0) ) - int(4.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 4, 3, 3, 4, 1, 0], [1, 1], [0, 0, 0], [4, 3, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 2, 5, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = max(max(divInt(len(in1),abs(saveOrd(in0))), i1), ( i0 - i2 )) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [2, 2, 1, 2], [0, 0, 0], [1, 1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 3, 2, 1, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 0, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in in2:{:\\nres0 = getCharFromString(s0, int(10.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [2, 2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [5, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 7, 7, 4, 0, 19, 4, 5, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in2),len(in2)), min(i2, int(2.0))):{:\\nloopBreak% = 0\\nwhile getCharFromString(in2, ( mod(( i0 + int(8.0) ),int(9.0)) - int(5.0) )) not in in0:{:\\nres0 = min(i2, i1) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 0], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 0, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 0, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 4, 4, 7, 0, 21, 2, 8, 1, 1, 10, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * len(in2) )))), i2), i2) \\l min(i1, saveOrd(in0)):{:\\nloopBreak% = 0\\nwhile i1 \\l int(1.0):{:\\nres0 = s0 != in1.capitalize()\\nin2 = (s1[int(0.0):i1][int(8.0):int(7.0)] + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = s0\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4, 2], [1, 1, 1], [0, 0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 7, 0, 17, 2, 7, 1, 1, 7, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile i1 \\le len(in0):{:\\nres0 = i1 == int(1.0)\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = s1.capitalize()\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 1, 1, 1, 0], [1, 2], [0, 2, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1, 0], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 2, 0, 2, 1, 3, 3, 4, 3, 0, 2], [2, 1], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 7, 1, 17, 2, 8, 2, 1, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(abs(mod(min(abs(max(i0, ( i0 * len(in1) ))), i2),i2)), len(in2)) \\l i1:{:\\nres0 = saveOrd(in0) \\le i1\\n:}else:{:\\nin1 = in1\\ni1 -= int(1.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 3, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 1, 3, 1, 0, 0, 2, 2, 2, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 2, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 4, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 1, 0, 7, 1, 2, 0, 1, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(int(6.0),len(in1)), int(8.0)):{:\\nres0 = in1 not in getCharFromString(in2, i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 3, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 2, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l i2:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 0, 0, 2, 0, 0, 0, 1, 1, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 3, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 1, 4, 1, 0, 2, 2, 2, 2, 3], [2], [1, 0, 0, 1], [4, 5, 3, 2, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 5, 0, 13, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(i0)), i1), ( i1 * i2 )) \\l i1:{:\\nres0 = int(1.0) \\le int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 0, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [3, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 6, 1, 3, 0, 1, 5, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), i2):{:\\nres0 = in2.rstrip(in0) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 8, 6, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [2, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 3, 1, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 4, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 2, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 10, 10, 4, 0, 31, 4, 13, 1, 3, 8, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(max(int(1.0), max(len(in1), abs(i0))),( divInt(i1,i1) * max(int(8.0), saveOrd(in2)) )) \\l len(in0):{:\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le int(6.0):{:\\nres0 = in1.capitalize() != s2[int(7.0):max(int(6.0), int(6.0))][min(int(5.0), divInt(int(3.0),abs(abs(int(3.0))))):int(6.0)][abs(i2):]\\ns1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [2, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [0, 3, 2, 3, 3, 3, 1, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 2, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 4, 0, 3, 5, 5], [1], [], [0, 0, 4, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 0, 18, 4, 5, 2, 2, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\l max(mod(len(in1),len(in1)), abs(int(10.0))):{:\\nb2 = getCharFromString(s0[int(2.0):( mod(( i0 + int(8.0) ),int(9.0)) + int(5.0) )], min(i2, i1)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [4, 0, 2, 8, 1, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 1, 2, 3, 3, 2, 0, 1, 2, 3, 2, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(40.0) \\l int(2.0):{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [2, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 0, 2, 3, 3, 3, 0, 2, 3, 0, 3, 1, 3, 3, 0, 2, 3, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1, 1, 0], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 0, 4, 1, 0, 0, 1], [1, 2, 2], [1, 1, 0, 1], [5, 5, 2, 5, 4, 3], [], [], [4, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 9, 9, 8, 0, 31, 3, 12, 3, 0, 6, 0, 0, 12, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(i2, ( max(len(getCharFromString(in2, abs(i0))), ( min(i2, len(in2)) - int(22.0) )) * min(saveOrd((s2 + (in2 + in1.rstrip(in0)[i1:( max(i0, int(7.0)) * int(9.0) )]))[i1:]), min(int(7.0), min(int(6.0), i1))) )) \\l max(int(5.0), int(3.0)):{:\\nres0 = int(3.0) \\le i0\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [3], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 0, 3, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 15, 2, 8, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),abs(max(i1, mod(i0,len(in2))))), i2), i1) \\l min(int(26.0), len(in1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 5, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( mod(len(s0),mod(len(in2),( ( i0 + int(3.0) ) * int(8.0) ))) + int(3.0) )) \\le i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [1], [], [0], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 3, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 2, 2, 3, 2, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 4, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [2, 5, 4, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 6, 6, 2, 0, 16, 6, 3, 2, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l mod(( max(mod(( i2 * i0 ),mod(mod(saveOrd(s2),int(3.0)),int(8.0))), int(9.0)) - int(5.0) ),len(in2)):{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [1, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 3, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 1, 2, 0, 0, 3, 0, 2, 0, 2, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 1, 5, 3, 5, 5], [], [], [0, 0, 4, 4, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 9, 2, 3, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(mod(len(in1),int(3.0)), ( i1 - i0 ))\\ni2 -= len(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 1, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 0, 16, 5, 3, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(int(2.0),len(in1)), ( i2 + i0 )):{:\\nres0 = mod(( divInt(i2,int(8.0)) - int(9.0) ),int(5.0)) \\le len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 5, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 4, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 7, 3, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(max(( ( i1 + int(4.0) ) + int(6.0) ), divInt(int(5.0),( int(8.0) + i2 ))),int(7.0))) * i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 7, 2, 5, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 2, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 1, 3, 3, 2, 0, 0, 2, 2, 2, 2, 1, 1, 1, 3, 0, 0, 1, 3, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 5, 0, 3, 0, 0, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(17.0) \\l max(int(2.0), len(in1)):{:\\nb0 = in2 not in getCharFromString(in2, len(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 0, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 0, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 2, 8, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), i1), int(26.0)) \\l min(int(7.0), min(len(in2), i1)):{:\\nres0 = int(9.0) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 0, 5, 5], [1], [], [0, 0, 4, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 0, 21, 6, 4, 2, 4, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(max(( len(in1) + len(in2) ), mod(i2,i0)),( divInt(mod(i2,int(70.0)),int(2.0)) - int(8.0) )) \\l max(i1, i1):{:\\nres0 = getCharFromString(in2[int(9.0):int(5.0)], int(5.0)) not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 0, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = max(mod(mod(max(len(in1), min(i1, ( i0 - i2 ))),i1),int(26.0)), max(int(7.0), len(in2))) \\l min(int(9.0), int(2.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [2, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 3, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += saveOrd(s0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 0, 2, 1, 0], [1, 2], [0, 0, 2], [], [0, 0], [], [], [3, 3], [0, 4, 0], [1, 1, 2, 1], [0, 0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 1, 1, 1, 1], [1, 1, 3, 2, 2, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 0, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 2, 0, 0, 2, 3, 4, 3, 1, 0, 0, 0, 1, 3, 3, 8, 0, 20, 2, 7, 0, 2, 8, 0, 0, 11, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(abs(i0))), divInt(i0,i2)), i2) \\l i1:{:\\nres0 = len(s0) \\le i1\\n:}else:{:\\nloopBreak% = 0\\nwhile in0 != in1:{:\\nres0 = len(in1.capitalize()) \\l i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = (s1[int(1.0):int(0.0)][i1:int(8.0)] + s0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 1, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 2, 1, 15, 4, 4, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,int(0.0))):{:\\ni0 *= mod(( max(int(8.0), int(9.0)) - int(5.0) ),int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 2, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 1, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [2, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 3, 3, 2, 0, 8, 2, 2, 0, 2, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\l abs(mod(int(0.0),len(in1))):{:\\nres0 = in2 not in getCharFromString(in2, mod(i2,i1))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 2], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 1, 3, 3, 3, 0, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 0, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 5, 0, 15, 1, 8, 0, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, i0))), i2), i1) \\l i1:{:\\nres0 = len(in2) == min(int(26.0), len(in1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 0, 3, 2, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [3, 1, 3, 2, 1, 3, 0, 4, 1, 0], [1, 1], [0, 0, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 19, 5, 6, 1, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l divInt(divInt(max(len(in2), abs(i1)),( divInt(i0,i2) - int(26.0) )),max(i1, len(in1))):{:\\nres0 = mod(int(7.0),int(9.0)) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 1], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 9, 4, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 3, 1, 3, 1, 2, 1, 1, 3, 1, 1, 3, 0, 3], [1, 0, 1, 1, 1], [1, 1, 3, 3, 1, 2, 3, 4, 1, 0, 2, 2, 2, 2, 4], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 1, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 4, 0, 12, 1, 5, 0, 1, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(5.0), len(in1)), len(in2)) \\l max(i0, mod(i1,i1)):{:\\nif i2 != int(8.0):{:\\nres0 = in0 != s1\\nin1 = s1.capitalize()\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 8, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [0, 0, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 2, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 4, 0, 21, 4, 5, 2, 2, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(18.0) \\l min(mod(min(len(in1), max(i2, int(2.0))),( mod(( i0 + int(8.0) ),int(9.0)) + int(5.0) )), min(i2, i1)):{:\\nres0 = getCharFromString(in2, int(5.0))[int(6.0):int(2174.0)] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 0, 8, 9, 4, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 5, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 1, 0, 7, 1, 3, 0, 1, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(12.0) \\l max(mod(len(in1),len(in2)), int(0.0)):{:\\nres0 = getCharFromString(in2, i2) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 2, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 0, 2, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i0,i0)))), i1), int(06.0)) \\l len(in2):{:\\nin1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [0, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 2, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 1, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(7.0) ))) + divInt(int(9.0),( int(2.0) - i0 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 8, 9, 7, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [2, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 4, 0, 22, 4, 6, 1, 3, 6, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1[len(getCharFromString(in2, mod(i2,i0))):mod(( min(int(7.0), int(8.0)) * int(9.0) ),int(7.0))]),min(saveOrd(in2), i2)), int(5.0)):{:\\nres0 = in0 not in (in2[:int(6.0)][int(2174.0):i1] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 2, 0, 0, 1, 2, 1, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 0, 0, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 4, 1, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(len(in1), mod(len(s0),max(( i2 + i0 ), int(10.0)))) \\l mod(int(2.0),i2):{:\\nres0 = getCharFromString(s0, int(8.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 0], [0, 2, 0], [0], [0, 0], [], [], [3, 2], [1, 4, 0], [1, 1, 1], [0, 0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 2, 2, 2, 1, 1, 1, 0], [1], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 2, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 4, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 1, 3, 4, 4, 5, 1, 0, 4, 0], [], [0], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 0, 0, 2, 3, 3, 3, 0, 0, 0, 0, 1, 4, 4, 7, 0, 21, 4, 6, 1, 3, 6, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(max(( max(len(in1), abs(i0)) * divInt(i2,i2) ), i2),i1) \\g max(i1, saveOrd(s1)):{:\\nloopBreak% = 0\\nfor in0 in in1:{:\\nres0 = i1 \\le int(1.0)\\nin1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = int(0.0) \\l divInt(int(8.0),int(7.0))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [2, 2, 1, 2], [0, 0], [1], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 3, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 1, 1, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 not in in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [5, 3, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 6, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 3, 5, 3, 3, 5, 5], [], [], [0, 0, 3, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 2, 3, 2, 1, 0, 0, 0, 0, 5, 5, 6, 0, 20, 4, 5, 2, 2, 7, 0, 0, 11, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(7.0) != max(mod(len(in1),len(in0)), ( i2 + i0 )):{:\\nb0 = (in2 + in0) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = len((in2[mod(i2,i1):int(6.0)][i2:int(7.0)] + in2)) \\ge min(i0, ( int(8.0) - int(9.0) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 3, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 2, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(s2),divInt(len(in0),( ( i1 + int(4.0) ) + int(7.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 7, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 0, 1, 1, 3, 3, 0, 1, 1, 0, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [4, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 4, 0, 3, 2, 2, 0, 0, 2, 4, 4], [0, 3, 2, 1], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 6, 0, 23, 5, 5, 1, 4, 6, 0, 0, 14, 4, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l saveOrd(in1):{:\\nb1 = in2 not in getCharFromString(in2, mod(len(in0.rstrip((in2[len(in2):mod(i2,i0)][mod(( mod(int(0.0),i2) * int(7.0) ),int(9.0)):max(min(i2, int(5.0)), int(5.0))] + saveChr(i2).capitalize()[:i1]))),int(6.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 3, 0, 1, 2, 3, 1, 0, 1, 1, 3, 1, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 1, 1, 0, 1, 1], [1, 3, 3, 1, 4, 3, 0, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 2, 15, 3, 5, 3, 2, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(( len(in1) * len(in2) ), mod(max(i2, int(0.0)),mod(saveOrd(getCharFromString(in2, int(0.0))),i2))):{:\\ni2 -= int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(9.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [2], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 2, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 0, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 4, 5, 5], [1], [0], [0, 0, 4, 0, 1, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 4, 1, 2, 4, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(10.0) \\l max(mod(len(in2),len(getCharFromString(in1, max(i2, int(2.0))))), ( mod(i0,i2) + int(8.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0], [1], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 0, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 0, 1, 1, 3, 0, 9, 2, 3, 1, 1, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not in1 not in in2:{:\\nres0 = int(7.0) \\l max(mod(len(getCharFromString(in2, len(in0))),( i2 + i0 )), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 1], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 1, 7, 0, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(len(in1), abs(max(len(in2), i1))), mod(i2,i2)) \\l i2:{:\\nres0 = int(26.0) \\g len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4, 2], [1, 1, 1], [0, 0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 2, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 1, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 0, 1, 0, 2, 2, 2, 0], [2], [1, 1, 0, 1], [4, 5, 3, 1, 4, 5, 1, 1, 4], [], [], [0, 0, 0, 0, 4, 2, 2, 4, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 8, 8, 5, 0, 29, 4, 12, 1, 3, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le min(max(int(1.0), int(8.0)), mod(int(8.0),int(7.0))):{:\\nres0 = min(int(6.0), divInt(int(6.0),abs(abs(int(5.0))))) == int(3.0)\\ns1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1, 1, 0, 0, 0], [3, 0, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 1, 1, 1, 1], [1, 4, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 1, 1, 8, 0, 17, 2, 6, 0, 2, 10, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(i0, mod(saveOrd(in1),len(in2))) \\l abs(i0):{:\\nloopBreak% = 0\\nwhile divInt(i2,i2) \\le i1:{:\\nres0 = in0 != in1\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns1 = (s0[i1:max(i1, len(in1))][i0:int(1.0)] + s0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 0, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 1, 2, 2, 0, 1, 1], [1], [3, 3, 2, 3, 0, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 4, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 4, 4], [], [], [0, 0, 0, 0, 4, 4, 3, 0, 2, 0, 0, 0], [2, 3, 2], [4], [1, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 2, 1, 3, 1, 1, 1, 0, 0, 0, 0, 0, 5, 0, 11, 2, 4, 1, 1, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),i2), abs(i1)), ( i2 * i2 )) \\l i0:{:\\nloopBreak% = 0\\nwhile res0:{:\\nb1 = in2 != in0\\nin0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 9, 6, 5, 3, 3, 6, 3], [1, 0, 2, 0, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 1, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 0, 1, 3, 0, 3, 0, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 2, 8, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),min(max(i1, mod(i0,i2)), i0)), int(26.0)), len(in2)) \\l int(7.0):{:\\nres0 = int(9.0) \\le min(len(in1), int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 1, 1, 0, 2], [0], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 0, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 1, 8, 1, 3, 0, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le min(i1, divInt(len(in2),i1))\\ni1 = i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 3, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s0) \\l ( ( len(in2) + divInt(len(in0),( ( i1 + int(4.0) ) + int(7.0) )) ) * int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [1, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nb1 = getCharFromString(in2, mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 1, 3, 1, 3, 1, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 5, 0, 13, 1, 6, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(( len(in1) - abs(max(i1, i0)) ), i2), i1) \\l i1:{:\\nres0 = int(26.0) \\le len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 8, 7, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 3, 3, 1, 3, 1, 3, 3, 1, 2, 1, 3, 3, 1, 3, 0, 0], [0, 0, 1, 1, 1], [1, 1, 3, 2, 1, 2, 3, 4, 1, 0, 2, 2, 2, 2, 3], [2, 1], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 5, 5, 3, 0, 23, 2, 13, 2, 0, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(( len(in1) * abs(max(i0, ( i1 - i1 ))) ), int(1.0)), int(9.0)) \\l abs(len(in2)):{:\\nloopBreak% = 0\\nwhile saveOrd(in0) \\le max(min(int(8.0), abs(int(7.0))), abs(abs(int(6.0)))):{:\\nres0 = s1 != in1.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 2, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i1)):{:\\nres0 = getCharFromString(s2, mod(( max(int(4.0), int(8.0)) + int(9.0) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1], [2, 1, 1, 2, 1, 0, 1, 2, 1, 1, 2, 1], [2, 0, 1, 1, 2], [0, 2, 2, 2, 2, 2, 0], [0], [0, 0], [], [], [3, 2, 0, 2], [0, 4], [1, 1, 0, 2, 0, 2], [0, 0], [4, 5], [0, 0], [], [], [1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [5, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3, 8, 2, 4, 3, 1, 2, 8, 0, 9, 3, 0, 6, 6], [1, 0, 2, 1, 1, 1, 1, 0, 1, 2, 2, 2, 0, 2, 2, 2], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 1, 3, 3, 2, 1, 1, 2, 1, 3, 1, 3, 1, 0, 3, 1, 1, 0, 0, 0, 2, 3, 3, 0, 1, 0, 3, 2, 2, 3, 3, 3, 1, 3, 3, 1, 0, 1, 2, 2, 3, 2, 0, 1, 3, 2, 1, 0, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 0, 2, 1, 0, 1, 1, 0, 2, 4, 2, 3, 1, 3, 0, 0, 0, 2], [1, 1], [1, 1, 0, 1, 0], [4, 5, 4, 5, 4, 3, 4, 1, 0, 1, 3, 4, 4, 1, 0, 4, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1], [0], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0, 2, 1, 2, 2, 1, 4, 2, 2, 2, 0, 0, 1, 1, 0, 0, 0, 4, 1, 4, 2, 2, 2, 4, 0, 1], [2, 3, 2, 0], [4], [2, 2, 1, 1, 0, 2, 1, 2, 0, 1, 0, 0], [3, 2, 1, 0, 3, 3, 2, 2, 0], [14, 16], [16, 25], [4, 2, 6], [21, 20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 4, 0, 26, 4, 10, 1, 3, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(int(56.0), mod(i1,i0)))), i2), int(7.0)) \\l len(in2):{:\\nres0 = int(9.0) \\le min(abs(( int(2.0) - int(6.0) )), divInt(int(5.0),max(int(3.0), min(int(3.0), i1))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 1, 1, 0, 2], [0], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(in0[int(1.0):]) \\le len(in2)\\ni1 = i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 21, 3, 9, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i0,i0)))), i1), ( len(in2) - int(2.0) )) \\l min(len(in1), max(int(6.0), int(7.0))):{:\\nres0 = int(9.0) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 0, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 4, 2, 0, 2, 3, 4, 1, 0], [2, 1, 2], [1, 1, 1, 1, 1], [4, 1, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 1, 5, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( saveOrd(in1) * abs(min(i1, i0)) ), i1), i0) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [4], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 0, 5, 0, 6, 2, 1, 0, 7, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 2, 2, 0, 0, 2, 2, 2, 1, 0, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 2, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 4, 0, 3, 2, 4, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 0, 20, 6, 4, 1, 5, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(abs(mod(mod(i2,i0),( mod(mod(int(0.0),i2),int(0.0)) * int(8.0) ))),len(in1)), max(i1, int(0.0))):{:\\nres0 = in2.startswith(getCharFromString(in2, int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 0, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 1, 2, 2, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 0, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 5, 0, 15, 2, 8, 1, 1, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i2, ( i1 * i2 )))), i2), i0) \\l len(in2):{:\\nb0 = len(in0) \\le saveOrd(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 4, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 4, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 15, 2, 7, 2, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in1) - abs(min(i1, ( i1 - i2 ))) ), i2), int(24.0)) \\l abs(len(getCharFromString(in2, i2)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 0, 15, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), i1), int(26.0)) \\l int(7.0):{:\\nres0 = int(9.0) \\le len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 1, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 3, 3, 8, 0, 19, 2, 6, 1, 1, 9, 0, 0, 11, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(int(1.0),len(in1)), abs(i0)), ( i0 * i2 )) \\l i2:{:\\nloopBreak% = 0\\nwhile i1 \\le max(i1, len(in2)):{:\\nres0 = in0 != in1\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns1 = (s0[i1:int(0.0)][int(8.0):i0] + in1)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [9, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 0, 1, 3, 1, 2, 2, 2, 0, 1, 1, 1, 3, 1, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 3, 2, 2, 3, 3, 4, 3, 0, 2], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 2, 0, 15, 4, 3, 2, 2, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(9.0) \\l max(mod(max(i2, int(0.0)),len(in1)), int(2.0)):{:\\nres0 = in2 not in getCharFromString(in2, ( mod(( i0 + int(8.0) ),int(95.0)) + int(5.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 3, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 3, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [2, 2, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 4, 0, 3, 2, 2, 0, 0], [0, 3, 2], [3], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 12, 12, 4, 0, 23, 5, 6, 1, 4, 6, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(abs(mod(abs(len(in1)),mod(i2,i1))),( mod(max(int(10.0), int(0.0)),int(8.0)) * int(9.0) )) \\l min(saveOrd(in2), i2):{:\\nb1 = getCharFromString(in2, int(3.0)) not in in0.lstrip((in2[int(5.0):int(6.0)][i1:int(2174.0)] + in2))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 3, 2, 0, 2, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 0, 2, 3, 0, 3, 2, 3, 0, 3, 0, 3, 2, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0, 1, 2, 3, 0, 3], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5, 0], [1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 0], [0, 3, 2], [4], [2, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 12, 0, 36, 10, 10, 7, 3, 7, 0, 0, 13, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(getCharFromString(in2, divInt(len((in0 + (s2[min(( i1 + ( i2 + int(4.0) ) ), i2):divInt(int(8.0),i1)][:int(3.0)] + in1))[i2:]),( i1 + int(8.0) )))),min(i1, ( max(i0, abs(( len(in2) * i1 ))) - min(i0, len(s0)) ))) * ( i2 + i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 5], [1, 0, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 0, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 3, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 3], [2], [1, 0, 0, 1], [1, 5, 0, 2, 4, 2, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 2, 1, 3, 1, 1, 1, 0, 0, 0, 1, 1, 4, 0, 15, 3, 7, 1, 2, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(s1),abs(max(i0, ( divInt(i1,i1) * int(1.0) )))), len(in2)), len(s0)) \\l i2:{:\\nloopBreak% = 0\\nwhile res0:{:\\nb1 = s2 != in1.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [2, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 3, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 2, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 2, 0, 16, 3, 6, 2, 1, 5, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(( len(in1) + len(in2) ), max(i2, int(2.0))):{:\\nin2 = in0[( mod(min(i0, int(8.0)),int(9.0)) + int(5.0) ):saveOrd(in2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [5, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 1, 15, 4, 4, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in2),len(in2)), mod(i2,i0)):{:\\ni2 *= mod(( max(int(0.0), int(8.0)) - int(9.0) ),int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [2, 0], [0, 2], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [2], [1], [], [1], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 4, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [2, 5, 5, 3, 5, 5], [], [0], [0, 0, 3, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 3, 3, 0, 0, 6, 1, 3, 0, 1, 5, 0, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(s2),len(in2)), int(0.0)):{:\\nloopBreak% = 0\\nfor in2 in (in0 + in2):{:\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [2, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 14, 5, 4, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) == ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(7.0) ))) + min(int(9.0), int(8.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 312}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1], [4, 0, 9, 8, 7, 7, 1, 2, 8, 6, 5, 3, 1], [0, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 2, 2, 0, 1, 2, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1, 3, 3, 1, 2, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 1, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 2, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 5, 0, 28, 9, 5, 6, 3, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2[int(4.0):len(in0[divInt(( i0 + int(0.0) ),( divInt(int(9.0),( int(8.0) + i0 )) + int(7.0) )):i2])]),( i0 - int(7.0) )) - min(min(int(12.0), ( int(865.0) * i2 )), int(31.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1, 5, 9, 3, 0], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 3, 1, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1], [4, 3, 4, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 4, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 5, 0, 28, 9, 4, 6, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s0) \\le ( mod(len(getCharFromString(in1, ( saveOrd((in0 + (s2[:( ( i0 + int(3.0) ) * int(8.0) )][int(3.0):i2] + in1))[divInt(int(8.0),i2):int(7.0)]) + i1 ))),( i2 * int(7.0) )) - ( divInt(min(int(1.0), int(59.0)),int(3.0)) * int(0.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 2, 9, 9, 8, 6, 5, 3, 3, 6, 3], [2, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 2, 3, 0, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [0, 1, 1, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1, 1], [1, 0, 0, 1], [4, 1, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 15, 3, 6, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in1) - abs(min(i2, mod(i0,i0))) ), int(02.0)), int(9.0)) \\l divInt(len(s1),i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [8, 0, 2, 5, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 1, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(80.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, divInt(( divInt(i1,int(2.0)) - int(5.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [2, 3], [0, 4], [0, 1, 2], [0, 0], [3], [0], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 0, 2, 1, 0, 1, 0, 0, 0, 1, 0], [1, 0, 1, 1, 1, 0, 0], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2, 0, 2], [0, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 2, 1, 3, 1, 1, 1, 0, 0, 1, 4, 4, 5, 0, 19, 6, 4, 2, 4, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif b2:{:\\nloopBreak% = 0\\nwhile max(divInt(( max(divInt(len(in1),divInt(mod(i0,int(1.0)),abs(int(0.0)))), i0) * ( int(8.0) + i2 ) ),int(7.0)), i2) \\l i1:{:\\nres0 = in2 != in0\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 4, 0, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 4, 4, 3], [], [], [0, 1, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 1, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 1, 3, 3, 3, 1, 1, 0, 0, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 4, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 5, 5, 4, 0, 19, 2, 8, 1, 1, 9, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), int(1.0)), int(8.0)) \\l int(8.0):{:\\nloopBreak% = 0\\nwhile len(in2) \\le len(in0):{:\\nres0 = in0 != in1.capitalize()\\nin1 = (s1[saveOrd(in2):int(7.0)][int(1.0):i2] + in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [2, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 1, 3, 8, 7, 7, 1], [0, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 1, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [2, 1, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 3, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 21, 3, 9, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(mod(len(in1),abs(i1)),( i0 - i2 )), i1), max(len(in2), int(2.0))) \\l min(len(in1), max(int(1.0), int(7.0))):{:\\nres0 = int(9.0) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 9, 9, 1, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 3], [1, 0, 0, 0, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 4, 2, 2, 2, 4], [2, 0, 0], [1, 0, 1, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 5, 0, 31, 4, 14, 3, 1, 9, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), i2), int(5.0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(s1):{:\\nin1 = in2.capitalize()\\ns1 = in2[max(int(8.0), int(9.0)):min(( int(9.0) + saveOrd(in1) ), int(1.0))][:( int(6.0) + abs(abs(int(5.0))) )][int(3.0):abs(i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [2, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 0, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 14, 3, 4, 1, 2, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(max(len(in1), ( i1 + i0 )),max(i2, mod(i1,int(7.0)))), int(8.0)):{:\\nin2 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [2], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 5, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 1, 3, 0, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 0, 3, 1, 1, 3, 0, 0], [1, 0, 1, 1, 1], [1, 0, 3, 2, 1, 3, 3, 0, 1, 0, 2, 2, 0, 0], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 2, 4, 4, 2, 4, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 1, 1, 6, 0, 15, 2, 6, 1, 1, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(min(mod(len(in1),abs(max(i0, ( i1 * i1 )))), i2), i1) \\l int(1.0):{:\\nloopBreak% = 0\\nwhile len(in2) \\le i1:{:\\nb2 = in0 != s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [0, 1], [3, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1], [4, 7, 9, 8, 7, 7, 7, 4, 3, 9, 2, 5, 4], [1, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 1, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1, 3, 1], [0, 1, 1, 0, 0, 0, 0, 0], [1, 1, 3, 2, 1, 3, 3, 0, 1, 0, 2, 2, 2, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 5, 3, 3, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = max(( divInt(max(divInt(len(s2),i1), ( i1 + int(4.0) )),int(7.0)) + ( int(9.0) + int(8.0) ) ), int(7.0)) \\ge i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 1, 3, 2, 0, 0, 2, 2, 2, 3, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(int(2.0),len(in1)), ( i2 + i0 )):{:\\nres0 = in2 not in getCharFromString(in2, mod(( divInt(len(in0),int(8.0)) - int(9.0) ),int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [3, 4], [0, 2, 1, 2], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 2, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 5, 0, 19, 5, 4, 2, 3, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(max(len(in1), ( i2 * i0 )),mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0))), max(i1, i1)):{:\\nres0 = in2 not in getCharFromString(in2, int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1], [5, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 5, 4, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\le ( divInt(min(divInt(len(in2),( ( i1 + int(4.0) ) + int(7.0) )), min(int(9.0), int(8.0))),int(7.0)) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 2, 2, 3, 2, 3, 2, 2, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 0, 3, 0, 0], [2, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 7, 3, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( mod(min(divInt(len(in2),( ( divInt(int(3.0),int(8.0)) * int(3.0) ) * i0 )), ( int(8.0) + i2 )),int(7.0)) * i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [0, 1], [0, 4, 4], [2, 2, 1, 2], [0, 0, 0], [1, 4], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 0, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in in2:{:\\nb0 = getCharFromString(in2, int(10.0)).startswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3, 0], [0, 4], [1, 0, 0, 1], [0, 0], [3], [0, 2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 3, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 0, 1, 2, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 2, 4, 1, 2, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 0, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 2, 2, 4, 2, 0, 2, 0, 0, 0, 4, 4, 3, 0, 18, 2, 9, 1, 1, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(in1)), abs(max(i0, mod(( i1 * i1 ),int(8.0))))) \\l len(in2):{:\\nloopBreak% = 0\\nwhile res0:{:\\nb0 = not abs(saveOrd(in0)) \\le max(int(8.0), int(7.0))\\ns1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 0, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 1, 1, 0, 1, 1], [1, 0, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 0, 15, 3, 4, 1, 2, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(i2, min(len(in1), ( i0 * i2 ))):{:\\nres0 = in2 not in getCharFromString(in2, mod(mod(max(int(0.0), int(8.0)),int(9.0)),int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [2], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 1, 1], [2, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 0, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 1, 16, 6, 3, 2, 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(mod(mod(len(in1),mod(len(in2),( divInt(i2,int(10.0)) * int(0.0) ))),int(0.0))) \\l i0:{:\\ni2 -= mod(int(9.0),i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 3, 8, 4, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 2, 2, 2, 0, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 4, 2, 4, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(12.0) \\l max(mod(len(in1),len(in2)), ( mod(( mod(i1,mod(i0,int(3.0))) + int(8.0) ),int(4.0)) - max(i2, i1) )):{:\\nb1 = in2.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 2, 1, 1, 1, 3, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 18, 7, 4, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),divInt(len(in0),( ( divInt(int(4.0),int(7.0)) + int(2.0) ) + min(( int(8.0) + i1 ), int(7.0)) ))) * i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 6, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 0, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 0, 3, 3, 2, 0, 0, 0, 2, 2, 2, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 2, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 3, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 5, 0, 3, 0, 0, 5, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(i1, len(in1)):{:\\nres0 = in2 not in (in2 + in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 4, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 2, 0, 14, 2, 6, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),saveOrd(in2)), max(int(26.0), mod(i1,int(7.0)))), i0) \\l int(9.0):{:\\nres0 = len(in1) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 2, 2, 1, 0, 1, 1], [2, 0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 0, 0, 1, 2, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 4, 1, 2, 6, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nloopBreak% = 0\\nfor in2 in getCharFromString(in0, max(mod(i2,i1), int(7.0))):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [8, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 2, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 0, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 4, 0, 21, 5, 5, 1, 4, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(8.0) \\l max(mod(min(len(in1), max(i2, int(0.0))),mod(divInt(( i2 + mod(int(2.0),int(8.0)) ),min(i2, i1)),int(9.0))), int(5.0)):{:\\nb0 = in2 not in getCharFromString(in2, int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 4, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in1)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l i2:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [3], [1], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 3, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [3, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 4, 2, 1, 1, 1, 0, 0, 5, 5, 5, 0, 18, 5, 4, 2, 3, 5, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(13.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = ( mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0)) \\le max(i1, i1) or in2.rstrip(in0) not in in2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [2, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 1, 2, 3, 3, 0, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 0, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 6, 0, 12, 2, 3, 1, 1, 7, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(int(1.0), mod(min(len(in1), i0),i0)) \\l ( i2 * i2 ):{:\\nloopBreak% = 0\\nwhile i1 \\le i1:{:\\nin2 = in0\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = s1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 1], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 0, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 1, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [1, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 14, 4, 3, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(s1),i2), mod(i0,i2)):{:\\nres0 = mod(( len(in2) * int(0.0) ),int(8.0)) \\le int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1, 0], [1], [3, 0, 2, 3, 1, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 0, 1, 0, 2, 2, 2, 0], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 4, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 1, 1, 6, 0, 12, 2, 3, 1, 1, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(i0, mod(max(int(1.0), len(in1)),i1)) \\l ( i1 * i2 ):{:\\nloopBreak% = 0\\nwhile i1 \\le i1:{:\\nres0 = in2 != in0\\ns1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [2, 2], [0, 2, 2], [], [0, 0], [], [], [3, 3], [0, 4], [1, 0, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 4, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 2, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 4, 0, 1], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 2, 1, 3, 1, 1, 1, 0, 0, 0, 1, 1, 6, 0, 17, 4, 6, 1, 3, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(( len(in1) * abs(i0) ),divInt(i0,divInt(i2,i2))), max(i1, len(in2))), i1) \\l int(1.0):{:\\nloopBreak% = 0\\nwhile res0:{:\\nres0 = in0 != in1\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [0, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 3, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [0, 0, 0, 1, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 11, 3, 4, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2) \\le ( divInt(len(in2),int(4.0)) + abs(min(divInt(i0,int(6.0)), int(9.0))) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [0, 2], [0, 2], [0], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 9, 7, 6, 6, 4, 3, 3, 6, 3, 7, 5], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 1, 3, 3, 0, 3, 3, 3, 0, 1, 0], [1, 0, 1, 0, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 4, 0, 2, 1], [2, 2], [1, 1, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [0], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 1, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 6, 0, 37, 4, 18, 2, 2, 9, 0, 1, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nloopBreak% = 0\\nwhile max(max(mod(len(in0),abs(max(i2, ( int(5.0) * i0 )))), i2), int(8.0)) \\l len(s1):{:\\nres0 = len(in1) \\le saveOrd(in2.capitalize())\\ns1 = in2[max(int(9.0), int(7.0)):min(mod(int(6.0),abs(int(6.0))), ( int(4.0) * abs(abs(int(3.0))) ))][:abs(saveOrd(in1))][i1:min(abs(max(i2, int(3.0))), i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 0, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 3, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 2, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 3, 5, 1, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), max(i0, int(2.0))):{:\\nres0 = getCharFromString(s2, ( min(mod(i0,int(0.0)), int(9.0)) + int(5.0) )) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 0, 0, 8, 9, 5, 6, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 2, 3, 1, 3, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 4, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 5, 5, 5, 0], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 4, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 5, 5, 3, 0, 15, 3, 5, 0, 3, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(20.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nif getCharFromString(in2, i2) not in in2:{:\\nres0 = divInt(saveOrd(in2),int(0.0)) \\le min(int(8.0), int(9.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [0, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 2, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 2, 0, 0], [2, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 15, 3, 8, 1, 2, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = max(max(int(1.0), len(in1)), abs(max(i0, mod(( i1 * divInt(int(8.0),len(in2)) ),len(in0))))) \\l saveOrd(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 2, 2, 1, 1, 1, 0], [1], [3, 0, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2, 1], [1, 0, 0, 1], [4, 5, 3, 3, 1, 5, 1, 0, 4], [], [], [0, 0, 0, 0, 2, 0, 3, 4, 2, 0, 0, 0], [0, 3, 2], [4], [0, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 1, 1, 7, 0, 17, 2, 7, 1, 1, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(i0, mod(max(len(in1), abs(i1)),( i2 * i2 ))) \\l i1:{:\\nloopBreak% = 0\\nwhile i1 \\le max(len(in2), len(in0)):{:\\nres0 = in0 != s1[i1:int(1.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3, 1], [1, 4], [2, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [0, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 0, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 2, 7, 6, 5, 3, 3, 6, 3], [2, 0, 2, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 1, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [3, 1, 3, 2, 0, 3, 0, 4, 1, 0], [1, 0, 2], [1, 1, 0, 1], [2, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 2, 2, 4, 0, 13, 2, 6, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(s2) \\l max(mod(len(in2),abs(min(i2, mod(i0,i2)))), i2):{:\\nres0 = int(22.0) \\le len(s2)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [2, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0, 1], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [0, 2, 1, 1], [2, 2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 0, 0], [1], [3, 3, 2, 3, 1, 3, 0, 2, 0, 0, 2, 0, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 0], [1, 0, 1, 1, 1], [1, 2, 3, 2, 1, 3, 3, 0, 1, 0, 2, 2, 2, 0], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 3, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 4, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 7, 1, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= max(abs(mod(len(in1),int(1.0))), abs(i1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 4, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 2, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 0, 1, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 6, 0, 19, 5, 5, 3, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( ( max(len(in1), abs(i1)) - ( i1 - i2 ) ) * i2 ), int(2.0)) \\l min(mod(i2,mod(int(4.0),i1)), int(7.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 3, 5, 4, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 8, 8, 5, 0, 21, 5, 4, 2, 3, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(max(len(in1), ( i2 + i0 )),mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0))), max(i1, i1)):{:\\nloopBreak% = 0\\nwhile in0 not in getCharFromString(in2, int(5.0)):{:\\nres0 = int(5.0) \\le int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [2, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 0, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 14, 2, 5, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),min(max(i2, mod(i0,i2)), i1)), int(26.0)), int(7.0)) \\l int(9.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 0, 1, 0], [1, 2], [2, 2, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [3, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [0], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0, 4, 4], [], [], [0, 0, 0, 0, 4, 0, 4, 2, 2, 0, 0, 0, 4, 4, 0], [2, 3, 2, 2], [4], [1, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 2, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 1, 0, 0, 6, 0, 15, 2, 7, 1, 1, 12, 0, 0, 15, 4, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in1 != in2:{:\\nloopBreak% = 0\\nwhile max(max(mod(len(in0),abs(max(i0, ( i0 + i2 )))), i2), i1) \\l len(in1):{:\\nin1 = in2.capitalize()\\ns1 = s0[:i1][:len(in1)].rstrip(s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = in1.capitalize().capitalize()\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 0, 0, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [3, 5, 3, 4, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 4, 7, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in0),min(min(i1, mod(i0,i0)), i0)), int(29.0)), len(in2)) \\l ( len(in0) - divInt(int(7.0),int(9.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [2], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 4, 3, 9, 0, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 0, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l max(mod(len(in1),len(in2)), mod(i2,i2)):{:\\nres0 = getCharFromString(in2, divInt(mod(max(int(4.0), int(3.0)),int(9.0)),int(0.0))) == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 5, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1], [4, 3, 5, 3, 5, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 14, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le ( divInt(len(in0),divInt(len(in2),( ( i1 + int(4.0) ) + int(7.0) ))) + mod(int(9.0),int(5.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], "other_info": {}, "test_fitness": 335}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 2, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [0, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 14, 2, 8, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(len(in1), abs(min(abs(i1), ( i1 + i1 )))), ( int(22.0) - len(in2) )) == saveOrd(s0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 321}, {"genotype": [[0], [1, 1, 1, 1], [0, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [4, 0, 6, 8, 3, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 3, 3, 3, 1, 2, 0, 2, 2, 2, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 0, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 2, 0, 16, 4, 4, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(40.0) \\l max(len(in1), min(max(int(6.0), mod(i2,mod(divInt(( i0 + int(8.0) ),int(3.0)),int(5.0)))), int(5.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 406}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [2], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 2, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 3, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 0, 19, 5, 5, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, divInt(( divInt(max(int(2.0), int(2.0)),int(9.0)) - min(i2, i1) ),int(5.0))) == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [2], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [3, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 3, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 3, 0, 17, 4, 6, 1, 3, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(3.0) \\l max(mod(len(in1),len(in2)), max(i2, min(mod(divInt(( i0 + int(0.0) ),int(2.0)),int(8.0)), saveOrd(getCharFromString(in2, i2))))):{:\\nres0 = in0 == in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [0], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 7, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 1, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 0, 1, 1, 3, 3, 0, 0, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 4, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [1, 0, 1], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 6, 0, 22, 5, 5, 1, 4, 6, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( mod(int(0.0),i1) * int(8.0) ),int(9.0))) in in0.rstrip((in2[max(min(i1, i2), int(5.0)):int(5.0)][:i1] + in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 345}, {"genotype": [[0], [0, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 1, 1, 0, 2], [0], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 4, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 33, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in1)\\ni1 = i1\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 351}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 3, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(i0,( ( i2 + int(3.0) ) + int(6.0) ))) + len(in0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 566}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 1, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 2, 2, 3, 2, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 0, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 0, 17, 5, 4, 1, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(s0)), ( i2 + divInt(mod(max(mod(i0,int(2.0)), int(8.0)),int(1.0)),int(5.0)) )):{:\\nres0 = getCharFromString(in2, i2) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 415}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [2, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 8, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 4, 0, 22, 4, 6, 1, 3, 6, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) == max(mod(len(in1),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), int(8.0)) + int(8.0) ),int(5.0))) not in in0[min(saveOrd((in2[:i2][int(5.0):int(6.0)] + in2)), int(2174.0)):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 3, 7, 9, 2, 6, 5, 3, 3, 6, 3], [2, 2, 1, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [0, 3, 1, 2, 1, 3, 3, 4, 1, 0], [0, 1], [0, 1, 0, 1], [3, 5, 3, 0, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 19, 4, 7, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(len(in0), divInt(max(abs(max(i2, ( i2 + i1 ))), i1),int(23.0))) \\l len(in2):{:\\nres0 = ( len(in0) - mod(int(7.0),int(9.0)) ) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 244}, {"genotype": [[0], [1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 0, 0, 0, 2, 2, 3, 1, 1, 1, 0, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 2, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 7, 1, 3, 0, 1, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(s2)), i2):{:\\nres0 = getCharFromString(in2, i0) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 415}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 7, 9, 5, 4, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 3, 0, 2, 2, 1, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [0, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 4, 1, 18, 4, 5, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(in1),len(in2)), ( max(i2, mod(divInt(int(2.0),int(7.0)),int(9.0))) + int(5.0) )):{:\\nres0 = getCharFromString(in2, int(4.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = min(i2, i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 335}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [1, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 0, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(s0)), max(i1, int(2.0))):{:\\nres0 = getCharFromString(in2, ( mod(( i0 - int(8.0) ),int(9.0)) + int(5.0) )) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 411}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [0, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(in1),len(in2)), max(i2, int(2.0))):{:\\nres0 = getCharFromString(in2, ( mod(( i0 + int(8.0) ),int(9.0)) + int(5.0) )) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 335}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 7, 3, 6, 3, 7, 5], [0, 1, 2, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 1, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 0, 2, 0, 0, 0], [2, 3, 2], [4], [1, 0, 0], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 7, 7, 3, 0, 23, 2, 11, 0, 2, 8, 0, 0, 10, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, divInt(int(1.0),i1)))), i2), int(8.0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(s1):{:\\nres0 = in1.capitalize() != in2[:max(int(8.0), int(7.0))]\\ns1 = in2[min(int(6.0), int(6.0)):abs(int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 354}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 9, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 0, 2, 3, 3, 0, 3, 2, 2, 2, 0, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [0, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 7, 1, 3, 0, 1, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(19.0) \\l max(i2, divInt(len(in1),len(in2))):{:\\nres0 = getCharFromString(in2, i0) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 326}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [1], [2], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 3, 0, 1, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1, 1], [1, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [3, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 0, 7, 7, 2, 1, 15, 4, 4, 2, 2, 5, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not s1 not in in2:{:\\nres0 = int(10.0) \\l max(mod(len(in2.rstrip(in0)),len(in2)), ( max(i2, int(4.0)) - divInt(( int(8.0) - int(9.0) ),int(5.0)) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 373}, {"genotype": [[0], [1, 1, 1, 1], [0, 0], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [2, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 0, 1, 3, 1, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 6, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(1.0) == max(mod(i2,int(0.0)), len(in1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 342}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [8, 5, 3, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 4, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 0, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(85.0) \\l max(divInt(saveOrd(in1),len(in2)), mod(i2,i0)):{:\\nres0 = in2.capitalize() not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 325}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [5], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 2, 3, 3, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 4, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 4, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 14, 14, 4, 0, 23, 5, 5, 2, 3, 6, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(11.0) \\l max(mod(len(in1),( len(in1) + max(int(2.0), mod(( divInt(i2,int(8.0)) + int(9.0) ),int(5.0))) )), min(i0, i2)):{:\\nres0 = getCharFromString(in2, int(5.0)).endswith(in0.rstrip((in2[int(6.0):int(2174.0)][i1:int(20.0)] + in2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 383}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 1, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [0, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i2,int(2.0)) - int(1.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 335}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [0], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 1, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 2, 2, 3, 2, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 4, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 14, 14, 3, 0, 21, 5, 4, 2, 3, 6, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(getCharFromString(in2.rstrip(in2), ( i2 + divInt(( max(mod(int(2.0),int(8.0)), int(1.0)) - int(5.0) ),int(5.0)) )))), i0):{:\\nres0 = in0 in (in2[i2:int(6.0)][int(2174.0):int(20.0)] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 383}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 0, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 0, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\l max(mod(len(in1),len(s0)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i0,int(4.0)) - int(8.0) ),int(9.0))) not in in0\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 399}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [2, 1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [2, 2, 1, 2], [0, 0, 0], [1, 1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 9, 0, 8, 6, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5, 4], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 1, 3, 1, 2, 0, 0, 0, 1, 14, 14, 4, 0, 23, 5, 5, 1, 4, 7, 0, 0, 11, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in in2:{:\\nif getCharFromString(in2, int(19.0)) not in in0:{:\\nres0 = max(mod(len(in2),len((in2[mod(i1,i0):mod(( mod(int(0.0),int(8.0)) * int(6.0) ),int(5.0))][max(min(i2, int(5.0)), int(6.0)):int(2174.0)] + in1))), i1) \\l int(20.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], "other_info": {}, "test_fitness": 367}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 0, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(s0)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 399}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 4, 3, 5, 5], [1], [], [0, 2, 2, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 36, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 4, 0, 20, 4, 5, 2, 2, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2[max(i2, int(2.0)):( mod(( i0 + int(8.0) ),int(9.0)) + int(5.0) )][min(i2, i1):int(5.0)])), int(6.0)):{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 343}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 36, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 3, 1, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(( len(in1) * len(in2) ), ( i0 - i0 )):{:\\nres0 = getCharFromString(in2, mod(( max(int(6.0), int(8.0)) + int(9.0) ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], "other_info": {}, "test_fitness": 444}, {"genotype": [[0], [1, 1, 1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [8, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 2, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 2, 3, 2, 1, 3, 0, 1, 1, 0], [1, 1], [0, 0, 0], [4, 3, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 4, 0, 20, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(abs(divInt(len(in1),abs(max(divInt(( i1 - i0 ),i2), int(86.0))))), len(in0)) == i1:{:\\nres0 = min(max(int(7.0), int(9.0)), int(2.0)) \\le int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 9, 7, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [3, 3, 3, 1, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(10.0) \\l len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 537}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [5], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 1, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 1, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 5, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 7, 0, 17, 2, 6, 1, 1, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(int(1.0),max(abs(i0), ( i0 * i2 ))), i2), i1) \\l max(i1, len(in1)):{:\\nloopBreak% = 0\\nwhile i1 \\le int(0.0):{:\\nres0 = in2.endswith(in0)\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 392}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 0, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 2, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [5, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 4, 0, 18, 4, 6, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(in2),abs(mod(i2,i0))), mod(( max(i2, int(6.0)) * int(8.0) ),int(9.0))):{:\\nres0 = in2 not in getCharFromString(in2, min(saveOrd(in0), i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 537}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 9, 1, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 2, 1, 3, 1, 2, 1, 0, 3, 1, 1, 3, 0, 2], [0, 0, 1, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0, 2, 2, 2, 2, 4], [2, 0], [1, 0, 0, 1], [4, 5, 3, 1, 4, 3, 1, 5, 5], [], [], [0, 0, 0, 0, 4, 0, 2, 0, 2, 0, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 8, 8, 5, 0, 29, 4, 12, 2, 2, 8, 0, 0, 10, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(( len(in1) * abs(min(i0, ( i1 + i1 ))) ), i1), int(5.0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(s1):{:\\nres0 = getCharFromString(in1, max(int(8.0), int(9.0))) != in0[min(mod(int(1.0),abs(int(6.0))), divInt(int(6.0),i1)):abs(int(5.0))]\\ns1 = in2[:int(3.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 382}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 3, 3, 3, 1, 0, 0, 3, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 1, 0, 7, 0, 4, 0, 0, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(len(in1), len(in2)):{:\\nres0 = getCharFromString(in2, max(int(2.0), i2)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], "other_info": {}, "test_fitness": 446}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [2, 0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 2, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 0, 18, 4, 6, 1, 3, 6, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(abs(len(in1)),mod(i2,i0)), mod(( max(int(0.0), int(8.0)) * int(9.0) ),int(5.0))):{:\\nloopBreak% = 0\\nfor in2 in in2:{:\\nres0 = getCharFromString(in0, min(saveOrd(in2), i2)) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 482}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [0], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 0, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 1, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 0, 21, 5, 6, 1, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(max(mod(max(len(in1), mod(i2,i0)),( mod(max(int(1.0), int(0.0)),int(0.0)) * int(8.0) )), min(saveOrd(in2), i2)),int(0.0)) \\l int(5.0):{:\\nres0 = getCharFromString(in2, int(5.0)) in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 323}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 1, 3, 3, 1, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [1, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 5, 0, 3, 0, 0, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(int(2.0), len(in1)):{:\\nres0 = in2 not in getCharFromString(in2, len(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 544}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 0, 3, 3, 2, 0, 0, 2, 2, 0, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 0, 3, 0, 0, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(i2, len(in1)):{:\\nres0 = in2 not in getCharFromString(in2, len(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 544}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 3, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 4, 4, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(len(in1), len(in2)):{:\\nres0 = getCharFromString(in2, max(mod(i2,i0), ( mod(( i2 + int(2.0) ),int(8.0)) - int(9.0) ))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 472}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 7, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 2, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 5, 0, 18, 5, 4, 2, 3, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(abs(len(in1)),( i2 * i0 )), mod(( divInt(i2,int(2.0)) - int(8.0) ),int(7.0))):{:\\nres0 = in2 not in getCharFromString(in2, max(i1, i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 544}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 2, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 5, 0, 18, 5, 4, 2, 3, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),abs(( i2 + i0 ))), mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0))):{:\\nres0 = in2 not in getCharFromString(in2, max(i1, i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 544}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 2, 2, 3, 0, 3, 2, 0, 0, 1, 2, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 5, 0, 19, 5, 5, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),( mod(len(in2),i2) - max(( i0 - i2 ), int(78.0)) )), mod(int(9.0),min(i1, i2))):{:\\nres0 = getCharFromString(in2, int(5.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 434}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 1, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 0, 19, 4, 6, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(max(len(in1), mod(i2,i0)),mod(( max(int(0.0), int(0.0)) * int(9.0) ),int(5.0))), min(saveOrd(in2), i2)):{:\\nres0 = getCharFromString(in2, int(5.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 434}, {"genotype": [[0], [1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 1, 3, 3, 0, 0, 0, 2, 2, 3, 1, 1, 1, 0, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 5, 0, 3, 0, 0, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(int(0.0), len(in1)):{:\\nres0 = in2 not in getCharFromString(in2, len(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 544}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [0], [0, 2], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [1], [2], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 2, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [3, 5, 5, 3, 5, 5], [1], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 4, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2:{:\\nres0 = not in2 not in getCharFromString(in0, int(10.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 328}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [2, 2, 2, 1], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2, 1], [0, 0, 0], [1, 4], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0, 0, 2], [0, 1, 0, 0, 0], [1, 3, 2, 3, 2, 2, 0, 0, 1, 2, 2, 0, 1, 0, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0, 0], [1, 0, 0, 1, 1], [4, 5, 5, 3, 5, 5, 3, 3], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 9, 9, 4, 5, 0, 2, 0, 0, 1, 3, 5, 3, 2, 0, 0, 0, 1, 26, 26, 15, 3, 40, 10, 4, 8, 3, 8, 0, 0, 11, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(min(( ( i0 + i0 ) + int(2.0) ), ( divInt(i2,int(8.0)) + i1 )),int(9.0)), len(in1)):{:\\nloopBreak% = 0\\nwhile in2 not in getCharFromString(in2, i1):{:\\nres0 = i1 \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile in0.startswith(in2):{:\\nif int(5.0) \\le int(6.0):{:\\nin2 = (in0[i1:int(2174.0)][divInt(i0,( ( ( int(20.0) + i1 ) + int(65083.0) ) * ( i0 + int(305.0) ) )):int(5.0)] + in0)\\ni2 = max(int(8.0), int(72.0))\\n:}\\ni2 += i0\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 544}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 3, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 1, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [4, 3, 3, 3, 4], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 39, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 2, 0, 8, 2, 2, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(13.0) \\l saveOrd(in1):{:\\nres0 = mod(int(2.0),len(in2)) \\le ( i2 + i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 340}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 2, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 39, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 4, 0, 22, 4, 6, 1, 3, 6, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(getCharFromString(in2, mod(i2,i0))[mod(( max(int(0.0), int(8.0)) * int(9.0) ),int(5.0)):min(saveOrd(in2), i2)])), int(5.0)):{:\\nres0 = in0 not in (in2[:int(6.0)][int(2174.0):i1] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 495}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 2, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 4, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 39, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 8, 8, 5, 0, 21, 5, 4, 3, 2, 6, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\l max(mod(len(in1),len(getCharFromString(in2.rstrip(in2), ( i0 + i2 )))), ( ( mod(i2,int(2.0)) - int(8.0) ) + int(9.0) )):{:\\nres0 = in0 not in (in2[max(i1, i1):int(5.0)][int(5.0):int(6.0)] + in2)\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 495}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 3, 2, 2, 3, 2, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 2, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 39, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 2, 0, 20, 5, 7, 1, 4, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(abs(len(in1)),divInt(i2,max(mod(( min(mod(int(0.0),int(8.0)), int(9.0)) * saveOrd(in2) ),len(getCharFromString(in2, i0))), int(5.0)))), int(5.0)):{:\\nres0 = in0 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 495}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 2, 2, 3, 3, 3, 0, 1, 2, 2, 0, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [2, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 39, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 1, 0, 8, 2, 3, 1, 1, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l mod(( abs(len(in1)) + len(in2) ),i2):{:\\nres0 = getCharFromString(in2, int(2.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], "other_info": {}, "test_fitness": 449}, {"genotype": [[0], [1, 1, 1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 0, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [3, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 7, 1, 3, 1, 0, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(( len(in0) + len(in2) ), i2):{:\\nres0 = getCharFromString(in2, i0) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 478}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 40, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) * divInt(len(in0),( ( i1 + int(2.0) ) + int(7.0) )) ) * divInt(int(9.0),( int(8.0) - i0 )) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 598}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 0, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 4, 4, 2, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(20.0) \\l max(( len(in1) * len(in2) ), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(0.0), int(8.0)) - i2 ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], "other_info": {}, "test_fitness": 439}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 9, 9, 8, 6, 5, 3, 3, 6, 3], [2, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 0, 2, 3, 3, 3, 0, 2, 3, 0, 1, 1, 3, 3, 0, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1], [4, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 40, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(i2, ( min(len(in1), abs(i1)) - ( min(i1, int(22.0)) - int(9.0) ) )) \\l len(in2)\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 551}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 5, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 2, 3, 3, 0, 1, 2, 2, 2, 0, 1, 0, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(( len(in1) + len(in2) ),i2), int(5.0)):{:\\nres0 = getCharFromString(in2, mod(( divInt(i0,int(8.0)) + i2 ),int(9.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 477}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [1, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 0, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 5, 3, 1, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(max(mod(len(in1),i2), mod(i0,i2)),( mod(len(in2),int(10.0)) * int(0.0) )) \\g int(8.0):{:\\nres0 = getCharFromString(in2, int(9.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 424}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [0], [0, 2], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 3, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 4, 0, 19, 5, 5, 3, 2, 4, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(10.0) \\l max(( len(in2) + len(getCharFromString(in0, ( i2 - max(mod(( mod(i0,int(2.0)) + int(8.0) ),int(9.0)), min(i2, i1)) ))) ), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 551}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 9, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 1, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 4, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 2, 0, 13, 4, 3, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),int(0.0)), mod(i2,i0)):{:\\nres0 = in2 not in getCharFromString(in1, mod(( len(in0) * int(8.0) ),int(9.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 551}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 0, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 2, 1, 3, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 0, 1, 0, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 1, 1, 5, 0, 12, 2, 4, 1, 1, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(7.0) \\l max(mod(abs(max(( i2 * i0 ), len(in1))),i2), i1):{:\\nres0 = in2 not in getCharFromString(s0, i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 562}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 2, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1, 0], [4, 5, 5, 3, 5, 5, 0], [], [], [0, 4, 4, 0, 0, 0, 3, 2, 2, 0, 0, 4, 2, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 22, 22, 7, 0, 34, 10, 6, 4, 6, 7, 0, 0, 14, 3, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(in1),len(getCharFromString(in2.rstrip(in2), mod(i2,i0)))), mod(( max(mod(int(4.0),int(8.0)), int(9.0)) * min(saveOrd(in0), i2) ),int(5.0))):{:\\nres0 = (in2[int(5.0):int(6.0)][i1:int(2174.0)] + in2) not in s0[:mod(i2,( ( ( int(20.0) - i1 ) + int(65083.0) ) + divInt(i1,int(305.0)) ))].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 551}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [5, 4, 4], [2, 2, 1, 2], [0, 0], [1, 0], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5, 2, 0], [1], [], [0, 0, 4, 0, 2, 0, 3, 2, 2, 0, 0, 2, 4, 4, 4, 4, 0, 2, 0], [0, 3, 2, 3, 2], [4, 0], [0, 0, 1, 0, 2], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 12, 12, 6, 0, 23, 5, 4, 2, 3, 8, 0, 0, 19, 5, 2, 5, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in in2:{:\\nres0 = getCharFromString(in2, int(10.0)) in in0[max(mod(len((in2[:len(in2)][( i2 + i0 ):mod(( divInt(i2,int(2.0)) - int(8.0) ),int(9.0))] + s2.capitalize().lstrip().capitalize().rstrip(s0[max(i1, i1):])[int(5.0):int(5.0)])),int(6.0)), i0):int(2174.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0], "other_info": {}, "test_fitness": 409}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 8, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 2, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 0, 3, 5, 5], [1], [], [0, 0, 4, 0, 2, 0, 3, 2, 2, 0, 0], [1, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 0, 18, 4, 6, 1, 3, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),abs(mod(i2,i0))), mod(( max(int(8.0), int(8.0)) * int(9.0) ),int(5.0))):{:\\nres0 = in2 not in saveChr(min(saveOrd(s0), i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 551}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 0, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [3, 1, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [0, 1, 0, 1, 1], [4, 5, 4, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 4, 1, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l len(in1):{:\\nres0 = in2 not in getCharFromString(in1, divInt(max(len(in0), max(i2, int(2.0))),( i0 + mod(i2,int(8.0)) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 551}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 3, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 1, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 2, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 5, 0, 3, 0, 0, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(int(0.0), len(in1)):{:\\nres0 = in2 not in getCharFromString(s2, len(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 551}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 1, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 2, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 5, 0, 3, 0, 0, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(int(2.0), len(in1)):{:\\nres0 = in2 not in getCharFromString(s2, len(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 551}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [2, 2, 1, 2], [0, 0], [5], [], [], [], [], [1, 1, 1, 1, 1], [4, 9, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 1, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2.endswith(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [2, 2, 1, 2], [0, 0], [5], [], [], [], [], [1, 1, 1, 1, 1], [8, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 1, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2.endswith(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 2, 3, 0, 4, 1, 0], [2, 2, 2], [1, 1, 0, 1], [4, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 3, 3, 6, 0, 18, 3, 7, 3, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(( len(in1) * abs(abs(i1)) ), ( i1 * i2 )), i1) \\l int(22.0):{:\\nres0 = len(in2) \\le min(i0, ( int(7.0) * i1 ))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [9, 6, 9, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 0, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 0, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 19, 3, 8, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(max(divInt(max(len(in1), abs(i1)),( i0 - i2 )), max(int(96.0), i1)),int(9.0)) \\g len(in2):{:\\nres0 = min(len(in1), int(9.0)) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1, 1, 1], [0, 0, 0, 2, 2, 1, 0, 1, 1], [0], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [2, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 3, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(00.0) \\l abs(mod(len(in1),len(in2)))\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 514}, {"genotype": [[0], [1, 1, 1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 3, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( i1 + len(in0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 571}, {"genotype": [[0], [1, 1, 1, 1], [0, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 1, 1, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 0, 3, 0, 2, 2, 2, 0, 1, 2, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 4, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 17, 5, 4, 2, 3, 3, 0, 0, 5, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(mod(len(in1),len(getCharFromString(in2.rstrip(in2), i2))), max(i0, ( mod(( i2 + int(2.0) ),divInt(int(1.0),int(1.0))) - i2 )))\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 561}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 5, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 2, 0, 3, 2, 2, 0, 1, 3, 1, 2, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 3, 1, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1, 0, 1], [4, 5, 4, 3, 5, 5], [], [], [0, 4, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1, 1], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 19, 19, 8, 0, 34, 10, 6, 4, 6, 6, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(in1),len(getCharFromString(in2, mod(mod(i2,max(( mod(i0,int(4.0)) + min(int(8.0), mod(i2,i1)) ), int(9.0))),int(5.0))))), int(5.0)):{:\\nres0 = (in1 + in0)[i2:int(6.0)] not in in2[:( i1 - ( divInt(( int(2174.0) + i1 ),saveOrd(in2)) + int(20.0) ) )][i0:int(65583.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 559}, {"genotype": [[0], [0, 1, 1, 1], [0, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [3], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 2, 2, 0, 0, 2, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 0, 0], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 14, 5, 2, 2, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(7.0) \\l max(mod(len(in1),( mod(i2,i0) + ( mod(i2,i1) - int(0.0) ) )), i2)\\nin2 = in2\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 572}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [0, 2], [3], [1], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 0, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 3, 1, 0, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 5, 4, 3, 1], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 4, 1, 2, 1, 1, 0, 0, 7, 7, 7, 0, 23, 5, 5, 2, 3, 7, 0, 0, 11, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( in1 in in2 or int(10.0) \\l max(mod(len(getCharFromString(in2, len(in2))),( i2 + i0 )), mod(( divInt(i0,max(int(2.0), i1)) - min(i1, i0) ),int(8.0))) ):{:\\nres0 = in1 == (in0[int(9.0):int(5.0)][i1:int(5.0)] + s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [0, 1, 1, 1], [1, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [0], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 2, 2, 0, 0, 3, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [3, 3, 0, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1], [4, 5, 5, 3, 0, 5], [], [], [0, 0, 4, 0, 0, 3, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(7.0) \\l len(in1)\\nin2 = in2\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 572}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 3, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [1, 0, 0], [4, 5, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 13, 2, 7, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),abs(min(len(in2), ( i1 - i0 )))), i2), int(26.0)) \\l len(in0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 545}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 0, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 0, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 1, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 44, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 4, 0, 19, 4, 6, 1, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),max(mod(i2,i0), mod(( max(int(0.0), int(2.0)) * int(0.0) ),i2))), min(saveOrd(in2), i1)):{:\\nres0 = getCharFromString(in2, int(9.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 463}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 0, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 44, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 0, 3, 0, 0, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(20.0) \\l max(i2, len(in1)):{:\\nres0 = in2 not in getCharFromString(in2, len(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 508}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 2, 8, 3, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 1, 2, 0, 3, 2, 2, 2, 3, 1, 1, 3, 1, 1, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 4, 0, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 4, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 2, 0, 19, 5, 5, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),int(0.0)), ( i2 + saveOrd(in1) )):{:\\nres0 = getCharFromString(in2, mod(( divInt(min(int(2.0), int(8.0)),min(int(3.0), int(5.0))) - i0 ),int(5.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 487}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 1, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 2, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [0, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 14, 3, 4, 1, 2, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(in1),abs(max(i2, int(2.0)))), ( int(8.0) + mod(i0,int(9.0)) )):{:\\nres0 = in2 not in getCharFromString(in2, int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 507}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 1], [2, 1], [0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 4, 0, 21, 3, 8, 1, 2, 6, 0, 0, 10, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in in2:{:\\nres0 = mod(max(mod(max(len(in1), abs(i1)),( i0 - i2 )), i1),int(26.0)) \\l max(int(7.0), len((in2 + in1)[min(len(in0[:int(9.0)][int(2.0):int(6.0)]), int(5.0)):]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 535}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [5], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 0, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 1, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 46, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 4, 0, 10, 2, 3, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(26.0) \\l max(mod(max(len(in1), i1),i0), mod(i2,i1)):{:\\nres0 = in2.endswith(s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 487}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [1, 0], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 0, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 3, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 46, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 8, 0, 18, 1, 7, 0, 1, 10, 0, 0, 13, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(i0, len(in1)), abs(max(i0, mod(i2,i2)))) \\g i1:{:\\nloopBreak% = 0\\nwhile i1 \\l len(in2):{:\\nres0 = in0 != in1\\nin0 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns1 = (s0[i1:len(in1[:i0])][int(1.0):int(0.0)] + s0)\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 555}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 3, 1, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [0, 3, 2, 3, 3, 2, 1, 0, 2, 2, 3, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [3, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 46, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 0, 17, 5, 4, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\l max(mod(len(in0),len(in2)), ( int(10.0) + i0 )):{:\\nres0 = getCharFromString(in2, mod(( max(divInt(int(2.0),int(3.0)), int(1.0)) - int(5.0) ),i2)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 462}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 9, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 46, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(9.0) ))) * int(9.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 597}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 2, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 0, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 2, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 47, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 14, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(abs(i1))), mod(i0,i2)), i1) \\l int(26.0):{:\\nres0 = len(in2) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 339}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [2, 1], [0, 2], [], [0, 0], [], [], [3, 1], [1, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [4, 0, 0, 8, 9, 4, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 47, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 7, 7, 2, 0, 15, 3, 4, 0, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(40.0) \\g max(mod(len(in1),len(in2)), int(0.0)):{:\\nif getCharFromString(in2, i2) not in in0:{:\\nres0 = i0 \\le divInt(mod(max(int(8.0), int(9.0)),int(4.0)),int(5.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 507}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 3, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [1, 0, 0], [4, 5, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 47, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 13, 2, 7, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),abs(min(i1, ( i0 - i2 )))), i2), len(in2)) \\l len(in0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0], "other_info": {}, "test_fitness": 530}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 0, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 0, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 6, 1, 4, 1, 0, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(( len(in1) + len(in2) ), len(in2.capitalize())):{:\\nres0 = in0 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 591}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 0, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 2, 1, 2], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 48, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),i0) * len(in0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 671}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 3, 1, 0, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 2, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 2, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 7, 7, 5, 0, 23, 4, 7, 1, 3, 6, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(1.0) \\l max(mod(abs(len(in1)),mod(i2,i1)), mod(( max(int(0.0), min(int(0.0), i2)) * saveOrd(getCharFromString(in2, len(in2))[i1:int(8.0)]) ),int(9.0))):{:\\nres0 = in0 not in (in2[:int(8.0)][i2:int(5.0)] + in2)\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 571}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [5], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [5, 0, 2, 3, 5, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 3, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 2, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 18, 4, 6, 3, 1, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(5.0) \\l max(mod(len(in1),len(in2)), max(min(int(0.0), ( ( ( i2 + int(2.0) ) + int(3.0) ) + int(5.0) )), saveOrd(in2[i0:i2]))):{:\\nres0 = in0.endswith(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 430}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [5], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [0, 1, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 48, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1.endswith(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 430}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 4, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 49, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in1) \\le ( divInt(len(in2),mod(len(in0),( ( i2 + min(int(4.0), int(4.0)) ) + i2 ))) + divInt(int(9.0),i2) )\\n", "test_case_results": [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 436}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 1, 3, 2, 0, 2, 0, 0, 1, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 4, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 49, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 12, 3, 3, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(int(29.0),len(in1)), mod(i1,( i0 - i0 ))), int(7.0)) \\l int(9.0)\\n", "test_case_results": [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], "other_info": {}, "test_fitness": 492}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [5, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 1, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 2, 0, 13, 3, 4, 1, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) != max(mod(len(in1),len(in2)), max(i0, int(2.0))):{:\\nres0 = getCharFromString(in2, ( mod(int(8.0),i0) + int(9.0) )) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 488}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 2, 9, 9, 8, 6, 5, 3, 3, 6, 3], [1, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 2, 2, 3, 3, 3, 2, 2, 0, 0, 0, 1, 2, 2, 0, 1, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [0, 1, 1, 1, 1, 0], [1, 1, 1, 2, 0, 3, 3, 4, 1, 0], [1, 1, 1], [0, 0, 0, 1], [4, 5, 2, 5, 4, 3], [], [], [0, 1, 0, 2, 2, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 49, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 4, 0, 23, 6, 6, 2, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(max(max(abs(divInt(divInt(i1,i0),i0)), int(22.0)), mod(( i1 - int(9.0) ),min(int(9.0), int(8.0)))),int(6.0)) - int(5.0) ), len(in1)) \\l int(3.0)\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 377}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 2, 2, 0, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 2, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [2, 5, 3, 4, 2, 2, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 49, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 4, 4, 7, 0, 21, 3, 7, 1, 2, 10, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(s2),abs(max(i0, ( i2 * i2 )))), i0), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile i1 \\le len(in0):{:\\nres0 = in1 != s2.capitalize()\\ns2 = (s1[i1:int(1.0)][int(0.0):divInt(int(8.0),int(7.0))] + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = s0\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [1], [2], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 2, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 4, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5, 0], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [3, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 0, 6, 6, 4, 0, 18, 4, 5, 2, 2, 7, 0, 0, 11, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not in1 not in in2:{:\\nres0 = int(10.0) \\l max(mod(len(in2.rstrip(in0)),len(in2)), saveOrd((in2[i2:int(2.0)][( mod(( i0 + int(8.0) ),int(9.0)) + int(2.0) ):min(i2, i1)] + s0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 440}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 4, 9, 9, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 2, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 14, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(abs(mod(len(in1),abs(max(i1, mod(i0,i2))))), i1) \\l int(26.0):{:\\nres0 = len(in2) \\le int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 359}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [3, 4], [2, 1], [0, 0], [0], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [1, 0, 0], [4, 5, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 49, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1 in in2\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 440}, {"genotype": [[0], [1, 1, 0, 1], [0, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 9, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 2, 1, 3, 3, 3, 3, 1, 1, 3, 2, 1, 3, 0, 2, 1, 3, 3, 1, 1, 3, 0, 3, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 4], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 50, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 15, 3, 8, 1, 2, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), divInt(int(5.0),len(in2))), len(in0)) \\l saveOrd(s1)\\n", "test_case_results": [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 381}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [1, 1], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 50, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 19, 2, 9, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, mod(i2,i2)))), i1), int(26.0)) \\g len(in2):{:\\nres0 = int(7.0) \\g min(len(in1), max(int(9.0), int(2.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0], "other_info": {}, "test_fitness": 377}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 3, 5, 4, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 3, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3], [], [], [], [23]], "fitness": 50, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 3, 0, 15, 4, 4, 3, 1, 5, 1, 0, 6, 1, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in0)), ( max(i1, ( i0 * ( i2 - int(2.0) ) )) + int(3.0) )):{:\\nres0 = getCharFromString(in2, int(5.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = \"\">\"\"\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 497}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [4], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 6, 8, 3, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [0, 2, 2, 3, 3, 1, 0, 0, 2, 2, 2, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [0, 5, 5, 5, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 50, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 4, 0, 15, 5, 2, 1, 4, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\l mod(mod(max(len(s0), int(12.0)),i0),i2):{:\\nres0 = in2.startswith(getCharFromString(in2, divInt(( mod(i2,int(6.0)) + int(8.0) ),int(3.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 355}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 0, 1, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 2, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 2, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 50, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 12, 3, 4, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(abs(( len(in1) - abs(( i1 - ( i0 * i1 ) )) )), i2) \\l int(22.0)\\n", "test_case_results": [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 483}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 6, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 0, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 2, 2, 2, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 2, 0, 0, 0, 2, 0], [0, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5, 0, 0, 1, 2], [1], [], [0, 0, 3, 0, 3, 4, 3, 2, 2, 0, 0, 3, 0, 0, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 5, 0, 21, 5, 4, 3, 2, 10, 0, 0, 16, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(( len(in1) + len(in2) ), ( i1 * i0 )):{:\\nres0 = (in2 + (getCharFromString((in0[i2:divInt(( mod(int(2.0),int(6.0)) + int(9.0) ),max(i1, i0))][int(5.0):int(5.0)] + in2), int(6.0)) + (in2 + s0))) not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = s2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 646}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 8, 0, 9, 9, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 0, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 4, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 4, 3, 1, 3, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(saveOrd(in1),i2), divInt(i0,i2)):{:\\nres0 = in2 not in getCharFromString(in2, mod(( len(in0[int(0.0):int(8.0)]) * int(0.0) ),int(9.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 659}, {"genotype": [[0], [1, 1, 0, 1], [0, 2, 1, 0], [0, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1, 2], [0, 0], [1], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 5, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 1, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1 not in in2\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 560}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [1, 2, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 12, 3, 3, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(22.0) \\l ( ( max(max(len(in1), i1), ( i1 - i2 )) - i2 ) * int(7.0) )\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 605}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 0], [1, 2, 2], [0, 0], [3, 0], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 3, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 1, 1, 0, 2, 2, 2, 2, 3], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 0, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 1, 3, 1, 2, 0, 0, 0, 0, 8, 8, 3, 0, 29, 3, 15, 1, 2, 8, 0, 0, 11, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i1 * len(in2) )))), i1), int(1.0)) \\l len(in0):{:\\nloopBreak% = 0\\nwhile s1 != in1.capitalize():{:\\nres0 = in2[max(max(min(int(9.0), int(8.0)), abs(int(7.0))), int(6.0)):abs(int(6.0))][divInt(int(5.0),abs(abs(int(5.0)))):len(s1)] in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 638}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 4, 1, 0, 4, 3, 2, 1], [0, 2, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 5, 0, 19, 5, 4, 2, 3, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(max(saveOrd(in1), ( i0 + i0 )),mod(( divInt(i2,int(0.0)) * int(2.0) ),int(8.0))), max(i1, i1)):{:\\nres0 = in2 not in getCharFromString(in2, int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 659}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 0, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 3, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 0, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 2, 1], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 6, 0, 18, 2, 8, 1, 1, 9, 0, 0, 12, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( len(in2) * i0 )))), i0), i2) \\l len(in0):{:\\nloopBreak% = 0\\nwhile i1 \\le saveOrd(in1):{:\\nres0 = in1.capitalize() != (in2[i1:][int(1.0):int(0.0)] + s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = s0\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 638}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [2, 0, 1, 2], [0, 0, 0], [1], [2], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 3, 1, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 2, 2, 2, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 0, 4, 4, 3, 0, 15, 5, 3, 2, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in in2:{:\\nres0 = not int(1.0) \\l max(mod(len(getCharFromString(in2, len(in0))),( i2 + i0 )), mod(( divInt(i2,int(0.0)) - int(2.0) ),int(3.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 560}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 0], [], [0, 0], [], [], [3, 2], [0, 4, 3], [1, 1, 2, 1], [0, 0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 5, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 3, 1, 1, 0, 0, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 2, 3, 3, 4, 1, 0, 2, 3], [2], [1, 0, 0, 1], [5, 5, 3, 3, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 2, 3, 2, 2, 0, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 2, 3, 4, 3, 1, 0, 0, 0, 0, 8, 8, 5, 0, 28, 3, 12, 1, 2, 8, 0, 0, 13, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in2),abs(abs(i0))), ( i1 * i1 )), int(1.0)) \\l int(8.0):{:\\nloopBreak% = 0\\nwhile len(in2) \\le len(in0):{:\\nres0 = in0 != (in1[:saveOrd(in2)][max(int(5.0), int(7.0)):i2] + s1)[i1:int(6.0)].capitalize()\\nb2 = min(int(6.0), divInt(int(5.0),abs(len(in2)))) \\ge int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 422}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [2, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 1, 2, 3, 3, 3, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1 not in in2\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 560}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [3, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 9, 9, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 2, 2, 0, 2], [1, 1, 0, 0, 0], [1, 3, 2, 3, 0, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 1, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 0, 15, 4, 3, 1, 3, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\ge max(mod(max(i0, mod(i2,i2)),mod(( len(in1) + int(0.0) ),int(1.0))), int(9.0)):{:\\nres0 = in2 not in getCharFromString(in2, int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 659}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 0, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [1, 2, 2, 3, 3, 3, 0, 2, 0, 1, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 12, 3, 3, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(22.0) \\l ( ( max(max(len(in1), i1), ( i0 - int(7.0) )) - i1 ) * int(9.0) )\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 623}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 0, 6, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1, 0], [1], [3, 0, 0, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 0, 2, 3, 3, 2, 1, 3, 0, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 4, 0, 1, 0, 2, 2, 2, 0], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 4, 4, 0, 0, 0], [2, 1, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 52, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 6, 0, 11, 1, 4, 0, 1, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(i0, i1) \\l max(len(in1), abs(i1)):{:\\nloopBreak% = 0\\nwhile mod(i2,i1) \\le i1:{:\\nres0 = in2 != in0\\ns1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 567}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [2, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 3, 2, 1, 0, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 52, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 7, 1, 4, 0, 1, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) == max(mod(len(in1),len(in2)), len(getCharFromString(in2, i2))):{:\\nres0 = in0 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 435}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 2, 2, 0, 0, 0, 1, 1, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 52, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 18, 4, 6, 3, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in1) - abs(min(( ( i1 - i1 ) * i1 ), int(2.0))) ), int(2.0)), abs(i0)) \\l mod(int(7.0),i2)\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 420}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 1, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [2, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 52, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 5, 0, 19, 6, 3, 2, 4, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(int(10.0),( max(len(in1[mod(i2,i0):( divInt(mod(i2,int(2.0)),int(8.0)) + int(9.0) )]), len(getCharFromString(in2, i1))) - i1 )) \\l int(5.0):{:\\nres0 = in2 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 569}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [0, 3, 2, 2, 3, 2, 0, 1, 2, 2, 2, 0, 2, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 52, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 5, 0, 19, 7, 3, 3, 4, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\l max(mod(( len(in1) + ( i0 + int(10.0) ) ),( mod(divInt(i2,mod(int(2.0),int(8.0))),len(in2)) + i1 )), i2):{:\\nres0 = getCharFromString(in2, int(9.0)) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 494}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 2, 0, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 52, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(max(mod(max(abs(min(i1, ( i0 - i2 ))), i1),int(26.0)), max(int(7.0), len(in1))),min(len(in2), int(9.0))) \\l int(2.0):{:\\nres0 = int(6.0) \\ge int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 410}, {"genotype": [[0], [1, 1], [1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 2, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 0, 0, 2, 0, 0, 0, 1, 2, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 1, 3, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 53, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 12, 2, 4, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),max(i1, i0)), mod(i2,i2)), i1) \\l int(26.0)\\n", "test_case_results": [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 504}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 6, 8, 7, 2, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 0, 2, 3, 3, 3, 1, 1, 3, 1, 1, 0, 1, 2, 1, 3, 3, 1, 1, 3, 0, 0], [1, 0, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 0, 1, 0, 2, 2, 2, 0], [2, 2], [1, 0, 0, 1], [4, 5, 3, 1, 3, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 4, 2, 0, 0, 0], [3, 3, 2], [4, 3], [0, 0, 0], [], [], [], [], []], "fitness": 53, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 9, 9, 6, 0, 31, 4, 12, 2, 2, 9, 0, 0, 12, 2, 2, 2, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( int(1.0) * i1 )))), i1), i2) \\l ( len(in2) * len(in0) ):{:\\nloopBreak% = 0\\nwhile min(int(6.0), int(8.0)) \\le max(int(7.0), int(2.0)):{:\\nres0 = s1 != in0.rstrip(in2[i1:int(6.0)].lstrip(s1)[divInt(int(5.0),min(abs(int(3.0)), int(3.0))):abs(i1)])\\nin2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 56, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 0, 19, 5, 6, 1, 4, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(max(mod(len(in1),len(in2)), mod(i2,i0)),( mod(max(int(10.0), int(0.0)),int(8.0)) * int(9.0) )) \\l min(saveOrd(getCharFromString(in2, i2)), int(5.0)):{:\\nres0 = in0 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 544}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 4, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 1, 0, 7, 1, 4, 0, 1, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), saveOrd(getCharFromString(in2, i1))):{:\\nres0 = in0 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 600}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 1], [], [0, 0], [], [], [3], [0, 5], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 1, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 3, 1, 1, 0, 0, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2], [2, 1], [1, 0, 0, 1], [4, 5, 1, 3, 4, 5, 1, 5, 4], [], [], [0, 2, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 6, 6, 6, 1, 21, 2, 8, 2, 1, 7, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(int(1.0),len(in1)), abs(i0)), ( i1 * i1 )) \\l int(8.0):{:\\nloopBreak% = 0\\nwhile int(8.0) != max(len(in2[len(s1):saveOrd(in0.capitalize())]), int(7.0)):{:\\nres0 = (in1[:int(6.0)][i2:i1] + in2) != s1\\ni1 -= int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 657}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [0, 3, 2, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 6, 0, 18, 4, 6, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i1 \\l max(mod(max(len(in1), abs(i1)),( ( i1 - i0 ) - int(22.0) )), min(abs(i2), mod(int(7.0),i1)))\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 4, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [0, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 1, 0, 7, 1, 4, 0, 1, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(s0),len(in2)), saveOrd(getCharFromString(in2, i2))):{:\\nres0 = in0 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 605}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [5, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 6, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 0, 3, 2, 0, 0, 2, 0, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 4, 5, 3, 5, 5], [], [], [0, 0, 4, 4, 0, 0, 3, 2, 2, 0, 0], [1, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 4, 0, 11, 3, 3, 0, 3, 4, 0, 0, 6, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) != max(mod(i2,len(in1)), mod(i0,i2)):{:\\nres0 = in1 not in saveChr(mod(i1,len(in2.rstrip(in0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [3, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [1], [], [0], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 0, 0, 1], [1, 3, 2, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 1, 5, 3, 5, 5], [1], [], [0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 4, 4, 4, 0, 15, 5, 3, 4, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\ge max(( len(in1) + abs(( i2 - i0 )) ), mod(( ( i2 + int(2.0) ) + int(8.0) ),i1)):{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 439}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [5, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [2, 3, 2, 3, 3, 3, 3, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [1, 1, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 1, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 0, 20, 5, 6, 3, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( max(mod(max(len(in1), max(min(int(10.0), mod(( ( i2 + int(2.0) ) + int(8.0) ),int(9.0))), saveOrd(in2))),i0), i2) + int(5.0) ) != int(5.0):{:\\nres0 = in2.capitalize() not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [1, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [5, 0, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 1, 0, 2, 2, 2, 1, 1, 3, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 0, 1], [1, 3, 3, 0, 1, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 3, 0, 20, 4, 5, 2, 2, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(50.0) \\g max(mod(len(in1),len(in2)), int(7.0)):{:\\nres0 = in2 not in s0[int(8.0):i1][( ( mod(int(9.0),int(5.0)) * min(int(5.0), max(i1, i2)) ) - int(6.0) ):int(2174.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 0, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [0, 1, 0, 1], [4, 5, 3, 0, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 19, 5, 6, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = divInt(max(( min(len(in1), abs(i1)) - ( i2 - i0 ) ), i1),int(29.0)) \\l min(mod(len(in2),divInt(int(7.0),int(9.0))), int(2.0))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [5, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 0, 19, 5, 6, 1, 4, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile divInt(max(mod(len(in1),len(in2)), mod(i2,i1)),( mod(max(int(10.0), int(6.0)),int(8.0)) * int(9.0) )) != min(saveOrd(getCharFromString(in2, i2)), int(5.0)):{:\\nres0 = in0 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 608}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [2, 2, 1, 2], [0, 0], [3], [], [], [], [], [1, 1, 1, 1, 1], [1, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 3, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 != in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [0, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2, 1], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 5], [], [], [0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 7, 0, 19, 2, 8, 2, 0, 10, 0, 0, 11, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(( len(in1) * abs(max(i0, ( i0 - len(in2) ))) ), i2), i2) \\l len(in0):{:\\nloopBreak% = 0\\nwhile i1 \\le saveOrd(in1):{:\\nres0 = in1 != in2\\ns1 = s0[i1:int(1.0)][int(0.0):i1].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = in2\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 603}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 2, 9, 9, 8, 6, 5, 3, 3, 6, 3], [2, 0, 0, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 0, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 1, 1, 1], [1, 1, 3, 3, 0, 3, 3, 4, 1, 0], [1, 1, 1], [1, 0, 0, 1], [4, 5, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 59, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 12, 2, 5, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in1) - len(in2) ), min(i2, ( i0 - i0 ))), i1) \\l int(22.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 586}, {"genotype": [[0], [1, 1, 1, 1], [0, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 3, 1, 2, 2, 2, 0, 1, 2, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 1, 1, 0, 1, 1], [1, 3, 0, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [3, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 59, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 3, 0, 20, 5, 6, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(11.0) \\l max(( len(in0) + min(max(min(int(2.0), mod(mod(( i2 + int(8.0) ),divInt(int(9.0),saveOrd(in2))),i0)), i2), int(5.0)) ), int(5.0))\\n", "test_case_results": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 754}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 2, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 4, 3, 4, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 59, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 12, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(abs(mod(len(in1),abs(min(i1, ( i0 - i0 ))))), len(in1)) \\l int(29.0)\\n", "test_case_results": [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], "other_info": {}, "test_fitness": 522}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [2, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 4, 4, 3], [], [], [0, 0, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 59, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 12, 2, 5, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),abs(min(i1, mod(i0,i0)))), i0)) \\l int(29.0)\\n", "test_case_results": [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], "other_info": {}, "test_fitness": 522}, {"genotype": [[0], [1, 1, 0, 1], [0, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [2, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 0, 1, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [4, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 1, 2, 2], [2], [1, 0, 0, 1], [4, 5, 1, 1, 4, 4, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 60, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1 != in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 582}, {"genotype": [[0], [1, 1], [0, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [3], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [6, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 2, 2, 3, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 60, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1 != in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 582}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [2, 0, 0, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 0, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 0, 4, 1, 0], [1, 0, 2], [1, 1, 0, 1], [4, 3, 2, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 60, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 6, 0, 19, 3, 7, 3, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(i2, len(in1)), abs(min(i0, ( ( i0 - i2 ) + int(22.0) )))) \\l len(in0):{:\\nres0 = min(i0, ( int(7.0) * i1 )) \\le int(9.0)\\n:}\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 654}, {"genotype": [[0], [0, 1, 1, 1], [0, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [1, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [1], [], [1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [9, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 2, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 62, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 3, 1, 20, 5, 6, 2, 4, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(9.0) \\g max(divInt(len(in1),len(in2)), mod(i2,mod(( mod(max(int(0.0), int(0.0)),int(8.0)) * int(9.0) ),min(saveOrd(getCharFromString(in2, i0)), int(5.0)))))\\ni2 -= int(5.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 648}, {"genotype": [[0], [1, 1, 1, 1], [0, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [5, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [4, 0, 1, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 2, 2, 3, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 1, 1], [2, 3, 3, 1, 0, 0, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 1, 0, 0, 0, 3, 2, 2, 0, 0], [3, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 63, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 19, 5, 6, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in1)) != mod(len(in2),max(min(i2, ( ( mod(min(divInt(int(40.0),int(1.0)), int(8.0)),i2) + i2 ) + i1 )), int(9.0)))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 662}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [1, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 1, 3, 1, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 2, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 4, 3, 3, 0, 1, 0, 2, 2, 2, 2], [1], [1, 0, 0, 1], [4, 5, 3, 2, 4, 5, 1, 5, 4], [], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 63, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 3, 3, 3, 0, 13, 2, 5, 1, 1, 6, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(int(8.0), max(len(in1), abs(i0))):{:\\nloopBreak% = 0\\nwhile mod(( i1 - i1 ),int(8.0)) \\le saveOrd(in2):{:\\nres0 = in0 != s2\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 704}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 1, 2, 2, 0, 1, 0], [1], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 0, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 63, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 4, 4, 7, 0, 21, 3, 7, 1, 2, 8, 0, 0, 11, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(max(( max(len(in1), abs(i2)) * divInt(i1,i2) ), i2),i0) \\l max(len(in2), len(in0)):{:\\nloopBreak% = 0\\nwhile i1 \\le int(1.0):{:\\nres0 = in0 != in1.capitalize()\\nin2 = (s1[int(0.0):i0][int(8.0):int(7.0)] + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 677}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 1, 1, 3, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 64, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 15, 2, 7, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in1) - abs(max(i1, ( i1 - i1 ))) ), i0), int(22.0)) != max(len(in2), i2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 611}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [3], [], [], [], [0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 3, 2, 3, 3, 2, 1, 0, 2, 3, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 1, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 65, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 1, 16, 3, 6, 1, 3, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i0 \\l max(mod(len(in1),len(s1)), mod(int(002.0),i0)):{:\\nres0 = getCharFromString(in2, mod(max(min(int(8.0), int(9.0)), int(5.0)),int(5.0))) != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += saveOrd(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 679}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 3, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0], [0, 3, 5, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 65, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( saveOrd(in0) + len(in2) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "other_info": {}, "test_fitness": 679}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 2, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 2, 2, 1, 1, 1], [1], [3, 2, 2, 3, 3, 3, 0, 2, 0, 3, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 1, 0, 1], [4, 5, 3, 3, 4, 5, 1, 0, 4], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 67, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 5, 0, 17, 3, 8, 1, 2, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(mod(( max(len(in1), abs(i0)) * mod(i1,max(i2, i2)) ),len(in2)), len(in0)) \\l saveOrd(in0):{:\\nres0 = i1 \\le int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], "other_info": {}, "test_fitness": 657}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 68, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 0, 16, 6, 2, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) != ( mod(len(in2),divInt(i0,( ( i2 + int(3.0) ) * int(8.0) ))) + int(3.0) ):{:\\nres0 = i2 \\le divInt(int(8.0),i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 678}, {"genotype": [[0], [1, 1], [0, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 4, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 68, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(len(in1),abs(max(i1, mod(i0,i2)))), i1), int(26.0)) \\l saveOrd(in2)\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 658}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 3, 0, 0], [0, 0, 0, 1, 1, 2, 0], [0, 0, 0], [0, 5, 5, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 68, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( int(4.0) + saveOrd(in2) )\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 2, 2, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 4, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [0, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 68, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 14, 2, 7, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(s0) - abs(min(i1, ( i2 - i2 ))) ), i0), int(22.0)) \\l abs(saveOrd(in2))\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1, 1], [1, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 5, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 3, 3, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [], [], [0, 0, 4, 0, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 68, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 17, 4, 6, 2, 2, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 + max(min(mod(( i0 - int(7.0) ),int(5.0)), int(9.0)), saveOrd(getCharFromString(in2, i2))) ))\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 671}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 1], [2, 3, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(4.0) \\le ( divInt(saveOrd(s2),divInt(len(in0),( ( i0 + int(6.0) ) - int(9.0) ))) + mod(int(8.0),( int(7.0) * i2 )) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1, 0, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 6, 0, 22, 7, 3, 4, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0[( divInt(len(in2),divInt(len((in0 + (s2[:( ( i1 + i2 ) + int(4.0) )][int(8.0):i2] + in1))[divInt(int(3.0),i1):int(8.0)]),i2)) + ( i1 * int(7.0) ) ):]) \\l int(71.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 1, 1, 0, 2], [0], [0, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i1 \\le int(16.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4, 5], [1, 1, 1], [0, 0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [0, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 1, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 4, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 7, 0, 16, 2, 6, 1, 1, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i0 \\l max(mod(max(len(in1), saveOrd(in2)),i0), ( i2 * i2 )):{:\\nloopBreak% = 0\\nwhile i1 \\le i1:{:\\nres0 = max(int(1.0), len(in0)) != i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = in1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1, 2], [0, 0], [5], [3], [1], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 0, 3, 2, 2, 2, 2, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 1, 0, 1, 1], [0, 5, 3, 2, 4, 5, 0], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 4, 4, 5, 0, 18, 6, 3, 3, 3, 7, 0, 0, 13, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s0) \\l ( i1 * len(in2) ) or getCharFromString((in0 + (s2[divInt(mod(( ( i2 + len(in1) ) + int(4.0) ),int(8.0)),i2):][divInt(int(3.0),i1):] + in2))[int(8.0):], i2).endswith(s0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1, 5], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 0, 1, 1, 2, 1, 2, 1, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0, 1], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 3, 0, 21, 9, 2, 5, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( mod(len(s2),divInt(( ( divInt(i0,int(4.0)) + int(69.0) ) + ( int(8.0) + ( int(7.0) * int(7.0) ) ) ),int(1.0))) - i2 )) \\le mod(i2,int(5.0))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 0, 2, 0, 2], [0, 1], [2, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 3, 0, 0], [0, 0, 0, 1, 1, 2, 0], [1, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 8, 2, 5, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( mod(divInt(saveOrd(s2),( saveOrd(in2) + ( divInt(i0,int(4.0)) + int(6.0) ) )),( int(9.0) + ( int(8.0) - i0 ) )) - int(7.0) ) \\le i2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [1], [], [0, 1], [1, 1, 1, 1, 1], [3, 6, 8, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 1, 0, 12, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s0) \\le ( mod(len(in2),divInt(len(in0),( int(3.0) + i0 ))) * int(6.0) ) or int(8.0) \\le int(8.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 2, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 2, 1, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 14, 4, 3, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = mod(max(mod(max(( int(2.0) - i1 ), divInt(i0,i2)),i2), int(6.0)),len(in1)) \\l int(7.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 0, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 0, 2, 0, 4, 1, 0], [1, 1, 2], [1, 1, 1, 1, 1], [4, 5, 0, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 6, 0, 18, 3, 7, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(in1) - abs(min(i1, ( i0 - i1 ))) ), i0), int(22.0)) \\g abs(min(i2, ( int(7.0) * i1 )))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 0, 0, 1], [0, 0], [], [3, 3, 1], [1, 1], [0], [0, 1], [1, 1, 1, 1, 1, 0, 1], [3, 5, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 0, 0, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 5, 2, 0, 3, 2, 1, 0, 7, 7, 9, 0, 26, 7, 4, 4, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s0) \\le ( mod(len(getCharFromString(in2, divInt(len((in0 + (s2[:( ( i0 + int(3.0) ) * int(5.0) )][int(3.0):i2] + in1))[divInt(int(8.0),i2):int(7.0)]),i1))),( i2 + int(71.0) )) * min(i1, i1) ) or ( True or i0 \\le i1 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1, 0, 1], [4, 3, 3, 8, 7, 7, 1], [2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 0, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [0, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [3, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 4, 1, 17, 5, 3, 4, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( mod(len(in0),divInt(min(( i2 + int(4.0) ), int(3.0)),int(3.0))) + int(8.0) ), i1) \\le ( int(7.0) + i2 )\\ni1 *= int(71.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 7, 9, 7, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + min(int(0.0), divInt(int(7.0),int(9.0))) ) + int(7.0) ))) + i0 )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [4, 7, 9, 8, 7, 7, 1, 8, 8, 2, 2, 6], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 4, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 2, 0, 17, 6, 3, 3, 3, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(getCharFromString(in2, divInt(len(in0[( ( i1 + int(4.0) ) + int(7.0) ):divInt(int(9.0),int(8.0))]),int(7.0)))),i0) + int(7188226.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 3, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 14, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(4.0) \\le ( divInt(saveOrd(s2),divInt(len(in2),( ( i1 + int(7.0) ) + int(9.0) ))) + divInt(int(8.0),len(in0)) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 0], [2], [2, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 1, 1, 0, 2], [0], [1, 0, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2[int(16.0):]\\nres0 = i1 \\le saveOrd(s1)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 2, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 0, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 18, 8, 3, 6, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(s0),( ( i0 + int(4.0) ) + int(6.0) ))) + ( int(9.0) * ( int(8.0) - ( int(7.0) * i2 ) ) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 2, 2, 3, 2, 3, 2, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [0, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 12, 4, 2, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(4.0) \\l ( mod(min(divInt(len(s0),( int(8.0) + i1 )), int(3.0)),int(8.0)) + int(7.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 1, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) != int(3.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 1], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [4, 6, 3, 7, 6, 3, 6], [0, 1, 1, 0, 2], [1], [3, 1, 2, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 1, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 7, 2, 2, 1, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(46.0):]) != divInt(i0,( len(s1) * i1 ))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [0, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 4, 3, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( mod(len(in0),divInt(len(in2),divInt(i0,int(3.0)))) + int(8.0) ), int(3.0)) \\le int(8.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 6, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 2, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s2) \\le ( divInt(len(in2),divInt(len(in0),i0)) + ( ( int(4.0) + int(6.0) ) + divInt(int(9.0),( int(6.0) * i2 )) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [5, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 1, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 71, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 2, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) != divInt(divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(7.0) ))),mod(int(9.0),divInt(int(8.0),i0)))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 688}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 5, 9, 2, 6, 5, 3, 3, 6, 3], [1, 1, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 1, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 4, 2, 1, 3, 0, 2, 1, 0], [1, 1], [0, 1, 0, 1], [4, 5, 4, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 71, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 11, 1, 4, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(26.0) \\l max(int(5.0), max(saveOrd(in1), abs(i1))):{:\\nres0 = divInt(i1,i2) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 2, 2, 1, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 72, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 16, 3, 8, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(abs(abs(max(i1, ( i2 - i2 )))),i2), ( len(in1) - i2 )), len(in2)) \\l saveOrd(in0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "other_info": {}, "test_fitness": 675}, {"genotype": [[0], [0, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [3, 6, 3, 7, 6, 3, 6], [1, 0, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 84, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(36.0):]) \\ge len(in2)\\ni1 *= i0\\n", "test_case_results": [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "other_info": {}, "test_fitness": 761}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [1, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [4, 7, 9, 8, 7, 7, 1, 7, 1, 5, 3, 8, 9, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 2, 2, 1, 0, 1, 0, 2, 0, 1, 3, 1, 0, 1, 3, 3, 2, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [4, 3, 3, 0, 0, 3], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 2, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 85, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 5, 0, 30, 10, 6, 5, 5, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\g ( mod(len(in2),divInt(len(in0[( ( i1 + int(4.0) ) + int(7.0) ):divInt(( ( int(9.0) + i0 ) * int(8.0) ),i2)][mod(i1,int(7.0)):min(int(71.0), i2)]),int(71.0))) - min(len(s2), divInt(int(5389.0),int(1.0))) )\\n", "test_case_results": [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "other_info": {}, "test_fitness": 698}, {"genotype": [[0], [0, 1], [0, 0], [1], [1, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 1, 1, 0, 2], [0], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 86, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(in0[int(16.0):])\\nres0 = len(in2) \\le i1\\n", "test_case_results": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 788}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 1, 5, 4, 3], [], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 88, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 5, 0, 15, 2, 7, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, ( i2 - i2 )))), i2), int(26.0)) \\g len(in2):{:\\nres0 = i2 \\le len(s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], "other_info": {}, "test_fitness": 718}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [2, 1, 2, 0, 2, 2, 0, 2, 1, 2, 2, 1, 2, 0, 2, 1, 0, 2, 0, 2, 0, 0], [1, 2, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 1, 2, 1, 0, 0, 0, 0, 2, 2], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 2, 3, 2, 2, 1], [4, 4, 3], [1, 1, 0, 0, 2, 2, 0, 2, 2, 2, 1], [0, 0, 0], [3, 0, 3, 2, 2], [0, 0, 2], [], [], [1, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3, 4, 8, 5, 1, 7, 6, 2, 7, 9, 8, 9, 5, 4, 3, 3, 8, 7, 1, 4, 5, 8, 2, 2, 8, 9, 3, 2, 9, 8, 8, 7, 8, 3, 9], [2, 0, 2, 2, 0, 0, 1, 0, 1, 0, 2, 2, 0, 1, 2, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 2, 0, 1, 2, 2], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 2, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1, 1, 3, 1, 3, 0, 3, 3, 1, 2, 2, 1, 2, 2, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 2, 0, 2, 1, 3, 1, 2, 0, 3, 3, 3, 2, 2, 3, 0, 3, 0, 1, 1, 2, 2, 3, 2, 2, 0, 3, 0, 0, 1, 1, 1, 0, 2, 1, 2, 2, 1, 1, 3, 3, 3, 1, 1, 2, 2, 2, 2, 1, 1, 3, 3, 2, 1, 0, 0, 3, 2, 1, 0, 3, 0, 1, 3, 3, 3, 2, 0, 0, 3, 1, 3, 3, 2, 3, 2, 2, 0, 1, 1, 2, 2, 1, 2, 3, 0, 1, 3, 2, 1, 2, 3, 0, 0, 1, 3, 1, 3, 0, 0, 0, 3], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 3, 2, 0, 3, 0, 4, 1, 0, 1, 3, 2, 3, 0, 1, 0, 1, 1, 3, 4, 3, 2, 3, 2, 4, 0, 4, 4, 4, 3, 1, 4, 0, 0, 2, 2, 2, 2, 3, 4, 1, 3, 3], [1, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 2, 0, 0, 2, 2, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [4, 5, 2, 5, 4, 3, 5, 1, 4, 3, 2, 0, 4, 4, 3, 5, 5, 4, 5, 3, 4, 1, 4, 0, 0, 5, 1, 5, 5, 2, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0, 4, 1, 2, 1, 4, 0, 0, 2, 2, 2, 0, 2, 0, 4, 1, 4, 1, 0, 2, 2, 1, 1, 0, 0, 2, 4, 1, 2, 4, 4, 1, 4, 2, 1, 0, 2, 1, 2, 2, 1, 2, 1, 0, 1, 1, 1, 0, 1, 1, 2, 0, 4, 1, 2, 0, 1, 2, 4, 1, 0, 2, 2, 1, 4, 4, 0, 1, 0, 4, 0], [0, 3, 2, 0, 3, 3, 0, 0, 2, 3, 3, 0, 2, 3], [4, 5, 0, 1, 5, 1], [2, 0, 1, 0, 0, 0, 1, 2, 1, 1, 1, 0, 1, 2, 1, 0, 1, 2, 0, 2, 0], [0, 2, 1, 0, 0, 3, 3, 0, 3, 0, 3, 3, 0, 0, 3, 0, 2, 3, 2, 0, 0, 2], [23, 9, 16, 18, 20, 6, 8, 11, 3, 15], [4], [6, 2, 3, 3], [6, 7, 1, 4, 0, 20, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 22, 22, 11, 11, 6, 7, 0, 0, 7, 3, 11, 3, 5, 3, 0, 0, 4, 45, 45, 38, 2, 162, 39, 44, 19, 22, 32, 22, 6, 81, 14, 6, 21, 22, 10, 1, 4, 7], "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(( len(in1) - abs(min(i2, ( i0 + i2 ))) ), i2), int(22.0)) \\le len(in2):{:\\nres0 = min(i0, ( int(7.0) - i0 )) \\le mod(int(9.0),i1)\\n:}else:{:\\nloopBreak% = 0\\nwhile b2:{:\\ns2 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in (in0 + (in2 + getCharFromString(s1, saveOrd(\"\"X\"\".rstrip(\"\"6\"\"[:int(7.0)])))[max(int(6.0), i0):min(int(5.0), int(3.0))]))[int(3.0):]:{:\\nloopBreak% = 0\\nfor in1 in in0.capitalize():{:\\ni1 += max(int(63.0), len(s2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in in1[i0:abs(len(in1[:int(4.0)]))][mod(divInt(int(8.0),( mod(mod(i2,i2),min(int(5.0), int(1.0))) + int(7.0) )),int(6.0)):divInt(divInt(i0,i1),int(2.0))][divInt(i2,int(7.0)):i1]:{:\\nin0 = getCharFromString(\"\"e\"\", max(int(9.0), ( i1 + divInt(int(8.0),min(int(9.0), divInt(i1,max(max(len(\"\"J\"\".strip(in2)), divInt(divInt(saveOrd(\"\"Q\"\"[:i2][len(\"\"#\"\"):]),i0),int(5.0))), int(4.0))))) )))\\nif b2:{:\\nif in2 != in1:{:\\ni1 -= ( ( abs(( divInt(i1,len(\"\"$\"\".lstrip()[:i1])) + i1 )) * int(3.0) ) - int(3.0) )\\n:}\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in getCharFromString(getCharFromString(\"\"S\"\", int(8.0)), i1)[:( int(7.0) + ( divInt(int(1.0),int(4.0)) * abs(saveOrd(\"\"\\\\\\n\"\"[min(int(5.0), int(8.0)):mod(( ( ( int(2.0) + int(2.0) ) + saveOrd(in0) ) * saveOrd(\"\"U\"\"[:( int(8.0) * i0 )]) ),i0)].capitalize())) ) )]:{:\\nres0 = \"\"!\"\"[:saveOrd(\"\"\"\"[( int(9.0) - i0 ):len(in1)])][i1:] in \"\"G\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif not \"\"I\"\" != \"\";\"\":{:\\nb2 = s1 == \"\"L\"\"\\nb2 = \"\"2\"\" == in1[:int(3.0)]\\n:}else:{:\\nloopBreak% = 0\\nfor s0 in \"\"`\"\".rstrip():{:\\nb1 = max(saveOrd(s0[min(( i1 + i1 ), min(int(2.0), abs(abs(mod(abs(mod(divInt(i1,int(9.0)),int(8.0))),divInt(( int(8.0) - mod(abs(i0),int(7.0)) ),len(\"\"3\"\"))))))):]), mod(int(8.0),mod(saveOrd(\"\"D\"\".strip(in2)[i2:i0]),int(3.0)))) \\ge max(int(9.0), len(\"\"P\"\"[i1:i2][i2:]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s1 in getCharFromString(in2.capitalize(), len(\"\"3\"\")):{:\\nin2 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in1.rstrip()\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 3, 5, 3, 5, 0], [0, 0, 1], [], [0, 0, 4, 0, 1, 0, 2, 2, 2, 0, 1], [0, 3, 2], [4], [0, 0, 1], [2, 0, 1], [13], [7], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 4, 4, 0, 4, 3, 3, 0, 5, 1, 0, 0, 3, 1, 1, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in0)), mod(i0,i0)):{:\\nres0 = getCharFromString(in2, max(mod(mod(i2,int(7.0)),int(8.0)), int(9.0))) not in \"\"2Nh\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2, 2, 1], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2, 1, 0], [0, 0], [1, 5], [3, 0], [0], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 2, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 3, 2, 3, 1, 2, 0, 0, 3, 1, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 0, 5, 0, 5, 2, 2, 4, 3], [1, 1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0, 3, 2, 4, 0, 0, 1, 3, 2, 3, 4, 0, 2, 2, 1, 0], [2, 3, 2], [4], [0, 0, 1, 1, 2, 1], [3, 1], [], [4], [], [10]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 0, 2, 0, 0, 2, 2, 6, 2, 2, 2, 1, 0, 1, 7, 7, 10, 2, 22, 3, 4, 3, 2, 12, 2, 0, 26, 3, 1, 6, 2, 0, 1, 0, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( in1 not in in2 and i2 \\l max(mod(len(in2.capitalize()),int(7.0)), ( i1 + i2 )) ):{:\\nres0 = in0.endswith(s0)\\nin2 = (s0[len(in2):int(2.0)][i1:i2] + (s2.rstrip(s2)[:int(7.0)] + \"\"\"\\\\\"\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i0 \\le int(8.0):{:\\nif b1:{:\\ni1 -= len(((in1.capitalize() + \"\"e\"\"[:i0][mod(int(9.0),int(8.0)):])[:int(5.0)] + in0))\\n:}\\ni1 += i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 3, 1, 9, 9, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [5, 5, 5, 1, 5, 5], [0, 1], [], [0, 0, 4, 0, 1, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [1, 3], [], [11], [], [27]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 3, 2, 0, 5, 1, 0, 0, 2, 0, 1, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l max(divInt(len(in2),len(in2)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(3.0), int(1.0)) + int(9.0) ),int(9.0))) not in \"\"l\\\\\\\\\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 3, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 3, 2, 0, 1, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 5, 5, 5], [0, 0, 1], [], [0, 0, 1, 0, 2, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [1, 0, 0], [16, 9], [20], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 2, 0, 20, 5, 6, 1, 4, 4, 3, 0, 6, 0, 0, 1, 3, 2, 1, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(max(mod(len(in1),len(in2)), mod(i2,int(1.0))),( mod(max(int(5.0), int(3.0)),int(8.0)) * int(9.0) )) \\l min(saveOrd(\"\"uQJ\"\"), i0):{:\\nres0 = in2 not in in2[int(5.0):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 3, 8, 2, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 1, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 3, 0, 2, 0, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [4, 1, 5, 3, 5, 5], [1], [], [0, 0, 4, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [1], [], [12], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 15, 4, 4, 2, 2, 5, 1, 0, 6, 1, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(12.0) \\l max(divInt(len(in1),len(s1)), ( max(i1, mod(i0,( i1 + int(3.0) ))) - int(8.0) )):{:\\nres0 = getCharFromString(\"\"m\"\", int(2.0)) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in2\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 0, 1, 2, 0], [1, 0, 0], [3, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [0], [6], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 5, 2, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"G\"\") \\le ( mod(len(in0),( len(in2) - ( ( i0 + int(4.0) ) + int(6.0) ) )) + divInt(int(9.0),( int(8.0) - i2 )) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [1], [0, 4], [1, 2, 2], [0, 0], [3, 5], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [1, 0, 2, 1, 1, 2, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 2, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0, 0], [0, 1, 1], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 3, 4, 0, 1, 4, 2, 4, 1], [2, 3, 2, 1], [4], [0, 0, 1], [0, 0, 3], [23, 17], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 1, 3, 1, 2, 0, 0, 0, 1, 5, 5, 7, 0, 23, 4, 7, 1, 3, 11, 3, 0, 20, 4, 1, 3, 3, 2, 0, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),( abs(i1) * divInt(i0,i2) )), i1), i1) \\l max(i2, len(in2)):{:\\nloopBreak% = 0\\nwhile in0 != in1:{:\\nb1 = in1.capitalize().endswith((in2[i1:int(1.0)][int(1.0):divInt(int(8.0),int(7.0))] + s1))\\ns0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = (s0.rstrip(\"\"XR\"\") + saveChr(len(\"\")\"\"))[:int(6.0)].capitalize())\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [1, 1, 1, 2, 2, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 1, 1, 1, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 0, 1, 0, 0, 2, 2, 1], [2], [1, 1, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [1], [], [1, 0, 4, 0, 4, 0, 4, 4, 2, 0, 0, 0], [2, 3, 2, 0], [4], [0, 0, 0], [3], [], [], [], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 9, 9, 5, 0, 29, 3, 12, 1, 2, 7, 1, 0, 12, 4, 1, 1, 1, 0, 0, 0, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(\"\"%\"\"),abs(max(i1, ( i1 * i1 )))), i2), i2) \\l len(in1):{:\\nloopBreak% = 0\\nwhile len(in2.capitalize()) \\le min(max(int(1.0), int(8.0)), min(int(8.0), int(7.0))):{:\\nres0 = in0.rstrip(getCharFromString(s1[min(int(6.0), mod(int(6.0),abs(int(5.0)))):int(3.0)], int(3.0)).capitalize()) != in1\\nin2 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [5, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 0, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 1, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3], [], [], [], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 1, 0, 8, 1, 4, 1, 0, 3, 1, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) != max(( len(in1) + len(in2) ), max(i2, int(2.0))):{:\\nres0 = \"\"]\"\" not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [1, 2], [3], [0], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [4, 0, 7, 9, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 0, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1, 1, 0, 1], [], [0, 4, 4, 4, 0, 0, 3, 2, 2, 0, 0, 4, 3, 1, 0, 1, 1], [0, 3, 2, 3], [4, 0], [0, 0, 1], [0, 0, 0, 3], [7, 19, 21], [], [], [27]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 4, 1, 2, 1, 1, 0, 1, 8, 8, 5, 0, 21, 4, 5, 2, 2, 6, 4, 0, 17, 4, 2, 2, 4, 3, 0, 0, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( in1 not in getCharFromString(in2.capitalize().rstrip(in2), int(40.0)) and max(mod(len((in0[len(in2):max(i2, int(7.0))][( mod(( i0 + int(9.0) ),i2) + int(9.0) ):min(i1, i2)] + (\"\"H\"\" + in2).lstrip())),int(5.0)), int(5.0)) \\l int(6.0) ):{:\\nres0 = \"\"T\"\" == \"\"V\\\\\\\\\"\"\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 2, 2, 3, 0, 3, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 0, 5, 3], [1], [], [0, 1, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [2], [], [], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 5, 0, 21, 5, 5, 3, 2, 7, 1, 0, 11, 1, 0, 2, 1, 0, 0, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),( ( len(\"\"4\"\") + i2 ) - len(getCharFromString(in2, ( i0 + i2 ))) )), int(0.0)):{:\\nres0 = in2 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = (in2[i1:int(7.0)][min(i2, mod(int(8.0),int(9.0))):int(8.0)] + in0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 1, 1], [2, 1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 4, 0, 8, 9, 5, 6, 4, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 3, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 0, 5, 5, 0], [0, 0, 0, 1], [], [0, 0, 4, 0, 0, 0, 3, 2, 0, 1, 0], [0, 3, 2], [4], [0, 0, 1], [2, 3, 2, 3], [], [], [6, 8], [1, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 4, 0, 19, 4, 7, 1, 3, 6, 4, 0, 10, 1, 0, 1, 4, 0, 0, 2, 2], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\l max(mod(len(in1),len(in2)), mod(i0,i2)):{:\\nres0 = getCharFromString(in2, divInt(( max(int(24.0), min(int(0.0), int(8.0))) * saveOrd(s0) ),len(in2))) not in (in2[i1:int(9.0)] + \"\"6\\\\\\n8\"\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5, 3, 9], [0, 0, 2, 2, 1, 1, 1, 0, 0, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 1, 3, 0, 1, 1, 3, 0, 1, 2, 2, 3, 3, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2, 1, 4, 3], [2], [0, 0, 0, 1], [4, 5, 5, 3, 5, 5, 1, 1, 2, 1, 1, 0, 5, 2], [0, 1, 1, 1], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 4, 1, 2, 3, 2, 3, 2, 1, 2, 3, 4, 2, 2, 0, 0, 4, 0, 0, 0, 4, 1], [2, 3, 2, 1, 3], [4, 2], [0, 0, 1, 0, 0, 0, 0, 0], [3, 1, 2, 2], [], [17], [0, 4], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 15, 15, 10, 0, 42, 5, 14, 1, 4, 14, 4, 0, 32, 5, 2, 8, 4, 0, 1, 2, 1], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(divInt(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile i1 \\le len(in2):{:\\nres0 = in0 != in2.capitalize()\\nin2 = (s1[i1:int(1.0)][int(0.0):i0] + s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns2 = \"\">r\"\".rstrip(((\"\"0\"\"[int(8.0):int(7.0)] + (s1[saveOrd(s1):int(6.0)][divInt(int(6.0),len(saveChr(min(int(5.0), int(3.0))))):int(3.0)].capitalize() + s0)[abs(i0):int(63.0)])[int(75.0):max(i0, int(3.0))] + in2)[:divInt(mod(saveOrd(s2),len(\"\"4\"\".strip())),int(9.0))])\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 1, 1, 0, 2], [0], [3, 2, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [0, 0, 0, 1, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1, 1, 3, 3, 2], [5], [5, 23], [1], [4, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 1, 9, 2, 3, 1, 1, 2, 5, 0, 7, 1, 0, 1, 5, 0, 2, 1, 2], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[divInt(len(in2),i1):]) \\le ( len(getCharFromString((\"\"fx!/\"\" + \"\"1\"\"), i1)) * i1 )\\ni0 = int(16.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3, 1, 0, 7, 8, 1, 7, 3, 5, 2, 8, 0, 5, 0], [1, 0, 0, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 1, 3, 3, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1, 0, 2, 2, 2, 0, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0], [4, 4, 4, 2, 0, 3, 3, 4, 1, 0, 0], [1, 1, 1], [1, 1, 0, 1], [0, 5, 3, 0, 4, 3, 2, 2], [0, 1, 1], [], [0, 2, 0, 2, 3, 1, 3, 2, 2, 0, 0, 2, 0, 0, 4, 1, 2, 2, 2, 0], [0, 3, 2], [4], [1, 0, 1, 0, 0, 0, 0, 0], [2, 1, 2], [], [18], [5, 9], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 24, 24, 8, 0, 40, 7, 11, 3, 4, 8, 3, 0, 20, 1, 0, 8, 3, 0, 1, 2, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l saveOrd(in2[:mod(saveOrd((\"\"5s\"\" + (in0[int(2.0):abs(min(mod(i1,i0), i0))][:int(9.0)] + s0))[len(in1[( len(in0) - divInt(int(7.0),int(9.0)) ):int(2.0)]):saveOrd(getCharFromString(\"\"9\"\", int(6.0)))]),max(int(5.0), min(int(3.0), i2)))])\\ns2 = s2[min(int(3631.0), int(07.0)):i2][mod(( ( i1 - int(81735.0) ) - int(280.0) ),i1):int(5.0)][i0:int(0.0)]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [0], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 7, 9, 7, 6, 5, 3, 3, 6, 3], [1, 0, 2, 2, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 0, 3, 0, 4, 1, 0], [1, 0, 2], [1, 1, 0, 1], [4, 5, 2, 5, 4, 3], [1], [], [1, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [3], [], [], [], [24]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 4, 4, 7, 0, 21, 3, 7, 2, 1, 5, 1, 0, 11, 1, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(\"\"?\"\"),abs(min(i1, ( i0 - i2 )))), i2), int(2.0)) \\l len(in1):{:\\nres0 = in2 in (s2 + (in2 + getCharFromString(in1, min(i1, ( int(2.0) + i1 )))[int(7.0):int(9.0)]))[i1:]\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 0, 1], [2, 2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 2, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 2, 1, 2, 1, 3, 0], [1, 0, 1, 1, 1, 0], [4, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 3], [2, 1], [1, 0, 0, 1], [3, 5, 3, 1, 4, 5, 1, 5, 4], [1, 1], [], [0, 0, 0, 2, 4, 0, 2, 2, 2, 0, 0, 0, 4, 1, 2, 1], [2, 3, 2], [4], [2, 0, 0, 0, 1], [0, 3], [19], [], [], [7]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 13, 13, 5, 0, 37, 6, 15, 2, 4, 9, 2, 0, 16, 2, 1, 5, 2, 1, 0, 0, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in0) \\l max(int(1.0), len(in2)):{:\\nloopBreak% = 0\\nwhile abs(max(i0, mod(( i1 * i1 ),int(8.0)))) \\le len(in0):{:\\ns1 = in1.capitalize()[len(in2[saveOrd(s1):max(int(8.0), int(7.0))][min(int(6.0), divInt(abs(int(6.0)),divInt(int(5.0),abs(abs(int(3.0)))))):int(3.0)][abs(i2):mod(int(63.0),( int(75.0) - len(in2) ))]):]\\nin1 = \"\"T\"\".rstrip(\"\"$\"\"[:i1])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 2, 1, 2, 0, 0, 2, 1, 0, 1], [1, 2, 2, 0], [0, 2, 2, 1, 2, 2], [0], [0, 0, 0], [], [], [3], [0, 4], [1, 1, 2, 2], [0, 0], [3, 4], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 2, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 1, 0, 0, 0, 2, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2, 0], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0, 1, 0, 5, 0, 5, 0, 5, 4, 0, 5], [0, 0, 1], [0], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 0, 4, 0, 0, 3, 1, 0, 3, 0, 0, 4, 4, 0], [2, 3, 2, 0], [4], [0, 0, 1], [0, 2, 3], [16], [], [5], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 4, 6, 1, 3, 0, 0, 1, 2, 4, 2, 2, 0, 0, 0, 1, 5, 5, 8, 1, 21, 2, 7, 2, 1, 20, 3, 1, 25, 4, 1, 2, 3, 1, 0, 1, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, int(1.0)))), i0), i2) \\l i2:{:\\nloopBreak% = 0\\nwhile ( len(in2) * i2 ) \\le len(in0):{:\\nres0 = in1 != in1.capitalize()\\nloopBreak% = 0\\nwhile (in2[i1:int(0.0)][int(8.0):i1] + s1).startswith(s0):{:\\nin1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns1 = s0.rstrip(in2)\\nloopBreak% = 0\\nfor s0 in (\"\"Q5>\"\" + in2):{:\\ni0 += int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = (in2 + in1)\\ns0 = getCharFromString(in2, int(6.0)).capitalize()\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [4, 0], [1, 1, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 2, 2, 1, 1, 1], [1], [3, 1, 2, 3, 3, 3, 0, 2, 3, 3, 0, 0, 3, 3, 3, 3, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 0], [1, 0, 1, 1, 1], [1, 1, 0, 2, 1, 3, 3, 4, 3, 0, 2, 0, 3], [2], [1, 1, 0, 1], [4, 5, 3, 3, 4, 5, 0, 0, 4, 5], [1, 1, 0, 0, 1], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 4, 3, 2, 4, 3, 1, 4, 0, 1, 3, 4, 1], [2, 3, 2, 2, 1], [4], [0, 0, 1], [2, 3, 1, 0, 3], [16], [18], [7], [23, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 9, 9, 5, 0, 30, 3, 13, 1, 2, 10, 5, 0, 24, 5, 1, 3, 5, 1, 1, 1, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(int(1.0), mod(max(min(abs(i0), ( max(len(in1), i1) * i2 )), len(in2)),saveOrd(in0))) \\le len(in0):{:\\nloopBreak% = 0\\nwhile min(int(0.0), int(8.0)) \\l i2:{:\\nres0 = in1.capitalize() != (in2[int(7.0):int(6.0)][abs(int(6.0)):mod(int(5.0),min(len(s0), int(3.0)))] + s0)\\nin1 = ((\"\"7\"\" + in2.capitalize()).capitalize()[:int(3.0)] + \"\">\"\").rstrip((saveChr(i1) + \"\"sQ%\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2, 2], [0, 0], [3, 0], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 0, 3, 2, 0, 1, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 5, 3, 0, 2], [0, 1], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 2, 2, 2, 1, 0], [2, 3, 2], [4], [0, 0, 1, 1, 0], [3, 2], [], [], [2], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 1, 3, 1, 2, 0, 0, 0, 1, 5, 5, 7, 0, 21, 2, 7, 1, 1, 11, 2, 0, 17, 1, 0, 5, 2, 0, 0, 1, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(i0)), max(( i0 * int(1.0) ), i2)), i2) \\l len(in2):{:\\nloopBreak% = 0\\nwhile in0 != in1:{:\\nres0 = in1.capitalize() in (in2[i1:len(s1)][i1:int(0.0)] + in2)\\nin0 = \"\"\\\\\\n2\"\"[int(8.0):i1][:int(7.0)][:int(6.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = s2\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0, 2, 2, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 2, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 2, 3, 1, 0, 2, 3, 3, 3, 2, 0, 3, 2, 0, 2, 1, 3, 0], [1, 0, 1, 1, 1, 1, 0, 1, 0], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2, 2, 2, 4, 3, 2], [2, 2, 0], [1, 0, 0, 1, 1, 0], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0, 4, 0, 2, 0, 0, 4], [0, 1, 1, 1], [], [0, 2, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 2, 0, 1, 2, 3, 3, 3, 0, 4, 2, 0, 0, 0, 1, 4, 0, 2, 3, 1, 0], [2, 3, 2], [4], [0, 0, 1, 0, 0, 1, 1], [2, 3, 3, 0], [15], [], [6], [25, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 11, 11, 11, 0, 46, 9, 16, 3, 6, 16, 4, 0, 32, 3, 1, 7, 4, 1, 0, 1, 2], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * divInt(i2,i2) )))), len(in2[i1:len(in0)])), i1) \\l int(1.0):{:\\nloopBreak% = 0\\nwhile int(0.0) \\le i1:{:\\nres0 = in1.capitalize() != (in1[:int(8.0)][int(7.0):saveOrd(in2)] + s1)\\ns0 = in1[int(6.0):divInt(int(6.0),len(\"\"6@\"\"))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = (((in1 + s0[:min(int(5.0), int(3.0))].rstrip(s2)) + s0) + \"\"?\"\")[mod(abs(int(3.0)),i0):mod(abs(abs(saveOrd(s0.capitalize()))),( i2 * len((\"\"P\"\" + in1)[:divInt(i2,( int(63.0) + abs(i1) ))]) ))]\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 2, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 3, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [1, 1, 3, 2, 0, 4, 3, 4, 1, 0], [1, 1], [0, 1, 0, 1], [4, 5, 3, 0, 4, 3], [1], [], [0, 1, 0, 2, 3, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [0], [16], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(divInt(len(in1),abs(min(i1, ( i2 - i0 )))), i1), int(29.0)) \\l saveOrd(\"\"Q\"\")\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [1, 0, 1, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 1, 1, 1, 1], [1, 4, 3, 2, 1, 3, 2, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 2, 5, 1, 0, 4, 0, 0], [1], [], [0, 4, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 4, 0, 4, 4, 4, 4, 2, 1, 0], [2, 3, 2, 2, 0, 3, 0], [4, 2], [0, 0, 1], [3], [], [], [], [16]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 5, 5, 7, 0, 23, 3, 8, 0, 3, 11, 1, 0, 21, 7, 2, 3, 1, 0, 0, 0, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(saveOrd(in1), mod(len(in2.capitalize()),abs(max(i1, divInt(i0,i1))))) \\l i2:{:\\nloopBreak% = 0\\nwhile divInt(len(in0),i1) \\le abs(i1):{:\\nres0 = in1.rstrip((s2[int(1.0):int(0.0)][i1:int(8.0)] + in2)) != s1\\ns0 = in1.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = getCharFromString(getCharFromString(\"\"-\"\"[:int(7.0)], saveOrd(s0)).strip(), int(6.0)).capitalize()\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [5, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 2, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 0, 0, 1, 1], [4, 5, 5, 5, 5, 5], [1], [], [1, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [0], [8], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 5, 3, 2, 3, 3, 1, 0, 5, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) != max(mod(( len(\"\"I\"\") + len(in1) ),i2), int(2.0)):{:\\nres0 = getCharFromString(in2, divInt(( divInt(i0,int(8.0)) + int(9.0) ),int(5.0))) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 1], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3], [], [], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(\"\"&\"\"),( ( i2 + int(4.0) ) + int(7.0) ))) + divInt(int(9.0),( int(8.0) * i0 )) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 1, 2, 3, 3, 2, 0, 0, 3, 0, 2, 3, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 2, 4, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [0, 0, 1, 1, 1], [4, 5, 5, 5, 5, 5], [1], [], [0, 0, 1, 0, 4, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [0], [23], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 4, 1, 10, 2, 3, 2, 1, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l int(7.0):{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += divInt(max(len(\"\"X\"\"), ( i0 - i2 )),abs(i2))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 0, 3, 0, 3, 0, 3, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 1, 1, 1, 1], [1, 3, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [0, 0, 0, 0, 1], [], [0, 1, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [0, 0, 3, 1, 2], [6, 1], [14], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 7, 1, 18, 2, 8, 1, 2, 9, 5, 0, 13, 1, 0, 2, 5, 2, 1, 1, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(len(in1), mod(len(\"\"GB;o4\"\"),abs(max(i0, divInt(int(1.0),i0))))) \\l i2:{:\\nloopBreak% = 0\\nwhile i2 \\le len(in2):{:\\nres0 = in0 != in1.capitalize()\\ni1 *= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = (in2[len(s1):i1][saveOrd(s0):int(0.0)] + in1)\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [4, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [1], [3, 1, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [1, 0, 1, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [3, 2, 1, 3], [5], [5], [9], [2, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 10, 1, 5, 1, 1, 4, 4, 0, 13, 2, 0, 2, 4, 0, 1, 1, 2], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(46.0):]) \\le len(in2)\\ni1 *= len(getCharFromString((\"\"\\\\\\t\"\" + \"\"9f\"\"), divInt(len(getCharFromString(s1, i2)[i1:int(3.0)]),saveOrd((in1 + \"\"]\"\")))))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [1], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 3, 7, 6, 3, 6], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [2, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [3, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [1, 0, 1, 0, 1], [], [2, 0, 3, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 0], [0, 0, 0], [], [2, 0], [1, 3, 3, 2, 1], [5], [5, 2], [0], [26, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 11, 2, 3, 1, 1, 5, 5, 0, 14, 2, 0, 2, 5, 0, 2, 1, 2], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = divInt(int(12.0),len(in0[i1:])) \\le ( len((getCharFromString((\"\"f\"\" + \"\"[@\"\"), i0) + getCharFromString(in2, i2)[int(3.0):len((s1 + \"\"0c\"\"))])) * int(7.0) )\\nin1 = in1\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 4, 6, 6, 5, 3, 4, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [0, 3, 1, 3, 3, 3, 0, 2, 2, 1, 3, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 3, 2, 0, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 4, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 2, 5, 1, 5, 4], [0, 1], [], [0, 4, 0, 0, 4, 0, 4, 4, 1, 0, 0, 0], [2, 3, 2, 3], [4, 1], [2, 0, 0], [3, 2], [], [], [1], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 3, 3, 2, 0, 15, 2, 8, 1, 1, 8, 2, 0, 12, 4, 2, 0, 2, 0, 0, 1, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i0 \\l max(int(1.0), max(saveOrd(in1), abs(i1))):{:\\nloopBreak% = 0\\nwhile mod(( int(8.0) * max(int(8.0), len(in2.capitalize())) ),len(in0)) \\le saveOrd(s1.rstrip(\"\">1\"\".rstrip().capitalize())):{:\\nres0 = s2 != in2\\ns1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 0, 2, 0, 1, 1, 3, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [0, 1, 0, 1, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [1], [], [1, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3], [], [], [], [19]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 4, 3, 1, 3, 3, 1, 0, 5, 1, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(\"\":\"\"),len(in1)), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, divInt(i2,( i1 + int(2.0) ))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1], [4, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5, 4, 0], [1], [], [0, 0, 4, 2, 0, 0, 3, 2, 2, 0, 0, 3, 0, 2, 3, 1, 0], [3, 3, 2], [4], [0, 0, 1, 1], [2], [], [], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 0, 20, 5, 4, 3, 2, 8, 1, 0, 17, 1, 1, 4, 1, 0, 0, 1, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l saveOrd(in1):{:\\nres0 = in2 not in in2[mod(len(in0),len((in2[:( i2 + i0 )][mod(( ( i2 - int(2.0) ) + int(8.0) ),int(9.0)):max(i1, i1)] + in2))):int(5.0)].rstrip((in1 + (\"\"0\"\" + s0)[:int(5.0)]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1, 0], [1, 2], [2, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 3, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 0, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 1, 5, 4, 4, 5, 1, 1, 4, 0], [1], [], [0, 0, 0, 1, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [2], [], [], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 0, 0, 6, 0, 15, 2, 7, 1, 1, 6, 1, 0, 6, 1, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i0), i1) \\l len(s1):{:\\nloopBreak% = 0\\nwhile i1 \\le len(in2):{:\\nin1 = \"\"7\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = in2.capitalize()\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [1], [0, 1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 1, 1, 0, 2], [0, 1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [0, 0, 0, 1, 0, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [2, 2, 3, 0, 2, 0], [5, 13], [5], [1, 7, 3], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 2, 8, 1, 3, 1, 1, 2, 6, 0, 7, 1, 0, 1, 6, 2, 0, 3, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\ni1 = i1\\ni1 += divInt(len(getCharFromString((\"\"17.F\"\" + \"\"3N\"\"), i0)),i2)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [2, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 3, 2, 3, 2, 2, 0, 0, 3, 2, 0, 0, 0, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [5, 5, 5, 3, 3, 5], [0, 1, 1], [], [2, 0, 4, 0, 0, 1, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [0, 0, 1], [2, 1, 1], [], [20, 25], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 8, 0, 20, 5, 4, 3, 2, 6, 3, 0, 12, 1, 0, 3, 3, 0, 2, 1, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\l max(mod(len(in2[( ( i2 + i2 ) - len(getCharFromString(in2, ( i1 + i2 ))) ):i0]),i1), int(7.0)):{:\\nb2 = in2 not in \"\"4u\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = (in0[:len(in2)][i0:mod(int(0.0),int(7.0))] + \"\"z\"\")\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4, 4], [0, 0, 1, 2, 2], [0, 0, 0], [1, 5], [3, 2], [0], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 3, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1, 0, 1, 0], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1, 0], [4, 5, 5, 3, 5, 5, 0, 4], [0, 0, 0, 0, 0, 1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0, 0, 2, 2, 1], [0, 3, 2], [4], [0, 0, 1, 2], [3, 3, 0, 3, 1, 0], [9, 12], [15], [], [24, 22, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 5, 1, 2, 2, 1, 0, 0, 19, 19, 7, 0, 34, 9, 8, 3, 6, 8, 6, 0, 15, 1, 0, 4, 6, 2, 1, 0, 3], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( not max(len(in1), divInt(len(in2),max(mod(i2,i0), mod(( min(int(10.0), int(0.0)) * int(8.0) ),saveOrd(getCharFromString(in2, len(in0))))))) \\l abs(i2) and in2 not in (in2[int(9.0):int(5.0)][int(5.0):i1] + s0) ):{:\\nb1 = in1.endswith(\"\"?=JpM\"\"[int(6.0):][:mod(i2,mod(( divInt(int(2174.0),i1) - int(20.0) ),( i1 + int(65083.0) )))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 2, 1, 0], [1], [3, 3, 2, 3, 3, 3, 2, 2, 0, 0, 0, 0, 3, 2, 3, 3, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 0, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [0, 0, 1], [0], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 2, 0, 1], [2, 3, 2], [4], [0, 0, 1], [3, 3, 3], [], [], [], [6, 3, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 11, 11, 5, 0, 31, 5, 11, 1, 4, 10, 3, 1, 13, 1, 0, 3, 3, 0, 0, 0, 3], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(( divInt(i0,i0) * i2 ), i2))), len(in2)), divInt(min(saveOrd(in0), int(1.0)),int(0.0))) \\l i1:{:\\nloopBreak% = 0\\nfor in1 in in1:{:\\nres0 = int(8.0) \\le int(7.0)\\nin2 = s1.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = (in1[len(s0[:int(6.0)]):mod(int(6.0),min(abs(int(5.0)), int(3.0)))][int(3.0):int(63.0)] + \"\"#=\"\")\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3, 3], [0, 4], [1, 1, 0], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 2, 0], [1], [3, 3, 2, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 2, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [1], [], [1, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [1, 0, 1], [3], [], [], [], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 2, 2, 3, 2, 0, 1, 0, 0, 1, 1, 1, 7, 0, 16, 2, 6, 1, 1, 4, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(abs(abs(int(1.0))),i0), ( i0 * i2 )), i2) \\l i1:{:\\nloopBreak% = 0\\nwhile max(i1, len(\"\"\"\"\")) \\le i2:{:\\nres0 = res0\\nin1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin0 = in1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 0], [0, 2], [0], [0, 0], [], [], [3], [0, 4], [1, 2, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 2, 2, 1, 1, 1], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 3, 1, 0, 3, 3, 2, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 3, 1, 3, 3, 4, 3, 0, 2], [2], [1, 1, 0, 1], [4, 5, 3, 3, 4, 5, 3, 0, 4], [1, 0, 0, 0, 0, 0, 1, 1], [0], [0, 0, 0, 4, 4, 0, 3, 1, 2, 2, 0, 0, 4, 0, 1, 1], [2, 3, 2], [4], [0, 0, 1], [1, 0, 3, 3, 0, 0, 2, 3], [2, 6, 11], [6], [3], [1, 23, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 4, 0, 18, 3, 7, 1, 2, 9, 8, 1, 16, 3, 1, 2, 8, 3, 1, 1, 3], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(int(1.0), mod(max(len(in1), len(in2)),i0)) \\l ( i1 * max(int(0.0), i2) ):{:\\nloopBreak% = 0\\nfor in0 in in0:{:\\nres0 = in1.rstrip((\"\"g\"\" + in2[len(in0):len(s0.capitalize())][mod(i2,int(8.0)):int(7.0)])).capitalize() != \"\"C\\\\\\n>GL3\"\"\\nin1 = \"\"/\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [2, 2], [], [0, 0], [], [], [3, 1], [3, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 0, 1, 1], [2, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [2], [], [], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 1, 1, 3, 1, 0, 4, 1, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\ge abs(mod(len(in1),len(in2))):{:\\nin2 = getCharFromString(\"\"0\"\", ( i2 + i0 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 1], [2, 2, 1, 1, 2, 2, 1, 0], [1, 2, 2, 2], [1, 2, 2, 0], [], [0, 0], [], [], [2, 1], [0, 4, 5], [1, 1, 2, 0, 1], [0, 0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 1, 2, 1, 3, 3, 4, 3, 0, 2], [2, 1], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0, 0], [1], [], [0, 0, 0, 0, 4, 2, 3, 2, 2, 0, 0, 0, 1, 4, 0, 4, 0], [2, 3, 2], [4], [0, 0, 1], [3], [], [], [], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 4, 4, 0, 1, 0, 0, 2, 3, 5, 3, 1, 1, 0, 0, 1, 8, 8, 9, 1, 29, 3, 10, 2, 2, 11, 1, 0, 17, 3, 1, 3, 1, 0, 0, 0, 1], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(max(abs(max(i0, ( i0 * i2 ))), i2),i1), len(in1)), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile i1 \\le int(1.0):{:\\ni0 -= int(0.0)\\nin0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile in1 != (in2[:i1][int(8.0):int(7.0)] + s1)[saveOrd(s0):int(6.0)].capitalize():{:\\nloopBreak% = 0\\nwhile b2:{:\\nin1 = \"\"\\\\\\n\"\"\\nb1 = divInt(int(6.0),len(s0.rstrip(s0.capitalize()))) != min(int(5.0), int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 0, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 4, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [0, 1], [], [1, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [3, 3, 2], [4], [0, 0, 1], [3, 0], [7], [], [], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 0, 2, 4, 2, 0, 6, 1, 1, 0, 2, 1, 0, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(\"\".H\"\"),len(in1)), mod(i2,i0)):{:\\nres0 = in2.rstrip(in2) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 2, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 1, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5, 5, 5], [1, 0, 0, 1, 1, 1], [], [0, 4, 4, 0, 2, 0, 3, 2, 2, 0, 0, 0, 3, 3, 1, 0, 1, 3, 0, 3, 4, 4, 1, 1], [0, 3, 2, 0], [4], [0, 0, 1], [0, 0, 0, 0, 3, 1], [1, 23, 19, 9], [19], [], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 7, 0, 21, 3, 7, 0, 3, 8, 6, 0, 24, 4, 1, 3, 6, 4, 1, 0, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(len(in1), mod(len(getCharFromString(in2.rstrip(in2[max(min(i2, mod(divInt(i0,i2),i1)), saveOrd((in0[:i2][len(in2):i0] + in2))):int(10.0)]), int(2.0))),i1)) \\l int(8.0):{:\\nres0 = ((\"\"B\"\" + in2) + \"\"XTJ\"\") not in (in2 + (getCharFromString(\"\"\"\"\", int(9.0)).capitalize() + \"\"t\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 4, 6, 3, 7, 5], [0, 0, 1, 2, 1, 1], [1], [3, 3, 0, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 3, 3, 0, 3, 3], [1, 0, 1, 1, 1], [1, 1, 3, 0, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 0, 4, 3], [2], [1, 0, 0, 1], [4, 3, 3, 1, 4, 5, 1, 5, 4], [0, 1], [], [0, 0, 0, 0, 1, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [3, 3], [], [], [], [12, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 8, 8, 5, 0, 33, 3, 17, 1, 2, 9, 2, 0, 12, 0, 0, 3, 2, 0, 0, 0, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(i0, len(in1)), min(max(i0, mod(( i1 * i2 ),int(1.0))), len(in0))) \\l len(in0):{:\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le max(int(8.0), int(8.0)):{:\\nres0 = \"\")`\"\" != in1\\nin2 = s1[min(int(7.0), int(6.0)):abs(int(6.0))][divInt(int(5.0),abs(abs(int(3.0)))):abs(min(i1, saveOrd(in2)))][len(in1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 8, 8, 4, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 0, 3, 2, 3, 0, 2, 0, 2, 0, 0, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 4, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 0, 0, 1, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3], [], [], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 5, 0, 13, 4, 3, 2, 2, 5, 1, 0, 6, 1, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(12.0) \\l max(mod(i1,len(in1)), ( saveOrd(in2) + i0 )):{:\\nres0 = getCharFromString(in2, mod(i2,( i1 - i2 ))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = \"\"&\"\"\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1], [2, 2, 0, 2, 0, 0, 1], [1, 1, 0], [0, 2, 2, 1], [0], [0, 0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 1, 3, 1, 1, 1, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [0, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2, 2, 1], [1, 0, 0, 1], [4, 5, 3, 4, 3, 5, 1, 0, 4, 0], [0, 1], [0], [0, 0, 0, 0, 4, 2, 3, 2, 2, 0, 0, 0, 1], [1, 3, 2], [4], [1, 0, 1], [3, 1], [], [22], [], [4]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 1, 3, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 2, 6, 6, 7, 1, 21, 2, 7, 3, 0, 10, 2, 1, 13, 1, 0, 3, 2, 0, 1, 0, 1], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(( len(in1) * abs(max(i0, ( i0 * i2 ))) ), i2), i1) \\l len(in2):{:\\nif i1 \\le int(1.0):{:\\nres0 = in0 != in1\\nloopBreak% = 0\\nfor in0 in saveChr(len((in2[:int(0.0)][int(8.0):int(7.0)] + s1)[:int(6.0)])):{:\\ns0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\ns0 = \"\"!w\"\"\\ni1 -= int(6.0)\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [2, 1, 2, 2, 0, 2, 2, 2, 0, 0, 2, 2, 0, 1, 2, 2, 0, 1, 2, 2, 1, 0, 0, 0, 2, 2, 0, 1, 2, 1, 2, 2, 0, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 0, 0], [1, 1, 1, 1, 2, 2, 2, 0, 1, 1, 0, 0, 2, 2, 2, 1, 1, 2, 2, 0, 0, 2, 2, 1], [0, 1, 1, 0, 1, 2, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 1, 2, 2, 2], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [3, 1, 3, 1, 1, 0, 0, 0, 1, 2, 3, 0, 3, 1], [4, 4, 3, 0, 5, 5, 1, 2, 3, 4, 5, 2, 2, 1, 0, 4, 2, 1, 5], [1, 1, 2, 0, 0, 0, 0, 2, 1, 1, 1, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 2, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 2, 1, 1, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 0, 0, 2, 3], [0, 0, 2, 3, 1, 2, 2, 2, 0, 1, 1], [0], [1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6, 1, 0, 8, 5, 5, 8, 1, 8, 8, 2, 3, 1, 0, 0, 3, 2, 1, 1, 4, 2, 2, 0, 1, 1, 1, 1, 0, 2, 1, 4, 5, 1, 0, 9, 6, 1, 6, 4, 6, 3, 5, 2, 7, 5, 2, 1, 9, 3, 9, 2, 4, 9, 5, 2, 1, 2, 5, 8, 3, 3, 3, 7, 4, 5, 3, 2, 8, 5, 8, 3, 3, 3, 9, 7, 1, 1, 8, 4, 4, 4, 4, 2, 9, 1, 8, 7, 9, 8, 8, 9, 2, 0, 6, 6, 3, 5, 1, 6, 1, 7, 4, 1, 4, 6, 4, 5, 1, 7, 3, 4, 1, 9, 8, 2, 0, 1, 1, 8, 2, 8, 8, 6, 8, 1, 1, 1, 5, 1, 3, 6, 9, 5, 7, 4, 5, 2, 8, 3, 7, 6, 3, 7, 7, 7, 2, 3, 9, 8, 4, 3, 5, 8, 8, 1, 1, 4, 0, 5], [1, 2, 1, 0, 2, 1, 2, 0, 1, 0, 2, 0, 2, 2, 0, 1, 2, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 2, 1, 1, 0, 0, 2, 0, 1, 2, 0, 2, 1, 2, 0, 1, 2, 0, 2, 1, 2, 0, 2, 0, 2, 2, 0, 2, 1, 2, 0, 1, 2, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 1, 2, 0, 2, 0, 1, 2, 2, 2, 1, 2, 1, 0, 2, 0, 1, 0, 0, 1, 2, 0, 2, 1, 2, 0, 1, 0, 0, 1, 1, 2, 2, 0, 0, 2, 2, 2, 1, 0, 2, 1, 2, 2, 1, 2, 0, 0, 1, 0, 2, 1, 0, 1, 2, 1, 2, 0, 1, 2, 2, 2, 0, 0, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 1, 0, 0, 2, 2, 0, 2, 0, 2, 1, 0, 0, 2, 0, 1, 2, 1, 1, 1, 2, 1, 0], [0, 0, 0, 0, 0, 1, 1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3, 2, 0, 2, 0, 3, 0, 2, 1, 3, 1, 3, 0, 2, 3, 2, 0, 3, 2, 3, 1, 0, 0, 1, 2, 0, 3, 3, 2, 3, 1, 2, 3, 1, 0, 3, 2, 1, 1, 3, 2, 1, 0, 2, 2, 0, 3, 1, 0, 1, 2, 0, 0, 1, 3, 1, 3, 2, 0, 3, 1, 1, 2, 0, 1, 1, 3, 2, 2, 3, 2, 3, 1, 3, 3, 2, 1, 1, 3, 0, 2, 0, 0, 1, 1, 3, 2, 1, 0, 2, 0, 0, 1, 3, 2, 0, 1, 1, 0, 0, 1, 2, 0, 1, 3, 2, 2, 3, 0, 0, 2, 1, 2, 2, 3, 2, 2, 2, 0, 1, 3, 0, 0, 3, 3, 3, 3, 1, 2, 2, 1, 3, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 2, 3, 1, 0, 3, 1, 2, 2, 2, 0, 3, 2, 2, 3, 0, 3, 1, 3, 3, 0, 2, 1, 2, 3, 0, 3, 2, 0, 1, 3, 0, 1, 3, 3, 3, 3, 0, 1, 3, 2, 2, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 2, 1, 0, 2, 1, 1, 3, 3, 2, 3, 0, 2, 0, 2, 2, 0, 3, 2, 1, 2, 3, 2, 3, 0, 2, 3, 3, 0, 0, 0, 0, 3, 2, 2, 2, 2, 1, 3, 3, 1, 2, 3, 3, 2, 0, 1, 0, 2, 3, 3, 2, 2, 3, 2, 1, 0, 3, 0, 1, 0, 2, 0, 3, 3, 2, 1, 2, 3, 0, 0, 3, 1, 3, 3, 2, 3, 3, 1, 1, 2, 3, 2, 0, 2, 2, 2, 2, 1, 2, 2, 1, 3, 2, 2, 2, 2, 3, 2, 1, 2, 0, 2, 1, 1, 0, 1, 2, 2, 0, 1, 2, 2, 2, 2, 0, 3, 0, 1, 1, 1, 1, 3, 1, 0, 2, 2, 2, 3, 1, 0, 3, 1, 2, 2, 2, 0, 0, 0, 3, 1, 0, 2, 3, 0, 2, 1, 3, 3, 0, 2, 3, 0, 2, 3, 2, 0, 1, 2, 2, 1, 0, 0, 3, 0, 2, 1, 1, 2, 1, 0, 2, 1, 0, 2, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 1, 3, 3, 3, 3, 0, 1, 3, 3, 1, 0, 0, 1, 2, 1, 2, 1, 2, 2, 1, 0, 3, 1, 3, 0, 1, 0, 2, 3, 2, 0, 0, 3, 1, 3, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 2, 0, 1, 0, 0, 2, 3, 2, 2, 3, 0, 3, 0, 0, 2, 3, 2, 0, 3, 0, 1, 1, 3, 1, 2, 0, 0, 0, 3, 3, 0, 2, 2, 2, 3, 1, 1, 1, 2, 1, 0, 0, 3, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 1, 3, 3, 3, 3, 2, 1, 2, 3, 2, 0, 1, 1, 3, 0, 0, 0, 2, 3, 3, 2, 3, 3, 1, 0, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 3, 2, 2, 3, 3, 2, 1, 3, 2, 2, 0, 0, 3, 2, 3, 0, 3, 0, 0, 1, 3, 0, 3, 1, 1, 3, 1, 3, 0, 1, 0, 1, 2, 3, 1, 1, 3, 2, 3, 2, 2, 3, 1, 0, 3, 2, 1, 0, 1, 0, 1, 1, 3, 2, 1, 2, 3, 1, 1, 0, 3, 1, 2, 3, 3, 0, 1, 3, 3, 1, 0, 2, 3, 3, 2, 1, 1, 1, 0, 2, 0, 0, 1, 2, 1, 2, 3, 2, 1, 1, 0, 3, 3, 2, 2, 1, 0, 3, 1, 0, 0, 3, 1, 1, 3, 1, 3, 1, 2, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [4, 3, 3, 3, 4, 0, 3, 1, 2, 0, 4, 3, 4, 0, 2, 2, 1, 0, 2, 2, 3, 4, 1, 2, 3, 0, 3, 2, 2, 3, 1, 1, 2, 3, 0, 0, 2, 0, 1, 3, 0, 3, 0, 4, 0, 3, 4, 4, 0, 4, 2, 3, 4, 0, 0, 0, 0, 0, 3, 4, 4, 1, 1, 1, 0, 3, 2, 1, 0, 1, 0, 1, 2, 0, 4, 2, 2, 3, 4, 2, 3, 3, 3, 0, 1, 1, 1, 4, 2, 3, 3, 1, 3, 0, 0, 4, 0, 2, 2, 4, 0, 0, 0, 4, 0, 1, 2, 2, 4, 0, 4, 2, 3, 0, 0, 4, 2, 4, 0, 2, 4, 2, 0, 3, 3, 2, 0, 4, 2, 1, 0, 3, 4, 2, 1, 3, 0, 2, 3, 3, 4, 1, 3, 2, 4, 3, 4, 0, 0, 3, 1, 3, 1, 3, 2, 0, 1, 3], [0, 0, 0, 0, 1, 2, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 2, 1, 2, 2, 2, 0, 2, 2, 2, 2, 1, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 0, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 2, 1, 0, 0, 1, 1, 0, 0, 2, 0, 2, 1, 2, 0, 1, 2, 0, 1, 1, 2, 2, 1, 1, 2, 1, 2, 0, 2, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0], [3, 5, 1, 4, 4, 4, 0, 0, 4, 5, 5, 0, 3, 3, 0, 4, 2, 4, 5, 1, 0, 5, 2, 5, 1, 0, 0, 2, 0, 3, 0, 4, 2, 0, 3, 5, 0, 1, 5, 3, 2, 5, 5, 0, 3, 2, 1, 3, 0, 4, 4, 2, 4, 2, 1, 3, 3, 5, 3, 2, 2, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 0, 0, 1, 2, 0, 2, 2, 0, 1, 4, 1, 0, 4, 1, 0, 4, 2, 4, 2, 1, 4, 2, 1, 4, 4, 2, 0, 0, 2, 1, 0, 0, 1, 2, 0, 4, 1, 4, 4, 2, 0, 4, 0, 0, 4, 4, 4, 4, 0, 1, 1, 2, 2, 2, 4, 0, 1, 4, 2, 4, 2, 0, 2, 4, 4, 4, 2, 1, 2, 0, 4, 1, 0, 4, 2, 2, 1, 0, 0, 0, 2, 1, 1, 0, 2, 4, 2, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 3, 4, 2, 0, 1, 2, 0, 4, 2, 1, 4, 1, 2, 1, 0, 0, 4, 4, 0, 0, 2, 2, 2, 4, 1, 0, 0, 2, 1, 4, 2, 0, 0, 1, 0, 2, 1, 4, 2, 4, 0, 1, 4, 0, 2, 0, 4, 4, 0, 0, 2, 4, 1, 4, 3, 4, 3, 2, 3, 4, 0, 3, 4, 2, 2, 1, 1, 2, 4, 2, 4, 1, 4, 2, 1, 4, 2, 2, 2, 1, 2, 2, 2, 1, 0, 4, 1, 0, 3, 3, 1, 1, 0, 1, 4, 1], [0, 0, 0, 1, 2, 3, 2, 2, 1, 3, 0, 2, 3, 3, 2, 3, 2, 0, 3, 1, 1, 3, 3, 0, 1, 2, 2, 3, 0, 0, 3, 0, 1, 0, 2, 3, 1, 2, 2, 3, 0, 0, 1, 0, 1, 2, 3, 0, 3], [2, 4, 0, 3, 3, 2, 5, 1, 4, 3, 1, 5, 5, 2], [2, 0, 2, 0, 0, 1, 0, 2, 2, 1, 0, 1, 2, 1, 1, 2, 0, 1, 0, 2, 0, 0, 1, 2, 0, 1, 0, 2, 0, 2, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 0, 1, 1, 2, 0, 2, 1, 0, 0, 2], [1, 3, 0, 2, 2, 1, 1, 1, 3, 0, 2, 0, 3, 3, 1, 0, 3, 3, 1, 1, 1, 0, 1, 1, 3, 0, 0, 2, 2, 3, 3, 3, 3, 1, 2, 3, 1, 0, 3, 0, 3, 1, 2, 1, 0, 0, 2, 0, 2], [5, 6, 19, 11, 19, 0, 25, 21, 9, 20, 5, 21], [5, 5, 15, 0, 5, 14, 21, 15, 15, 20, 19, 17, 22, 2], [2, 1, 9, 0, 1, 9, 7, 9, 2], [17, 26, 30, 11, 14, 8, 27, 29, 27, 19, 24, 20, 23, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 47, 47, 24, 23, 5, 12, 0, 0, 14, 19, 36, 19, 6, 11, 1, 3, 9, 165, 165, 166, 7, 637, 168, 158, 84, 86, 62, 49, 5, 206, 49, 14, 54, 49, 12, 14, 9, 14], "tree_depth": 85, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in0[int(16.0):]) \\le len(in2):{:\\nres0 = i1 \\le divInt(len(getCharFromString((\"\"f.\"\" + \"\"F\"\"), i2)),i1)\\n:}\\nif getCharFromString(s1, int(3.0))[len((in1 + \"\"2\"\")):int(7.0)].endswith(in1):{:\\nif b1:{:\\ni0 = int(6.0)\\n:}else:{:\\nif res0:{:\\nloopBreak% = 0\\nwhile not ( in1 != \"\"1\"\" and saveOrd(s0[( i2 + divInt(i1,min(i2, divInt(int(3.0),len(s0[int(6.0):max(i0, ( abs(mod(i1,min(divInt(saveOrd(\"\"f\"\"),int(1.0)), i0))) + i2 ))][int(0.0):divInt(i0,len(getCharFromString(\"\"p\"\", saveOrd(in1))))])))) ):]) \\ge divInt(min(int(8.0), ( abs(int(5.0)) + i2 )),abs(( int(5.0) + int(8.0) ))) ):{:\\nloopBreak% = 0\\nwhile max(mod(int(1.0),i2), mod(mod(i0,min(int(8.0), i1)),int(8.0))) \\l divInt(i2,i0):{:\\ni0 = int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = abs(int(3.0)) != abs(( i0 - len(saveChr(int(1.0))) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nfor in2 in \"\"a\"\":{:\\ni1 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = s0\\n:}\\n:}\\nif mod(i0,int(0.0)) != int(321.0):{:\\nif saveOrd(\"\"[\"\"[( mod(max(divInt(abs(int(1.0)),len(\"\"G\"\"[min(mod(int(4.0),int(2.0)), len(saveChr(i0).capitalize())):].capitalize())), ( i0 * i1 )),int(2.0)) + int(0.0) ):abs(( int(1.0) - i1 ))].strip()[:( i0 - i0 )].capitalize()) \\g int(111.0):{:\\nb1 = abs(( i0 + int(0.0) )) == int(2.0)\\nb0 = i2 \\ge i1\\nloopBreak% = 0\\nfor in0 in in0[int(1.0):]:{:\\nloopBreak% = 0\\nfor s0 in in1:{:\\nb0 = \"\"9\"\"[:mod(i1,int(4.0))] in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(in1)\\nb0 = not divInt(divInt(max(i0, i2),( int(5.0) - ( ( max(( mod(( i0 - int(1.0) ),abs(i1)) + i2 ), len(\"\"T\"\")) + min(min(abs(int(0.0)), ( mod(int(9.0),min(int(6.0), i0)) + i2 )), int(1.0)) ) + i1 ) )),i2) \\le int(6.0)\\n:}\\nb1 = int(4635.0) != i0\\n:}\\nloopBreak% = 0\\nwhile not in2[int(275.0):mod(max(int(21.0), i1),len(\"\"_\"\".rstrip(getCharFromString(s1[:int(9.0)].capitalize(), mod(divInt(( i2 + min(( ( len(s0.lstrip()) * i0 ) * min(int(3.0), saveOrd(in2)) ), min(i2, mod(int(9.0),mod(len(s2.capitalize().lstrip(\"\"(\"\").capitalize().lstrip(\"\"f\"\")),i1)))) ),saveOrd(getCharFromString(in2, ( i2 - int(2.0) ))[:saveOrd(\"\"L\"\")][:i0][int(4.0):])),min(saveOrd(saveChr(abs(len(s1[i2:int(9.0)])))[saveOrd(saveChr(( divInt(i0,i2) - i2 ))[:i0]):].strip()), i2))))))] in \"\"+\"\"[i1:int(5.0)].rstrip().strip(s0[divInt(i2,i0):]):{:\\nloopBreak% = 0\\nwhile i1 == i2:{:\\ni1 = int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = not mod(int(1.0),i0) == divInt(int(25.0),int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile min(min(divInt(min(i0, ( i0 * mod(( i0 + min(divInt(int(3.0),mod(min(( len(getCharFromString(\"\"%\"\", i1)) * ( saveOrd(s0) - saveOrd(saveChr(i1)) ) ), i2),i1)), i1) ),max(( ( ( divInt(int(3.0),max(max(int(3.0), ( min(len(\"\"o\"\"[divInt(i1,int(7.0)):i2][( abs(max(( mod(min(divInt(int(4.0),i0), max(i2, int(5.0))),i0) * ( i1 * min(max(( int(3.0) * divInt(abs(i2),i2) ), min(int(2.0), saveOrd(s2))), abs(mod(abs(len(s0)),int(8.0)))) ) ), int(5.0))) + ( saveOrd(in0) * divInt(i2,( ( divInt(divInt(int(8.0),( ( int(3.0) * abs(( divInt(( mod(len(\"\"v\"\"[:( int(3.0) * ( i1 * ( int(3.0) - int(9.0) ) ) )]),i2) * int(7.0) ),( ( i1 + int(1.0) ) * ( mod(mod(mod(i0,len(\"\"p\"\")),i2),int(1.0)) * int(8.0) ) )) * int(4.0) )) ) + int(4.0) )),len(s0)) * int(4.0) ) + i0 )) ) ):( ( mod(min(int(4.0), i1),max(int(2.0), ( divInt(divInt(i0,i0),i1) * max(int(9.0), i2) ))) * divInt(max(i0, mod(int(1.0),saveOrd(\"\"T\"\"[abs(i2):mod(len(in1),i1)].capitalize()[divInt(len(s2),mod(i2,int(8.0))):]))),divInt(mod(int(7.0),i0),i1)) ) + max(i0, ( int(9.0) - int(8.0) )) )]), ( int(8.0) + i0 )) - ( int(9.0) - i1 ) )), ( i1 - len(s0[i2:i2][min(i0, int(2.0)):][int(0.0):mod(( int(6.0) + min(saveOrd(in0), min(abs(i0), int(6.0))) ),abs(saveOrd(in2)))][:int(3.0)]) ))) - i2 ) - i2 ) * int(5.0) ), divInt(int(1.0),( int(6.0) - mod(divInt(int(1.0),i2),min(int(7.0), min(i1, int(4.0)))) )))) )),i0), divInt(min(( i2 * i1 ), saveOrd((s0[int(1.0):].capitalize() + \"\"p\"\"))),min(( i2 - int(4.0) ), i2))), i1) \\g mod(i2,i0):{:\\nres0 = b0\\nif True:{:\\nif int(6.0) \\l i0:{:\\ni1 += ( i0 + int(4.0) )\\nloopBreak% = 0\\nwhile i2 \\le i1:{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile divInt(max(divInt(mod(abs(i0),abs(i1)),i2), divInt(saveOrd(s1[:mod(i1,min(i2, int(5.0)))]),int(1.0))),saveOrd(\"\"u\"\"[int(7.0):].rstrip(getCharFromString(\"\"\\\\\\\\\"\", divInt(i0,i1))))) == i2:{:\\nb1 = \"\"A\"\"[abs(len(in2)):] == in0\\nloopBreak% = 0\\nfor s2 in getCharFromString(in2.lstrip(in2), i2):{:\\nloopBreak% = 0\\nfor s0 in getCharFromString(\"\"Z\"\", ( divInt(( min(int(3.0), int(4.0)) - int(1.0) ),divInt(int(9.0),i2)) - i0 ))[min(i0, int(8.0)):( i0 + mod(i1,( i0 + i2 )) )][divInt(int(2.0),saveOrd(in0)):abs(saveOrd(s2))][:min(( int(0.0) * ( abs(divInt(i2,int(1.0))) + int(1.0) ) ), saveOrd(\"\"0\"\"[:i1]))]:{:\\nloopBreak% = 0\\nwhile i1 \\g i0:{:\\ns1 = saveChr(mod(abs(min(mod(len(in0[len(s0):]),int(8.0)), i1)),int(2.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile i1 != int(8.0):{:\\ni1 *= int(8.0)\\nin1 = \"\"1\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nif in1 != \"\"^\\\\\\\\:\"\"[mod(( divInt(divInt(( abs(min(( mod(saveOrd(getCharFromString(s2.capitalize()[abs(mod(int(6.0),max(( divInt(i0,i0) - min(( len(\"\"?\"\") * i2 ), saveOrd(in1.rstrip())) ), i2))):], i0)),int(8.0)) + abs(i2) ), max(int(1.0), int(1.0)))) - len(s2[int(1.0):min(i0, int(5.0))]) ),i2),int(1.0)) * ( abs(int(3.0)) + int(6.0) ) ),len(saveChr(( len(s1.capitalize()) - mod(( saveOrd(in0) - int(9.0) ),i1) )))):max(( int(5.0) * i0 ), int(74.0))]:{:\\nin0 = \"\"t\"\".capitalize()[i0:]\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = (getCharFromString(((getCharFromString(in0, int(5.0)) + (saveChr(int(2.0)) + \"\"9\"\"[len(\"\";\"\"):( int(8.0) * mod(abs(int(3.0)),int(7.0)) )][i2:saveOrd(getCharFromString(saveChr(int(6.0))[:divInt(len(\"\"r\"\"),saveOrd(\"\"V\"\"[i0:].capitalize()))], int(3.0))[:min(min(int(7.0), i1), ( len(\"\">\"\"[:max(( int(7.0) - int(7.0) ), int(2.0))][i2:][( i1 - i1 ):int(3.0)].strip(\"\"J\"\"[( int(9.0) * ( len(s2) - ( int(8.0) * int(4.0) ) ) ):][i1:max(len(getCharFromString(\"\"\"\", divInt(( int(3.0) + i2 ),abs(int(5.0))))), i1)][i0:min(int(8.0), int(8.0))])) * max(int(1.0), len(s2)) ))])]))[int(1.0):( int(4.0) + int(0.0) )] + ((\"\"w7\"\" + \"\"c\"\") + s1)), int(5.0)) + \"\"UF9V\"\").strip(\"\"2\"\".strip())\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 1], [1, 2], [0, 2, 2], [], [0, 0], [], [], [2], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 4, 2, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 4, 4, 0, 4, 2, 0, 0, 1], [0, 1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 0, 3, 2, 3, 3, 3, 0, 3, 0, 1, 0, 4, 0, 0, 0], [0, 3, 2], [4], [0, 0, 1], [0, 0], [20, 11], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 3, 3, 8, 0, 20, 2, 7, 1, 1, 15, 2, 0, 26, 3, 1, 3, 2, 2, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(saveOrd(in1), mod(abs(abs(max(i0, ( i0 * i2 )))),i2)) \\l i1:{:\\nloopBreak% = 0\\nwhile len(in2) \\le i1:{:\\nb2 = in0 != getCharFromString(in1.rstrip((in1[len(in2):i1][int(5.0):int(0.0)] + s1)), i0)\\nin1 = ((((in1 + (s0 + \"\"UL\"\")) + in1) + s2.capitalize())[:int(8.0)] + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = s1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 6, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 1, 1], [1, 4, 3, 1, 2, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 3, 5, 5, 5], [1, 0, 0, 1, 0, 0, 0, 1], [], [2, 0, 4, 0, 2, 0, 3, 2, 2, 0, 0, 3, 1, 3, 4, 0, 2, 3, 0, 1, 1], [0, 3, 2], [4], [0, 0, 1, 0, 1], [2, 0, 1, 2, 2, 2, 0, 2], [23, 25], [1], [7, 9, 6, 4, 9], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 4, 0, 22, 3, 6, 0, 3, 7, 8, 0, 21, 2, 1, 5, 8, 2, 1, 5, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(saveOrd(in1[len(getCharFromString(in2, int(0.0))):i2]),i0), divInt(mod(max(int(8.0), int(9.0)),int(6.0)),int(5.0))):{:\\nres0 = in2[abs(saveOrd((in0[i2:int(6.0)][:int(2.0)] + in2))):int(174.0)] not in (\"\"7\"\" + (in2.rstrip((in2 + \"\"Xb9\"\")[:i1]) + \"\"64Z9\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [3, 1], [2, 0, 2], [0, 0], [3, 0], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 0, 2], [1], [3, 3, 2, 0, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 0, 1, 0, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0, 0], [1, 1, 0, 1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 2, 0, 0, 1, 3, 4, 2, 0, 2, 1, 1, 3, 0, 2, 4, 0], [0, 3, 2, 0], [4], [0, 1, 1, 2, 0, 2], [2, 0, 3, 2], [22], [], [7, 9], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 2, 0, 3, 0, 2, 1, 0, 0, 1, 5, 5, 8, 0, 21, 2, 6, 1, 1, 11, 4, 0, 25, 4, 1, 6, 4, 1, 0, 2, 1], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in1 != in2:{:\\nloopBreak% = 0\\nwhile res0:{:\\nb1 = in0 in getCharFromString(in1.rstrip((in1[:max(max(mod(i0,len(in2)), abs(i0)), ( i2 * i2 ))][:i1][int(1.0):max(int(0.0), len(\"\"7\"\"))] + (s1[i1:].capitalize() + \"\"W\"\"[int(8.0):i0]))), i2)\\ns0 = \"\"*9\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = (s0 + getCharFromString(s0, int(7.0))[int(6.0):])\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 1], [], [0, 0], [], [], [2], [0, 5], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 1, 2, 2, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [0, 0, 0, 1, 1], [1, 1, 3, 2, 1, 4, 3, 4, 3, 0, 2], [2, 1, 2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 0, 4], [1], [], [0, 0, 0, 0, 4, 0, 1, 1, 4, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [0], [7], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 7, 1, 16, 2, 8, 3, 0, 5, 1, 0, 7, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(( len(in1) * abs(max(i2, ( i1 - i2 ))) ), i2), i0) \\l saveOrd(in2):{:\\nloopBreak% = 0\\nwhile len(in0) != saveOrd(in0):{:\\nb2 = in1.capitalize() != \"\"H\"\"\\ni1 *= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [0, 1], [], [0, 2, 0, 0, 4, 0, 3, 2, 2, 1, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [2, 3], [], [], [5], [15]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 3, 3, 8, 0, 20, 2, 7, 1, 1, 9, 2, 0, 13, 1, 0, 3, 2, 0, 0, 1, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l len(in2[i1:len(in0)]):{:\\nloopBreak% = 0\\nwhile i1 \\ge int(1.0):{:\\nres0 = in1.capitalize() != (\"\"5,\"\"[:int(0.0)][i0:int(8.0)] + in1)\\nin2 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = in1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [0], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 9, 7, 9, 7, 6, 5, 3, 3, 6, 3], [2, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 0, 3, 0, 2, 2, 0, 2, 1, 1, 3, 0, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1], [0, 0, 0, 1, 1, 0], [1, 1, 3, 2, 0, 3, 0, 4, 1, 0], [1, 0, 2, 2], [1, 1, 0, 1], [4, 5, 2, 5, 4, 3], [1], [], [1, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0], [0, 3, 2], [4], [2, 0, 1], [3], [], [], [], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 4, 4, 5, 0, 19, 6, 4, 4, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif \"\"\"\" in in1:{:\\nres0 = max(( ( max(i2, len(in2)) - i0 ) + ( mod(i2,mod(int(2.0),int(9.0))) * abs(i1) ) ), ( int(7.0) * i0 )) \\l int(9.0)\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 1, 2, 1, 1, 0], [1], [3, 3, 2, 1, 3, 3, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 3, 3, 3, 0, 1, 0, 2, 2, 2, 0], [2], [1, 0, 0, 1], [2, 5, 3, 1, 4, 5, 0, 5, 4], [1], [], [0, 0, 0, 0, 4, 0, 2, 1, 2, 0, 0, 0], [2, 3, 2], [3], [0, 0, 0], [3], [], [], [], [11]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 21, 3, 9, 1, 2, 7, 1, 0, 8, 1, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(int(1.0),len(s2)), abs(( divInt(i0,i0) * i1 ))), i2) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le len(s1):{:\\nin1 = in2.capitalize()\\ns0 = \"\"(\"\"[min(int(8.0), int(8.0)):max(int(7.0), int(6.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 0, 0], [1], [0, 2, 2], [], [0, 0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [1], [3, 1, 0, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [0, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [0, 1, 0, 0, 0, 0, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [3, 1, 1, 2, 2, 1, 2], [5], [5, 18, 16], [4, 7, 8], [19]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 3, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 8, 1, 2, 0, 1, 4, 7, 0, 7, 1, 0, 1, 7, 0, 3, 3, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(int(16.0), i1) \\le i2\\nin0 = in2[divInt(len(s1),i1):]\\nin1 = getCharFromString((\"\":f\"\" + \"\"s47q8\"\"), i0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 2, 2, 1, 0, 1], [1], [3, 1, 1, 3, 3, 3, 0, 2, 1, 3, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [4, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 1, 0, 1], [4, 5, 3, 3, 4, 5, 1, 0, 4], [1, 1, 1], [], [0, 0, 0, 0, 4, 2, 3, 2, 2, 0, 0, 0, 0, 2, 3, 4, 2, 1, 1, 4, 1], [2, 3, 2], [4], [0, 0, 1, 2, 2], [3, 3, 3], [], [], [], [28, 16, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 5, 5, 4, 0, 18, 1, 8, 0, 1, 9, 3, 0, 21, 3, 1, 5, 3, 0, 0, 0, 3], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in1) \\l int(1.0):{:\\nloopBreak% = 0\\nwhile int(0.0) \\le max(len(in2), abs(i0)):{:\\nres0 = in0 != in0\\nin1 = (in2[:mod(int(8.0),max(i1, i2))][len(s1):len(s0)] + in1)[saveOrd((\"\"]\"\"[i2:].rstrip(\"\"-\"\") + \"\"`\"\".capitalize())[int(7.0):]):int(6.0)].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 2, 3, 2, 4, 5], [0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [0, 3], [12], [], [], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 2, 2, 0, 3, 0, 0, 0, 2, 1, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"M[\"\") == ( mod(len(s0),divInt(len(s2),( ( i0 + int(4.0) ) * int(8.0) ))) + int(3.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 2, 5, 1, 0, 4, 0], [0, 1, 1, 1, 1, 0, 1], [], [0, 0, 2, 0, 4, 0, 3, 2, 2, 0, 1, 1, 4, 4, 4, 3, 4, 0, 0, 4, 2, 4, 0, 1, 2, 4, 1, 2, 1], [2, 3, 2, 3, 0, 0, 2, 2], [4, 4], [0, 0, 1, 0, 2, 1], [2, 3, 0, 1, 1, 0, 0], [13, 10, 11], [12, 1], [2], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 9, 9, 8, 0, 31, 3, 11, 1, 2, 10, 7, 0, 29, 8, 2, 6, 7, 3, 2, 1, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile i1 \\le len(in0[i1:int(1.0)]):{:\\nres0 = in1.capitalize() != (s2[:int(0.0)][i0:int(8.0)] + \"\"2\\\\\\n\"\")\\nin2 = \"\"N\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns1 = (getCharFromString(s0, int(7.0)) + in1).rstrip(getCharFromString(s0.capitalize()[saveOrd(\"\"m\"\"):int(6.0)], divInt(int(6.0),len(\"\"b\"\".capitalize()[min(int(5.0), int(3.0)):])))).capitalize().rstrip(\"\"KL\"\"[:abs(int(3.0))])\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 0, 1], [2, 1], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 7, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1, 0, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 0, 3, 3, 3, 0, 1, 3, 3, 1, 2, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 0, 0, 1, 3, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 4, 3, 3, 4, 1, 0, 4, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4, 0, 3], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [], [1, 2, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0, 1, 3, 3, 4, 2, 0, 4, 4, 3, 2, 1, 4, 3, 0, 4, 4, 4, 0, 1], [2, 3, 2, 1, 2, 2, 1, 0], [4], [2, 0, 0, 1, 2, 1], [3, 3, 3, 0, 1, 0, 2, 3, 2, 2], [23, 1], [13], [3, 1, 0], [16, 27, 4, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 9, 9, 8, 0, 36, 4, 15, 1, 3, 11, 10, 0, 31, 8, 1, 6, 10, 2, 1, 3, 4], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(\"\"-\\\\\\\\!X\"\")), abs(saveOrd(in1[i0:]))) \\l mod(( i1 * i1 ),i2):{:\\nif len(in2) \\le len(in0.capitalize()):{:\\nres0 = s1[:saveOrd(in1)][i1:int(8.0)][max(min(int(8.0), divInt(saveOrd(in2),int(7.0))), divInt(int(6.0),abs(abs(int(6.0))))):int(5.0)] != \"\"n\"\"\\ns1 = ((in2[abs(i1):].rstrip(saveChr(i0).capitalize()) + (\"\"B3,\"\"[:i1] + (in1 + saveChr(int(3.0)).capitalize()).capitalize())) + getCharFromString(s0, abs(int(7.0))))\\n:}else:{:\\nin0 = \"\"10\"\"\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1, 1], [2, 2, 1, 2, 0, 0], [1, 2, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2, 2], [0, 0], [3, 2], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 2, 1, 0, 4, 0, 4, 0, 3], [1, 1, 1, 1], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 3, 0, 2, 4, 2, 4, 4, 4, 0, 1, 4, 1, 0, 1, 2, 1], [0, 3, 2, 3, 2, 3], [4, 3, 3], [0, 0, 1, 2, 1], [2, 3, 0, 3], [20], [], [4], [19, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 3, 3, 0, 2, 0, 0, 1, 2, 4, 2, 2, 0, 0, 0, 1, 5, 5, 8, 0, 23, 2, 8, 1, 1, 13, 4, 0, 28, 6, 3, 5, 4, 1, 0, 1, 2], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile i1 \\le len(in0):{:\\nres0 = in1 != getCharFromString(in1, i1)\\nloopBreak% = 0\\nwhile (s2[int(1.0):int(0.0)][i0:int(8.0)] + s1) == s0:{:\\nin1 = (s0 + in1.capitalize().lstrip(\"\"4\"\").capitalize()[int(7.0):].rstrip(\"\":\"\".lstrip(s0))[:saveOrd(\"\"U\"\")])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin0 = \"\"\"\"[:int(6.0)]\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 1], [2, 2, 1, 1, 0, 0], [2, 2], [0, 2, 0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 5], [1, 1, 2, 1], [0, 0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 0, 3, 6, 3, 7, 5], [0, 1, 1, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 3, 1, 1, 2, 0, 3, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 2, 3, 4, 1, 0, 2, 1, 3, 1], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 5, 4, 3, 1, 4, 1, 3, 3], [0, 1, 1], [], [0, 0, 0, 0, 4, 0, 3, 2, 1, 0, 0, 0, 3, 0, 4, 0, 0, 4, 3, 3, 0, 3, 1, 0, 2, 1], [2, 3, 2, 0], [4], [0, 0, 1], [2, 3, 2], [], [], [2, 1], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 0, 2, 0, 0, 2, 3, 4, 3, 1, 0, 0, 0, 0, 7, 7, 3, 0, 20, 2, 8, 1, 1, 9, 2, 0, 11, 1, 0, 1, 2, 0, 0, 1, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), int(1.0)), int(8.0)) \\l abs(len(in2)):{:\\nloopBreak% = 0\\nwhile saveOrd(in0) \\le int(8.0):{:\\nres0 = in0 != in1.capitalize()\\nin2 = (\"\"2>\"\"[int(7.0):int(6.0)] + s1)\\nb1 = int(6.0) != int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = in1\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 3, 3, 7, 6, 3, 6], [0, 1, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [0, 0, 1, 0, 0, 0, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1, 3, 3, 1, 3, 3, 1], [5], [5, 6, 13], [], [12, 2, 29, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 3, 0, 8, 1, 3, 0, 1, 2, 7, 0, 7, 1, 0, 1, 7, 0, 3, 0, 4], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(1.0):]) \\le len(in2)\\nb1 = i0 \\le divInt(len(getCharFromString((\"\"f)\\\\\\t\"\" + \"\"g^n\"\"), i1)),i1)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3], [], [], [], [22]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 3, 0, 9, 2, 3, 1, 1, 3, 1, 0, 5, 1, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(\"\"=\"\", i2) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [2], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 3, 0, 1, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 1, 1, 3, 3, 0], [0, 0, 1, 1, 1], [1, 1, 3, 2, 3, 3, 3, 4, 1, 0, 2, 2, 2, 2, 3], [2, 1], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [0, 0, 0, 1], [], [0, 0, 0, 0, 1, 2, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [1, 0, 2, 0], [3, 2, 2, 0], [21], [], [1, 8], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 11, 11, 2, 0, 28, 3, 13, 2, 1, 6, 4, 0, 11, 0, 0, 4, 4, 1, 0, 2, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(( len(in1) * abs(len(in2)) ), i0), ( len(in0) - i1 )) \\l int(1.0):{:\\nloopBreak% = 0\\nwhile int(9.0) \\le len(s1):{:\\nres0 = \"\"%18V\"\" == in1[saveOrd(in2):max(min(int(8.0), int(7.0)), abs(int(6.0)))][int(6.0):][abs(int(5.0)):mod(int(5.0),abs(int(3.0)))][:int(63.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 1, 1, 0, 2], [0], [3, 3, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [1, 0, 0, 0, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [3, 2, 2, 0, 1], [5], [5], [1, 1], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 2, 5, 0, 7, 1, 0, 1, 5, 1, 1, 2, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[len(in2):]) \\le len(getCharFromString((\"\".\"\" + \"\"11Ff\"\"), i1))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [1, 0, 0, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 6, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 2, 0, 1, 3, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 0, 2, 1, 3, 3, 0, 1, 0, 2, 3], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 5, 4], [1], [], [0, 0, 1, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [2], [], [], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 0, 26, 4, 12, 1, 3, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(mod(min(abs(max(i0, ( i1 * i1 ))), i2),int(1.0)), len(in1)), len(in2)) \\l min(max(int(8.0), divInt(i1,int(6.0))), min(abs(int(7.0)), divInt(int(6.0),len(\"\"7\"\"))))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [3, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 4, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [0, 5, 3, 4, 4, 5, 1, 0, 4, 0], [0, 0, 1], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 1, 0], [2, 3, 2], [4], [0, 0, 1], [3, 2, 3], [], [], [6], [29, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 7, 0, 17, 1, 7, 0, 1, 9, 3, 0, 12, 1, 0, 2, 3, 0, 0, 1, 2], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(int(1.0), saveOrd(s0)), abs(max(i0, mod(i0,i2)))) \\ge i2:{:\\nloopBreak% = 0\\nwhile i1 \\le len(in2):{:\\nres0 = in0 != in1\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns1 = (s0[i1:len(\"\"^6]\"\")][i1:int(0.0)] + in1)\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [0, 0, 1], [], [1, 2, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [1, 2, 0], [25], [14], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 6, 0, 14, 1, 6, 0, 1, 1, 3, 0, 3, 0, 0, 1, 3, 1, 1, 1, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(\"\"o2Z\"\"),abs(max(i1, i0))), i0), i0) \\l i0:{:\\nres0 = int(26.0) \\le len(in1[i1:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0, 0, 2, 1, 1], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 3, 2, 0, 1, 0, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0, 3, 1, 2, 2, 2, 0, 0, 3, 0, 2, 0, 0], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5, 4, 3, 5, 4], [1, 0, 1, 1], [], [0, 4, 4, 2, 0, 0, 3, 2, 2, 0, 0, 3, 2, 4, 0, 3, 3, 4, 1, 2, 4, 2, 1, 3, 2, 0, 2, 3, 0, 1, 2, 2, 0, 4], [0, 3, 2, 1, 2, 1], [4], [0, 0, 1, 2, 2, 2, 1, 0, 0, 0], [3, 0, 2, 2], [8], [], [4, 9], [7]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 26, 26, 17, 0, 51, 12, 8, 5, 7, 10, 4, 0, 34, 6, 1, 10, 4, 1, 0, 2, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(getCharFromString(in2[( i0 + i0 ):i2].rstrip(in2), max(mod(i1,int(2.0)), i1)))), int(8.0)):{:\\nres0 = (in0[:min(i1, i1)][int(9.0):int(5.0)] + in2) not in (in2.capitalize()[int(5.0):] + ((saveChr(i0) + \"\"$\"\") + \"\"I4\"\"[int(6.0):].capitalize()[( i1 - divInt(mod(( int(2174.0) + i0 ),int(20.0)),mod(i2,int(65083.0))) ):]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = (in0[:int(305.0)] + (in2 + \"\"9\"\")[saveOrd(in1[int(5.0):int(8.0)][i2:len(saveChr(int(72.0)))]):mod(mod(( i0 + i0 ),abs(i2)),( i1 + i1 ))])\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0, 2, 2, 1, 0, 1, 1], [0], [0, 2, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0], [1], [2], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 1, 2, 2, 0, 0, 0, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 0, 5, 4, 0, 0, 5, 3], [1, 0, 1, 1, 0, 1, 1], [0], [0, 3, 4, 0, 0, 0, 3, 2, 2, 0, 0, 2, 3, 1, 0, 4, 0, 3, 4, 3, 1, 3, 3, 2, 4, 4, 0, 4, 2, 1, 1, 1], [0, 3, 2, 0, 3, 1], [4, 5], [0, 0, 1, 0, 2], [2, 2, 0, 2, 2, 3, 2], [10], [], [4, 9, 5, 4, 2], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 7, 7, 8, 0, 23, 5, 3, 1, 4, 11, 7, 1, 32, 6, 2, 5, 7, 1, 0, 5, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = not (getCharFromString(in2, max(len(in0), mod(int(7.0),mod(mod(i2,i0),i2)))) + s0) not in (in2[( i1 + i2 ):int(0.0)][i0:int(7.0)] + in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = (\"\"4\"\" + s0)[:len(in2.rstrip(((\"\"9K\"\" + ((getCharFromString(in0.strip(saveChr(i1)), mod(int(8.0),int(9.0)))[int(8.0):i0] + \"\"5\"\"[int(5.0):]) + \"\"4\\\\\\t\"\")).capitalize() + \"\"2\"\")))]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 2, 0, 1], [2, 2, 1], [0, 2], [], [0, 0], [], [], [3, 2], [0, 4], [1, 1, 2, 0], [0, 0], [3], [0], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 8, 8, 2, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 4, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [1], [], [0, 0, 0, 1, 4, 0, 2, 2, 2, 0, 0, 0], [2, 3, 2], [4], [2, 0, 0], [0], [7], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 0, 1, 0, 0, 2, 2, 4, 2, 1, 1, 0, 0, 1, 9, 9, 3, 0, 28, 3, 13, 1, 2, 8, 1, 0, 12, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(in1)), saveOrd(in2)) \\l max(i0, mod(( i1 * i1 ),int(8.0))):{:\\nloopBreak% = 0\\nwhile len(in0) \\le len(\"\"H\"\"):{:\\nif s1.capitalize() != in1[saveOrd(in2):max(int(8.0), int(2.0))][min(int(6.0), int(6.0)):abs(int(5.0))][divInt(int(3.0),abs(abs(int(3.0)))):]:{:\\nres0 = b2\\n:}\\ns1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2, 0, 2], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 4, 1, 0, 5, 1, 5], [0, 0, 0, 0, 1, 1], [0], [0, 0, 4, 4, 0, 0, 3, 2, 2, 0, 0, 3, 1, 2, 1, 0], [0, 3, 2], [4], [0, 0, 1], [0, 2, 3, 1, 3, 0], [1, 19], [16], [4], [12, 2]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 1, 2, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 7, 7, 11, 3, 23, 4, 4, 3, 2, 8, 6, 1, 16, 2, 1, 3, 6, 2, 1, 1, 2], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(7.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in1.rstrip(s1), i2) not in (s0[mod(i1,i2):int(0.0)][i0:int(7.0)] + in2)\\ni1 = len((\"\"B4)q\\\\\\t\"\" + \"\"T\"\"[:i0]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s1 in in2:{:\\nloopBreak% = 0\\nwhile ( int(8.0) - int(9.0) ) \\le int(8.0):{:\\ni1 += i0\\ni2 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [2, 2, 2, 2, 2, 0, 2, 0, 2, 1], [2, 2, 0, 0, 2, 0, 2], [0, 2, 2], [0, 0, 0], [0, 0], [], [], [3, 3], [0, 4], [1, 2, 1, 0, 0], [0, 0], [3], [0, 1], [], [1], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 7, 9, 2, 6, 5, 3, 3, 6, 3, 5, 2, 7, 6, 2, 3, 1, 8, 5, 1], [1, 2, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1, 3, 3, 1, 0, 3, 3, 3, 2, 1, 0, 3, 1, 2, 1, 1, 3, 1, 3, 3, 3, 1, 3, 0, 2, 1, 0, 2, 0, 2, 1, 0], [1, 0, 0, 1, 1, 0, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 0, 2, 4, 3, 3, 4, 1, 1, 1, 2, 2, 1], [1, 1, 0], [1, 1, 0, 1], [4, 5, 3, 5, 4, 3, 1, 1, 3, 2, 4, 4, 3, 4, 3, 4, 5, 2, 0], [1, 1, 1, 1, 1], [0, 0, 0], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0, 3, 4, 0, 3, 2, 0, 2, 4, 1, 4, 1, 4, 0, 1, 2, 2, 4, 1, 0, 0, 0, 3, 4, 4, 4, 2, 4, 0, 4, 1], [0, 3, 2, 1, 0, 0, 3, 1, 2, 2], [4, 5], [2, 0, 1, 0, 2, 0, 0, 0], [2, 0, 3, 1, 1], [22], [13, 5], [8], [19]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 7, 3, 3, 2, 0, 0, 2, 2, 5, 2, 1, 2, 0, 1, 0, 21, 21, 12, 0, 60, 7, 22, 3, 4, 19, 5, 3, 41, 10, 2, 8, 5, 1, 2, 1, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i1, ( i2 - i2 )))), i2), int(21.0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile in0 != (in2 + in1)[i2:]:{:\\nloopBreak% = 0\\nfor in0 in s1[:len(s1)][saveOrd((getCharFromString(in0, int(7.0)) + (s2[int(9.0):int(2.0)] + \"\"8\"\".rstrip(\"\"W\"\".capitalize())[int(6.0):]))):int(5.0)]:{:\\nloopBreak% = 0\\nfor in1 in saveChr(max(int(3.0), min(int(3.0), i1))):{:\\nloopBreak% = 0\\nwhile min(int(63.0), int(5.0)) \\le abs(saveOrd(in1)):{:\\nres0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in0 in \"\":\"\":{:\\nin1 = getCharFromString(\"\"n\"\", int(2.0))[i1:len(in0)][len(in1):saveOrd(in2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile False:{:\\ns2 = (getCharFromString(saveChr(( int(7.0) - i0 )).strip(s0.capitalize()[max(int(6.0), mod(int(2.0),int(3.0))):max(int(1.0), max(abs(abs(int(8.0))), max(i1, divInt(int(5.0),i0))))]), ( i2 + mod(int(1.0),i2) )) + \"\"f\"\".capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 2, 2, 2, 1, 1, 1], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 3, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 1, 0, 1], [4, 5, 3, 3, 4, 5, 1, 0, 4], [1, 1], [], [0, 0, 0, 2, 4, 0, 3, 2, 2, 0, 0, 0, 3, 2, 1, 1], [2, 3, 2], [4], [0, 0, 1, 1], [0, 1], [20], [11], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 5, 5, 6, 0, 21, 2, 8, 1, 1, 8, 2, 0, 16, 1, 0, 4, 2, 1, 1, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(int(1.0), mod(max(len(in1), abs(i0)),( i2 * max(i2, i2) ))) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(in0.capitalize()[i1:int(0.0)]):{:\\nres0 = (in1[:int(8.0)][i1:int(7.0)] + in2) != s1\\ns0 = (\"\"U\"\"[:int(6.0)] + \"\"l\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [2, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 0, 0, 1, 1], [2, 3, 3, 2, 0, 3, 3, 4, 2, 0], [1, 1], [1, 1, 0, 1], [4, 5, 3, 5, 4, 3], [1], [], [0, 1, 0, 2, 2, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [2], [], [], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 10, 2, 5, 1, 1, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in1)) \\l mod(len(\"\"3\"\"),abs(min(i2, ( i0 - i2 ))))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 2, 2], [0, 0], [3, 4, 2], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 2, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2, 0], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 2, 0, 4, 0], [0, 0, 0, 1], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 1], [2, 3, 2], [4], [0, 0, 1], [0, 3, 2, 3], [25], [], [6], [28, 2]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 2, 1, 4, 1, 3, 0, 0, 0, 1, 3, 3, 9, 1, 20, 3, 6, 2, 2, 8, 4, 0, 13, 1, 0, 2, 4, 1, 0, 1, 2], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l divInt(i1,len(in2)):{:\\nloopBreak% = 0\\nwhile in0 != in1:{:\\nres0 = in1.capitalize().startswith((in2[i1:int(1.0)][int(0.0):i0] + s2))\\nb1 = s0 == \"\"Z]6\\\\\\t\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni0 += int(8.0)\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 0, 0, 2, 3, 0, 1, 2, 3, 0, 1, 0, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [2], [], [], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 3, 0, 9, 2, 2, 0, 2, 2, 1, 0, 4, 1, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(i2,i0), mod(len(in1),i2)):{:\\nres0 = in2 not in getCharFromString(\"\"4\"\", int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 0], [0, 1, 2], [0], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 0, 1, 0, 2, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 0, 3, 2, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 0, 2, 3, 1, 0, 0, 1], [1, 0, 1, 1, 1, 1], [1, 1, 3, 2, 3, 3, 3, 4, 3, 0, 2], [2, 1], [1, 0, 0, 1, 1], [4, 5, 0, 4, 4, 5, 1, 0, 2, 0, 5, 1], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1], [0], [0, 4, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 2, 3, 2, 4, 0, 1, 2, 1, 4, 3, 3, 4, 3, 1, 1, 4, 3, 0, 0, 2, 2, 1], [2, 3, 2, 3, 3, 0], [4, 2, 2], [0, 0, 1, 2, 1, 0, 2], [1, 0, 2, 2, 0, 0, 1, 0, 3, 3], [0, 23, 9, 10], [1, 10], [1, 9], [25, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 11, 11, 10, 1, 36, 6, 11, 2, 5, 12, 10, 1, 34, 6, 3, 7, 10, 4, 2, 2, 2], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(len(in2.capitalize()))), i0), ( i0 * i2 )) \\l i2:{:\\nloopBreak% = 0\\nfor s0 in in1:{:\\nres0 = divInt(len(in1.rstrip((in2[i1:len(s1)][divInt(int(1.0),int(0.0)):i0] + s0))),int(8.0)) \\le int(7.0)\\ni1 -= saveOrd((s2.capitalize()[int(6.0):] + \"\"b\"\")[:mod(int(6.0),len(\"\"A\"\"[:min(int(5.0), int(3.0))]))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = (((\"\"19X\"\" + \"\"J\"\").strip() + getCharFromString((in2 + s1), i0)) + \"\"kK@.\"\"[mod(abs(int(3.0)),i2):][i1:int(63.0)]).strip()\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 4, 3, 9, 0, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 1, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [2], [], [], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 6, 1, 3, 0, 1, 3, 1, 0, 4, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l max(mod(len(in1),len(in2)), int(4.0)):{:\\nres0 = \"\"6\"\" not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 1, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 3, 5, 5], [0, 1], [], [0, 0, 1, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [0, 1], [23], [21], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 0, 2, 3, 2, 0, 4, 0, 0, 0, 2, 1, 1, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), divInt(i2,i0)):{:\\nres0 = \"\"Xv\"\" not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [5], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 2, 2, 2, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [2, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 0, 4], [0, 1, 1, 0, 1, 1], [], [0, 0, 0, 2, 4, 1, 3, 2, 2, 0, 0, 2, 4, 1, 1, 1], [2, 3, 2], [4], [0, 0, 1, 1], [0, 0, 0, 0, 0, 3], [7, 14, 20, 13, 6], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 3, 3, 7, 0, 20, 2, 8, 1, 1, 6, 6, 0, 16, 2, 1, 4, 6, 5, 0, 0, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(mod(len(in1),abs(max(i2, ( i2 * i2 )))), i2)) \\l i0:{:\\nloopBreak% = 0\\nwhile len(in2) \\le len(in0):{:\\nres0 = \"\"HO\"\".capitalize()[saveOrd((in0[:i1][int(1.0):int(0.0)] + in1)):i1].endswith(\"\"U\"\".rstrip(\"\"NG\"\")[:int(8.0)])\\nin2 = \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1, 2], [0, 0], [3, 5], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 1, 3, 0, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0, 0], [0, 1], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 4, 1, 0], [2, 3, 2], [4], [0, 0, 1], [3, 2], [], [], [8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 1, 3, 1, 2, 0, 0, 0, 1, 1, 1, 7, 0, 15, 1, 6, 0, 1, 11, 2, 0, 15, 2, 1, 2, 2, 0, 0, 1, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in1 != in2:{:\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(in0)), i0) \\l abs(i0):{:\\nres0 = in1.endswith(in1.capitalize())\\nin2 = (s1[mod(i2,i2):i1][i1:max(i1, len(s0))] + in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = \"\";8\"\".rstrip(s0)\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [1], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 3, 1, 1, 0, 3], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2, 3, 2, 3], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 4, 4, 4, 2], [1, 0, 1, 1, 1], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 2, 0, 0, 2, 0, 1, 2, 3, 0, 2, 2, 2, 1, 3, 0, 4, 2, 1, 4, 1, 0], [2, 3, 2], [4], [0, 0, 1, 0, 0, 0, 2, 1, 1], [3, 0, 2, 1, 2], [7], [10], [0, 4], [7]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 11, 11, 8, 0, 35, 3, 14, 1, 2, 13, 5, 0, 30, 3, 1, 9, 5, 1, 1, 2, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(in1):{:\\nres0 = in1.capitalize() not in (in2[:i1][int(1.0):int(0.0)][i1:int(8.0)] + s1)\\ns0 = in1[int(7.0):len(\"\"$\"\")]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = (in1 + \"\"H0\"\"[:int(6.0)][divInt(int(6.0),min(abs(int(5.0)), int(3.0))):][len((in1 + \"\"k\"\"[:abs(int(3.0))].rstrip(\"\"4\"\".capitalize()))):int(63.0)])[i2:len(s2)]\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 0, 1, 1, 1, 1, 1], [5, 6, 3, 7, 6, 3, 6], [2, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [0, 1, 1, 0, 0, 0, 1], [], [2, 2, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0, 0], [3, 2, 1, 3, 2, 1, 2], [5], [5, 11], [7, 7, 6], [18, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 1, 12, 1, 4, 1, 1, 3, 7, 0, 13, 2, 0, 3, 7, 0, 2, 3, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(5.0):len(getCharFromString((\"\"/7\"\" + \"\"f\"\"), i2))][divInt(len(getCharFromString(in2, i2)[i1:int(63.0)]),len((s1 + \"\"\\\\\\\\7l6\"\"))):]) \\le int(7.0)\\ni0 += int(6.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1, 1], [2, 1, 0], [0, 0, 1, 1, 1, 1, 0], [0], [0, 0], [], [], [3, 1, 3], [0, 4, 4], [1, 2, 0, 2, 2], [0, 0], [1, 0, 3], [1], [], [0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8, 1, 3, 6, 6, 5, 2, 0, 2, 1, 3, 9, 4, 0, 7, 1, 7, 1, 4, 2, 9, 6], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0, 1, 1, 2, 2, 2, 2, 2, 0, 1, 2], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0, 1, 2, 2, 0, 1, 1, 0, 2, 2, 3, 3, 3, 2, 1, 3, 3, 1, 1, 0, 3, 0, 2, 0, 1, 3, 1, 2, 1, 3, 0, 3, 3, 1, 0, 2, 1, 2, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 4, 0, 3, 0, 4, 3, 2, 1, 4, 0, 3, 2, 1, 3, 0], [0, 1, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0], [1, 1, 1, 1, 1, 1, 1, 1], [4, 5, 5, 3, 0, 5, 5, 5, 3, 3, 1, 0, 1, 5, 1, 0], [1, 1, 1, 1, 1, 1], [0], [0, 0, 4, 0, 1, 0, 3, 2, 2, 0, 0, 4, 0, 2, 1, 2, 1, 3, 3, 3, 0, 2, 0, 3, 0, 2, 2, 0, 3, 2, 1, 3, 2, 2, 4, 0, 0, 1, 2, 0, 4, 2, 2, 1, 2, 0], [0, 3, 2, 1], [4], [0, 0, 1, 0, 2, 1, 0, 2, 1, 2, 0, 1, 0, 0], [2, 0, 2, 2, 3, 2], [5], [], [7, 0, 0, 3], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 3, 7, 1, 2, 0, 0, 3, 1, 5, 1, 3, 1, 0, 1, 1, 51, 51, 23, 4, 81, 18, 16, 12, 8, 16, 6, 1, 46, 4, 1, 14, 6, 1, 0, 4, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(7.0) \\l max(mod(saveOrd(in1),min(( i2 + i0 ), len(in2))), ( i2 - i1 )):{:\\nres0 = getCharFromString(in2, int(0.0)) not in \"\"7\"\"\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif in0 in (s0[i2:int(7.0)][min(i0, ( int(8.0) + int(9.0) )):int(8.0)] + in2):{:\\nloopBreak% = 0\\nfor in2 in in2.rstrip(\"\"F\"\"[:i1]):{:\\ni0 += int(5.0)\\ni1 += mod(i0,mod(( ( int(6.0) * i2 ) + int(2174.0) ),( i2 + int(20.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(65083.0)\\ni1 = saveOrd(\"\"0\"\"[int(305.0):int(5.0)])\\nres0 = (((in0 + in0[i1:]) + (s1 + s0[int(8.0):( mod(i2,int(72.0)) * int(9888.0) )][:i2])) + (\"\"0\"\"[( mod(len((s1.capitalize()[abs(max(( int(1.0) + saveOrd(in2) ), min(int(3.0), int(6.0)))):][:i2] + \"\">\"\")),len(s1[i2:mod(i2,int(6.0))])) * abs(int(5.0)) ):] + saveChr(( int(20213.0) + max(i0, len(\"\"3\"\"[min(int(9.0), i1):mod(int(4.0),mod(int(0.0),int(7.0)))][:i2])) )))) != s0[int(171429.0):int(6.0)]\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 1, 2, 1, 0, 1, 0, 2, 2, 2, 1, 1, 0, 1, 0], [1, 1, 0, 2, 1], [0, 1, 2, 2, 2, 0, 2, 1, 0, 1], [0], [0, 0, 0, 0], [], [], [3, 1, 2], [4, 4, 2], [1, 1, 1, 2, 2, 0, 0], [0, 0, 0], [1, 0], [1, 1], [], [0, 1], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6, 3, 2, 4, 1, 2, 8, 4, 2, 8, 3, 4, 8, 8, 1, 4, 6, 5, 4, 7, 1, 0, 6, 3, 9, 7, 3, 0, 4, 5, 0, 5], [1, 2, 1, 0, 2, 2, 0, 0, 1, 1, 2, 2, 1, 0, 1, 1, 1, 1, 0, 2, 0, 2, 1, 2, 2, 2, 0, 0, 1, 1, 1, 1, 2], [0, 1, 0], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3, 1, 1, 3, 2, 3, 3, 3, 2, 3, 2, 2, 3, 2, 0, 0, 3, 1, 2, 3, 2, 2, 1, 0, 2, 3, 2, 0, 3, 2, 3, 0, 3, 3, 1, 2, 3, 0, 1, 1, 2, 0, 3, 2, 0, 3, 1, 2, 1, 0, 3, 3, 1, 2, 1, 0, 2, 0, 0, 0, 3, 2, 2, 2, 1, 1, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 3, 2, 3, 3, 1, 3, 2, 1, 2, 2, 0, 2, 1, 3, 3, 2, 3, 1, 0, 1, 1, 2, 0, 1, 2, 2, 3, 2, 0, 0, 2, 2, 3, 3, 1, 3, 0, 0, 1, 1, 3, 0, 2, 3, 3, 1, 3, 1, 2, 1, 2, 1, 0, 1, 2, 1, 0, 2, 1, 2, 1, 0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0], [4, 1, 3, 3, 4, 2, 2, 0, 3, 2, 1, 0, 0, 4, 0, 3, 3, 4, 2, 0, 0, 3, 4, 0, 3, 0, 4, 0, 4, 3, 3, 0, 3, 1, 1, 2, 4, 4, 4], [0, 0, 0, 0, 1, 2, 0, 2, 0, 2, 2, 0, 1, 1, 1, 0, 0, 0, 2, 2, 1, 2, 2], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [3, 5, 1, 4, 4, 2, 5, 0, 1, 0, 0, 4, 3, 5, 4, 4, 5, 2, 2, 5, 2, 3, 0, 1, 4, 4], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 0, 2, 0, 4, 0, 1, 4, 2, 1, 1, 1, 0, 0, 1, 1, 3, 3, 0, 2, 0, 1, 1, 3, 3, 4, 2, 0, 3, 3, 1, 3, 1, 0, 3, 4, 0, 1, 2, 0, 0, 2, 2, 1, 1, 0, 2, 0, 2, 0, 4, 2, 0, 2, 1, 4, 0, 1], [0, 0, 0, 3, 2, 0, 2, 2], [0], [2, 0, 0, 0, 2, 1, 2, 1, 1, 1, 1, 1, 1], [0, 2, 0, 3, 3, 2, 2, 0, 0, 3, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 2, 2, 2], [5, 17, 0, 8, 24, 0], [5, 0, 7, 21], [5, 4, 5, 8, 3, 1, 9, 7], [25, 20, 3, 14, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 15, 15, 5, 10, 1, 4, 0, 0, 3, 3, 7, 3, 2, 2, 0, 2, 3, 38, 38, 33, 3, 150, 44, 39, 23, 22, 26, 23, 1, 70, 8, 1, 13, 23, 6, 4, 8, 5], "tree_depth": 71, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(in0[int(1.0):]) \\le max(i1, divInt(len(in2),i2)):{:\\nres0 = i1 \\le int(6.0)\\nif len(getCharFromString((\"\"F5\"\" + \"\"R\"\"), int(3.0))) == int(7.0):{:\\ni0 = saveOrd(getCharFromString(s1, int(6.0))[int(3.0):abs(( abs(min(len((in1 + \"\"@\"\")), divInt(abs(divInt(( max(mod(i2,i2), min(int(6.0), mod(min(( ( int(3.0) + i0 ) + ( saveOrd(in1) + divInt(i0,min(( len(s2[i1:len(getCharFromString(in2, saveOrd(\"\";\"\")))]) + int(2.0) ), ( abs(i1) - int(4.0) ))) ) ), int(1.0)),( i2 * min(( i2 + min(int(2.0), ( int(8.0) * i1 )) ), len(\"\"4\"\"[saveOrd(\"\"5\"\"):int(4.0)].lstrip())) )))) + ( int(2.0) * i0 ) ),mod(i1,i1))),i1))) * min(mod(mod(divInt(int(8.0),int(3.0)),int(4.0)),i1), mod(mod(i0,int(8.0)),divInt(divInt(i2,( len(\"\"A\"\") + ( min(saveOrd(s0), int(8.0)) - min(( int(1.0) - divInt(( i0 - divInt(int(4.0),saveOrd(s1)) ),len(\"\"I\"\")) ), mod(len(\"\"\"\"),int(6.0))) ) )),i2))) ))])\\ns0 = ((s0 + in1[int(5.0):]) + \"\"8\"\")\\nin0 = \"\"+fYa3\"\"\\nin2 = ((in1[:int(4.0)].capitalize() + ((\"\")\"\" + (\"\"h\"\" + in1)) + (getCharFromString(in2, divInt(i1,int(7.0))) + \"\"A\"\"))) + s2[( ( min(divInt(i2,i2), ( ( len(s2) + max(int(1.0), max(i2, i0)) ) + int(0.0) )) + int(6.0) ) * abs(i0) ):])\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in \"\"v\"\"[:( saveOrd(\"\"1\"\") * saveOrd(s2) )][:int(39.0)]:{:\\nloopBreak% = 0\\nwhile in0[:saveOrd(s0[:int(7.0)])] not in s1[:divInt(int(3.0),divInt(int(0.0),i1))].capitalize():{:\\nif \"\"9\"\"[:int(4.0)] in in1.capitalize():{:\\nb1 = True\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = \"\"7\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 -= ( int(5.0) * i1 )\\nb2 = False\\n:}\\ni1 = divInt(int(0.0),( int(5.0) * i2 ))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [1], [], [1], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 1, 1, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [0], [24], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 2, 2, 2, 0, 8, 2, 3, 0, 2, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(\"\"Y\"\")), mod(i0,i0)):{:\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [2], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 3, 9, 4, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 2, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [0, 1, 1, 1], [], [0, 4, 4, 1, 4, 0, 3, 2, 2, 0, 0, 1, 1], [0, 3, 2], [4], [0, 0, 1], [2, 0, 2, 1], [5], [20], [1, 1], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 4, 0, 23, 5, 6, 1, 4, 4, 4, 0, 13, 3, 1, 2, 4, 1, 1, 2, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(getCharFromString(\"\"1F\"\".rstrip(in2.capitalize()), mod(i2,i2)))), mod(( max(int(0.0), int(6.0)) * int(3.0) ),mod(min(saveOrd((in2[i2:int(9.0)][int(4.0):int(5.0)] + in0)), i1),int(6.0)))):{:\\nb0 = \"\"1\"\" == \"\"u\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 7, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 2, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [3, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 2, 1, 0, 4, 0], [1, 0, 0, 1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 0, 2, 1, 0, 4, 2, 1], [2, 3, 2], [4], [0, 0, 1, 1], [0, 1, 3, 3], [1], [4], [], [27, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 4, 4, 7, 0, 21, 3, 7, 1, 2, 10, 4, 0, 18, 3, 1, 4, 4, 1, 1, 0, 2], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(in1) \\l max(mod(len(in2),abs(max(i0, ( divInt(i0,i2) * i2 )))), len(in0)):{:\\nloopBreak% = 0\\nwhile i1 \\ge len(in1.rstrip((in1[i1:int(1.0)][int(7.0):i1] + s2)).capitalize()):{:\\nres0 = s1 != \"\"B\"\"[:int(8.0)]\\ns0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = \"\"e\\\\\\\\!\"\"[:int(7.0)].capitalize()\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 8, 8, 8, 6, 6, 5, 3, 3, 6, 3, 7, 5, 8, 4, 9, 1, 7, 1, 9, 3, 1, 0, 2, 4, 5, 7, 0, 2, 2, 6, 2, 7, 8], [0, 1, 1, 2, 1, 1, 1, 0, 2, 0, 2, 1, 2, 0, 1, 1, 0, 2, 0, 2, 2, 1, 1], [0, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 3, 1, 1, 0, 0, 1, 3, 1, 2, 1, 3, 3, 1, 1, 2, 1, 1, 2, 0, 3, 3, 3, 2, 0, 1, 1, 1, 1, 1, 3, 2, 0, 3, 3, 0, 1, 3, 2, 3, 2, 0, 0, 0, 3, 2, 2, 0, 0, 1, 3, 2, 2, 1, 3, 1, 1, 2, 2, 0, 2, 3, 3, 1, 1, 0, 3, 1, 3, 1, 3, 2, 2, 1, 0, 3, 2, 2, 0, 0, 0, 0, 2, 1, 2, 0, 2, 1, 0, 1, 2, 1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 0, 4, 1, 1, 4, 4, 1, 2, 1, 4, 4, 3, 2, 4, 1, 0, 2, 1], [2, 1, 0, 1, 2, 2, 1, 0, 1, 2], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [4, 5, 3, 3, 0, 5, 1, 5, 4, 2, 4, 0], [1, 1, 1, 1, 1], [], [0, 0, 0, 0, 4, 2, 3, 2, 2, 0, 0, 0, 3, 0, 2, 3, 3, 2, 4, 3, 2, 4, 1, 1, 0, 2, 2, 2, 1, 2, 2, 4, 2, 4, 2, 4, 4, 4, 2, 4, 4, 1, 1, 4, 4, 2, 0, 4, 0], [2, 3, 2, 3, 2, 1, 1, 0, 1, 3, 1, 3, 2], [4, 0, 0, 0], [0, 0, 1, 1, 1, 2, 1, 0, 1, 1, 2, 2, 2, 0, 2], [2, 3, 2, 3, 1], [], [15], [6, 4], [10, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 34, 34, 23, 0, 107, 24, 29, 10, 14, 12, 5, 0, 49, 13, 4, 15, 5, 0, 1, 2, 2], "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), int(1.0)), int(8.0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(in0):{:\\nb0 = (s0[:max(int(8.0), int(8.0))][i2:i1] + in2)[int(6.0):min(int(6.0), divInt(int(5.0),abs(min(int(3.0), int(3.0)))))].capitalize() != s1\\nin2 = (in1 + (((\"\"6\"\".capitalize()[divInt(int(63.0),int(75.0)):] + \"\"\"\\\\\"\"\").rstrip(s2)[:mod(i1,saveOrd(\"\"4\"\"[:max(max(( i1 - int(8.0) ), int(4.0)), int(9.0))][int(1.0):int(7.0)][:saveOrd(saveChr(mod(i0,saveOrd(saveChr(max(i2, int(1.0))))))[abs(( max(( i0 + i2 ), i1) - saveOrd(getCharFromString(saveChr(( ( i2 * i0 ) * int(9.0) ))[saveOrd(\"\"!\"\".lstrip()):( divInt(int(3.0),len(\"\"p\"\")) - int(1.0) )], int(0.0))) )):].capitalize()[mod(( i1 + ( abs(saveOrd(saveChr(int(2.0)))) - int(4.0) ) ),i1):].lstrip()[max(int(5.0), min(int(7.0), abs(divInt(mod(int(0.0),i0),max(divInt(divInt(i2,i0),i2), i2))))):][:mod(int(2.0),( i1 * mod(int(2.0),i1) ))])]))] + in1[int(6.0):].lstrip()) + s0.capitalize())[:mod(int(27.0),int(8.0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 2, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 0, 0, 2, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 1, 1, 1, 1], [1, 1, 3, 2, 3, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1, 0], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0, 3], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 2, 2, 1, 3, 1, 3, 3, 4, 0, 2, 1, 2, 4, 2, 4, 1, 1, 4, 0], [2, 3, 2, 1, 2], [4], [0, 0, 1, 2, 1, 2, 2], [1, 3, 3, 1, 2, 3, 3, 2, 2, 3, 0, 3], [14], [22, 6], [3, 2, 1], [5, 15, 16, 28, 0, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 7, 7, 8, 0, 29, 5, 9, 0, 5, 11, 12, 0, 30, 5, 1, 7, 12, 1, 2, 3, 6], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(mod(divInt(max(len(in1), abs(i0)),divInt(i0,i2)),i2), int(1.0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile i1 \\le len(in0):{:\\nres0 = in1 != in1.capitalize()\\nin2 = (s1[i1:i1][mod(i0,int(0.0)):int(8.0)] + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = \"\"w\",g3-\"\"[len((\"\"]21\"\" + ((s0.rstrip(\"\"\"\"[:int(7.0)]) + saveChr(divInt(int(6.0),saveOrd(\"\"O\"\")))[len(\"\";\"\"):].capitalize()[int(6.0):]) + in0.capitalize()))):][:int(5.0)]\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [1], [0, 1, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [9, 6, 3, 7, 6, 3, 6, 0], [2, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3, 3, 3, 3, 1, 0, 1, 1, 3, 3, 3], [1, 0, 1, 1, 0, 1], [2, 3, 3, 3, 4, 3, 1, 0, 4, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4, 5, 2], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1], [], [2, 0, 3, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 3, 3, 1, 3, 2, 4, 3, 0, 1, 4, 4, 1, 4, 2, 4, 3, 2, 4, 2, 0, 1, 3, 3, 0, 1, 1, 1, 4, 1], [0, 0, 0, 2, 2, 2, 0, 1, 1], [], [2, 0, 1, 1, 1, 2], [0, 3, 1, 3, 1, 0, 2, 2, 1, 0, 3, 2, 1, 1, 3, 3, 2], [5, 7, 13], [5, 11, 18, 13, 9], [9, 6, 4, 4], [6, 2, 25, 7, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 5, 1, 23, 1, 11, 1, 1, 7, 17, 0, 42, 9, 0, 6, 17, 3, 5, 4, 5], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(96.0)) \\le len(in0[i2:])\\ni2 *= divInt(len((getCharFromString((\"\"F\"\" + \"\"#f\"\"), i1) + getCharFromString(in2, i0)[int(3.0):len((s1 + \"\"\\\\\\t\"\"))])),int(7.0))\\nin1 = ((\"\"l\"\" + (getCharFromString((in1 + \"\"H9\"\"), int(6.0))[:saveOrd(\"\"6sN\"\".capitalize().capitalize())] + getCharFromString((saveChr(len(in2[max(min(int(3.0), i2), int(6.0)):]))[:int(0.0)] + \"\"@\"\"), saveOrd(((s2 + \"\"4\"\") + \"\"nj\"\")))[:len(\"\"$\"\")].capitalize())) + saveChr(saveOrd(\"\"@4\"\")))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 2, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 2, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [3, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 3, 3, 5, 5, 3], [1], [], [0, 0, 4, 2, 0, 0, 3, 2, 2, 0, 0, 4, 1, 4, 0], [0, 3, 2], [4], [0, 0, 1], [0], [16], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 4, 0, 22, 5, 6, 1, 4, 7, 1, 0, 15, 3, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l len(in1):{:\\nres0 = in2 not in getCharFromString(in0[mod(len(in0),len((in2[:mod(i2,i0)][mod(( max(int(6.0), int(8.0)) * mod(int(2.0),min(saveOrd(in2), i2)) ),int(5.0)):int(5.0)] + \"\"Q\"\".rstrip(in0.capitalize())))):int(6.0)], i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 4, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 2, 0, 2, 0, 0, 3, 1, 3, 1, 1, 3, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 1, 1, 1, 1], [1, 1, 3, 3, 1, 3, 3, 4, 1, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 3, 4, 5, 1, 5, 4], [0, 0, 0, 0, 0, 0, 0, 0, 1], [], [0, 0, 0, 0, 1, 0, 1, 2, 2, 1, 0, 0], [2, 3, 2], [4], [0, 0, 1], [2, 1, 2, 1, 0, 0, 3, 2, 0], [24, 10, 2], [19, 25], [2, 2, 8], [30]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 3, 3, 3, 0, 16, 3, 7, 0, 3, 5, 9, 0, 6, 0, 0, 0, 9, 3, 2, 3, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),len(in2)), divInt(i0,divInt(i1,i1))), max(int(1.0), len(in0))) \\l int(8.0):{:\\nloopBreak% = 0\\nwhile int(8.0) \\le len(in0):{:\\nres0 = \"\"2t2zYK_8C\"\" != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 2, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 2, 5, 5], [1], [], [1, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [0], [0], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 0, 19, 5, 5, 2, 3, 3, 1, 0, 5, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(\"\"A\"\"),len(in1)), max(i0, int(2.0))):{:\\nres0 = getCharFromString(in2, ( mod(( i0 + divInt(int(8.0),int(9.0)) ),min(i2, i1)) + int(5.0) )) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [1, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 0, 3, 1, 3, 3, 0], [1, 0, 1, 1, 1], [1, 2, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 3], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 4, 1, 5, 4], [1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 0, 2, 4, 0, 3, 1, 4, 0, 1, 4, 1], [2, 3, 2], [4], [1, 0, 0], [2, 0, 3], [6], [], [7], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 5, 0, 17, 2, 8, 1, 1, 7, 3, 0, 18, 3, 1, 2, 3, 1, 0, 1, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(abs(mod(len(in1),abs(max(i0, ( i1 * i1 ))))), i2) \\l int(1.0):{:\\nloopBreak% = 0\\nwhile len(in2) \\le len(in0):{:\\nres0 = (s1 + (in1 + in1.capitalize()[i1:saveOrd((\"\"7\"\" + s1.rstrip(\"\"G\"\")))]))[:int(9.0)] != \"\"\\\\\\n\"\".capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [0], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [1, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1], [3, 3, 2, 1, 3, 3, 1, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [1], [], [0, 1, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [3], [], [], [], [24]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 4, 4, 7, 0, 19, 2, 6, 1, 1, 8, 1, 0, 11, 1, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(int(1.0),len(in1)), abs(int(0.0))), ( i1 * i0 )) \\l i2:{:\\nloopBreak% = 0\\nwhile i1 \\le max(i0, len(\"\"?\"\")):{:\\nres0 = in2 in in0\\nin1 = in1.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = (s1[i1:int(8.0)][int(7.0):i1] + s0)\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [0, 1, 0], [0, 2, 1, 1, 1, 1], [0, 0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8, 6, 1, 7, 0, 7, 6, 7, 1, 5, 0, 3, 5], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 2, 2, 2, 0, 0, 2, 0, 2, 1, 1, 0, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 2, 2, 0, 0, 3, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0, 0, 1, 3, 3, 2, 0, 3, 2, 3, 3, 1, 0, 2, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 2, 0, 2, 2, 2, 1, 2, 1, 0, 0, 2, 0, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0], [1, 3, 3, 3, 0, 4, 3, 2, 1, 3], [0, 1, 0, 0, 0, 2, 0, 2, 0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [4, 5, 5, 3, 0, 5, 1, 3, 1, 1, 1, 3, 5], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0, 4, 4, 3, 2, 1, 2, 2, 2, 2, 2, 2, 2, 4, 3, 4, 1, 4, 0, 1, 3, 2, 1, 2, 3, 2, 1, 3, 1, 2, 1, 2, 3, 0, 0], [0, 3, 2, 1, 1, 2], [4], [0, 0, 1, 1, 2, 2, 0, 0, 1, 0, 1, 2, 0, 0, 2], [2, 0, 3, 1, 2, 3, 0, 2, 2, 3, 2, 2, 0], [15, 13, 16], [2], [6, 5, 6, 2, 0, 0], [24, 9, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 2, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 42, 42, 26, 2, 76, 20, 10, 12, 10, 13, 13, 2, 45, 6, 1, 15, 13, 3, 1, 6, 3], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(70.0) \\l max(mod(len(in2),( mod(i2,i0) + len(getCharFromString(in0, ( i2 - i1 ))) )), int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = in2\\nif s1 not in (in0[i2:int(8.0)][len(s1):i0] + (\"\"6\"\"[:mod(int(9.0),int(8.0))] + saveChr(int(5.0))[i1:int(6.0)][:mod(i0,mod(( ( int(2174.0) + i1 ) + int(20.0) ),( i0 + int(65083.0) )))][int(305.0):min(int(5.0), int(8.0))][i2:i2][int(72.0):][saveOrd((saveChr(len(\"\"P\"\")) + s1.capitalize())):][:divInt(i0,abs(( max(len(\"\"?\"\"), int(9888.0)) * i2 )))]).capitalize().rstrip((\"\"c5&N62\"\"[:divInt(i2,i2)] + (\"\"\"\\\\\"\"\"[i2:int(6170.0)] + (\"\"0\"\" + \"\"0Q\"\"[int(7.0):( int(6.0) + i0 )]))[int(7.0):]))):{:\\nloopBreak% = 0\\nfor s1 in (in0 + in2)[i0:]:{:\\ni2 *= divInt(i0,( ( divInt(int(1.0),mod(int(5.0),i2)) + i1 ) - ( i1 + i0 ) ))\\ni0 -= int(035.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [2, 1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [1], [], [0], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 1, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 4, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 1, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [2], [], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 0, 1, 1, 5, 5, 5, 0, 18, 5, 4, 2, 3, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(12.0) \\l max(mod(saveOrd(in1),len(\"\"5\"\")), ( i2 + i0 )):{:\\nif True:{:\\nres0 = mod(( divInt(i1,int(2.0)) + int(8.0) ),int(9.0)) \\le max(i1, i1)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [1, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0, 1], [1], [3, 3, 2, 3, 3, 0, 0, 2, 0, 0, 0, 0, 3, 2, 3, 0, 0, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 0, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 3, 0, 4, 0], [0, 1, 0, 1], [], [4, 2, 0, 0, 2, 0, 3, 2, 2, 0, 0, 0, 2, 1, 1, 0], [2, 3, 2], [4], [0, 0, 1, 1, 2], [1, 1, 0, 3], [13], [7, 15], [], [16]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 5, 5, 9, 0, 26, 4, 8, 1, 3, 9, 4, 0, 16, 1, 0, 5, 4, 1, 2, 0, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(min(mod(len(in1[abs(i0):i0].capitalize()),( i2 * i2 )), i1), i1) \\g max(divInt(len(in2),i1), i0):{:\\nloopBreak% = 0\\nwhile int(1.0) \\le i1:{:\\nres0 = in0[int(0.0):int(8.0)] != (in1[:len(in1)][:int(7.0)] + in2)\\nin0 = \"\"hp\"\"[divInt(int(6.0),saveOrd(\"\"N-\"\")):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = in1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 9, 7, 6, 6, 4, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 2, 1, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 2, 1, 3, 2, 3, 3, 3], [1, 0, 1, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2, 2, 2, 2, 4, 4], [1], [1, 0, 0, 1, 1], [4, 5, 3, 5, 4, 5, 2, 5, 4, 4], [1], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0, 0, 1], [2, 3, 2], [4], [0, 1, 0], [3], [], [], [], [30]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 8, 8, 4, 0, 34, 6, 16, 1, 5, 10, 1, 0, 14, 1, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(int(5.0),len(in1)), abs(i0)), ( i1 - i1 )) \\l i2:{:\\nloopBreak% = 0\\nwhile int(8.0) \\le max(len(in2), len(in0)):{:\\nres0 = in2 != in1.capitalize()\\nin2 = s2[saveOrd(in2):int(9.0)][:int(7.0)][len(in1):divInt(int(6.0),min(int(6.0), divInt(int(4.0),abs(abs(mod(int(3.0),abs(mod(abs(saveOrd(in1)),saveOrd(\"\"_\"\")))))))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1, 1, 1], [4, 5, 4, 2, 5, 5, 4, 2, 2], [1, 1, 1], [], [0, 4, 4, 0, 0, 0, 3, 2, 2, 0, 0, 3, 3, 2, 1, 3, 1, 2, 4, 3, 0, 3, 0, 0, 2, 2, 1], [0, 3, 2], [4], [0, 0, 1, 0, 1, 2], [3, 0, 2], [11], [], [6], [19]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 23, 23, 8, 0, 34, 8, 6, 1, 7, 9, 3, 0, 27, 3, 1, 6, 3, 1, 0, 1, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(getCharFromString(in2.rstrip(in1), divInt(i2,i0)))), i0):{:\\nres0 = s2 not in (in2[mod(max(int(6.0), int(8.0)),int(9.0)):int(5.0)][min(saveOrd(in2), i1):int(5.0)] + ((\"\":\"\"[:int(6.0)] + (\"\"L\"\" + (in1 + (s2 + s2)).capitalize()[int(2174.0):i2])) + \"\"6\"\"[int(20.0):][:( i1 + mod(mod(mod(int(65083.0),i1),int(305.0)),mod(i0,int(5.0))) )]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [2, 2, 2, 2, 2, 1, 0, 1, 1, 1, 1], [2, 1, 0, 1, 0], [0, 2, 1, 1, 1, 1], [0, 0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1, 4], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8, 4, 1, 4, 4, 3, 0, 5, 3, 3, 2, 1, 8, 6, 2], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0, 0, 1, 0, 2, 1, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 1, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 2, 1, 0, 0, 3, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0, 3, 0, 3, 3, 0, 3, 0, 2, 2, 2, 2, 3, 1, 2, 1, 0, 3, 2, 1, 2, 2, 2, 0, 2, 2, 2, 0, 0, 1, 3, 3, 0, 0, 1, 2, 3, 1, 1, 2, 3, 2, 0, 1, 0, 2, 3, 3, 2, 3, 2, 0, 1, 3, 3, 1, 0, 2, 1, 0, 1, 1, 1, 3, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 3, 3, 3, 0, 4, 3, 2, 1, 3, 2, 1, 0, 0, 2, 0, 0, 2, 0, 4, 0], [0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 2, 2], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 1, 3, 0, 5, 3, 0, 5, 3, 3, 2, 5, 2, 4], [1, 1, 1, 1, 1], [0, 0], [0, 4, 4, 0, 0, 0, 3, 2, 2, 0, 0, 0, 2, 1, 2, 1, 2, 2, 4, 0, 4, 0, 1, 2, 2, 1, 0, 2, 2, 0, 4, 0, 1], [0, 3, 2, 3, 2], [4, 5], [0, 0, 1, 2, 0, 1, 1, 2, 0, 0], [2, 1, 3, 2, 2], [], [1], [9, 1, 7], [22]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 5, 6, 2, 1, 0, 0, 1, 2, 4, 2, 2, 0, 0, 0, 2, 44, 44, 30, 4, 104, 28, 21, 12, 18, 15, 5, 2, 33, 5, 2, 10, 5, 0, 1, 3, 1], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(7.0) \\l max(mod(len(in1),mod(int(0.0),i2)), i0):{:\\nif getCharFromString(in0.rstrip(s1), len(in0)) not in (s0[mod(i2,i1):int(7.0)][i2:int(8.0)] + in2):{:\\nloopBreak% = 0\\nfor in0 in s0:{:\\nif len(\"\"9\"\"[:i0]) \\le ( int(9.0) + int(8.0) ):{:\\nloopBreak% = 0\\nfor in2 in \"\"b\"\"[int(5.0):]:{:\\nres0 = in0.capitalize()[:i1][int(6.0):mod(i0,mod(divInt(divInt(int(2174.0),i1),int(20.0)),( i0 - int(65083.0) )))].startswith(in0.strip(\"\"=\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns2 = \"\"1\"\"[int(305.0):][:min(int(5.0), int(8.0))]\\n:}\\ni2 += i2\\ni0 += saveOrd(in2)\\ni0 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(s2[abs(i2):max(i1, ( mod(mod(( len(in1.capitalize()) + int(72.0) ),( int(9888.0) * i0 )),abs(( int(4.0) + mod(( mod(i0,mod(divInt(divInt(i0,i2),int(1.0)),max(min(i1, i1), int(4.0)))) + mod(min(int(4.0), int(3.0)),divInt(abs(divInt(i1,int(0.0))),i2)) ),divInt(min(min(( abs(( i0 + int(5.0) )) * min(saveOrd(\"\"7\"\"), int(3.0)) ), i0), ( int(3.0) * i1 )),int(2.0))) ))) * int(1.0) ))][int(86.0):min(i0, int(2.0))])\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 2], [0, 0], [0], [2], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 0, 1, 0, 2], [0], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [1, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [1, 0, 0, 1, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [2, 1, 1, 0, 1], [5], [5, 0, 12], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 1, 5, 5, 4, 1, 12, 1, 4, 0, 1, 4, 5, 0, 13, 2, 0, 2, 5, 1, 3, 1, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not max(int(16.0), len(in0[i1:])) \\le divInt(len(in2),i0)\\nif getCharFromString((\"\"2\"\" + \"\"faF\"\"), i1) in getCharFromString(s1, int(3.0))[len((in1 + \"\"m\"\")):int(7.0)]:{:\\ni0 = int(6.0)\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [1], [2, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [0], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [1, 0, 0, 0, 0, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [3, 2, 1, 3, 3, 2], [5], [5], [5, 1], [6, 7, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 3, 6, 0, 7, 1, 0, 1, 6, 0, 1, 2, 3], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2[saveOrd(s1):]\\nres0 = int(16.0) \\le len(getCharFromString((\"\"#\"\" + \"\"5f$_1\"\"), i1))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 1, 2, 3, 3, 3, 0, 2, 0, 3, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 1], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1, 0, 3, 3], [2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5, 1, 4], [1, 1, 1, 1, 1, 1, 1, 0, 1], [], [0, 0, 4, 0, 0, 4, 3, 2, 2, 0, 0, 0, 3, 4, 3, 4, 3, 2, 4, 1, 2, 1, 1, 2, 1, 2, 4, 1, 1, 1, 1], [0, 3, 2, 0, 3, 0], [4, 5], [0, 0, 1, 2, 2, 0], [1, 3, 3, 3, 0, 2, 2, 3, 3], [10], [6], [9, 4], [8, 4, 14, 0, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 19, 19, 6, 0, 31, 3, 12, 1, 2, 8, 9, 0, 31, 6, 2, 6, 9, 1, 1, 2, 5], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(int(10.0), mod(len(in1),len(in2))) \\l max(i2, ( i0 * min(i2, i1) )):{:\\nres0 = getCharFromString(in2, saveOrd(in0)) not in (in2[len(in2):abs(i1)][int(2.0):int(8.0)] + s1).rstrip(((getCharFromString((\"\"g\"\".strip(\"\"%\"\"[i0:])[:int(9.0)] + \"\"!\"\"), int(5.0)) + \"\"+\"\"[max(int(5.0), mod(int(6.0),min(len(getCharFromString(\"\"K\"\", int(2174.0))[int(20.0):len(\"\"9\"\")]), int(65083.0)))):]).capitalize() + \"\"4\"\"))\\nin1 = \"\">\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [1], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 0, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [1, 5, 5, 3, 5, 5], [1], [], [0, 0, 1, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [2], [], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 2, 2, 2, 0, 8, 2, 3, 1, 1, 5, 1, 0, 5, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\l max(mod(len(s1),len(in2)), ( i0 + i0 )):{:\\nres0 = \"\"5\"\" not in in2\\n:}\\nin0 = in2\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 1], [2, 2, 1, 1, 0], [2, 0], [0, 2, 2], [0], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 7, 9, 8, 7, 7, 8, 4, 3, 9, 6], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 1, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1, 3, 3, 1, 1, 0, 2, 2, 0, 0, 2, 0, 1, 1, 1, 2, 2, 0, 0, 0, 1, 3, 0, 2, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [4, 3, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1, 0, 1, 1], [2, 5, 3, 2, 4, 5, 1, 4, 3, 3, 4, 3, 0], [1, 0, 1, 1, 0, 0, 1], [0], [0, 0, 0, 2, 0, 0, 3, 0, 2, 1, 0, 0, 3, 1, 4, 2, 2, 2, 4, 4, 0, 0, 3, 3, 1, 1, 1], [0, 3, 2], [4], [0, 2, 1, 0, 0], [0, 0, 3, 1, 0, 1, 3], [4, 5, 7], [10, 1], [], [6, 19]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 0, 21, 8, 3, 6, 2, 11, 1, 1, 12, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le ( divInt(len(in2),( len(in0) + ( ( i1 + int(4.0) ) + int(7.0) ) )) * divInt(int(9.0),( int(8.0) - i0 )) ):{:\\nloopBreak% = 0\\nfor s2 in in1[int(7.0):i2]:{:\\nres0 = in2 in (s1 + \"\"E\"\"[( i1 * int(7.0) ):])\\nin1 = in0\\nin0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 2, 0, 1, 2, 2, 0, 2, 0, 0, 2, 1, 0], [1, 0, 2, 0, 1], [1, 1, 2, 2, 0, 1, 0, 2, 0], [0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [3, 1, 0], [4, 4, 4, 4], [1, 1, 1, 2, 1, 0], [0, 0, 0, 0], [5], [1], [], [1], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6, 4, 8, 5, 2, 2, 1, 7, 2, 9, 0, 5, 8, 3, 0, 3, 1, 6, 8], [1, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 0, 2, 1, 1, 1, 2, 0, 2, 1, 1, 1, 2, 2, 0, 0, 1, 0, 2, 2, 0, 0], [0, 1, 0], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3, 2, 0, 3, 3, 1, 3, 3, 3, 3, 1, 0, 2, 0, 2, 3, 1, 0, 2, 1, 3, 0, 2, 3, 0, 2, 2, 3, 3, 1, 1, 2, 0, 0, 2, 0, 0, 0, 3, 2, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 2, 2, 0, 3, 3, 1, 0, 2, 2, 2, 0, 0, 1, 0, 1, 1, 1, 2, 2, 1, 3, 0, 3, 2, 0, 0, 1, 1, 2, 0, 3, 0, 2, 0, 2, 3, 2, 2, 0, 0, 2, 0, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [4, 4, 3, 3, 4, 4, 3, 1, 0, 1, 4, 3, 4, 1, 4, 2, 3, 3, 1, 3, 2, 2, 3, 1], [2, 0, 0, 0, 1, 2, 0, 0, 1, 1, 0, 2, 2], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [3, 5, 1, 4, 4, 3, 0, 3, 0, 4, 2, 0, 1, 3, 4, 5, 4, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 3, 0, 0, 2, 1, 3, 4, 0, 2, 1, 1, 4, 2, 2, 0, 2, 4, 0, 1, 2, 0, 4, 4, 1, 0, 2, 0, 4, 2, 1, 4, 2, 3, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 3, 2, 3, 0], [2, 4], [2, 0, 0, 1, 1, 0, 0, 2, 0, 0, 0], [2, 2, 0, 0, 3, 0, 2, 0, 0, 1, 0, 2, 1, 3, 0, 0, 0, 3, 0, 3, 1], [5, 3, 20, 0, 14, 3, 15, 18, 17, 3], [5, 9, 19], [7, 2, 3, 2], [30, 13, 26, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 14, 14, 5, 9, 2, 7, 0, 0, 3, 4, 6, 4, 1, 1, 0, 1, 2, 25, 25, 36, 3, 108, 29, 24, 13, 17, 18, 21, 2, 51, 9, 2, 11, 21, 10, 3, 4, 4], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(in0[int(16.0):])\\ni1 *= saveOrd(in2)\\nif i1 \\le divInt(len(getCharFromString((\"\"72F\"\" + \"\"D_U3AOf\"\"), i0)),i2):{:\\ns1 = getCharFromString(in1, int(3.0))[len((in1 + \"\"D\"\")):int(7.0)]\\nin0 = (s0 + in0)\\nloopBreak% = 0\\nfor s0 in \"\"2\"\"[int(6.0):saveOrd((getCharFromString(in1, ( i2 + saveOrd(\"\"j\"\"[:len(\"\"*\"\")]) )) + saveChr(int(3.0))))]:{:\\nloopBreak% = 0\\nwhile max(min(max(saveOrd(s2[int(6.0):i2][:divInt(i1,divInt(len(saveChr(int(4.0))[i2:( int(8.0) + saveOrd(s0) )]),i2))]), divInt(max(i1, ( mod(saveOrd(\"\"P\"\"),abs(int(5.0))) + int(2.0) )),mod(i2,i1))), ( i1 - i1 )), i0) \\le len(s1[mod(( len(\"\"S\"\".capitalize().strip()) * int(2.0) ),( int(1.0) + i2 )):]):{:\\nres0 = ( i1 + ( int(7.0) - divInt(divInt(i1,max(len(in0), int(2.0))),i1) ) ) \\le divInt(mod(( i2 - i0 ),int(9.0)),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in in2[int(058.0):int(3.0)]:{:\\ni1 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = \"\"R\"\"[mod(( int(3.0) + abs(i1) ),abs(mod(i1,i2))):int(1.0)].rstrip(getCharFromString((\"\"[\"\" + \"\"D\"\")[int(6.0):divInt(i2,len(\"\"\"\"))], i0)).endswith(in1)\\nif divInt(i0,( max(divInt(( i1 * i0 ),mod(i2,int(8.0))), i2) * i0 )) \\le i0:{:\\ns0 = \"\"t\"\"\\n:}else:{:\\nb0 = False\\n:}\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 1, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3], [], [], [], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 1, 3, 3, 1, 0, 5, 1, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(\"\".\"\")), mod(i2,i0)):{:\\nres0 = getCharFromString(in2, mod(( max(int(2.0), int(8.0)) * int(9.0) ),int(5.0))) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 3, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5, 0, 2], [0, 1, 1, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 3, 3, 0, 2, 3, 1, 3, 3, 3, 3, 2, 1, 2, 1, 2, 1, 1, 3, 3, 0, 3, 2, 3, 1, 0], [1, 0, 1, 1, 1, 1, 1, 0, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 3, 3, 1, 2, 4, 4, 2, 4, 3, 4], [2, 1], [1, 0, 0, 1, 0, 1, 1], [4, 5, 3, 1, 2, 5, 1, 5, 4, 5, 4, 2], [1, 1], [], [0, 0, 0, 0, 4, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 2, 4, 2, 1, 2, 1, 4, 0, 0, 0], [2, 3, 2], [4], [0, 0, 0, 2, 0, 1, 1, 1], [1, 1], [], [4, 14], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 15, 15, 7, 0, 53, 9, 24, 2, 7, 12, 2, 0, 25, 3, 1, 8, 2, 0, 2, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), i2), int(1.0)) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le divInt(saveOrd(s1),int(3.0)):{:\\nres0 = s2.capitalize() != in2[max(min(int(8.0), int(7.0)), abs(int(6.0))):divInt(int(6.0),abs(abs(int(5.0))))][abs(len(s1)):i1][mod(len(in2),int(5.0)):max(abs(saveOrd(in1[saveOrd(\"\"e\"\"[:divInt(int(3.0),mod(int(63.0),( int(75.0) - int(0.0) )))].rstrip(\"\"o\"\"[:abs(saveOrd(in2.capitalize()))])[:i1]):len(in1)][mod(saveOrd(s2),int(2.0)):])), i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1], [2, 2, 1, 1, 1, 1, 1, 0], [0, 0], [0, 2, 2, 1, 2, 1], [0, 0], [0, 0], [], [], [3], [0, 4, 2], [1, 1, 1], [0, 0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 8, 5, 3, 2, 7, 5, 3, 3, 6, 3, 1, 3, 7, 1, 1, 3, 9, 1, 6, 6, 5, 3, 7, 6, 8], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0, 0, 1, 1], [1, 1, 0, 0, 0], [3, 2, 2, 3, 1, 3, 0, 1, 0, 0, 0, 1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1, 0, 3, 0, 3, 2, 0, 2, 3, 0, 3, 3, 1, 3, 3, 2, 2, 2, 1, 0, 1, 2, 1, 1, 3, 0, 0, 1, 0, 2, 1, 2, 1, 3, 1, 3, 3, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 3, 3, 1, 3, 0, 3, 1, 0, 4, 0, 0, 1, 2, 2, 4, 3, 2, 2], [1, 1, 0, 0, 2], [1, 1, 0, 1, 1, 1, 0], [4, 5, 4, 5, 4, 3, 3, 3, 0, 1, 0, 0, 5, 4, 0, 1, 2, 2, 2, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1], [0, 0], [0, 0, 0, 2, 3, 2, 0, 2, 2, 0, 0, 2, 0, 0, 3, 3, 3, 1, 3, 1, 3, 4, 4, 3, 4, 1, 2, 2, 4, 4, 1, 2, 1, 2, 1, 2, 4, 3, 3, 0, 0, 3, 0, 0, 0, 4, 4, 1, 2, 0, 3, 3, 1, 3, 1, 3, 3, 4, 0, 4, 1, 0, 2, 4], [0, 3, 2, 2, 2, 0, 0, 2, 1, 0, 1], [4], [2, 0, 1, 0, 0, 1, 1, 2, 1, 2, 0, 1], [3, 1, 2, 1, 1, 2, 0, 1, 0, 1, 0, 0, 3, 2, 0, 0, 2], [10, 3, 21, 24, 25, 9], [18, 17, 3, 7, 20], [5, 0, 5, 9], [14, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 2, 6, 2, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 26, 26, 16, 2, 68, 10, 20, 5, 7, 21, 17, 2, 64, 11, 1, 12, 17, 6, 5, 4, 2], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = max(mod(mod(max(int(28.0), len(in1)),i1),int(5.0)), i0) \\l i2\\nin0 = (in0[i1:int(3.0)] + in0[len(s0):int(2.0)][:max(len(s1[int(7.0):int(5.0)]), int(3.0))])[int(3.0):]\\ns0 = s0\\ni1 -= int(63.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = (((\"\"+s\"\" + (\"\"5\"\" + (getCharFromString((\"\"r\"\".capitalize() + \"\"d\"\".capitalize().capitalize()[:min(int(1.0), len(\"\"0\"\"[int(3.0):]))][:i1]).rstrip(\"\"K\"\"[:max(int(7.0), int(1.0))]), i1) + getCharFromString(((in1 + s0) + (s1 + s2)), min(i0, saveOrd(s2)))[( i1 - divInt(min(i0, min(max(int(1.0), abs(abs(mod(mod(( int(3.0) + i2 ),int(9.0)),mod(int(1.0),int(6.0)))))), saveOrd(getCharFromString(\"\"h\"\".capitalize(), i2)))),i0) ):]))) + s2[int(6.0):i0]) + ((\"\"Du\"\" + (\"\"VY@5\"\" + ((saveChr(( int(5.0) + divInt(int(3.0),len(s1)) )) + getCharFromString(\"\"ZJ9\"\", int(7.0))) + s0))) + saveChr(abs(abs(i1)))[:int(6.0)]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= int(8.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 3, 8, 7, 7, 1, 9, 9, 0, 0, 8, 9, 6, 6, 8, 6, 4, 3, 4], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0, 1, 2], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 2, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0, 3, 1, 1, 3, 2, 3, 1, 3, 0, 3, 3, 0, 0, 2, 2, 0, 1, 1, 3, 1, 3, 0, 3, 1, 3, 0, 0, 0, 3, 1, 3, 3, 2, 2, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [4, 3, 3, 0, 0, 2, 0, 0, 4, 3, 1, 0, 0, 0, 2, 1], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0, 1, 1, 0], [0, 5, 3, 2, 4, 5, 1, 3], [1], [], [0, 2, 1, 2, 3, 0, 3, 2, 2, 0, 0, 2, 2, 0, 3, 4, 4, 0, 2, 0, 4, 0], [0, 3, 2], [4], [2, 2, 2, 1, 2, 0, 0], [1], [], [8], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 20, 20, 15, 0, 60, 14, 16, 7, 7, 8, 1, 0, 22, 3, 1, 7, 1, 0, 1, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(\"\"i\"\"[divInt(len((in2 + (in0[:( ( divInt(int(4.0),( int(8.0) + i1 )) + ( int(3.0) + i2 ) ) * int(8.0) )][i2:] + s2))[( i1 - int(7.0) ):]),i2):]),min(int(71990.0), int(08.0))) * min(divInt(abs(int(9.0)),min(i1, min(saveOrd(in1[i1:i0][( mod(i1,int(6.0)) + int(6.0) ):]), len((getCharFromString(in2.rstrip(s1[int(8.0):max(i0, min(int(6.0), min(i2, i2)))]), i0) + in0.capitalize()))))), min(int(4.0), abs(max(mod(divInt(int(3.0),int(4.0)),i1), i2)))) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 2, 1, 2, 0], [1, 1, 1, 1, 1, 1, 1], [3, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 1, 0, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [1], [], [6], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 6, 6, 3, 0, 18, 7, 3, 0, 7, 3, 1, 0, 5, 1, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(mod(mod(len(in0),mod(len(in2),mod(mod(i1,int(10.0)),int(0.0)))),mod(int(8.0),mod(int(9.0),i0))), int(8.0)) \\l i2:{:\\nres0 = \"\"g\"\".capitalize() not in in2\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 0], [0, 2], [0], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 2, 2, 1, 2, 1], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 3, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 1, 0, 1], [4, 5, 3, 1, 1, 5, 1, 0, 4], [0, 1], [0], [0, 0, 0, 0, 4, 0, 3, 2, 2, 4, 0, 0, 1], [2, 3, 2], [4], [0, 0, 1], [0, 2], [1], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 6, 0, 19, 2, 8, 1, 1, 9, 2, 1, 13, 2, 1, 2, 2, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(int(1.0), mod(max(len(in1), abs(i0)),( i1 * max(i2, i2) ))) \\l len(in2):{:\\nloopBreak% = 0\\nfor in0 in s1:{:\\nres0 = len(s1) \\le saveOrd(in2.capitalize())\\ns1 = (s0.rstrip(in1)[i1:int(0.0)][int(8.0):i2] + \"\"B1\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [1], [3, 1, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [0, 1, 0, 1, 0, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [2, 2, 2, 3, 2, 3], [5], [5], [8, 6, 5, 6], [12, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 10, 1, 5, 1, 1, 4, 6, 0, 13, 2, 0, 2, 6, 0, 0, 4, 2], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(15.0):]) \\le len(in2)\\ni1 *= len(getCharFromString((\"\"86\"\" + \"\"5)\"\"), divInt(len(getCharFromString(s1, i2)[i1:int(3.0)]),saveOrd((in1 + \"\"6+\"\")))))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1], [2, 2, 1, 1, 0, 2, 1], [2, 2, 1], [0, 2, 0, 2], [], [0, 0], [], [], [3, 1, 3], [0, 4, 5], [1, 1, 2, 1, 0], [0, 0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 1, 1, 1, 2, 0], [1], [3, 3, 2, 3, 3, 2, 0, 2, 0, 0, 3, 1, 3, 3, 3, 3, 1, 1, 0, 1, 1, 3, 1, 0, 1, 3, 3, 1, 1, 2, 0, 3, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 1, 3, 1], [2], [1, 0, 0, 1], [0, 5, 2, 3, 4, 5, 1, 5, 4, 3, 1, 4, 5, 3, 3], [0, 1, 1, 0, 1, 1], [], [1, 0, 0, 1, 4, 0, 3, 2, 2, 0, 0, 0, 3, 0, 4, 0, 0, 4, 3, 3, 0, 3, 1, 0, 2, 1], [2, 3, 2, 0], [4], [0, 0, 1], [2, 3, 2, 3, 1, 2], [], [10], [2, 1, 1], [23, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 0, 1, 0, 0, 3, 3, 5, 3, 1, 1, 0, 0, 1, 9, 9, 8, 0, 35, 4, 14, 1, 3, 13, 6, 0, 26, 3, 1, 3, 6, 0, 1, 3, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(\"\"2>\"\"),abs(( i0 * divInt(i1,i1) ))), max(int(1.0), len(s0))), len(in2)) \\l saveOrd(\"\"1\"\"):{:\\nloopBreak% = 0\\nwhile max(int(8.0), int(8.0)) \\le i1:{:\\nres0 = s2.capitalize() != (in0[int(7.0):int(6.0)][min(int(6.0), i1):int(5.0)] + in1)\\nin2 = s1\\nb1 = abs(max(int(3.0), int(3.0))) != divInt(i1,len((in2 + in1.rstrip(in0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif res0:{:\\ns1 = ((in1 + (\"\"=k\"\" + in2)) + \"\"1\"\"[:max(i2, i0)]).capitalize()\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 2, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 0, 5, 5], [1], [], [1, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [0], [8], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 6, 6, 4, 0, 19, 6, 4, 2, 4, 3, 1, 0, 5, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\l max(mod(len(\"\"I\"\"),len(in1)), ( mod(i2,( divInt(mod(i0,int(2.0)),int(8.0)) + int(9.0) )) - max(i2, i1) )):{:\\nres0 = getCharFromString(in2, int(5.0)) not in in2\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 3, 9, 8, 7, 7, 1], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [1], [], [13], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 2, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),divInt(len(\"\"n\"\"),( ( i2 + int(4.0) ) + int(3.0) ))) + divInt(int(9.0),( int(8.0) * i2 )) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 1, 2, 2, 0, 1, 1], [1], [3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [1, 5, 3, 4, 4, 5, 1, 0, 4], [0, 1], [], [0, 4, 0, 0, 1, 0, 3, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [2, 1], [], [8], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 5, 0, 13, 1, 7, 0, 1, 4, 2, 0, 6, 1, 0, 0, 2, 0, 1, 1, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(len(s1), abs(max(len(in2.capitalize()), i2))), mod(i1,i2)) \\l i2:{:\\nloopBreak% = 0\\nwhile i0 \\le len(in0):{:\\nres0 = \"\"0i\"\" != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0], [1], [3], [1], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 1, 3, 2, 0, 0, 3, 2, 2, 0, 1, 2, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 3, 5, 5], [0, 0, 1], [], [1, 0, 4, 3, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3, 0, 1], [23], [2], [], [22]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 4, 2, 1, 1, 1, 0, 0, 12, 12, 6, 0, 23, 5, 4, 2, 3, 5, 3, 0, 11, 1, 0, 2, 3, 1, 1, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(int(7.0),len(\"\"=Xc\"\")), ( i2 + i0 )):{:\\nb0 = ( len(in1) \\le divInt(( i2 - int(8.0) ),mod(int(9.0),min(i1, i2))) or getCharFromString((in2 + in2), int(5.0)) not in (in0[int(5.0):int(6.0)][i1:int(2174.0)] + in2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 8, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 0, 1, 2, 1, 0, 0], [1], [3, 3, 2, 1, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 1, 1, 0, 1, 2, 2, 0], [2], [1, 0, 0, 1], [4, 5, 5, 1, 4, 2, 1, 5, 4], [1], [], [0, 0, 0, 0, 4, 0, 2, 4, 2, 0, 1, 0], [2, 3, 2], [4], [0, 0, 0], [2], [], [], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 9, 9, 6, 0, 31, 3, 13, 1, 2, 7, 1, 0, 11, 2, 1, 2, 1, 0, 0, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(int(1.0),len(in1)), abs(i2)), ( i0 * i1 )) \\l i2:{:\\nloopBreak% = 0\\nwhile i1 \\le max(len(in2), len(in2)):{:\\nres0 = s1 != in1.capitalize()\\ns2 = s1[max(int(8.0), int(8.0)):max(int(8.0), int(6.0))].rstrip(\"\"9\"\")[min(int(6.0), divInt(int(5.0),max(abs(int(3.0)), int(3.0)))):abs(i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 3, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [0, 1], [], [0, 0, 4, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3, 0], [8], [], [], [24]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 2, 0, 21, 4, 7, 1, 3, 6, 2, 0, 11, 1, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(20.0) \\l max(mod(len(in1),len(in2)), mod(max(i2, mod(( min(int(0.0), int(8.0)) * int(9.0) ),int(5.0))),saveOrd(getCharFromString(\"\"?I\"\", len(in2))))):{:\\nres0 = in0 not in (in2[i0:int(5.0)][int(6.0):int(2174.0)] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 6, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 2, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [2], [], [], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 0, 19, 5, 5, 2, 3, 3, 1, 0, 5, 1, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), max(( int(2.0) + mod(( divInt(i2,int(8.0)) + int(9.0) ),int(6.0)) ), min(i2, i2))):{:\\nres0 = getCharFromString(\"\"3\"\", int(5.0)) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2, 2], [0, 0], [3, 3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 2, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 2, 3, 4, 4, 5, 1, 0, 4, 0], [1, 0, 1], [], [2, 0, 0, 0, 4, 0, 0, 2, 2, 0, 1, 0, 2, 1], [2, 3, 2], [4], [0, 0, 1, 0], [0, 3, 2], [11], [], [7], [4]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 1, 3, 1, 2, 0, 0, 0, 1, 3, 3, 8, 0, 20, 2, 7, 1, 1, 9, 3, 0, 14, 1, 0, 4, 3, 1, 0, 1, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1[abs(max(i0, ( i0 * i2 ))):i2]),i1), len(s2)), i2) \\l len(in0):{:\\nloopBreak% = 0\\nwhile in1.capitalize() != in1:{:\\nres0 = in2[:i1][int(1.0):int(0.0)] != \"\"L\"\"\\ns1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin1 = \"\"!7\"\"[i0:int(8.0)]\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [3], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [3, 8, 3, 8, 7, 7, 1, 9, 5, 6, 9], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [2, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 1, 3, 1, 0, 0, 3, 2, 3, 3, 3, 0, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0, 2, 2, 2], [0, 2, 2, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [2, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 4, 0, 1], [0, 3, 2], [4], [0, 0, 1, 1], [3], [], [], [], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 10, 0, 36, 10, 8, 7, 3, 5, 1, 0, 15, 3, 1, 4, 1, 0, 0, 0, 1], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( mod(divInt(saveOrd(getCharFromString(s0, ( len((in2 + (in0[:( divInt(i0,len(s2)) + int(3.0) )][:int(8.0)] + in1.capitalize().rstrip(\"\"\"\"\")))[i2:( int(3.0) * i2 )]) * int(8.0) ))[i1:( i2 * int(7.0) )]),int(7.0)),min(int(1.0), i1)) - i1 ) \\le min(( abs(abs(abs(i0))) * i1 ), ( i0 + int(9569.0) ))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 5, 0, 3, 9, 4, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8, 6, 5], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 3, 1, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 0], [4, 5, 5, 3, 5, 5, 4], [1, 0, 1, 0, 1, 1], [], [0, 0, 4, 0, 4, 0, 3, 2, 2, 0, 0, 4, 0, 4, 2, 2, 2, 1, 3, 1, 2, 3, 2, 1, 2, 1], [0, 3, 2, 3], [4, 3], [0, 0, 1, 1, 1, 1, 2, 2], [3, 3, 0, 3, 3, 1], [23], [15], [], [29, 14, 22, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 32, 32, 5, 0, 38, 9, 8, 3, 6, 7, 6, 0, 26, 4, 2, 8, 6, 1, 1, 0, 4], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l max(mod(len(in1),len(in2)), mod(max(int(0.0), mod(( min(int(3.0), int(9.0)) * int(4.0) ),int(5.0))),saveOrd(getCharFromString(in2, len(in0.rstrip((in2[i2:int(6.0)][int(2174.0):int(20.0)] + in2))))))):{:\\nres0 = in1.capitalize() not in \"\"^\"\"[:i2][:int(65083.0)][:mod(i2,mod(divInt(( int(305.0) - i1 ),int(5.0)),( i2 + int(8.0) )))].lstrip((\"\"+X\"\" + (\"\"=@\"\"[int(72.0):] + \"\"p\"\"[abs(int(9888.0)):])[:int(65.0)]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 8, 8, 3, 6, 6, 5, 3, 3, 5, 3, 7, 5], [0, 1, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 3, 3, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 3], [2], [1, 0, 0, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4, 4, 2], [1], [], [0, 4, 0, 0, 4, 0, 2, 0, 2, 0, 4, 0, 3, 3, 0, 4, 0, 1, 0], [2, 3, 2, 0], [4], [2, 0, 0], [1], [], [2], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 11, 11, 1, 0, 29, 3, 15, 1, 2, 11, 1, 0, 19, 4, 1, 2, 1, 0, 1, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(in1)), abs(max(i0, mod(( len(in2.capitalize()) * len(in0) ),int(8.0))))) \\l saveOrd(s1.rstrip(in1[max(min(abs(int(8.0)), int(3.0)), abs(int(6.0))):])):{:\\nloopBreak% = 0\\nwhile int(6.0) \\le abs(int(5.0)):{:\\nres0 = in2[divInt(int(3.0),abs(len(s1.capitalize()))):int(3.0)] != ((in2 + getCharFromString(in1, int(53.0))) + \"\"c\"\")\\nin1 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1], [4, 7, 2, 8, 7, 7, 1, 6, 3, 7, 6, 1, 8, 3, 4, 5, 7, 1, 2, 2, 8, 9, 2, 5, 2, 1, 1], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0, 2, 1, 2, 1, 0], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 2, 1, 2, 1, 3, 2, 1, 0, 1, 0, 2, 0, 1, 2, 1, 1, 3, 2, 2, 0, 3, 2, 2, 2, 1, 2, 0, 1, 2, 3, 0, 0, 1, 1, 2, 2, 0, 0, 2, 2, 2, 3, 3, 2, 3, 0, 3, 2, 1, 1, 0, 1, 3, 2, 0, 3, 3, 1, 2, 1, 0, 3, 0, 3, 0, 1, 3, 3, 1, 1, 3, 2, 3, 3, 0, 3, 3, 2, 3, 1, 0, 0, 2, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [1, 3, 3, 0, 0, 3, 1, 3, 0, 4, 0, 0, 2, 4, 0, 4, 4, 3, 3, 0, 0, 4, 2, 3, 3], [0, 0, 1, 2, 1, 2, 0, 0, 0, 2, 0, 1, 1, 1, 1, 2, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 5, 3, 2, 4, 5, 1, 2, 5, 2, 0, 4], [1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 0, 2, 2, 4, 2, 4, 2, 4, 0, 0, 1, 1, 1, 1, 2, 0, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1, 1, 2, 1, 1, 2, 1, 0], [2, 1, 0, 1], [18], [21, 14], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 27, 27, 18, 0, 93, 28, 25, 17, 11, 12, 4, 0, 31, 3, 1, 10, 4, 1, 2, 1, 0], "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(s0),divInt(len(in2),min(( ( int(4.0) + divInt(int(7.0),min(( int(2.0) + i1 ), int(8.0))) ) - i2 ), ( i2 * int(7.0) )))) - ( int(71.0) * int(6.0) ) ), len(in0)) \\l ( ( i1 + max(( divInt(( int(37.0) + ( i2 + int(6.0) ) ),mod(len((s2 + (in1[:i1][i1:int(1.0)] + in2))[int(8.0):]),( ( i0 * i1 ) + ( ( divInt(min(saveOrd(s1[:divInt(min(i0, min(( int(3.0) - int(4.0) ), i2)),int(5.0))]), abs(( i2 - saveOrd(getCharFromString(s2.capitalize()[min(int(7.0), mod(int(1.0),i0)):].rstrip(in2)[:saveOrd(\"\"9\"\")], i2)[:saveOrd(\"\"v\"\")][i1:]) ))),int(2.0)) - len(\"\"S\"\") ) - len(\"\"o\"\") ) ))) * int(28.0) ), int(92.0)) ) + min(divInt(min(saveOrd(s2[:i2]), abs(len(s0[divInt(len(in1),int(5.0)):i1]))),i0), divInt(int(21.0),int(1.0))) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 1], [2, 2, 1, 2, 1, 2, 2, 0, 0], [2, 2, 1, 0, 2], [0, 2, 1, 0], [0], [0, 0], [], [], [3, 2, 3], [0, 4, 2], [1, 1, 2, 1, 0, 2], [0, 0, 0], [3, 0], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 8, 8, 6, 6, 6, 5, 3, 3, 6, 3, 7, 5, 2, 3, 2, 8, 4, 1, 9, 7], [0, 1, 1, 2, 1, 2, 1, 1, 1, 1, 0, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 2, 2, 1, 3, 3, 1, 1, 3, 0, 0, 1, 2, 2, 2, 1, 2, 2, 3, 2, 3, 0, 2, 1, 2, 1, 2, 1, 1, 0, 3, 1, 1, 1, 2, 0, 0, 1, 3, 3], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [1, 1, 3, 2, 1, 3, 3, 0, 1, 0, 2, 2, 2, 0, 3, 3, 1, 4, 3], [2, 1, 0, 2, 2, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0], [4, 5, 3, 1, 4, 5, 1, 5, 4, 3, 3, 5], [1, 1, 1, 1], [0], [0, 0, 0, 0, 4, 0, 2, 4, 2, 0, 0, 0, 4, 2, 1, 1, 0, 0, 1, 1], [2, 3, 2], [4], [0, 0, 0], [3, 3, 2, 0], [4], [], [2], [11, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 5, 4, 1, 2, 0, 0, 3, 3, 6, 3, 2, 1, 0, 0, 1, 21, 21, 12, 1, 61, 14, 19, 8, 7, 12, 4, 1, 20, 3, 1, 3, 4, 1, 0, 1, 2], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),abs(max(i0, ( i1 * i1 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le min(max(int(1.0), int(8.0)), min(int(8.0), int(6.0))):{:\\nres0 = s1 != in1.capitalize()\\nif abs(( divInt(int(6.0),abs(abs(int(6.0)))) - int(5.0) )) == min(i2, i1):{:\\nin2 = s1[int(3.0):divInt(mod(( int(3.0) + ( ( len(in2) * ( len(in1) * i1 ) ) - divInt(int(63.0),divInt(int(75.0),( int(2.0) - int(3.0) ))) ) ),i1),max(int(2.0), int(8.0)))].rstrip(\"\"(\"\"[int(4.0):divInt(i1,i0)].capitalize())[int(197.0):saveOrd(\"\"(\"\")]\\nloopBreak% = 0\\nfor in0 in in0:{:\\nloopBreak% = 0\\nwhile b2:{:\\ni2 -= len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = \"\"2\"\" in \"\"E\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 1, 1, 0, 2], [0], [3, 1, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 0, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [0, 0, 0, 1, 0, 0, 0, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [2, 0, 1, 3, 2, 3, 1, 0], [5, 3], [5, 25], [3, 1], [17, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 9, 1, 4, 0, 1, 2, 8, 0, 7, 1, 0, 1, 8, 2, 2, 2, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le min(len(in2), divInt(len(getCharFromString((\"\"3Ff.\"\" + \"\"1\\\\\\\\zD\"\"), i1)),i1))\\ni1 = int(3.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 0, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3, 0], [0, 4], [1, 0, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 0, 1, 0], [1], [3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 1, 1, 0, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [0, 0, 1, 1], [], [0, 0, 0, 0, 4, 0, 3, 1, 2, 0, 2, 1], [2, 3, 2], [4], [0, 0, 1], [3, 0, 1, 1], [7], [8, 17], [], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 2, 0, 0, 2, 1, 3, 1, 1, 1, 0, 0, 1, 2, 2, 7, 0, 18, 1, 8, 0, 1, 8, 4, 0, 12, 1, 0, 2, 4, 1, 2, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(len(in1), max(max(min(i0, mod(i0,i2)), i2), i1)), len(in2)) \\l i0:{:\\nloopBreak% = 0\\nwhile res0:{:\\nb0 = in0 != in1\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns1 = (\"\"\\\\\\tHi\"\" + s0[saveOrd(\"\"r\"\"[i1:int(1.0)]):int(0.0)])\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 6, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 2, 2, 1, 1, 1], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 3, 0, 0, 3, 3, 3, 2, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 4, 3, 4, 3, 0, 2], [0], [1, 1, 0, 1], [4, 5, 3, 3, 4, 5, 1, 0, 4], [1, 0, 0, 1], [], [0, 0, 0, 0, 4, 1, 3, 2, 2, 0, 2, 0, 1, 0], [2, 3, 2], [4], [0, 0, 1], [3, 2, 3, 0], [21], [], [1], [8, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 5, 5, 5, 0, 22, 3, 9, 1, 2, 8, 4, 0, 14, 1, 0, 3, 4, 1, 0, 1, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(int(1.0), mod(max(len(in1), abs(i0)),( i1 + max(i2, i2) ))) \\l saveOrd(in2):{:\\nloopBreak% = 0\\nwhile len(in0) \\le saveOrd(in0):{:\\nres0 = \"\"%\"\".capitalize() != (in1[mod(int(6.0),int(8.0)):i1][int(7.0):int(6.0)] + in2[:len(\"\"1\\\\\\\\V\"\")])\\ns1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [0, 2], [0, 2], [0], [0, 0], [], [], [3], [2, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [2, 1, 2, 2, 0, 1, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 2, 0, 3, 0, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 4, 3, 4, 3, 0, 2, 1], [2], [1, 0, 0, 1], [4, 5, 3, 2, 4, 5, 1, 0, 4, 0], [1, 1], [0], [4, 0, 0, 2, 4, 0, 3, 2, 2, 0, 0, 0, 2, 2, 1, 4, 3, 2, 0, 1, 2, 0], [2, 3, 2], [4], [0, 0, 1, 0, 2, 1, 1], [0, 3], [10], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 9, 0, 34, 4, 12, 1, 3, 10, 2, 1, 22, 3, 1, 7, 2, 1, 0, 0, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2.capitalize():{:\\nloopBreak% = 0\\nwhile max(max(mod(len(in0),abs(max(i2, ( i1 * i2 )))), i2), i0) == saveOrd(s2.rstrip((in1[:len(in2)][saveOrd(s1):i1] + \"\"K\"\"[int(1.0):][int(0.0):i1]))[int(8.0):int(7.0)]):{:\\nres0 = len((s0[:int(6.0)] + \"\")\"\").capitalize()) \\le divInt(int(6.0),min(abs(int(5.0)), int(3.0)))\\nin1 = s0[:divInt(i1,max(i1, int(3.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2, 2], [0, 0], [3, 2], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 0, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [0, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0, 3, 2], [1, 0, 0, 0, 0, 0, 1], [], [0, 0, 4, 0, 4, 0, 3, 0, 2, 0, 0, 0, 4, 0, 3, 3, 1, 0, 1], [2, 3, 2], [4], [2, 0, 1], [3, 1, 0, 3, 3, 1, 3], [4], [14, 1], [], [3, 23, 22, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 1, 3, 1, 2, 0, 0, 0, 1, 0, 0, 6, 0, 14, 2, 6, 1, 1, 12, 7, 0, 19, 3, 1, 1, 7, 1, 2, 0, 4], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(min(divInt(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l len(in2):{:\\nloopBreak% = 0\\nwhile in0.capitalize() != in1.rstrip((in1 + in2[i1:])):{:\\nres0 = s1 == s0\\nin1 = s0.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin0 = ((\"\"\"\" + s2) + \"\"oE>=b!\"\")\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 2, 2, 1, 0, 0, 2, 2, 2, 0, 1, 2, 2, 2, 2, 2, 0, 1, 2, 1, 2, 2, 0, 1, 2, 2, 1, 2, 0, 0, 2, 0, 1], [1, 1, 2, 1, 1, 0, 1, 1, 0, 2, 0, 2, 2, 2, 0, 2, 2, 0], [0, 2, 2, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 2, 3, 3, 2, 3, 3, 2, 0, 0, 1, 2], [0, 4, 0, 4, 3, 0, 1, 5, 3], [1, 1, 0, 0, 2, 2, 1, 1, 1, 0, 2, 0, 0, 2, 1, 2, 0, 2, 2, 1, 2, 2, 0, 1, 2, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 5, 1, 3, 3, 4, 0, 5, 3, 0], [0, 2, 0, 1, 3, 1, 0], [1], [1, 1], [1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5, 8, 2, 2, 9, 4, 2, 9, 0, 8, 0, 6, 5, 0, 8, 7, 4, 9, 0, 7, 7, 4, 6, 5, 0, 3, 0, 5, 9, 6, 6, 2, 6, 5, 0, 7, 5, 1, 1], [0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 2, 2, 2, 2, 1, 2, 0, 2, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 2, 1, 1, 2, 1, 0, 2, 2, 2, 1, 1, 0, 1, 1, 2, 0, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 1, 0, 1, 3, 2, 1, 3, 2, 2, 1, 1, 0, 1, 2, 0, 1, 0, 3, 2, 1, 0, 3, 1, 1, 3, 1, 1, 1, 0, 1, 3, 3, 2, 0, 0, 2, 2, 1, 0, 3, 3, 0, 2, 0, 0, 2, 2, 0, 3, 3, 2, 1, 0, 2, 2, 3, 1, 0, 1, 3, 2, 2, 0, 2, 3, 0, 1, 1, 3, 1, 3, 3, 2, 1, 1, 0, 2, 0, 3, 2, 1, 1, 1, 2, 0, 3, 1, 1, 0, 2, 2, 3, 3, 3, 3, 3, 1, 3, 0, 3, 2, 3, 0, 3, 1, 3, 1, 0, 2, 0, 0, 1, 0, 1, 2, 2, 0, 2, 2, 1, 3, 2, 1, 0, 2, 2, 2, 1, 2, 2, 2, 0, 0, 0, 0, 3, 3, 0, 2, 0, 3, 3, 2, 0, 0, 3, 0, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2, 1, 3, 2, 3, 3, 1, 1, 1, 3, 0, 4, 3, 2, 1, 4, 2, 0, 3, 0, 3, 4, 0, 1, 3, 3, 0, 1, 3, 3, 1, 2, 2, 3], [2, 1, 2, 0, 0, 0, 0, 0, 2, 2, 0, 1, 1, 0, 2, 0, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [4, 5, 3, 4, 4, 5, 1, 0, 3, 0, 0, 1, 0, 3, 5, 0, 1, 5, 2, 1, 4, 2, 1, 2, 5, 3, 4, 2, 5, 2, 5, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0, 0, 2, 4, 1, 1, 2, 2, 1, 4, 1, 1, 4, 1, 4, 4, 4, 4, 2, 0, 0, 0, 2, 1, 1, 0, 0, 4, 0, 4, 4, 4, 0, 0, 2, 2, 4, 1, 0, 2, 2, 4, 1, 4, 4, 1, 2, 1, 0, 0, 0, 2, 1, 3, 2, 2, 1, 2, 1, 1, 0, 1, 4, 0, 0, 1, 1, 3, 1, 3, 4, 4, 1, 2, 2, 4, 2, 1, 0, 0, 1, 2, 4, 1], [2, 3, 2, 1, 1, 2, 2, 1, 1, 0, 0, 2, 3, 1, 2, 3, 2, 3, 1, 3], [4, 2, 4, 5, 2], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 1, 0, 1, 0, 0], [2, 3, 3, 2, 3, 3, 2, 0, 2, 0, 0, 3, 3, 1, 1, 1, 0, 1, 2, 3, 0, 1, 3, 2], [7, 3, 12, 12, 20], [14, 8, 4, 12, 17], [0, 3, 5, 3, 0, 4], [18, 22, 21, 11, 12, 25, 5, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 33, 33, 18, 15, 5, 8, 0, 0, 13, 9, 26, 9, 10, 7, 1, 2, 6, 51, 51, 49, 1, 178, 41, 44, 18, 24, 35, 24, 5, 94, 20, 5, 20, 24, 5, 5, 6, 8], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( i0 * i2 )))), i2), i1) \\l len(in2):{:\\nif i1 \\le i1:{:\\nloopBreak% = 0\\nwhile res0:{:\\nb2 = not in0 != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = in2\\n:}\\n:}else:{:\\ns1 = s0\\nif (in0[i0:i0][int(1.0):i1] + s0).endswith(s0):{:\\nif int(0.0) \\l int(8.0):{:\\nloopBreak% = 0\\nfor s1 in \"\"0\"\".capitalize()[:len(\"\"/\"\")]:{:\\nb2 = int(7.0) \\le divInt(int(6.0),saveOrd(\"\"=\"\"[len(\"\"3\"\".rstrip(\"\"<\"\")):int(6.0)][int(5.0):int(3.0)]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = i2 \\ge int(3.0)\\nif res0:{:\\nif \"\"(\"\".capitalize() not in saveChr(min(divInt(int(63.0),abs(mod(( int(75.0) - int(8.0) ),i2))), int(2.0))):{:\\nloopBreak% = 0\\nfor s0 in saveChr(( i2 * int(2.0) )):{:\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nfor in0 in in2[:i2].capitalize().capitalize():{:\\nb2 = ( s0 != s1 or max(mod(int(9.0),i1), len(\"\"5\"\"[:int(4.0)])) \\l int(2.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nres0 = \"\"H\"\" != in2\\n:}\\nloopBreak% = 0\\nwhile False:{:\\ns2 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile saveChr(abs(int(9.0))).startswith(in1):{:\\nloopBreak% = 0\\nwhile saveChr(int(0.0)) in getCharFromString(getCharFromString(s2, int(8.0)), i2):{:\\ni0 += int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = len(s1) \\g len(\"\"3\"\".capitalize()[divInt(i2,i1):divInt(( int(6.0) + i0 ),max(max(i0, ( i1 + i0 )), ( ( i1 + max(len(s2), divInt(int(5.0),i1)) ) + divInt(( min(int(0.0), i0) * int(8.0) ),saveOrd(\"\"D\"\".strip()[:divInt(( i0 * ( len(saveChr(i1)) + int(7.0) ) ),int(4.0))][:abs(int(9.0))])) )))][:max(saveOrd(\"\"M\"\".capitalize()), mod(int(0.0),int(7.0)))])\\n:}\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in \"\")\"\"[i1:]:{:\\nloopBreak% = 0\\nwhile in0.endswith(in1):{:\\nb2 = s2 != \"\"@\"\"[( i1 - abs(divInt(int(7.0),int(4.0))) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile b0:{:\\nb0 = int(6.0) != ( i1 - min(int(5.0), int(0.0)) )\\nb1 = (\"\"o\"\"[:i0][:mod(mod(len(\"\"i\"\"[:min(len(\"\"e\"\"), saveOrd(in2))]),min(int(3.0), max(i2, len(\"\"M\"\")))),divInt(len(s2.rstrip(in2)),i1))] + \"\"m\"\") in \"\"0\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s2 in (\"\"\"\"\" + (\"\"U\"\".strip(saveChr(min(int(0.0), max(int(5.0), i1)))[:( i2 + i1 )][int(9.0):i0]).capitalize() + \"\"r\"\"[int(66.0):( ( i2 * mod(mod(int(2.0),len(s1)),mod(int(6.0),i2)) ) + mod(divInt(divInt(int(5.0),( divInt(( i2 + i1 ),i1) + i0 )),len(s0)),max(i1, divInt(i1,abs(abs(divInt(i2,i0)))))) )])):{:\\ns1 = \"\"`\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = len(\"\"4\"\".strip()[i0:int(07.0)]) \\ge int(511.0)\\n:}\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [0], [21], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 2, 2, 3, 1, 0, 5, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(( len(in1) * len(in2) ), mod(i2,i0)):{:\\nres0 = getCharFromString(\"\"V\"\", mod(( max(int(0.0), int(8.0)) - int(9.0) ),int(5.0))) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 2, 9, 1, 8, 6, 5, 3, 3, 6, 3], [2, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 0, 1, 0, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [0, 1, 1, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 0], [1, 1, 1], [1, 0, 0, 1], [4, 5, 2, 5, 4, 3], [1], [], [1, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [2, 0, 1], [3], [], [], [], [4]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 6, 0, 17, 3, 6, 1, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(( len(\"\"!\"\") - abs(min(i2, mod(i0,i0))) ), i1), int(22.0)) \\l divInt(len(in1),i2):{:\\nres0 = int(9.0) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 2, 5, 5], [0, 0, 1], [], [0, 0, 4, 0, 1, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [2, 2, 3], [], [], [7, 5], [18]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 1, 1, 3, 3, 0, 5, 1, 0, 0, 3, 0, 0, 2, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(( len(in1) + len(in2) ), mod(i2,i0)):{:\\nres0 = in2.capitalize() not in \"\"75/\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [1, 1, 1], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2, 0, 0, 2], [0, 0], [3, 5, 3], [3, 1], [1], [0], [0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [7, 0, 7, 8, 9, 8, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8, 0, 9, 0, 9, 1, 1, 1, 3, 6, 7, 2, 8, 0, 5], [2, 0, 0, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0, 1, 1, 0, 1, 2, 1, 0, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0, 0, 3, 1, 3, 3, 0, 3, 2, 1, 1, 0, 1, 3, 3, 1, 2, 1, 2, 1, 1, 3, 2, 2, 2, 0, 3, 3, 3, 3, 1, 3, 3, 0, 1, 3, 2, 1, 1, 1, 0, 0, 3, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [1, 3, 3, 3, 0, 4, 3, 2, 1, 0, 4, 3, 0, 2, 0, 1, 1, 3, 1, 2, 4], [0, 1, 0, 0, 0, 2, 0, 2, 2], [1, 1, 1, 1, 1, 0, 1, 1, 1], [4, 5, 5, 3, 0, 5, 2, 0, 3, 2, 3, 4, 5, 4, 3, 4, 2], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0, 4, 2, 3, 4, 3, 2, 3, 3, 2, 2, 1, 1, 2, 1, 2, 2, 0, 4, 3, 3, 1, 0, 3, 3, 2, 0, 1, 1, 2, 2, 0, 3, 0, 2, 0, 0, 0, 1, 2, 4, 4, 1, 1, 3, 0, 4, 0], [0, 3, 2, 2, 1, 2, 2], [4], [0, 0, 1, 1, 0, 2, 1, 0, 2, 2, 0, 1, 2, 1], [2, 3, 0, 3, 2, 1, 3, 3, 2, 3, 3, 0, 1], [1, 18], [21, 2], [1, 0, 6], [13, 22, 8, 14, 20, 26]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 3, 6, 0, 2, 0, 0, 2, 2, 7, 2, 3, 2, 1, 1, 3, 44, 44, 22, 4, 82, 16, 21, 9, 9, 17, 13, 0, 58, 7, 1, 14, 13, 2, 2, 3, 6], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l max(mod(len(in1),len(in2)), ( i2 + i0 )):{:\\nres0 = getCharFromString(in2, len(in0)) != s0\\nb1 = ( i0 - i1 ) \\le int(0.0)\\n:}\\nif (in2[i2:int(7.0)][min(i0, ( int(8.0) + int(9.0) )):int(8.0)] + s2).endswith(((((\"\"1\"\"[i1:][int(5.0):mod(i0,mod(mod(mod(int(6.0),i1),int(2174.0)),divInt(i0,int(20.0))))] + \"\"*\"\") + \"\"B\"\"[:int(65083.0)])[:saveOrd(s0[int(305.0):][int(5.0):i2])] + ((\"\"=\"\" + in0) + ((s2[i2:] + \"\"0\"\") + \"\"v\"\")).capitalize()).capitalize() + in0[:len((in1 + in2[int(8.0):]))][abs(max(i0, min(( int(72.0) + int(9888.0) ), i1))):int(0.0)])[:saveOrd(in1)].rstrip(in0)):{:\\nif ( True or \"\"%+6;[\"\" != saveChr(len(\"\"S\"\".capitalize()))[:int(90.0)] ):{:\\ni1 += ( int(91.0) * mod(int(1.0),int(1.0)) )\\ni0 += min(( mod(mod(i1,abs(min(max(max(int(3.0), len(\"\"c\"\")), max(i2, int(6.0))), abs(( int(7.0) * int(2.0) ))))),int(8.0)) * i1 ), i0)\\n:}\\ni2 = saveOrd((in1 + s2.capitalize()))\\n:}else:{:\\ni0 = int(05.0)\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 0], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5, 9, 6, 7, 9, 3, 1, 0, 6, 9, 5, 6, 6, 1, 2, 5, 7, 5, 8, 7, 6, 8, 0, 1, 0, 1, 3, 1, 9, 9], [0, 1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 2, 0, 1, 0, 1, 0, 2, 1, 2, 1, 1, 0, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2], [1], [3, 3, 1, 3, 3, 3, 0, 2, 2, 0, 2, 1, 3, 3, 3, 3, 0, 1, 1, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 3, 2, 2, 2, 3, 2, 0, 3, 1, 2, 2, 2, 2, 1, 3, 3, 0, 0, 3, 0, 0, 2, 0, 2, 1, 2, 3, 1, 1, 2, 3, 1, 1, 0, 0, 2, 2, 1, 2, 2, 2, 0, 1, 2, 0, 3, 0, 3, 1, 1, 0, 2, 2, 1, 0, 3, 2, 2, 0, 1, 3, 1, 2, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 0, 2, 0, 0, 1, 2, 3, 2, 0, 3, 0, 0, 1, 3, 3, 2, 3, 3, 0, 2, 0, 0, 1, 3, 3, 2, 1, 3, 3, 3, 3, 1, 2, 1, 0, 3, 3, 2, 0, 3, 1, 0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 1, 3, 1, 1, 1, 1, 0, 0, 3, 1, 0, 2, 0, 0, 2, 1, 2, 3, 3, 4, 1, 0, 1, 1, 2, 3, 3, 0, 3, 3], [2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 0, 2, 0, 0, 1, 1, 0, 2], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0], [4, 5, 3, 1, 4, 5, 1, 5, 4, 1, 4, 2, 0, 2], [1, 1, 1, 1, 0, 0, 0, 1], [], [0, 0, 0, 0, 4, 2, 2, 2, 2, 0, 0, 0, 2, 3, 2, 2, 4, 4, 4, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 4, 2, 0, 4, 2, 0, 0], [2, 3, 2, 2, 3, 3, 1, 1], [4, 3, 1], [2, 0, 0, 0, 1, 1, 0, 1, 1], [0, 3, 0, 0, 1, 3, 0, 2], [22, 10, 5, 21], [13], [1], [22, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 42, 42, 34, 0, 146, 40, 40, 19, 21, 14, 8, 0, 36, 8, 3, 9, 8, 4, 1, 1, 2], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(int(1.0), len(in1)), abs(max(i0, mod(( i1 * divInt(int(8.0),len(in2)) ),len(in0))))) \\l saveOrd(s1):{:\\nloopBreak% = 0\\nwhile len(in1[i2:int(8.0)][int(7.0):int(6.0)][int(6.0):min(int(5.0), divInt(int(3.0),max(len(in2), int(3.0))))][int(63.0):].capitalize()) \\le max(i2, max(mod(( mod(max(( i1 * max(int(75.0), mod(( divInt(( int(9.0) - min(min(i1, i1), len(s1)) ),i1) * i1 ),divInt(i0,( int(6.0) - ( max(int(7.0), int(9.0)) - divInt(min(int(3.0), int(1.0)),i1) ) )))) ), i2),( ( int(0.0) * ( divInt(( i0 - int(6.0) ),mod(i1,abs(i0))) - min(int(9.0), int(5.0)) ) ) * i1 )) * mod(mod(int(6.0),i0),min(( mod(i2,int(6.0)) + abs(int(1.0)) ), ( ( divInt(( i1 * int(2.0) ),( i2 + i1 )) + i1 ) - divInt(i0,mod(i2,i2)) ))) ),int(5758.0)), mod(max(( i2 - abs(i0) ), i2),int(768.0)))):{:\\nres0 = (in2.capitalize().capitalize().rstrip(\"\"W\"\")[len(\"\"=\"\".rstrip().lstrip(\"\"K\"\")):len(in1)][:( saveOrd(\"\"F\"\") + max(i2, ( i0 * i0 )) )] + \"\"n&V1\"\")[:int(010.0)] != s1\\nin1 = saveChr(min(max(divInt(int(13.0),max(abs(len(s2[:len(saveChr(int(1.0)))])), mod(int(9.0),i2))), min(len(s0[:divInt(i2,len(s2))]), int(9.0))), i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [2, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 2, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 4], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [0, 0, 0, 0, 1], [], [0, 0, 4, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3, 2, 1, 0, 2], [12], [10], [8, 9], [30]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 2, 0, 20, 5, 6, 0, 5, 3, 5, 0, 4, 1, 0, 0, 5, 1, 1, 2, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l max(mod(max(len(in1), mod(mod(i2,mod(mod(abs(int(4.0)),int(8.0)),int(9.0))),int(5.0))),max(len(in2), i0)), int(5.0)):{:\\nin2 = getCharFromString(\"\"_8kM9\"\", int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [1], [0, 1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [7, 6, 3, 7, 6, 3, 6], [1, 1, 1, 0, 2], [0, 1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [], [2, 1, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [3, 2, 1, 2, 1, 1, 0, 3, 0, 0, 2], [5, 24, 9], [5, 4, 0], [6, 7, 6], [2, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 2, 8, 1, 3, 1, 1, 1, 11, 0, 7, 1, 0, 1, 11, 3, 3, 3, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"\\\\\\t6f7eaF)\"\"[int(76.0):]) \\le len(in0)\\ni1 = i1\\ni1 *= divInt(len(getCharFromString((\"\"YJ\"\" + \"\"6\"\"), i0)),i2)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 0, 3, 0, 0, 0, 2, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 4, 5, 1, 0, 4, 0], [0, 1], [], [0, 0, 0, 0, 4, 0, 3, 1, 2, 0, 0, 0], [2, 3, 2], [4], [0, 0, 1], [0, 1], [22], [14], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 8, 0, 19, 3, 6, 1, 2, 8, 2, 0, 10, 1, 0, 1, 2, 1, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( int(1.0) * i0 )))), i2), i2) \\l len(in2):{:\\nloopBreak% = 0\\nwhile i1 \\le i1:{:\\nres0 = in0 != in1\\nin1 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns1 = (\"\"Wo\"\" + s0[i1:divInt(int(0.0),i0)])\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 3, 9, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 3, 2, 3, 2, 2, 2, 2, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 0, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [0], [16], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le len(\"\"Q\"\")\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 8, 9, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 1, 2, 1, 1, 2, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 1, 1, 3, 0, 3, 0, 2, 2, 3, 0, 0], [1, 0, 1, 1, 1, 1], [0, 1, 3, 2, 1, 3, 3, 4, 1, 0, 2, 2, 2, 2, 4, 4], [2], [1, 0, 0, 1, 1], [4, 5, 3, 1, 4, 5, 1, 5, 4], [0, 1, 0, 0, 1, 1], [], [2, 0, 0, 0, 4, 0, 2, 2, 2, 1, 0, 0, 1, 1], [2, 3, 2], [4], [0, 1, 0, 0], [3, 2, 0, 3, 0, 0], [8, 19, 8], [], [5], [16, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 8, 8, 8, 0, 38, 6, 16, 1, 5, 7, 6, 0, 14, 1, 0, 4, 6, 3, 0, 1, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(max(mod(len(in1[abs(max(i0, ( i1 * i1 ))):i2]),int(5.0)), len(in2)), len(in0)) \\l saveOrd(s1.capitalize()):{:\\nloopBreak% = 0\\nwhile max(int(8.0), int(9.0)) \\le min(divInt(int(7.0),abs(int(6.0))), divInt(int(6.0),abs(abs(int(5.0))))):{:\\nres0 = \"\"-5\"\"[int(3.0):abs(i1)][saveOrd(in1):i1][:mod(mod(saveOrd(in2),i2),i2)] != \"\"IT\"\"\\ns1 = \"\"I\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 1, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 1, 5, 5], [0, 0, 1, 0, 0, 0, 0, 1, 1], [], [0, 3, 4, 0, 1, 0, 3, 2, 2, 0, 0, 2, 4, 1, 2, 1], [0, 3, 2], [4], [0, 0, 1, 1], [0, 0, 3, 2, 1, 1, 3, 1, 3], [8, 18], [0, 5, 7], [3], [28, 13, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 19, 19, 3, 0, 21, 3, 6, 0, 3, 5, 9, 0, 16, 2, 1, 4, 9, 2, 3, 1, 3], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len((getCharFromString(in2, mod(i2,i0)) + \"\"IS]\"\"))), int(08.0)):{:\\nres0 = in2 not in (s1[mod(max(int(9.0), int(5.0)),int(5.0)):int(6.0)][min(saveOrd(in2), i2):int(2174.0)] + \"\"3af*h\"\".rstrip(\"\"^\"\"[:int(20.0)])[:int(65083.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 8, 9, 5, 0, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 0, 3, 2, 0, 0, 3, 2, 3, 2, 1, 1, 1, 3, 0, 0, 2, 1, 2, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 0, 0, 1], [4, 5, 5, 3, 5, 3], [1], [], [0, 0, 4, 0, 4, 0, 3, 2, 2, 1, 0], [0, 3, 2], [4], [0, 0, 1], [0], [2], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 19, 19, 9, 0, 35, 11, 5, 3, 8, 5, 1, 0, 11, 2, 1, 2, 1, 1, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(i2,len(in1)), mod(i0,i2)):{:\\nres0 = in2 not in getCharFromString(in2, len(in0.rstrip((\"\"C\"\"[mod(max(( int(7.0) + int(8.0) ), int(9.0)),min(i1, i2)):mod(int(5.0),mod(i1,int(0.0)))][divInt(i1,( divInt(mod(int(6.0),i0),int(2174.0)) - ( i1 + int(20.0) ) )):int(65083.0)] + in2))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [1], [0, 0], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [0], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [0, 0, 1, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1, 3, 2, 2], [5], [5], [5, 7], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 3, 0, 1, 2, 4, 0, 7, 1, 0, 1, 4, 0, 1, 2, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(in0[int(16.0):]) \\le len(in2)\\nb1 = i1 \\le divInt(len(getCharFromString((\"\"f@5\"\" + \"\"7\"\"), i2)),i1)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [1, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [1, 9, 8, 7, 6, 6, 5, 5, 3, 6, 3, 7, 5, 7, 2, 5, 1, 8, 5, 5], [1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 1, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 3, 1, 3, 3, 0, 3, 2, 3, 3, 2, 3, 3, 3, 0, 1, 0, 1, 2, 0, 1, 3, 2, 1, 1, 3, 0, 2, 0, 1, 0, 1, 3, 2, 0, 1, 3, 1, 3, 0, 0], [1, 0, 1, 1, 1, 0, 1, 1, 0], [1, 1, 3, 4, 1, 3, 3, 2, 1, 0, 2, 2, 2, 2, 3, 0, 0, 1, 0, 4, 0, 0, 4, 1, 3, 0, 1], [2, 0, 0], [1, 0, 0, 1, 0, 1], [1, 5, 3, 1, 4, 5, 1, 5, 4, 2, 5, 4], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [], [0, 0, 0, 0, 4, 4, 2, 2, 2, 0, 0, 0, 0, 1, 3, 2, 3, 4, 3, 2, 1, 3, 0, 4, 1, 4, 3, 0, 1, 0], [2, 3, 2, 1, 1], [4], [0, 0, 0, 0, 1], [1, 0, 2, 3, 1, 1, 3, 0, 0, 3], [3, 1, 4], [6, 6, 21], [9], [29, 9, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 20, 20, 13, 0, 66, 9, 27, 3, 6, 12, 10, 0, 30, 5, 1, 5, 10, 3, 3, 1, 3], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(s1),saveOrd(in2)), max(i1, ( i1 * len(in0) ))), i1) \\l int(1.0):{:\\nloopBreak% = 0\\nwhile len(s1) \\le abs(max(min(int(9.0), int(8.0)), abs(int(7.0)))):{:\\nres0 = in1[int(6.0):abs(int(6.0))][divInt(int(5.0),abs(abs(int(5.0)))):len(in2)][min(i2, min(divInt(max(min(mod(saveOrd(s1),min(min(i1, int(3.0)), i1)), int(63.0)), ( i1 + int(75.0) )),saveOrd(in2)), divInt(int(7.0),int(2.0)))):max(i1, mod(i0,int(5.0)))].rstrip(\"\"g\"\").capitalize() != (((\"\"D\"\"[:i1] + (in1 + saveChr(int(1.0)))).capitalize() + \"\"9^\"\")[len(saveChr(( i1 + int(8.0) ))):min(int(55.0), max(i0, i1))] + (s2 + \"\"gv&BE\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = in1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 1, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [3, 5, 1, 4, 4], [1, 0, 0, 1, 1], [], [2, 2, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0, 0], [3, 3, 3, 2, 2], [5], [5], [3, 2], [2, 22, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 11, 1, 4, 0, 1, 3, 5, 0, 13, 2, 0, 3, 5, 0, 0, 2, 3], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):len(getCharFromString((\"\"\\\\\\t\"\" + \"\"=&3\"\"), i0))][divInt(len(getCharFromString(in2, i1)[i1:int(3.0)]),len((s1 + \"\"2\"\"))):]) \\le int(7.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 0, 2], [], [0, 0], [], [], [3, 3], [4, 4], [1, 2, 2, 2], [0, 0], [3, 3, 3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 0, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 3, 0, 1, 1, 2, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 4, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 5, 3, 4, 5, 0, 1, 0, 4, 0, 3], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 0, 1, 1, 0, 3, 0, 4, 0, 1], [2, 3, 2], [4], [0, 0, 1], [0, 0, 2, 0, 3, 2, 2, 3, 3, 0, 1, 3, 3], [12, 0, 6, 12], [19], [6, 3, 2], [1, 17, 14, 19, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 2, 1, 4, 1, 3, 0, 0, 0, 1, 0, 0, 6, 0, 13, 1, 6, 0, 1, 11, 13, 0, 20, 3, 1, 2, 13, 4, 1, 3, 5], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(saveOrd(in1), i0) \\le len(in2):{:\\nloopBreak% = 0\\nwhile in0 != in1.rstrip((in2[abs(max(i0, mod(i2,i2))):i1][i1:len(s0)] + s1)).capitalize():{:\\nres0 = \"\"MA6G\\\\\\n\"\" != \"\"3\"\"\\nres0 = s0 != (in1 + s0.capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin0 = \"\"2.+Mt:\"\"\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [2, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 3, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 3, 5, 5], [0, 1], [], [0, 0, 4, 0, 1, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [2, 1], [], [25], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 3, 5, 0, 3, 3, 2, 0, 5, 1, 0, 0, 2, 0, 1, 1, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(len(in1), len(in2)):{:\\nb2 = getCharFromString(in2, max(mod(i2,i2), mod(mod(min(int(0.0), int(8.0)),int(9.0)),int(5.0)))) not in \"\"6z\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 1, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [1], [], [12], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 15, 4, 4, 3, 1, 3, 1, 0, 5, 1, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(( len(in1) + len(\"\"m\"\") ), max(i2, int(2.0))):{:\\nres0 = getCharFromString(in2, ( mod(( i0 + int(8.0) ),int(9.0)) + int(5.0) )) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], [1, 8, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5, 9, 1, 3, 3, 3, 4, 3, 5, 8, 9], [0, 1, 1, 2, 1, 1, 0, 1, 2, 0, 0, 0, 2, 2, 0, 2, 2, 2, 1], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 3, 1, 1, 0, 0, 1, 3, 1, 2, 1, 3, 3, 1, 1, 2, 1, 3, 3, 0, 3, 3, 3, 0, 2, 3, 2, 3, 3, 0, 2, 0, 1, 3, 0, 0, 0, 0, 0, 1, 2, 0, 3, 0, 3, 0, 1, 1, 1, 0, 2, 0, 1, 1], [1, 0, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 3, 1, 1, 3, 3, 4, 1, 0, 2, 2, 0, 3, 0, 3, 1, 4, 2, 2, 0, 1], [2, 0, 1, 0], [1, 0, 0, 1, 1, 0], [4, 5, 3, 3, 4, 5, 1, 5, 4, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [], [0, 0, 1, 4, 4, 0, 3, 2, 2, 0, 0, 0, 3, 4, 4, 3, 0, 4, 1, 4, 2, 2, 0, 4, 4, 2, 1, 2, 1, 2, 4, 2, 4, 4, 4, 1, 2, 0], [2, 3, 2, 3, 0, 0, 1, 2, 3, 2, 3, 1], [4, 2, 5, 3], [0, 0, 1, 2, 0, 1, 2, 0, 0], [3, 1, 1, 1, 1, 0, 1, 1, 2, 2, 0], [2, 21], [10, 18, 6, 5, 25, 25], [9, 7], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 23, 23, 19, 0, 68, 10, 22, 4, 6, 10, 11, 0, 38, 12, 4, 9, 11, 2, 6, 2, 1], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(( len(in1) * max(i0, divInt(i1,i1)) ),int(1.0)), int(8.0)), max(len(in2), len(\"\"\"ksg\"\"))) \\l saveOrd(in0.rstrip((in0[int(8.0):int(7.0)][i2:i1] + in1)).capitalize()):{:\\nloopBreak% = 0\\nwhile int(6.0) \\le max(int(6.0), divInt(int(5.0),min(abs(int(3.0)), int(3.0)))):{:\\nres0 = in2 != ((s1 + getCharFromString(\"\"f\"\", mod(int(63.0),abs(min(i1, len(getCharFromString(in2[min(len(saveChr(i0)), mod(max(divInt(saveOrd(\"\"C\"\"[abs(i1):( i2 + int(75.0) )].capitalize()),abs(i0)), i0),i0)):][:i2], i2))))))).strip().capitalize() + \"\"zz97\"\"[:int(9.0)])\\nin1 = saveChr(( i0 - min(i2, max(i2, int(1.0))) )).lstrip(\"\"V\"\").capitalize()[int(3334.0):int(3.0)].strip(s1[i2:( i1 + int(5.0) )])[int(89.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2, 2], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 3, 8, 7, 7, 1, 4, 5, 8, 8, 8, 8, 9], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 3, 1, 2, 3, 2, 1, 1, 1, 3, 1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0, 1, 2], [0, 2, 0, 2, 1, 2, 0], [1, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [2, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 2, 4, 2, 1], [0, 3, 2], [4], [0, 0, 1, 1, 1, 1, 1], [1], [], [22], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 14, 14, 9, 0, 39, 9, 7, 7, 2, 4, 1, 0, 15, 1, 0, 7, 1, 0, 1, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0[( i1 + len((in2 + (in0[:( len(s2) * mod(( i2 + int(3.0) ),( int(8.0) * i2 )) )][:divInt(int(3.0),i1)] + getCharFromString(\"\"w\"\"[:int(8.0)], i2)[:( i1 - int(7.0) )]))[:min(min(int(7.0), ( max(( int(1.0) * int(4.0) ), int(5.0)) + abs(int(8.0)) )), int(8.0))][int(8.0):i1]) ):i0]) \\le int(8.0):{:\\nb2 = i1 \\le int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 1, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3, 3], [0, 4], [1, 0, 2], [0, 0], [3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 1, 2, 2, 1, 1, 1], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 3, 0, 0, 3, 3, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 1, 3, 0, 2], [2], [1, 1, 0, 1], [4, 5, 3, 3, 4, 5, 1, 0, 4], [1], [], [0, 1, 0, 0, 4, 0, 1, 2, 2, 0, 0, 0], [2, 3, 2], [4], [0, 1, 1], [2], [], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 2, 1, 3, 1, 1, 1, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 1, 1, 5, 1, 0, 6, 1, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(int(1.0), mod(max(len(in1), abs(i0)),( i1 * max(i2, i2) ))) \\l len(\"\"5\"\"):{:\\nloopBreak% = 0\\nwhile res0:{:\\nres0 = in2 != in0\\nin0 = in1.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 0, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 0, 4, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3], [], [], [], [22]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 3, 3, 4, 0, 15, 5, 3, 2, 3, 5, 1, 0, 6, 1, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), ( i0 + i0 )):{:\\nres0 = getCharFromString(\"\"=\"\", mod(( divInt(i0,int(0.0)) - i1 ),int(2.0))) not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in2\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 2, 1, 1, 0], [1, 2], [0, 2, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1, 2], [0, 0], [3], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 8, 7, 6, 6, 5, 3, 3, 6, 3, 7, 5], [0, 0, 2, 2, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 3, 0, 0, 0, 3, 0, 3, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1, 3, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 1, 3, 3, 4, 3, 0, 2], [2], [1, 0, 0, 1], [4, 1, 3, 4, 4, 5, 1, 5, 4, 0], [0, 1], [], [0, 0, 0, 0, 4, 0, 3, 2, 2, 0, 0, 0, 1], [2, 3, 2], [4], [0, 0, 1], [1, 2], [], [22], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 2, 2, 7, 0, 19, 2, 8, 1, 1, 10, 2, 0, 13, 1, 0, 2, 2, 0, 1, 1, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif max(max(mod(len(in1),abs(max(i0, ( len(s1) * i0 )))), i2), i2) \\l len(in0):{:\\nloopBreak% = 0\\nwhile i1 \\le saveOrd(in1):{:\\nb1 = in1.capitalize() != (in2[i1:int(1.0)][int(0.0):i1] + s1)\\nin2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns0 = \"\"w0\"\"\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [0, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 0, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [0, 1, 0, 1, 1], [4, 5, 5, 3, 5, 5], [1], [], [0, 1, 4, 0, 0, 0, 3, 2, 2, 0, 0], [2, 3, 2], [4], [0, 0, 1], [2], [], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 1, 15, 4, 4, 2, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\l max(divInt(len(in1),len(\"\"1\"\")), max(i0, int(10.0))):{:\\ni2 = ( mod(( i1 + i2 ),int(2.0)) + int(8.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 2, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 4, 3, 2, 1, 3, 0, 4, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [1], [], [1, 2, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [0], [14], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 5, 0, 20, 3, 7, 1, 2, 3, 1, 0, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(saveOrd(\"\"O\"\"), mod(len(in1[abs(max(i1, mod(i0,i0))):]),i0)) \\l int(26.0):{:\\nres0 = len((in2 + in1)[i0:( min(int(7.0), int(9.0)) - int(2.0) )]) \\le int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [3, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 7, 9, 2, 6, 5, 3, 3, 6, 3], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 0, 3, 1, 1], [1, 1, 0, 1, 1], [1, 1, 3, 2, 1, 3, 0, 3, 1, 0], [1, 1], [1, 1, 0, 1], [4, 5, 4, 5, 4, 3], [0, 1], [], [1, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [2, 3], [], [], [2], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 19, 2, 9, 0, 2, 2, 2, 0, 3, 0, 0, 0, 2, 0, 0, 1, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(\"\"2%\"\"),abs(max(i1, mod(i0,i2)))), i1), int(26.0)) \\ge len(in1):{:\\nres0 = int(7.0) \\le min(len(in2), max(int(9.0), int(2.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [1, 0], [3], [1], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 0], [1, 3, 4, 1, 0, 4, 3, 2, 1], [0, 0, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1, 0, 0], [4, 5, 5, 3, 5, 5, 2, 2, 5, 5], [1, 1, 1, 1, 0, 0, 0, 0, 1], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0, 3, 3, 2, 4, 3, 2, 0, 0, 2, 2, 2, 1, 2, 0, 2, 3, 1, 1, 3, 4, 1, 1], [3, 3, 2], [4, 4], [0, 0, 1, 1, 1, 0, 2, 1, 1], [0, 0, 1, 0, 0, 2, 0, 3, 2], [24, 0, 4, 2, 1], [25], [3, 5], [27]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 4, 1, 2, 1, 1, 0, 0, 30, 30, 8, 0, 38, 9, 6, 2, 7, 10, 9, 0, 33, 3, 2, 9, 9, 5, 1, 2, 1], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( in1 not in in2 or int(10.0) \\l max(mod(len(in2.rstrip(in0)),saveOrd(in2)), max(i2, int(2.0))) ):{:\\nres0 = (in2[( mod(divInt(i0,int(8.0)),int(9.0)) + int(5.0) ):min(i2, i1)][int(5.0):int(6.0)] + s2) in (((s2[:int(2174.0)] + in2).rstrip(\"\"Y\"\"[i2:][int(20.0):mod(i0,mod(divInt(divInt(int(65083.0),i1),int(305.0)),( i0 + int(5.0) )))][:int(8.0)])[:saveOrd(in2[:int(72.0)])] + (\"\"A\"\" + \"\"z\"\")[:int(9888.0)]) + (\"\"E\"\".capitalize() + \"\"C3B\\\\\\\\5\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}]