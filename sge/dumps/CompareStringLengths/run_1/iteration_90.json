[{"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [0, 0, 0, 2, 2, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 4, 5, 3, 2, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), min(i1, i0)):{:\\nres0 = in2 not in s0[( mod(( int(0.0) + int(8.0) ),int(9.0)) + int(5.0) ):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 4, 5, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[min(mod(mod(int(9.0),int(8.0)),int(9.0)), int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(5.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 2, 4, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i1,i0)):{:\\nres0 = in2 not in s0[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(5.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 3, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 4, 0, 20, 5, 5, 3, 2, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i1 )):{:\\nres0 = in2 not in s0[( mod(( int(9.0) - int(8.0) ),min(int(9.0), min(i2, i1))) + int(5.0) ):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 4, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 5, 1, 18, 5, 4, 3, 3, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = getCharFromString(in2, mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0))) not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += min(i1, i2)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 2, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 0, 0, 0], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 22, 22, 8, 1, 35, 12, 5, 5, 8, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( min(i1, mod(mod(( int(9.0) * int(8.0) ),mod(mod(min(i0, i2),int(9.0)),int(5.0))),int(5.0))) - i1 )):{:\\nres0 = in2 not in s0[int(6.0):( i2 + ( divInt(divInt(int(2174.0),i1),int(20.0)) + divInt(i1,int(65083.0)) ) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += int(305.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 1, 4, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(mod(mod(int(9.0),int(8.0)),int(9.0)),int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(5.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 0, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [1, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 4, 1, 15, 5, 3, 3, 3, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= mod(mod(( int(0.0) + int(8.0) ),i1),int(9.0))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 1, 15, 4, 3, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), int(6.0)):{:\\nres0 = in2 not in s0[i1:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= ( mod(divInt(int(8.0),int(9.0)),int(5.0)) - int(5.0) )\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 3, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 5, 1, 21, 5, 5, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(mod(( min(int(9.0), int(8.0)) - int(9.0) ),min(i2, i1)),int(5.0)):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(6.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 4, 2, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(( ( int(2.0) - int(8.0) ) + int(9.0) ),int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 1, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 1, 15, 4, 3, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i0 * i0 )):{:\\nres0 = in2 not in s0[int(9.0):mod(divInt(int(8.0),int(9.0)),int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(5.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 1, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(1.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 3, 3, 2, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 4, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 0, 20, 6, 5, 2, 4, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),saveOrd(in2)):min(mod(i2,int(5.0)), int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 3, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 0, 2, 1, 1, 1, 1, 3, 1, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 0, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 0, 14, 4, 3, 2, 2, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i1,i0)):{:\\nres0 = in2 not in s0[( i2 * ( int(3.0) + int(8.0) ) ):int(9.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 4, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 4, 1, 20, 5, 5, 4, 2, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in getCharFromString(s0, ( mod(( int(9.0) - int(8.0) ),int(9.0)) + int(5.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += min(min(i1, int(5.0)), int(6.0))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 0, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 0, 16, 5, 3, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(0.0)):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 7, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 4, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 5, 1, 20, 5, 4, 3, 3, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in getCharFromString(s0, mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(7.0)))[min(i2, i1):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(6.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 2, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 4, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 20, 6, 4, 2, 5, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), divInt(i1,i0)):{:\\nres0 = in2 not in getCharFromString(s0, mod(mod(( int(9.0) * int(8.0) ),mod(int(9.0),min(i2, i1))),int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(5.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 0, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 1, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 0, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 1, 15, 4, 3, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(mod(i1,int(9.0)),int(8.0)):int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= int(5.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 2, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 4, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 6, 1, 19, 5, 4, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i2 )):{:\\nres0 = in2 not in in1[mod(divInt(( i2 - int(9.0) ),int(8.0)),int(9.0)):min(i1, i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(2.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1, 1, 1], [2, 2, 0, 2, 2, 1, 0, 1, 1], [2, 2, 0, 0], [0, 1, 1, 1, 1, 1], [0, 0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 3, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 1, 0], [4, 5, 5, 0, 5, 5, 0, 5, 2], [], [0, 0], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 6, 6, 4, 2, 2, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 23, 23, 9, 1, 34, 9, 5, 3, 7, 9, 0, 2, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), min(i1, i0)):{:\\nloopBreak% = 0\\nwhile in2 not in s0[( mod(mod(int(9.0),int(8.0)),int(9.0)) * int(3.0) ):min(i2, i1)]:{:\\nres0 = int(5.0) \\le int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in in2:{:\\nloopBreak% = 0\\nfor s0 in (in2[:int(2174.0)][i2:int(20.0)] + s2):{:\\ni1 -= ( i1 + mod(mod(mod(int(65083.0),i0),int(305.0)),divInt(i1,int(5.0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 0, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 0, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 1, 15, 4, 3, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), mod(i1,i0)):{:\\nres0 = in2 not in s0[mod(i2,( int(9.0) * int(8.0) )):int(9.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= int(5.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 3, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 0, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 7, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 4, 1, 21, 5, 5, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * min(mod(mod(( int(9.0) + int(8.0) ),int(9.0)),int(5.0)), min(i0, i2)) )):{:\\nres0 = in2 not in s0[int(5.0):int(6.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(2174.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 215}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 7, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(min(mod(i1,int(9.0)), i1), i1) \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 - i1 )), i0)), int(26.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 23, 3, 9, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le max(int(3.0), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 - i1 )), i2)), int(26.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 1, 3, 5], [1, 0, 1, 2, 1, 1, 0, 0], [0, 1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 2, 1, 0, 3, 1, 1, 0, 0], [1, 0, 1, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 8, 0, 25, 4, 9, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,( int(9.0) + i1 )), max(int(7.0), int(1.0))), i0) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(22.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [0, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i0, mod(i0,i1)), i2)), int(26.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 0, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 7, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 + i1 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(min(mod(i1,int(9.0)), i1), i1) \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1], [1, 1, 1, 0, 1, 1, 0, 0], [2, 1, 3, 0, 0, 3, 1, 1, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 6, 0, 23, 4, 8, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, mod(i0,i1)), i2)), int(22.0))) \\l len(in2):{:\\nres0 = max(max(divInt(i1,int(9.0)), int(7.0)), i2) \\le ( int(5.0) * int(5.0) )\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 6, 0, 19, 3, 7, 1, 2, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(i1, mod(i1,int(9.0))) \\le int(7.0)\\n:}else:{:\\nin0 = s2\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 + i1 )), i0)), int(26.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 7, 7, 6, 0, 25, 4, 9, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(22.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le divInt(max(int(3.0), int(5.0)),int(5.0))\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 0, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 6, 0, 23, 4, 8, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i0 )), i1)), int(22.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le divInt(int(5.0),int(5.0))\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 2, 4, 7, 2, 8, 5, 3, 0, 5, 0, 6, 9, 4, 5], [1, 1, 1, 2, 1, 1, 0], [1], [3, 3, 2, 3, 3, 0, 3, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 2, 1, 2, 1, 2, 1, 2, 0, 2, 3, 2, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2, 1], [2, 1], [0, 0, 0, 0, 0, 1, 0], [4, 5, 3, 4, 4, 4], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 15, 15, 7, 0, 39, 9, 11, 2, 7, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(i1, min(( i1 * i1 ), i2))), int(22.0))) \\l len(in2):{:\\nres0 = len(in0) \\le saveOrd((in1 + (in1[divInt(i1,int(4.0)):][int(7.0):int(2.0)] + in1))[max(abs(int(8.0)), divInt(int(5.0),divInt(int(3.0),divInt(int(0.0),( i1 - mod(max(divInt(int(5.0),int(0.0)), int(6.0)),i0) ))))):int(945.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 195}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 5, 7, 5, 5, 5, 6], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 2, 2, 3, 1, 1, 3, 1, 1], [1, 0, 1, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4], [2, 1, 1], [0, 1, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 8, 8, 6, 0, 29, 6, 10, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i0)), int(22.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(5.0)), int(7.0)), i1) \\le mod(( ( max(int(5.0), int(5.0)) - saveOrd(in0) ) - int(5.0) ),int(6.0))\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 0, 2, 1, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 1, 0, 2, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 5, 5, 7, 0, 23, 4, 8, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i0 )), i2)), int(22.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,i1), int(9.0)), i2) \\le divInt(int(7.0),int(5.0))\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 8, 2, 8, 5, 3, 8], [1, 1, 1, 2, 1, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 2, 2, 1, 1, 3, 3, 1, 1, 1, 0, 2, 0, 0, 2, 1, 1, 3], [1, 0, 1, 1, 1, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 3, 3], [2], [0, 1, 0, 0, 0, 1], [4, 5, 2, 2, 4, 5, 0], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 2, 0, 1, 0, 0], [0, 3, 2], [4], [0, 0, 2, 2], [1], [], [20], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 7, 0, 33, 7, 11, 1, 6, 7, 1, 0, 14, 0, 0, 4, 1, 0, 1, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i1 * i1 )), i2)), int(22.0))) \\l len(in2):{:\\nres0 = len(s2) \\le saveOrd((s2 + (in1[mod(divInt(divInt(int(4.0),int(8.0)),max(len(\"\"u\"\"), int(2.0))),int(8.0)):][int(5.0):][i1:divInt(i1,i2)] + in2))[mod(int(3.0),int(8.0)):len(s0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 9, 3, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 6, 0, 19, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i2 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(i1, mod(i1,int(9.0))) \\le int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [0, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 8, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(min(i0, ( i0 + i1 )), i2)), int(22.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 5, 0, 25, 3, 10, 1, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i1 * i1 )), i0)), int(22.0))) \\l len(in2):{:\\nres0 = len(in0) \\le saveOrd((s2 + (in1[mod(i1,int(4.0)):][int(7.0):int(2.0)] + in2))[max(abs(int(8.0)), int(5.0)):int(3.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 142}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 1, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(21.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [0, 1, 1, 1], [1, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 0, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 2, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 1, 15, 5, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 ))\\ni2 -= mod(mod(( int(9.0) + i1 ),int(8.0)),int(9.0))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [0, 1, 1], [1, 0, 0], [1], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 2, 9, 2, 2, 5, 5, 1, 4, 2, 7], [1, 0, 0, 2, 2, 0, 1, 0, 2, 0, 1, 0, 1], [1], [1, 3, 2, 3, 3, 1, 0, 0, 0, 1, 0, 0, 3, 3, 3, 0, 2, 0, 2, 0, 1, 3, 1, 1, 0, 0, 2, 0, 0, 0, 0, 2, 3, 1], [1, 0, 1, 1, 0, 1, 1], [2, 3, 3, 4, 2, 3, 1, 4, 1], [1, 0, 2, 2, 1, 2, 0], [1, 1, 0, 1], [4, 5, 5, 0, 1, 4, 2, 2, 1], [], [], [0, 0, 4, 2, 2, 0, 4, 2, 4, 0, 0, 2, 2, 2, 0, 4, 2, 0], [3, 0, 0], [2], [2, 2, 1, 2, 1, 0, 1, 0], [], [5], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 6, 1, 3, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(12.0) \\le abs(mod(len(in1),len(in2)))\\ni1 -= int(9.0)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 216}, {"genotype": [[0], [0, 1, 1, 1], [1, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 3, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 3, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 1, 15, 5, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 ))\\ni2 -= mod(mod(( int(9.0) + int(8.0) ),int(9.0)),int(5.0))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 7, 8, 7, 2, 5, 5], [1, 0, 1, 2, 1, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 3, 2, 1, 1, 0, 0], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 7, 0, 25, 4, 9, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(27.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(8.0)), int(7.0)), max(divInt(int(2.0),int(5.0)), i1)) \\le i2\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 222}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 7, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 1], [1, 0, 0, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 0], [2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 2], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 23, 3, 9, 2, 1, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i1 * i1 )), i2)), int(22.0))) \\l len(in2):{:\\nres0 = len(in0) \\le saveOrd((s2 + (in1[( i1 + int(4.0) ):][:int(7.0)] + in2))[int(2.0):max(i1, int(8.0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 206}, {"genotype": [[0], [1, 1], [1, 2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 2, 9, 2, 2, 7, 5, 1, 2, 2, 7], [2, 0, 0, 2, 2, 0, 1, 0, 2, 1, 1, 0, 1, 1, 0], [1], [1, 3, 2, 3, 3, 1, 3, 2, 0, 0, 0, 0, 3, 3, 3, 0, 2, 1, 2, 0, 0, 3, 1, 2, 0, 0, 2, 0, 0, 0, 2, 2, 1, 1, 0, 0, 3, 1, 3, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 4, 2, 3, 1, 4, 1, 4], [1, 0, 2, 2, 1, 2, 0], [1, 1, 1, 1, 1, 0, 1], [4, 5, 5, 0, 4, 4, 2, 2, 1], [], [], [0, 0, 4, 2, 2, 0, 4, 2, 2, 0, 0, 2, 2, 2, 0, 4, 2, 0, 4], [3, 0, 0, 1], [4], [2, 2, 1, 0, 1, 0, 1, 0], [], [5], [], [], []], "fitness": 9, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 3, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(12.0) \\le abs(mod(len(in1),len(in2)))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 216}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 4, 2, 8, 5, 3], [2, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 5, 0, 25, 3, 10, 1, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i2, ( i1 * i1 )), i2)), int(22.0))) \\l len(in2):{:\\nres0 = len(in0) \\le saveOrd((s2 + (in1[mod(i1,int(4.0)):][int(4.0):int(2.0)] + in2))[max(abs(int(8.0)), int(5.0)):int(3.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 142}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 4, 7, 6, 8, 5, 3, 3, 6, 3], [1, 1, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 1, 3, 1, 2, 1, 2, 3, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 2, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 11, 11, 5, 0, 29, 5, 10, 1, 4, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(divInt(len(in1),abs(min(i1, ( i1 * i0 )))), i2), int(22.0)) \\l len(in2):{:\\nres0 = len(in0) \\le saveOrd((s2 + (in1[mod(i1,int(4.0)):][int(7.0):int(6.0)] + in2))[int(8.0):max(int(5.0), divInt(int(3.0),mod(abs(int(3.0)),int(63.0))))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 142}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 2, 0, 2, 8, 5], [2, 0, 1, 1, 1, 1, 1], [1], [1, 3, 2, 2, 3, 3, 3, 2, 2, 0, 2, 1, 3, 1, 2, 0, 0, 2, 0, 1, 1, 2, 1, 0], [1, 1, 1, 1, 1, 1, 0, 0], [1, 3, 3, 0, 1, 3, 1, 4, 2], [1, 2, 1, 0], [0, 1, 1, 1, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 5, 0, 24, 8, 5, 2, 6, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(divInt(mod(len(in1),len(in2)),min(mod(mod(i2,mod(int(2.0),max(int(0.0), mod(i0,i1)))),( i1 - int(2.0) )), int(8.0))), ( int(5.0) * i1 ))\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 8, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 - i1 )), i2)), int(28.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 222}, {"genotype": [[0], [0, 1, 1, 1], [1, 0, 1, 2, 2, 1, 0, 1, 1], [0], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 1, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 9, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 1, 15, 5, 3, 4, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 ))\\ni0 -= ( mod(( int(9.0) - int(8.0) ),int(9.0)) + int(5.0) )\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(6.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [2], [0, 2, 2], [], [0, 0], [], [], [3, 3], [4, 4], [1, 1, 1], [0, 0], [], [0], [0], [], [], [1, 1, 1, 1, 1, 0, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 0, 3, 1, 0, 2, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5, 5, 1, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 1, 2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 5, 0, 22, 7, 4, 5, 2, 9, 0, 0, 12, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(7.0) ))) + int(2.0) )\\ns2 = (in1 + (in2[i2:][:( i0 + min(int(8.0), i0) )] + in2))[( i2 - int(7.0) ):int(71.0)]\\ns1 = in2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 170}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(8.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 173}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 1, 5, 7, 7, 1], [2, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 2, 0, 1, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 18, 8, 3, 5, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(3.0) ) + int(7.0) ))) + divInt(int(1.0),( ( i2 * int(5.0) ) - i0 )) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 179}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( int(4.0) + i0 ) + int(6.0) ))) + int(3.0) ):{:\\nres0 = i2 \\le divInt(int(8.0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 172}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 0, 1], [4, 6, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 6, 3, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( int(4.0) + i0 ) + int(6.0) ))) + int(3.0) ):{:\\nres0 = i2 \\le ( int(87.0) * i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 172}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 0, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(20.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 224}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 4, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(3.0) ) + int(7.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(6.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [1], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(6.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 10, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(6.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 162}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [4, 8, 9, 8, 7, 7, 1, 6, 9, 6, 3, 4, 6, 3, 4, 0], [0, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 1, 2, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 16, 16, 5, 0, 25, 8, 3, 6, 2, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(8.0) ))) + int(9.0) ):{:\\nres0 = i1 \\le ( int(8.0) * i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = (in1 + (in2[int(7.0):][i0:( i2 - int(7.0) )] + in2))[int(1696346.0):( int(34.0) * int(0.0) )]\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 169}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [3], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 0, 2, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 0], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 7, 0, 23, 3, 7, 1, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i0 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = in0 != (s2 + (in1[min(i1, mod(i1,int(9.0))):int(7.0)][i0:int(3.0)] + in2))[int(5.0):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 239}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 11, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(3.0) ) + int(7.0) ))) + min(int(9.0), divInt(int(5.0),i2)) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 4, 6, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 12, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 1, 15, 4, 5, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(len(in1),( len(in2) - divInt(mod(i2,int(38.0)),int(4.0)) ))):{:\\nres0 = i1 \\l abs(len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(6.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 186}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(6.0) ))) + i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 3, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( min(int(4.0), int(6.0)) + int(9.0) ) + i0 ))) + divInt(int(8.0),i2) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 2, 5, 5, 1, 4, 4, 7], [2, 1, 1, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 12, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 1, 15, 4, 5, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(len(in1),( len(in2) - divInt(mod(i2,int(38.0)),int(2.0)) ))):{:\\nres0 = i1 \\l abs(len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(5.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 186}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 0, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 0, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 12, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 1, 15, 4, 5, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(len(in1),( len(in2) - divInt(mod(i2,i1),int(38.0)) ))):{:\\nres0 = i0 \\l abs(len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(4.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 186}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 5], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [2, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 3, 0, 16, 6, 3, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(2.0) ) + int(7.0) ))) + int(2.0) ) and i2 != ( i0 + int(8.0) ) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 180}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 3, 4, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( int(4.0) + int(6.0) ))) + i0 ):{:\\nres0 = int(3.0) \\le int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(8.0) ))) + i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 180}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 0, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 14, 5, 4, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(divInt(len(in2),divInt(len(in0),( ( i2 + int(3.0) ) + int(7.0) ))),min(int(9.0), i2))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [1, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 3, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 18, 7, 4, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(8.0) ))) + ( i2 + ( min(i0, int(2.0)) - i0 ) ) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 180}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( int(3.0) - i2 ) + int(0.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 305}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 0, 0, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 14, 5, 4, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(divInt(len(in2),divInt(len(in0),( ( i2 + int(3.0) ) + int(7.0) ))),min(i2, i2))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7, 6, 0, 0, 4], [2, 1, 2, 2, 2, 0, 1, 0, 0, 2], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0, 2, 0, 1], [1, 0, 1, 1, 1, 1], [2, 3, 3, 1, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 2, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 12, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 15, 15, 10, 1, 28, 6, 6, 2, 5, 6, 0, 0, 15, 2, 1, 6, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(len(in1),( len(in2[divInt(mod(i2,int(38.0)),int(4.0)):]) - i1 ))):{:\\nres0 = max(len(getCharFromString(in2.rstrip((s1[:int(5.0)][i2:divInt(i2,i2)] + in1)), i0)), i1) \\l len(in2[:int(5.0)][:int(144.0)][i0:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += divInt(i2,int(76004.0))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 186}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 12, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 1, 15, 4, 5, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(len(in1),( len(in2) - divInt(mod(i2,int(3.0)),int(8.0)) ))):{:\\nres0 = i1 \\l abs(len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(4.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 186}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 14, 5, 4, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(3.0) ) + int(7.0) ))) - min(int(9.0), i2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 185}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 2, 1, 3, 1, 0, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0, 1], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 2, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(divInt(len(in2),divInt(len(in0),( ( i2 + mod(int(3.0),min(int(7.0), i2)) ) + int(9.0) ))),i2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 180}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 3, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( min(int(4.0), int(6.0)) + int(9.0) ) + i0 ))) + divInt(int(8.0),i2) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 171}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + divInt(int(8.0),i2) ))) + ( int(9.0) * i2 ) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 180}, {"genotype": [[0], [0, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 12, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\ni0 += i2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 204}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( int(3.0) - i2 ) + int(0.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 305}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 12, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( int(3.0) - i2 ) + int(0.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 305}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 4, 9, 2, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 4, 2, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(14.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(( ( int(9.0) - int(2.0) ) + int(9.0) ),int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 180}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 4, 1, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 2, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0], [4, 2, 3, 0, 0], [2, 0, 0, 1, 1, 2, 0], [1, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 17, 7, 3, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( ( abs(mod(len(in2),( mod(int(4.0),divInt(int(4.0),int(1.0))) * i0 ))) + ( int(8.0) + i2 ) ) - int(7.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 300}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( int(3.0) - i2 ) + int(0.0) ))) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 329}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 0, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 14, 5, 4, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(divInt(len(in2),divInt(len(in0),( ( i2 + int(6.0) ) + int(7.0) ))),min(int(9.0), i2))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 181}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( int(3.0) - i2 ) + int(0.0) ))) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 329}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( int(3.0) - i2 ) + int(0.0) ))) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 329}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( int(3.0) - i0 ) + int(0.0) ))) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 329}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [0], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( int(3.0) - i2 ) + int(0.0) ))) + divInt(int(6.0),( int(8.0) * i2 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 329}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 13, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( int(3.0) - i2 ) + int(0.0) ))) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 329}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 4, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(14.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 210}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [0, 1, 2, 2, 2, 0, 1], [0, 1], [1, 3, 2, 3, 2, 3, 2, 0, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 0, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2], [0], [5], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 9, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(16.0) \\le abs(mod(len(in1),( len(in2) - divInt(i0,i1) )))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 195}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( divInt(int(3.0),i2) - int(0.0) ))) + divInt(int(2.0),( int(8.0) + i1 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 297}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 0, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 14, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 1, 12, 3, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(len(in1),( len(in2) - i2 ))):{:\\nres0 = divInt(i1,int(38.0)) \\l int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += i2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 195}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( ( len(in2) + divInt(len(in0),( min(i0, int(4.0)) + int(8.0) )) ) + int(2.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 352}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 7, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 0, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(17.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(mod(( int(9.0) + int(8.0) ),int(9.0)),int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(5.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 188}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 7, 2, 7, 2, 8, 5], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 1, 1], [0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 14, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in0) * min(min(i1, ( i1 - i1 )), i2) ), int(27.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 325}, {"genotype": [[0], [0, 1, 1, 1], [1, 0, 0, 0], [2], [0, 2, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 2, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 14, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 11, 4, 3, 1, 3, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(16.0) \\le abs(mod(len(in1),( len(in2) - divInt(mod(i2,int(38.0)),int(4.0)) )))\\nin2 = s1\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 195}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 3, 2, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( len(in2) - divInt(mod(len(in0),( ( int(3.0) + i2 ) + int(0.0) )),int(6.0)) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 3, 5, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 2, 1, 2, 2, 0, 1, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 0, 2, 0], [0, 0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 22, 10, 3, 7, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + int(4.0) ) * divInt(( int(7.0) + ( ( i2 * int(3.0) ) + i2 ) ),( i0 * int(5.0) )) ))) + i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 2, 1, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [0, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 1, 8, 2, 2, 2, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0[divInt(int(16.0),i0):]) \\le ( len(in2) + i2 )\\ni1 -= i0\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 2, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 18, 8, 3, 5, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( divInt(int(4.0),( int(6.0) + i0 )) + ( int(9.0) + i2 ) ) * int(8.0) ))) - i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 7, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 1, 1, 2, 0], [0, 0, 0], [1, 5, 2, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 1, 9, 7, 3, 5, 5], [1, 0, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 - i0 )), i2)), int(21.0))) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 0, 1, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 6, 2, 2, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(i2,int(3.0)) + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [4], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 4, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 2, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(14.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2.startswith(s0[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):min(i2, i1)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(5.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 189}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 4, 1, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 1, 2, 1, 0, 0, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( i0 + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 1, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 0, 0, 1, 1, 1, 1], [1, 4, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [4], [2, 0], [], [5], [5], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(1497.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 4, 1, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 2, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0], [2, 0, 0, 1, 1, 2, 0], [1, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 7, 3, 5, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( ( len(in2) * mod(max(( ( int(4.0) + mod(int(4.0),int(1.0)) ) + i0 ), ( int(8.0) - i2 )),int(7.0)) ) - i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 17, 6, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(abs(( ( i2 * int(3.0) ) + int(7.0) )),min(int(9.0), divInt(int(5.0),i2)))) + int(5.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 337}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [2], [0, 1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 7, 9, 3, 7, 6, 1, 5, 7, 9, 4, 0], [2, 1, 0, 0, 2, 0, 0, 2], [0, 1], [3, 2, 3, 3, 2, 3, 2, 2, 0, 1, 1, 3, 0, 1, 2, 2, 3, 0, 1, 0, 1, 1, 3, 0, 2, 2, 0, 1, 2, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1], [4, 3, 3, 0, 0, 4, 1], [0, 0, 0, 2, 2, 0, 0, 2], [0, 0, 0], [1, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 8, 2, 31, 9, 7, 8, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( len(in2) + len(s2) )\\ni2 = ( min(( ( i1 + int(3.0) ) + int(7.0) ), min(i0, int(9.0))) * ( divInt(saveOrd((s2 + (in1[i0:][int(3.0):] + in2))[i2:]),int(7.0)) * int(6.0) ) )\\ni0 += max(i0, ( ( i2 + int(1.0) ) * divInt(int(5794.0),int(0.0)) ))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [2, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2[int(16.0):]) \\le len(in2)\\ni1 += i2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [0, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(s2),min(min(i0, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2)\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 337}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 0, 6, 8, 7, 7, 1, 0, 7, 9], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 2, 2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 4, 0, 21, 7, 3, 4, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len((in0 + (s2[( ( int(3.0) - i2 ) + int(0.0) ):][int(6.0):] + in1))[:int(8.0)][divInt(int(7.0),i2):int(7107.0)]),i2)) + ( i0 * int(9.0) ) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 5], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1], [4, 6, 3, 9, 7, 7, 1, 7, 6], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 3, 1, 1, 2, 2, 1, 0, 1, 0, 2, 0, 1, 0, 3, 1, 3, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 0, 0, 0, 4], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 4, 0, 26, 8, 6, 5, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),divInt(min(( ( int(4.0) + min(int(6.0), int(3.0)) ) + divInt(( int(9.0) + i0 ),int(7.0)) ), i2),( i2 * int(7.0) ))) - i0 ):{:\\nres0 = min(int(1.0), saveOrd(in0)) != int(76.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [0, 1, 1], [0, 0], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [8, 7, 9, 7, 7, 6, 1], [2, 1, 0, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 3, 2, 1, 2, 3, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 2, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le len(in2)\\ns1 = s2\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [0, 0, 2, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i0, divInt(i0,i2)), int(1.0)) ), int(6.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 248}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(int(1.0), divInt(i1,i0)), i2) ), int(6.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 248}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2, 1, 2], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 3, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 18, 6, 5, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( min(int(3.0), int(7.0)) * min(int(9.0), divInt(int(5.0),i2)) ) + int(5.0) ))) + i2 )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 252}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 7, 9, 5, 5, 7, 1, 3, 6, 9], [2, 2, 2, 0, 2, 0], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 0, 1, 1, 3, 1, 3, 1, 0, 1, 0, 2, 0, 1, 3, 1, 0], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0, 1], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 6, 0, 24, 5, 6, 2, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(divInt(len(in2),i2),len(getCharFromString((in0 + (s2[divInt(( i2 + int(3.0) ),int(7.0)):min(int(9.0), min(int(5.0), i2))][int(5.0):i0] + in1))[( i2 + int(7136.0) ):], max(int(9.0), i0))))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [0, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 15, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 - i1 )), i2)), int(06.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 248}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 3], [0, 1, 1], [0, 0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 3, 3, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 1, 0, 2, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 4, 0, 18, 5, 5, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( min(i0, int(4.0)) + int(7.0) ))) + int(3.0) ) and i2 \\ge ( i0 + min(int(3.0), i0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 188}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 0, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2], [1, 0, 1, 1], [2, 4, 3, 0, 0, 3, 3, 1, 1], [2], [1, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 1, 4, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(saveOrd(s1)) \\l mod(len(in2),min(i1, i0))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [8, 7, 9, 3, 7, 6, 1], [2, 1, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 2, 2, 3, 2, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [4, 3, 3, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 0, 23, 10, 4, 4, 6, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( divInt(i2,int(8.0)) + int(7.0) ))) + divInt(int(9.0),( ( mod(abs(divInt(int(3.0),i1)),int(7.0)) + i0 ) * int(6.0) )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 201}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 16, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( i0 + len(in2) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(2.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 2, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1], [0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 6, 0, 23, 4, 8, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(( len(in1) * min(min(i1, ( i0 * i1 )), i2) ), int(22.0))) \\l len(in2):{:\\nres0 = min(max(divInt(i1,int(9.0)), int(2.0)), i1) \\le mod(int(5.0),int(5.0))\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], "other_info": {}, "test_fitness": 372}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 3, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(s2),( ( min(int(4.0), int(8.0)) + int(9.0) ) + i1 ))) + divInt(int(8.0),i2) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 357}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 18, 8, 3, 6, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( mod(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(8.0) ))) + ( i2 + ( ( i0 - int(2.0) ) * i0 ) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 212}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 13, 5, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(abs(( ( int(3.0) - i2 ) + int(0.0) )),int(2.0))) + int(8.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 357}, {"genotype": [[0], [1, 1], [0, 1], [0], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 2, 1, 1, 3, 3, 2, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(s0),min(min(i1, ( i1 * i1 )), i2)), int(22.0))) \\l len(in2)\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], "other_info": {}, "test_fitness": 372}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) - min(min(i0, divInt(i2,i2)), i2) ), int(1.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 3, 0, 1, 1], [0, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + max(min(i0, ( i2 - i2 )), i2) ), int(1.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 1, 2, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) - max(min(i0, divInt(i2,i1)), i2) ), int(1.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 0, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) - max(min(i0, ( i2 - i2 )), i0) ), int(1.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [0], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 0, 0, 2, 8, 5], [0, 1, 1, 2, 1, 2, 1, 2], [1], [1, 3, 2, 2, 3, 3, 3, 2, 3, 0, 3, 1, 0, 0, 3, 0, 0, 0, 1, 0, 1, 2, 1, 0], [0, 1, 1, 1, 1, 1, 0, 0], [1, 3, 3, 1, 1, 3, 1, 4, 2], [1, 2, 1, 0], [1, 1, 1, 1, 1, 1], [4, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1, 0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 8, 0, 24, 4, 7, 1, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\l max(( mod(len(in1),len(in2)) - max(mod(max(i0, len((s1 + (in2[int(0.0):i1][:i1] + s1))[:max(i2, i1)][i2:int(0.0)])),i1), int(2.0)) ), mod(int(8.0),i2))\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 190}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 1, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 5, 0, 24, 3, 9, 1, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i1 * i1 )), i2)), int(2.0))) \\l len(in2):{:\\nres0 = len(in0) \\le saveOrd((s2 + (in1[mod(i1,int(2.0)):][int(4.0):int(7.0)] + in2))[int(2.0):max(int(8.0), int(5.0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 241}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [0, 1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) - max(min(i0, ( i2 - i2 )), i2) ), int(1.0))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 6, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 0, 3, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 5, 5, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( int(6.0) + i2 ))) + min(min(int(6.0), i2), ( int(9.0) + i2 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 212}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [3, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 17, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( mod(len(in2),divInt(len(in0),( ( i0 + int(3.0) ) + int(8.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 210}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 5, 0, 19, 3, 8, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i2 * i1 )), i2)), int(22.0))) \\l len(in2):{:\\nres0 = len(in0) \\le max(mod(i1,int(4.0)), int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 207}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 1, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 18, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(1.0) ))) + i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 3, 4, 7, 2, 8, 5, 3], [1, 2, 1, 2, 2, 1], [1], [3, 3, 2, 3, 3, 1, 0, 2, 0, 3, 0, 1, 3, 0, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 2, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(int(23.0), i1)), ( i2 * min(i1, int(4.0)) ))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 1, 3, 2, 3, 0, 1, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 1, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 2, 1, 8, 1, 3, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(int(38.0)):{:\\nres0 = len(in1) \\l mod(len(in2),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= int(4.0)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(mod(( len(in2) * ( divInt(int(3.0),i2) + int(0.0) ) ),i2),int(2.0)) + ( int(8.0) * i2 ) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], "other_info": {}, "test_fitness": 388}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 0, 2, 0, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 2, 3, 1, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 20, 4, 8, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(abs(( len(in1) - max(min(i0, ( i2 - i2 )), i0) ))) \\l divInt(len(in2),min(max(( i2 + i0 ), i1), i2))\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 1, 3, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1, 2, 0, 0], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in2),( int(3.0) - min(i2, int(0.0)) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 318}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0], [2, 3, 3, 0, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 2, 5, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in1)) \\l ( len(in2) - min(min(i0, divInt(i2,i2)), i2) )\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [1], [3, 3, 0, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 3, 0, 3, 0, 1, 1], [0, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 4, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(i0, len(in1))) \\l len(in2)\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 8, 7, 5, 5, 5], [1, 0, 2, 2, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 0], [1, 0, 1, 1], [3, 1, 3, 2, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 20, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 3, 3, 3, 0, 13, 2, 6, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(in1) \\l max(divInt(len(in2),abs(min(i1, ( int(22.0) * i0 )))), i2):{:\\nres0 = int(8.0) != len(in0)\\n:}\\n", "test_case_results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 265}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 20, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 4, 0, 18, 6, 4, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(7.0) ))) * int(2.0) ) and i2 \\le ( i0 + min(int(8.0), i0) ) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 218}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 21, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in1),( ( int(3.0) - i2 ) + int(0.0) ))) + int(6.0) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 341}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 1, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(in2),mod(len(in0),( ( i0 + int(4.0) ) + int(1.0) ))) + int(9.0) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 299}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),( divInt(i0,int(4.0)) + int(6.0) ))) + int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 313}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( int(4.0) + i0 ))) + int(6.0) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 223}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 3], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 0, 0, 0, 2, 0, 1, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 0, 1, 1, 0, 2, 2, 3, 1, 0, 2, 0, 1, 2, 0, 2, 1, 2, 3, 0, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 0, 2, 1, 0, 2], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 22, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 6, 6, 8, 0, 30, 11, 5, 8, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 - i0 ) + int(4.0) ))) + int(7.0) ) and i0 \\ge ( ( min(int(2.0), i0) + ( i2 * int(8.0) ) ) - divInt(i0,( int(7.0) + ( min(i1, i0) * int(7.0) ) )) ) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 8, 9, 8, 9, 5, 6, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 0, 3, 3, 1, 0, 2, 0, 1, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 1, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 23, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 4, 1, 11, 2, 3, 2, 1, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(18.0) \\l max(mod(i1,len(in1)), len(in2)):{:\\nres0 = in2 not in s0[int(9.0):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += ( i1 - int(8.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 420}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 23, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 14, 5, 4, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 - int(4.0) ) + int(7.0) ))) + min(int(9.0), int(5.0)) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 243}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 3, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),int(3.0))) + ( i2 + int(7.0) ) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [3, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( int(4.0) + len(in2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 304}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 7, 7, 1], [2, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 2, 1, 2, 2, 0, 1, 3, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 1, 0], [4, 3, 3, 1, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 22, 8, 5, 4, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),max(( i2 + int(3.0) ), int(7.0)))) + ( int(9.0) + divInt(( i2 * int(5.0) ),min(divInt(i0,int(7.0)), i0)) ) )\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 289}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\l ( divInt(len(in2),mod(len(in0),( ( int(4.0) + i0 ) + int(6.0) ))) + int(3.0) ):{:\\nres0 = i1 \\le divInt(int(8.0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 299}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 4, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 3, 1, 2, 1, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),int(3.0))) + ( i2 + int(7.0) ) )\\n", "test_case_results": [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 242}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 24, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),( ( i0 + int(4.0) ) + int(6.0) ))) + int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 304}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 25, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le ( divInt(len(in2),mod(len(in0),( ( int(3.0) - i2 ) + int(0.0) ))) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 299}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),i0)) + ( i2 + int(4.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 3, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 0, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 0, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(len(in2),len(in0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 289}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [3, 3, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 5, 1, 18, 5, 4, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(33.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(divInt(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += min(i1, i2)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 259}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 3, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),len(in0)) + min(divInt(( i0 + int(4.0) ),int(8.0)), int(2.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 289}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),( ( int(3.0) * i1 ) + int(0.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 287}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 0, 1], [4, 6, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 6, 3, 2, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),divInt(( int(4.0) + i0 ),int(6.0)))) + int(3.0) ):{:\\nres0 = i2 \\le mod(int(87.0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 284}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 1, 0, 2, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),divInt(i0,i2))) + int(4.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 283}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0, 1], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( divInt(i0,int(4.0)) + mod(int(6.0),i2) ))) - ( int(9.0) + i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 259}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 9, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( int(3.0) - i2 ) + int(9.0) ))) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 2, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),( ( int(3.0) - i2 ) * int(0.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 287}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 0, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 0, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(divInt(len(in2),i2),len(in0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 289}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [0], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 0, 0, 2, 8, 5], [0, 1, 1, 2, 1, 0, 1], [1], [1, 3, 2, 1, 3, 2, 3, 1, 3, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0], [0, 1, 1, 1, 1, 1, 0, 0], [1, 3, 3, 1, 1, 3, 1, 4, 2], [1, 2, 1, 0], [1, 1, 1, 1, 1, 1], [4, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 26, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 8, 2, 3, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\l max(( int(0.0) - len(in1) ), mod(len(in2),int(0.0)))\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 436}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 1, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),i2)) - ( int(3.0) - i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 1, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 3, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),( len(in0) - i2 )) - ( int(3.0) + i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),i2)) - ( int(3.0) + i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 4, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 0, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 27, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[i0:]) \\le len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 306}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( mod(len(in2),mod(len(in0),( ( i0 + int(4.0) ) + int(8.0) ))) + int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 1], [1, 6, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(1.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 298}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 0, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 4, 1, 15, 4, 3, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), ( i1 - i0 )):{:\\nres0 = in2 not in s0[mod(i2,mod(int(0.0),int(9.0))):int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= int(9.0)\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 451}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 9, 8, 5, 5, 5, 6], [1, 0, 1, 2, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 2, 2, 3, 1, 1, 3, 2, 1], [1, 0, 1, 1, 0, 1], [2, 0, 3, 0, 0, 3, 0, 1, 1, 4], [2, 1], [0, 1, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 5, 5, 6, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(min(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(22.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(8.0)), i2) \\le int(5.0)\\n:}\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 408}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 28, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(1.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 298}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 0, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 28, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(1.0):]) \\le len(in2)\\ni0 += i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 298}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 1, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 1, 0, 2, 2, 2, 1, 1, 0, 1, 3, 0, 0, 0, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 28, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 6, 1, 19, 5, 4, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), ( int(0.0) * i1 )):{:\\nres0 = in2 not in s0[mod(mod(( int(4.0) - int(8.0) ),i0),int(1.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += i1\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 451}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [5, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 29, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2[int(16.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 323}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 0], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 4, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(saveOrd(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\l int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 313}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2], [1, 0, 1, 1], [4, 1, 3, 0, 0, 3, 3, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 12, 2, 5, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\l max(mod(len(in2),min(min(i1, ( i0 * i1 )), i2)), int(22.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [8, 7, 9, 3, 7, 6, 1], [2, 1, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 2, 3, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 4, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 1, 20, 8, 4, 5, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(saveOrd(in0),( ( i2 + int(8.0) ) + int(7.0) ))) + divInt(int(9.0),( int(3.0) * ( abs(i1) * int(7.0) ) )) )\\ni0 = i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [6, 3, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in0),mod(len(in0),( ( int(6.0) - i2 ) + int(3.0) ))) + int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 368}, {"genotype": [[0], [0, 1, 1], [0, 0], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [8, 7, 9, 3, 7, 6, 1], [2, 1, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 0, 1, 2, 3, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 2, 0], [2, 0, 0, 2, 2, 2, 0], [0, 0, 0], [1, 5, 4, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 1, 15, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in1),( ( i2 * int(8.0) ) + int(7.0) ))) + divInt(int(9.0),i1) )\\ni0 = int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 370}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 0, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 4, 3, 1, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 2, 5, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(saveOrd(in1)) \\l ( len(in2) - max(min(i0, ( i2 - i2 )), i0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 1, 0, 2, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1], [2, 1, 4, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(saveOrd(in1),min(min(i1, int(29.0)), i2)), ( i1 + int(9.0) ))) \\l len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 4, 0, 0, 3, 3, 4, 1, 2], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 5, 0, 25, 3, 10, 1, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(mod(saveOrd(in1),min(min(i1, ( i1 * i1 )), i2)), int(22.0))) \\l len(in2):{:\\nres0 = len(in0) \\le saveOrd((s2 + (in1[mod(i1,int(4.0)):][int(7.0):int(2.0)] + in2))[max(abs(int(8.0)), int(5.0)):int(3.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 301}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 7, 7, 1], [2, 1, 0, 1, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 2, 0, 1, 3, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0], [1, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 30, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 22, 9, 4, 6, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(len(in2),( ( i2 + int(3.0) ) + int(7.0) ))) + divInt(int(9.0),( ( i1 * int(5.0) ) - min(( i0 * int(7.0) ), i1) )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 325}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 2, 8, 5], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 1, 2, 0, 1, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 0, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(int(2.0), ( i1 * int(6.0) )), i1)), int(2.0))) \\l len(s0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 2, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [3, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 5, 1, 18, 5, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(abs(len(in0)),( i1 * i0 )), mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0))):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += min(i1, i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [3, 2, 9, 7, 2, 6, 5], [1, 0, 1, 2, 2, 1], [1, 1], [3, 3, 2, 1, 3, 3, 1, 2, 1, 0, 1, 1, 3, 3, 3, 1, 0, 1, 1, 1, 2, 1, 1], [1, 0, 1, 1], [2, 4, 3, 0, 1, 3, 3, 1, 1], [2], [0, 0, 0], [4, 5, 0, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 1, 0, 12, 2, 4, 1, 1, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(saveOrd(getCharFromString(in1, divInt(int(32.0),len(in2))))) \\l min(int(9.0), ( int(7.0) * i1 )):{:\\nres0 = int(2.0) \\le int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 1, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 3, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 2, 2], [2], [0, 1, 0], [4, 5, 3, 5, 4, 5], [], [], [0, 0, 0, 2, 1, 4, 1, 2, 2, 4, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 1, 7, 0, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, len(in2)), i1)), i1)) \\l i2:{:\\nres0 = int(22.0) \\le len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 0, 2, 8, 5, 3], [1, 1, 1, 2, 2, 1], [1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 0, 3, 1, 0, 1, 0, 2, 1, 1], [1, 0, 1, 1, 1, 0, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [2, 0], [0, 1, 0, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 17, 5, 3, 1, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(divInt(( max(mod(i1,divInt(divInt(i1,int(2.0)),int(2.0))), int(4.0)) * i1 ),len(in1))) \\l int(0.0):{:\\nres0 = i2 \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 1, 2, 2, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 2, 0, 16, 7, 1, 3, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(int(3.0),mod(( divInt(divInt(int(0.0),i2),int(2.0)) - int(8.0) ),int(7.0))) + ( int(7.0) + i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 0, 0, 1, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 9, 1, 4, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(i1, i0)), int(26.0))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 1, 2, 3, 3, 3, 2, 2, 3, 1, 1, 3, 1, 0, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 4, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0, 1], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 7, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le divInt(divInt(len(in2),divInt(len(in0),( ( int(4.0) + i0 ) + int(6.0) ))),mod(i2,( int(4.0) - i2 ))):{:\\nres0 = int(8.0) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 1, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 7, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 4, 1, 15, 4, 4, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(len(in1),( len(in2) - mod(mod(i2,int(37.0)),int(4.0)) ))):{:\\nres0 = i1 \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += abs(int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 1, 2, 1, 0, 1, 1, 2, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 4, 2, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le divInt(divInt(i0,divInt(len(in2),int(4.0))),( int(6.0) + i2 )):{:\\nres0 = int(3.0) \\le int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 0, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 2, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 1, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 5, 0, 15, 2, 7, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),i1), min(i1, ( i1 * i2 )))) \\l i1:{:\\nres0 = int(22.0) \\le min(len(in2), len(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 1], [2, 2, 1, 2, 2, 1, 0, 1, 1], [2, 1, 0, 0], [0, 1, 1, 1, 1, 1], [0, 0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 1, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 2, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [1, 3, 2, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 1, 0, 0], [4, 5, 5, 0, 5, 5, 5], [], [0, 0], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 9, 9, 4, 5, 2, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 24, 24, 12, 4, 35, 11, 3, 5, 8, 7, 0, 2, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),int(9.0)), ( i1 * i0 )):{:\\nif in2 not in in2:{:\\nres0 = mod(mod(( int(8.0) - int(9.0) ),int(5.0)),int(5.0)) \\le abs(i0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in in2[i1:mod(int(6.0),int(2174.0))]:{:\\nloopBreak% = 0\\nfor in2 in in2:{:\\ni2 += i1\\ni1 += int(20.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = mod(i1,mod(( divInt(int(65083.0),i0) + int(305.0) ),divInt(i2,int(5.0))))\\ni2 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [0, 2, 1], [0, 0], [0], [3], [1], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 8, 4, 3, 7, 7, 1, 3, 6, 0, 3, 9], [2, 0, 0, 0, 1, 1], [1, 1], [0, 3, 3, 3, 2, 3, 2, 2, 1, 3, 0, 1, 0, 0, 1, 1, 1, 0, 2, 0, 1, 3, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0], [1, 3, 3, 0, 1, 1], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0, 0], [0, 5, 3, 2, 4, 5, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 5, 5, 4, 0, 17, 3, 5, 1, 2, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( s0 in in2 or i2 \\le max(len(in0), len((s2 + (in1[( min(divInt(mod(int(1.0),max(i0, int(8.0))),i0), i0) + int(4.0) ):][int(3.0):] + in2))[int(7.0):])) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 1, 2, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 1, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 0, 21, 7, 3, 5, 2, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(i2,( len(in2) + ( ( i1 + int(3.0) ) + int(7.0) ) )) * len(getCharFromString((s1 + (s2[int(9.0):divInt(int(5.0),i2)][int(5.0):] + in1))[i0:], ( i2 - int(7.0) ))) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 0, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 6, 1, 19, 5, 4, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = s0 not in s0[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),i2):min(i1, i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 5, 4, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(min(divInt(len(in2),min(( int(4.0) + i0 ), int(6.0))), int(3.0)),i2) + ( int(8.0) + i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 1, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 2, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 4, 1, 18, 5, 4, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( int(9.0) * i1 )):{:\\nres0 = s2 not in s0[mod(mod(( int(8.0) - int(9.0) ),int(5.0)),int(5.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += min(i2, i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 3, 3, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(s0, ( divInt(len(in2),divInt(len((in0 + (s2[:( ( i2 + int(4.0) ) + int(6.0) )][:int(9.0)] + in1))[i2:]),divInt(int(8.0),i2))) + int(7.0) ))) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [0], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 0, 0, 2, 8, 5], [0, 1, 1, 2, 1, 0, 1], [1], [1, 3, 2, 2, 3, 2, 3, 2, 3, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0], [0, 1, 1, 1, 1, 1, 0, 0], [1, 3, 3, 1, 1, 3, 1, 4, 2], [1, 2, 1, 0], [1, 1, 1, 0, 0, 1], [0, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 6, 0, 18, 6, 4, 1, 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\l max(( mod(len(s0),mod(len(in2),mod(max(i0, divInt(int(0.0),i1)),i1))) - divInt(i2,i1) ), i0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [2], [0, 2], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 4, 1, 7, 9, 5, 5], [1, 0, 0, 2, 1, 1], [1], [1, 3, 2, 0, 3, 3, 0, 2, 2, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 7, 1, 3, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(24.0) \\l abs(divInt(i1,max(len(s0), i0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [3, 0, 2, 8, 7, 7, 1, 7, 5, 0, 9], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 4, 0, 22, 7, 3, 4, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s2[( divInt(len(in2),mod(len((in0 + (s2[:( ( int(3.0) - i2 ) + int(0.0) )][int(28.0):] + in1))[int(7.0):divInt(int(7.0),i2)]),int(1.0))) + i2 ):( i0 * int(7.0) )]) \\le int(509.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(min(( ( i0 + int(4.0) ) + int(6.0) ), int(9.0)),i2)) + divInt(int(8.0),i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 2, 3, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 17, 6, 3, 3, 3, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),( ( int(4.0) + i1 ) + int(2.0) ))) - int(3.0) ):{:\\ns2 = (in1 + (in2[i2:][divInt(int(8.0),i2):] + in2))[int(7.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 0, 2, 2, 2, 0, 1], [1], [3, 3, 2, 3, 3, 1, 0, 2, 0, 2, 1, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 3, 0, 1, 1], [0, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 0, 21, 4, 7, 3, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + max(int(1.0), i0) ), ( i0 - divInt(int(1.0),int(9.0)) ))) \\l min(len(in2[min(( i2 + i2 ), i2):i0]), int(7.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0], [4, 3, 2, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 1, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l divInt(divInt(len(in2),divInt(i0,divInt(( i2 + int(4.0) ),int(8.0)))),int(9.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 2, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 4, 1, 18, 5, 4, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(( len(in1) * abs(mod(i1,i0)) ), divInt(( ( int(9.0) - int(8.0) ) + int(9.0) ),int(5.0))):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += min(i1, int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 6, 0, 3, 5, 5], [1, 0, 1, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 5, 0, 13, 1, 6, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, i0), i1)), i2)) \\l i0:{:\\nres0 = int(26.0) \\le len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [0, 0, 2, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [4, 0], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 1, 2, 1, 2, 2, 1, 3, 0, 0, 3, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(10.0) \\le max(mod(len(in1),len(in2)), ( i1 * i0 ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1, 0], [1], [3, 3, 2, 3, 3, 0, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 1, 3, 1, 1, 1], [1, 0, 1], [2, 1, 3, 1, 0, 3, 0, 4, 1], [1], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 7, 0, 19, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(s1),max(i1, i0)), ( i1 - i0 ))) \\g i1:{:\\nres0 = int(26.0) \\le min(len(in2), min(mod(i1,i0), int(9.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [4, 4, 1, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0], [3, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 0], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [4, 3, 3, 0, 0], [2], [0, 0, 0], [4, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 10, 1, 5, 0, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in1) \\l len(in1):{:\\nres0 = divInt(len(in0),min(min(i1, i1), i1)) \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [2, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 1, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [1, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 1, 13, 4, 3, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\ni2 -= mod(int(9.0),mod(int(8.0),int(9.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [0, 4], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 7, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 1, 3, 2, 2, 0, 1, 2, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 1, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 1, 0, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [2, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 7, 1, 20, 5, 5, 2, 4, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\l abs(mod(max(int(78.0), len(in1[( mod(i2,int(4.0)) - divInt(i1,abs(len(in2))) ):])),int(5.0))):{:\\nres0 = i2 \\le divInt(i2,i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [3, 0, 2, 8, 7, 7, 1, 2, 2, 3], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 3, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 4, 0, 24, 7, 4, 5, 2, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( ( len(in2) - divInt(len((in0 + (s2[:( ( int(3.0) + min(int(0.0), int(2.0)) ) + int(8.0) )][mod(int(7.0),i2):] + in1))[int(7.0):i2][( i2 * int(1.0) ):int(2.0)]),i0) ) - int(23.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 0, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 1], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le i0:{:\\nres0 = in2 in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 5], [1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 6, 0, 2, 8, 5], [0, 0, 1, 2, 1, 2, 1], [1], [2, 3, 2, 2, 3, 3, 3, 2, 3, 0, 2, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 2, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0], [1, 2, 3, 1, 1, 3, 1, 4, 2], [1, 2, 1, 0], [0, 1, 1, 1, 0, 1], [4, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 7, 0, 21, 6, 5, 1, 5, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = divInt(max(mod(mod(abs(len(in1)),max(mod(max(i0, ( int(10.0) - i0 )),int(6.0)), i1)),i2), i1),i2) \\l divInt(i1,int(0.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 1, 1, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [0, 0, 5, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 5, 0, 24, 9, 3, 6, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s0) \\le ( divInt(max(divInt(max(( ( i0 + int(4.0) ) + int(6.0) ), divInt(i2,( int(9.0) + i2 ))),int(8.0)), i0),( i2 + int(7.0) )) - ( int(7.0) * int(1.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [3, 4, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 4, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\ge max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = mod(mod(( int(9.0) - int(8.0) ),int(4.0)),int(5.0)) \\le min(i2, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1, 0], [0, 0], [], [3, 1], [0], [1], [], [1, 1, 1, 1, 1], [4, 7, 2, 3, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 1, 0, 2, 0, 2, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 4, 2, 0, 2, 1, 1, 0, 4, 4, 1, 0, 12, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( saveOrd(s1) \\le ( divInt(len(in2),mod(len(in0),int(4.0))) + ( i0 + int(7.0) ) ) and int(2.0) \\le int(3.0) ):{:\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 1], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 9, 8, 5], [1, 2, 0, 2, 1, 1, 2], [1], [3, 3, 2, 3, 3, 3, 3, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1, 0], [1, 0, 1], [2, 1, 1, 0, 0, 3, 1, 1, 1, 3], [2, 1], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 7, 1, 24, 3, 10, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(mod(max(min(min(len(in1), ( i1 * i2 )), i0), int(26.0)),max(max(max(mod(i2,int(9.0)), int(7.0)), i1), len(in2))), int(9.0))) \\l int(8.0):{:\\ni1 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 2, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 2, 3, 2, 0, 2, 2, 2, 2, 1, 1, 2, 1, 2, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 5, 1, 23, 9, 2, 5, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(( len(in1) * mod(i1,mod(( mod(( int(9.0) - int(8.0) ),( int(9.0) + mod(i0,i2) )) + int(2.0) ),int(5.0))) ),int(6.0)), i1):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(2174.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 1, 3, 2, 0, 0, 2, 2, 2, 1, 2, 2, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 1, 19, 7, 3, 3, 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(int(9.0),len(in1)), ( i1 + i0 )):{:\\ni2 -= mod(divInt(( int(8.0) + mod(mod(int(9.0),len(in2)),i1) ),i2),int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 1, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 0, 3, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 2, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [3, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 2, 17, 5, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l i0:{:\\ni0 = mod(max(len(in0), ( i2 * len(in2) )),mod(mod(( int(9.0) - int(1.0) ),int(9.0)),int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += abs(i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 2, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 0, 0, 3, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 4, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 5, 1, 17, 6, 2, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(( saveOrd(in1) * mod(i1,i0) ),mod(( mod(int(9.0),int(8.0)) - int(9.0) ),int(5.0))), i2):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 0, 0, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1, 3], [0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 6, 0, 22, 8, 3, 6, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(4.0) \\le ( divInt(min(divInt(max(( ( i0 + i2 ) + int(8.0) ), int(2.0)),i0), ( ( i0 + int(8.0) ) + i2 )),( i2 - int(7.0) )) * len(s1) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 4, 1, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 2, 2, 1, 0, 2, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( mod(len(in2),mod(int(4.0),( ( int(4.0) + i0 ) + divInt(int(1.0),i2) ))) + ( int(8.0) * i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [2, 1], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 0, 1, 2, 1, 1, 0], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 7, 0, 24, 4, 8, 1, 3, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 - i1 )), i2)), int(22.0))) == len(getCharFromString(in2, min(max(mod(i1,int(9.0)), i0), int(7.0)))):{:\\nres0 = divInt(int(5.0),int(5.0)) \\g i1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1, 0, 2], [1], [3, 3, 2, 3, 0, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 2, 3, 0, 0, 1, 1], [1, 0, 1, 0], [2, 1, 3, 0, 0, 3, 1, 1, 1], [2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 8, 0, 23, 4, 8, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),i1), min(i0, ( i1 * i2 )))) \\l i1:{:\\nres0 = int(22.0) \\le min(len(in2), max(mod(i1,( max(i0, i2) + int(9.0) )), int(7.0)))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 2, 1, 5, 5, 1, 4, 4, 7], [1, 1, 2, 2, 2, 0, 1], [1, 0], [1, 1, 2, 0, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 0, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 0, 1, 4, 5, 2, 1], [1], [], [1, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 4, 1, 14, 4, 3, 3, 2, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le int(32.0):{:\\nres0 = mod(i1,( abs(divInt(( i1 - int(1.0) ),int(5.0))) + i2 )) \\l len(\"\"F\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += len(in1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 0, 4, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\le divInt(mod(len(in2),divInt(len(in0),( ( int(9.0) - i2 ) + int(0.0) ))),int(4.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [1], [0, 1, 1], [], [0, 0, 0], [], [], [2, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 8, 4, 7, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1, 0], [1, 0], [1, 3, 2, 3, 2, 2, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 0, 0], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [3, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 0, 3, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 5, 5, 8, 2, 20, 6, 4, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(16.0) \\le abs(mod(len(in0),( divInt(mod(( i2 - int(3.0) ),int(8.0)),i1) + len(in2) ))):{:\\nb2 = abs(int(4.0)) \\l i2\\n:}else:{:\\ni2 += ( i2 * i0 )\\n:}\\ni1 = i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 2, 2, 1, 0, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 2, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 6, 3, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(s2),( int(46.0) + ( ( int(3.0) + i0 ) + len(in0) ) )) * int(8.0) ):{:\\nres0 = i2 \\le divInt(int(7.0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 5], [0, 2, 0], [0, 0], [0], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 2, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 0, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb1 = in1 in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(16.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [2, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 1, 2, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 4, 2, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i2, ( i1 - i1 )), i2)), int(22.0))) \\l len(in2):{:\\nin0 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 0], [], [0, 0], [], [], [3, 1], [4, 3], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [1, 1], [0, 4], [2, 1], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [2, 2, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s0 != in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [3, 2, 2, 3, 3, 3, 2, 2, 0, 1, 0, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1, 2, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1, 0], [3, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5, 4, 2], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 7, 0, 25, 7, 5, 2, 5, 8, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l mod(( len(in2) * len(in2) ),min(mod(mod(i1,int(10.0)),i0), min(int(9.0), ( int(8.0) - i2 )))):{:\\nres0 = s0[int(9.0):i1] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = (in1[:mod(i2,int(5.0))][mod(i1,i1):int(5.0)] + s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 6, 3, 4, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 0, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 0, 17, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(( divInt(len(s0),divInt(len(s0),( ( int(46.0) + i0 ) + int(3.0) ))) + int(4.0) )) \\le i2:{:\\nres0 = divInt(int(7.0),i2) \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [8, 0, 9, 8, 9, 5, 0, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 1, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 1, 15, 5, 2, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(80.0) \\l max(mod(int(9.0),len(in1)), ( i1 * i0 )):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= mod(mod(( int(8.0) + int(9.0) ),int(5.0)),int(0.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [0], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1], [6, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 0, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 1, 1, 1, 0, 2, 1, 1], [1, 0, 1, 1], [2, 1, 0, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 2, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 19, 3, 7, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(i1,min(min(i0, ( i1 * i2 )), i1)), int(6.0))) \\l min(len(in1), min(mod(int(2.0),int(9.0)), int(7.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 1, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 3], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 3], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 23, 3, 10, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i0)), int(26.0))) \\l len(in2):{:\\nb1 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le max(int(1.0), len(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 0, 3, 3, 0, 2, 0, 0, 0, 1, 3, 2, 3, 2, 0, 1, 1, 0, 2, 1, 1], [1, 1, 1, 0, 1, 1, 0, 0], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 6, 0, 19, 4, 6, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(i1,len(in1)), min(i0, mod(i1,i2)))) \\l i1:{:\\nres0 = int(22.0) \\le min(divInt(len(in2),( i1 * int(9.0) )), int(7.0))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 1], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 3, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 3, 1, 0, 2, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 5, 5, 3, 0, 18, 6, 4, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(7.0) ))) + int(2.0) ) and min(int(3.0), i2) \\g ( int(7.0) + i0 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [2, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 3, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [0, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 2, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 1, 12, 4, 3, 1, 3, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(len(in1),( len(in2) - divInt(mod(i2,int(38.0)),int(3.0)) ))):{:\\nin2 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 0, 2, 3, 2, 3, 2, 2, 0, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 2, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [2, 1, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 0, 17, 6, 3, 2, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l divInt(( abs(max(mod(i1,i0), mod(( mod(int(9.0),int(8.0)) * int(9.0) ),int(5.0)))) - len(in1) ),i2):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 6, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 0, 1], [1, 1, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [3, 5, 5, 1, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 2, 3, 2, 1, 0, 0, 0, 0, 14, 14, 3, 0, 22, 5, 5, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(max(len(in0), ( i1 * i0 )),( mod(( int(9.0) - int(8.0) ),int(6.0)) + int(5.0) )), min(min(int(5.0), int(6.0)), int(2174.0))):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = int(20.0) \\le i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 3, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 3, 0, 1, 1], [0, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 7, 0, 21, 3, 9, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + max(min(len(in2), ( i0 - i2 )), i2) ), int(1.0))) \\l min(max(max(divInt(i2,i2), i0), i1), int(1.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [2], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 0, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 0, 1], [1], [3, 3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 3, 1, 1], [1], [0, 1, 0], [4, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 3, 8, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(len(in1), ( min(min(len(s1), i1), divInt(i0,i1)) - i2 ))) \\l int(26.0):{:\\nb2 = len(in0) \\le max(mod(i0,int(9.0)), int(73.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3, 2], [5, 4], [0, 1], [0, 0], [], [0], [], [], [0], [0, 1, 0, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 0, 2, 2, 0, 1], [1], [0, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 0, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1], [0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 5, 0, 11, 2, 4, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif res0:{:\\nb2 = i1 != abs(( max(len(in1), min(i0, ( i0 * i2 ))) - i2 ))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 0, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),min(( i1 * i0 ), mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)))), min(i2, i1)):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [0], [1, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 2, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [0], [0, 0, 0, 2, 4, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 6, 2, 18, 6, 4, 4, 4, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\ni1 *= max(len(in2), mod(( len(s0) - divInt(i0,i2) ),mod(( mod(int(10.0),int(9.0)) + int(8.0) ),int(9.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += min(i2, i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [2, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 4, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 1, 15, 5, 3, 2, 4, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in1)), mod(i1,i0)):{:\\nin2 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 1, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 2, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 2, 3, 1, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 12, 1, 5, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(abs(i1), int(22.0))), i0)) \\l i1:{:\\nres0 = i2 \\le int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0], [2, 1, 3, 0, 1, 3, 0, 1, 1], [2, 0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 19, 4, 7, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = abs(max(mod(len(in1),min(max(i1, ( i2 * i1 )), i2)), int(29.0))) \\l mod(len(in2),min(( i1 + int(9.0) ), int(7.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 2, 0, 0, 2, 1, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 2, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 4, 5, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(len(in1), mod(len(in2),min(( i1 * i0 ), mod(int(10.0),mod(int(9.0),int(8.0)))))) \\l int(9.0):{:\\nres0 = s2 not in s0[int(5.0):min(i2, i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [0], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 0, 0, 2, 8, 5], [0, 1, 1, 2, 1, 0, 1], [1], [1, 3, 2, 2, 3, 2, 3, 2, 3, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0], [1, 3, 2, 1, 1, 3, 1, 4, 2], [1, 2, 1, 0], [1, 1, 1, 1, 1, 1], [4, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 0, 19, 6, 4, 2, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\l max(( mod(len(in1),mod(abs(mod(max(i0, ( int(0.0) - i1 )),i1)),mod(i2,i1))) * i0 ), int(0.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 3, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 1, 15, 5, 2, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l i1:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= mod(max(len(in2), ( i2 - i1 )),mod(mod(( int(9.0) + int(8.0) ),int(3.0)),int(5.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [5, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 3, 3, 0, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 12, 12, 4, 1, 21, 5, 5, 4, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(50.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = mod(( ( int(9.0) - int(8.0) ) + int(9.0) ),min(min(i2, int(5.0)), int(5.0))) \\le int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(2174.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [4, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 6, 1, 20, 5, 4, 4, 2, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(getCharFromString(in1, len(in2))),( i1 * i0 )), ( mod(( int(9.0) - int(8.0) ),int(9.0)) + i2 )):{:\\nres0 = in2[min(i1, i2):int(5.0)] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 9, 7, 2, 6, 5, 8, 5], [1, 0, 1, 2, 2, 1], [1], [3, 3, 2, 3, 3, 3, 1, 2, 1, 0, 0, 2, 3, 3, 1, 2, 0, 1, 1, 1, 2, 1, 1, 0], [1, 0, 1, 1, 0], [2, 0, 3, 0, 2, 3, 3, 1, 1], [1, 2, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 5, 1, 24, 5, 7, 3, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(min(divInt(len(in1),min(abs(int(62.0)), ( int(9.0) - i1 ))), i0)) \\l mod(len(in2[len((in0 + (s2[int(7.0):][:divInt(i1,int(2.0))] + in1))[int(6.0):]):int(5.0)]),( int(8.0) * int(5.0) )):{:\\ni2 *= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [3], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [4, 0, 0, 7, 9, 5, 8, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 1, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 4, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [2, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 14, 14, 5, 0, 22, 4, 4, 1, 3, 5, 0, 0, 11, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(40.0) \\l max(int(0.0), saveOrd(in1[len(in2):mod(i1,i0)])):{:\\nres0 = in2[:( mod(mod(int(7.0),int(9.0)),int(5.0)) * int(8.0) )][min(i2, i1):int(6.0)] != (s0[:int(2174.0)][int(20.0):i2] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 3, 3, 2, 4, 5, 3], [1], [], [0, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 4, 4, 2, 2, 6, 0, 0, 7, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in0),divInt(len(in0),( min(i0, int(4.0)) + int(6.0) ))) + int(9.0) )\\ns2 = (in1 + in2)[i2:]\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 2, 1, 3, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [0, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [1, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 6, 1, 22, 6, 5, 3, 4, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(s0),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[:mod(mod(( int(9.0) - mod(int(8.0),min(min(i2, i1), int(9.0))) ),int(5.0)),int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [3, 0, 6, 8, 7, 7, 1, 7, 0, 3], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 4, 0, 22, 7, 3, 4, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(s1, ( divInt(len(in2),mod(len((in0 + (s2[:( ( int(3.0) - i2 ) + int(0.0) )][int(6.0):int(8.0)] + in1))[divInt(int(7.0),i2):int(7.0)]),i2)) + ( i0 * int(170.0) ) ))) \\le int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 2, 2, 2, 0, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 18, 8, 1, 6, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( mod(divInt(( ( i0 + ( i2 + int(4.0) ) ) + int(8.0) ),int(2.0)),i0) + ( ( i0 - int(8.0) ) * i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 6, 9, 8, 7, 7, 1], [0, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 2, 0, 1, 1, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0], [4, 4, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 1], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 14, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(saveOrd(in2),divInt(len(in0),( ( i0 + int(3.0) ) + i1 ))) + mod(i2,int(6.0)) )\\n", "test_case_results": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 259}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 0, 2, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 4, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 13, 4, 3, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s0) \\le ( int(4.0) + min(divInt(abs(divInt(( i0 + int(6.0) ),int(9.0))),int(8.0)), i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [3, 7, 9, 5, 5, 7, 1, 9, 9, 7, 5], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 2, 3, 1, 0, 1, 0, 1, 0, 2, 0, 1, 3, 1, 2, 3, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0, 3], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 1, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 5, 0, 26, 8, 6, 4, 4, 6, 0, 0, 12, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(divInt(len(in2),divInt(len((in0 + (s2[( ( i2 + int(3.0) ) + divInt(min(int(7.0), i2),int(9.0)) ):][i2:] + in1))[:int(5.0)][i0:]),( i2 - int(5.0) ))),min(int(71997.0), ( len(in2) * int(5.0) )))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(8.0) ))) + int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 0, 1, 1, 1, 1], [1, 4, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 0, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(1497.0):]) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1], [2, 2, 1, 2, 2, 1, 0, 1, 1], [2, 1, 0, 1], [2, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 2, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 0, 0], [4, 5, 5, 0, 5, 5, 1, 2, 4], [], [0], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 8, 8, 4, 4, 1, 1, 0, 0, 0, 2, 3, 2, 1, 0, 0, 0, 2, 26, 26, 12, 3, 40, 11, 5, 6, 7, 9, 0, 1, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), ( i1 * i2 )):{:\\nif in2 not in s0[mod(mod(( int(0.0) - int(9.0) ),int(8.0)),int(9.0)):min(mod(i2,int(5.0)), int(5.0))]:{:\\nin2 = in2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s1 in (s2[:int(6.0)][i1:int(2174.0)] + in1):{:\\nif mod(i2,( divInt(( int(20.0) + i1 ),int(65083.0)) + divInt(i1,int(305.0)) )) \\le int(5.0):{:\\ni0 += min(int(8.0), int(72.0))\\n:}else:{:\\ni1 *= i0\\n:}\\ni2 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1, 1, 0], [1, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 12, 2, 5, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= abs(max(( len(in1) - min(min(int(1.0), mod(i2,i2)), i2) ), int(1.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 2, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 1, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 4, 1, 4, 5, 2, 1], [1], [], [1, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 2, 1, 15, 4, 5, 2, 3, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(len(\"\"F\"\"),( len(in1) - divInt(mod(int(32.0),int(4.0)),int(5.0)) ))):{:\\nres0 = i2 \\l abs(len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 0, 6, 8, 7, 7, 1, 2, 7], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 4, 0, 21, 7, 3, 5, 2, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( ( len(in2) - ( len((in0 + (s2[:( divInt(int(3.0),i1) + int(0.0) )][int(6.0):] + in1))[:int(8.0)][mod(int(7.0),i2):int(7.0)]) + i2 ) ) * ( i0 - int(127.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 6, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 1, 2, 2, 1, 1, 2, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1], [0, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 2, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l min(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[int(9.0):mod(( int(8.0) - int(9.0) ),( int(6.0) + min(i2, i1) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2, 2], [], [0, 0], [], [], [3, 0], [0, 4], [0, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1], [1, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif res0:{:\\nb0 = saveOrd(in1) \\l len(in2)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 3, 1, 1, 1, 0, 0, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [4, 5, 5, 0, 5, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 4, 0, 18, 6, 4, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(in1) \\le ( divInt(len(in2),divInt(len(in2),( ( min(int(4.0), int(8.0)) + int(2.0) ) + i0 ))) + i2 ) and ( i0 + int(8.0) ) \\le i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [3, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 2, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 3, 0, 3, 1, 1], [1, 0, 1], [2, 1, 3, 4, 0, 0, 0, 1, 2, 3], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 6, 0, 22, 3, 10, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),saveOrd(in2)), min(i1, ( i0 * i1 )))) \\ge i2:{:\\nres0 = int(2.0) \\le min(min(max(mod(i2,int(6.0)), abs(i1)), len(in0)), int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 2, 9, 4, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 3, 3, 3, 2, 0, 0, 2, 2, 3, 1, 3, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 1, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 5, 1, 19, 3, 7, 2, 2, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(max(len(in1), min(mod(i1,i0), ( mod(min(int(9.0), saveOrd(in2)),int(2.0)) * int(9.0) ))), len(in2)):{:\\nres0 = s0[i2:i1] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(4.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 0, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 11, 4, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s0) \\le ( divInt(abs(divInt(len(in2),( i0 + i2 ))),int(4.0)) + int(6.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 0], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 0, 5, 3], [1, 1, 1, 0, 1, 1], [1], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 3, 3, 0, 0, 3, 3, 4, 1, 2], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 4, 0, 11, 3, 4, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile divInt(abs(( len(in1) - len(in2) )),min(i1, mod(i1,i1))) \\l i0:{:\\nres0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 8, 8, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 6, 2, 3, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(min(divInt(int(0.0),( ( i0 + int(8.0) ) + int(8.0) )), int(8.0)),i2) + divInt(int(7.0),i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [1], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [3, 0, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 3, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb1 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= int(30.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 2], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [4, 9, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 3, 2, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0], [5, 1, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in2) \\le ( divInt(len(s1),len(in0)) + divInt(( ( int(49.0) * i0 ) + int(3.0) ),int(8.0)) ):{:\\nres0 = i2 == divInt(int(7.0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 9, 1, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [0, 5, 5, 3, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(12.0) \\l max(mod(len(s0),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in in0[mod(mod(( int(9.0) - int(1.0) ),int(9.0)),int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 3], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 2, 2, 0, 3, 1, 0, 2, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 6, 6, 4, 0, 22, 8, 4, 6, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(7.0) ))) + int(2.0) ) and ( ( i2 + min(int(8.0), i0) ) - ( i0 * int(7.0) ) ) \\ge int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [0, 0, 1, 2, 2, 1, 0, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 2, 3, 2, 3, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1], [0, 1, 3, 0, 0, 3, 0, 0, 1], [2, 2], [0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 22, 4, 7, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(max(divInt(len(in1),min(min(i0, ( i0 * i1 )), int(26.0))), int(9.0)), ( len(in2) * mod(min(int(7.0), int(3.0)),i2) )) \\l i2:{:\\nres0 = i1 \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 0, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 2, 2, 0, 2], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 3, 1, 1, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 0, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [1, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 3, 2, 3, 2, 0, 1, 0, 0, 0, 6, 6, 5, 0, 20, 5, 6, 2, 3, 6, 0, 0, 11, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(len(s1),( len(in2) - divInt(( i2 + abs(int(38.0)) ),int(4.0)) ))):{:\\nres0 = len(in2) \\l len(getCharFromString(s1.rstrip((in1[int(5.0):i2][mod(i2,i0):] + in2)), i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [1], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 3, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 4, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb1 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= int(10.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 0, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 2, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 3, 3, 3, 0, 14, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(s2),divInt(len(in0),( ( i0 + int(4.0) ) + int(8.0) ))) + int(2.0) ) and i2 \\le i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 6, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [0, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 5, 1, 3, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 \\le ( divInt(saveOrd(s0),divInt(int(4.0),( ( i2 + int(8.0) ) + int(6.0) ))) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 0], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [2, 2, 9, 7, 5, 3, 5, 6, 5, 3, 5, 0, 2, 5, 6, 6, 6, 5, 7, 6], [1, 0, 1, 2, 1, 1, 0, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 2, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 3, 0, 3, 3, 2, 0, 1, 1, 0, 2, 2, 2, 3, 1, 1, 3, 1, 1, 1, 2, 1, 1, 0, 0, 3, 2, 2, 0, 3, 2, 3, 1, 0, 2, 0, 3, 2, 3, 0, 2, 1, 2, 2, 1, 0, 0, 3, 0, 3, 2, 2, 2, 0, 2, 2, 1, 0, 1, 1, 1, 2, 0, 2, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4, 0, 2, 3, 0, 3, 2, 0], [2, 1, 0, 2, 2, 0, 2, 1, 1, 1, 0, 2], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [4, 4, 3, 2, 4, 5, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 0, 2, 0], [0, 3, 2], [4], [0, 0, 2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 20, 20, 21, 0, 76, 22, 17, 12, 10, 7, 0, 0, 14, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), len(in1))) \\l i1:{:\\nres0 = min(max(( i1 - int(22.0) ), int(9.0)), i0) \\l mod(( mod(max(int(7.0), int(5.0)),saveOrd((in0 + (s2[:int(3.0)][int(5.0):] + in1))[int(6.0):( int(5.0) + int(3.0) )][i2:i1])) * min(( ( i1 * abs(mod(len(in2),int(5.0))) ) + i0 ), divInt(i1,min(( len(in2[:i0]) * divInt(int(0.0),( ( int(2.0) - i0 ) - i0 )) ), abs(i1)))) ),min(divInt(mod(mod(i1,divInt(( int(5.0) - i2 ),int(6.0))),int(66.0)),int(576.0)), ( i2 + ( i1 * i1 ) )))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 7, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 1, 0, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 8, 2, 5, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),mod(( ( divInt(int(3.0),i2) - int(0.0) ) + ( int(7.0) + ( int(8.0) * i2 ) ) ),int(7.0))) - i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1, 1], [0, 0], [], [0], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 3, 7, 7, 1], [0, 2, 0, 2, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 0, 2, 2, 0, 2, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 2, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(7.0) ))),int(2.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 0], [2], [0, 0, 1], [], [0, 0, 0], [], [], [3, 1, 2], [0, 4, 4], [1, 1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 0, 1, 1, 1, 1], [1, 6, 3, 3, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 0, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 2, 0, 11, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l abs(i2):{:\\nres0 = len(in1) \\le mod(len(in2),( divInt(i1,int(6.0)) - int(33.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [1, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [3, 3, 2, 3, 2, 3, 2, 0, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 1, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 2, 12, 3, 4, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in1)) \\le mod(len(in2),( abs(mod(i2,i1)) - int(16.0) )):{:\\ni2 += int(38.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 5, 5, 3, 0, 18, 6, 4, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s2) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(7.0) ))) + int(2.0) ) and int(8.0) \\le ( i2 + min(int(7.0), i0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 2, 1], [2, 2], [0, 2], [], [0, 0], [], [], [2, 1], [4, 4, 3], [1, 1, 1], [0, 0, 0], [], [], [], [], [], [1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 9, 3, 8, 7, 7, 1, 8, 5, 9], [0, 2, 2, 0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 4, 3, 2, 4, 5, 3], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 10, 10, 8, 0, 26, 7, 4, 4, 3, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le ( divInt(len(in1),divInt(len(in0),( ( int(4.0) + i0 ) + int(9.0) ))) + int(3.0) ):{:\\nb2 = i2 \\le divInt(int(87.0),i2)\\nloopBreak% = 0\\nwhile int(718.0) \\ge i0:{:\\ns2 = (in1 + (in2[( i2 * int(5.0) ):i1][:min(i0, int(9.0))] + in0))[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 3, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 2, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0], [1, 3, 3, 4, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 24, 24, 7, 1, 34, 11, 4, 4, 8, 6, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(max(( len(in1) * len(in2) ), mod(i1,i0)),mod(( mod(int(10.0),int(2.0)) - int(8.0) ),int(9.0))) \\l saveOrd(in2):{:\\nres0 = s0[int(5.0):int(5.0)][int(6.0):int(2174.0)] not in (in2[int(20.0):i2][:int(65083.0)] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += mod(i2,mod(mod(mod(int(305.0),i1),int(5.0)),( i1 + int(8.0) )))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 1], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 0, 0, 1, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1, 0, 2, 0, 0], [1, 0, 1, 1, 1], [2, 1, 3, 0, 0, 1, 0, 1, 1], [2], [0, 1, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 9, 0, 27, 5, 8, 1, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i0 )), i0)), int(22.0))) \\l max(min(max(mod(i1,int(9.0)), int(7.0)), i2), divInt(int(5.0),int(5.0))):{:\\nres0 = i0 \\g mod(i1,i0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [2, 3, 2, 3, 3, 3, 1, 2, 0, 0, 3, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 23, 4, 8, 0, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile divInt(abs(mod(max(len(in0), min(int(2.0), divInt(i1,i0))),min(int(6.0), len(in2)))),min(max(divInt(i1,int(9.0)), int(7.0)), i2)) \\l int(3.0):{:\\nb0 = int(5.0) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 7, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 0, 0, 2, 2, 2, 2, 1, 1, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 1, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l i1:{:\\nb1 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 0, 1], [1], [3, 3, 3, 3, 3, 3, 0, 2, 3, 0, 0, 1, 3, 2, 3, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2], [0, 1, 0], [4, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 0, 21, 3, 9, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(len(in1), min(min(len(in1), i1), divInt(min(i0, i1),int(26.0))))) \\l min(( max(mod(i2,int(9.0)), i1) * i0 ), int(7.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [0, 3, 4, 0, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 1, 5, 5], [], [], [0, 2, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 14, 14, 5, 1, 23, 6, 4, 3, 4, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l min(mod(len(in1),saveOrd(in2[( i1 - i0 ):mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0))])), min(i2, mod(int(5.0),int(6.0)))):{:\\nres0 = in2[int(2174.0):i1] not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(20.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [1, 2, 1, 0, 2, 0], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 3, 0, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 24, 8, 4, 5, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( int(4.0) + max(divInt(len(in2),divInt(( min(i1, int(6.0)) + ( i2 - divInt(int(3.0),i1) ) ),int(8.0))), i0) ):{:\\nb0 = ( i2 * int(7.0) ) \\le ( i0 - int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 2, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 2, 3, 0, 3, 3, 0, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 3, 0, 10, 2, 5, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb1 = abs(abs(divInt(len(in1),min(len(in2), i1)))) \\l ( i2 - i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 2, 3, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 20, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(22.0))) \\l abs(len(in2)):{:\\nres0 = max(mod(i1,int(4.0)), int(7.0)) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [1, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 0, 2, 0, 1, 1, 1, 0, 2, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 2, 0, 12, 4, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( int(4.0) \\le ( divInt(saveOrd(s2),divInt(len(in2),i0)) + ( i2 + int(7.0) ) ) and int(2.0) \\le int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 0], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [2, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 2, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 4, 0, 12, 2, 5, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb0 = abs(max(divInt(len(in1),abs(min(i2, ( i0 * i1 )))), i2)) \\l int(26.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 1, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 0, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [0, 4, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 1, 8, 1, 3, 1, 1, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le int(16.0)\\ni0 += min(i1, divInt(len(getCharFromString(in2, i1)),i0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 322}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 2], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 0, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [7, 2, 9, 1, 2, 8, 5, 1, 4, 4, 7], [1, 2, 1, 2, 1, 1], [1], [1, 3, 2, 3, 1, 2, 3, 2, 2, 2, 0, 0, 3, 3, 2, 3, 2, 0, 0, 1, 1, 1, 1, 1, 0], [1, 0, 1, 0, 0, 1, 0], [2, 3, 3, 2, 1, 1, 0, 0, 1], [1, 0, 0, 0, 1, 2, 0], [1, 1, 0, 1, 0], [4, 5, 1, 0, 4, 5, 2, 1], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [0, 0, 1, 2, 0, 0], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 5, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(72.0) \\le abs(mod(len(in1),int(9.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 0, 1, 1, 1, 1], [1, 4, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [4, 2, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [0, 0], [], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 0, 0, 4, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1[int(1497.0):len(s2)]) \\le int(6.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 5, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 1, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 1, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 1, 15, 5, 2, 2, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),int(9.0)), ( i1 * i0 )):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= mod(mod(mod(int(8.0),int(5.0)),int(5.0)),int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 5, 4, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),mod(min(min(( int(4.0) + i0 ), int(6.0)), int(3.0)),i2)) + divInt(int(8.0),i1) ):{:\\nres0 = int(7.0) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 5], [1, 1], [0, 0], [], [0], [0], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 0, 0, 2, 8, 5], [0, 1, 1, 2, 1, 0, 1], [1], [1, 3, 2, 2, 3, 2, 3, 2, 3, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0], [0, 1, 1, 1, 1, 1, 0, 0], [1, 3, 3, 1, 1, 3, 1, 4, 2], [1, 2, 1, 0], [1, 1, 1, 1, 1, 1], [4, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 6, 0, 18, 6, 4, 1, 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(17.0) \\l max(( mod(len(in1),mod(len(in2),mod(max(i0, mod(int(0.0),i1)),i1))) - mod(i2,i1) ), i0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 7, 7, 0, 5, 5], [1, 0, 1, 2, 1, 1, 0, 0, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 0, 0, 1, 0, 0, 2, 1, 1, 1, 0], [1, 0, 1, 1], [2, 1, 3, 0, 1, 2, 3, 3, 1], [1], [1, 0, 1, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 9, 0, 26, 3, 9, 1, 2, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(mod(len(in1[min(max(i1, ( i0 - i1 )), i2):int(22.0)]),abs(len(in2))), len((in0 + (s2[max(i1, i1):][int(7.0):i0] + in1))[:i0]))) \\g divInt(int(7.0),int(0.0)):{:\\nres0 = int(5.0) \\le i0\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 0, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 1, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( i2 - len(in2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 1, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 3, 3, 0, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 2, 5, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(len(in2), i1)), ( i2 * i1 ))) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 3, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 0, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 4, 5, 1, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1[divInt(len(in2),len((in0 + (s2[:divInt(min(divInt(( i2 + int(3.0) ),int(7.0)), min(int(9.0), i2)),int(5.0))][i2:] + in1))[int(5.0):])):]) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 3, 2, 3, 3, 0, 0, 2, 2, 2, 2, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 5, 1, 21, 5, 5, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 \\l max(mod(len(in1),len(in2)), i0):{:\\nb0 = in2 not in s0[i2:( mod(mod(( int(10.0) * int(9.0) ),int(8.0)),int(9.0)) - min(min(i1, int(5.0)), int(5.0)) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(6.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [2, 4], [1, 1], [0, 0, 0], [], [0], [], [], [], [0, 1, 1, 0, 1, 1, 1], [2, 6, 9, 7, 9, 4, 5], [1, 2, 0, 1, 1, 1], [1], [1, 0, 0, 3, 2, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1], [2, 1, 3, 0, 0, 3, 1, 1, 1], [2, 2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 4, 0, 15, 5, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(26.0) == i1:{:\\nres0 = i2 \\le abs(mod(( i0 * i1 ),mod(( divInt(int(9.0),int(79.0)) * int(4.0) ),int(5.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 1], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [2, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 0, 0, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 5, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 5, 0, 24, 4, 10, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(min(min(min(i2, ( i1 * i1 )), i2), mod(len(in1),len(in2))),saveOrd(in0)), divInt(i1,int(22.0)))) \\l int(4.0):{:\\nres0 = int(7.0) \\g max(abs(int(2.0)), int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1, 1, 1], [2, 0, 2, 2, 2, 1, 0, 1, 1], [2, 0, 1, 0], [1, 1, 1, 1, 1, 1], [0, 0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 0, 1, 0, 0], [4, 5, 5, 0, 5, 5, 3, 4, 5], [], [0, 0], [0, 2, 0, 2, 0, 0, 3, 2, 2, 0, 0, 2, 0], [0, 3, 2], [4], [0, 0, 1, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 6, 6, 4, 2, 2, 1, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 1, 30, 30, 11, 2, 39, 10, 5, 3, 9, 9, 0, 2, 13, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2[mod(i1,i0):mod(mod(( int(9.0) * int(8.0) ),int(9.0)),int(5.0))])), min(i2, i1)):{:\\ni2 -= int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in s0[int(6.0):int(2174.0)]:{:\\nif in2 not in (in2[i1:int(20.0)][:mod(i1,divInt(mod(divInt(int(65083.0),i0),int(305.0)),divInt(i1,int(5.0))))] + in0):{:\\nloopBreak% = 0\\nfor in1 in in2[int(8.0):min(int(72.0), int(9888.0))]:{:\\ni0 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1], [2, 2, 1, 2, 2, 1, 0, 1, 1], [2, 0, 1, 2], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 0, 1, 2, 0, 1, 0, 1], [0, 0, 0], [5], [1, 2, 3, 2], [0], [1], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 1, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 2, 0, 3, 3, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 3, 3, 2, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 0, 0], [4, 5, 5, 0, 5, 5], [], [0], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [1, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 0, 0, 1, 3, 8, 3, 1, 4, 1, 1, 1, 23, 23, 9, 2, 34, 11, 4, 6, 7, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = not int(10.0) \\l max(mod(len(in2),int(9.0)), ( i1 * i0 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif s0.endswith(in2[:mod(mod(( int(8.0) - int(9.0) ),int(5.0)),int(5.0))]):{:\\nloopBreak% = 0\\nwhile ( mod(i2,len(in2)) \\le abs(int(6.0)) and not int(2174.0) \\le i1 ):{:\\ni2 += int(20.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += ( i1 + ( mod(divInt(int(65083.0),i0),int(305.0)) * divInt(i1,int(5.0)) ) )\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [3, 4], [0, 2], [0, 0], [4], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 7, 7, 0, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 3, 3, 3, 0, 1, 0, 0, 1, 0, 0, 2, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif res0:{:\\nb1 = in1.startswith(in2)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [0, 2], [0], [0, 0], [], [], [3, 1], [4, 2], [1, 0], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5, 4], [1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 3, 3, 3, 7, 0, 1, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = saveOrd(in0) \\le ( divInt(len(s2),divInt(len((in1 + (in2[( ( int(4.0) + i0 ) + int(6.0) ):][int(3.0):i0] + in1))[divInt(int(8.0),i2):]),int(7.0))) + i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 3, 3, 1, 0, 1, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 2, 0, 0, 2, 0], [0, 0, 0], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 4, 1, 19, 4, 5, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile divInt(max(( len(in1) * len(in2) ), min(int(1.0), i1)),int(0.0)) \\l divInt(divInt(int(9.0),int(8.0)),int(9.0)):{:\\nres0 = in2 not in s0[int(5.0):min(i0, i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 0], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3, 8, 9, 2, 9, 9, 2, 9], [1, 1, 0, 2, 1, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 2, 0, 1, 3, 3, 3, 2, 0, 1, 1, 2, 3, 3, 1, 1, 1, 2, 0, 1, 0, 3, 2, 0, 3, 1, 0, 1, 3, 1, 1, 1], [1, 0, 1, 1, 0, 0, 0], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2, 1, 2, 2], [2, 0, 0, 2], [0, 1, 0], [4, 5, 3, 2, 4, 2], [1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 2, 1], [0, 3, 2], [4], [0, 0, 2, 0, 0], [3], [], [], [], [13]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 15, 15, 8, 0, 40, 7, 13, 4, 3, 5, 1, 0, 14, 1, 0, 5, 1, 0, 0, 0, 1], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb0 = abs(max(divInt(len(in1),min(min(i1, ( i1 * mod(i0,int(22.0)) )), len(getCharFromString(in2, len((in0 + (s2[saveOrd(in1):][divInt(i2,int(4.0)):int(7.0)] + \"\"*\"\"[( max(abs(int(2.0)), int(8.0)) + int(5.0) ):( i1 + int(3.0) )][i1:max(( i1 * abs(int(8.0)) ), i1)]))[int(9.0):abs(int(2.0))]))))), int(992.0))) \\l int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1], [], [0, 0, 0], [], [], [3, 2, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [1, 0, 1, 1, 1], [1, 6, 8, 8, 6, 5, 5, 1, 4, 4, 7], [1, 1, 2, 2, 2, 0, 1], [1], [3, 3, 2, 3, 2, 3, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 1, 1, 1, 1], [0, 3, 3, 3, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [3], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 1, 15, 4, 4, 1, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(len(s1), mod(len(in2),divInt(len(in0),mod(divInt(int(1.0),int(68.0)),int(8.0))))) \\le i1:{:\\nres0 = i1 \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(6.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [1, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(in0[:int(16.0)]) \\le len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 7, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 3, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [1, 1, 0], [4, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 0, 21, 4, 8, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(29.0))) \\l mod(len(s1),min(divInt(i1,max(i1, int(7.0))), int(7.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 0, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 0, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 11, 1, 5, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(int(1.0), len(s1))) \\l min(min(i1, ( i0 + i2 )), i0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [2], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = abs(max(( len(in1) - min(min(i0, divInt(i2,i2)), i2) ), int(1.0))) \\l len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 0], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [1, 7, 4, 3, 1, 6, 1, 2, 5, 7, 9, 6, 2, 4, 8, 2], [2, 2, 2, 2, 2, 1], [0, 1], [3, 2, 2, 3, 3, 3, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 3, 0, 1, 2, 1, 0, 3, 1, 1, 2, 1, 0, 0, 1, 3, 3, 3, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1], [4, 3, 3, 1, 0, 0, 0, 1, 4], [0, 0, 0, 1, 2, 2, 0], [0, 0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [2, 1, 2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 16, 16, 6, 1, 37, 10, 9, 6, 4, 5, 1, 0, 12, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),len(getCharFromString((in0 + (s2[max(divInt(( ( int(1.0) + int(7.0) ) + divInt(int(4.0),( int(3.0) + ( min(i2, int(1.0)) - ( int(6.0) * i2 ) ) )) ),min(int(1.0), int(2.0))), divInt(int(5.0),i2)):][:i2] + in1))[int(7.0):], min(max(saveOrd(\"\"R\"\"), int(9.0)), int(624.0))))) * i2 )\\ni1 = int(82.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 0, 2, 0, 2, 0, 0, 0], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 2, 2, 3, 3, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [4, 1, 2, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 8, 0, 31, 11, 5, 7, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(max(divInt(( divInt(divInt(int(4.0),int(6.0)),int(9.0)) + ( i0 + ( int(8.0) * i0 ) ) ),int(7.0)), i2),( i0 * int(7.0) )) - abs(( ( min(min(int(1.0), i2), i0) * i0 ) + i0 )) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [4, 4, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 6, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 2, 0, 3, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [2, 4, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 12, 12, 4, 1, 21, 6, 4, 3, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\le max(mod(len(s2),len(in1)), ( i1 * i0 )):{:\\nres0 = mod(mod(( int(9.0) - int(6.0) ),int(9.0)),int(5.0)) \\le mod(i2,min(int(5.0), int(6.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(2174.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 9, 7, 6, 3, 6], [0, 2, 2, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(in0[int(16.0):]) \\le len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [6, 9, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 0, 3, 2, 2, 0, 0, 2, 1, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 1, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 6, 2, 14, 4, 2, 3, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(69.0) \\l max(i1, len(in1)):{:\\ni1 *= mod(( i2 - i1 ),mod(int(9.0),mod(i2,int(8.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(9.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 3, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 0, 2, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = getCharFromString(in2, saveOrd(in0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 0, 2, 0, 3, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 0, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),i1), ( i0 * min(mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)), min(i2, i1)) )):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [4, 6, 3, 8, 7, 7, 1, 0, 3, 4, 3, 0, 8, 3, 2], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 1, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 1, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 15, 15, 4, 0, 22, 7, 4, 5, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(s0) \\le ( ( max(divInt(len(s1),( min(int(4.0), int(6.0)) + int(3.0) )), ( i0 + divInt(int(8.0),i2) )) + int(7.0) ) * i2 ):{:\\nres0 = ( i0 - int(710343083.0) ) \\le int(2.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 0, 1, 0, 1, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 4, 0, 3, 0, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 6, 0, 23, 4, 7, 1, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1[saveOrd(in2):min(i1, ( i2 * i1 ))]),i2), int(29.0))) \\l mod(len((in0 + (s2[:min(divInt(i1,int(9.0)), i1)][int(7.0):int(3.0)] + in1))[:int(5.0)]),int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 0, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 2, 1, 0, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 1, 15, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),( ( int(4.0) + i0 ) + divInt(int(6.0),i2) ))) + i2 ):{:\\ni0 = int(38.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 0, 2, 3, 2, 3, 2, 2, 0, 1, 2, 1, 0, 2, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0, 1], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 3, 0, 2, 2, 2, 3, 1, 1, 1, 3, 0, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 0], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 4, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 24, 24, 7, 1, 35, 10, 6, 5, 6, 6, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( min(i1, mod(mod(( min(int(9.0), int(8.0)) * int(9.0) ),saveOrd(in2)),i0)) - int(5.0) )):{:\\nres0 = getCharFromString(s0, int(5.0))[int(6.0):int(2174.0)] not in (in2[:i2][int(20.0):mod(i1,( mod(( int(65083.0) + i2 ),int(305.0)) + divInt(i1,int(5.0)) ))] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(8.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [2, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 2, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 6, 3, 3, 4, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l mod(( max(len(in1), mod(i1,i0)) * divInt(( mod(int(9.0),int(8.0)) - int(9.0) ),int(5.0)) ),len(in2)):{:\\nb2 = in2 not in s0[i2:i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [0, 0, 2, 2, 1, 1, 0, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 2, 3, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2], [0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 8, 0, 21, 4, 7, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i0, ( i0 * i2 )), i2)), int(26.0))) \\l mod(len(in2),mod(min(i1, int(9.0)),i1)):{:\\nb1 = i0 \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 0, 0, 1], [2, 0, 2, 2, 2, 1, 0, 1, 1], [2, 0, 0, 0], [0, 1, 1, 1, 1, 1], [0, 0, 0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [1], [], [1], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 3, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5, 3, 1], [], [0, 0, 0], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 9, 9, 4, 5, 3, 2, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 12, 12, 9, 4, 22, 5, 4, 4, 3, 8, 0, 3, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(13.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in s0:{:\\nloopBreak% = 0\\nfor in2 in in2[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):min(i2, i1)]:{:\\nloopBreak% = 0\\nfor in0 in s1:{:\\ni1 += int(5.0)\\ni1 += int(6.0)\\ni1 = int(2174.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [0, 2, 0, 0, 2, 1, 1, 2], [1], [3, 3, 2, 0, 3, 3, 0, 2, 0, 1, 0, 3, 2, 3, 2, 3, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2], [0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 8, 0, 21, 4, 7, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(i0,len(in1)), min(i2, ( i0 * int(26.0) )))) \\l i0:{:\\nres0 = min(mod(len(in2),mod(min(i2, int(9.0)),i1)), i1) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [5, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 5, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 2, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 1, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 4, 1, 21, 6, 4, 2, 4, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) != max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = s1 not in s0[mod(mod(( int(9.0) - int(5.0) ),int(9.0)),int(5.0)):min(mod(i2,int(5.0)), int(6.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(2174.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 6, 0, 22, 7, 3, 4, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(getCharFromString(in2, divInt(len((in0 + (s2[( ( i0 + int(4.0) ) + int(6.0) ):int(9.0)][i2:divInt(int(8.0),i2)] + in1))[int(7.0):]),i0))),( i2 + int(7.0) )) * i1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 0, 3, 0, 0], [1, 1, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(min(mod(len(in2),( ( int(3.0) - i2 ) - int(0.0) )), int(2.0)),int(8.0)) + divInt(int(7.0),i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [1, 6, 5, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 3, 1, 1, 1, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0, 3, 3, 1, 1, 3], [1, 0, 1, 1, 1], [2, 4, 3, 2, 3, 3, 3, 0, 1, 0, 4], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 3, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 11, 11, 7, 1, 30, 5, 11, 2, 4, 8, 0, 0, 16, 2, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(saveOrd(in1),( len(in0) - divInt(mod(abs(int(58.0)),int(4.0)),int(5.0)) ))):{:\\nres0 = len(in2) \\l len(getCharFromString(s1.rstrip((in1[len(in2):i2][divInt(i1,i2):] + s2[:i2][i2:][:min(int(5.0), int(1.0))])), i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += max(min(int(4.0), int(47.0)), saveOrd(s1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [2, 3, 0, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = divInt(abs(i1),max(len(in1), min(i2, ( i1 + i2 )))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 2, 1, 4, 4], [], [], [0, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [4], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\le int(1.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 7, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 1, 15, 5, 2, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l i1:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= mod(max(len(in2), ( i2 - i1 )),mod(mod(( int(9.0) + int(8.0) ),int(9.0)),int(5.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [0, 1, 1, 1, 1, 1, 1], [4, 7, 6, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 0, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 7, 3, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le ( divInt(divInt(( len(s0) + ( ( i0 + int(47.0) ) + int(6.0) ) ),int(8.0)),i2) + ( i0 - len(in0) ) ):{:\\nres0 = int(7.0) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2, 2], [], [0, 0], [], [], [2, 1], [4, 4], [0, 2, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 0, 3, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [4, 1, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 2, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),divInt(( i0 + int(4.0) ),int(2.0)))) + int(9.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 1, 1, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 7, 1, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(int(10.0), int(9.0)) \\l i1\\ni0 *= mod(len(in1),i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 3, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 4, 3, 2, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 11, 2, 6, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(saveOrd(in2), len(in0))), ( i1 - i0 ))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 0], [0, 0], [], [3, 0], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 3, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 3, 2, 0, 1, 1, 1, 0, 2, 0, 2, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 0, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 1, 1, 2, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(i0,divInt(len(in2),len(s0))) + ( i2 + int(4.0) ) ) and b1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [0, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 1, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 0, 3, 0, 4, 3, 0, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 13, 2, 5, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(min(divInt(len(in1),int(26.0)), min(i0, ( i0 - i1 )))) \\l i0:{:\\nres0 = int(9.0) \\le saveOrd(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [8, 0, 2, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 2, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(i1,mod(len(in2),( ( int(8.0) - i2 ) + int(0.0) ))) * int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 2, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 4, 0, 22, 4, 8, 1, 3, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(( mod(i1,i2) + i1 ), int(29.0)), len(getCharFromString(in2, min(max(divInt(i2,int(9.0)), int(7.0)), int(3.0)))))), int(5.0))) \\l int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 7, 7, 0, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 1, 1, 1, 0, 1, 0, 0, 2, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 5, 5, 4, 0, 15, 2, 5, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(int(22.0)) \\l divInt(max(len(in1), min(i1, ( i0 - i1 ))),i2):{:\\nres0 = int(7.0) \\le min(int(7.0), int(0.0))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 0, 2, 0, 1], [1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 0], [2, 1, 3, 1, 0, 3, 0, 1, 1], [1, 1, 0, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 0, 1, 1, 1], [1, 0, 1, 1], [4, 1, 3, 0, 0, 3, 3, 4, 0, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 2, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 12, 3, 4, 1, 2, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in1) \\l max(divInt(( len(in2) * min(i1, mod(i1,i1)) ),i2), int(22.0)):{:\\nin0 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 7, 0, 20, 2, 8, 1, 1, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, i0), i2)), i2)) \\l i1:{:\\nres0 = int(22.0) \\le len(getCharFromString(in2, min(max(( i1 * int(9.0) ), int(7.0)), i1)))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [1, 1, 1], [], [0, 0, 0], [], [], [0, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 2, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 0, 2, 2, 0, 1], [0, 0], [1, 3, 3, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 0, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 2, 13, 3, 5, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(12.0) \\le abs(len(in1)):{:\\ni2 = len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = divInt(min(( mod(i0,int(38.0)) - int(4.0) ), i2),len(in2))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 1, 8, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 2, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 0], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 5, 0, 19, 4, 7, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(divInt(( max(len(in1), min(i1, mod(i1,i1))) * i2 ),int(21.0))) \\g min(len(in2), len(in0)):{:\\nres0 = divInt(i1,int(8.0)) \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 3, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [1, 5, 0, 2, 5, 5], [], [], [4, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 6, 1, 22, 5, 5, 3, 3, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(getCharFromString(s1, len(in2))),( i1 * i0 )), mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0))):{:\\nres0 = s0[min(i0, i1):min(int(5.0), int(6.0))] not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [1, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1, 7, 9, 2, 2, 8, 1, 7, 4, 3, 8, 5, 6, 0, 6, 1, 5, 7, 1, 8, 4, 9, 0, 6, 2, 3, 7, 5, 1, 6, 8, 2, 4, 4], [0, 2, 0, 0, 2, 0, 0, 1, 1, 0, 2, 1, 2, 1, 0], [0, 1], [0, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1, 3, 3, 1, 2, 2, 3, 1, 3, 0, 1, 3, 1, 1, 1, 2, 2, 2, 3, 1, 2, 0, 3, 2, 0, 0, 2, 1, 2, 2, 3, 2, 2, 1, 0, 0, 3, 1, 0, 3, 3, 3, 3, 0, 2, 1, 0, 1, 0, 1, 1, 3, 1, 2, 1, 2, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 3, 3, 0, 0, 3, 1, 2, 1, 4, 4, 2, 1, 3, 0, 1, 0, 4], [0, 0, 0, 0, 1, 2, 0, 2, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [1, 5, 3, 2, 4, 5, 2, 5, 5, 3, 3, 3], [1, 1, 1, 0, 0, 0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 0, 0, 0, 2, 0, 4, 3, 3, 1, 3, 2, 1, 0, 4, 0, 1, 1, 0, 2, 0, 1], [0, 3, 2], [4], [0, 2, 2, 2, 1, 0], [0, 3, 3, 1, 0, 0, 0], [9, 10, 24, 9], [1], [], [29, 0]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 5, 5, 5, 0, 18, 7, 2, 5, 2, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( i0 \\g ( divInt(saveOrd(s1),divInt(len(in2),( ( i2 + int(48.0) ) + int(2.0) ))) + int(8.0) ) and i0 \\le ( ( i0 + int(7.0) ) - i2 ) )\\nin0 = s2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 4, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 2], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 2], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(int(24.0)) \\l ( max(len(in1), min(i1, divInt(i0,i1))) * i2 ):{:\\nres0 = int(9.0) \\le min(len(in2), min(mod(i1,int(7.0)), int(3.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 1, 15, 5, 2, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l i1:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += mod(max(len(in2), ( i2 - i1 )),mod(mod(( int(9.0) + int(8.0) ),int(9.0)),int(5.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 8, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [2, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(s2),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(mod(( int(9.0) - int(8.0) ),int(8.0)),int(5.0)):min(i2, i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 0, 2, 0, 2, 2, 1, 2, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 1, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 5, 0, 18, 7, 1, 4, 3, 5, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(i0,divInt(i2,( ( int(4.0) - divInt(int(63.0),int(8.0)) ) - i2 ))) + ( int(7.0) * i0 ) ):{:\\nres0 = int(7.0) \\le i2\\nin2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = in1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [0, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [2, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 3, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 5, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 1, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 4, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 1, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 2, 1, 15, 4, 5, 2, 3, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(len(in1),( len(in1) - divInt(mod(int(58.0),int(4.0)),int(5.0)) ))):{:\\nres0 = i2 \\l abs(len(\"\"F\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 3, 8, 7, 7, 1, 3], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [0, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [0, 0, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 3, 0, 18, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(( divInt(len(s0),divInt(len(s0),( ( int(4.0) + i0 ) + int(6.0) ))) * int(3.0) ), int(8.0)) \\le divInt(int(7.0),i2):{:\\nres0 = int(713.0) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 3, 1, 1], [1, 0, 1], [2, 1, 4, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb1 = abs(max(divInt(saveOrd(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1], [7, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 1, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 1, 15, 5, 2, 2, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(70.0) \\l max(mod(len(in1),int(9.0)), ( i0 * i0 )):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= mod(mod(mod(int(8.0),int(9.0)),int(5.0)),int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 8, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 0, 0, 3, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 0, 1, 2, 0], [0, 1, 0], [1, 0, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 3, 3, 3, 0, 14, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le divInt(mod(len(s0),divInt(len(in0),( ( i0 * int(4.0) ) + int(7.0) ))),int(8.0)) and i2 \\le i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 2, 7, 2, 8, 5], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 2, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 4, 0, 23, 4, 9, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = abs(max(divInt(len(in1),min(min(i1, ( i1 * mod(i1,int(26.0)) )), len(in2))), min(max(divInt(i2,int(2.0)), int(7.0)), int(2.0)))) \\l max(int(8.0), int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 21, 3, 8, 2, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(26.0))) \\l len(in2):{:\\nres0 = min(max(( i1 * int(9.0) ), int(7.0)), i1) \\ge int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [2, 1], [4, 3], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [1, 2, 0, 0, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 0, 3, 1, 0, 2, 0, 1, 3, 0, 2, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 1, 1, 2, 0], [0, 0, 0], [3, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 6, 6, 6, 0, 26, 9, 5, 6, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( saveOrd(in0) \\le ( divInt(len(in2),divInt(len(in0),( ( i1 + int(4.0) ) + int(7.0) ))) + ( i2 - ( i0 - min(int(2.0), i0) ) ) ) and ( i2 * int(8.0) ) \\ge min(i0, divInt(int(7.0),int(7.0))) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 3, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 4, 0, 0, 4, 3, 2, 1], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 6, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(s0),divInt(saveOrd(in2),( ( min(int(4.0), int(6.0)) + int(9.0) ) + i0 ))) + mod(int(8.0),i2) ), int(7.0)) \\le i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 2, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 4, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 7, 7, 4, 0, 19, 6, 3, 2, 4, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\l mod(( max(len(in1), mod(i1,i0)) * mod(( mod(int(9.0),int(8.0)) - int(9.0) ),int(5.0)) ),len(getCharFromString(in2, i2))):{:\\nres0 = in2[i1:int(5.0)] not in s0\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 1, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 2, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 2, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 18, 4, 4, 2, 3, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(int(9.0), len(in1)):{:\\nres0 = in2[len(in2[mod(i2,i0):( mod(mod(int(8.0),int(9.0)),int(5.0)) * int(5.0) )]):abs(i2)] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 8, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 0, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 2, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 1, 15, 5, 2, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(( i1 * len(in1) ), ( i0 * i2 )):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += mod(mod(( int(9.0) + int(8.0) ),int(9.0)),int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 2, 0, 16, 6, 2, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le ( divInt(len(in2),mod(int(3.0),( ( int(0.0) - i2 ) + int(6.0) ))) + int(8.0) ):{:\\nres0 = int(7.0) \\le divInt(int(7.0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [3, 2, 6, 7, 2, 6, 5], [1, 0, 1, 2, 2, 1], [1, 1], [3, 3, 2, 3, 3, 3, 1, 2, 1, 0, 0, 1, 3, 3, 3, 1, 0, 1, 1, 1, 2, 1, 1], [1, 0, 1, 1], [1, 0, 3, 0, 1, 3, 4, 1, 1], [2], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 2, 8, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(min(divInt(len(in1),min(max(int(3.0), ( int(2.0) * i1 )), i0)), int(6.0)), len(in2)) \\l saveOrd(in0):{:\\nres0 = max(int(7.0), i1) \\le int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [3, 2, 9, 7, 2, 6, 5], [1, 0, 1, 2, 2, 1], [1, 1], [3, 3, 2, 3, 3, 3, 1, 2, 1, 0, 0, 3, 3, 3, 3, 1, 0, 1, 1, 1, 2, 1, 1], [1, 0, 1, 1], [2, 0, 3, 0, 1, 3, 3, 1, 1], [2], [0, 0, 0], [4, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 0, 19, 2, 9, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(min(divInt(len(in1),min(max(int(32.0), ( int(9.0) * i1 )), i0)), len(in1))) \\l len(in0):{:\\nres0 = max(max(int(7.0), i1), int(2.0)) \\le int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 5, 5, 5], [], [], [2, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 4, 0, 20, 5, 4, 2, 3, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1[len(in2):( i1 * i0 )]),mod(mod(( int(7.0) - int(8.0) ),int(9.0)),int(5.0))), min(i2, i1)):{:\\nres0 = in2[int(5.0):int(6.0)] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 0], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [8, 7, 9, 3, 7, 6, 1], [0, 1, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 2, 3, 0, 1, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 2, 0], [0, 0, 0, 2, 2, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 4, 1, 22, 8, 4, 5, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( mod(max(divInt(len(in2),( ( i0 + int(8.0) ) + int(7.0) )), divInt(int(9.0),( int(3.0) + ( abs(i1) * int(7.0) ) ))),int(6.0)) * int(1.0) )\\ni0 = i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 0, 3, 3, 2, 2, 1, 1, 0, 2, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 5, 0, 23, 5, 7, 0, 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, mod(int(2.0),i0)), i1)), int(2.0))) \\l i2:{:\\nres0 = len(in2) \\le min(divInt(mod(int(9.0),int(7.0)),i0), mod(int(5.0),int(5.0)))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [5, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0], [2, 1, 3, 0, 0, 1, 0, 1, 1], [1, 1, 0], [1, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 8, 0, 21, 3, 8, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) - min(min(i0, mod(i2,i2)), i2) ), int(5.0))) \\l max(min(max(mod(i2,i0), i1), i2), int(1.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [9, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 3, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2[saveOrd(s1):]\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2], [], [0, 0], [], [], [3], [3, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 3, 9, 7, 3, 5, 5], [0, 1, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 1, 12, 2, 5, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(max(divInt(len(in1),min(min(i1, ( i0 + i2 )), i1)), int(23.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 2, 0, 2, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 7, 7, 1], [2, 2, 0, 0, 2], [0, 1], [3, 1, 2, 1, 2, 3, 2, 2, 0, 1, 1, 2, 1, 3, 2, 0, 1, 0, 2, 0, 1, 0], [1, 1, 1, 1, 1, 1, 0, 1, 0], [4, 3, 0, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le int(3.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 1, 0, 0, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 3, 0, 14, 5, 2, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(int(4.0),divInt(( i0 - int(7.0) ),int(2.0)))) + int(8.0) ) and i2 \\le i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 3, 3, 4, 0, 3, 0, 1, 1], [1], [1, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 2, 2, 1, 0, 7, 1, 4, 0, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(int(26.0)) \\l mod(len(s1),len(in2)):{:\\nres0 = saveOrd(in0) \\le i1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 5, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 4, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += saveOrd(in0[int(14.0):])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 3], [0, 1, 1], [0, 0], [], [1], [1], [1], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 4, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 0, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 3, 2, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 4, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 4, 0, 18, 5, 5, 2, 3, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(len(s0), len(in2)) \\l mod(saveOrd(in0),( i1 * i0 )):{:\\nres0 = s2[mod(mod(( int(1.0) - int(0.0) ),int(9.0)),int(8.0)):min(i2, i1)] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [0, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 0, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 1, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 1, 15, 5, 2, 3, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(1.0) \\l max(mod(i1,len(in1)), ( i0 * i2 ))\\ni0 -= mod(mod(( int(0.0) + int(9.0) ),int(8.0)),int(9.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 4, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(max(divInt(len(in2),( int(4.0) + i0 )), int(6.0)),int(9.0)) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 3, 3, 3, 4, 1, 2], [2], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 2, 5, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(s1),min(len(in2), i1)), ( i1 * i0 ))) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [1, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 1, 1, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 11, 4, 2, 2, 2, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(getCharFromString(in2, int(4.0))),int(8.0)) + divInt(( i0 + int(2.0) ),int(8.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 4, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 1, 6, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(len(in1), min(min(len(in2), i1), divInt(i0,i1)))) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 3, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 1, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 5, 1, 21, 5, 5, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nb1 = in2 not in s0[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):min(i2, i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= min(int(5.0), int(6.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 0], [1], [1, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [1, 7, 0, 3, 2, 5, 5, 1, 4, 4, 7], [2, 2, 2, 0, 2], [1, 0], [2, 3, 2, 3, 1, 3, 0, 2, 0, 3, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [0, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 1, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 3, 3, 4, 1, 12, 3, 4, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(min(( len(in1) - int(17.0) ), len(in2)),i2) \\le mod(i2,abs(int(0.0))):{:\\ni2 += i0\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 2, 0, 1, 1, 2, 2, 1, 1], [1, 0, 1, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 5, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif res0:{:\\nb1 = abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i0)), i1)) \\l len(in2)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [7, 6, 9, 7, 0, 7, 5], [1, 2, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 1, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 23, 3, 9, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(mod(len(in1),min(min(i1, ( i2 * i0 )), i2)), int(76.0))) \\l len(in2):{:\\nb1 = max(max(mod(i1,int(9.0)), int(7.0)), i1) \\le max(int(0.0), int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 17, 6, 3, 3, 3, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(s0),divInt(len(getCharFromString(in2, ( ( i0 + int(4.0) ) + int(6.0) ))),int(9.0))) + i2 ), divInt(int(8.0),i2)) \\le int(7.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 3], [0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 2, 2, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 2, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [0], [2, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [1, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 9, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 0, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [0], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nin2 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= int(10.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [2, 2], [0], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 0, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 2, 2, 0, 0, 3, 0, 3, 2, 3, 2, 0, 1, 1, 1, 3, 1, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 4, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nin0 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [1, 2, 2], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [5, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 3, 2, 3, 2, 2, 2, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s0)\\nin2 = in0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5], [1, 0, 1, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 2, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 6, 0, 19, 3, 8, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, i0), i1)), i2)) \\l i0:{:\\nres0 = ( len(in2) * len(in0) ) \\le max(mod(i1,int(22.0)), int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [1], [3, 3, 2, 3, 1, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 2, 0, 1, 1], [1, 1, 0], [1, 1, 1, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 11, 2, 4, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) - int(1.0) ), max(i0, ( i2 - i2 )))) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [3], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 3, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 1, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 4, 1, 21, 5, 5, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),max(( min(i1, mod(mod(( int(9.0) * int(8.0) ),int(9.0)),int(5.0))) - min(i0, i2) ), int(5.0))), int(6.0)):{:\\nres0 = in2 != in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(2174.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 0, 0, 1, 1, 1, 0, 2, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 3, 3, 2, 0, 12, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( i0 + i2 ))) + int(4.0) ) and int(7.0) \\le int(2.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 2, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 18, 7, 4, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( ( len(in2) + divInt(len(in0),( ( i2 + int(3.0) ) + int(7.0) )) ) * min(divInt(( int(9.0) - i2 ),int(5.0)), i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 0, 2, 1, 1], [1], [3, 3, 0, 3, 3, 3, 0, 2, 0, 0, 2, 3, 3, 3, 3, 1, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 2, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 2], [], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 10, 1, 5, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(i1, len(in1))) \\l abs(min(i1, divInt(i0,i2)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 1, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 3, 0, 1, 1], [0, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 5, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + max(min(i0, ( i2 - i2 )), i2) ), int(1.0))) \\l int(1.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 0, 0, 3, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 3, 3, 4, 0, 15, 5, 3, 4, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( abs(( ( len(s2) + divInt(len(in2),( ( i0 + int(4.0) ) + int(7.0) )) ) + int(2.0) )) \\le i2 and i0 \\le i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 2, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [4, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 1, 15, 5, 3, 3, 3, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(20.0) \\l saveOrd(in1):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= mod(len(s0[len(in2):( i0 - i2 )]),mod(mod(( int(9.0) + int(8.0) ),int(9.0)),int(5.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [9, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 3, 3, 2, 2, 0, 1, 1, 0, 0, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [0, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 1, 13, 3, 4, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(96.0) \\le abs(mod(len(in1),len(in2))):{:\\nres0 = abs(( divInt(i2,int(38.0)) + int(4.0) )) \\l i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 1, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(in2, saveOrd(in0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [0], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 7, 7, 1], [2, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 2, 1, 2, 2, 0, 1, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 1, 0, 0], [0, 0, 0, 1, 1, 2, 0], [0, 0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 0, 22, 8, 4, 5, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(max(( min(i2, int(3.0)) + int(7.0) ), ( int(9.0) + divInt(( i2 + int(5.0) ),i0) )),( i0 - int(7.0) ))) - i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1], [2, 0, 2, 2, 2, 1, 0, 1, 1], [2, 2, 1, 1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2, 0], [0, 0, 0], [1, 0], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [3, 1, 2, 3, 3, 2, 3, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0], [1, 3, 3, 0, 0, 4, 3, 2, 1], [0, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 1, 5, 5, 5, 0], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 7, 7, 4, 3, 0, 2, 0, 0, 2, 2, 5, 2, 2, 1, 0, 0, 2, 26, 26, 9, 2, 37, 10, 6, 6, 5, 8, 0, 0, 12, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(int(10.0), mod(len(in1),len(in2))) \\l ( min(i1, mod(mod(( int(9.0) + int(8.0) ),int(9.0)),int(5.0))) - min(i0, i2) ):{:\\nres0 = in2 not in s1[int(5.0):int(6.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(2174.0) \\le i1:{:\\nif in2 in (in2[:int(20.0)][mod(i2,mod(( ( int(65083.0) + i1 ) + int(305.0) ),( i1 + int(5.0) ))):int(8.0)] + in2):{:\\nif b1:{:\\ni0 = saveOrd(s0)\\n:}else:{:\\ni1 *= int(72.0)\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [3], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3, 6], [1, 1, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 2, 1, 3, 3, 2, 3, 2, 1, 1, 1, 3, 3, 1, 1, 1, 1, 0], [1, 0, 1, 1, 0], [2, 1, 3, 0, 3, 3, 3, 4, 1, 2], [2, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5, 1, 3, 2, 0], [], [], [0, 0, 0, 2, 3, 4, 3, 2, 2, 0, 0, 4, 2, 0, 4, 0, 0, 0, 0], [0, 3, 2], [4], [0, 0, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 9, 9, 4, 0, 27, 5, 10, 2, 3, 10, 0, 0, 19, 3, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 != in2:{:\\nres0 = abs(max(divInt(len(in0),min(len((getCharFromString((s2[i1:][( i1 * i0 ):divInt(int(22.0),len(in1))] + in2[:len(s1.capitalize())].rstrip(in0)), divInt(saveOrd(s2),( int(4.0) + int(7.0) ))) + s0)[int(2.0):max(abs(int(8.0)), int(5.0))]), int(3.0))), int(6.0))) \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 0, 3, 3, 3, 0, 2, 0, 0, 3, 1, 0, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 1, 6, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(i1, len(in1))) \\l min(min(i0, divInt(i1,i2)), len(in2))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 0, 1, 1, 1, 1], [2, 4, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 2, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += saveOrd(in0[int(2497.0):])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [7, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(divInt(( len(in2) + ( divInt(i0,int(7.0)) + int(8.0) ) ),int(9.0)),i2) * ( int(8.0) * i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 3, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 0, 18, 6, 2, 3, 3, 5, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len((in2 + (in0 + (s2[divInt(i0,( ( i2 + int(4.0) ) + int(6.0) )):int(9.0)][i2:] + in1))[divInt(int(8.0),i0):])),int(7.0)) + i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 2], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 1, 0, 0, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [2, 3, 3, 0, 0], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 10, 4, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(( divInt(len(s1),divInt(len(in2),int(4.0))) * ( i2 + int(7.0) ) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1, 1], [0, 1], [3, 3, 2, 2, 3, 3, 0, 3, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 8, 0, 20, 3, 8, 2, 1, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( ( len(getCharFromString(in1, max(i0, min(i2, i2)))) - i2 ) - int(1.0) ), len(in2))) \\l min(max(divInt(i2,i0), i1), i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 1, 2, 2, 3, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 4, 5, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(12.0) \\l max(mod(len(in1),len(in2)), ( i2 * i0 )):{:\\nb1 = in2 not in s0[int(9.0):mod(mod(min(int(8.0), int(9.0)),int(5.0)),min(i2, i1))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [0], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 0, 0, 2, 8, 5], [0, 1, 1, 2, 1, 0, 1], [1], [1, 3, 2, 2, 3, 2, 3, 2, 0, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0], [1, 3, 3, 1, 1, 3, 1, 4, 2], [1, 2, 1, 0], [1, 1, 1, 1, 1, 1], [4, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 14, 5, 3, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\l max(( ( len(in1) - mod(len(in2),mod(i0,i1)) ) * mod(int(0.0),i1) ), i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 0, 1, 2, 1, 2, 0], [0, 1, 0, 0], [0, 2, 3, 2, 4, 5], [1], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 3, 2, 4, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0[( divInt(len(s2),mod(len((in0 + (s2[( divInt(i0,int(4.0)) + int(6.0) ):][int(9.0):] + in1))[:i2]),divInt(int(8.0),i2))) + int(7.0) ):]) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 0, 2, 1, 1], [1], [3, 3, 2, 3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 3, 0, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 4, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 4, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 2, 0, 13, 2, 6, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),int(22.0)), saveOrd(in2))) \\l int(4.0):{:\\nres0 = ( min(i1, i1) * int(7.0) ) \\le len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [1, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 3, 2, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = max(( divInt(len(s0),divInt(min(divInt(( i0 + int(4.0) ),int(6.0)), int(9.0)),i2)) + divInt(int(8.0),i2) ), int(7.0)) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [3, 4, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\ge max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)) \\le min(i2, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 2, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 13, 5, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(s2),mod(abs(( ( int(3.0) - i2 ) + int(0.0) )),int(2.0))) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [2, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 4, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 5, 5, 5], [], [0], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= int(10.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 3, 9, 4, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 - i1 )), i0)), int(23.0))) \\l len(in2):{:\\nres0 = int(9.0) \\le min(divInt(i1,int(4.0)), int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 2, 0], [0, 0], [0], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1, 1], [1, 6, 3, 5, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 3, 1, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [1, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0, 1], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 7, 1, 23, 5, 6, 2, 4, 7, 1, 0, 16, 2, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(len(s1),( len(in2) - divInt(mod(i2,int(35.0)),int(4.0)) ))):{:\\nres0 = in2 in getCharFromString(s1.rstrip((in1[int(5.0):len(in2)][max(int(5.0), i1):] + s2[:divInt(i2,i2)][i2:][:i0])), len(\"\"F\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(1.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 0], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 0, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 1, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 0, 1], [2, 1, 3, 0, 0, 2, 3, 3, 1, 2], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 5, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb0 = abs(i1) \\l mod(max(len(in1), min(i1, ( i1 * i2 ))),i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 4, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 8, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 13, 5, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(abs(mod(len(in2),( ( int(3.0) - i2 ) + int(0.0) ))),int(8.0)) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 0, 2, 1, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 1, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [2, 0, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 1, 5, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(int(26.0), len(in1))) \\l min(min(i2, divInt(i0,i1)), i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], [4, 0, 9, 8, 7, 7, 1, 5, 4, 6, 2, 8, 0, 4, 6, 1, 9, 2], [0, 2, 2, 0, 2, 2, 1], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 0, 2, 0, 1, 2, 3, 1, 0, 2, 1, 2, 1, 3, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 3, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 18, 18, 7, 0, 33, 11, 5, 7, 4, 6, 0, 0, 12, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( ( len((in2 + (in0 + (s2[:divInt(i0,divInt(( i2 + int(4.0) ),int(0.0)))][int(9.0):] + in1))[divInt(( len(in2) + i2 ),int(8.0)):])) + i0 ) * ( i2 - int(7.0) ) ):{:\\nres0 = ( min(int(71.0), i2) * ( int(5.0) + divInt(int(46.0),min(i1, int(2804.0))) ) ) \\le int(6192.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 8, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 0, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [0, 3, 2, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 6, 6, 4, 1, 15, 5, 2, 3, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l min(mod(len(in1),i1), ( i0 * i2 )):{:\\nres0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= divInt(mod(( int(9.0) + int(8.0) ),int(8.0)),int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [2], [0, 1], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 2, 9, 1, 2, 8, 5, 1, 4, 4, 7], [1, 1, 1, 2, 1, 1], [1], [1, 3, 2, 3, 2, 2, 3, 2, 0, 2, 0, 0, 3, 3, 2, 3, 2, 0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1], [2, 3, 3, 2, 1, 3, 0, 0, 1], [1, 1, 0, 0, 1, 2, 0], [1, 1, 0, 1, 0], [0, 1, 1, 0, 4, 5, 2, 1], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [0, 0, 1, 2, 0, 0], [], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 20, 7, 6, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(12.0) \\le abs(( len(s0) - ( mod(len(s1),mod(i1,( i1 - i1 ))) + abs(max(divInt(len(s1),mod(i2,i1)), int(9.0))) ) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [3, 7, 9, 5, 7, 7, 1], [2, 2, 0, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 2, 1, 2, 2, 0, 1, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 1, 3, 0, 0], [2, 1, 0, 2, 1, 2, 0], [0, 0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 4, 0, 22, 9, 2, 6, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(3.0) \\le ( divInt(saveOrd(s1),divInt(max(( ( int(7.0) * int(9.0) ) - int(5.0) ), divInt(int(7.0),( ( i2 + int(7.0) ) * i2 ))),( i0 - int(1.0) ))) * i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 0], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [6, 6, 9, 7, 3, 5, 5], [0, 0, 1, 2, 1, 1], [1], [3, 1, 2, 3, 0, 0, 0, 2, 2, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [3, 1, 3, 0, 2, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 1, 7, 1, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l int(6.0):{:\\ni0 *= divInt(max(i0, i1),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2], [1, 0, 1, 1], [2, 1, 3, 4, 0, 3, 3, 1, 1], [1], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 2, 5, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),saveOrd(in2)), min(i1, ( i0 - i1 )))) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 1, 1], [4, 6, 3, 9, 7, 7, 1], [0, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 3, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 5, 4, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),( len(in0) + min(( int(4.0) * i0 ), int(63.0)) )) + int(9.0) ):{:\\nb2 = i1 \\le ( int(7.0) * i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 3, 2, 3, 3, 1, 0, 2, 0, 0, 0, 1, 2, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 0, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = abs(max(( len(in1) + min(int(1.0), i1) ), divInt(i0,i2))) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [1, 1], [], [0, 0], [], [], [0, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 0, 1, 1, 1, 1], [1, 6, 9, 7, 6, 3, 6], [2, 2, 1, 0, 2], [1], [2, 1, 3, 1, 2, 1, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [0, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [4, 5, 1, 4, 4], [1], [], [2, 1, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [1, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 2, 1, 7, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(1697.0),min(int(6.0), ( int(3.0) - i2 )))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [1, 1], [], [0, 0], [], [], [2, 1], [4, 4], [2, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 3, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [1, 2, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 1, 16, 6, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(( divInt(len(s1),mod(len(in2),( ( min(i2, int(3.0)) - int(0.0) ) * int(6.0) ))) + divInt(int(8.0),i2) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [1], [3, 3, 2, 3, 1, 3, 2, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 3, 0, 1, 1], [0, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 6, 0, 19, 4, 7, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + int(1.0) ), max(( divInt(i0,i2) - i2 ), int(1.0)))) \\l min(len(in2), min(( i2 + i2 ), i0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 1, 0, 3, 3, 3, 0, 2, 0, 0, 3, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(22.0)) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(3.0) == ( divInt(saveOrd(s2),mod(len(in2),( ( int(0.0) - i1 ) + int(2.0) ))) + int(8.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 3, 0, 0], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(in1) \\l saveOrd(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 2, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 3, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 2, 1, 1, 0, 2, 1, 0, 3], [1, 0, 1, 1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 3], [2, 1], [0, 1, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 7, 7, 7, 0, 29, 6, 10, 2, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( len(in2) * i0 )), i1)), int(22.0))) \\l min(max(max(mod(i2,int(9.0)), int(7.0)), i1), divInt(( int(5.0) - int(5.0) ),i2)):{:\\nres0 = divInt(int(5.0),i1) \\le len(in0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [4, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [1, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(00.0) \\l saveOrd(in1):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1, 0], [0, 1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 4, 1, 0, 3, 0, 1, 1], [0, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 8, 0, 20, 3, 8, 2, 1, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( saveOrd(getCharFromString(in1, max(min(i0, ( i2 + i2 )), i2))) - int(1.0) ), len(in2))) \\l min(max(divInt(i2,i0), i1), i0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 1, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 0, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 10, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( i0 + min(divInt(len(s0),divInt(int(4.0),int(6.0))), i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 0, 2, 3, 2, 3, 3, 2, 1, 0, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 1, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 2, 2, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 5, 1, 18, 5, 4, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(s2)), ( i2 * i2 )):{:\\nres0 = s2 not in s0[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= min(i0, i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5, 6], [1, 0, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 1, 3, 2, 0, 1, 1, 0, 2, 2, 2, 3, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 3, 3, 4, 0, 13, 1, 6, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(int(22.0), len(in1))) \\l min(min(i1, divInt(i0,i1)), i2):{:\\nres0 = int(9.0) \\le len(in2)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [0, 1], [3, 0, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 2, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[i0:]) \\le len(s2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [0, 0, 1, 2, 2, 1, 0, 1, 1], [2], [2, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\ni1 *= int(10.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 1], [3, 7, 9, 5, 5, 7, 8, 7, 6], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 0, 1, 2, 0], [0, 0, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 3, 3, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in2) \\le ( divInt(i2,divInt(len(in2[( ( i2 * int(3.0) ) + int(7.0) ):]),len((in0 + (s2[int(9.0):][divInt(int(5.0),i2):] + in1))[:int(5.0)]))) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1, 2], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 0, 0, 0, 3, 0, 1, 1], [2, 2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 7, 1, 22, 4, 7, 2, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(( min(min(i1, mod(i0,i1)), i2) * int(26.0) ),min(len(in1), min(divInt(i1,int(9.0)), int(7.0)))), i1)) \\l int(3.0):{:\\ni2 *= int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 7, 8, 4, 5, 5, 1, 4, 4, 7], [0, 1, 2, 2, 2, 0, 1], [1, 0], [1, 1, 2, 3, 3, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [2, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 7, 1, 20, 4, 5, 2, 3, 5, 0, 0, 11, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le int(78.0):{:\\nres0 = mod(abs(len(in1[len(in2):])),( divInt(i0,int(4.0)) - int(5.0) )) \\l i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += abs(len(getCharFromString(in2.rstrip((s1[:int(5.0)][i2:mod(i2,i0)] + in1)), i1)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 1], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 4, 5, 0, 5, 5], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in1)), ( i1 - i0 )):{:\\nres0 = mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)) \\le min(i2, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 0], [0, 4], [0, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1], [2, 1, 9, 3, 5, 5, 5, 6], [1, 0, 1, 2, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 2, 1, 3, 1, 1, 3, 1, 1], [1, 0, 1, 1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4], [2, 2], [0, 1, 0, 1], [4, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb0 = abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(21.0))) \\l len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [1, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 1, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 1], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 2, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 2, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [1, 5, 5, 0, 5, 5], [], [], [0, 0, 2, 4, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 5, 1, 21, 6, 3, 3, 4, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(( abs(mod(i1,i0)) * mod(( mod(int(9.0),int(8.0)) - int(9.0) ),int(5.0)) ),len(s1)), i2):{:\\nres0 = in2 not in getCharFromString(in2, i1)[int(5.0):int(6.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(2174.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 0, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 1, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 3, 3, 3, 0, 14, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(s1),divInt(len(in0),( ( i0 + int(4.0) ) + int(7.0) ))) + int(2.0) ) and i2 \\le i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 1, 0, 2, 1, 2, 0], [0, 1, 0], [1, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s1) \\le len(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 17, 6, 3, 3, 3, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(getCharFromString(in2, divInt(min(( ( i0 + int(4.0) ) + int(6.0) ), int(9.0)),i2))),divInt(int(8.0),i2)) + int(7.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [1], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 0, 1, 3, 0, 0, 0, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb1 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= int(10.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 1, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 4, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 5, 2, 18, 5, 4, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * int(9.0) )):{:\\ni0 -= mod(mod(( int(8.0) + int(9.0) ),int(5.0)),int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += min(i1, i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [0, 0, 1, 2, 1, 1, 0, 2], [1], [3, 3, 2, 0, 3, 2, 0, 2, 0, 0, 1, 1, 2, 3, 2, 3, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 1], [2, 1, 3, 1, 0, 3, 2, 0, 1], [2], [0, 1, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 8, 0, 21, 5, 5, 1, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(i0,len(in0)), ( i0 * mod(i1,i2) ))) \\l int(26.0):{:\\nres0 = int(9.0) \\le mod(max(divInt(min(i1, int(7.0)),i1), i0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 2, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [0], [2, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 0, 1], [2, 1, 3, 0, 0, 3, 3, 3, 1, 2], [2], [0, 1, 0], [1, 5, 3, 0, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = abs(max(divInt(len(s1),min(min(i1, ( i1 * i1 )), i2)), int(22.0))) == len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 4, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 6, 1, 19, 5, 4, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in1)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),i2):min(i1, i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [2, 5], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 0, 0, 2, 1, 1], [1], [1, 3, 2, 2, 3, 3, 3, 2, 2, 0, 0, 0, 3, 1, 2, 0, 0, 0, 0, 0, 1, 2, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0], [1, 3, 3, 2, 1, 3, 1, 4, 2], [1, 2, 1, 0], [0, 1, 1, 1, 1, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 17, 5, 5, 1, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(29.0) == max(divInt(mod(len(in1),len(in2)),abs(mod(mod(i1,i0),i0))), max(int(9.0), ( i2 - i1 )))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1], [0, 1], [2], [1, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [3, 0, 0, 8, 7, 7, 1, 6, 8, 2], [2, 2, 2, 0, 2, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 2, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1, 3, 2, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 6, 1, 27, 9, 4, 5, 4, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(getCharFromString(s1, ( divInt(len(in2),mod(len((in0 + (s2[:( ( divInt(i2,int(3.0)) - int(0.0) ) + int(0.0) )][( int(8.0) + i2 ):int(7.0)] + in1))[i0:( i2 * int(7.0) )]),min(divInt(i1,int(1.0)), int(6.0)))) - int(82.0) )))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 22, 7, 3, 4, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0[( divInt(len(in2),divInt(len((in0 + (s2[:( ( i0 + int(4.0) ) + int(6.0) )][int(9.0):] + in1))[i2:]),divInt(int(8.0),i2))) + int(7.0) ):]) \\le i0:{:\\nres0 = ( i2 * int(7.0) ) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [1], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 0, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 not in in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1, 1, 1], [2, 2, 1, 2, 2, 1, 0, 1, 1], [2, 0, 0, 1], [0, 0, 1, 1, 1, 1], [0, 0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 3, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 2, 5, 5, 5, 4], [], [0, 0], [0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 6, 6, 4, 2, 2, 0, 0, 0, 2, 3, 4, 3, 1, 0, 0, 0, 1, 7, 7, 4, 0, 20, 4, 5, 1, 3, 8, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nloopBreak% = 0\\nfor in2 in s2:{:\\nres0 = divInt(mod(min(int(0.0), int(9.0)),int(8.0)),int(9.0)) \\le min(i2, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in in2:{:\\nif int(5.0) \\le int(5.0):{:\\nb1 = in2 not in in1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 6, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 3, 3, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [4, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 22, 22, 9, 1, 35, 10, 6, 6, 5, 6, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(getCharFromString(in1, len(in2))),( i1 * i0 )), mod(mod(( int(9.0) - int(6.0) ),min(min(saveOrd(in2[i2:i1]), int(9.0)), int(5.0))),int(5.0))):{:\\nres0 = s0 not in (in2[:i2][int(6.0):mod(i1,( ( mod(int(2174.0),i1) + int(20.0) ) + ( i0 + int(65083.0) ) ))] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= int(305.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 4, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 1, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(14.0):]) \\le len(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 0, 0, 3, 2, 8, 5], [0, 0, 1, 2, 0, 0, 1, 0], [1], [1, 3, 2, 2, 3, 3, 3, 2, 3, 0, 2, 1, 2, 1, 2, 0, 0, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 4, 3, 1, 1, 3, 1, 4, 2], [1, 2, 1, 0], [1, 1, 1, 1, 0, 1], [2, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 8, 0, 28, 9, 5, 4, 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l min(mod(mod(saveOrd(s2),len(in2)),max(mod(max(i0, mod(int(0.0),divInt(int(3.0),( i0 - i1 )))),i2), ( i0 * int(2.0) ))), ( int(8.0) - i0 )):{:\\nres0 = int(5.0) != ( i1 + i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [6, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 0, 1, 2, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 1, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 3, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [2, 0, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 1, 1, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 2, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 4, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 4, 0, 21, 6, 4, 1, 5, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(getCharFromString(in2, mod(i1,i0)))), mod(mod(( int(9.0) * mod(int(8.0),int(9.0)) ),min(i2, i1)),int(5.0))):{:\\nres0 = in2[int(5.0):int(6.0)] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [9, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [0], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 1, 15, 5, 3, 3, 3, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(90.0) \\l max(mod(len(in2),len(s0)), ( i1 * i0 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= mod(mod(( int(9.0) + int(8.0) ),int(9.0)),int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s1) \\le divInt(mod(len(in2),divInt(len(in0),( ( int(3.0) - i0 ) + int(0.0) ))),int(6.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 0, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 1, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 1, 15, 4, 3, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(int(9.0), len(in1)):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= len(s0[mod(i0,i2):( mod(mod(int(8.0),int(0.0)),int(5.0)) - int(5.0) )])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 0, 0, 2, 0, 1, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [2, 1], [0, 1, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 10, 2, 4, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= abs(max(divInt(len(in2),min(i0, i1)), ( i2 - int(22.0) )))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 9, 7, 5, 5, 5, 8, 6], [1, 0, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 2, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1, 3, 0, 1, 3, 1], [1, 0, 1, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 2], [2], [0, 1, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 9, 9, 6, 0, 28, 5, 10, 1, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(( mod(i1,i0) * i0 ), int(22.0)), len(in2))), min(max(divInt(i2,int(9.0)), int(7.0)), i1))) \\l mod(int(5.0),int(5.0)):{:\\nres0 = max(i1, int(5.0)) \\le abs(int(86.0))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [3, 4], [0, 1, 0], [0, 0], [], [3, 0], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 0, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 2, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 3, 3, 2, 0, 13, 5, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\ge ( divInt(len(in2),divInt(abs(( ( i0 + int(4.0) ) + int(7.0) )),int(2.0))) + i2 ) and b1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 6, 3, 7, 7, 1, 3, 6, 0, 3, 9], [2, 0, 0, 0, 1, 1], [1, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 3, 2, 1, 0, 3, 1, 1, 1, 0, 2, 0, 1, 3, 1, 1], [0, 1, 1, 1, 0, 0, 0, 0], [4, 3, 3, 4, 1, 1], [0, 0, 2, 2, 1, 2, 0], [0, 1, 0, 1, 1], [2, 5, 3, 2, 4, 5, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 3, 0, 21, 7, 5, 4, 3, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(in0),divInt(( int(3.0) + saveOrd((s2 + (in1[( int(8.0) + i2 ):][max(int(6.0), int(3.0)):] + in2))[int(7.0):]) ),i0))) * ( i0 * int(71.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 1, 3, 1, 2, 2, 0, 2, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2, 0, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 0, 20, 5, 7, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) * int(26.0) ), min(int(9.0), ( divInt(i1,mod(int(7.0),min(len(in2), abs(( i0 + int(3.0) ))))) + int(5.0) )))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 3, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [0, 3, 4, 4, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 4, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [1, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 1, 16, 5, 4, 3, 3, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l min(mod(len(in1),saveOrd(in2)), ( i1 * i0 )):{:\\nres0 = in1 not in s0[:mod(mod(( int(4.0) - int(8.0) ),int(9.0)),int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += saveOrd(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [2, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [1], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 4, 7, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = divInt(abs(( max(len(s2), min(int(26.0), mod(i1,i0))) - i1 )),int(9.0)) \\l min(len(in2), abs(divInt(i2,int(7.0))))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 0, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le divInt(divInt(len(s0),divInt(i0,( ( i2 + int(4.0) ) + int(6.0) ))),int(9.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 2], [0, 2], [0, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 1, 0, 1, 3, 3, 2, 2, 0, 0, 1, 1, 3, 2, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 1, 4, 2, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 3, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb2 = abs(max(divInt(len(in1),min(min(i1, ( i1 * int(22.0) )), i1)), int(4.0))) \\l len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 8, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 3, 3, 2, 2, 0, 1, 1, 3, 1, 0, 1, 0, 1, 0, 2, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0], [4, 3, 1, 0, 0], [2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 4, 5, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(divInt(len(in2),max(min(( ( i2 * int(3.0) ) + int(7.0) ), min(int(8.0), i2)), int(5.0))),i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 5, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(int(26.0), ( i1 * i0 )), i1)), int(9.0))) \\l len(in2):{:\\nb1 = min(max(mod(i2,int(7.0)), int(3.0)), i1) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 9, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 2, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 1, 3, 0, 0, 4, 3, 2, 1], [2, 1, 2, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [1, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 5, 1, 21, 6, 4, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(max(len(in1), ( i1 * i0 )),mod(divInt(( int(9.0) - mod(int(8.0),int(9.0)) ),min(i2, i1)),int(9.0))), int(5.0)):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= int(6.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 2, 0, 2, 1, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 3, 0, 0], [2, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 3, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1], [5, 2, 0, 7, 5, 5, 5, 6], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 0, 3, 3, 2, 0, 1, 1, 0, 2, 2, 2, 3, 1, 1, 3, 1, 1], [1, 0, 1, 1, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4], [2, 2], [1, 1, 0, 1], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 6, 0, 19, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(mod(len(in2),min(min(i1, ( i0 * i1 )), i2)), int(52.0))) \\l i1:{:\\nres0 = len(in2) \\le min(mod(i1,int(0.0)), int(7.0))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [2, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 0, 3, 2, 1, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 2, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 4, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [2, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 1, 15, 5, 2, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(00.0) == max(mod(i1,saveOrd(s2)), ( int(9.0) * i0 )):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= mod(mod(( int(8.0) + int(9.0) ),int(5.0)),int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [0, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [2, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 2, 0, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 0, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 4, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 1, 15, 5, 2, 3, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(10.0) \\l mod(i1,max(len(in1), ( i0 * i2 )))\\ni1 += mod(mod(( int(9.0) + int(8.0) ),int(9.0)),i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0], [2, 2, 3, 0, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 8, 0, 20, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(abs(( len(in1) - min(min(i0, divInt(i2,i2)), i2) ))) \\l int(1.0):{:\\nb0 = len(in2) \\le min(max(mod(i2,i0), i1), i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [0, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 1, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 1, 0, 9, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nb1 = int(16.0) \\le abs(mod(len(in1),( len(in2) - divInt(int(3.0),i2) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1], [2, 4, 9, 7, 0, 5, 5, 6], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 0, 3, 3, 2, 0, 1, 1, 1, 2, 2, 2, 3, 1, 1, 3, 1, 1], [1, 0, 1, 1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4], [2, 1], [0, 1, 0, 1], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 3, 3, 4, 0, 13, 2, 5, 1, 1, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in2),min(min(int(24.0), ( i1 * i0 )), i1)), int(9.0))) \\l i2:{:\\nin2 = in0\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1], [1, 1, 1, 0, 1, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 3, 3, 4, 0, 13, 1, 6, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(int(22.0), len(s0))) \\l min(min(i1, divInt(i0,i1)), i2):{:\\nres0 = int(9.0) \\le len(in2)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0, 1], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 14, 6, 3, 2, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(divInt(len(in2),divInt(len(in0),( ( i2 + int(3.0) ) + int(7.0) ))),mod(int(9.0),i2))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [3, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd((in0 + in2)) == int(16.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 3, 3, 2, 2, 2, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 6, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),len(in0)) + min(divInt(( ( i0 + int(4.0) ) + int(6.0) ),i2), divInt(int(3.0),i2)) ):{:\\nres0 = int(8.0) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 1, 3, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 6, 0, 21, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(int(26.0), min(( i1 * i0 ), i1))), int(9.0))) \\l len(in1):{:\\nres0 = min(max(mod(i2,int(7.0)), int(3.0)), i1) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 0, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 2, 1, 1, 0, 2, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 1, 1, 2, 0], [0, 0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [1, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 0, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 0, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 0, 3, 3, 0, 2, 3, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [3, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 3, 8, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l max(divInt(i1,len(in2)), min(i0, ( min(i1, i2) * int(26.0) ))):{:\\nb0 = len(in0) \\le abs(max(mod(i1,int(97.0)), int(3.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 3, 2, 2, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 1, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 5, 5, 3, 0, 18, 7, 3, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(3.0) ))) + int(2.0) ) and i2 \\le ( ( i0 + int(2.0) ) - int(7.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [1, 4], [1, 0], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 1, 3, 0, 2, 0, 2, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0], [3, 1, 3, 0, 0, 3, 0, 1, 1], [1, 1, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 3, 0, 12, 3, 4, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\g max(divInt(len(in2),int(26.0)), min(i1, ( i0 - divInt(i1,int(9.0)) ))):{:\\nres0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 9, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 0, 0, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 3, 6], [1, 0, 1, 2, 1, 1, 2], [1, 1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1], [2, 1, 1, 0, 0, 3, 0, 0, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 6, 0, 19, 3, 7, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in in2:{:\\nres0 = abs(max(divInt(max(min(min(i1, ( i0 * i1 )), i2), int(16.0)),len(in0)), min(int(9.0), mod(i1,int(7.0))))) \\l i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 2, 2, 2, 0, 3, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0, 1], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(i1,mod(len(in2),divInt(( mod(i2,len(in0)) - int(3.0) ),int(0.0)))) + ( int(2.0) + i2 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 1, 0, 0, 0, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 0, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 4, 1, 4, 5, 2, 1], [1], [], [4, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 6, 6, 6, 1, 19, 5, 5, 2, 4, 5, 0, 0, 11, 3, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(len(getCharFromString(in1, ( len(in2) - divInt(mod(i2,int(38.0)),int(4.0)) ))),i1)):{:\\nres0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += abs(len(in1.capitalize().rstrip((s1[int(5.0):i2][divInt(i2,i0):] + in1))))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 2, 7, 5, 5, 5], [1, 0, 2, 2, 1, 2], [1], [3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 1, 2, 3, 3, 0, 2, 0, 1, 1, 0, 2, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 5, 5, 5, 0, 19, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(int(22.0), len(in1))) \\l min(min(i1, ( i0 * i2 )), int(2.0)):{:\\nres0 = divInt(len(in2),min(i2, mod(i1,int(7.0)))) \\le int(5.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [1], [1, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 1, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = abs(max(divInt(len(in1),min(min(i1, ( i0 * int(26.0) )), i1)), int(9.0))) \\g len(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 5, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 1, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [1], [], [0, 0, 0, 2, 1, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 1, 15, 4, 3, 3, 2, 3, 1, 0, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(int(0.0), len(in1)):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= len(\"\"R\"\"[( i0 - i2 ):( mod(mod(int(9.0),int(5.0)),int(9.0)) + int(5.0) )])\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1], [3, 0, 2, 8, 7, 7, 1, 4], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1], [4, 2, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0, 1], [1, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 3, 0, 21, 9, 3, 5, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(abs(mod(len(in2),( ( int(3.0) - divInt(int(0.0),( int(2.0) + ( int(8.0) + i2 ) )) ) * int(7.0) ))),i2) - mod(i2,int(714.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 8, 5, 5], [1, 0, 2, 0, 2, 1], [1], [1, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(26.0) \\l abs(divInt(max(len(in1), min(i1, ( i0 - i2 ))),i0)):{:\\nres0 = int(9.0) \\le min(len(in2), min(mod(i2,int(7.0)), int(8.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [2, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [1], [], [0], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 1, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 6, 6, 3, 1, 15, 5, 2, 3, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l i1:{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= mod(max(len(in1), ( int(0.0) - i2 )),mod(mod(( int(9.0) + int(8.0) ),int(9.0)),int(5.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [1], [0, 1, 0], [4, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 6, 0, 18, 4, 7, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),( min(i1, mod(i0,i1)) - i2 )), i1)) \\l min(len(s1), abs(divInt(i1,int(22.0))))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [6, 6, 3, 8, 7, 7, 1, 1, 3, 1, 9], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5, 2], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 5, 0, 22, 7, 4, 4, 3, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( int(6.0) + i0 ) + min(int(638.0), i2) ))) + divInt(int(7.0),i2) ):{:\\ns2 = (in1 + (in2[int(711.0):i0][( i2 * int(31.0) ):] + s2))[int(9.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [0], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 9, 1, 7, 3, 5, 5, 0], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 2, 3, 1, 1, 1, 1, 1, 1], [1, 0, 0, 1, 0], [2, 1, 0, 0, 1, 3, 0, 1, 1], [2, 1, 2], [1, 1, 0], [4, 1, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 4, 0, 23, 5, 7, 3, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(min(( min(i1, ( i2 * i1 )) - i2 ), int(29.0)),mod(max(len(in1), ( min(int(1.0), int(7.0)) * int(3.0) )),int(5.0))), int(5.0))) \\l int(0.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 4, 1, 8, 7, 7, 1], [0, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [1, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 6, 4, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s0) \\le ( ( len(in2) + mod(len(in0),( ( int(4.0) + i0 ) + min(int(4.0), i0) )) ) * mod(int(1.0),i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 0, 7, 1], [2, 2, 2, 1, 2], [0, 1], [3, 0, 1, 3, 1, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 1, 4, 5], [1], [], [2, 0, 0, 1, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0[i2:]) \\le int(4.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 1, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 4, 5, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(s1)), ( i1 * i0 )):{:\\nb1 = in2 not in s0[min(mod(mod(int(9.0),int(8.0)),int(9.0)), int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 1], [2, 0, 2, 2, 2, 1, 0, 1, 1], [2, 0, 0, 2], [0, 1, 1, 1, 1, 1], [0, 0], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [1], [1], [], [1], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 0], [4, 5, 5, 0, 5, 5, 2, 2, 2], [], [0, 0], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 9, 9, 4, 5, 2, 2, 0, 0, 1, 1, 3, 1, 1, 1, 0, 1, 0, 24, 24, 12, 4, 35, 10, 4, 6, 6, 9, 0, 2, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile False:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in s0:{:\\nloopBreak% = 0\\nfor in2 in in2[int(10.0):max(mod(len(s2),len((s2[:( i1 * i0 )][( mod(( int(9.0) - int(8.0) ),int(9.0)) + int(5.0) ):min(i2, i1)] + s2))), int(5.0))]:{:\\nloopBreak% = 0\\nwhile int(6.0) \\l int(2174.0):{:\\ni2 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(20.0)\\ni0 = mod(i1,mod(( mod(int(65083.0),i0) * int(305.0) ),divInt(i2,int(5.0))))\\ni2 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [1, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 9, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 2, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 2, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nb1 = in2 not in s2[mod(mod(( int(9.0) * int(9.0) ),int(9.0)),int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 0, 1], [1, 3, 3, 2, 0, 4, 3, 2, 1], [2, 1, 1, 0, 0, 2, 0], [1, 1, 1, 1, 1], [0, 5, 5, 5, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 5, 1, 18, 5, 4, 4, 2, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(s0),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in in2[( mod(( int(9.0) - int(8.0) ),int(9.0)) - int(5.0) ):abs(i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 3], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [1], [1, 3, 0, 3, 3, 0, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0], [2, 1, 4, 1, 0, 3, 0, 1, 1], [1, 1, 0], [1, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 1, 2, 0, 0, 2, 2, 2, 1, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 1, 15, 5, 2, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(00.0) \\l max(divInt(len(in1),int(9.0)), ( i1 * i0 )):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= mod(mod(( int(8.0) + int(9.0) ),int(5.0)),i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 0, 2, 1, 1], [1], [1, 3, 2, 1, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 3, 3, 4, 0, 11, 2, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(22.0) \\l abs(divInt(int(9.0),max(len(in1), i1))):{:\\nres0 = ( i0 * i0 ) \\le i2\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 3, 2, 0, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( i1 + len(in1) ), min(i0, divInt(i2,i2)))) \\l i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1], [2], [0, 0], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 2, 1, 0, 1, 1, 3, 1, 2, 0, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 4, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s1) \\le ( int(3.0) + len(in1) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [2, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 1, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [4, 7, 2, 8, 7, 7, 1, 9, 6, 3, 3, 2, 6, 2], [0, 2, 2, 0, 2, 2, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 2, 0, 3, 1, 0, 2, 0, 1, 0, 2, 1, 2, 1, 3, 2, 0, 3, 1, 3, 1, 1, 2, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [4, 3, 3, 0, 0, 0, 3], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0, 1, 0], [1, 5, 2, 2, 4, 5], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [2, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 14, 14, 7, 0, 37, 11, 7, 6, 5, 6, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(len(getCharFromString((s2 + (s2[( ( i0 + int(4.0) ) + int(7.0) ):int(2.0)][int(8.0):] + in1))[( i2 + min(int(7.0), i2) ):], ( i0 + int(7.0) ))),i2)) - ( int(1.0) * divInt(int(9.0),min(mod(i2,min(int(6.0), len(in2))), int(3.0))) ) ) and int(326.0) \\le divInt(int(2.0),i2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], [4, 8, 9, 8, 2, 7, 1, 7, 8, 9, 0, 9], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 1, 3, 3, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0, 4], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 1, 2, 4, 5], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 5, 0, 28, 8, 6, 5, 3, 6, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(getCharFromString((s1 + (s2[( ( i0 + int(4.0) ) + int(8.0) ):int(9.0)][:i2] + in1))[divInt(int(8.0),i2):int(2.0)], i0)),( i2 + int(71.0) ))) * ( min(int(78.0), min(saveOrd(in2), int(9.0))) - int(09.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 9, 7, 5], [1, 2, 0, 2, 1, 1], [1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1, 1], [2, 3, 3, 0, 0, 3, 1, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 5, 0, 19, 4, 7, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in1)) \\l mod(len(in2),( min(i1, mod(i2,i0)) * i2 )):{:\\nres0 = int(26.0) \\le min(len(in0), max(divInt(i1,int(9.0)), int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 3, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 2, 4, 1, 2], [2], [0, 1, 0], [4, 5, 0, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 4, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 5, 0, 18, 3, 8, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i1 * i1 )), i2)), int(22.0))) \\l len(in2):{:\\nres0 = abs(saveOrd(s0)) \\le mod(i1,int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 9, 8, 5], [1, 2, 0, 2, 0, 1], [1], [3, 0, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 1, 1, 1], [1], [1, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 6, 0, 19, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(i1) \\l mod(max(len(in1), min(i2, ( i0 - i2 ))),i0):{:\\nres0 = int(26.0) \\le min(len(in2), max(divInt(i1,int(9.0)), int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [7, 6, 9, 7, 6, 5, 5], [1, 2, 2, 2, 1, 1], [1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 6, 0, 17, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + divInt(min(i1, mod(i2,i2)),i2) ), int(7.0))) \\l min(len(in2), min(i1, i1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [2, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 7, 2, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(divInt(saveOrd(s0),( len(in2) + ( divInt(i0,int(4.0)) + int(8.0) ) )),int(9.0)) + i2 ) \\l ( int(8.0) * i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 8, 5, 5], [1, 0, 1, 2, 1, 0], [1], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 4, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 5, 0, 19, 4, 7, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile divInt(abs(( saveOrd(in1) * len(in2) )),min(i1, mod(i0,i1))) \\l i2:{:\\nres0 = int(26.0) \\le min(len(in0), min(divInt(i1,int(9.0)), int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 3], [0, 4], [0, 2], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 3, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 1, 1, 3, 1, 0, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le divInt(divInt(len(in2),divInt(len(in0),int(3.0))),( i2 + int(7.0) ))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 2, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 18, 4, 7, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(divInt(( max(len(in1), min(i1, mod(i0,i1))) - i2 ),int(26.0))) \\l min(len(in2), abs(divInt(i1,int(9.0))))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [2, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1], [2, 3, 0, 7, 5, 5, 5], [1, 0, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 1, 3, 3, 0, 2, 0, 1, 1, 0, 2, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 5, 0, 12, 1, 5, 0, 1, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(mod(len(in1),min(min(i1, i0), i0)), i2)) \\l i1:{:\\nin2 = getCharFromString(in0, int(2.0))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [9, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 1, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(90.0) \\l max(mod(len(in1),len(s1)), ( i2 * i2 )):{:\\nres0 = in2 not in s0[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):min(i2, i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 0, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [1, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 0], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [3, 7, 4, 8, 1, 5, 1], [2, 2, 2, 0, 2], [1, 1], [3, 2, 2, 3, 3, 3, 2, 2, 0, 1, 1, 2, 1, 2, 1, 1, 3, 0, 1, 2, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0], [4, 3, 3, 2, 0], [0, 0, 0, 1, 2, 2, 0], [0, 0, 0], [1, 2, 2, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 1, 16, 6, 4, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(s2),len(s2)) + abs(divInt(( i2 + int(3.0) ),int(7.0))) )\\ni2 += ( int(4.0) - ( int(8.0) * int(1.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 0, 0, 3, 0, 2, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1, 0, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 23, 3, 9, 3, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(( len(in1) - min(min(i1, i0), i1) ), len(in2))) \\l i0:{:\\nres0 = ( min(max(max(( i0 + int(26.0) ), int(9.0)), i1), int(7.0)) + int(3.0) ) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 7, 7, 7, 0, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 0, 1, 0, 0, 2, 1], [1, 1, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [1], [0, 1, 0], [4, 2, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 3, 3, 5, 0, 17, 2, 8, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, mod(i0,i1)), i2)), int(27.0))) \\l len(s2):{:\\nres0 = len(in0) \\le max(int(7.0), i1)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3, 1], [0, 5], [0, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2], [1, 0, 1, 1], [2, 1, 4, 0, 0, 3, 3, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [2, 2, 2], [], [0, 0], [], [], [1, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 1, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 1, 0, 0, 0, 2, 0], [0, 0, 0], [0, 1, 4, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [8, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 0, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 4, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 6, 0, 17, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(min(( len(in1) + divInt(min(i1, mod(i0,i2)),i2) ), int(8.0))) \\l min(len(in1), min(i1, i1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 0, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 0, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0], [2, 0, 3, 0, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 5, 0, 13, 2, 5, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(min(( len(in1) - min(min(i0, divInt(i2,i2)), i2) ), int(1.0))) \\l i0\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 0, 1, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 2, 0, 4, 3, 2, 1, 1], [1], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 10, 2, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(i1,int(26.0)), abs(i0))) \\l ( i1 - i2 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0, 0], [2], [0, 0, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [6, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 2, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 3, 2, 3, 2, 0, 1, 0, 0, 0, 6, 6, 7, 0, 21, 5, 5, 1, 4, 5, 0, 0, 11, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(66.0) \\le abs(divInt(len(in1),( len(in2) - divInt(divInt(i2,int(38.0)),int(4.0)) ))):{:\\nres0 = i1 \\l abs(len(getCharFromString(in2.rstrip((s1[:int(5.0)][i2:mod(i2,i2)] + in1)), i0)[i1:]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = b2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 0, 2, 1, 1], [1], [3, 3, 2, 3, 1, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 5, 5, 5, 0, 19, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),int(22.0)), min(i1, ( i0 * i0 )))) \\l i2:{:\\nres0 = int(9.0) \\le min(len(in2), min(mod(i1,int(7.0)), int(5.0)))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 1, 0, 2, 1, 2, 0], [1, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( i2 - len(in2) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 7, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 0, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 6, 1, 19, 5, 4, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(min(len(in1), ( i1 * i0 )),mod(( ( int(9.0) - int(7.0) ) + int(9.0) ),i2)), min(i2, i2)):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 0, 0, 2, 2, 1, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 4, 1, 13, 4, 2, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l i1:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = mod(max(len(in2), ( i2 * i1 )),mod(mod(int(9.0),int(8.0)),int(9.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),int(3.0)) - len(in0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [9, 4, 1, 8, 7, 7, 1], [0, 1, 2, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 2, 0, 3, 1, 0, 2, 1, 1, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(9.0) \\le ( ( saveOrd(s0) + divInt(len(in2),( ( mod(i0,len(in0)) + int(4.0) ) + i1 )) ) * ( int(1.0) - int(8.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [0], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 0, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 1, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le int(4.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [0, 2, 0], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 0, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 2, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 3, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 14, 14, 5, 1, 21, 6, 4, 3, 4, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(len(in1), mod(( len(in0) * mod(i1,i0) ),mod(( mod(int(1098.0),int(0.0)) - int(5.0) ),int(5.0)))) \\l min(i2, i1)\\nloopBreak% = 0\\nwhile in2 not in s0[int(6.0):int(2174.0)]:{:\\ni2 += int(20.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 9, 8, 5, 5, 5, 6, 7], [1, 0, 1, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 0, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1, 3, 1, 2, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 1, 3, 0, 0, 2, 0, 1, 1, 3], [2], [0, 1, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 9, 9, 7, 0, 30, 5, 10, 1, 4, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1[min(min(i1, ( int(2.0) * i0 )), i1):i2]),abs(min(max(mod(i1,int(2.0)), int(9.0)), i1))), divInt(int(8.0),int(5.0)))) \\l max(int(5.0), mod(len(in2),int(5.0))):{:\\nres0 = int(67.0) \\le i1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [1, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 7, 7, 1], [2, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 0, 0, 1, 2, 1, 2, 3, 0, 0, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [1, 0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(s1)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [0], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 2, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 6, 6, 5, 1, 18, 5, 4, 3, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),abs(( i1 * i0 ))), mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0))):{:\\nres0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += min(i1, i2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [4, 8, 2, 8, 7, 7, 1, 2, 3, 0, 4, 3, 3, 4, 5], [2, 2, 0, 0, 2, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1, 1, 3, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 15, 15, 6, 0, 25, 8, 4, 6, 2, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(getCharFromString((in0 + (s2[( ( i2 + int(4.0) ) + int(8.0) ):][int(2.0):] + in1))[i2:( ( i0 + int(8.0) ) + i0 )], ( i2 - int(7.0) ))),int(71230433.0))) * min(i1, int(45.0)) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 16, 7, 2, 5, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s0) \\le ( divInt(( ( len(in2) + ( divInt(i0,int(4.0)) + int(8.0) ) ) + i2 ),i2) * ( int(9.0) - i0 ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 0, 0, 3, 1, 2, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 3, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),len(in2)), min(i1, ( i1 * i1 )))) \\l i2:{:\\nres0 = int(22.0) \\le len(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 1], [4, 6, 9, 8, 7, 7, 1, 3, 4], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 1, 2, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 1, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 3, 0, 18, 6, 2, 2, 4, 6, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(getCharFromString(in2, mod(int(4.0),int(6.0)))),( divInt(int(9.0),int(8.0)) + int(7.0) )) + i0 )\\nin0 = (s2 + (in1[divInt(int(713.0),i2):][:int(4.0)] + in2))[i2:]\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 7, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 1, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 0, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 1, 15, 5, 2, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),int(7.0)), ( i1 * i0 )):{:\\nres0 = in2 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= mod(mod(( i1 + int(8.0) ),int(9.0)),int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 0, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 3, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 2, 2, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),i1), ( i0 * i2 )):{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 2, 9, 7, 5, 5, 5, 0, 3], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 2, 2, 3, 1, 1, 3, 1, 1, 2, 1, 3, 1], [1, 0, 1, 1, 0, 1, 1], [2, 1, 3, 0, 0, 0, 0, 1, 1, 4, 4], [2, 1], [0, 1, 0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 9, 9, 6, 0, 33, 7, 11, 2, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(8.0))) \\l min(min(max(mod(i1,int(2.0)), int(9.0)), i1), divInt(( mod(max(int(7.0), int(5.0)),saveOrd(in2)) - int(5.0) ),int(5.0))):{:\\nres0 = divInt(int(0.0),saveOrd(in0)) \\le int(3.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [0, 1], [3, 1, 2, 1, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 7, 1, 3, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(1.0)) \\l ( int(1.0) - max(len(s0), i0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 1, 3, 0, 2, 0, 0, 0, 1, 3, 3, 2, 2, 0, 1, 1, 1, 3, 3, 1, 1, 3], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 4, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 4, 6, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),int(22.0)), min(i1, ( i1 * i1 )))) \\l i2:{:\\nres0 = int(4.0) \\le min(len(in2), mod(divInt(i1,int(7.0)),int(2.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 2], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 3, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in0),divInt(len(in0),( ( int(4.0) + i0 ) + int(6.0) ))) + int(3.0) ):{:\\nres0 = i1 == divInt(int(8.0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 17, 6, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(abs(( ( i2 + int(3.0) ) + int(7.0) )),min(int(9.0), divInt(int(5.0),i2)))) + int(5.0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [0, 1], [0, 4, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 2, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 5, 1, 19, 6, 3, 3, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l mod(( max(len(in1), mod(i1,i0)) * mod(( mod(int(9.0),int(8.0)) - int(9.0) ),int(5.0)) ),len(in2)):{:\\nb0 = i2 \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [2, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(s1) \\le divInt(divInt(len(in2),divInt(len(in0),( ( i2 + int(3.0) ) + int(7.0) ))),i0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [2], [2, 2], [], [0, 0], [], [], [3], [0, 4], [0, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [4, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 0, 3, 2, 0, 0, 0, 2, 2, 1, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 4, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 5, 1, 9, 2, 2, 2, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\le max(mod(i1,len(in1)), ( i0 * i2 )):{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 3, 3, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(getCharFromString(in2, divInt(len((in0 + (s2[( ( i0 + int(4.0) ) + int(6.0) ):][:int(9.0)] + in1))[i2:]),divInt(int(8.0),i2)))),int(7.0)) + i0 )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 1, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 1, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),int(26.0)), min(i1, ( i0 * i1 )))) \\l i2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le divInt(divInt(len(in2),divInt(len(in0),( ( i0 + int(4.0) ) * int(6.0) ))),int(9.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 0, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 7, 1, 3, 0, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le min(i0, divInt(len(in2),i2))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [2, 2, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [2, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(1.0)) == abs(i0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 0, 1, 1], [4, 6, 8, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 3, 1, 0, 1, 0, 2, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 0, 17, 5, 4, 4, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(divInt(( len(s0) + ( len(in2) + ( ( i0 + int(4.0) ) * int(6.0) ) ) ),int(8.0))) \\l i2:{:\\nres0 = min(int(87.0), i0) \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [0], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [8, 2, 4, 7, 2, 8, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 0, 0, 1, 2, 1, 3, 3, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 0, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 6, 0, 17, 3, 7, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(82.0))) \\l mod(len(in2),len(in0)):{:\\nb0 = i1 \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [3, 6, 9, 1, 8, 5, 5], [1, 2, 1, 2, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 2, 2, 0, 1, 3, 3, 3, 1, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 4], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 21, 4, 9, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( mod(divInt(i2,int(36.0)),len(in2)) * min(max(int(9.0), i1), int(1.0)) )), int(8.0))), i2)) \\g saveOrd(in0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 2, 6, 5], [1, 0, 1, 2, 2, 1], [1], [3, 3, 2, 3, 3, 3, 1, 2, 1, 0, 0, 3, 3, 3, 1, 2, 0, 0, 1, 1, 2, 1, 1], [1, 0, 1, 1], [2, 0, 3, 0, 2, 3, 3, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 3, 8, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(min(divInt(len(in1),min(abs(int(22.0)), ( int(9.0) - i1 ))), i0)) \\l len(in2):{:\\nres0 = len(in0) \\le max(int(7.0), mod(i1,i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 247}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 1, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [3, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 0, 0], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 3, 1, 15, 5, 2, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l len(in1):{:\\nres0 = divInt(int(9.0),len(in2)) \\le ( i1 * i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= divInt(divInt(( int(8.0) + int(9.0) ),int(5.0)),int(5.0))\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 467}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 1, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 4, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 32, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 4, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in1),divInt(len(in0),( min(i0, int(4.0)) + int(8.0) ))) + int(2.0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 321}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 3, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( len(in2) + len(in0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 566}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(i2,( divInt(i2,int(3.0)) + int(7.0) ))) + len(in0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 566}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( mod(len(in2),i0) + len(in0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 566}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 7, 9, 5, 5, 7, 1], [2, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(int(2.0),( ( i2 + int(7.0) ) + int(9.0) ))) + len(in0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 566}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 2, 3, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),i0) + len(in0) )\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 566}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 4, 4, 7, 2, 8, 5, 3], [1, 1, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 2, 2, 0, 1, 1, 0, 3, 3, 3, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [2, 2], [1, 1, 0], [4, 5, 3, 4, 4, 5], [], [], [0, 0, 0, 4, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 4, 0, 19, 4, 7, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(( len(in1) * min(min(i1, mod(i1,i1)), int(24.0)) ), int(4.0))) \\l len(in2):{:\\nres0 = len(in0) \\le mod(( i0 * int(7.0) ),int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 3, 3, 5, 5], [0, 0, 2, 2, 1, 1], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 2, 1, 3, 1, 1, 1], [1, 0, 1, 1, 0], [2, 1, 3, 0, 0, 3, 3, 2, 1], [2, 0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 5, 0, 22, 5, 8, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(mod(( len(in1) * min(i0, mod(i0,i2)) ),i2), int(26.0))) \\l min(len(in2), len(in0)):{:\\nres0 = divInt(i1,( int(9.0) + abs(int(3.0)) )) \\le int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], "other_info": {}, "test_fitness": 486}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 6, 7, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 0, 3, 2, 0, 1, 2, 0, 3, 1, 1], [1, 0, 1], [3, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 4, 0, 14, 2, 6, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l max(divInt(len(in2),min(min(int(26.0), ( i1 * i0 )), i1)), int(7.0)):{:\\nres0 = len(in0) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 2, 2, 1, 0, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( ( len(in2) - divInt(( ( mod(int(3.0),i2) + int(0.0) ) + len(in0) ),int(2.0)) ) * ( int(8.0) - i2 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 447}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 1, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 0, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( mod(len(in2),divInt(len(in0),i0)) + ( int(4.0) + int(7.0) ) )\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], "other_info": {}, "test_fitness": 414}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 0, 0], [1], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [1, 1, 0, 1, 1, 1, 1], [1, 6, 3, 2, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 34, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 5, 5, 3, 1, 15, 4, 5, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(1.0) \\le abs(mod(len(in1),( len(in2) - divInt(mod(i2,int(6.0)),int(32.0)) ))):{:\\nres0 = i1 \\l abs(len(in2))\\n:}else:{:\\ni2 += int(4.0)\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 502}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 2, 9, 7, 2, 6, 5, 6, 2, 1, 2, 2], [1, 0, 1, 2, 2, 1, 0, 1], [1], [3, 3, 2, 3, 3, 3, 1, 2, 1, 0, 0, 3, 3, 3, 1, 2, 0, 1, 1, 1, 2, 1, 1, 0, 2, 3, 3, 1, 2, 3, 3, 0, 1, 0, 0, 0, 3], [1, 0, 1, 1, 0, 1], [2, 0, 3, 0, 2, 3, 3, 1, 1, 1, 1, 4, 4], [1, 0], [0, 1, 0, 1], [4, 5, 3, 2, 4, 5, 0], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1, 1, 1, 1], [], [], [], [], []], "fitness": 34, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 12, 12, 8, 0, 37, 6, 13, 2, 4, 7, 0, 0, 15, 0, 0, 6, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(min(divInt(len(in1),min(abs(int(22.0)), ( int(9.0) - i1 ))), i0)) \\l len(in2[len((in0 + (s2[:max(int(7.0), mod(i1,int(2.0)))][:int(6.0)] + in1))[:int(5.0)]):divInt(int(6.0),int(2.0))]):{:\\nres0 = i2 \\le ( max(max(int(12.0), mod(max(saveOrd(in2[:i2][:int(2.0)]), i1),i0)), i1) + saveOrd(s0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 316}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 0], [2], [0, 1], [], [0, 0, 0], [], [], [3, 2, 2], [4, 3], [2, 1, 0], [0, 0], [2], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 6, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1], [1, 3, 2, 3, 2, 3, 2, 3, 1, 1, 1, 0, 3, 0, 1, 0, 2, 2, 0, 0, 0, 3, 1, 1, 0], [1, 1, 1, 1, 1], [2, 3, 4, 3, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [0, 1, 1, 0, 0], [3, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 0, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [3], [0, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 34, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 0, 0, 10, 3, 4, 0, 3, 5, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in0 == in2:{:\\nres0 = int(16.0) \\le abs(divInt(len(in2),mod(saveOrd(getCharFromString(s1, mod(len(in1),int(9.0)))),int(8.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 386}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 6, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 0, 18, 4, 5, 1, 3, 6, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[min(mod(mod(int(9.0),int(8.0)),int(6.0)), int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 337}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 3, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 5, 1, 21, 5, 5, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(mod(( min(int(9.0), int(8.0)) - int(9.0) ),min(i2, i1)),int(5.0)):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(6.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 337}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [1], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [3, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 2, 3, 2, 1, 0, 0, 0, 1, 12, 12, 3, 0, 20, 5, 4, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\l max(mod(len(in0),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):min(i2, int(5.0))]\\n:}\\nb1 = int(6.0) \\le int(2174.0)\\n", "test_case_results": [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "other_info": {}, "test_fitness": 405}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 0], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(divInt(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 337}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 0], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(divInt(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 337}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 2, 0], [2, 2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [3], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 1, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 3, 2, 0, 1, 1, 1, 1, 3, 0, 0, 2, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [0, 1, 1, 0, 0, 2, 0], [0, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 35, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 8, 8, 6, 1, 21, 4, 5, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(divInt(len(in1),len(in2)), ( i1 + i0 )):{:\\nres0 = in2 != s0[min(mod(i2,int(9.0)), int(1.0)):int(9.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(5.0) \\le min(i1, i2):{:\\ni1 -= mod(int(5.0),int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 337}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 1, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [0, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 36, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 1, 15, 4, 4, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(divInt(len(in1),( len(in2) - divInt(mod(i2,int(3.0)),int(8.0)) ))):{:\\nres0 = i1 \\l abs(int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 340}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 2, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 36, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 0, 22, 6, 5, 2, 4, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(len(in1), mod(len(in2),min(( i1 * i0 ), mod(mod(( mod(int(10.0),int(9.0)) - int(8.0) ),min(i2, i1)),int(9.0))))) \\l int(5.0):{:\\nres0 = in2 not in s0[int(5.0):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [2, 1], [0], [0, 2], [0], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 2, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1, 1], [2, 2, 3, 0, 0, 3, 0, 2, 1], [2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 36, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 12, 3, 4, 1, 2, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = abs(abs(divInt(len(in0),min(( i1 * mod(i0,i1) ), i2)))) \\l int(22.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 298}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 4, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 2, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 5, 1, 21, 5, 4, 3, 3, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(12.0) \\l max(mod(len(in1),len(in2[( i1 * i1 ):mod(mod(( int(4.0) - int(8.0) ),int(9.0)),int(5.0))])), min(i2, i1)):{:\\nres0 = in2[int(5.0):int(6.0)] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(2174.0)\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 488}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [0], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 1, 15, 5, 3, 3, 3, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(10.0) \\l max(mod(len(in2),len(s0)), ( i1 * i0 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= mod(mod(( int(9.0) + int(8.0) ),int(9.0)),int(5.0))\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 537}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 2, 2, 0, 0, 0, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 0, 3, 0, 0, 4, 3, 2, 1], [2, 1, 2, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [0], [0, 0, 1, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 1, 17, 5, 3, 3, 3, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(10.0) \\l max(mod(min(( mod(i1,i0) * i2 ), mod(( int(9.0) - int(8.0) ),int(9.0))),int(5.0)), len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= i2\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 537}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 2, 0, 1, 2, 3, 3, 3, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 4, 3, 0, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 19, 4, 8, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(saveOrd(in2), i1)), ( i2 * mod(i1,int(29.0)) ))) \\l divInt(len(in0),min(max(i2, int(9.0)), int(7.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 362}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 2, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 4, 1, 19, 6, 3, 3, 4, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(( len(in1) * mod(i1,i0) ),mod(( mod(int(9.0),int(8.0)) - int(9.0) ),int(5.0))), len(in2)):{:\\nres0 = in2 not in s0[i2:int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(6.0)\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 537}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [2, 1, 0], [0, 0], [0], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 3, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0, 1], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 37, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 7, 1, 20, 4, 6, 2, 3, 7, 1, 0, 16, 2, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 in in2:{:\\nres0 = int(16.0) \\le abs(mod(len(in2),( len(getCharFromString(s1.rstrip((in1[divInt(abs(i2),int(38.0)):int(4.0)][i1:] + in2)), len(s2[:len(\"\"F\"\")][int(5.0):][:i2]))) - mod(i2,i2) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += i1\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 401}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 3, 3, 3, 2, 0, 0, 2, 2, 2, 1, 0, 1, 1, 3, 0, 0, 1, 1, 0, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 5, 5, 5], [], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 1, 15, 4, 4, 2, 3, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(10.0) \\l max(len(in2), len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= min(mod(i0,i2), ( mod(mod(int(9.0),i1),int(8.0)) - int(9.0) ))\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 537}, {"genotype": [[0], [0, 1, 1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 2, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 1, 19, 6, 4, 3, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(divInt(len(in1),len(in2)), ( i1 * i0 ))\\ni2 -= mod(mod(( mod(int(9.0),int(8.0)) + int(9.0) ),min(i1, i2)),int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 347}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [2], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 1, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 2, 0, 0, 4, 3, 2, 1], [2, 1, 2, 0, 0, 2, 0], [1, 1, 1, 1, 1], [5, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 37, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 4, 1, 18, 5, 4, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in2),abs(( i1 * i0 ))), mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0))):{:\\nres0 = in2 == in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= min(int(5.0), i1)\\n", "test_case_results": [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 537}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [2, 5], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 2, 2, 8, 9, 6], [0, 2, 0, 2, 1, 0, 1], [1], [1, 3, 2, 2, 3, 3, 3, 0, 3, 0, 2, 1, 0, 1, 2, 3, 1, 0, 1, 0, 1, 3, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0], [1, 3, 1, 1, 2, 3, 1, 4, 2], [2, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1, 1], [4, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 2, 2], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 17, 4, 6, 0, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(0.0) == max(divInt(mod(len(in1),max(max(i0, abs(i2)), mod(int(0.0),i0))),int(0.0)), mod(len(in2),int(2.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 323}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [], [0], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1], [4, 8, 7, 8, 7, 7, 1, 6, 1, 2, 0, 3, 6], [1, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1, 0, 1, 0, 3, 2, 0, 2, 0, 2, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [3, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0, 1], [3, 5, 3, 2, 4, 5], [1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 0, 1], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 11, 0, 33, 11, 4, 7, 4, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in0) \\le ( divInt(len(in2[divInt(len((in0 + (s2[:( divInt(i1,int(4.0)) + int(8.0) )][int(7.0):i2] + in1))[( ( i0 + int(8.0) ) + i0 ):( i2 + int(7.0) )]),i0):int(716120.0)]),i2) - min(( i0 * ( i0 + mod(i0,int(36.0)) ) ), i0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1], "other_info": {}, "test_fitness": 353}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 3, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [0, 1, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 0, 3, 0, 3, 2, 4, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 5, 0, 19, 4, 7, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(( divInt(len(in1),min(i1, mod(i1,i1))) * i2 ), int(22.0))) \\l min(len(in2), len(in0)):{:\\nres0 = divInt(i1,int(4.0)) \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], "other_info": {}, "test_fitness": 526}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 3, 3, 2, 0, 1, 3, 0, 1, 1, 1, 3, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 3], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 39, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 6, 0, 25, 4, 10, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 - i1 )), i0)), mod(len(in2),min(max(divInt(i1,int(26.0)), max(i0, int(9.0))), int(7.0))))) \\l int(3.0):{:\\nres0 = len(in0) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 323}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [8, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 2, 0, 0, 2, 1, 1, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 39, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 2, 0, 14, 3, 4, 1, 2, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(len(in1), mod(len(in2),min(( i1 * i0 ), mod(int(80.0),int(9.0))))) \\l int(8.0):{:\\nres0 = in2 not in s0[int(9.0):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 345}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [0], [0, 1, 1], [0], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 4, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 3, 5, 1, 4, 5, 2, 1], [1], [0], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 39, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 1, 12, 4, 3, 2, 3, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in0:{:\\nres0 = int(16.0) \\le abs(mod(len(in2),( saveOrd(s1) - divInt(mod(i2,int(38.0)),int(4.0)) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += i2\\n", "test_case_results": [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "other_info": {}, "test_fitness": 478}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 39, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 2, 3, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( ( len(in2) + int(4.0) ) + len(in0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 597}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [2, 2, 1, 2], [0, 0, 0], [1, 0], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 1, 3, 2, 0, 0, 2, 2, 2, 3, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5, 1], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 39, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 8, 8, 5, 1, 20, 5, 4, 3, 3, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in in2:{:\\nres0 = in2 in s0[int(10.0):max(mod(int(9.0),len(in2)), ( i1 * i0 ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= mod(mod(( len((in2[:int(8.0)][int(9.0):int(5.0)] + s1)) + min(i1, i2) ),int(5.0)),int(6.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 329}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 1, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 1, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 3, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 4, 5, 3, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 39, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 4, 5, 1, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(int(9.0), len(in1)):{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = len(in0[mod(i1,i2):( mod(mod(int(8.0),int(9.0)),int(5.0)) * min(min(i1, i2), int(5.0)) )])\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 481}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 1], [0, 0], [2], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 0, 2, 0, 1], [1], [3, 1, 3, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 0, 0, 1, 1], [1, 2, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 40, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1 == in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 418}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [3, 4], [2, 1], [0, 0], [2], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [1], [3, 3, 2, 3, 2, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 4, 0, 1, 1], [0, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 40, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1 == in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 418}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 2, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 0, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 2, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 1, 15, 4, 3, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(i1, len(in1)):{:\\nres0 = in2 not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= len(s0[mod(i2,i1):( mod(mod(int(9.0),int(8.0)),int(2.0)) - int(5.0) )])\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 551}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 3, 3, 4, 0, 4, 3, 2, 1], [2, 0, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 1, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 6, 6, 4, 1, 17, 5, 4, 2, 4, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\l max(mod(len(in1),len(s1)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(mod(mod(int(9.0),int(8.0)),int(9.0)),int(5.0)):saveOrd(in2)]\\n:}\\ni2 += i1\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 551}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 7, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 1, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 2, 5, 4, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 1, 15, 4, 3, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(s2)), int(9.0)):{:\\nres0 = in2 not in in1[i1:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= ( mod(mod(int(8.0),int(9.0)),int(5.0)) - int(7.0) )\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 551}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 6, 5], [1, 0, 1, 2, 2, 1], [1], [3, 3, 2, 3, 3, 1, 1, 2, 1, 0, 0, 1, 3, 3, 1, 3, 0, 1, 1, 1, 2, 1, 1], [1, 0, 1, 1], [2, 0, 1, 0, 2, 3, 3, 1, 1], [1], [0, 1, 0], [4, 5, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 2, 0, 16, 2, 7, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(min(divInt(max(min(int(22.0), int(9.0)), ( int(7.0) - i1 )),i0), int(5.0))) \\l abs(len(in1)):{:\\nres0 = int(6.0) \\le len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 528}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 2, 0, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 0, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 0, 18, 5, 4, 3, 2, 6, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(s0)), ( i1 * mod(i0,( ( int(9.0) - int(8.0) ) + int(9.0) )) )):{:\\nres0 = in2 not in s0[int(5.0):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = in2\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 551}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 0, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 0, 0, 5, 5], [], [], [0, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 41, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 4, 1, 17, 5, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),min(( i1 * i0 ), mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)))), int(5.0)):{:\\nres0 = in2 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += i1\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 551}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [2], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 3, 3, 2, 3, 2, 2, 3, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 == in2\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [5], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0.endswith(in2)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [0, 1, 1, 1], [0, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [1, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 4, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 2, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 1, 15, 6, 2, 3, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(14.0) \\g mod(( saveOrd(in1) * len(in2) ),mod(i1,i0))\\ni2 -= mod(( mod(int(9.0),int(8.0)) + int(9.0) ),int(5.0))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1], [2, 9, 9, 7, 3, 5, 5, 7, 9, 1, 6, 7, 8, 5, 2], [1, 2, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 1, 1, 1, 0], [1, 0, 1, 1], [1, 1, 3, 0, 0, 3, 0, 1, 1, 0], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 15, 15, 6, 0, 31, 4, 10, 1, 3, 6, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(mod(len(in1),min(min(i1, ( i2 + i1 )), i0)), int(2.0)), len(in2)) \\l min(max(mod(i1,int(9.0)), int(9.0)), int(7.0)):{:\\nres0 = in0 != (s2 + (in1[:int(3.0)][int(5.0):int(5.0)] + in2))[int(791.0):divInt(max(min(int(67.0), int(8.0)), int(52.0)),i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 340}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 4, 8, 9, 6], [0, 0, 0, 2, 1, 0, 1], [1], [1, 3, 2, 2, 3, 3, 3, 2, 3, 0, 2, 1, 0, 1, 2, 3, 1, 0, 1, 0, 1, 2, 1, 0], [1, 1, 1, 1, 1, 1, 0, 0], [1, 3, 3, 1, 2, 3, 1, 4, 2], [1, 2, 1, 0], [0, 1, 1, 1, 1, 1], [4, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1, 2], [], [], [], [], []], "fitness": 42, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 5, 0, 24, 6, 6, 0, 6, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(00.0) \\l max(divInt(mod(len(in1),len(in2)),max(mod(abs(i0),mod(int(0.0),i0)), int(1.0))), mod(len((s1 + (in2[int(4.0):][:i0] + s1))[:int(8.0)][i2:int(9.0)]),mod(int(6.0),i1)))\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 514}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [4, 4, 4], [1, 2, 1, 2], [0, 0, 0], [4], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 4, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 0, 2, 0, 1, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 3, 1, 15, 5, 2, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\le max(mod(len(in1),i1), ( i0 * int(9.0) )):{:\\nres0 = in2.startswith(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= divInt(mod(( int(8.0) + int(9.0) ),int(4.0)),int(5.0))\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 566}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [3], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 0, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [2, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 6, 1, 18, 4, 4, 2, 2, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1[len(in2):]),i1), i0):{:\\nres0 = in2[i2:( mod(( int(9.0) * int(8.0) ),int(9.0)) - int(5.0) )] != s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = min(i2, i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "other_info": {}, "test_fitness": 465}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [2, 8, 9, 7, 3, 5, 5, 1, 1, 7, 8, 8, 6, 1, 0, 0, 7, 4, 4, 6, 3, 2, 6], [1, 0, 1, 0, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1, 1, 2, 1, 3, 1, 0, 1], [1, 0, 0, 0], [3, 1, 3, 0, 0, 3, 0, 1, 1, 1], [2, 0, 1], [0, 1, 0], [4, 5, 4, 2, 4, 5, 1], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 2], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 23, 23, 7, 0, 30, 4, 10, 3, 1, 7, 0, 0, 11, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l max(divInt(len(in2),min(min(i1, ( i0 * i1 )), i0)), int(28.0)):{:\\nres0 = len(in1) \\le min(max(( i1 + int(9.0) ), int(7.0)), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = (in1 + (in2[max(int(3.0), int(5.0)):][:int(5.0)] + s1))[( int(11.0) - max(int(78861007446.0), i0) ):int(326.0)]\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 2, 0, 2, 8, 5, 8, 5, 3, 7, 4, 9], [2, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 2, 0], [1], [1, 3, 2, 2, 3, 3, 3, 2, 2, 0, 2, 1, 3, 0, 2, 0, 0, 0, 3, 0, 1, 2, 1, 0, 1, 2, 3, 1, 3, 2, 3, 3, 2, 0, 2, 0, 0, 1, 0, 1, 3, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 2, 3, 0, 1, 3, 1, 4, 2, 2, 2], [1, 2, 1, 0], [0, 1, 1, 0, 1, 1], [4, 5, 3, 2, 4, 5, 5], [], [], [0, 0, 2, 2, 3, 0, 2, 2, 2, 0, 0, 3, 2, 4, 2, 2, 2, 0, 0], [0, 3, 2], [4], [1, 1, 1, 0, 2, 0, 2, 0], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 0, 21, 6, 6, 0, 6, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(divInt(mod(abs(len(in1)),min(mod(divInt(i2,mod(int(2.0),max(i2, mod(i1,i0)))),i1), len(in2))),i0), int(0.0))\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 561}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [2, 2, 1, 2], [0, 0, 0], [1, 3], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 8, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 0, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 3, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 6, 6, 4, 1, 15, 5, 2, 3, 3, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in in2:{:\\nres0 = in2 != s0[int(10.0):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= mod(max(len(in2), ( i2 - i1 )),mod(mod(( int(9.0) + int(8.0) ),int(8.0)),int(5.0)))\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [2, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 2, 1, 3, 2, 1, 1, 1], [0, 0, 1, 1], [2, 3, 3, 0, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 1, 5, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(len(in1)) == ( len(in2) * min(min(i1, i1), i1) ):{:\\nres0 = i2 \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [3, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 6, 0, 23, 4, 8, 1, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(32.0))) \\le len(in0):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le divInt(int(5.0),int(5.0))\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [0, 1, 1, 1], [1, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 1, 1, 2], [0, 0, 0], [0], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 3, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 2, 5, 0, 5, 5], [], [], [0, 0, 0, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 1, 15, 5, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(mod(len(in1),len(s2)), ( i1 * i0 ))\\ni2 -= mod(mod(( int(9.0) + int(8.0) ),int(9.0)),int(5.0))\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 561}, {"genotype": [[0], [1, 1, 1, 1], [1, 1], [2], [0, 1, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [4, 5, 5, 0, 5, 5, 3], [], [], [0, 0, 0, 2, 3, 0, 4, 2, 2, 0, 1], [0, 3, 2], [4], [2, 1, 1], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\le ( ( len(in2) + divInt(len(in2),( ( i0 + int(4.0) ) + int(6.0) )) ) * int(9.0) )\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 570}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 1, 5, 5], [1, 0, 1, 2, 1, 1, 1, 2, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 2, 0, 0, 1, 2, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1, 2, 0, 2, 0, 3, 0, 2, 3, 0, 3, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0], [2, 1, 3, 0, 0, 4, 0, 0, 1, 1, 4], [2, 1, 0, 0], [0, 1, 0, 1], [4, 2, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 11, 0, 35, 8, 11, 4, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( mod(i0,i1) * int(26.0) )), ( saveOrd(s2) - min(( i2 + int(9.0) ), int(7.0)) ))), i1)) \\l min(int(1.0), int(5.0)):{:\\nres0 = divInt(i1,mod(i1,max(i2, ( max(i0, saveOrd(in0)) + i1 )))) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 1, 1, 2, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1, 0], [1, 0, 1], [3, 1, 3, 0, 0, 0, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 7, 0, 24, 3, 9, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l max(divInt(len(in2),min(min(i1, ( i0 * i1 )), i1)), int(26.0)):{:\\nres0 = min(min(max(mod(i1,int(9.0)), int(7.0)), i2), max(int(3.0), int(5.0))) \\le i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 399}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 0], [2], [0, 1], [], [0, 0, 0], [], [], [3, 2, 2], [4, 3], [2, 1, 0], [0, 0], [1], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 8, 3, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1], [1, 3, 2, 3, 2, 3, 2, 2, 1, 1, 1, 0, 3, 0, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 1, 1, 1, 0], [2, 2, 3, 3, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 1, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 4, 0, 2, 2, 2, 0], [0, 3, 2], [3], [2, 0, 1, 0, 1, 1], [0], [5], [], [], []], "fitness": 43, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 1, 0, 12, 4, 3, 0, 4, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in in2:{:\\nres0 = int(1.0) \\le abs(mod(abs(mod(len(in2),mod(divInt(int(6.0),int(9.0)),int(8.0)))),i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [3, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 2, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 3, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 2, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 4, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 44, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 0, 19, 5, 5, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(12.0) \\ge max(mod(len(in1),abs(( i1 * i0 ))), mod(mod(( int(9.0) - int(8.0) ),int(9.0)),min(min(i2, i0), int(5.0)))):{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], "other_info": {}, "test_fitness": 427}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [1, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [2, 1, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 45, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 1, 15, 4, 5, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(16.0) \\le abs(mod(len(in1),( len(in2) * divInt(mod(i1,int(38.0)),int(4.0)) ))):{:\\nres0 = i1 \\l abs(len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(5.0)\\n", "test_case_results": [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 523}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 2, 1, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 45, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),( divInt(i0,int(4.0)) + int(6.0) ))) * int(9.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 533}, {"genotype": [[0], [0, 1, 1, 1], [0, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 2, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 1, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [0, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 2, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 4, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 45, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 1, 12, 4, 2, 2, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(16.0) \\le abs(mod(len(in1),( int(38.0) + divInt(mod(i2,int(4.0)),int(5.0)) )))\\ni2 += i2\\n", "test_case_results": [1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 409}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 1, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 45, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 1, 6, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(int(1.0), max(min(min(i1, ( i0 + i2 )), i2), int(6.0)))) \\l len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 587}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [0], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 2, 0, 0, 2, 8, 5, 5, 5, 4, 0], [1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 0], [1], [1, 3, 2, 2, 3, 2, 3, 2, 3, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0, 3, 1, 2, 2, 0, 3, 1, 2, 0, 3, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [1, 3, 3, 1, 1, 3, 1, 4, 2], [0, 2, 1, 0], [1, 1, 1, 1, 1, 1, 0], [4, 5, 1, 5, 1, 5], [], [], [0, 4, 2, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 1, 1, 0], [], [], [], [], []], "fitness": 45, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 12, 0, 37, 10, 7, 3, 7, 5, 0, 0, 12, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(12.0) \\l max(( mod(len(in1),mod(len(getCharFromString((in2 + (s1[mod(max(i1, mod(int(0.0),i1)),i1):mod(i2,i1)][:i0] + in2))[:int(0.0)][i1:int(2.0)], ( int(8.0) + i1 ))),max(int(5.0), ( mod(i1,len(s1)) * int(5.0) )))) - divInt(i1,max(int(540.0), i1)) ), i0)\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 545}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 2, 2, 3, 3, 2, 0, 0, 2, 2, 2, 2, 3, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 0, 22, 7, 4, 4, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l ( ( max(len(in1), mod(i1,i0)) * mod(( mod(( len(in2) - int(9.0) ),int(8.0)) + min(i2, i1) ),int(9.0)) ) + int(5.0) ):{:\\nres0 = in2 not in s0[int(5.0):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 601}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [1, 3, 2, 3, 3, 3, 0, 2, 0, 1, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 46, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(26.0) \\l abs(divInt(max(len(in1), min(i1, ( i0 * int(9.0) ))),i1))\\n", "test_case_results": [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 487}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 7, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 0, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 0, 0, 0], [4, 0, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 46, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 3, 1, 15, 4, 5, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(17.0) \\le abs(mod(len(in1),( len(s0) - ( divInt(i2,int(38.0)) + int(4.0) ) ))):{:\\nres0 = i1 \\l abs(len(in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 519}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 7, 7, 0, 5, 5], [1, 0, 1, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 1, 3, 1, 3, 1, 0, 0, 1, 0, 0, 2, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [1], [0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 47, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 4, 0, 17, 2, 8, 1, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 - len(in2) )), i1)), int(22.0))) \\l len(in0):{:\\nres0 = int(7.0) \\le max(int(7.0), i1)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 572}, {"genotype": [[0], [0, 1, 1, 1], [0, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 7, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 0, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 0, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 47, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 1, 9, 2, 3, 3, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\l max(( len(in1) * len(in2) ), ( i2 - i0 ))\\ni0 += i1\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 637}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 0], [0, 0], [], [], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 7, 7, 3, 5, 5], [1, 0, 0, 2, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 0, 0, 1, 2, 0, 2, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 47, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(in1),min(min(i1, ( i0 * i0 )), i2)), int(22.0))) \\l len(in0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 572}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 7, 7, 0, 5, 5], [1, 0, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 3, 0, 0, 1, 3, 3, 2, 1, 0, 0, 1, 0, 0, 2, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 47, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 5, 0, 19, 3, 8, 1, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( len(in2) - i0 )), i1)), int(22.0))) \\l len(in0):{:\\nres0 = max(mod(int(7.0),i0), i1) \\le int(7.0)\\n:}\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 572}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 1, 2, 2, 1, 0, 1, 1], [2, 1, 1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 0, 4], [2, 1, 1, 2], [0, 0, 0], [5], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 5, 5, 3, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 4, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 2], [0, 1, 0, 0, 0], [1, 3, 2, 3, 3, 1, 1, 0, 2, 2, 2, 1, 1, 3, 1, 2, 3, 0, 1, 1, 1, 0, 0, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 3, 1, 3, 1, 1, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0], [1, 1, 3, 0, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 4, 2, 5, 5], [], [], [0, 0, 0, 4, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 48, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1.endswith(in2)\\ni1 = int(10.0)\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 430}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [0], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 0, 0, 2, 8, 5], [0, 1, 1, 2, 1, 0, 1], [0, 1], [1, 3, 2, 2, 3, 0, 3, 2, 3, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0], [0, 1, 1, 1, 1, 0, 0, 0], [3, 3, 3, 1, 1, 3, 1, 4, 2], [2, 2, 1, 0], [1, 1, 1, 1, 1, 1], [4, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 48, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\l len(in1)\\n", "test_case_results": [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 529}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [0], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 0, 0, 2, 8, 5], [0, 1, 1, 0, 1, 0, 1], [1], [1, 3, 2, 2, 3, 2, 3, 2, 3, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0], [0, 1, 1, 1, 1, 1, 0, 0], [1, 3, 3, 1, 1, 3, 1, 4, 2], [1, 2, 1, 0], [1, 1, 1, 1, 1, 1], [4, 2, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 48, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 6, 0, 18, 6, 4, 1, 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) \\l max(( mod(len(in1),mod(len(s2),mod(max(i0, mod(int(0.0),i1)),i1))) - mod(i0,i1) ), i0)\\n", "test_case_results": [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 529}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 3, 9, 7, 3, 5, 5], [1, 2, 1, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0], [2, 1, 3, 0, 1, 3, 0, 1, 1], [2, 0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 48, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 0, 21, 5, 7, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(max(i1, ( i2 * i1 )), i0)), mod(divInt(len(in2),min(( i1 + int(23.0) ), int(9.0))),int(7.0)))) \\l int(3.0)\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 353}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 3, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 49, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 4, 5, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(len(in1), len(in2)):{:\\nres0 = in2 not in s0[min(mod(i1,i0), ( mod(mod(int(9.0),int(8.0)),int(9.0)) - int(5.0) )):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(5.0)\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 631}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2, 2, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [2, 1], [1, 1, 0, 1, 1], [4, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 50, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 7, 0, 27, 7, 9, 2, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(min(i1, ( i0 * i1 )), i2)), mod(len(in0),len(in0)))) \\l max(max(i1, int(22.0)), divInt(i1,( int(9.0) - mod(mod(int(7.0),int(5.0)),i0) )))\\n", "test_case_results": [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 483}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5, 6], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 2, 2, 3, 1, 1, 3, 1, 1], [0, 0, 1, 1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4], [2, 1, 2], [0, 1, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 50, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 7, 7, 6, 0, 29, 6, 10, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(( len(in1) * min(min(i1, ( i0 - i1 )), i2) ), int(2.0))) \\l len(in2):{:\\nres0 = min(max(divInt(i1,int(2.0)), int(9.0)), i1) \\le mod(( divInt(max(int(7.0), int(5.0)),saveOrd(in0)) * int(5.0) ),int(5.0))\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 646}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3], [3, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 1, 2, 3, 3, 1, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2], [1, 0, 1, 1], [3, 1, 3, 0, 0, 3, 3, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 50, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in1) \\ge int(22.0)\\n", "test_case_results": [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], "other_info": {}, "test_fitness": 517}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 50, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(s0),min(min(i1, ( i2 + i1 )), i2)), int(2.0))) \\l len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 646}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 1, 1, 2, 1, 1], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2], [1, 1, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 50, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(2.0)) \\l mod(max(len(in2), min(i1, ( i1 * i1 ))),i2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 646}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [0, 6, 9, 7, 3, 5, 5], [1, 0, 0, 0, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 1, 0, 0, 3, 0, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 6, 0, 23, 3, 8, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(max(min(min(i1, ( i0 - i0 )), i0), int(06.0)),len(in1)), min(max(mod(i1,int(9.0)), int(7.0)), i1))) \\l int(3.0):{:\\nres0 = int(5.0) \\le int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 623}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [0], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [5], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 3, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 3, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [0], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 1, 15, 4, 4, 2, 3, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(1.0) \\l max(len(in2), len(s0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= min(mod(i0,i2), ( mod(mod(int(0.0),int(9.0)),int(3.0)) - int(9.0) ))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 659}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2, 1, 2, 2, 2], [0, 1], [2, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 0, 3, 1, 0, 2, 0, 1, 2, 1, 3, 2, 3, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [4, 1, 3, 0, 0], [1, 0, 0, 0, 1, 2, 0, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 6, 6, 9, 0, 30, 10, 5, 8, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( divInt(divInt(saveOrd(s1),( max(( ( i0 - int(4.0) ) + int(7.0) ), int(2.0)) + i2 )),( i0 + len(in2) )) - int(8.0) ) \\le i0 and ( i2 * int(7.0) ) \\le ( int(7.0) + min(( min(i1, i2) + i2 ), i2) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 659}, {"genotype": [[0], [0, 1, 1, 1], [0, 1], [2], [0, 2, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [2, 1], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 8, 9, 1, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 2, 1, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 1, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1 not in in2\\nin2 = s0\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 560}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 2], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 1, 7, 9, 5, 5], [1, 0, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 1, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(s0),min(min(i1, ( i0 + int(26.0) )), i0)), int(1.0))) \\l len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 659}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [2, 1, 0], [0, 0], [1], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 6, 3, 8, 4, 5, 5, 1, 4, 4, 7], [2, 1, 0, 2, 2, 0, 1, 1, 2], [1, 0], [0, 3, 2, 3, 2, 3, 2, 2, 0, 2, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1, 0], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 51, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 9, 1, 24, 6, 6, 3, 4, 8, 0, 0, 16, 2, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in in2:{:\\nres0 = i2 \\le abs(mod(len(in2),( len(getCharFromString(s1.rstrip((in1[divInt(mod(i1,divInt(int(16.0),i0)),abs(len(in2))):int(38.0)][i2:] + s2[:( i2 - i0 )][i1:][:i1])), len(s1))) + int(4.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 560}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2], [0, 0, 0], [1], [1], [], [0], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 7, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 3, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 1, 3, 1, 1, 1, 0, 1, 0, 7, 7, 4, 0, 20, 5, 5, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile True:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = int(17.0) \\l max(mod(len(in2),len(s0[( i1 * i0 ):mod(mod(( int(9.0) - int(8.0) ),min(int(9.0), min(i2, i1))),int(5.0))])), int(5.0))\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 560}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 1, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 51, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(int(26.0),len(in1)), min(i1, ( i0 + i1 )))) \\l int(9.0)\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 623}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 7, 7, 0, 5, 5], [1, 0, 1, 2, 1, 1, 2, 1, 2, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 3, 3, 3, 1, 0, 0, 1, 0, 0, 2, 1, 1, 0, 3, 0, 1], [1, 1, 1, 1], [2, 1, 3, 0, 0, 3, 3, 0, 1], [1], [0, 1, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 52, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 10, 0, 28, 4, 9, 0, 4, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, mod(i0,i1)), i2)), divInt(len(getCharFromString(in2, len((in0 + (s2[:min(int(22.0), i1)][:i1] + in1))[int(7.0):i2]))),i1))) \\l mod(int(7.0),int(0.0)):{:\\nres0 = i2 \\le max(i2, int(5.0))\\n:}\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 420}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 7, 7, 0, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 2, 2, 0, 0, 2, 1, 3, 3, 3, 1, 0, 0, 1, 0, 0, 2, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 52, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 6, 0, 21, 4, 8, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(( mod(i1,i0) - divInt(int(22.0),len(in2)) ), len(in0)), max(int(7.0), i1))), i2)) \\l int(7.0):{:\\nres0 = i1 \\le i1\\n:}\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 420}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 0, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 53, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(min(( len(in1) + min(min(i1, divInt(i0,i2)), i2) ), int(1.0))) \\l len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 659}, {"genotype": [[0], [0, 1, 1, 1], [1, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 4, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 53, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 1, 15, 5, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(1.0) \\l max(mod(len(in1),saveOrd(in2)), ( i1 * i0 ))\\ni2 -= mod(mod(( int(0.0) + int(9.0) ),int(8.0)),int(9.0))\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 640}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 0, 0, 2, 0, 0, 2, 1, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1], [2, 1, 3, 0, 1, 3, 1, 1, 1], [2], [1, 1, 0, 1], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 54, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 19, 5, 6, 1, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in1),min(i1, i2)), ( i1 * i2 ))) \\l mod(int(29.0),divInt(max(len(in2), mod(i1,int(9.0))),int(7.0)))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], "other_info": {}, "test_fitness": 408}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 2, 2, 0, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 2, 1, 3, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 56, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 19, 3, 8, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i1, divInt(i2,i2)), mod(int(1.0),len(in2))) ), min(max(i0, i2), int(6.0)))) \\l int(9.0)\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 433}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [2, 2], [0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 2, 1, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [0, 2, 2], [], [], [], [], []], "fitness": 56, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 5, 0, 22, 3, 8, 1, 2, 6, 0, 0, 12, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1 not in getCharFromString(in2, abs(max(divInt(len((in0 + (s2[min(min(i1, ( i2 + i1 )), i1):][int(29.0):] + in1))[len(in2):min(max(mod(i1,int(9.0)), int(7.0)), int(3.0))]),int(5.0)), int(5.0))))\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 661}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 0, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 1, 3, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 56, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 6, 0, 19, 3, 7, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( min(min(min(i1, divInt(i0,i2)), i2), int(1.0)) + mod(len(in1),min(i1, i1)) ), int(6.0))) \\l int(9.0)\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 433}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 0, 2, 0, 1], [1], [3, 1, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [1, 1, 3, 1, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 56, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 12, 2, 4, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(int(1.0), ( max(len(in1), max(int(1.0), ( i0 - i2 ))) - i2 )) \\l int(9.0)\\n", "test_case_results": [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 433}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [5, 4], [1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [8, 9, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1], [2, 0, 3, 1, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 56, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(min(divInt(len(in1),max(min(i1, mod(i2,i1)), i2)), int(89.0))) != len(in2)\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 562}, {"genotype": [[0], [1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [3, 2, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 0, 18, 5, 4, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in0),len(s2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 743}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 2, 9, 7, 5, 5, 5, 6, 9, 3], [1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 2], [1], [2, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1, 1, 1, 3, 0, 2, 2, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 1], [2, 1, 3, 0, 4, 3, 0, 1, 1], [2], [0, 1, 1, 1, 0, 0], [4, 0, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 1, 0], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 10, 10, 11, 0, 33, 7, 8, 1, 6, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif divInt(abs(( max(len(in1[min(i1, mod(i2,i0)):i2]), int(22.0)) * saveOrd(s0) )),len((in0 + (s2[min(mod(i1,int(9.0)), int(7.0)):i1][:mod(int(5.0),int(5.0))] + in1))[int(5.0):])) \\le int(693.0):{:\\nres0 = max(i1, divInt(divInt(i0,i2),i0)) \\le i2\\n:}\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 685}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 6, 0, 17, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i1, divInt(i0,i2)), i2) ), int(1.0))) \\l mod(len(in0),min(i1, i1))\\n", "test_case_results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 654}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [0, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 1, 0, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i1 \\l abs(divInt(max(len(in1), min(i0, ( i1 * i2 ))),i1))\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [3, 1, 9, 7, 3, 5, 5], [0, 1, 2, 2, 2, 0, 1], [0, 1], [3, 0, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 2, 4, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(i0) \\l ( max(len(in1), max(i1, ( i2 - i2 ))) - i2 )\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [1, 4, 4], [1, 2, 1, 2], [0, 0, 0], [5], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 3, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 0, 2, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 4, 1, 14, 3, 4, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\g max(mod(len(in1),min(( i1 * i0 ), i2)), abs(mod(int(9.0),int(8.0)))):{:\\nres0 = in2.endswith(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= int(9.0)\\n", "test_case_results": [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], "other_info": {}, "test_fitness": 434}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [0, 3, 2, 3, 3, 3, 0, 2, 1, 0, 0, 1, 3, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i1 \\l abs(( max(len(in1), min(i0, divInt(int(1.0),i2))) + i2 ))\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1], [0, 1], [3, 0, 2, 3, 3, 3, 0, 2, 0, 2, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0], [2, 1, 3, 1, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 7, 0, 19, 4, 7, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(i0) \\l ( max(len(in1), max(i2, ( i2 - divInt(i2,int(1.0)) ))) - min(len(in2), min(( i2 + i0 ), i1)) )\\n", "test_case_results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 2, 8, 5, 6, 8, 9, 0, 9, 2, 3, 5], [2, 0, 0, 2, 1, 0, 1, 1, 1], [1], [1, 3, 2, 2, 3, 3, 2, 2, 2, 0, 2, 1, 0, 1, 2, 3, 0, 0, 3, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1, 1, 1, 2, 2, 1, 0, 3, 1, 2, 0, 3], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0], [1, 3, 3, 1, 1, 3, 1, 4, 2], [1, 2, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 0], [0, 3, 2], [4], [1, 0, 0, 1], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 15, 15, 9, 0, 40, 12, 8, 5, 7, 6, 0, 0, 12, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(divInt(mod(len(in1),len(in2)),divInt(divInt(divInt(i2,( int(0.0) - i0 )),int(0.0)),( max(i0, i2) * max(len((s1 + (in2[:int(2.0)][( int(8.0) - i1 ):int(5.0)] + s1))[i0:divInt(i1,int(6.0))][:int(8.0)]), int(90.0)) ))), mod(( int(92.0) + i1 ),max(int(35.0), ( i1 + saveOrd(in2) ))))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 586}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [1, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 6, 9, 8, 1, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 0, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [0, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 6, 6, 4, 1, 15, 4, 3, 2, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(16.0) \\g min(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[i2:mod(mod(int(9.0),int(8.0)),int(1.0))]\\n:}\\ni1 -= int(5.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1], [2, 1], [0], [0, 2], [0], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 5, 5, 5], [1, 0, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 3, 0, 0, 0, 3, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1], [1, 0, 1, 1], [2, 1, 0, 0, 0, 3, 0, 1, 1, 4], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 6, 0, 23, 3, 10, 1, 2, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = abs(max(divInt(min(min(min(i1, len(in0)), i0), i0),i2), min(max(max(saveOrd(s2), ( i1 * int(22.0) )), int(4.0)), i1))) \\l mod(int(7.0),int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [2, 6, 9, 7, 3, 5, 5, 9, 7, 6, 8, 6, 8], [1, 0, 1, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 2, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 0, 1, 1, 1, 1, 2, 3, 3, 1, 1, 1], [1, 0, 1, 1, 1], [1, 1, 3, 0, 1, 3, 0, 0, 1, 2], [2], [0, 1, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 13, 13, 5, 0, 29, 5, 10, 1, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(divInt(len(in1),min(max(( mod(i1,i0) * i1 ), int(26.0)), len(in2))), min(min(divInt(i2,int(9.0)), i1), int(7.0))), int(3.0)) \\l int(5.0):{:\\nres0 = int(5.0) \\le divInt(max(abs(int(9.0)), int(768.0)),int(68.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 615}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(saveOrd(in2),divInt(len(in0),( ( i0 + int(4.0) ) + int(6.0) ))) + int(9.0) )\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "other_info": {}, "test_fitness": 530}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 1, 0, 0, 0, 1, 0, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 2, 3, 0, 0, 2, 0, 1, 1], [2], [0, 1, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 12, 1, 5, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(abs(divInt(len(in2),min(min(i1, int(2.0)), i0)))) \\g i1:{:\\nres0 = i2 \\le int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 6, 9, 1, 3, 5, 5, 1, 2, 4], [1, 0, 1, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 0, 3, 1, 1, 1, 3, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 0, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 10, 10, 6, 0, 26, 3, 10, 1, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1[min(min(i1, ( i0 * i1 )), i2):int(76.0)]),len(in2)), min(min(mod(i1,int(9.0)), i1), max(int(1.0), int(3.0))))) \\l int(5.0):{:\\nres0 = abs(int(5.0)) \\le int(124.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 615}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [2, 2, 4, 7, 2, 8, 5, 3, 2, 6, 6, 6, 7, 2, 6, 2], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 3, 2, 3, 1, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 2, 0, 3, 2, 0, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 59, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 16, 16, 4, 0, 26, 4, 10, 1, 3, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i1 * i1 )), len(in2))), mod(len(in0),int(22.0)))) \\l saveOrd(s2[divInt(i2,int(4.0)):int(7.0)][int(2.0):max(abs(int(8.0)), int(5.0))]):{:\\nres0 = int(3.0) \\le int(26667262.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], "other_info": {}, "test_fitness": 530}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 59, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( ( len(in2) + divInt(len(in0),( ( i0 + int(4.0) ) - int(6.0) )) ) * int(9.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 677}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 1, 2, 3, 3, 0, 2, 0, 0, 2, 1, 3, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1], [2, 3, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 59, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(len(in1)) \\l int(29.0)\\n", "test_case_results": [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], "other_info": {}, "test_fitness": 522}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [4, 7, 9, 5, 5, 7, 1], [1, 2, 1, 2, 1, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 2, 1, 1, 3, 1, 1, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 3, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [], [], [], [], []], "fitness": 59, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 1, 0, 17, 5, 5, 4, 1, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( ( len(in2) + divInt(len(in0),( len(s2[( int(4.0) + int(7.0) ):min(int(9.0), int(5.0))][int(5.0):]) + i1 )) ) * int(7.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 674}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 3, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 1, 2, 1, 3, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 1, 1, 1, 0, 1], [2, 4, 3, 0, 0, 4, 3, 2, 1], [1, 1, 0, 0, 0, 2, 0], [0, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 2, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 60, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 5, 1, 20, 4, 5, 1, 4, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(divInt(saveOrd(in1),len(in2[mod(i1,i0):mod(int(6.0),mod(int(8.0),min(int(3.0), int(5.0))))]))):{:\\nres0 = in2[min(i2, i1):int(5.0)] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= int(6.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 60, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 7, 1, 3, 2, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(16.0)) \\le len(in0[i0:])\\ni2 += ( len(in2) - i1 )\\n", "test_case_results": [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 742}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 3, 3, 2, 3, 2, 2, 3, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0], [1, 3, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 60, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( len(in0) + len(in0) )\\n", "test_case_results": [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 742}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [2, 1], [0, 0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 3, 0, 0, 0, 1, 3, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 60, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1 != in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 582}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [2, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 60, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 7, 1, 3, 1, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(16.0)) \\le len(in0[i0:])\\ni2 += divInt(len(in2),i1)\\n", "test_case_results": [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], "other_info": {}, "test_fitness": 742}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [0, 2, 1, 0, 2], [1, 1], [3, 1, 1, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 62, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(30.0):]) \\le int(68.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], "other_info": {}, "test_fitness": 540}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 3, 2, 8, 5, 3], [2, 1, 1, 2, 2, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 3, 3, 1, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [2, 1], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 4, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 62, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 13, 2, 7, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) * min(min(i2, ( i1 - i1 )), i2) ), len(in2))) \\l len(in0)\\n", "test_case_results": [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0], "other_info": {}, "test_fitness": 647}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [0, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 63, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 2, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i1 \\l abs(( max(len(in0), min(i0, divInt(i2,i2))) + i1 ))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 704}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 63, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(saveOrd(in2),mod(len(in0),( ( int(3.0) - i1 ) + int(0.0) ))) + int(2.0) )\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 642}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 1, 3, 3, 3, 0, 0, 1, 1, 1, 3, 3, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 2, 3, 0, 0, 3, 3, 4, 1, 2, 4], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5, 0], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 64, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 5, 0, 23, 2, 11, 1, 1, 7, 0, 0, 13, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(abs(( len(in1) * min(min(i1, divInt(i1,len(in2))), i1) ))) \\l int(22.0):{:\\nres0 = len(in0) \\le saveOrd((s2 + (in1[max(i2, i1):][int(4.0):int(7.0)] + in2))[int(2.0):abs(saveOrd(getCharFromString(s0, int(8.0))))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 644}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 8, 9, 8, 7, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [0, 0, 1, 1, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [1, 0, 0, 2, 1, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 65, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 6, 6, 5, 1, 19, 5, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(( len(in1) - len(in2) ), ( i1 + i0 )):{:\\nres0 = mod(mod(mod(int(8.0),int(9.0)),int(8.0)),int(7.0)) \\le min(i2, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], "other_info": {}, "test_fitness": 615}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 3, 3, 2, 2, 2, 2, 0, 1, 0, 2, 0, 2, 1, 3, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 4, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 65, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( saveOrd(in2) + len(in0) )\\n", "test_case_results": [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 680}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3], [5, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1], [2], [1, 1, 0], [3, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 66, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(in0),min(min(i1, ( i0 * i1 )), i2)), int(22.0))) != len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 617}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 4, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [4], [0, 0], [], [5], [5], [], []], "fitness": 67, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 4, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(14.0):len(in2)]) \\le int(97.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "other_info": {}, "test_fitness": 600}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 1, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 67, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 0, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le int(97.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "other_info": {}, "test_fitness": 567}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3], [1, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 3, 0, 0, 0, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2], [1, 0, 1, 1], [3, 1, 3, 0, 0, 2, 3, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 68, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 1, 6, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in1) \\g max(mod(len(in2),min(min(i1, abs(i0)), i1)), i1)\\n", "test_case_results": [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], "other_info": {}, "test_fitness": 624}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 4, 9, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [2, 0, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 0, 2, 1, 0, 2, 0, 1], [1, 1, 1, 1, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0, 1], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 5, 0, 18, 7, 2, 3, 4, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(i0,divInt(saveOrd(s1),divInt(len(in2),mod(( i2 + int(4.0) ),int(7.0))))) \\le int(4.0) and i0 \\le ( i0 + ( int(9.0) + i2 ) ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 0, 1, 0], [0, 0], [], [3, 2, 1], [0], [0], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 0, 0, 3, 1, 0, 2, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 4, 1, 0, 3, 1, 1, 0, 3, 3, 1, 0, 12, 5, 3, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( not saveOrd(s1) \\le ( divInt(len(in2),( len(in0) + ( ( i0 + int(4.0) ) + int(7.0) ) )) + int(2.0) ) and True )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [1, 5], [1, 1], [0, 0], [], [0], [0], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 2, 0, 0, 2, 8, 5], [0, 1, 1, 1, 1, 0, 1], [1], [1, 2, 2, 2, 3, 2, 3, 2, 3, 0, 2, 1, 0, 0, 2, 0, 3, 0, 1, 0, 1, 2, 1, 0], [0, 1, 1, 1, 1, 1, 0, 0], [1, 3, 3, 1, 1, 3, 1, 4, 2], [1, 2, 1, 0], [1, 1, 1, 1, 1, 1], [4, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 0, 20, 7, 4, 2, 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(12.0) \\g ( mod(mod(max(mod(len(in1),mod(len(in2),i0)), mod(int(0.0),i1)),i1),( i1 - max(i1, int(0.0)) )) * i0 )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 1, 0, 1], [2, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 17, 6, 3, 2, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(divInt(( len(s0) + divInt(min(divInt(( i0 + int(4.0) ),int(6.0)), int(9.0)),i2) ),divInt(int(8.0),i2))) \\le int(7.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [0, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 3, 2], [], [2, 0], [1], [5], [5], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le int(16.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 3, 2, 3, 2, 3, 2, 2, 1, 3, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s1) \\le len(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1, 1], [0, 0], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [8, 4, 9, 3, 7, 6, 1], [2, 1, 0, 0, 2], [0, 1], [3, 0, 1, 3, 2, 3, 2, 2, 0, 1, 2, 2, 1, 2, 1, 0, 2, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 0, 2, 0], [0, 0, 0, 2, 2, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(i2) \\le int(8.0)\\ni1 = len(s1)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 4, 0, 1, 1], [0], [0, 1, 0], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 6, 0, 17, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( len(in1) + min(min(i1, divInt(i0,i2)), i2) ), int(1.0))) \\l mod(saveOrd(in2),min(i1, i1))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 661}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [2, 1, 1], [0, 0], [0], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 1, 0, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1 in in2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 4, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [2, 0, 2, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [2, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [4], [2], [], [5], [5], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 9, 3, 1, 1, 2, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = divInt(i0,( int(14.0) + mod(saveOrd(s2[i2:]),i1) )) \\le int(97.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1, 1], [0, 0], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [2, 1, 3, 2, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 9, 3, 2, 1, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = divInt(int(16.0),saveOrd(in0[( mod(len(in2),i0) + i2 ):])) \\le int(97.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [0, 2, 3, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 0, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le ( saveOrd(s0) + len(in2) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1, 1, 1], [0, 1], [2], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1], [1, 7, 3, 8, 4, 5, 5, 1, 4, 4, 7], [1, 1, 1, 2, 2, 0, 1], [1, 0], [2, 2, 0, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 0, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 1, 15, 5, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = mod(( i1 - abs(divInt(len(in1),( mod(i1,int(17.0)) + int(38.0) ))) ),i1) \\le len(in2)\\ni2 += abs(int(4.0))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 0], [1, 2, 0], [1], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 9, 2, 8, 5, 5, 1, 4, 2, 7], [1, 0, 2, 2, 2, 0, 1, 0, 2, 0, 1, 0, 1], [1], [1, 3, 2, 3, 3, 1, 0, 2, 0, 2, 0, 0, 3, 3, 3, 0, 2, 1, 1, 0, 1, 3, 1, 1, 0, 0, 2, 0, 0, 0, 0, 2, 3, 1], [1, 0, 1, 0, 0, 1, 1], [2, 3, 2, 4, 2, 3, 1, 4, 1], [0, 0, 2, 2, 1, 2, 0], [1, 1, 0, 1], [4, 5, 5, 0, 1, 4, 2, 2, 1], [], [], [0, 0, 4, 2, 2, 0, 4, 2, 2, 0, 0, 2, 2, 2, 0, 4, 2, 0], [3, 0, 0], [2], [0, 2, 1, 2, 1, 0, 1, 0], [], [5], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 6, 1, 3, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(0.0) \\le abs(mod(len(in1),abs(int(2.0))))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 6, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 0, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s1) \\le ( divInt(i2,mod(len(in2),( ( int(3.0) - i2 ) + int(6.0) ))) + int(6.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [2, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 2, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 17, 7, 3, 4, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( divInt(divInt(saveOrd(s1),( len(in2) + ( divInt(i2,int(3.0)) + int(7.0) ) )),abs(int(9.0))) + ( int(5.0) * i2 ) ) \\le int(5.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [1, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 2, 1, 0, 2], [1, 1], [3, 2, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [4], [2, 0], [0, 0], [5, 5], [5], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 1, 9, 2, 3, 2, 1, 2, 2, 0, 7, 1, 0, 1, 2, 2, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[divInt(len(in2),int(10.0)):]) \\g ( len(getCharFromString((\"\"F\"\" + \"\"F\"\"), i0)) + i2 )\\ni1 -= int(98.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1, 1], [0, 0], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [8, 7, 3, 3, 6, 6, 1], [2, 1, 0, 0, 2, 2, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 3, 1, 2, 2, 3, 0, 1, 0, 1, 0, 2, 0, 1, 2, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 3, 3, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 7, 1, 28, 10, 5, 7, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( divInt(len(s1),divInt(len(in2),( ( i2 + int(8.0) ) + int(7.0) ))) + divInt(abs(int(3.0)),( ( min(i1, int(3.0)) * i0 ) * int(6.0) )) ), i0) \\le ( i2 * int(6.0) )\\ni2 = ( int(1.0) + i2 )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 3], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 6, 9, 7, 6, 5, 5], [1, 0, 2, 2, 1, 1], [1], [3, 2, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [0, 1, 3, 0, 0, 3, 0, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 6, 0, 18, 3, 7, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( divInt(max(len(in1), min(i1, mod(i0,i2))),i2) + int(1.0) ), min(len(in2), min(i1, i1))) \\l int(6.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [0, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [5, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i2 \\le ( divInt(saveOrd(in2),mod(len(in2),( ( int(3.0) - i2 ) + int(0.0) ))) + int(6.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 0], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 2, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 1, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 2], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 4, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(divInt(( max(len(in1), min(i1, mod(i1,i1))) * i2 ),int(22.0))) \\l int(4.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 12, 5, 2, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(4.0) \\le ( divInt(saveOrd(s1),divInt(len(in2),( ( i0 + int(8.0) ) + int(2.0) ))) + int(8.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 4, 1, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 2, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [2, 0, 0, 1, 1, 2, 0], [1, 1, 0], [0, 4, 1, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) != ( ( len(in1) * mod(len(s1),( ( int(4.0) + mod(int(4.0),int(1.0)) ) + i0 )) ) - ( int(8.0) - i2 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [2, 2, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2, 2, 1, 0], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0, 0], [1, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [1, 0, 1, 2, 1, 2, 0], [0, 0, 0, 1], [1, 5, 3, 2, 4, 5], [], [], [4, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 0, 0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 8, 0, 23, 6, 3, 2, 4, 4, 0, 0, 11, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(divInt(i2,len(getCharFromString(s1[divInt(len((in2 + (in0[divInt(( int(2.0) - i2 ),int(2.0)):int(9.0)][i2:( int(5.0) + i0 )] + s2))[int(5.0):i2]),mod(i2,int(7.0))):], i1)))) == i0\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [1], [2, 1, 0], [], [0, 0, 0], [], [], [3, 1, 2], [4, 2], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 8, 2, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 1, 0, 1, 2], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [0, 1, 1, 1, 1], [1, 2, 3, 0, 3, 3, 3, 0, 1], [0, 0, 0, 2, 1, 2, 0], [1, 0, 0, 1, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0], [5], [], [], []], "fitness": 69, "mapping_values": [1, 4, 4, 1, 3, 0, 3, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 4, 4, 8, 1, 20, 5, 5, 2, 4, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(16.0) \\le max(( abs(mod(len(in1),divInt(divInt(i2,int(3.0)),int(8.0)))) + i1 ), min(len(in2), i2)):{:\\nin2 = s1\\n:}else:{:\\ni2 += i1\\n:}\\nres0 = mod(i0,i1) == i2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [5, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 0, 8, 5, 5], [1, 0, 1, 2, 1, 2], [1], [3, 1, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 2, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [1, 4, 3, 0, 0, 3, 0, 1, 4], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 10, 2, 4, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(int(29.0), divInt(saveOrd(in1),len(in2))) != min(i1, ( i0 * i1 ))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 0, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [0, 5, 1, 4, 4], [], [], [3, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd((s0 + in2)) \\le int(163.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1], [3, 0, 2, 8, 7, 7, 1, 5, 5, 0, 5, 3, 2], [2, 2, 2, 0, 2], [1], [3, 2, 2, 3, 2, 3, 2, 1, 3, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 5, 2, 4, 5], [], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1, 2, 0, 0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 4, 0, 22, 6, 4, 3, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2[mod(len((in2 + (s2[( int(3.0) + min(i2, int(0.0)) ):][:int(2.0)] + in1))[int(8.0):( int(7.0) + i2 )]),int(7155.0)):i2]),divInt(i0,int(0.0))) + int(532.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(4.0) \\le ( divInt(saveOrd(s0),divInt(len(in2),( len(in0) + i0 ))) + int(6.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 2, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 7, 2, 5, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s0) \\le ( ( divInt(( len(in2) + ( divInt(i0,int(4.0)) + int(8.0) ) ),int(9.0)) + i2 ) * ( int(8.0) - i2 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [5, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 4, 0, 18, 7, 3, 5, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( int(5.0) \\le ( divInt(saveOrd(s1),divInt(len(in2),( ( i0 + len(in0) ) + int(8.0) ))) + int(2.0) ) and i2 \\le ( ( i0 + int(8.0) ) - i0 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 0, 0], [0, 0], [], [3, 2, 0], [1], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 1, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 1, 4, 1, 0, 3, 1, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s0) \\le ( divInt(len(s1),divInt(len(in0),divInt(( i0 + int(4.0) ),int(8.0)))) + int(9.0) ) or not b1 )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 1, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [0, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 5, 4, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(divInt(int(3.0),len(s1)), divInt(len(in2),divInt(( i2 + int(7.0) ),int(9.0)))) \\le min(int(5.0), ( int(5.0) + i2 ))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [0, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 16, 6, 3, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( divInt(len(s1),divInt(len(in2),( ( int(3.0) - i2 ) + int(0.0) ))) + int(6.0) ), int(8.0)) \\le divInt(int(7.0),i2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1, 2], [0, 1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0], [2, 1, 0, 1, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 8, 0, 21, 3, 8, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(( min(max(min(i0, divInt(i2,i2)), i2), int(1.0)) - len(in1) ), min(max(mod(i2,i0), i1), i2))) \\l int(1.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [3, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [1], [1, 1, 1, 1, 1], [4, 7, 2, 5, 7, 7, 1], [0, 1, 0, 0, 2], [0, 1], [3, 2, 2, 3, 1, 1, 2, 2, 0, 1, 1, 1, 0, 3, 2, 2, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 5, 5, 1, 0, 12, 4, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\ge ( divInt(len(in2),int(4.0)) + int(7.0) ) and divInt(( i0 + int(2.0) ),int(5.0)) \\le int(7.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [5, 4], [0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 6, 2, 3, 0, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile True:{:\\nres0 = saveOrd(s0) != divInt(divInt(len(in2),int(4.0)),len(in0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 2, 2, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2], [1, 0, 1, 1], [3, 4, 3, 0, 0, 3, 3, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(in1) \\l saveOrd(in2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 661}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [0, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [0, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) \\ge int(06.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s1) \\le ( divInt(len(in2),mod(len(in0),( ( int(3.0) - i1 ) + int(0.0) ))) + divInt(int(2.0),( int(8.0) * i0 )) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 6, 9, 8, 7, 7, 1], [0, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0], [4, 3, 2, 0, 0], [0, 0, 2, 2, 1, 2, 0], [0, 0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 11, 4, 3, 3, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(in2),i0) + abs(( ( int(2.0) + int(6.0) ) * int(9.0) )) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [0, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 4, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 5, 2, 2, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i2 \\le ( divInt(saveOrd(s2),mod(len(in2),( divInt(int(3.0),i2) - int(0.0) ))) + int(2.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [1, 0, 1, 2, 1, 1], [0, 1], [3, 2, 2, 3, 3, 3, 2, 2, 1, 0, 1, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 5, 0, 23, 7, 4, 4, 3, 5, 0, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) != ( divInt(len(getCharFromString(in2, len((in0 + (s2[min(mod(( int(3.0) - i1 ),int(0.0)), ( int(2.0) + divInt(int(8.0),i0) )):][int(7.0):] + in1))[i1:( i2 + int(7.0) )]))),int(1.0)) * i1 )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 2, 8, 9, 6], [0, 0, 0, 2, 1, 0, 1], [1], [1, 3, 2, 2, 3, 3, 3, 2, 3, 0, 3, 1, 0, 1, 2, 3, 1, 0, 1, 0, 1, 3, 1, 0], [1, 1, 1, 1, 1, 1, 0, 0], [1, 3, 3, 1, 2, 3, 1, 4, 2], [1, 2, 1, 0], [0, 1, 1, 1, 1, 1], [4, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0], [0, 3, 2], [4], [0, 1, 1, 2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 4, 0, 23, 4, 8, 0, 4, 6, 0, 0, 13, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(00.0) \\l max(divInt(mod(len(in1),len(in2)),max(mod(abs(i0),len((s1 + (in2[int(0.0):][:i0] + s1))[:int(1.0)][mod(max(int(2.0), i0),int(8.0)):i2])), int(9.0))), saveOrd(getCharFromString(in2, int(6.0))))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [3, 4], [1, 1, 1], [0, 0], [], [3], [], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 2, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\ge ( divInt(len(s2),divInt(len(in0),( ( i0 + int(4.0) ) + int(7.0) ))) + int(2.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [1], [1, 3, 2, 2, 3, 2, 3, 2, 3, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 5, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1, 2, 0, 0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(2.0) \\le saveOrd(s1)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 0, 1], [4, 6, 3, 1, 7, 7, 1, 4], [0, 2, 2, 0, 2], [0, 1], [2, 2, 2, 3, 2, 3, 2, 2, 1, 2, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0], [3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 3, 3, 2, 4, 5], [1], [], [0, 0, 3, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 5, 0, 22, 9, 2, 6, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( divInt(divInt(len(s0),( len(in0) + ( divInt(int(4.0),( int(6.0) + int(3.0) )) + i0 ) )),( int(17.0) * i2 )) - int(7.0) ) \\le i2:{:\\nres0 = ( i0 * int(14.0) ) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [2, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) != ( divInt(len(in2),divInt(len(in0),( ( int(3.0) + i2 ) + int(0.0) ))) + int(2.0) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 684}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 0, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0], [2, 0, 0, 0, 1, 2, 0], [1, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 18, 7, 3, 5, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( mod(len(s1),divInt(len(in2),( ( i0 * int(4.0) ) + int(0.0) ))) + int(2.0) ), i2) \\le ( ( i0 + int(8.0) ) - i0 )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [0, 2, 2, 3, 2, 3, 2, 1, 1, 3, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 1, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i2 \\le ( divInt(saveOrd(s2),mod(len(in2),( int(3.0) - int(0.0) ))) + len(s1) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 4, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [0, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [], [5], [5], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 1, 4, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i0 \\le int(14.0)\\ni2 += saveOrd(in0[int(97.0):])\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [1, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 1, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 11, 4, 3, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(( divInt(len(s1),mod(len(in2),int(3.0))) - ( int(0.0) + i1 ) )) \\le int(2.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 1, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [1, 0, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [4, 5, 3, 2, 4, 5], [1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 13, 5, 2, 3, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(4.0) \\le divInt(( saveOrd(in1) - divInt(len(in2[( ( i0 + int(1.0) ) + int(9.0) ):]),int(8.0)) ),i2)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [0, 3, 3, 0, 0], [1, 1, 0, 2, 1, 2, 0], [0, 1, 0], [1, 1, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 2, 0, 17, 6, 3, 3, 3, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( divInt(len(s1),mod(len(getCharFromString(s1, ( ( int(3.0) - i2 ) - int(0.0) ))),int(2.0))) + int(8.0) ), divInt(int(7.0),i2)) \\le int(7.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 2, 2, 7, 2, 8, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 0, 0, 2, 0, 0, 0, 1, 3, 3, 0, 2, 0, 1, 1, 1, 3, 1, 1], [1, 0, 1, 1], [2, 0, 2, 0, 0, 2, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 5, 0, 12, 2, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(min(divInt(abs(min(i1, i0)),( i1 * i2 )), i1)) \\l int(22.0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [5, 5], [1, 1], [0, 0], [], [0], [0], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 0, 0, 2, 8, 5], [0, 1, 1, 2, 1, 0, 1], [1], [1, 3, 2, 2, 3, 2, 3, 2, 3, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0], [0, 1, 1, 1, 1, 1, 0, 0], [1, 3, 3, 1, 1, 3, 1, 4, 2], [1, 2, 1, 0], [1, 1, 1, 1, 1, 1], [4, 5, 1, 5, 1, 5], [], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [], [], [], [], []], "fitness": 70, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 6, 0, 18, 6, 4, 1, 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) != max(( mod(len(in1),mod(len(in2),mod(max(i0, mod(int(0.0),i1)),i1))) - mod(i2,i1) ), i0)\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 685}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [8, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [], [], [2, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1], [5], [5], [], []], "fitness": 70, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(86.0):]) != len(in2)\\ni0 += i2\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 674}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [1, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [4, 1, 3, 0, 0, 3, 2, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [], [], [], [], []], "fitness": 70, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 12, 2, 5, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\g max(divInt(len(in2),min(min(i1, ( i0 + i1 )), i2)), int(26.0))\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 682}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 2, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 74, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\ge ( divInt(len(in2),divInt(len(in0),( ( i0 + divInt(int(4.0),int(6.0)) ) + i2 ))) + ( int(9.0) * i2 ) )\\n", "test_case_results": [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 709}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1], [0, 0], [], [2], [], [], [], [1, 1, 1, 1, 1], [4, 5, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [], [], [], [], []], "fitness": 80, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 2, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not saveOrd(s0) \\le ( divInt(len(in2),mod(len(in0),( divInt(i0,int(4.0)) + int(5.0) ))) + int(9.0) )\\n", "test_case_results": [0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 699}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [3, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 4, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 82, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 4, 1, 17, 5, 3, 3, 3, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\ge max(mod(len(in1),len(in2)), ( i0 * i2 )):{:\\nres0 = in2 not in in1[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += i1\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], "other_info": {}, "test_fitness": 772}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1, 1], [], [], [], [], []], "fitness": 84, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 4, 0, 21, 7, 3, 4, 3, 5, 0, 0, 11, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\ge ( divInt(len(in2),divInt(len((in0 + (s2[:( ( int(4.0) + int(8.0) ) + int(9.0) )][:int(8.0)] + in1))[i0:divInt(int(7.0),i2)][int(7.0):]),i2)) + ( i0 * int(1.0) ) )\\n", "test_case_results": [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "other_info": {}, "test_fitness": 707}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [3, 4, 4], [1, 0, 1, 2], [0, 0, 0], [1], [2], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 9, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 2, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [], [], [], [], []], "fitness": 91, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\ge max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = not mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)) \\le min(i2, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= int(9.0)\\n", "test_case_results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "other_info": {}, "test_fitness": 775}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [5, 4], [1, 1, 1], [0, 0], [], [3], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1], [4, 8, 2, 8, 7, 7, 1, 6, 2, 2, 7, 8, 9, 9, 1, 4, 3, 3, 3, 6, 6, 6, 9, 2, 8, 4, 1, 9], [0, 2, 0, 0, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0, 0, 2, 1, 0, 2, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 0, 2, 2, 0, 1, 0, 2, 0, 1, 2, 3, 0, 1, 3, 3, 1, 2, 2, 0, 3, 1, 3, 2, 0, 1, 3, 0, 3, 2, 0, 0, 2, 3, 1, 3, 3, 2, 3, 0, 3, 1, 3, 0, 3, 2, 2, 2, 1, 0, 1, 2, 1, 2, 2, 2, 0, 0, 3, 3, 1, 1, 1, 0, 1, 2, 3, 1, 1, 0, 1, 3, 3, 0, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [1, 3, 3, 0, 0, 4, 4, 3, 3, 3, 2, 0, 0, 0, 0, 3, 3, 4, 4, 3, 0, 0, 0], [0, 0, 0, 0, 1, 2, 0, 1, 0, 2, 2, 2, 1, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 5, 3, 2, 4, 5, 4, 2, 2], [1, 1, 1, 1, 1], [], [4, 0, 4, 2, 3, 0, 3, 2, 2, 0, 0, 0, 4, 4, 2, 4, 2, 4, 4, 1, 2, 4, 4, 4, 4, 2, 1, 4, 4, 0, 2, 1, 0, 0, 0, 1, 1], [0, 3, 2, 3, 0, 1, 1, 3, 2, 0, 0, 0, 3], [4, 3, 2, 0], [0, 2, 1, 0, 0, 2, 1, 0], [0, 3, 0, 0, 1], [6, 22, 21], [21], [], [31]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 28, 28, 20, 0, 88, 23, 23, 14, 9, 9, 5, 0, 37, 13, 4, 8, 5, 3, 1, 0, 1], "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(( divInt(len(getCharFromString(s2, divInt(len((in2 + (in0[:( ( i0 + int(4.0) ) + int(8.0) )][min(i2, ( ( i0 + int(2.0) ) + i0 )):] + s2))[( i2 - int(8.0) ):( min(i0, int(7.0)) * saveOrd(in1) )].rstrip(getCharFromString(saveChr(saveOrd(saveChr(int(7.0))))[divInt(( i1 + len(\"\"G\"\") ),int(1.0)):len(getCharFromString(getCharFromString(\"\"`\"\"[:mod(i1,int(6.0))], len(getCharFromString(in2.lstrip(), i0))), abs(( i1 - i0 ))).capitalize().strip()[( min(int(2.0), min(min(mod(min(i2, len(\"\"W\"\"[int(2.0):len(in1)])),i2), saveOrd(s2)), ( divInt(mod(int(7.0),i0),int(8.0)) + ( int(9.0) * mod(( mod(i0,i2) * saveOrd(s2) ),len(\"\"V\"\")) ) ))) * int(9.0) ):])], int(1.0))[int(4.0):i1].lstrip(\"\"v\"\").capitalize())),int(33.0)))),( min(int(3.0), int(66.0)) - i0 )) - int(6.0) ), min(min(i2, i1), int(9.0))) != int(28419.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [2, 2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1, 2], [0, 0], [1], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 1, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5, 4], [0, 0, 0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 1], [0, 3, 2], [4], [0, 0, 2], [1, 0, 0, 0], [16, 5, 8], [7], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0, 8, 8, 5, 0, 24, 3, 9, 1, 2, 7, 4, 0, 13, 0, 0, 3, 4, 3, 1, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i1 * i1 )), i2)), int(22.0))) \\l int(4.0):{:\\nloopBreak% = 0\\nwhile len(in2) \\le len(in0):{:\\nres0 = (s2 + (in1[mod(i1,int(7.0)):][int(2.0):int(8.0)] + in2))[saveOrd(in1):max(int(5.0), int(3.0))] not in \"\"hQFI\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3, 2], [0, 4], [1, 0], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 9, 7, 5, 5, 5, 3, 5, 3, 0, 8, 2, 3, 2, 7, 5], [2, 0, 1, 2, 1, 1, 1, 2, 2, 0, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 3, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1, 2, 0, 2, 2, 2, 1, 3, 3, 3, 0, 0, 1, 3, 0, 3, 2, 2, 2, 3, 1, 2, 3, 2, 1, 1, 1, 1, 2, 2, 0, 3, 3, 1, 3, 2, 0, 3, 0, 0, 1, 0, 3, 1, 1, 3], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [2, 1, 3, 0, 2, 3, 0, 1, 1, 0, 0, 0, 2, 0, 4, 1, 2, 1, 0, 3, 3, 3], [2, 2, 0, 0, 2, 2, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1], [4, 5, 3, 2, 4, 5, 5], [1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 4, 0, 1], [0, 3, 2], [4], [0, 1, 2, 1], [0], [24], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 1, 17, 17, 15, 0, 68, 16, 22, 7, 9, 7, 1, 0, 15, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(abs(i2), ( i0 * i1 ))), i2)) \\l len(in2[min(max(max(mod(i1,int(22.0)), int(9.0)), i1), divInt(int(7.0),int(5.0))):mod(i1,divInt(divInt(mod(int(5.0),min(min(min(i2, i2), int(5.0)), abs(i0))),min(divInt(( ( saveOrd((in0 + (s2[:int(3.0)][( max(( int(5.0) * int(3.0) ), int(0.0)) + int(8.0) ):] + in1))[:( ( i2 + abs(max(int(2.0), min(mod(i1,len(in2)), i2))) ) * i1 )]) * int(3.0) ) - i1 ),len(getCharFromString(in2, int(2.0)))), int(75.0))),len(\"\"Y\"\")))]):{:\\nres0 = b2\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 8, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 1, 2, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 1, 3, 0, 1, 1], [2], [1, 1, 0], [4, 5, 3, 2, 4, 5], [0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1, 2], [], [17], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 4, 0, 21, 4, 8, 1, 3, 1, 2, 0, 2, 0, 0, 0, 2, 0, 1, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(mod(len(\"\"r5\"\"),min(max(i1, ( i2 * len(in1) )), i1)), int(28.0))) \\l mod(min(max(divInt(i2,int(9.0)), int(7.0)), int(3.0)),int(5.0))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 9, 8, 5, 3, 1, 2, 2, 9, 8, 6], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 1, 1, 1, 1, 1, 0, 1, 1, 3, 0, 2, 1, 3], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 3, 1, 2, 3], [2], [0, 1, 0], [0, 5, 3, 4, 4, 5], [1, 1, 1, 0, 1], [], [0, 0, 0, 4, 3, 0, 3, 2, 2, 0, 4, 2, 3, 2, 2, 4, 2, 1, 1, 4, 1, 1], [0, 3, 2, 0], [4], [0, 0, 2, 1, 0, 0], [1, 3, 3, 2, 1], [], [17, 13], [2], [9, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 14, 14, 6, 0, 34, 4, 11, 1, 3, 5, 5, 0, 22, 4, 1, 6, 5, 0, 2, 1, 2], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(s0),min(min(i1, ( i1 * i1 )), int(22.0))), int(4.0))) \\l len(in2):{:\\nres0 = len(in0) \\le len(getCharFromString((in1 + (in1[mod(i2,int(7.0)):int(9.0)][int(8.0):max(int(5.0), int(3.0))] + (\"\"r\"\"[int(1.0):int(2.0)].capitalize()[int(2.0):i1][:int(9.0)] + \"\"&\"\")[int(8.0):].rstrip(getCharFromString(\"\".\"\", abs(i1))))), divInt(int(6.0),len(\"\"2n\"\"))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [1], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 5, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [1], [], [0, 1, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [2], [], [], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 7, 7, 6, 1, 21, 7, 3, 3, 5, 3, 1, 0, 5, 0, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(10.0) \\l max(mod(len(in1),len(\"\"2\"\")), ( i1 * i0 )):{:\\nres0 = in2 not in in2[mod(mod(( mod(mod(int(9.0),int(8.0)),i2) - i1 ),i2),int(5.0)):int(5.0)]\\n:}\\ni1 += int(5.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [1], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 2, 7, 2, 7, 0, 4, 6, 8, 8], [1, 1, 1, 2, 1, 1, 2], [1], [3, 3, 2, 2, 3, 3, 0, 2, 0, 0, 3, 1, 1, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1, 2, 0, 1, 0, 2, 1, 0, 1], [1, 0, 1, 1, 1, 0], [2, 1, 3, 0, 0, 3, 3, 0, 1, 2], [2, 1], [0, 1, 0, 0], [4, 5, 3, 2, 4, 4], [0, 1], [], [2, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2, 2], [1, 0], [2], [0], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 16, 16, 7, 0, 33, 6, 9, 2, 4, 4, 2, 0, 11, 0, 0, 4, 2, 1, 1, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(( len(in1[min(i1, mod(i1,i1)):min(int(22.0), int(4.0))]) * len(\"\"aC\"\") ),len((in2 + (in0[divInt(i2,int(7.0)):][int(2.0):] + s2))[int(8.0):min(max(int(5.0), int(2.0)), int(727.0))])), divInt(i1,int(046.0)))) \\l i1:{:\\nb1 = ( int(8.0) - i2 ) \\le int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 0, 6, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 0, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [1, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1], [], [4], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 11, 4, 3, 2, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"e\"\") \\le ( divInt(len(s1),i2) - len(in2) )\\ni2 = mod(( int(0.0) + i2 ),int(0.0))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [4], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 2, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 0, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 2, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [0, 0, 1], [], [0, 0, 1, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [2, 3, 3], [], [], [1], [6, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 1, 15, 5, 2, 3, 3, 2, 3, 0, 3, 0, 0, 0, 3, 0, 0, 1, 2], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),i1), ( i0 * i2 )):{:\\nres0 = in2.startswith(\"\"1#\"\\\\\"\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= mod(mod(( int(9.0) + int(8.0) ),int(9.0)),int(5.0))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 2], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 7, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 0, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [5, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [1], [], [3], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 6, 2, 3, 3, 1, 1, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(4.0) \\le ( divInt(saveOrd(in2),mod(len(\"\"d\"\"),( ( int(6.0) + i0 ) + int(7.0) ))) + int(8.0) ):{:\\nres0 = i2 == divInt(int(7.0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4, 2], [0, 2, 1, 1], [0, 0, 0], [3], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 1, 0, 3, 1, 0, 2, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 2, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5, 2], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 4, 0, 4, 1], [0, 3, 2], [4], [0, 0, 1], [2], [], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 4, 2, 1, 1, 1, 0, 0, 7, 7, 6, 0, 23, 6, 4, 4, 2, 7, 1, 0, 16, 3, 1, 3, 1, 0, 0, 1, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( s1 != in2 and saveOrd(in0) \\le ( divInt(len((s2 + (in1[:divInt(len(in2),( ( i0 + int(4.0) ) + int(7.0) ))][int(2.0):i2] + getCharFromString(s2.rstrip(\"\"1\"\".capitalize()), int(8.0))))[i0:abs(int(7.0))]),i0) + ( i2 + int(7.0) ) ) ):{:\\nres0 = i2 \\le int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1], [4, 8, 2, 8, 7, 7, 1, 2, 6, 4, 3, 3, 5, 5, 0, 2, 7, 8, 5, 0, 4, 6, 9, 2], [2, 2, 0, 0, 2, 2, 2, 1, 0, 0, 0, 1, 0, 2, 2, 0, 1, 1, 2, 2, 0, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 2, 0, 1, 0, 2, 0, 1, 3, 3, 2, 3, 2, 2, 3, 2, 3, 1, 3, 3, 2, 2, 1, 1, 2, 0, 2, 0, 3, 2, 0, 3, 3, 3, 3, 0, 3, 1, 2, 2, 2, 0, 3, 0, 2, 1, 0, 0, 3, 2, 0, 1, 0, 2, 3, 2, 0, 3, 3, 1, 0, 0, 3, 3, 3, 2, 3, 1, 0, 1, 2, 2, 1, 3, 1, 3, 1, 0, 3, 2, 3, 3, 1, 0, 0, 2, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0, 0, 4, 1, 0, 4, 3, 4, 3, 3, 0, 4, 4, 1, 2, 4, 3, 0, 1, 3, 2, 4, 2, 2, 0, 1], [0, 0, 0, 0, 1, 2, 0, 0, 1, 1, 2, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [1, 5, 3, 2, 4, 5, 0, 3, 2, 1, 2], [1, 1, 1, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0, 2, 4, 0, 1, 0, 0, 1, 4, 2, 4, 0, 4, 1, 4, 4, 4, 0], [0, 3, 2, 3, 1, 1, 1, 2], [4, 2], [0, 2, 0, 0, 2], [3, 0, 3, 1], [20], [6], [], [30, 7]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 24, 24, 22, 0, 102, 30, 30, 14, 16, 11, 4, 0, 30, 8, 2, 5, 4, 1, 1, 0, 2], "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(\"\"_\"\"),divInt(len(in2),( ( i2 + int(4.0) ) + int(8.0) ))) + ( i2 + ( ( i0 - int(2.0) ) * i0 ) ) ) and divInt(i2,int(8.0)) \\le min(min(divInt(min(mod(divInt(saveOrd((in0 + (s2[mod(max(int(7.0), min(saveOrd(in1), mod(( int(7.0) + int(1.0) ),mod(i2,mod(i2,len(getCharFromString(in2, ( i1 + saveOrd(s0.rstrip(\"\"U\"\")[len(in0):len(s2)]) )))))))),min(i0, saveOrd(\"\"$\"\"))):int(2.0)][( divInt(mod(i0,saveOrd(s1.strip()[i0:].capitalize())),( int(6.0) - i1 )) - i0 ):] + saveChr(max(( i2 * int(4.0) ), i2))))[divInt(abs(mod(i0,saveOrd(\"\"g\"\"))),len(saveChr(int(3.0)))):i1]),i1),min(max(len(saveChr(divInt(abs(int(3.0)),i2))), int(5.0)), ( divInt(int(5.0),saveOrd(s2.capitalize())) - int(0.0) ))), abs(int(2.0))),i2), abs(( min(max(int(7.0), i0), i0) - ( int(85.0) - int(0.0) ) ))), int(4692.0)) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1, 2, 4, 0, 9], [0, 2, 0, 0, 2, 1, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 3, 1, 1, 0, 2, 0, 3, 1, 0, 2, 0, 1, 1, 1, 2, 3, 3, 1, 1, 0, 3, 3, 3, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0, 1, 1, 3, 0, 4], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1, 1], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 4, 1, 1], [0, 3, 2], [4], [0, 1, 1, 1], [2, 3], [], [], [1], [14]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 7, 0, 34, 8, 10, 6, 2, 5, 2, 0, 14, 1, 0, 4, 2, 0, 0, 1, 1], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len((in0 + (s2[:( ( i0 + min(int(4.0), int(7.0)) ) + i2 )][:( i0 + min(int(2.0), i0) )] + in1))[:( i2 + int(8.0) )][int(7.0):int(712.0)]),( max(max(int(4.0), int(0.0)), i1) - len(getCharFromString(\"\"1\"\", min(saveOrd(\"\"+\"\"), int(9.0)))) ))) * i1 )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 9, 7, 5, 5, 5, 7, 2, 0, 9, 7, 0, 2, 6, 5, 1, 0, 6, 3, 3, 7, 9, 3, 0, 8], [1, 0, 1, 2, 1, 1, 0, 0, 1, 0, 2, 1, 2, 2, 2, 0, 1, 2, 1, 2, 2, 2, 0, 2, 1, 0, 1, 2], [1], [3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 3, 2, 1, 1, 3, 1, 3, 2, 2, 1, 2, 0, 0, 2, 1, 0, 3, 3, 0, 2, 3, 2, 0, 3, 1, 0, 2, 3, 3, 3, 2, 0, 0, 1, 1, 0, 3, 1, 1, 3, 0, 2, 2, 2, 3, 1, 1, 3, 0, 0, 2, 0, 3, 2, 2, 2, 3, 1, 1, 3, 2, 0, 2, 3, 0, 2, 3, 2, 3, 3, 0, 2, 1, 3, 3, 2, 0, 2, 0, 0, 3, 0, 3, 3, 0, 1, 0, 1, 0, 3, 1, 0, 3, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 0, 3, 3, 2, 1, 2, 2, 0, 0, 0, 4, 0, 2, 0, 0, 1, 0, 4, 4, 1, 4, 2, 2, 2, 2, 2, 2], [2, 2, 2, 1, 1, 2, 0, 2, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [4, 5, 3, 2, 4, 5, 0, 3, 1, 1], [1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 1, 0, 2, 0, 0, 4, 2, 0, 0], [0, 3, 2], [4], [0, 1, 0, 0, 0, 0], [2], [], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 26, 26, 28, 0, 113, 26, 36, 11, 15, 10, 1, 0, 21, 2, 1, 6, 1, 0, 0, 1, 0], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(int(22.0), mod(i1,i0)), i1)), int(9.0))) \\l len(getCharFromString(in2, min(max(divInt(i2,int(7.0)), int(5.0)), max(divInt(int(5.0),int(5.0)), min(int(7.0), len((in0 + (s2[divInt(mod(int(2.0),divInt(i1,i1)),( int(0.0) * i0 )):len(in1)][:abs(i0)] + \"\"5\"\"[divInt(max(( i1 * abs(int(9.0)) ), i0),mod(abs(min(min(( i2 * i1 ), int(7.0)), int(0.0))),i2)):min(int(2.0), int(6.0))]))[saveOrd(in2):i2])))))):{:\\nres0 = ( ( ( min(int(51.0), int(0.0)) - abs(i2) ) - i0 ) * ( i1 + min(mod(( divInt(min(int(6.0), int(3.0)),max(divInt(i2,( min(i1, mod(saveOrd(s0[( saveOrd(in0) * max(i2, mod(int(3.0),saveOrd(s1[abs(( i2 - divInt(i2,i0) )):abs(i2)].rstrip(s1)))) ):abs(abs(i1))]),int(7.0))) + i0 )), int(9.0))) - i1 ),abs(int(3.0))), i2) ) ) \\le abs(int(08.0))\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [1, 2, 2, 3, 2, 3, 1, 3, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [0, 1, 1], [], [1, 1, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 2, 2, 0], [3, 1, 3], [], [3], [], [17, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 2, 0, 16, 4, 3, 2, 2, 3, 3, 0, 11, 0, 0, 4, 3, 0, 1, 0, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(3.0) \\le ( divInt(saveOrd(\"\".d\"\"),mod(len(\"\"=\"\"),int(0.0))) - len((s2 + (in2[int(2.0):i2][int(8.0):] + in0))[int(7.0):][int(7.0):( int(1.0) + i2 )]) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [0], [5, 4], [1, 1, 1], [0, 0], [], [3], [], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1], [], [7], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s1) != ( divInt(len(\"\"h\"\"),divInt(len(in2),( ( i0 - int(4.0) ) + int(8.0) ))) + int(2.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [0, 0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1, 2, 3], [], [20], [8], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 1, 3, 0, 2, 0, 0, 0, 3, 0, 1, 1, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(\"\"u8[\"\"),min(min(i1, ( i0 - i1 )), i2)), int(26.0))) \\l len(in1)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 6, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 3, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [0, 0, 1], [], [0, 0, 1, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [1, 0, 1], [0], [25, 16], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 6, 1, 23, 6, 5, 3, 4, 3, 3, 0, 5, 0, 0, 1, 3, 1, 2, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(max(( len(in1) * len(in2) ), mod(i1,i0)),mod(( mod(int(16.0),int(9.0)) - int(8.0) ),min(min(i2, i1), int(9.0)))) \\l int(5.0):{:\\nres0 = \"\"zAq\"\" not in in2[int(5.0):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(6.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 1, 1, 1, 0], [2], [0, 2, 0, 0], [], [0, 0], [], [], [3, 1, 0, 2], [4, 4, 5], [1, 1, 0, 1, 0, 2], [0, 0, 0], [5], [3, 0], [0], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [4, 6, 3, 8, 7, 7, 1, 4, 1, 8, 9, 3, 3, 0, 0, 5, 4, 9, 1, 2, 4, 9, 3, 7, 1, 8, 1, 0, 2, 6, 3, 5, 7, 1, 2, 2, 2, 3, 0, 9, 0, 2, 7, 1, 4, 0, 2], [0, 2, 2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 1, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 1, 2, 1, 1, 0, 0, 1, 1, 0, 2, 2, 1, 2], [0, 1], [3, 2, 0, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 1, 3, 0, 3, 2, 0, 2, 1, 2, 3, 0, 2, 2, 1, 1, 2, 2, 2, 0, 2, 3, 2, 0, 1, 1, 0, 0, 3, 0, 1, 0, 2, 2, 0, 0, 1, 2, 3, 3, 0, 2, 1, 1, 2, 1, 2, 0, 0, 2, 2, 2, 0, 3, 2, 1, 0, 1, 3, 2, 2, 0, 0, 3, 2, 3, 1, 0, 1, 2, 0, 1, 1, 0, 3, 2, 2, 3, 2, 2, 3, 0, 1, 3, 2, 2, 0, 1, 1, 1, 0, 1, 3, 3, 2, 2, 3, 3, 1, 3, 2, 3, 1, 2, 2, 1, 0, 3, 1, 0, 1, 0, 2, 1, 1, 1, 3, 3, 1, 0, 1, 2, 3, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0, 3, 0, 3, 1, 4, 4, 4, 0, 4, 0, 1, 0, 2, 0, 3, 4, 0, 4, 1, 1, 4, 1, 1, 2], [0, 0, 0, 2, 1, 2, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 2, 1, 1, 0, 0, 1, 0, 2], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 5, 3, 2, 4, 5, 5, 1, 2, 5, 5], [1, 1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0, 2, 4, 4, 2, 2, 1, 0, 4, 2, 4, 0, 2, 2, 2, 2, 2, 1, 4, 4, 4, 0, 1, 4, 1, 1, 4, 3, 1, 4], [0, 3, 2, 1, 0, 2, 0, 1, 1, 2, 1], [4], [2, 2, 0, 1, 2, 0, 2, 0, 2, 2, 0, 0], [1, 2, 1, 0, 1, 3], [6], [20, 13, 20], [0], [0]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 1, 0, 0, 4, 3, 6, 3, 1, 2, 1, 0, 0, 47, 47, 36, 0, 146, 43, 29, 25, 18, 11, 6, 0, 42, 11, 1, 12, 6, 1, 3, 1, 1], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( i0 + len(in2) ):{:\\nres0 = divInt(len(in0),mod(( int(4.0) + i2 ),int(6.0))) \\le int(3.0)\\ns2 = (in1 + (in2[i2:( int(8.0) + i0 )][int(7.0):] + in2))[i2:]\\nb1 = ( divInt(i0,int(7.0)) != min(int(14189.0), min(i1, len(getCharFromString(s1, ( i2 * ( int(3.0) - ( min(i2, divInt(( int(3.0) * int(0.0) ),( divInt(( i2 + ( len(\"\"u\"\"[mod(i0,int(0.0)):int(5.0)][i2:].capitalize().rstrip(s2)[:i1]) + max(i1, int(4.0)) ) ),i2) - mod(mod(i2,i1),int(9.0)) ))) - mod(saveOrd(saveChr(saveOrd(getCharFromString(in2, i2)[divInt(int(1.0),int(2.0)):]))),( int(4.0) - mod(i2,i2) )) ) ) ))))) and b0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = \"\"0\"\"[mod(( divInt(i0,saveOrd(getCharFromString(saveChr(( int(9.0) + i2 )), int(3.0)).capitalize())) + min(mod(( i1 - i1 ),saveOrd(in2)), ( min(int(7.0), i2) - int(1.0) )) ),( i1 + int(8.0) )):int(1.0)][i1:max(divInt(divInt(min(mod(( abs(i0) - int(0.0) ),min(( ( i0 * int(2.0) ) - int(6.0) ), int(3.0))), i1),int(5.0)),len(\"\"n\"\")), saveOrd(saveChr(( divInt(min(saveOrd(\"\"G\"\"), int(7.0)),max(( max(int(1.0), ( ( int(2.0) - i1 ) + saveOrd(\"\"u\"\") )) + int(2.0) ), i0)) - int(2.0) ))))][i2:][( int(309.0) + int(0.0) ):][int(2.0):max(max(int(71.0), i2), int(402.0))].endswith((\"\"\"\" + saveChr(( abs(i1) * i2 ))).capitalize())\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [1], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 2, 3, 2, 4, 5], [0, 1], [], [0, 1, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [3, 1], [], [16], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 1], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2 not in \"\")q\"\"\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1], [2, 0, 2, 2, 2, 1, 0, 1, 1], [2, 2, 0, 1], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1, 0], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 0, 2, 0, 0, 2, 2, 2, 1, 1, 1, 2, 3, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0, 2], [1, 1, 1, 1, 1, 0], [4, 5, 5, 0, 5, 5], [0, 1, 0, 0, 0, 1, 0, 1], [0], [0, 0, 1, 2, 1, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [0, 0, 1], [3, 2, 1, 2, 1, 0, 2, 0], [15, 25], [18, 1], [2, 3, 5], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 4, 3, 1, 2, 0, 0, 1, 2, 4, 2, 2, 0, 0, 0, 1, 26, 26, 11, 2, 39, 12, 4, 8, 6, 6, 8, 1, 12, 0, 0, 3, 8, 2, 2, 3, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),i1), ( i0 * i2 )):{:\\nres0 = in2 not in \"\"2\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile mod(mod(( int(9.0) - int(8.0) ),int(9.0)),mod(len(\"\"s3bP\"\"[i1:mod(int(5.0),int(5.0))]),int(6.0))) \\le i2:{:\\nloopBreak% = 0\\nfor in2 in s0:{:\\nif (in2[:int(2174.0)][( i1 + divInt(( ( int(20.0) + i1 ) + int(65083.0) ),( i0 * int(305.0) )) ):int(5.0)] + in2) in \"\"5Z\"\":{:\\ni1 += min(int(8.0), int(72.0))\\n:}\\ni0 *= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 2], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 1, 7, 9, 5, 5, 9, 2, 1, 2, 1, 2, 0], [1, 0, 0, 2, 1, 1, 0, 1, 1, 0, 0, 0, 2, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 2, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1, 3, 0, 3, 1, 2, 3, 1, 0, 3, 1, 1, 3, 3, 1, 2, 2, 1, 3, 2, 1, 0, 0, 3, 1, 0, 0, 2, 2, 0, 0, 0, 3, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 0], [2, 1, 3, 0, 3, 3, 0, 1, 1, 4, 2, 0, 2, 4, 2, 2, 3, 0, 2], [0, 0, 1, 1, 0, 1], [0, 1, 0, 0], [0, 5, 3, 2, 4, 5, 4, 0], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 2, 4, 4, 0, 4, 2, 4, 0, 2, 1], [0, 3, 2, 0, 2], [4], [0, 2, 0, 2, 0, 0], [2], [], [], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 14, 14, 14, 0, 56, 10, 19, 6, 4, 8, 1, 0, 22, 5, 1, 6, 1, 0, 0, 1, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(s0),min(len(in2), i1)), ( i0 + len(in0) ))) \\l i0:{:\\nres0 = mod(min(max(max(divInt(i2,int(26.0)), int(1.0)), i1), saveOrd((s2 + (in1[int(7.0):int(9.0)][abs(i1):] + in2))[min(int(5.0), ( abs(int(5.0)) + i0 )):saveOrd(getCharFromString(in1.capitalize().rstrip(getCharFromString(s0.capitalize()[int(9.0):int(2.0)], abs(abs(int(1.0)))))[( ( int(2.0) - len(\"\"0\"\"[divInt(int(1.0),i1):i1]) ) - min(int(2.0), i0) ):], i0))])),( ( i0 + i2 ) - i1 )) == abs(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 4, 9, 7, 5, 5, 5, 4, 7, 7, 4, 2, 4, 9, 1], [1, 0, 0, 2, 1, 1, 1, 2, 1, 2, 0, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 3, 2, 0, 2, 2, 3, 3, 3, 3, 3, 1, 1, 0, 3, 1, 2, 2, 1, 0, 3, 3, 0, 1, 1, 1, 0, 0, 3, 3, 1], [1, 0, 1, 1, 0, 0, 0, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 1, 3, 1, 4, 2, 3, 3, 1, 3, 3], [2, 2, 2, 0, 1], [0, 1, 0, 1], [4, 5, 3, 2, 4, 5, 3], [1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 4, 2, 4, 1, 2, 2, 1, 1, 1, 0], [0, 3, 2], [4], [0, 0, 0, 2, 2, 1], [1, 3, 1, 0], [22], [13, 14], [], [16]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 15, 15, 12, 0, 52, 9, 19, 5, 4, 7, 4, 0, 22, 3, 1, 6, 4, 1, 2, 0, 1], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i0 )), i2)), int(24.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i1) \\le divInt(int(5.0),max(( i1 * ( ( max(len(in0), max(saveOrd((s2 + (in1[abs(int(5.0)):int(5.0)][i2:len(in2)] + getCharFromString(\"\"n\"\".capitalize()[int(4.0):].rstrip(\"\"-\"\"[:( mod(int(7.0),i1) * len(\"\"o\"\") )][max(i2, int(7.0)):]), int(4.0))))[int(2.0):i0]), i2)) + len(\"\"W\"\") ) - len(in0) ) ), int(491.0)))\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 4, 7, 9, 8, 5, 3, 7, 5, 5, 7, 2, 6, 6, 5, 5, 4, 7, 0, 0, 4, 7, 8, 0], [1, 1, 1, 2, 1, 1, 0, 2, 0, 2, 1, 1, 1, 1, 2, 2, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 3, 1, 1, 1, 3, 3, 1, 1, 2, 3, 0, 0, 0, 2, 0, 1, 1, 0, 3, 3, 2, 3, 0, 0, 3, 1, 3, 3, 3, 1, 0, 0, 3, 1, 0, 3, 1, 2, 0, 1, 3, 1, 2, 2, 3, 2, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 0, 3], [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2, 4, 4, 0, 0, 4, 1, 2, 1, 2, 2, 4, 2, 1, 3], [2, 1, 2, 0, 1, 0], [0, 1, 0, 1, 0], [3, 5, 3, 2, 0, 3, 2, 4, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 3, 2, 1, 1, 2, 3, 4, 1, 1, 3, 3, 1, 4, 2, 2, 4, 2, 2, 2, 2, 4, 4, 1, 4, 4, 4, 2, 0, 4, 0, 1, 2, 4, 2, 1, 4, 1, 2, 2, 0, 1], [0, 3, 2, 2, 3, 0, 2, 3, 1, 3, 3], [4, 3, 3, 4, 2], [0, 0, 2, 0, 1, 1, 2, 1, 0, 0, 1, 1, 2, 0, 2, 1], [1, 2, 0, 3, 2, 2, 3, 1, 1, 2, 3], [10], [24, 19, 1], [4, 4, 7, 2], [23, 17, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 25, 25, 17, 0, 75, 11, 24, 6, 5, 9, 11, 0, 53, 11, 5, 16, 11, 1, 3, 4, 3], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in0),min(min(i1, ( i1 * i1 )), i2)), int(22.0))) \\l len(in2):{:\\nres0 = len(in0) \\le saveOrd((s2 + (s0[mod(max(int(4.0), int(7.0)),int(9.0)):][abs(saveOrd(in0)):int(8.0)] + ((\"\"y4\"\"[int(5.0):divInt(saveOrd(\"\"K\"\"),i1)] + (getCharFromString(\"\">\"\", i1) + \"\"4\"\")[:i0]) + ((\"\"7\"\" + \"\".\"\".lstrip(getCharFromString(s2[:( i2 - int(3.0) )].lstrip(saveChr(int(7.0))).capitalize(), i0)).capitalize()[:min(min(( saveOrd(in1) * i2 ), i1), max(int(5.0), abs(max(abs(int(5.0)), i1))))][i1:abs(int(7.0))][i1:saveOrd(\"\"t\"\")][:int(2.0)].capitalize()[( i2 + int(6.0) ):][:abs(int(6.0))].rstrip(\"\"b\"\"[mod(divInt(max(( int(5.0) - int(5.0) ), int(4.0)),( int(7.0) + i2 )),int(0.0)):int(0.0)].rstrip(\"\"2\"\".strip())[int(4.0):])) + s0[:int(7.0)][int(80.0):]))))[i0:len(\"\"#\"\")])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 7, 2, 6, 7, 7, 1, 8, 4, 5, 2, 6, 8, 3, 4, 8, 7, 2, 7, 6, 4, 8, 3, 7], [0, 2, 0, 0, 2, 0, 2, 1, 0, 1, 2, 2, 0, 2, 2, 1, 1, 1, 1, 2, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 3, 1, 2, 2, 0, 1, 3, 2, 3, 0, 3, 0, 1, 3, 0, 1, 3, 0, 1, 1, 3, 2, 1, 3, 3, 0, 2, 1, 2, 2, 2, 3, 2, 0, 2, 0, 1, 3, 2, 1, 2, 3, 3, 2, 0, 2, 0, 0, 2, 1, 0, 2, 0, 1, 2, 3, 0, 0, 0, 2, 1, 3, 1, 0, 3, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 3, 3, 0, 0, 0, 4, 3, 0, 0, 4, 3, 0, 3, 4, 2, 3, 0, 4], [0, 0, 0, 2, 1, 2, 0, 1, 0, 1, 0, 1, 1, 1, 2, 1, 2, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 5, 3, 2, 4, 5, 1, 3, 1], [1, 1, 1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 4, 4, 0, 4, 2, 2, 4, 2, 2, 2, 2, 0, 1, 0, 2, 1, 4, 2, 2, 0, 2, 1], [0, 3, 2, 2, 3, 1], [4, 2], [0, 1, 0, 2, 0, 2, 1, 2, 0, 1, 1, 2, 2, 2], [3, 3, 0], [13], [], [], [4, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 24, 24, 30, 0, 103, 31, 19, 18, 13, 9, 3, 0, 34, 6, 2, 14, 3, 1, 0, 0, 2], "tree_depth": 67, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( max(( divInt(len(s0),divInt(i0,( ( i2 + int(4.0) ) + int(7.0) ))) + int(2.0) ), i0) \\le divInt(int(6.0),len(getCharFromString(in2, int(7.0)))) and ( ( i0 * int(7.0) ) - min(( min(i2, min(i0, int(18.0))) * saveOrd((in0 + (s2[i2:int(4.0)][:len(in1)] + in2.capitalize().rstrip(s1[:i1][int(5.0):int(2.0)][min(( int(6.0) + min(saveOrd(\"\"!\"\"), i0) ), divInt(int(8.0),mod(( divInt(len(in0),mod(i1,( i2 - int(3.0) ))) + min(divInt(int(4.0),( len(\"\"\\\\\\\\\"\"[:saveOrd(saveChr(divInt(i2,( i0 - i2 ))))]) + divInt(int(8.0),i2) )), ( i1 - int(7.0) )) ),( abs(i1) - i1 )))):][:i1].strip()[( int(2.0) - len(s1[int(7.0):][i2:]) ):][min(mod(i0,( ( ( int(6.0) * divInt(i2,saveOrd(\"\"N\"\"[i0:])) ) - ( i0 * int(4.0) ) ) - int(8.0) )), int(3.0)):int(7.0)].capitalize())[i0:]))[i0:i0]) ), i0) ) \\le mod(i1,i0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [4, 8, 2, 8, 7, 7, 1, 5, 1, 8, 3, 1, 5, 6, 5, 8, 3, 6, 5, 8, 3, 6, 5, 0, 2, 9, 5], [2, 2, 2, 0, 2, 1, 0, 0, 2, 1, 0, 1, 0], [0, 1], [2, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1, 2, 1, 1, 1, 2, 0, 3, 3, 2, 3, 0, 0, 2, 1, 3, 1, 2, 3, 3, 1, 1, 2, 0, 0, 0, 3, 2, 0, 1, 3, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0, 4, 4, 2, 0, 2], [0, 0, 0, 0, 1, 2, 0, 2, 2, 1], [0, 0, 0, 1, 1, 1], [4, 5, 3, 2, 4, 5, 5, 1], [1, 1, 0, 0, 1, 1], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 4, 3, 3, 1, 4, 0, 1, 2, 1, 0, 2, 1], [0, 3, 2], [4], [0, 1, 2, 1, 0, 1], [2, 1, 3, 3, 3, 2], [], [3], [2, 1], [26, 5, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 27, 27, 13, 0, 53, 16, 10, 10, 6, 8, 6, 0, 23, 2, 1, 6, 6, 0, 1, 2, 3], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile divInt(divInt(divInt(saveOrd(in1),( len(in2) + ( ( i2 + int(4.0) ) + int(8.0) ) )),int(2.0)),i2) \\le ( ( i2 + int(8.0) ) - i0 ):{:\\nres0 = mod(i2,int(7.0)) \\le mod(int(7151.0),int(831565836.0))\\nin0 = (s2 + (in1[:int(58.0)][( i1 * len(in2) ):] + getCharFromString(((\"\"2\"\" + in2.rstrip(\"\"d\"\")) + \"\"[\"\"\\\\\"\"\"[min(( min(i0, i0) + mod(int(3.0),saveOrd(s1)) ), int(6.0)):( saveOrd(\"\"1\"\"[:abs(int(5.0))]) * int(0.0) )]), ( i2 * i1 ))))[:i0][min(( i1 - int(2.0) ), abs(i0)):int(95.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 7, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 1, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [0, 1], [], [0, 0, 0, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3, 3], [], [], [], [19, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 4, 4, 3, 1, 13, 4, 3, 2, 3, 3, 2, 0, 4, 0, 0, 0, 2, 0, 0, 0, 2], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in \"\":+\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= mod(int(7.0),mod(int(9.0),int(8.0)))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [4, 2, 4, 7, 2, 8, 5, 7, 6, 0, 0, 3, 6, 5, 6, 3, 8, 0], [1, 0, 1, 2, 1, 1, 1, 2, 0, 1, 1, 1, 2, 2, 0, 2], [1], [3, 3, 2, 3, 3, 3, 2, 2, 0, 0, 0, 0, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 2, 1, 2, 0, 3, 2, 2, 0, 1, 2, 2, 2, 2, 1, 2, 3, 0, 2, 3, 2, 0, 0, 3, 0, 3, 1, 1, 1, 2, 2, 1, 0, 0, 0, 0, 3, 2, 3, 1, 0, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [2, 1, 3, 0, 0, 3, 3, 1, 1, 1, 3, 4, 0, 2, 3, 0, 0], [2, 2, 1, 0, 2, 1, 1, 0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [4, 5, 5, 2, 4, 5, 3], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 2, 2, 0], [0, 3, 2], [4], [0, 2, 2, 2, 0], [0], [6], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 18, 18, 16, 0, 67, 18, 17, 8, 10, 7, 1, 0, 15, 0, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(( mod(i1,i0) * i1 ), i2), len(in2))), len(in2))) \\l max(divInt(i1,int(42.0)), int(4.0)):{:\\nres0 = int(7.0) \\le max(max(int(2.0), int(8.0)), mod(int(5.0),mod(i1,len((s2 + (in1[mod(mod(i1,int(7.0)),( ( ( divInt(int(6.0),( saveOrd(in2) * i2 )) - ( min(( i0 + i1 ), abs(i1)) * len(\"\"G\"\") ) ) - int(0.0) ) - int(0.0) )):][int(3.0):] + in0[divInt(( int(6.0) + i1 ),i2):i2][i0:]))[min(mod(min(int(5.0), i2),int(6.0)), int(3.0)):int(80.0)]))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 8, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 2, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 0, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [2], [], [], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 13, 5, 3, 3, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\l ( divInt(len(\"\"3\"\"),divInt(abs(( ( i0 + int(4.0) ) + int(8.0) )),int(9.0))) + i2 )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 1, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [1, 1], [], [0, 1, 0, 2, 1, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [1, 0], [21], [19], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 2, 2, 0, 5, 0, 0, 1, 2, 1, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(\"\"t\"\")), ( i1 * i0 )):{:\\nres0 = in2 not in \"\"V\"\"[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(1.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 0], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 6, 5, 5, 5], [1, 0, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 1, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1], [1, 0, 1, 1], [2, 1, 3, 2, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [0, 0, 1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1, 1, 2], [], [23, 23], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 5, 5, 5, 0, 20, 3, 8, 1, 2, 3, 3, 0, 3, 0, 0, 0, 3, 0, 2, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),abs(min(i1, ( i0 * i0 )))), int(22.0))) \\l int(9.0):{:\\nres0 = len(in2) \\le min(max(mod(i2,int(6.0)), int(5.0)), i1)\\n:}\\nin0 = \"\"xx8\"\"\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1, 1], [0, 0], [1], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1, 2, 3, 7, 9, 6], [0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 0, 3, 1, 0, 2, 0, 1, 1, 3, 0, 0, 0, 0, 0, 2, 2, 2, 1, 3, 3, 1, 2, 2, 0, 3, 3, 2, 0, 1, 0, 1, 3, 1, 0, 1, 0, 2, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0, 0, 4, 4, 3, 4], [0, 0, 0, 0, 1, 2, 0, 1], [0, 0, 0, 0, 0, 0], [1, 5, 3, 2, 4, 5, 5, 3, 2, 0, 3, 2], [1, 1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 3, 0, 2, 3, 4, 2, 4, 2, 4, 0, 2, 1, 2, 2, 0, 1, 0, 2, 4, 0, 2, 2, 0], [0, 3, 2, 0], [4], [0, 2, 1, 2, 0, 2, 1, 1, 0, 1, 2, 2, 0], [2, 3], [], [], [4], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 17, 0, 53, 14, 10, 8, 6, 12, 2, 0, 35, 4, 1, 13, 2, 0, 0, 1, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1 not in in2[saveOrd((in0 + (s2[( divInt(len(in1),divInt(len(in2),( ( i0 + int(4.0) ) + int(7.0) ))) + int(2.0) ):][:i2] + (in2 + (getCharFromString(in0.capitalize()[:( i0 + min(int(8.0), i0) )].rstrip(\"\"4\"\"[:( i2 - int(7.0) )])[int(7.0):], min(i0, i0)) + s2[:i0][i0:i0])[( divInt(divInt(int(1.0),min(saveOrd(\"\"^\"\"), int(2.0))),( divInt(i1,saveOrd(s0)) * len(getCharFromString(in0, ( i1 + int(3.0) ))[i0:]) )) - int(7.0) ):saveOrd(s2[int(9.0):i1][int(6.0):])])))[i1:]):divInt(i0,i1)]\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [0, 1, 0, 0, 1, 1], [], [2, 2, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0, 2], [1, 3, 3, 3, 2, 2], [5], [5], [3, 8], [29, 22, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 10, 1, 4, 0, 1, 3, 6, 0, 13, 2, 0, 3, 6, 0, 1, 2, 3], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):len(getCharFromString((\"\"f^\"\" + \"\"=_3\"\"), i0))][divInt(len(getCharFromString(in2, i2)[i1:]),int(3.0)):]) \\le len((s1 + \"\"8\"\"))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1, 0, 9, 3, 9, 7, 7, 7, 4], [2, 2, 0, 0, 2, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0], [0, 1], [2, 2, 2, 3, 2, 3, 2, 2, 0, 2, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1, 1, 3, 2, 2, 0, 3, 2, 1, 3, 2, 3, 3, 2, 2, 1, 3, 2, 2, 3, 3, 3, 0, 1, 1, 2, 3, 0, 0, 2, 2, 1, 1, 3, 3, 0, 0, 3, 2, 3, 1, 0, 3, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 3, 3, 0, 0, 0, 3, 1, 2, 4, 2, 0, 4, 0, 4, 0, 4], [0, 0, 0, 0, 1, 2, 0, 1, 0, 2, 2, 2], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 5, 3, 2, 4, 5, 2, 5], [1, 1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 0, 2, 0, 1, 1], [0, 3, 2], [4], [0, 2, 1, 0, 2], [2, 2], [], [], [7, 9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 15, 15, 15, 0, 69, 22, 17, 12, 10, 8, 2, 0, 17, 0, 0, 5, 2, 0, 0, 2, 0], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = divInt(divInt(divInt(len(in0),( len(in2[( ( i2 + ( int(4.0) + int(8.0) ) ) + i2 ):( divInt(i0,int(2.0)) + i0 )]) - ( i2 * int(8.0) ) )),int(7.0)),len((in0 + (s2[( ( i0 + min(( int(7.0) - min(( min(len(in1), ( mod(int(1.0),max(divInt(( abs(saveOrd(in2)) + abs(i0) ),int(0.0)), int(9.0))) * mod(min(i0, i0),divInt(mod(int(3.0),int(9.0)),saveOrd(s2))) )) * min(i1, i0) ), saveOrd(in2[mod(min(int(7.0), i1),saveOrd(\"\"7\"\")):])) ), int(7.0)) ) * i2 ):int(7.0)][:i0] + \"\"9\"\"))[i0:])) \\le int(4.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1, 0, 9, 6, 0, 4, 4, 6, 4, 3, 6, 5, 0, 9], [0, 2, 2, 0, 2, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 2, 0], [0, 1], [1, 2, 2, 2, 3, 3, 3, 2, 2, 0, 2, 0, 3, 1, 2, 0, 2, 0, 0, 0, 0, 2, 1, 0, 3, 2, 1, 0, 2, 1, 2, 0, 2, 3, 1, 1, 3, 1, 3, 0, 2, 3, 3, 0, 0, 2, 3, 0, 0, 1, 0, 2, 3, 2, 0, 3, 2, 2, 1, 1, 0, 2, 1, 0, 3, 2, 2, 1, 3, 1, 1, 0, 1, 2, 1, 3, 0, 1, 3, 1, 1, 3, 1, 3, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [4, 3, 3, 2, 0, 0, 2, 3, 4, 3, 1, 4, 4, 2, 2, 0, 4, 2, 4, 1, 0, 1, 4], [0, 0, 0, 0, 1, 2, 0, 0, 2, 0, 0, 0, 1, 2], [0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 5, 3, 2, 4, 5, 5, 2, 5, 0], [1, 1, 1, 1], [], [4, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 2, 3, 2, 0, 1, 4, 2, 2, 0, 2, 4, 4, 2, 0, 0, 1, 2, 4, 2, 1, 0, 4, 1], [0, 3, 2, 0, 3, 0], [0, 3], [0, 2, 2, 2, 1, 0, 1, 0, 2, 0, 2, 1], [0, 1, 1, 1], [8], [8, 4, 11], [], [18]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 20, 20, 21, 0, 81, 23, 17, 14, 9, 9, 4, 0, 34, 6, 2, 12, 4, 1, 3, 0, 0], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( int(4.0) \\le ( divInt(divInt(saveOrd(getCharFromString(s1, len((in2 + (in0[len(s2):][( ( i0 + ( i2 + abs(int(7.0)) ) ) + ( i2 + ( i0 - i2 ) ) ):] + (in1[i2:i1] + \"\"I\"\")[:( int(2.0) * i0 )]))[min(divInt(int(8.0),i0), ( int(7.0) + ( i0 + mod(min(int(7.0), int(1.0)),abs(int(0.0))) ) )):][len(in2[i1:divInt(saveOrd(getCharFromString(in2[len(s2):i0], i1).capitalize()[( max(i0, i1) * int(9.0) ):]),i0)][:divInt(saveOrd(\"\"i\"\"),( i1 + saveOrd(\"\"e\"\"[:mod(( int(6.0) + int(0.0) ),i0)].lstrip(in2)[mod(int(4.0),i0):]) ))].lstrip()):abs(( mod(int(4.0),abs(int(6.0))) + int(4.0) ))]))),i1),int(3.0)) - ( int(6.0) * min(i2, int(5.0)) ) ) and saveOrd(getCharFromString(\"\"l\"\", int(0.0))) \\le int(9.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [0, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 1, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 2, 2, 4, 5], [1], [], [3, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1], [0, 3, 2], [4], [2, 0, 1], [2], [], [], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 4, 0, 18, 6, 3, 3, 3, 5, 1, 0, 12, 0, 0, 3, 1, 0, 0, 1, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd((s0 + in2)) \\le ( divInt(len((s2 + (s2[:divInt(len(in1),( ( int(4.0) + i0 ) - int(6.0) ))][int(3.0):i2] + \"\"7\"\"))[divInt(int(8.0),i2):]),int(7.0)) + i0 )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 0], [2], [0, 1], [], [0, 0], [], [], [3, 1], [5, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1], [4, 7, 9, 7, 7, 6, 1, 3, 6, 6, 6, 3, 3], [2, 1, 2, 0, 2, 2, 1, 0, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 1, 2, 3, 2, 1, 2, 3, 0, 3, 0, 1, 3, 2, 0, 3, 3, 0, 1, 3, 1, 1, 2, 3, 3, 1, 2, 3, 2, 2, 1, 0, 0, 0, 2, 3, 0, 0, 3, 1, 3], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [4, 3, 1, 0, 0, 0, 1, 0, 1, 3, 3, 3, 3, 0, 2, 3], [2, 0, 0, 2, 2, 2, 0], [0, 0, 0, 1, 1, 1, 1, 1], [1, 5, 4, 2, 4, 5, 0], [1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 0, 1], [0, 3, 2], [4], [2, 2, 0], [1, 1], [], [6, 0], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 12, 1, 50, 13, 16, 5, 8, 7, 2, 0, 14, 0, 0, 3, 2, 0, 2, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) != ( divInt(len(in2),divInt(max(i2, ( i1 * int(4.0) )),int(7.0))) + ( min(divInt(int(9.0),( min(i2, min(i0, int(7.0))) + max(( i2 * min(max(i2, int(7.0)), len(in1)) ), int(6.0)) )), int(1.0)) * mod(len((s2 + (in1[len(in2):int(36.0)][mod(len(\"\"g\"\"),mod(mod(int(6.0),i1),i0)):] + s0))[i1:]),mod(min(i2, i0),abs(int(633.0)))) ) )\\ni2 = len(\"\"a\"\")\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 0, 7, 2, 2, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 1, 1, 1, 1], [1, 0, 1, 1], [4, 1, 4, 0, 1, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [0, 0, 1, 1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0, 4, 1], [0, 3, 2], [4], [0, 0, 1], [1, 3, 1, 3], [], [0, 10], [], [4, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 8, 8, 5, 0, 24, 3, 9, 1, 2, 5, 4, 0, 13, 1, 0, 3, 4, 0, 2, 0, 2], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in1) \\l max(divInt(saveOrd(in2),min(max(i1, ( i1 * i1 )), i2)), int(22.0)):{:\\nres0 = len(\"\"a!k\"\") \\le len((in0 + (s2[:saveOrd(in1)][mod(i1,int(0.0)):int(7.0)] + getCharFromString(\"\"\"\"\", int(2.0))))[max(int(2.0), int(5.0)):int(3.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 5], [2, 1], [0, 0], [0], [0], [0], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 7, 0, 0, 2, 8, 5], [0, 1, 1, 2, 1, 0, 1], [1], [1, 3, 2, 2, 3, 2, 3, 2, 3, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0], [0, 1, 1, 1, 1, 1, 0, 0], [1, 3, 3, 1, 1, 3, 1, 4, 2], [1, 2, 1, 0], [1, 1, 1, 1, 1, 1], [0, 5, 1, 5, 1, 5], [1], [], [0, 1, 2, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 1, 1], [0], [10], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0 in \"\"K\"\"\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [2, 1], [0, 0], [3], [], [], [], [], [0, 1, 0, 1, 1, 1, 1], [1, 6, 9, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1, 1], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 0, 1, 1, 0, 0], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 1, 0], [3, 5, 1, 4, 4], [1, 1, 0, 1], [], [3, 0, 0, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [1, 0], [1, 1, 2, 3], [5], [5, 15], [3], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 4, 4, 0, 13, 2, 0, 1, 4, 0, 2, 1, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (in0 + in2) != getCharFromString((\"\"f\"\" + \"\"p\"\"), saveOrd(getCharFromString(s1, int(16.0))[:len((in1 + \"\"3#\"\"))]))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1], [2, 1, 1, 1, 1, 2, 0], [1, 2], [0, 2, 1, 0, 1], [], [0, 0], [], [], [3, 1], [0, 4, 2], [1, 1, 2, 1], [0, 0, 0], [5], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [2, 2, 9, 7, 5, 5, 5, 6, 2, 5, 8, 3, 0, 1, 9, 1, 8, 7, 3, 9, 7, 3, 8, 9, 2, 2, 2, 4, 4, 6, 2, 5, 5, 1, 0, 7, 9, 5, 8, 8, 6, 8, 8, 7, 0, 0, 6, 7, 9, 9], [1, 0, 1, 2, 1, 0, 0, 1, 1, 2, 2, 1, 0, 0, 2, 1, 2, 1, 2, 2, 0, 2, 0, 2, 1, 0, 1, 1, 1, 1, 0, 0, 2, 1], [1, 1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 2, 2, 3, 1, 1, 3, 1, 1, 1, 3, 0, 1, 1, 1, 1, 3, 0, 0, 1, 3, 1, 0, 1, 0, 2, 1, 1, 2, 2, 2, 3, 3, 3, 2, 3, 2, 2, 0, 1, 1, 3, 0, 0, 1, 1, 3, 3, 1, 0, 2, 2, 0, 1, 2, 2, 1, 3, 2, 1, 3, 2, 0, 2, 2, 1, 2, 1, 2, 2, 3, 3, 2, 0, 2, 3, 0, 3, 2, 2, 0, 3, 0, 2, 2, 2, 3, 0, 0, 0, 3, 0, 1, 2, 0, 3, 1, 0, 1, 0, 3, 3, 2, 0, 3, 3, 0, 3, 2, 0, 1, 2, 1, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4, 1, 0, 2, 0, 0, 3, 3, 3, 2, 4, 2, 0, 3, 2, 2, 2, 0, 2, 1, 0, 4, 0, 3, 2, 0], [0, 2, 0, 2, 1, 2, 0, 0, 1, 0, 1, 0, 2, 1, 2, 2, 2, 2], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0], [4, 5, 3, 2, 4, 5, 3, 0, 4, 2, 3], [1, 1, 1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 4, 3, 0, 0, 2, 1, 2, 3, 2, 1, 2, 0, 4, 4, 2, 2, 4, 1, 4, 1, 4, 4, 1, 2, 4, 1, 0, 1], [0, 3, 2, 0, 0, 1, 0, 2, 0], [4], [0, 2, 1, 0, 0, 1, 1, 1, 0, 2], [2, 1, 1, 3, 1, 2, 2], [], [15, 6, 19], [6, 4, 5], [22]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 0, 1, 0, 0, 2, 3, 4, 3, 1, 0, 0, 0, 1, 50, 50, 34, 2, 139, 35, 35, 18, 19, 11, 7, 0, 40, 9, 1, 10, 7, 0, 3, 3, 1], "tree_depth": 70, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 + i1 )), i2)), int(22.0))) \\l len(in2):{:\\nres0 = min(max(mod(i1,int(9.0)), int(7.0)), i0) \\le divInt(( divInt(max(int(5.0), int(5.0)),saveOrd(in0)) * int(5.0) ),int(6.0))\\n:}else:{:\\ns2 = (in1 + (in2[:int(25.0)][max(i0, int(8.0)):] + in0))[int(3.0):int(0.0)]\\ni1 += int(191.0)\\nb1 = getCharFromString((s0 + in1).rstrip(\"\"6\"\"[min(i1, i2):int(87.0)]), abs(int(3.0))).endswith((\"\"p\"\"[:i2] + s2[:int(97.0)])[i1:( int(3.0) * int(8922.0) )])\\nloopBreak% = 0\\nwhile mod(( ( min(min(len(getCharFromString(getCharFromString(\"\"g\"\", mod(len(saveChr(mod(mod(i0,int(2.0)),int(4.0)))),len(\"\"=\"\")))[i0:i2][:int(4.0)], int(6.0)).capitalize()), abs(saveOrd(getCharFromString(\"\"t\"\".capitalize(), int(2.0))))), i1) - mod(( i2 * int(5.0) ),( divInt(int(5.0),abs(mod(int(1.0),min(( i1 + divInt(( int(0.0) + ( int(7.0) - ( mod(len(getCharFromString(\"\"4\"\", abs(mod(i2,divInt(abs(i2),abs(( ( i0 + min(i2, mod(( ( abs(i0) - i2 ) + i1 ),max(i0, int(9.0)))) ) * mod(i1,min(int(5.0), i1)) ))))))[int(8.0):]),i1) - saveOrd(in0) ) ) ),min(divInt(i1,len(\"\"5\"\")), abs(i0))) ), min(( i0 * int(8.0) ), divInt(int(6.0),int(8.0))))))) * int(8.0) )) ) * i2 ),int(7.0)) == int(0.0):{:\\ni1 *= int(06799.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2, 1, 2], [0, 0], [2], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 7, 7, 0, 5, 5, 3, 1, 2, 7, 8, 0, 3, 1, 1, 3, 6, 5, 1, 1, 6], [1, 1, 1, 2, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2, 2, 2, 0, 1, 0, 1, 2, 0, 1, 0, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 3, 0, 1, 2, 3, 3, 1, 0, 0, 1, 0, 0, 2, 1, 2, 1, 1, 1, 0, 2, 3, 0, 3, 3, 0, 3, 2, 0, 2, 3, 2, 2, 2, 2, 0, 2, 0, 2, 2, 1, 3, 0, 0, 3, 0, 2, 2, 1, 2, 2, 1, 0, 0, 0, 2, 2, 3, 3, 1, 0, 3, 3, 1, 1, 3, 1, 1, 2, 0, 0, 1, 0, 2, 0, 2, 0, 3, 2, 2, 1, 1, 3, 2, 0, 0], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0], [2, 1, 3, 0, 0, 3, 3, 1, 1, 3, 3, 0, 4, 1, 3, 1, 0, 4, 3, 2, 3, 4], [1, 1, 1, 2, 0, 0, 2, 2, 0, 2, 1, 2], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [4, 5, 3, 2, 4, 5], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 4, 2, 2, 0, 1, 2, 2, 1, 4, 1, 1, 3, 4, 2, 2, 4, 1, 4, 1, 1, 2, 0, 2, 1, 1, 4, 4, 1, 2, 1], [0, 3, 2, 0, 0, 1, 3], [4, 5], [0, 1, 0, 1, 0, 2, 2, 2, 0, 2], [1, 3, 0, 1, 1, 0, 2, 3, 0, 2, 2, 0, 0], [17, 13, 2, 22, 9], [0, 8, 24], [9, 8, 6], [11, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 22, 22, 27, 0, 94, 27, 22, 12, 15, 6, 13, 0, 37, 7, 2, 10, 13, 5, 3, 3, 2], "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i1 - len(in2) )), i1)), int(22.0))) \\l mod(len(in0),max(int(7.0), i2)):{:\\nres0 = (s2 + (getCharFromString(in1[i1:int(7.0)][:i1], i1) + \"\"a(R\"\"))[divInt(int(0.0),( int(5.0) - int(5.0) )):int(3127.0)] == \"\"i\"\"[i1:( max(i0, len(\"\"y\"\".rstrip(\"\"N\"\"))) - len((getCharFromString(\"\"9\"\", i2)[min(( i1 * mod(saveOrd(getCharFromString(\"\"`\"\", mod(divInt(divInt(( i1 + ( i1 + ( mod(int(8.0),max(i2, i2)) * len(\"\"C\"\") ) ) ),i2),divInt(( int(0.0) * divInt(mod(int(3.0),i0),i1) ),i0)),mod(mod(max(min(int(1.0), i1), saveOrd(in2[len(\"\"8\"\"[int(1.0):int(3.0)]):])),abs(int(6.0))),int(5.0))))),mod(i2,i0)) ), int(1.0)):][i1:].capitalize() + \"\"6\"\")) )][:( i0 + ( i0 * len(saveChr(( mod(int(1.0),int(6.0)) - saveOrd(\"\"W\"\".strip(\"\"J\"\"[( i1 * i0 ):])) ))) ) )]\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0], [2, 2], [0, 1], [], [0, 0], [], [], [3, 0], [0, 5], [1, 0, 2], [0, 0], [5], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 4, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 1, 3, 3, 3, 2, 0, 0, 1, 1, 3, 3, 3, 2, 0, 1, 1, 2, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [0, 0, 0, 2, 2, 2, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [1], [], [0, 0, 0, 1, 3, 2, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [1], [], [0], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 2, 1, 3, 1, 1, 1, 0, 0, 0, 4, 4, 2, 0, 13, 2, 6, 1, 1, 3, 1, 0, 4, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(int(22.0),len(in1)), min(min(( i1 + i1 ), int(4.0)), int(7.0)))) \\l len(in2):{:\\nloopBreak% = 0\\nwhile res0:{:\\nb0 = in0.endswith(\"\"a\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 0, 6, 8, 7, 7, 1, 6, 9, 6, 8, 4, 1, 2, 9, 1, 7, 5, 3, 7, 8, 6, 3, 5, 8, 6], [2, 2, 2, 0, 2, 2, 2, 1, 1, 0, 2, 0, 0, 1, 1, 1, 0, 1, 2, 2, 1, 1, 2, 1, 2, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1, 2, 0, 2, 3, 3, 1, 3, 1, 1, 3, 3, 2, 3, 2, 0, 3, 1, 3, 2, 3, 2, 0, 2, 0, 0, 1, 2, 1, 1, 3, 2, 1, 0, 2, 3, 0, 3, 3, 3, 3, 1, 1, 3, 0, 2, 1, 2, 3, 2, 0, 1, 3, 3, 3, 2, 0, 2, 1, 1, 2, 3, 2, 3, 2, 1, 1, 2, 3, 3, 3, 3, 3, 0, 3, 2, 0, 2, 0, 3, 0, 0, 0, 2, 3, 3, 1, 0, 2, 0, 2, 3, 0, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [4, 4, 3, 0, 0, 1, 4, 0, 1, 2, 3, 4, 3, 0, 2, 4, 3, 4, 2, 0, 3, 1, 4, 0, 2, 1, 1, 2, 0, 3, 0, 4, 4, 3, 1, 2], [1, 0, 0, 2, 1, 2, 0, 2, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [1, 5, 1, 2, 4, 5, 4, 3, 0, 4, 3, 1], [1, 1, 1, 1, 1, 1, 1, 1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 2, 1, 4, 2, 1, 4, 0, 2, 2, 2, 1, 1, 4, 1, 2, 0, 2, 1, 1, 0, 0, 0, 3, 2, 2, 0, 4, 1], [0, 3, 2, 0, 2], [4], [0, 1, 0, 0, 2, 1, 1, 0, 1, 2, 0, 1], [3, 0, 1, 3, 3, 1, 3, 1], [2], [24, 20, 20], [], [23, 10, 4, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 26, 26, 26, 0, 119, 32, 36, 13, 19, 12, 8, 0, 40, 5, 1, 12, 8, 1, 3, 0, 4], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(getCharFromString(s1, ( divInt(saveOrd(in2),mod(len((s1 + (s2[( divInt(int(3.0),i2) - i2 ):min(int(0.0), mod(int(6.0),i2))][:int(8.0)] + in1))[i0:( i2 + int(7.0) )]),( i2 + divInt(min(max(int(7.0), saveOrd(in2)), int(1.0)),int(6.0)) ))) * min(max(( abs(mod(i2,len(\"\">\"\"[int(9.0):saveOrd(\"\"C\"\"[( len(in1.capitalize()) - ( i1 * ( i1 + i0 ) ) ):].rstrip(\"\"y\"\"[int(6.0):mod(int(8.0),int(4.0))][:min(divInt(int(1.0),i2), ( abs(i0) * saveOrd(\"\"\"\\\\\"\"\") ))][:len(getCharFromString(\"\"!\"\", saveOrd(in0[:abs(int(2.0))])))]))]))) + int(91.0) ), min(i0, mod(int(7.0),( len(\"\"u\"\"[( i1 + int(5.0) ):]) + max(saveOrd(\"\"\\\\\\\\\"\"), min(mod(i1,mod(int(3.0),int(7.0))), divInt(abs(divInt(max(( int(8.0) - int(6.0) ), mod(max(abs(min(len(s0), min(i1, saveOrd(in1)))), mod(i0,mod(i1,saveOrd(in0)))),i2)),i2)),i1))) )))), ( len((s1[:max(int(3.0), i1)][divInt(i2,divInt(abs(i1),int(5.0))):int(8.0)] + \"\"u\"\".capitalize())) + divInt(i2,i2) )) ))) \\le int(6.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 0, 0, 3, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0], [3, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [2], [], [], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 3, 3, 3, 0, 14, 5, 3, 2, 3, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( len(\"\"0\"\") \\le ( divInt(len(s1),divInt(len(in2),divInt(( i0 + int(4.0) ),int(7.0)))) + int(2.0) ) and i2 \\le i0 )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [5], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 2, 4, 7, 7, 8, 5, 3, 0, 2, 2, 6, 7, 4, 6, 9, 4, 4, 5, 0, 9, 2, 7, 7, 7, 0, 6, 3, 8], [1, 1, 1, 2, 1, 1, 1, 0, 2, 0, 1, 0, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 3, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1, 2, 1, 3, 2, 2, 2, 3, 1, 3, 0, 0, 1, 1, 2, 1, 2, 1, 2, 2, 0, 3, 3, 3, 2, 1, 3, 2, 1, 1, 3, 3, 0, 2, 3, 2, 1, 1, 0, 0, 2, 1, 1, 0, 1, 2, 1, 0, 0], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0], [2, 1, 1, 0, 0, 3, 3, 4, 1, 2, 4, 2, 3, 2, 1, 1, 4, 1, 2, 0, 3], [2, 0, 2, 0, 1, 0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [4, 5, 3, 2, 4, 5, 0, 5], [1, 1, 0, 0, 1, 1, 0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 4, 2, 2, 2, 4, 0, 0, 1, 4, 2, 1, 2, 0, 2, 4, 1, 3, 1, 1], [0, 3, 2, 3], [4, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2], [0, 2, 2, 3, 3, 0, 3, 3], [23, 22], [], [9, 7], [8, 16, 1, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 29, 29, 13, 0, 73, 17, 21, 6, 11, 8, 8, 0, 29, 4, 2, 9, 8, 2, 0, 2, 4], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(max(min(min(i1, ( len(in1) * i1 )), i1), int(22.0)),len(in2)), saveOrd(in0))) \\l max(mod(i2,int(4.0)), int(7.0)):{:\\nres0 = (s2 + (in1[int(7.0):][abs(saveOrd(getCharFromString(in2.rstrip(s0)[int(8.0):int(5.0)][int(3.0):divInt(int(0.0),abs(mod(( ( len(\"\"X\"\") + int(2.0) ) * abs(i1) ),i1)))][:int(2.0)], int(6.0)))):mod(int(74.0),mod(int(69.0),mod(divInt(i1,max(max(saveOrd(\"\"9\"\"[:mod(int(4.0),max(( int(4.0) + int(5.0) ), abs(min(i0, ( len(in2[:divInt(int(0.0),int(9.0))]) - i2 )))))].capitalize()), i0), divInt(int(2.0),int(7.0)))),i1)))] + \"\"7%-\"\".strip()[int(77.0):]))[( int(0638.0) + i0 ):i0].endswith((\"\"W\"\" + \"\"\\\\\\n)\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 9, 3, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 0, 2, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1], [], [12], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 4, 0, 18, 7, 3, 5, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(len(\"\"m\"\"),( ( i0 - int(4.0) ) + int(7.0) ))) + int(9.0) ) and i2 \\le ( i0 + ( int(3.0) - i0 ) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1], [6, 1, 9, 7, 3, 5, 5], [0, 2, 2, 2, 2, 0, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0], [1, 1, 3, 0, 0, 3, 0, 1, 1], [1, 1, 0], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [1, 1], [], [1, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1, 3], [], [17], [], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 8, 0, 20, 3, 8, 1, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(max(( len(\"\"r\"\") - min(min(i0, divInt(i2,i2)), i2) ), int(6.0)), len(\"\"\\\\\\n\"\")) \\l min(max(mod(i2,i0), i1), i2)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1], [2, 1, 1, 0, 2, 2, 2, 0], [1, 0, 2, 0], [0, 2, 0, 2], [0, 0], [0, 0], [], [], [3, 1, 2], [0, 4], [1, 1, 0, 2], [0, 0], [1], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 3, 7, 5, 5, 5, 6, 5, 1, 4, 1, 5], [0, 0, 0, 2, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1, 0, 3, 0, 3, 2, 0, 1, 0, 2, 1, 2, 1, 0, 2, 2, 0, 1, 2, 3, 0, 3, 2, 2, 1, 1, 0, 3, 3, 0, 3, 0, 1], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0], [2, 1, 3, 4, 0, 3, 0, 1, 1, 4, 0, 2, 0, 2, 0], [2, 1, 2, 1, 2, 1, 0], [0, 1, 0, 1, 0], [4, 5, 3, 2, 4, 5, 2, 1, 3, 2, 4, 4, 5, 5], [0, 1, 1, 1, 1], [0, 0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 0, 4, 0, 3, 4, 1, 0, 1, 2, 1, 1], [0, 3, 2], [4], [0, 1, 0, 0], [0, 0, 2, 2, 0], [0, 22, 11], [], [0, 5], []], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 4, 4, 2, 2, 0, 0, 3, 2, 4, 2, 1, 1, 0, 0, 1, 13, 13, 16, 0, 55, 12, 15, 7, 5, 14, 5, 2, 23, 2, 1, 4, 5, 3, 0, 2, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),saveOrd(in2)), min(i0, mod(i0,i0)))) \\l i2:{:\\nres0 = int(22.0) \\le len(in0)\\n:}else:{:\\ns2 = (in1 + (in2[min(max(divInt(i1,int(3.0)), int(7.0)), i1):( int(5.0) * int(5.0) )][:i1] + s2))[max(i1, saveOrd(s1)):mod(i1,int(5.0))]\\nb1 = b2\\nloopBreak% = 0\\nfor in0 in s2:{:\\nloopBreak% = 0\\nwhile getCharFromString(in1, i0) not in (\"\"AW\"\".rstrip(in1) + \"\"0\"\"):{:\\nloopBreak% = 0\\nfor in2 in \"\"5\"\"[divInt(int(6.0),( int(5.0) - i0 )):( ( i1 * int(1.0) ) - ( min(i1, abs(( ( int(4.0) * int(1.0) ) - i1 ))) + min(abs(i1), min(i0, int(5.0))) ) )]:{:\\nin2 = \"\"L\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 3, 5, 7, 7, 1], [2, 1, 2, 0, 2], [0, 1], [3, 2, 2, 3, 1, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [3, 0, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [0], [6], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 5, 3, 3, 2, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(s0) \\le ( divInt(min(int(4.0), len(\"\"G\"\")),mod(( int(6.0) + i2 ),int(3.0))) + int(5.0) ):{:\\nres0 = i1 \\le ( int(7.0) + i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 3, 1, 7, 7, 1, 6, 3, 1, 6, 3, 7, 5, 1, 0, 6, 7, 1, 8, 0, 6, 4, 0, 6, 3, 8, 9, 0, 9, 2, 5, 9, 4, 7, 3, 8, 9, 4, 3, 4, 8, 8], [0, 2, 1, 0, 2, 1, 1, 0, 1, 0, 1, 2, 0, 2, 1, 1, 0, 1, 0, 1, 2, 1, 1, 2, 0, 1, 2, 0, 0, 2, 2, 1], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 1, 1, 1, 2, 3, 0, 1, 2, 2, 1, 0, 3, 3, 0, 2, 2, 3, 0, 2, 1, 3, 0, 1, 3, 0, 1, 2, 1, 0, 2, 1, 3, 0, 1, 0, 3, 3, 1, 2, 0, 1, 2, 0, 1, 2, 1, 0, 1, 2, 2, 1, 2, 2, 3, 2, 3, 3, 0, 3, 3, 0, 1, 2, 3, 0, 1, 2, 2, 2, 2, 3, 3, 1, 1, 2, 2, 0, 3, 3, 2, 3, 0, 3, 0, 0, 3, 1, 2, 0, 0, 0, 0, 0, 2, 2, 0, 1, 0, 1, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [4, 3, 3, 0, 0, 0, 2, 0, 1, 4, 0, 1, 3, 4, 0, 0, 4, 3, 1, 4, 3, 4, 1, 4, 2], [0, 0, 0, 2, 1, 2, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 0, 2], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [4, 5, 3, 2, 4, 5, 3, 3, 3, 5, 4, 3, 0], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [], [2, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 4, 3, 1, 4, 1, 3, 3, 3, 4, 3, 1, 3, 4, 2, 2, 0, 2, 1, 2, 0, 4, 4, 2, 1, 2, 1, 4, 2, 0, 2, 0, 1, 2, 4, 0, 1, 1, 0, 2, 2, 2, 0], [0, 3, 2, 1, 0, 2, 1, 3, 3], [4, 3, 0], [2, 1, 1, 2, 2, 2, 1, 0, 0, 0, 2, 2, 0, 1, 1, 2], [2, 0, 1, 2, 1, 3, 2, 1, 1, 0, 2, 3], [15, 18], [16, 14, 6, 3], [6, 3, 2, 8], [9, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 43, 43, 32, 0, 124, 36, 25, 18, 18, 13, 12, 0, 54, 9, 3, 16, 12, 2, 4, 4, 2], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(in1[( mod(len(in2),divInt(len((in0 + (s2[divInt(( int(2.0) + i0 ),int(6.0)):][:int(3.0)] + in1))[:i2]),mod(int(1.0),i1))) + int(7.0) ):]) \\le i0:{:\\nres0 = ( i2 + int(716.0) ) \\le ( int(31637.0) * int(5106.0) )\\nin2 = getCharFromString((\"\"6\"\" + \"\"Pq\"\".capitalize()).rstrip((((saveChr(int(71.0)) + (\"\"3o&\"\" + (getCharFromString(in0[( min(i1, int(8.0)) - ( ( int(0.0) * i1 ) + min(min(i0, ( ( abs(i1) * divInt(int(6.0),min(i0, int(4.0))) ) * max(i1, int(0.0)) )), divInt(int(6.0),i2)) ) ):][( int(3.0) * saveOrd(\"\"2\"\"[:i0]) ):], int(89.0)) + in0[i2:min(max(int(0.0), mod(i1,int(9.0))), divInt(i1,int(2.0)))]))) + saveChr(mod(int(5.0),i0)).capitalize()) + \"\"g\"\"[int(94.0):mod(divInt(int(7.0),divInt(( len(\"\"d\"\"[divInt(saveOrd(in0[min(i1, min(saveOrd(in2[i0:]), int(3.0))):].lstrip(\"\"S\"\")),divInt(len(in1.lstrip()[i1:int(8.0)]),divInt(( ( ( max(saveOrd(\"\"8\"\"), int(9.0)) - int(4.0) ) - ( divInt(i2,len(\"\"#\"\")) * saveOrd(in0) ) ) + divInt(max(i1, saveOrd(s0[i1:][:i2][:abs(int(3.0))])),( i0 + i1 )) ),i2))):i0]) - i0 ),( ( i2 + int(4.0) ) * i2 ))),int(8.0))])), mod(i1,int(8.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 3], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 2, 8, 7, 7, 1, 1, 6, 8, 2, 9, 4], [0, 2, 0, 0, 2, 1, 2, 2, 0, 2, 2, 0, 1, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 3, 2, 0, 3, 3, 0, 2, 0, 1, 2, 0, 2, 0, 2, 0, 3, 0, 3, 2, 1, 2, 1, 1, 1, 3, 0, 2, 0, 2, 1, 3, 0, 1, 3, 3, 2, 3, 3, 2, 3, 2, 3, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [4, 3, 3, 0, 0, 2, 4, 4, 1, 1, 0, 3, 4, 0, 3, 2, 4, 1, 0, 4], [0, 0, 0, 0, 1, 2, 0, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1], [1, 5, 3, 2, 4, 5, 3, 4, 3, 0], [1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0, 4, 0, 1, 2, 0, 1, 4, 4, 0], [0, 3, 2, 1], [4], [0, 1, 2, 0], [1, 0], [12], [14], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 13, 13, 14, 0, 64, 17, 20, 10, 7, 10, 2, 0, 22, 4, 1, 4, 2, 1, 1, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( int(4.0) + int(0.0) ) + int(2.0) ))) + int(8.0) ) and min(( i0 + min(abs(i2), ( i0 - int(7.0) )) ), ( i0 * ( i2 + ( i1 - saveOrd((s2 + (in1[i2:][:saveOrd(in2)] + getCharFromString(in0, divInt(int(7.0),mod(int(1.0),int(1.0))))))[int(6.0):max(i2, mod(i0,( int(8.0) - max(i2, int(2.0)) )))]) ) ) )) \\ge min(len(in1.rstrip(\"\"o\"\")), mod(saveOrd(in0[min(( len(\"\"M\"\") + mod(abs(i2),i0) ), i1):i0]),saveOrd(saveChr(max(min(saveOrd(s0), int(9.0)), int(4.0))).capitalize()))) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 2, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 1, 3, 3, 2, 2, 1, 0, 1, 2, 1, 3, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 0, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [3], [], [], [], [31]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 2, 3, 1, 1, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(int(3.0),len(in2)) - len(\"\"`\"\") )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [8, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [1, 0, 1, 0, 1], [], [2, 0, 4, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1, 3, 3, 2, 0], [5], [5], [6], [20, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 1, 11, 1, 4, 1, 1, 3, 5, 0, 13, 3, 0, 2, 5, 1, 1, 1, 2], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(86.0):]) \\le len(getCharFromString(getCharFromString((\"\"f\"\" + \"\";\"\"\"), i0), divInt(len(getCharFromString(in2, i2)[i1:int(3.0)]),len((s1 + \"\"6F\"\")))))\\ni0 += int(7.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [1], [], [24], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 16, 5, 5, 3, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(in2),divInt(len(\"\"y\"\"),( min(i2, int(3.0)) + int(7.0) ))) + min(int(9.0), ( int(5.0) + i2 )) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 1], [2, 2, 1, 1, 1], [2, 0], [0, 2, 2], [0], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 6, 5, 7, 3, 7, 5, 4, 8, 9], [1, 0, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 0, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 0, 3, 2, 0, 1, 1, 2, 3, 1, 3, 3, 3, 3, 1, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 3, 1], [0, 0, 0, 1, 0], [2, 1, 3, 0, 0, 3, 1, 1, 1, 1, 4, 1, 2], [2, 2, 0, 1], [0, 1, 0], [5, 5, 3, 2, 4, 5, 2, 2, 1, 5], [1, 1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 2, 2, 1, 4, 0, 1], [0, 3, 2], [4], [0, 0, 2, 1, 1], [3, 0], [1], [], [], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 10, 10, 14, 0, 40, 5, 13, 4, 1, 10, 2, 1, 18, 1, 0, 5, 2, 1, 0, 0, 1], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(( len(in2) * min(min(i1, ( i0 * i1 )), i2) ), int(26.0))) \\l len(in2):{:\\nloopBreak% = 0\\nfor in0 in s2:{:\\nres0 = i1 \\le max(( i1 + int(5.0) ), int(7.0))\\nin1 = (in2 + (s2[divInt(max(int(3.0), max(max(saveOrd(s2), max(int(7.0), int(5.0))), i1)),( int(4.0) - i1 )):][i2:i2] + (\"\"%\"\"[:i2][:i2] + getCharFromString(s1, i0))))[i2:abs(int(89.0))]\\nin2 = \"\"B\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 4, 7, 5, 5, 5, 3, 7], [1, 0, 1, 2, 1, 1, 2, 1], [1], [3, 3, 2, 3, 3, 2, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 3, 1, 0, 2, 1, 1, 1, 3, 2, 0, 3, 1, 1, 0], [1, 1, 1, 0, 1, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1, 1], [2], [0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [2], [], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 9, 9, 8, 0, 31, 6, 10, 1, 5, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(\"\"1\"\"),min(mod(i1,divInt(i0,i1)), i2)), int(22.0))) \\le min(len(in1), min(( i1 * max(int(4.0), i1) ), divInt(int(7.0),int(5.0)))):{:\\nres0 = int(5.0) \\le max(divInt(i2,max(int(5.0), int(37.0))), i1)\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 1, 2, 2, 1, 0, 1, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 5, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 2, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5, 0, 1], [1], [], [4, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0, 4, 4, 1, 3, 0, 0], [0, 3, 2], [4], [0, 0, 1, 0], [0], [9], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 22, 22, 8, 0, 34, 10, 4, 5, 5, 8, 1, 0, 17, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(mod(len(getCharFromString(in1, len(in2))),( i1 * i0 )), ( mod(( int(0.0) * int(5.0) ),int(8.0)) + int(9.0) )):{:\\nres0 = in2[min(i2, i0):int(5.0)][int(5.0):int(6.0)] not in (s0[i2:int(2174.0)][:mod(i1,mod(( ( int(20.0) + i1 ) + int(65083.0) ),mod(i0,int(305.0))))] + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = \"\"J\"\".capitalize().rstrip((s0 + s1))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 2, 8, 7, 7, 1, 7, 5, 7], [0, 2, 2, 0, 2, 1, 2, 0, 2, 2, 1], [0, 1], [3, 2, 2, 3, 2, 0, 2, 2, 1, 1, 1, 1, 0, 2, 3, 0, 1, 0, 2, 0, 1, 0, 2, 3, 2, 3, 3, 1, 2, 2, 3, 2, 2, 2, 0, 3, 3, 0, 2, 1, 3, 3, 1, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0], [4, 3, 4, 0, 0, 4, 4, 3, 3, 4, 1], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 0, 3, 2, 4, 5, 2], [1, 1, 1, 1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 1, 2, 0, 1, 0, 2, 1, 4, 1], [0, 3, 2], [4], [2, 0, 1, 2, 1], [1, 1, 2, 2], [], [17, 9], [8, 5], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 10, 10, 11, 0, 47, 15, 11, 6, 9, 7, 4, 0, 21, 3, 1, 5, 4, 0, 2, 2, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le divInt(( len(getCharFromString(s0, divInt(i0,divInt(( int(4.0) + int(6.0) ),int(2.0))))) + int(8.0) ),i2):{:\\nres0 = mod(saveOrd((in0 + (s2[:i2][int(7.0):i0] + in1))[( i2 + int(7.0) ):]),i1) \\le mod(min(divInt(min(saveOrd(\"\"r\"\".rstrip(in2[int(1.0):])), ( divInt(saveOrd(\"\"j\"\"),divInt(mod(( i2 * len(s2) ),len(\"\"8\"\"[:i0])),( int(7.0) - saveOrd(\"\"5\"\".capitalize()) ))) * max(int(5.0), i2) )),i2), i1),int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 2], [1, 2], [0, 0], [3], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 3, 7, 2, 8, 5, 3], [1, 1, 1, 2, 2, 1], [1], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 4, 0, 3, 3, 4, 0, 2], [2], [0, 0, 0], [4, 5, 3, 2, 4, 2, 5], [0, 0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 1], [0, 3, 2], [4], [0, 0, 2], [3, 2, 2], [], [], [5, 3], [15]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 5, 0, 14, 1, 7, 0, 1, 7, 3, 0, 13, 0, 0, 3, 3, 0, 0, 2, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),saveOrd(in2)), min(i1, i1))) \\l i1:{:\\nres0 = in0 != (s2 + (in1[i2:][i2:int(22.0)] + s2))[len(in2):len(\"\",53\"\")]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [2], [2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [2, 6, 3, 7, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 1, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5, 1], [1, 1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 1], [0, 3, 2], [4], [2, 2, 1], [3, 3], [], [], [], [10, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 16, 5, 3, 3, 2, 7, 2, 0, 13, 1, 0, 3, 2, 0, 0, 0, 2], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(getCharFromString(s0, int(2.0))) \\le ( len(in2) + divInt(len((in0 + (s2[:divInt(( int(6.0) + i0 ),int(3.0))][int(7.0):] + in1))[i2:]),( int(7.0) + i2 )) ):{:\\nin2 = \"\"\"\\\\\"\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = \"\"\"\"\"\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [1, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 1, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 1, 3, 0, 2, 3, 0, 0, 1, 2, 3, 2, 3, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1], [1, 0, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5, 2], [0, 0, 1], [], [0, 1, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2, 0, 1], [3, 2, 3], [], [], [5], [8, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 8, 2, 20, 4, 7, 3, 3, 2, 3, 0, 3, 0, 0, 0, 3, 0, 0, 1, 2], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(min(mod(len(in1),int(10.0)), min(i1, ( min(i0, i2) * int(9.0) ))), mod(saveOrd(\"\"%5(\"\"),mod(len(in2),i1))) \\l int(8.0):{:\\ni2 -= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += i1\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1], [2, 0, 2, 2, 2, 1, 0, 1, 1], [2, 2, 0, 1], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [4, 4, 4], [0, 2, 1, 2, 0, 2, 0], [0, 0, 0], [4, 3, 2], [3, 2, 1], [1], [0], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 0, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 4, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [0, 5, 5, 0, 5, 5, 5, 4, 3], [0, 0, 1, 0, 1, 0, 0, 0, 1], [0], [4, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0, 0, 0, 1, 2, 1, 1], [0, 3, 2], [4], [1, 0, 1, 2], [0, 1, 3, 1, 3, 3, 0, 2, 0], [0, 7, 20], [6, 19], [8], [21, 26, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 4, 3, 1, 2, 0, 0, 1, 1, 7, 1, 3, 3, 1, 1, 1, 7, 7, 9, 2, 22, 5, 4, 4, 3, 9, 9, 1, 17, 1, 0, 4, 9, 3, 2, 1, 3], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( getCharFromString(s0, i1).startswith(in2) or max(mod(len(in2[:len(s0)]),( i0 * i2 )), mod(mod(( int(10.0) - int(9.0) ),int(8.0)),int(9.0))) \\le saveOrd((in2[:i1][i2:i1] + in2)) ):{:\\nres0 = in2 != in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not \"\"Ag<\"\" == \"\"t[\"\"[int(5.0):]:{:\\nloopBreak% = 0\\nfor in0 in \"\"@H8U\"\":{:\\nif True:{:\\ni1 += int(5.0)\\n:}\\ni0 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [2, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 1, 2, 0, 2, 2, 2, 0, 2, 0, 1, 1, 0, 2, 1, 0, 1, 1, 1], [2, 0, 1, 0, 1, 1, 2, 0, 1, 2, 0], [1, 2, 0, 2, 2, 1, 0, 1, 1, 2, 0, 2, 2, 2, 0, 1, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [], [], [3, 1, 2, 1, 0, 3], [4, 3, 5, 1, 3, 5], [1, 1, 0, 0, 2, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0], [0], [1, 1, 0, 0], [], [1, 1], [0, 1, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 8, 3, 8, 7, 7, 1, 6, 7, 6, 8, 4, 6, 3, 5, 0, 7, 1, 9, 3, 9, 5, 7, 3, 4, 7, 8, 8, 2, 1, 9, 0, 9, 4, 7, 4, 9, 5, 5, 0, 6], [0, 2, 2, 0, 2, 1, 2, 0, 1, 0, 1, 0, 1, 2, 0, 1, 0, 1, 1, 0, 1, 0, 2, 2], [0, 1, 0, 1, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 2, 0, 0, 0, 1, 1, 1, 3, 2, 1, 0, 1, 0, 1, 0, 1, 3, 1, 3, 3, 3, 1, 1, 0, 1, 2, 1, 1, 0, 0, 1, 2, 3, 2, 1, 3, 3, 3, 1, 0, 0, 1, 0, 3, 3, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0], [4, 3, 3, 0, 0, 3, 1, 2, 2, 0, 3, 2, 3, 1, 3], [0, 0, 0, 2, 1, 2, 0, 1, 0, 1, 2], [0, 0, 0, 0], [0, 5, 3, 2, 4, 5, 0, 3, 2, 0, 1, 0, 5, 5, 1, 0, 4, 2, 2, 2, 1, 1, 1, 1, 4, 0, 5, 3, 0, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 2, 2, 1, 4, 1, 2, 2, 0, 1, 4, 0, 0, 0, 0, 1, 1, 2, 0, 1, 1, 0, 0, 3, 4, 3, 4, 2, 0, 2, 4, 1, 0, 0, 1], [0, 3, 2, 2, 0], [4], [2, 1, 2, 0, 0, 1, 2, 0, 2, 2], [1, 3, 2, 1, 0, 1, 3, 0, 2], [0, 20], [2, 3, 1], [6, 1], [22, 7]], "fitness": 9223372036854775807, "mapping_values": [1, 29, 29, 11, 18, 4, 6, 0, 0, 6, 6, 11, 6, 1, 4, 0, 2, 4, 41, 41, 24, 5, 69, 12, 15, 11, 4, 31, 9, 4, 46, 5, 1, 10, 9, 2, 3, 2, 2], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( divInt(len(in2),divInt(len(in0),( ( int(4.0) + i0 ) + int(8.0) ))) + int(3.0) ):{:\\ni2 = i2\\ns2 = (in1 + (in2[divInt(int(87.0),i0):][:int(71.0)] + s0))[i2:]\\nres0 = ( i1 * int(67684.0) ) \\ge min(( i2 - i0 ), i1)\\nin0 = s2\\ns0 = \"\"c\"\"[int(6.0):int(3.0)][int(50.0):min(divInt(int(71939.0),i0), int(57347.0))]\\ni1 *= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s1 in getCharFromString(\"\"=\"\", int(88.0)):{:\\nif False:{:\\nloopBreak% = 0\\nfor s0 in in2[i1:][:int(2.0)]:{:\\nif False:{:\\nb1 = \"\"6\"\" in in2.rstrip(s1)\\n:}else:{:\\nif len(s0) != int(1.0):{:\\ni2 = max(abs(abs(int(9.0))), int(0.0))\\n:}\\n:}\\nloopBreak% = 0\\nwhile b2:{:\\nloopBreak% = 0\\nfor in1 in s2:{:\\nif i0 \\g int(9.0):{:\\ni1 += ( int(4.0) - int(7.0) )\\n:}else:{:\\nloopBreak% = 0\\nwhile i0 \\ge i1:{:\\ns2 = \"\"d\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = int(4.0) != ( min(( int(9.0) + len(\"\"A\"\") ), abs(len(s2[int(5.0):i1]))) - i0 )\\ns1 = \"\"b\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ns1 = \"\"$\"\"\\nloopBreak% = 0\\nfor s1 in s1:{:\\nin1 = s0\\nb0 = res0\\ni1 *= int(506.0)\\nin2 = ((in0[i0:].capitalize() + getCharFromString(\"\"U\"\", max(len(s0), i2))[i2:]).capitalize() + s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = \"\"1\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [1, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1], [2, 2, 9, 9, 5, 5, 5, 6, 9, 4, 7, 0, 2, 7, 1, 5, 1, 2, 1, 6, 7, 7, 9, 3, 9, 8, 0, 7, 9, 4, 2, 7, 8, 4, 2, 7, 7, 5], [1, 0, 1, 2, 1, 1, 0, 2, 0, 0, 1, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 0, 2, 2, 1], [1], [3, 2, 3, 3, 3, 3, 0, 2, 0, 0, 0, 3, 3, 3, 3, 2, 0, 1, 1, 0, 2, 2, 2, 3, 1, 1, 3, 1, 1, 2, 1, 3, 3, 0, 3, 3, 0, 0, 1, 1, 3, 3, 0, 0, 3, 1, 0, 3, 1, 3, 2, 2, 2, 1, 2, 3, 2, 2, 2, 2, 2, 0, 1, 0, 3, 2, 2, 2, 1, 2, 1, 3, 3, 1, 2, 0, 1, 2, 1, 2, 3, 3, 2, 0, 0, 3, 2, 3, 2, 3, 3, 2, 0, 2, 1, 2, 1, 3, 1, 0, 0, 2, 1, 3, 1, 1, 3, 1, 3, 0, 3, 0, 2, 0, 3, 3, 1, 2, 2, 0, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1, 4, 1, 4, 0, 2, 1, 3, 4, 3, 3, 4, 3, 4, 0, 4, 4, 3, 3, 4, 3, 4, 4, 0, 3, 0, 2, 1, 0], [2, 1, 2, 1, 1, 1, 0, 1, 2, 2, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [4, 5, 3, 2, 4, 5, 4, 5, 1, 4, 5, 4, 5, 0, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [], [0, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 2, 4, 2, 4, 2, 4, 0, 4, 1, 1, 1, 2, 0, 2, 1, 0, 1, 1, 2, 1, 2, 4, 0, 0, 4, 1, 2, 1, 0, 2, 0, 1, 2, 4, 3, 0, 2, 3, 0, 2, 0, 2, 1], [0, 3, 2, 0, 2, 2, 3], [4, 3], [0, 0, 2, 0, 0, 2, 2, 1, 1, 0, 2, 1, 1, 2, 1, 2, 1], [1, 0, 1, 1, 2, 3, 2, 2, 1, 0, 2, 3], [21, 25], [5, 19, 7, 8], [0, 4, 1, 5], [3, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 38, 38, 26, 1, 124, 33, 37, 12, 22, 15, 12, 0, 54, 7, 2, 17, 12, 2, 4, 4, 2], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(divInt(max(len(in1), min(min(i1, ( i0 * i1 )), i2)),len(in2))) \\l min(max(max(mod(i1,int(22.0)), int(9.0)), i1), divInt(mod(divInt(saveOrd((in0 + (s2[int(9.0):int(5.0)][max(int(5.0), int(5.0)):] + in1))[divInt(int(6.0),saveOrd(getCharFromString(in2.capitalize()[min(i0, abs(max(i2, i0))):].rstrip(getCharFromString(\"\"f\"\", int(9.0)))[int(4.0):], len(\"\"V\"\"))[saveOrd(\"\"t\"\"):i0])):i1][len(in1[:int(7.0)]):i2]),len(\"\"h\"\"[:int(02.0)])),saveOrd(in2)),mod(divInt(( int(71.0) - mod(len(\"\"0\"\"),divInt(mod(( ( mod(i2,int(5.0)) * i1 ) - saveOrd(\"\"\"\") ),( ( mod(int(1.0),( int(2.0) - min(saveOrd(\"\"4\"\"[int(1.0):( i1 - int(6.0) )]), divInt(int(7.0),divInt(saveOrd(s1.capitalize()[len(in1):]),divInt(i0,i0)))) )) + len(\"\"1\"\".capitalize()) ) - divInt(saveOrd(\"\"i\"\"[:( len(in2) * saveOrd(in1[:( i0 * divInt(int(7.0),mod(int(9.0),saveOrd(\"\"Z\"\"))) )]) )]),int(3.0)) )),i1)) ),i1),divInt(int(9.0),min(int(80.0), int(794.0)))))):{:\\ni2 -= len((in2 + (s0 + in2[int(2.0):])[:min(i2, abs(i0))]).lstrip(\"\"5\"\"\"[:divInt(i2,max(min(int(7.0), ( mod(i2,int(8.0)) + int(4.0) )), i1))])[int(2775.0):])\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 2], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 3, 9, 7, 7, 1, 1], [0, 2, 2, 0, 2, 1, 0, 2, 0], [0, 1], [2, 2, 2, 3, 0, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 3, 3, 0, 2, 3, 1, 2, 1, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [0, 5, 3, 2, 4, 5, 1, 4, 3, 0, 3], [1], [], [4, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 3, 4, 3, 4, 4, 0, 0, 0, 2, 0, 4, 3, 4, 1, 3, 0, 0], [0, 3, 2, 3, 1, 3, 0], [4, 5, 0], [2, 1, 1, 2], [2], [], [], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 9, 0, 31, 9, 5, 5, 4, 11, 1, 0, 29, 7, 3, 4, 1, 0, 0, 1, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( divInt(divInt(saveOrd(getCharFromString(s0, i0)),len(in2)),( ( int(3.0) + i2 ) + int(6.0) )) + int(3.0) ) \\le i2:{:\\nres0 = (in0 + (s2[:divInt(int(9.0),i0)][:int(7.0)] + in1))[i2:] in ((saveChr(( i1 * int(7.0) )).strip(in2) + s1).capitalize() + in1).rstrip(in0[len((getCharFromString(\"\"6\"\", min(i0, ( min(int(1.0), mod(int(1.0),i2)) - i0 ))) + (s0 + in0)).lstrip()):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 2, 1, 1], [0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [0, 1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [2, 3], [], [], [1], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 2, 6, 1, 1, 1, 2, 0, 2, 0, 0, 0, 2, 0, 0, 1, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(max(divInt(len(\"\"1\\\\\\t\"\"),min(min(i1, ( i0 + i1 )), i2)), int(26.0))) \\l len(in1)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 1], [0, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 7, 2, 8, 7, 7, 1], [2, 2, 0, 0, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 0, 1, 1, 0, 2, 0, 3, 1, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 3, 0], [0, 2, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 1, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 1], [0, 3, 2], [4], [0, 2, 1], [2], [], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 7, 0, 22, 7, 4, 5, 2, 5, 1, 0, 11, 0, 0, 3, 1, 0, 0, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( saveOrd(s1) \\le ( divInt(len(in2),divInt(len(in0),( ( i2 + i2 ) * int(4.0) ))) + int(7.0) ) and i0 \\g ( i0 + len((s2 + (s1[:int(2.0)][i2:] + \"\"8\"\"))[( i0 - int(8.0) ):i2]) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 1, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 1, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [0, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 1, 3, 3, 2, 0, 0, 2, 2, 0, 1, 1, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [0, 0, 1], [], [1, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [1, 3, 0], [24], [11], [], [14]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 4, 1, 13, 3, 3, 2, 2, 1, 3, 0, 2, 0, 0, 0, 3, 1, 1, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(1.0) \\l max(int(0.0), len(\"\"l+Y\"\")):{:\\nres0 = len(in1) \\le mod(i0,i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= ( mod(i1,int(9.0)) - int(1.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1, 0, 1], [4, 3, 3, 1, 4, 0, 4, 0, 4, 4], [2, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4, 5], [1, 1, 1], [], [2, 0, 4, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1, 2, 0, 0, 0], [0, 0, 0], [], [2, 0, 0], [1, 0, 3], [5], [5], [], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 5, 0, 22, 3, 10, 1, 2, 6, 3, 0, 17, 3, 0, 3, 3, 1, 1, 0, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[len(getCharFromString(getCharFromString((\"\"f\"\" + \"\"F\"\"), divInt(len(getCharFromString(in2, max(saveOrd((s1 + \"\"^\"\")), i0))[( i2 * i1 ):i0]),int(16.0))), min(saveOrd(in1[min(divInt(i2,int(3.0)), int(7.0)):int(6.0)]), saveOrd(in1)))):]) \\le saveOrd(in2)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [0], [3, 1, 3, 1, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 3, 1, 4, 4], [0, 1, 0, 1, 0, 0, 1], [], [2, 0, 4, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1, 2, 2, 2, 3, 1, 2], [5], [5, 3], [7, 4, 3, 9], [21]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 1, 11, 1, 4, 0, 1, 3, 7, 0, 13, 3, 0, 2, 7, 0, 2, 4, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(getCharFromString(getCharFromString((\"\"f7\"\" + \"\"43\"\"), int(3.0)), divInt(len(getCharFromString(in0, i0)[i2:int(7.0)]),len((s1 + \"\"<d9\"\")))))\\ni1 = int(6.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 6, 8, 0, 5, 0, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 1, 2, 2, 2, 3, 1, 3, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [0, 1], [], [0, 0, 0, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [0, 0], [6, 18], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 4, 1, 19, 5, 6, 3, 3, 4, 2, 0, 5, 0, 0, 0, 2, 2, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * int(6.0) )):{:\\nres0 = in2 not in \"\"GS\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 -= mod(mod(( min(int(8.0), min(int(0.0), saveOrd(s0))) + i2 ),i1),int(5.0))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 1, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [1, 0, 0, 2, 1, 2, 0], [0, 1, 0], [2, 5, 3, 2, 4, 5], [1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1], [], [11], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 10, 4, 3, 2, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s2) \\le ( divInt(len(in2),mod(len(\"\"l\"\"),( int(3.0) - int(0.0) ))) + i2 )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [1, 2, 1, 0, 2], [1], [3, 1, 3, 3, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [1, 1, 1, 0, 0, 0, 1, 1], [], [1, 2, 1, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1, 1, 2, 0, 2, 2, 0, 1], [5, 16], [5, 16, 10], [0, 0, 0], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 10, 1, 5, 1, 1, 2, 8, 0, 13, 2, 0, 2, 8, 2, 3, 3, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"f\"\") \\le int(16.0)\\ni1 += len(\"\"q\"\"[len(getCharFromString((\"\"0\"\" + \"\"F00Q\"\"), divInt(len(getCharFromString(in0, i2)[i1:int(3.0)]),saveOrd((in2 + \"\"k\"\"))))):])\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 1, 1], [2, 0, 2, 2, 2, 1, 0, 1, 1], [2, 2, 0, 2], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1, 5], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 0, 1, 0, 1, 1, 1, 0, 0], [1, 3, 3, 2, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 0, 1, 1], [4, 5, 5, 0, 5, 5, 1, 4], [0, 1], [0], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0, 4, 2, 1], [0, 3, 2], [4], [0, 0, 1, 1], [2, 0], [16], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 4, 2, 1, 1, 0, 0, 1, 2, 4, 2, 2, 0, 0, 0, 0, 24, 24, 9, 1, 35, 10, 4, 6, 5, 8, 2, 1, 14, 1, 0, 4, 2, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * i0 )):{:\\nres0 = in2 not in s0[( mod(( int(9.0) - int(8.0) ),int(9.0)) + int(5.0) ):abs(i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i1 \\le int(5.0):{:\\nloopBreak% = 0\\nfor in2 in in2:{:\\nloopBreak% = 0\\nwhile (s1[:int(6.0)][int(2174.0):i2] + in1).endswith(getCharFromString(\"\"1Q\"\"[:int(20.0)], divInt(i1,mod(mod(( int(65083.0) + i1 ),int(305.0)),( i0 + int(5.0) ))))):{:\\ni1 *= int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1], [2, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 0, 1, 0, 1, 0, 2, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0], [2, 3, 2, 0, 0], [0, 0, 1, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [1], [], [15], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 5, 4, 2, 3, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(divInt(divInt(len(\"\"p\"\"),divInt(abs(( ( i2 + int(3.0) ) + int(7.0) )),min(int(9.0), i2))),int(5.0))) \\le i2\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 9, 5, 5, 7, 1, 0, 4, 2, 9, 1, 0, 3, 0, 1, 0], [2, 2, 2, 0, 2, 0, 0, 1, 2, 1, 1, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 3, 3, 1, 2, 1, 0, 1, 0, 2, 0, 1, 2, 3, 3, 0, 2, 0, 2, 3, 2, 2, 2, 1, 3, 1, 3, 3, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 0, 2, 3, 0, 3, 1, 1, 1, 3, 1, 1, 1, 3], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 4, 3, 1, 2, 0, 0, 3, 4, 0, 1, 4], [2, 0, 0, 2, 1, 2, 0, 2, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1], [3, 5, 3, 2, 4, 5, 4, 0, 3, 3, 0], [1, 1, 1, 0, 0, 0, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 2, 4, 4, 0, 2, 4, 1, 4, 2, 0, 2, 2, 1, 1, 4, 0, 4, 3, 1, 0, 0], [0, 3, 2, 3, 0, 3], [4, 5, 4], [2, 0, 2, 2, 2, 2, 2, 1], [2, 1, 0, 2, 0, 0, 1], [21, 22, 9], [3, 22], [6, 6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 17, 17, 12, 0, 62, 18, 15, 11, 7, 11, 7, 0, 33, 6, 3, 8, 7, 3, 2, 2, 0], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0) == ( divInt(len(in2),mod(len(in0),( divInt(i2,int(3.0)) * min(saveOrd((s2 + (in1[int(7.0):][( int(9.0) + i2 ):int(5.0)] + in2))[i2:]), ( i0 + int(5.0) )) ))) * ( len((getCharFromString(in1.rstrip(\"\"6\"\".capitalize()[max(i2, ( i0 - divInt(abs(( ( divInt(int(7.0),min(int(1.0), min(len(s0[int(0.0):].strip(\"\"d\"\"[:i0][divInt(int(4.0),i1):])), int(2.0)))) * i2 ) + ( i1 * int(9.0) ) )),mod(( i1 - ( saveOrd(\"\"V\"\") - i2 ) ),min(int(1.0), int(0.0)))) )):]), int(3.0))[max(int(0.0), int(1.0)):] + getCharFromString(in0, int(0.0)))) + saveOrd((\"\"6WJw\"\" + in0).rstrip(s0)) ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 1, 2, 3, 3, 3, 0, 2, 3, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 3, 0, 3, 2, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [0], [11], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 7, 1, 4, 0, 1, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = abs(int(26.0)) \\l divInt(max(len(\"\"L\"\"), len(in1)),i1)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [0, 2], [], [0, 0], [], [], [3], [2, 5], [1, 1], [0, 0], [], [0], [0], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [1, 7, 0, 0, 2, 8, 5, 0], [2, 1, 1, 2, 1, 2, 1, 1, 1, 0, 0, 0, 1, 2], [1], [1, 3, 2, 2, 3, 2, 3, 2, 3, 0, 2, 1, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 1, 0, 0, 2, 2, 2, 0, 0, 3, 3, 3, 0, 3, 2, 1, 2, 3, 1, 3, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [1, 3, 4, 1, 1, 3, 1, 4, 2, 2], [1, 2, 1, 0], [1, 1, 1, 1, 1, 1, 0, 1, 0], [4, 5, 1, 5, 1, 5], [1, 1], [], [4, 0, 2, 2, 3, 0, 3, 2, 2, 0, 0, 4, 1, 2, 0, 1], [0, 3, 2], [4], [0, 1, 1, 2, 2], [1, 2], [], [18], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 14, 0, 43, 12, 10, 3, 9, 5, 2, 0, 16, 2, 1, 5, 2, 0, 1, 1, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(17.0) == max(( mod(len(getCharFromString(in1, mod(saveOrd((in2 + (s1[mod(max(i2, mod(int(0.0),i1)),i1):][:mod(i2,i1)] + in2))[:i2][int(0.0):i1]),int(2.0)))),( int(8.0) - i1 )) * i1 ), ( mod(divInt(i0,i0),max(len(\"\"s\"\".rstrip(s1[max(i0, saveOrd(\"\"8\"\")):])), mod(int(5.0),divInt(abs(int(0.0)),abs(i1))))) - i2 ))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 2, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3], [], [], [], [27]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 16, 7, 3, 4, 3, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(\"\"\\\\\\\\\"\"),divInt(len(in2),( ( i0 + int(4.0) ) + int(6.0) ))) + divInt(i2,( int(9.0) * i2 )) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 2, 3, 2, 0, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [2], [], [], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 12, 5, 3, 3, 2, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s0) \\le ( divInt(len(\"\"2\"\"),divInt(( len(in2) + ( i0 + int(4.0) ) ),int(6.0))) + int(9.0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 0, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 0, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1], [], [2], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 7, 0, 21, 3, 8, 1, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i0)), int(26.0))) \\l len(\"\"c\"\"):{:\\nres0 = min(min(mod(i2,int(9.0)), i1), i1) \\le int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 0, 2, 2, 2, 0, 2, 1, 2, 0, 2, 1, 1], [0, 0, 0, 0, 2, 0, 2, 1, 2], [0, 2, 2, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 0, 0], [], [], [3, 2, 0], [4, 4, 0, 3, 0], [1, 1, 1, 2, 0, 0, 1, 1], [0, 0, 0, 0, 0], [0], [0, 3], [1], [], [1], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 9, 2, 2, 2, 5, 1, 2, 2, 7, 8, 7, 5, 1, 3, 0, 4, 1, 5, 8, 9, 0, 7, 1, 5, 6, 3, 1, 5, 1, 8, 6, 7, 5, 7, 0, 0, 4, 7, 8, 9, 3, 3, 4, 2, 7, 8], [2, 0, 0, 1, 2, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 2, 1, 2, 0, 2, 2, 2, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 1], [1, 1, 1], [1, 3, 1, 3, 3, 1, 1, 2, 0, 0, 2, 0, 3, 3, 3, 0, 2, 1, 2, 0, 2, 3, 1, 2, 0, 2, 2, 0, 1, 0, 2, 2, 2, 1, 0, 0, 3, 1, 3, 0, 0, 1, 1, 1, 2, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 1, 2, 2, 0, 0, 1, 3, 0, 2, 1, 0, 3, 1, 0, 3, 3, 0, 2, 1, 1, 3, 1, 2, 2, 3, 0, 3, 1, 2, 2, 3, 3, 3, 0, 1, 1, 2, 0, 0, 2, 0, 3, 2, 0, 1, 3, 3, 2, 3, 3, 3, 2, 0, 3, 0, 3, 3, 3, 1, 3, 3, 1, 0, 2, 0, 3, 3, 3, 3, 1, 2, 2, 1, 0, 1, 3, 2, 2, 2, 3, 1, 0, 3, 2, 3, 1, 0, 1, 2, 1, 0, 1, 3, 3, 3, 3, 3, 0, 2, 2, 3, 2, 0, 1, 2, 0, 1, 0, 2, 2, 3, 1, 0, 2, 1, 2, 1, 3, 2, 3, 0, 2, 3, 2, 3, 0, 0, 3, 0, 1, 3, 2, 2, 3, 1, 3, 1, 3, 1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [2, 3, 3, 1, 2, 3, 1, 4, 1, 4, 0, 0, 2, 2, 2, 4, 1, 2, 4, 1, 2, 3, 0, 1, 1, 0, 1, 1, 3, 1, 3, 3, 3, 4, 1, 1, 3, 2, 4, 4, 2, 0, 3, 4, 4, 0, 3, 4, 1, 1, 2, 2, 0, 0, 3], [1, 0, 2, 2, 1, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 2, 2, 0, 0, 2], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [4, 5, 5, 2, 4, 4, 2, 2, 1, 5, 5, 0, 3, 1, 2, 1, 2, 3, 1, 1, 4, 4, 0, 0, 4, 4, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 4, 3, 2, 0, 4, 2, 4, 2, 0, 2, 2, 2, 0, 1, 2, 0, 4, 0, 1, 0, 4, 0, 0, 4, 1, 1, 4, 4, 0, 1, 2, 4, 2, 0, 2, 0, 4, 2, 0, 1, 0, 4, 0, 2, 1, 2, 2, 2, 2, 1, 0, 4, 0, 0, 4, 1, 1, 2, 0], [3, 0, 0, 1, 0, 2, 2, 3, 2, 0, 1, 2, 1], [4, 2], [2, 2, 1, 0, 1, 0, 1, 0, 2, 1, 1, 1, 2, 2, 1, 0, 2], [0, 2, 1, 3, 1, 2, 0, 2, 0, 2], [5, 4, 18], [18, 11], [2, 8, 6, 1], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 9, 7, 5, 3, 0, 0, 3, 5, 8, 5, 1, 2, 1, 0, 1, 48, 48, 52, 3, 200, 52, 55, 27, 28, 27, 10, 5, 61, 13, 2, 17, 10, 3, 2, 4, 1], "tree_depth": 68, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(929.0) \\le abs(int(2.0))\\nloopBreak% = 0\\nfor in1 in in2:{:\\nloopBreak% = 0\\nfor in2 in s2:{:\\nloopBreak% = 0\\nfor in1 in (in1[len(getCharFromString(getCharFromString(s2[:len(s2[int(2.0):int(2.0)][:mod(i2,i0)][( i0 - max(abs(len(\"\"F\"\")), i1) ):mod(int(5.0),mod(i2,( max(int(12.0), ( i0 + mod(mod(i1,int(27.0)),i0) )) * divInt(( ( int(8.0) * i2 ) - i1 ),saveOrd(s1[:int(7.0)])) )))])], max(i1, i0))[int(5.0):], int(1.0))):] + saveChr(int(3.0))).rstrip(in2):{:\\nin2 = \"\"2\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in in0:{:\\nloopBreak% = 0\\nwhile ( int(0.0) * i0 ) \\le ( mod(divInt(i1,i0),mod(divInt(divInt(int(4.0),mod(divInt(i2,i2),int(1.0))),saveOrd(getCharFromString(s1, i0))),divInt(int(5.0),i0))) + min(int(8.0), i0) ):{:\\nloopBreak% = 0\\nfor s2 in s1:{:\\ns2 = \"\"s\"\".capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile min(abs(i0), ( int(9.0) + int(0.0) )) \\l abs(int(7.0)):{:\\ni2 -= mod(( abs(i2) - saveOrd(\"\")\"\") ),int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif in0.strip().capitalize() in \"\"l\"\":{:\\ni0 *= mod(divInt(max(abs(saveOrd(s1[i0:].capitalize()[int(5.0):int(6.0)])), mod(i0,i2)),mod(i0,max(( i0 * int(3.0) ), abs(len(s1[:( min(max(max(( i0 * min(i2, max(max(len(getCharFromString(in1[:int(1.0)], max(len(\"\"8\"\"), int(5.0)))), i1), ( i0 - len(in1) ))) ), len(saveChr(saveOrd(s0)))), max(int(1.0), mod(( int(8.0) - i2 ),int(6.0)))), max(( ( ( len(\"\"E\"\"[:int(7.0)]) + i1 ) - abs(divInt(saveOrd(\"\"6\"\"[int(5.0):i2][:int(7.0)][mod(int(0.0),i0):][int(0.0):]),saveOrd(s0))) ) + abs(min(len(in1.capitalize()), saveOrd(in1))) ), i2)) + divInt(mod(saveOrd(saveChr(( i2 * int(4.0) ))),( i2 - int(7.0) )),i2) )]))))),( ( min(int(8.0), i1) * divInt(int(9.0),( int(3.0) * len(\"\"S\"\") )) ) * divInt(saveOrd(\"\"1\"\"),i0) ))\\n:}else:{:\\nloopBreak% = 0\\nwhile b2:{:\\ni2 += mod(max(divInt(max(i0, i1),abs(i2)), int(3.0)),abs(( ( min(int(4.0), min(int(2.0), len(s2[int(7.0):]))) + i1 ) * i0 )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb0 = ( i0 \\ge int(8.0) or i0 \\l i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [4, 4], [0, 1, 0, 0, 1, 0, 2], [0, 0], [3], [3, 3, 2, 2], [1, 1], [], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 6, 9, 8, 7, 7, 1, 1, 8, 3, 9, 1, 7, 9, 1, 5, 1, 3], [0, 2, 2, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0], [0, 1], [2, 2, 2, 3, 2, 3, 2, 2, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 3, 2, 3, 1, 0, 2, 0, 3, 2, 0, 2, 2, 0, 0, 2, 2, 0, 2, 0, 3, 1, 0, 3, 3, 2, 1, 3, 2, 0, 3, 2, 0, 0, 0, 3, 2, 1, 3, 2, 1, 1, 2, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0, 4, 4, 0, 2, 4, 4, 4], [0, 0, 1, 2, 1, 2, 0, 0, 1, 1, 0, 1, 2, 1, 0, 2, 1, 1], [0, 0, 0, 0, 1, 0, 0], [0, 5, 3, 2, 4, 5, 0, 5], [1, 1, 0, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 4, 2, 2, 1, 0, 1, 1, 1], [0, 3, 2], [4], [2, 1, 1, 1, 2], [0, 0, 1, 2, 2], [23, 13], [24], [4, 6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 7, 2, 1, 4, 2, 0, 0, 18, 18, 17, 0, 67, 25, 12, 18, 7, 8, 5, 0, 20, 1, 0, 5, 5, 2, 1, 2, 0], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( divInt(( saveOrd(s0) + ( len(in2) + ( divInt(( int(4.0) - int(6.0) ),int(9.0)) * i0 ) ) ),( int(8.0) - i2 )) * int(7.0) ) \\le i2 or ( not divInt(i0,int(7118.0)) \\le ( ( len(in0) + ( min(int(3.0), i2) + divInt(i2,min(mod(i1,( divInt(i1,i0) - divInt(( i1 - ( i0 + saveOrd((s2 + (in1[:int(9.0)][:i1] + in2))[saveOrd(s0):]) ) ),min(( int(1.0) - abs(( i0 * saveOrd(getCharFromString(\"\"X\"\"[( i2 - i0 ):][:i1], saveOrd(in2))) )) ), ( int(7.0) + saveOrd(\"\"N\"\") ))) )), ( int(9.0) * int(1.0) ))) ) ) - ( i0 - int(513.0) ) ) or not \"\"y4\"\" != \"\"6\"\" ) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [5, 8, 2, 8, 7, 7, 1, 8, 8, 5, 2, 0, 2, 2, 3, 2, 6, 9], [0, 2, 0, 0, 2, 2, 1, 0, 1, 2, 1, 2, 0, 1, 0, 0, 0, 1, 2, 0, 2, 0, 1, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1, 0, 0, 3, 2, 0, 2, 2, 2, 0, 2, 1, 2, 0, 0, 2, 2, 3, 3, 3, 1, 2, 2, 2, 0, 3, 3, 2, 2, 0, 1, 2, 1, 3, 1, 3, 2, 3, 1, 2, 0, 0, 2, 3, 1, 3, 3, 1, 0, 0, 1, 0, 0, 2, 3, 0, 3, 3, 1, 3, 2, 0, 0, 0, 1, 3, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 3, 3, 0, 0, 4, 0, 3, 3, 2, 3, 0, 3, 2, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0, 0, 2, 2, 1, 1, 1, 1, 2, 1, 2], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [1, 5, 3, 2, 4, 5, 4, 2, 0, 4], [1, 1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 2, 0, 1, 2, 4, 0, 4, 0, 1, 2, 0, 0], [0, 3, 2], [4], [0, 0, 0, 0, 2, 0], [3, 3], [], [], [], [0, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 18, 18, 24, 0, 88, 27, 20, 17, 10, 10, 2, 0, 23, 3, 1, 6, 2, 0, 0, 0, 2], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\le ( divInt(len(getCharFromString(in2, divInt(len((in0 + (s2[( ( i0 + int(5.0) ) + int(8.0) ):int(2.0)][i2:( ( i0 + int(8.0) ) + i0 )] + in1))[( i2 - int(7.0) ):i2]),i1))),min(( i0 * ( ( ( i1 + divInt(int(7.0),( i2 + i1 )) ) * ( divInt(min(saveOrd(in2[min(int(1.0), ( ( divInt(i2,len(\"\"\"\")) * len(in1.rstrip(s2.capitalize())[( ( i0 - int(8.0) ) - divInt(int(8.0),abs(int(5.0))) ):]) ) - len(\"\")\"\") )):mod(min(int(2.0), ( i1 - i0 )),mod(len(s0[int(0.0):abs(min(int(2.0), i0))]),i0))]), int(2.0)),i1) * i2 ) ) - mod(min(i0, min(len(in1), int(3.0))),min(divInt(i2,i0), i1)) ) ), int(2.0))) * min(int(69.0), i0) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 9, 9, 7, 3, 5, 5], [1, 2, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [0], [1, 1, 0], [4, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [1], [], [19], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 10, 1, 5, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(max(mod(len(\"\"t\"\"),min(min(i2, i1), i2)), i1))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [1, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 3, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 1, 3, 3, 2, 0, 2, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [1], [], [1, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [2], [], [], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 5, 0, 3, 1, 0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(10.0) \\l max(int(9.0), len(\"\"9\"\"))\\ni1 *= len(in1)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [1], [], [1, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3], [], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 3, 1, 0, 5, 0, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(\"\";\"\"),len(in1)), ( i1 * i0 )):{:\\nres0 = in2 not in in2[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):min(i2, i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [5, 4, 4], [2, 2, 1, 2], [0, 0, 0], [1, 5], [], [], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 7, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [2, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 2, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5, 2, 3, 2], [1], [], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0, 4, 2, 3, 0, 1], [0, 3, 2], [4], [0, 0, 1, 1], [0], [14], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 8, 8, 5, 0, 23, 6, 4, 2, 4, 9, 1, 0, 16, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in in2:{:\\nres0 = in2.endswith(s0[mod(max(( len(in2) * len((in2[:mod(i1,i0)][mod(( mod(int(1.0),int(0.0)) * int(9.0) ),int(8.0)):min(i2, i1)] + s2)) ), int(9.0)),int(7.0)):int(5.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = getCharFromString((s2 + \"\"O\"\")[:i2], int(6.0))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 1, 3, 3, 1, 1, 1], [1, 0, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2], [2], [0, 1, 0], [4, 5, 3, 1, 4, 1], [0, 1], [], [0, 0, 0, 1, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 2], [1, 0], [11], [16], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 4, 0, 15, 2, 8, 1, 1, 3, 2, 0, 4, 0, 0, 0, 2, 1, 1, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i1 * i1 )), i2)), int(22.0))) \\l len(in2):{:\\nres0 = len(in0) \\le saveOrd(\"\"qL\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 4, 7, 2, 8, 5, 3, 6, 1, 4, 7], [1, 1, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 3, 3, 3, 3, 2, 3, 1, 1, 1, 3, 3, 1, 1, 1, 0, 3, 3, 1, 0, 2, 1, 2, 1, 1], [1, 0, 1, 1, 1], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2, 4, 4, 0, 1], [2], [0, 1, 0, 1], [4, 5, 4, 2, 4, 5, 0], [0, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 4, 3, 0, 4, 2, 4, 1, 4, 1], [0, 3, 2, 2], [4], [0, 0, 2, 2], [0, 0, 1, 3], [1, 22], [2], [], [14]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 12, 12, 6, 0, 35, 5, 14, 1, 4, 7, 4, 0, 21, 4, 1, 4, 4, 2, 1, 0, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(in1),min(min(i1, ( i1 * i1 )), i2)), len(in2))) \\l len(in1):{:\\nres0 = saveOrd((s2 + (in1[max(mod(abs(int(22.0)),int(4.0)), int(7.0)):][saveOrd(in2):saveOrd(\"\"BW\"\")] + getCharFromString((s0 + \"\"c\"\".capitalize()[int(2.0):].rstrip(\"\"+\"\".capitalize())), int(8.0))))[int(5.0):i1]) \\le min(max(int(3.0), i1), divInt(int(6.0),mod(int(1.0),int(47.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1], [2, 1, 0, 0, 0, 2, 0], [1, 0], [0, 2, 0, 2, 0], [0], [0, 0, 0, 0], [], [], [3, 1, 0], [0, 4, 2], [1, 1, 1, 2], [0, 0, 0], [2], [0], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5, 9, 1, 9, 4, 7, 6, 0, 8, 9, 9, 1, 9, 6, 3, 1, 8, 5, 3, 0, 2, 7, 7, 9, 7, 2, 4, 5, 7, 9, 3, 5, 6], [1, 0, 1, 2, 1, 1, 0, 0, 2, 2, 2, 0, 2, 2, 0, 1, 2, 2, 2, 2, 0, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 1, 1, 0, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1, 3, 1, 3, 2, 1, 2, 1, 3, 3, 1, 3, 2, 1, 1, 1, 3, 3, 3, 2, 1, 3, 3, 2, 0, 3, 1, 2, 3, 2, 2, 0, 1, 0, 3, 2, 3, 3, 1, 0, 2, 3, 0, 2, 3, 0, 1, 0, 3, 1, 0, 0, 0, 0, 0, 2, 2, 0, 3, 1, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 3, 3, 0, 2, 1, 1, 0, 0, 1, 3, 3, 3, 3, 1, 3, 2, 2, 2, 1, 0, 1, 2, 3, 1, 2, 0, 1, 2, 0, 3, 2, 0, 2, 3, 3, 0, 3, 1, 3, 3, 3, 1, 2, 2, 0, 0, 2, 1, 3, 1, 1, 1, 3, 3, 0, 0, 3, 0, 3, 1, 0, 2, 1, 0], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0], [2, 4, 3, 0, 0, 3, 0, 1, 1, 1, 2, 2, 4, 3, 4, 4, 3, 3, 4, 1, 1, 0, 3, 0, 1, 3, 2, 2, 1, 1, 4, 4, 0, 4, 4, 0, 3, 2, 2, 4, 3, 2, 0, 0, 1, 2, 2], [2, 2, 0, 2, 0, 0, 1, 1, 2, 2, 0, 1, 2, 1, 0, 2], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5, 4, 4, 1, 1, 5, 4, 2, 1, 2, 5, 0, 2, 4], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 3, 2, 4, 3, 4, 2, 0, 1, 1, 1, 0, 4, 1, 2, 4, 2, 2, 4, 2, 0, 4, 4, 2, 1, 1, 4, 0, 4, 4, 0, 4, 0, 2, 4, 1, 2, 0, 0, 1, 0, 2, 1, 2, 4, 1, 1, 4, 4, 4, 4, 2, 0], [0, 3, 2, 1, 2, 2, 0, 0, 3, 2, 0, 0, 2, 2, 2, 2, 1], [4, 3], [0, 2, 0, 1, 1, 0, 1, 0, 0, 2, 2, 0, 1, 0, 2], [3, 1, 2, 0, 0, 1, 3, 1, 3, 0, 2, 3, 0, 1], [2, 14, 5, 24], [13, 14, 8, 14], [8, 3], [25, 22, 10, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 1, 4, 0, 0, 3, 3, 4, 3, 1, 0, 0, 0, 1, 39, 39, 37, 0, 157, 38, 47, 16, 22, 19, 14, 1, 64, 17, 2, 15, 14, 4, 4, 2, 4], "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(saveOrd(in1)) \\l divInt(len(\"\"@n8\"\"),min(min(i1, mod(i0,i1)), i2)):{:\\nres0 = int(2.0) \\le len(in2)\\n:}else:{:\\nin0 = (s2 + (in1[min(max(divInt(i1,int(2.0)), int(9.0)), i1):( int(7.0) * int(5.0) )][max(int(5.0), max(mod(int(5.0),divInt(int(9.0),abs(abs(int(1.0))))), saveOrd(in2))):] + in1))[( int(94.0) * int(76.0) ):int(08.0)]\\nb1 = len((getCharFromString((in1[:saveOrd(\"\"C\"\")].rstrip(\"\"O\"\") + \"\"o\"\"), saveOrd(s1))[:( int(9.0) + len(\"\"=\"\".capitalize()) )] + saveChr(len(s1[( i0 * saveOrd(getCharFromString(\"\"i\"\"[int(9.0):], ( max(( ( i0 + int(1.0) ) + i2 ), max(divInt(min(len(\"\"\"\\\\\"\"\"), int(9.0)),i2), ( min(i2, mod(max(i0, int(6.0)),i2)) - len(getCharFromString(in2, int(3.0))) ))) - i2 )).capitalize()) ):i0].capitalize()[i1:i2][:i2]))[mod(divInt(i2,abs(int(1.0))),( mod(divInt(( i2 * divInt(( i0 * i0 ),divInt(( abs(max(i1, mod(int(8.0),int(5.0)))) + i0 ),i2)) ),int(3.0)),max(saveOrd(in1.capitalize().lstrip(getCharFromString(s2, saveOrd(getCharFromString(\"\"F\"\", min(int(0.0), saveOrd(s1[divInt(( divInt(int(2.0),i2) - int(7.0) ),( saveOrd(s2) * int(7.0) )):mod(i1,int(9.0))])))[divInt(i1,min(mod(i0,divInt(len(\"\"3\"\"),abs(i1))), abs(int(7.0)))):])))), saveOrd(in2))) - len(\"\"_\"\"[:abs(int(2.0))]) )):divInt(( i1 + i1 ),divInt(int(4.0),min(int(5.0), int(7.0))))])) == int(93.0)\\ns0 = \"\"Y\"\".capitalize()[min(max(i1, i0), abs(i2)):abs(int(5.0))]\\nloopBreak% = 0\\nfor s2 in \"\"o\"\":{:\\nb0 = saveChr(i0).capitalize().capitalize().capitalize() == in1[( int(6.0) * i1 ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [2, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [3, 7, 9, 5, 7, 7, 1], [2, 2, 0, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 2, 1, 2, 2, 0, 2, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 0], [1, 5, 3, 2, 4, 5], [0, 1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [1, 1], [], [7, 17], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 22, 10, 3, 6, 4, 2, 2, 0, 3, 0, 0, 0, 2, 0, 2, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) == ( divInt(len(in2),divInt(len(\"\"hr\"\"),( ( i2 + int(3.0) ) + int(7.0) ))) + divInt(int(9.0),divInt(( i2 * ( i0 - ( i0 * int(5.0) ) ) ),i2)) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 1], [], [0, 0], [], [], [1, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 0, 2, 8, 7, 7, 1, 7, 7, 7, 6, 5, 5, 4, 6, 3, 6, 7, 7, 6, 5, 6, 5, 7, 1, 6, 0, 3, 7, 4, 1, 0, 0, 6, 5, 7, 5, 3, 7, 3, 1, 6, 6, 8, 5, 2], [2, 2, 2, 0, 2, 1, 1, 2, 2, 1, 0, 2, 0, 2, 2, 0, 2, 0, 1, 2, 1, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 2, 2, 1, 0, 2, 0, 0, 2, 2, 0, 0], [0, 1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 2, 1, 1, 3, 2, 2, 0, 3, 2, 0, 3, 2, 3, 2, 2, 1, 3, 2, 3, 2, 0, 0, 2, 3, 3, 0, 1, 1, 1, 0, 2, 2, 2, 2, 0, 2, 3, 2, 2, 2, 3, 0, 0, 3, 0, 1, 1, 2, 3, 2, 3, 0, 3, 3, 1, 1, 2, 3, 2, 1, 0, 3, 2, 3, 0, 0, 2, 3, 2, 0, 0, 1, 0, 1, 2, 3, 0, 2, 0, 1, 1, 2, 1, 1, 3, 0, 3, 0, 1, 2, 0, 1, 0, 2, 1, 3, 0, 1, 3, 3, 0, 3, 3, 1, 3, 2, 2, 3, 2, 3, 3, 2, 2, 0, 0, 3, 0, 3, 3, 1, 1, 2, 3, 1, 3, 2, 0, 1, 2, 3, 1, 0, 2, 0, 0, 1, 1, 2, 1, 1, 3, 3, 0, 0, 3, 2, 2, 2, 1, 2, 1, 0, 1, 1, 0, 3, 1, 2, 1, 1, 1, 3, 2, 1, 2, 2, 2, 2, 0, 1, 0, 2, 3, 2, 0, 0, 2, 1, 2, 0, 1, 3], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [4, 3, 3, 0, 0, 4, 3, 0, 3, 0, 1, 1, 1, 2, 4, 1, 4, 1, 2, 4, 1, 3, 2, 3, 0, 1, 3, 2, 3, 1, 4, 0, 0, 4, 3, 3, 3, 1, 0, 0, 1, 2, 2, 1, 2, 4, 1, 4, 4, 4, 2, 4], [1, 0, 0, 2, 1, 2, 0, 1, 2, 1, 0, 1, 1, 2, 1, 0, 0, 2, 2, 0, 0, 1, 0, 2], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0], [1, 5, 3, 2, 4, 5, 3, 5, 0, 3, 2, 4, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [0, 2, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 1, 2, 2, 2, 2, 4, 4, 2, 1, 4, 1, 2, 4, 2, 4, 0, 1, 2, 4, 1, 0, 1, 0, 0, 2, 4, 0, 1, 4, 1, 2, 2, 2, 4, 2, 0, 4, 2, 1, 0, 4, 1, 4, 0, 4, 0, 2, 2, 2, 2, 2, 2, 1, 1, 4, 4, 2, 1, 1, 1], [0, 3, 2, 2, 1, 0, 3, 3, 0, 2, 3, 2, 3, 2, 2], [4, 3, 3, 0, 3], [0, 1, 1, 0, 1, 1, 2, 1, 1, 2, 0, 2, 0, 2, 1, 2, 0, 0, 1, 2, 0, 2, 2, 2, 2], [3, 1, 2, 3, 3, 0, 3, 2, 0, 3, 3, 1, 1, 2, 3], [15, 19], [0, 10, 1], [2, 8, 7], [27, 12, 24, 25, 27, 10, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 46, 46, 47, 0, 202, 57, 52, 24, 33, 14, 15, 0, 72, 15, 5, 25, 15, 2, 3, 3, 7], "tree_depth": 68, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s1) \\le len(in2[( len((in0 + (s2[min(min(i2, divInt(i2,i2)), i0):int(3.0)][:saveOrd(in1)] + (\"\"\\\\\\\\\"\" + getCharFromString(\"\"a\"\"[:len(\"\"2\"\".capitalize())].rstrip(saveChr(min(mod(i2,int(0.0)), int(2.0)))[i1:( int(8.0) - int(7.0) )].capitalize()[len(in2):]), ( divInt(i1,min(( i2 + max(( max(( ( int(7.0) + max(( abs(mod(i2,i1)) * ( saveOrd(\"\")\"\") - max(i0, int(1.0)) ) ), int(7.0)) ) * int(7.0) ), i2) + divInt(mod(divInt(mod(i0,divInt(saveOrd(getCharFromString(\"\"?\"\", ( ( mod(max(i2, i2),abs(i0)) - int(7.0) ) * int(6.0) ))[mod(saveOrd(in0),( max(i2, len(\"\"P\"\")) - abs(int(5.0)) )):]),int(5.0))),mod(len(in2),divInt(int(4.0),i0))),min(( max(i1, i2) + mod(len(s0),divInt(i1,i0)) ), int(6.0))),i0) ), int(3.0)) ), divInt(abs(i1),( i2 - int(6.0) )))) - int(7.0) ))[:divInt(int(7.0),int(6.0))][len(in0.lstrip(\"\"@\"\")[i0:max(i0, int(5.0))]):][:divInt(i1,int(6.0))][:i0])))[:divInt(int(5.0),saveOrd(\"\"8\"\".lstrip(getCharFromString(s2[i0:int(7.0)], min(min(i0, saveOrd(\"\"T\"\"[len(in1):int(1.0)].capitalize())), len(\"\"\\\\\\\\\"\".lstrip())))[mod(mod(len(s0.capitalize()),mod(max(min(( ( i1 * i0 ) - min(i0, max(abs(int(6.0)), int(0.0))) ), mod(abs(int(3.0)),max(divInt(i0,int(7.0)), ( abs(int(4.0)) + i2 )))), ( i2 + i2 )),int(1.0))),int(0.0)):][:( int(0.0) * int(6.0) )][saveOrd(s1.lstrip(\"\"\"\\\\\"\"\"[max(i1, i0):][saveOrd(\"\"k\"\"):][divInt(divInt(mod(int(5.0),( int(7.0) * i2 )),int(5.0)),int(3.0)):][i0:saveOrd(\"\"b\"\"[int(7.0):].capitalize().capitalize())][( int(3.0) + int(1.0) ):][:int(6.0)])):])))]) + saveOrd(\"\"7\"\") ):divInt(int(6.0),mod(( ( divInt(i0,int(8.0)) - i2 ) + divInt(abs(mod(i2,i0)),( int(5.0) * divInt(i0,int(2.0)) )) ),saveOrd(\"\",\"\")))])\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 4, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [2, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 3, 0, 2, 2, 1, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [1, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5, 2], [1, 1, 1], [], [0, 4, 0, 2, 0, 0, 3, 2, 2, 0, 0, 4, 1, 3, 1, 2, 2, 1, 4, 0], [0, 3, 2], [4], [0, 0, 1, 2, 1], [2, 1, 3], [], [14], [1], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 12, 12, 4, 1, 19, 4, 5, 2, 3, 7, 3, 0, 20, 3, 1, 5, 3, 0, 1, 1, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l saveOrd(in1):{:\\nres0 = getCharFromString(in2, mod(len(in2[len(s0):( len((in2[:i2][mod(mod(int(9.0),int(4.0)),int(9.0)):int(55.0)] + in2)) - int(6.0) )]),saveOrd(\"\"1\"\".rstrip((\"\"o\"\" + \"\"]\"\"[:i0][i2:]))))) not in s2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= int(2174.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 1], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1], [1, 6, 3, 7, 6, 3, 6], [0, 2, 1, 0, 2], [1], [3, 1, 3, 0, 2, 3, 0, 0, 1, 3, 1, 1, 3], [1, 0, 1, 1, 0, 1], [4, 3, 3, 3, 4], [0, 1, 0, 1, 2, 1], [0, 0, 0], [3, 5, 1, 4, 4], [0, 1], [], [2, 0, 1, 4, 3, 1, 1, 2, 4, 0, 3, 0, 1], [0, 0, 0], [], [2, 0], [1, 2], [5], [5], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 1, 2, 0, 3, 0, 0, 1, 2, 0, 1, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in0[int(16.0):]) \\le len(\"\"f3\"\")\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 8, 9, 7, 3, 5, 5, 6, 0, 8, 9, 9, 4, 9], [1, 0, 1, 2, 1, 1, 1, 2, 1, 2, 0, 0, 1, 1, 1, 2, 0, 1, 0, 1, 2, 2, 2, 2, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 2, 3, 1, 3, 3, 3, 2, 0, 1, 0, 0, 1, 1, 1, 2, 3, 2, 3, 3, 0, 3, 1, 1, 0, 2, 1, 0, 2, 2, 1, 3, 0, 2, 0, 0, 0, 2, 2, 0, 2, 3, 0, 2, 3, 0, 3, 2, 0, 3, 3, 2, 0, 1, 2, 0, 2, 0, 0, 3, 1, 2, 3, 2, 3, 1, 3, 3, 2, 0, 3, 1, 0, 2, 2, 3, 3, 0, 3, 0, 3, 0, 3], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], [2, 2, 3, 0, 0, 3, 0, 0, 1, 4, 4, 0, 0, 1, 2, 3, 4, 2, 0, 4, 4, 4, 0, 3, 1, 3, 4, 3, 4, 4], [2, 1, 2, 1, 0, 1, 2, 1, 2, 2], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [4, 5, 3, 2, 4, 5, 1, 0, 1, 1, 4], [1, 1, 1, 1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 4, 2, 2, 4, 0, 4, 0, 2, 2, 4, 1, 0, 4, 4, 0, 2, 0, 4, 1, 1], [0, 3, 2, 2, 1, 1, 1], [4], [0, 2, 0, 1, 1, 0, 2, 1], [0, 0, 0, 2], [4, 3, 23], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 14, 14, 25, 0, 91, 23, 30, 10, 13, 11, 4, 0, 32, 7, 1, 8, 4, 3, 0, 1, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(abs(divInt(len(in1),min(min(i1, ( i0 * mod(len(\"\"E\"\"),int(28.0)) )), min(min(max(divInt(i1,int(9.0)), i2), i1), int(7.0)))))) \\l int(3.0):{:\\nres0 = int(5.0) \\le divInt(saveOrd(in2),( saveOrd((in0 + (s2[min(i1, min(int(5.0), int(6.0))):i1][divInt(int(0.0),i2):] + in1))[( divInt(int(8.0),max(i1, mod(i2,i0))) - i0 ):divInt(( i1 * mod(abs(i1),mod(len(in2),i1)) ),saveOrd(getCharFromString(s1.rstrip(s0.capitalize())[:mod(i2,abs(min(( i0 - int(9.0) ), ( i1 + ( i0 - i1 ) ))))][:saveOrd(\"\"D\"\".capitalize()[int(9.0):][divInt(saveOrd(s1),mod(saveOrd(saveChr(int(4.0))),min(len(saveChr(( i2 * max(int(9.0), i2) ))), ( ( len(s1) - saveOrd(in1[:i2]) ) * len(saveChr(i2)) )))):saveOrd(\"\"X\"\")])], i1)))]) * saveOrd(\"\"5\"\") ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 0, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2, 1], [0, 0, 0], [1, 0], [3], [0], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 5, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 1, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 2, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [0, 1], [], [1, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [0, 3], [9], [], [], [24]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 2, 5, 2, 2, 1, 1, 0, 0, 8, 8, 4, 0, 19, 5, 3, 2, 3, 4, 2, 0, 6, 0, 0, 1, 2, 1, 0, 0, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( \"\"J?\"\" not in in1 and int(05.0) \\l int(9.0) ):{:\\nres0 = in2 in in2[mod(max(len(s0), ( i1 * i0 )),mod(mod(( int(8.0) - int(9.0) ),int(5.0)),int(5.0))):abs(i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = i1 \\le int(6.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 5], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 5, 9, 7, 5, 5, 5, 9, 0, 3, 2, 2, 9, 2, 3, 2, 0, 6, 8, 9, 3, 3, 0, 2, 3, 0, 9, 9, 7, 8, 3, 8, 1, 1, 2, 0, 3, 1, 9, 7, 6, 2, 6, 8, 1, 0, 3], [1, 0, 1, 2, 1, 1, 2, 2, 0, 0, 0, 0, 2, 2, 0, 2, 2, 1, 2, 0, 2, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 2, 2, 0, 2, 1, 2, 2, 1, 2, 1, 0, 0, 0, 0, 1, 2], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 3, 1, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 2, 3, 1, 1, 2, 2, 3, 1, 2, 0, 1, 0, 3, 2, 2, 1, 3, 3, 1, 2, 1, 3, 1, 2, 2, 1, 1, 0, 0, 3, 3, 0, 3, 3, 3, 2, 3, 0, 2, 1, 2, 2, 3, 1, 2, 0, 1, 3, 1, 2, 2, 0, 2, 2, 3, 0, 1, 2, 3, 0, 2, 3, 2, 1, 0, 0, 0, 2, 3, 2, 2, 3, 0, 0, 2, 0, 0, 2, 3, 2, 3, 0, 1, 3, 3, 3, 2, 3, 0, 0, 1, 0, 1, 1, 1, 3, 0, 3, 3, 1, 3, 3, 2, 0, 2, 0, 3, 1, 1, 3, 0, 0, 0, 0, 2, 1, 0, 2, 1, 2, 2, 2, 0, 1, 3, 3, 0, 2, 2, 3, 3, 1, 2, 0, 3, 1, 3, 3, 0, 2, 0, 0, 1, 0, 1, 2, 3, 2, 1, 2, 1, 0, 3, 0, 2, 2, 3, 2, 2, 3, 1, 1, 1, 1, 0, 2, 0, 0, 2, 3, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 3, 0, 3, 0, 3, 0, 0, 1, 2, 1, 0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 1, 3, 0, 0, 1, 3, 1, 1, 3, 1, 1, 1, 3, 1, 0, 2, 4, 0, 0, 2, 4, 0, 2, 3, 1, 2, 1, 1, 2, 0, 1, 4, 2, 2, 4, 1, 0, 4, 0, 4, 0, 4, 1, 0, 0, 2, 3, 1, 1, 1, 3, 0, 2, 4, 1, 2, 2, 4, 4], [2, 0, 1, 2, 0, 0, 0, 1, 2, 0, 1, 0, 2, 0, 0, 1, 1, 0, 0, 2, 2, 2], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5, 2, 4, 4, 3, 0, 2, 2, 3, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 0, 1, 1, 0, 2, 2, 4, 4, 2, 2, 1, 2, 2, 4, 2, 2, 0, 1, 4, 4, 2, 0, 2, 1, 0, 0, 4, 2, 1, 1, 0, 2, 0, 0, 4, 4, 3, 1, 3, 2, 1, 3, 1, 2, 1], [0, 3, 2, 3, 3, 0, 3, 2, 3], [4, 5, 0, 4, 2], [0, 2, 2, 2, 0, 0, 1, 2, 0, 1, 2, 0, 1, 2, 2, 0, 0], [1, 1, 1, 0, 1, 3, 0, 3, 1, 2, 0], [5, 4, 2], [7, 16, 12, 8, 1], [9], [15, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 47, 47, 53, 0, 213, 56, 60, 22, 34, 15, 11, 0, 57, 9, 5, 17, 11, 3, 5, 1, 2], "tree_depth": 68, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(in1) \\l max(divInt(len(in2),min(min(i1, ( i0 * i1 )), max(int(25.0), len(in0)))), max(max(len((s2 + (in1[i2:][int(9.0):] + in2))[mod(i1,divInt(int(7.0),mod(max(int(5.0), int(5.0)),( divInt(max(int(5.0), divInt(i1,int(9.0))),i2) + max(mod(mod(int(0.0),len(getCharFromString(s2, max(int(3.0), mod(int(2.0),min(int(2.0), mod(( int(9.0) - int(2.0) ),i2))))))),i0), abs(saveOrd(\"\"h\"\"))) )))):i0]), min(min(abs(( saveOrd(\"\"q\"\") * i0 )), divInt(int(320.0),divInt(divInt(min(int(6.0), ( i0 + int(8.0) )),abs(int(9.0))),( ( i2 + divInt(mod(len(in1),i2),int(3.0)) ) + ( max(i0, mod(abs(( int(3.0) - i2 )),i2)) * i1 ) )))), divInt(max(( divInt(max(i2, i0),divInt(i2,i0)) + ( abs(( min(i0, int(0.0)) - max(saveOrd(\"\"m\"\"[:abs(mod(abs(i1),i1))][int(2.0):i0].capitalize().rstrip(in1[int(3.0):][:int(0.0)].strip(\"\"F\"\")[int(9.0):saveOrd(getCharFromString(in0[i1:max(min(int(9.0), saveOrd(\"\"i\"\"[:min(divInt(i0,( i0 + saveOrd(s0) )), int(7.0))])), int(8.0))], min(i0, i1)).lstrip())][i0:])[i0:mod(int(3.0),i0)][( int(8.0) * ( mod(mod(i0,int(1.0)),saveOrd(s2)) + max(i0, ( divInt(min(min(int(1.0), ( i1 + abs(int(2.0)) )), len(\"\",\"\"[max(i2, mod(i2,i0)):].rstrip(\"\"E\"\"))),int(0.0)) - i2 )) ) ):]), int(3.0)) )) - ( max(divInt(int(1.0),divInt(int(9.0),i1)), max(i2, ( divInt(len(s2),( ( min(int(7.0), int(6.0)) + int(2.0) ) + int(6.0) )) * i2 ))) * mod(i1,i2) ) ) ), mod(abs(( saveOrd(in0[i1:]) * int(8.0) )),divInt(max(i0, int(1.0)),divInt(abs(abs(i0)),saveOrd(s0))))),i0))), saveOrd((\"\"=\"\" + (\"\"b\"\"[i0:i1] + (\"\"9\"\" + \"\"C\"\"[int(0.0):divInt(int(3.0),i2)]))).strip().capitalize())))\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 0, 0, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 1, 2, 2, 1, 1, 3, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [0, 0, 1], [], [0, 1, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3, 1, 2], [], [23], [0], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 4, 5, 2, 3, 3, 3, 0, 5, 0, 0, 1, 3, 0, 1, 1, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(20.0) \\l max(mod(len(in1),len(\"\"\"x0\"\")), ( i1 * i0 )):{:\\nres0 = in2 not in in2[int(0.0):mod(mod(int(8.0),int(9.0)),min(int(5.0), min(i2, i1)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= int(5.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1], [2, 1, 2, 1, 2, 1, 1], [2, 1, 0], [0, 2, 1, 2], [0], [0, 0], [], [], [0, 1], [4, 4], [1, 0, 2], [0, 0], [0], [1], [], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 1, 8, 7, 7, 1, 4, 2, 8, 5, 9, 6, 7, 5, 7, 0, 8, 2, 9], [0, 2, 2, 0, 2, 1, 0, 2, 0, 2, 0, 0, 0, 2, 2, 2, 1, 0, 1, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 0, 1, 1, 2, 3, 2, 1, 0, 2, 0, 1, 0, 3, 0, 1, 3, 1, 2, 3, 1, 3, 3, 2, 1, 3, 3, 0, 0, 2, 1, 0, 3, 2, 1, 1, 3, 2, 0, 0, 0, 0, 2, 0, 1, 1, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0], [4, 3, 3, 0, 0, 1, 0, 2, 0, 4, 0, 1, 4], [0, 0, 0, 2, 1, 2, 0, 2, 1, 1], [1, 0, 1, 0, 1, 1, 1], [0, 5, 3, 2, 4, 5, 5, 4, 5, 0, 5, 0, 4], [1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 1, 4, 3, 1, 4, 1, 2, 0, 3, 1, 4, 4, 4, 2, 4, 2, 1, 2, 0, 0, 0, 2, 3, 1, 4, 2, 4, 2, 1], [0, 3, 2, 3, 2, 0, 0, 0, 3], [4, 3, 0], [2, 2, 1, 2, 2, 2, 0, 1, 0, 0], [3, 2, 3, 0, 0, 1, 2, 3, 0, 0, 0], [18, 8, 6, 3, 12], [10], [0, 5], [30, 30, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 1, 0, 0, 0, 1, 1, 3, 1, 1, 1, 0, 1, 1, 20, 20, 20, 1, 69, 17, 13, 10, 7, 13, 11, 1, 41, 9, 3, 10, 11, 5, 1, 2, 3], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\le ( ( len(in2) + mod(len(in0),( divInt(int(2.0),i0) + int(6.0) )) ) + int(1.0) ):{:\\nb0 = True\\nif (s2 + (in1[:i2][mod(int(8.0),i2):] + in2))[int(7.0):] in getCharFromString(\"\"_\"\", i0):{:\\nin2 = (\"\"0_S\"\" + \"\"Ik\"\".capitalize()).rstrip(in1[( i2 * int(7.0) ):])\\nloopBreak% = 0\\nfor in2 in (\"\"5!\"\" + getCharFromString(getCharFromString(\"\"G\"\"[( i1 - int(1.0) ):], int(4.0))[divInt(min(mod(int(2.0),i0), mod(i2,int(8.0))),i0):], min(i2, int(5.0))).capitalize().lstrip(s0[max(int(9.0), ( min(int(6.0), abs(min(( int(7.0) * saveOrd(in2) ), min(i0, i0)))) + ( int(5.0) * i0 ) )):max(( int(7.0) - int(0.0) ), saveOrd(s0))])):{:\\ni2 = mod(i2,i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = (\"\"D\"\" + getCharFromString(\"\"M\"\"[i1:i0].lstrip()[( i1 - int(8.0) ):int(2.0)], int(9.0)))[:i2]\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3, 1], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1], [4, 1, 3, 8, 7, 7, 1], [0, 2, 2, 0, 2], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 1, 0, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0, 1], [5, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [2], [3], [], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 2, 4, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(\"\";\"\") \\le ( divInt(len(in2),divInt(len(in2),divInt(( int(4.0) + i0 ),int(1.0)))) + int(3.0) ):{:\\nres0 = i2 \\le mod(int(8.0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1], [2, 2, 0, 1, 2, 0, 1, 1], [2, 1, 0], [0, 2, 2, 0, 0], [0], [0, 0], [], [], [2, 1, 3], [0, 4, 3, 4], [1, 1, 1, 1, 2], [0, 0, 0, 0], [5], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 7, 2, 8, 5, 3, 4, 2, 5, 0, 0], [1, 1, 1, 2, 1, 1, 0, 0, 2, 1, 0, 0, 0, 1, 0], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 2, 3, 3, 1, 1, 1, 1, 3, 3, 3, 2, 0, 1, 3, 1, 0, 0, 0, 0, 2, 2, 0, 1, 0, 0, 3, 3, 0, 2, 1, 0, 2, 3, 1], [1, 0, 1, 1, 1, 0, 0, 0, 0], [2, 1, 3, 0, 0, 3, 3, 4, 1, 2, 2, 4, 4, 2, 0, 2, 4], [1, 0, 2, 2, 1], [0, 1, 0, 0], [0, 5, 3, 2, 4, 5, 2, 5, 4, 2, 1, 0, 3, 2, 0, 0, 2, 3, 2], [1, 1, 1, 1], [0], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 4, 0, 2, 1, 2, 0, 1, 4, 0, 4, 4, 2, 0, 3, 0, 3, 0, 0, 4, 3, 2, 4, 3, 4, 4, 1, 0, 4, 4, 0, 0, 1], [0, 3, 2, 2, 2, 2, 0, 2, 3, 2, 0], [4, 5], [1, 0, 2, 0, 1, 2, 1], [1, 1, 3, 3], [], [0, 5], [], [20, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 1, 2, 0, 0, 3, 4, 5, 4, 1, 0, 0, 0, 1, 13, 13, 15, 0, 53, 9, 17, 5, 4, 19, 4, 1, 44, 11, 2, 7, 4, 0, 2, 0, 2], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(divInt(len(s0),min(min(i1, ( i1 - i1 )), i2)), int(22.0))) \\l len(in2):{:\\nif len(in0) \\le saveOrd((s2 + (in1[mod(i1,int(4.0)):][int(7.0):divInt(max(abs(int(2.0)), int(8.0)),int(5.0))] + in2))[:int(3.0)]):{:\\nb2 = abs(saveOrd(getCharFromString(s2.rstrip(\"\"a\"\"[saveOrd(in2[:divInt(i1,int(4.0))]):abs(int(2.0))]), i0))) \\ge i0\\nin1 = \"\"f\"\"\\nloopBreak% = 0\\nfor s2 in s1.capitalize():{:\\ns0 = in0[i2:].capitalize().capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = i1 \\le ( ( i0 + int(5.0) ) * i0 )\\n:}else:{:\\nres0 = (s2 + (s0 + s0)).endswith((getCharFromString((\"\";\"\".strip(s2).capitalize() + getCharFromString(in0, i0).capitalize()), min(abs(i1), ( int(0.0) * i0 )))[:( saveOrd(s2) - int(0.0) )] + \"\"_\"\").capitalize())\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 7, 5, 5, 5], [1, 1, 1, 2, 0, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 1, 0, 3, 1, 0, 2, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 2], [0, 1, 0], [0, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [2], [], [], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 6, 0, 23, 3, 9, 1, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(( len(s0) * min(min(i1, divInt(i1,i1)), i2) ), int(22.0))) \\l len(\"\"4\"\"):{:\\nres0 = min(max(int(9.0), i0), max(int(7.0), i1)) \\le mod(int(5.0),int(5.0))\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [1, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [], [0, 1, 1, 1, 1, 1, 1], [2, 6, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 2, 2, 0, 2, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 2, 0, 1, 3, 3, 3, 2, 0, 1, 0, 0, 3, 1, 1, 2, 2, 0, 0, 0], [0, 0, 1, 0, 0, 1], [2, 1, 3, 0, 0, 3, 0, 1, 1], [2, 1, 2, 1, 0], [0, 1, 0], [4, 5, 3, 2, 4, 5], [1], [], [0, 1, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [3], [], [], [], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 10, 1, 28, 6, 9, 5, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(max(( len(in1) * min(min(i1, ( i0 - divInt(i1,int(26.0)) )), len(\"\"]\"\")) ), min(max(( i2 * int(9.0) ), i1), i2))) \\l max(int(7.0), int(3.0)):{:\\ni2 -= ( mod(i0,i2) + i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 2], [0, 0], [0], [], [], [], [], [0, 1, 1, 0, 1, 1, 1], [2, 1, 9, 7, 3, 5, 5], [1, 0, 1, 2, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 1, 1, 0, 3, 1, 1], [1, 0, 1], [3, 1, 3, 4, 0, 3, 0, 1, 1], [2], [0, 1, 0], [4, 5, 3, 2, 4, 5, 5], [1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 0, 1], [0, 3, 2], [4], [0, 0, 2], [3], [], [], [], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 6, 0, 23, 3, 9, 1, 2, 7, 1, 0, 13, 0, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(in1) \\l max(divInt(len(in2),saveOrd(in0)), min(i1, ( i0 * i1 ))):{:\\nres0 = (s2 + (in1[i2:][int(21.0):len(in2)] + in2))[min(max(mod(i1,int(9.0)), int(73.0)), i1):max(int(5.0), int(5.0))] in \"\"%\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [2, 2, 1, 2], [0, 0, 0], [1, 2], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [0, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [0, 1], [], [0, 1, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [2, 3], [], [], [7], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 7, 7, 6, 1, 20, 5, 4, 3, 3, 6, 2, 0, 11, 0, 0, 3, 2, 0, 0, 1, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 not in \"\"7\"\"\":{:\\nres0 = in2 == in2[i1:max(mod(len(s0),len((in2[:( i0 * i2 )][mod(mod(( int(10.0) - int(9.0) ),int(8.0)),int(9.0)):min(i1, i2)] + in2))), int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(5.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 0], [2], [0, 1, 1], [], [0, 0, 0], [], [], [1, 1, 2], [4, 0], [1, 2, 0], [0, 0], [1], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 7, 3, 8, 4, 5, 5, 1, 4, 4, 7, 8, 4, 4, 8, 3, 1, 4, 3, 8, 2, 2, 7, 1, 1, 7, 6, 5], [2, 1, 2, 2, 2, 0, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 0, 0, 2, 0, 0, 2, 2], [1, 0], [1, 3, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 3, 2, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0, 1, 3, 2, 0, 1, 1, 3, 3, 3, 0, 0, 0, 3, 0, 3, 1, 1, 2, 2, 3, 2, 3, 2, 2, 2, 2, 1, 0, 0, 3, 1, 0, 0, 3, 0, 2, 0, 3, 1, 0, 0, 0, 1, 1, 0, 3, 1, 3, 2, 1, 2, 2, 2, 3, 0, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [2, 3, 3, 2, 3, 3, 3, 0, 1, 0, 3, 0, 1, 2, 1, 1, 1, 0, 3, 3], [2, 1, 0, 2, 1, 2, 0, 0, 1, 2, 2, 1], [1, 0, 1, 0, 0, 0, 1, 1], [4, 5, 5, 1, 4, 5, 2, 1, 1, 2, 0, 2, 2, 3, 2], [1, 1, 1, 1], [], [0, 0, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0, 2, 2, 1, 2, 4, 2, 2, 3, 2, 0, 3, 4, 3, 4, 1, 0, 1, 4, 4, 0, 3, 3, 0, 3, 0, 0, 0, 4, 4, 1, 0], [0, 3, 2, 2, 0, 0, 3, 3, 2], [4, 2, 3], [2, 0, 1, 2, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1], [5, 20], [2, 24], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 28, 28, 25, 1, 82, 19, 20, 12, 8, 15, 4, 0, 46, 9, 3, 11, 4, 2, 2, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(17.0) \\le abs(mod(len(in1),( len(in2) * divInt(mod(i2,int(38.0)),int(4.0)) ))):{:\\nb1 = in2 not in getCharFromString(s1.rstrip((in1[abs(len(in2)):divInt(int(5.0),i1)][divInt(i2,i2):] + s2[:i2][i0:][:len(\"\"F\"\"[int(5.0):int(1.0)][:i1])])), int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= len((s1[divInt(i1,int(4.0)):int(7.0)] + ((getCharFromString(\"\"U\"\", min(max(min(i2, i2), i1), len(s1))) + \"\"c\"\").capitalize() + getCharFromString(s2.strip(), i2)))[min(int(844.0), int(8.0)):mod(( max(( abs(( ( mod(( int(3.0) + i1 ),i1) * max(int(1.0), i2) ) - i1 )) * max(i1, ( i0 + max(int(4.0), i0) )) ), i2) + i0 ),int(3.0))][int(82271.0):i0].capitalize()[min(int(1.0), len(((s0 + (s2 + s2)) + in0))):( int(76.0) - ( ( ( len(\"\"y\"\".capitalize().lstrip(s2)) * i2 ) * int(5.0) ) - i2 ) )])\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1], [2, 0, 2, 2, 2, 1, 0, 1, 1, 2, 0, 2, 2, 1, 1, 2, 2, 2, 1, 1], [0, 0, 0, 0, 0, 2, 0, 1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 2, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0], [1, 1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8, 2, 1, 9, 6, 9, 8, 9, 6, 0, 6, 8, 7, 5, 8, 3, 1, 1, 2, 1, 5, 9, 5, 4, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0, 2, 1, 0, 1, 1, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 1, 0, 1, 1, 2, 0, 2, 2, 2, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0, 1, 0, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 2, 1, 2, 3, 3, 0, 1, 2, 1, 3, 1, 0, 0, 3, 2, 2, 0, 1, 0, 0, 0, 2, 3, 0, 1, 3, 0, 2, 3, 0, 3, 2, 1, 0, 3, 1, 0, 3, 2, 1, 3, 3, 2, 0, 1, 0, 0, 2, 0, 3, 3, 1, 3, 3, 2, 2, 3, 3, 2, 1, 2, 3, 1, 1, 3, 0, 2, 3, 0, 3, 0, 0, 3, 0, 0, 1, 3, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 3, 4, 0, 4, 3, 2, 1, 0, 1, 2, 0, 3, 2, 0, 2, 1, 1, 0, 3, 0, 0, 2, 2, 2, 3, 4, 2, 2, 4, 3], [2, 1, 0, 0, 0, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 1, 1, 2, 1, 2, 2], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0], [4, 5, 5, 0, 5, 5, 4, 2, 3, 4, 4, 4, 2, 2, 1, 0, 0, 0, 4, 0, 3, 2, 5, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 0, 3, 2, 2, 0, 0, 2, 0, 4, 1, 3, 2, 4, 2, 4, 2, 0, 1, 0, 4, 4, 4, 0, 0, 4, 2, 2, 1, 1, 2, 1, 1, 2, 0, 4, 0, 4, 2, 2, 0, 0, 4, 1, 0, 0, 0], [0, 3, 2, 3, 0, 1, 1, 3, 0, 0], [4, 1, 3], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 2, 2, 0, 0], [2, 0, 2, 2, 2, 3, 2], [15], [], [5, 8, 5, 8, 4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 20, 20, 10, 10, 7, 3, 0, 0, 1, 2, 4, 2, 2, 0, 0, 0, 2, 54, 54, 43, 8, 141, 35, 32, 21, 17, 26, 7, 7, 51, 10, 3, 14, 7, 1, 0, 5, 1], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = int(10.0) \\l max(mod(len(in2),len(s0)), ( i1 * i0 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in in2[mod(mod(( int(9.0) - int(8.0) ),int(9.0)),int(5.0)):saveOrd((in1[:i2][:int(5.0)] + s2))][int(6.0):int(2174.0)]:{:\\nloopBreak% = 0\\nfor in0 in in1[int(20.0):i1]:{:\\nloopBreak% = 0\\nfor in1 in getCharFromString(\"\"5\"\", int(65083.0)):{:\\ni2 += mod(i1,( mod(( int(305.0) + i1 ),int(5.0)) + divInt(i0,int(8.0)) ))\\ni1 *= int(72.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = min(int(9888.0), int(2.0))\\ni2 = i2\\nloopBreak% = 0\\nfor in1 in (s2[int(1.0):i0].capitalize()[:int(9.0)].rstrip(\"\"P\"\")[:( int(6.0) + int(9.0) )] + s2):{:\\ni2 = int(8.0)\\nloopBreak% = 0\\nwhile getCharFromString(saveChr(( divInt(( mod(divInt(int(9.0),int(6.0)),i1) - ( saveOrd(s1) * ( i0 + len(s0) ) ) ),abs(mod(i1,( int(0.0) + ( max(min(i1, int(6.0)), mod(int(8.0),max(int(7.0), i2))) + i2 ) )))) * abs(( divInt(i0,int(5.0)) - i0 )) )), i1).rstrip() not in saveChr(i1):{:\\nloopBreak% = 0\\nfor s0 in \"\"8\"\"[:( min(i0, int(8.0)) - len(\"\"5\"\") )][:i0]:{:\\ni0 = ( abs(i0) - min(divInt(int(3.0),i0), abs(int(1.0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = \"\"8\"\"[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif max(( int(1.0) - max(min(divInt(i1,int(2.0)), i0), i1) ), ( i1 * len(\"\";\"\") )) \\le min(int(1.0), min(abs(( divInt(abs(abs(divInt(int(5.0),( len(in1[int(9.0):]) - int(5.0) )))),saveOrd(s0.lstrip(getCharFromString(in0[i2:divInt(abs(i0),abs(i2))][i2:saveOrd(s2)], i2)))) * i1 )), int(4.0))):{:\\nif getCharFromString(\"\"4\"\", len(in2)) not in s1:{:\\nloopBreak% = 0\\nfor s1 in s1:{:\\ni1 *= int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni1 = i0\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [5], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 5, 8, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 2, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [1], [], [1, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [1], [], [8], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 7, 7, 5, 1, 19, 5, 4, 3, 3, 3, 1, 0, 5, 0, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(15.0) \\l max(mod(len(\"\"i\"\"),len(in1)), ( i1 * i2 )):{:\\nres0 = in2.endswith(in2[mod(mod(( int(8.0) - int(8.0) ),int(9.0)),int(5.0)):min(i2, i1)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(5.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1], [2, 2, 1, 2, 2, 1, 0, 1, 1], [2, 0, 1, 2], [0, 1, 1, 1, 1, 1], [0], [0, 0], [], [], [3, 1], [0, 4, 4], [0, 2, 1, 2, 2, 2], [0, 0, 0], [1, 2, 1, 0], [3], [1], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 8, 9, 7, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1, 0, 0], [1, 3, 3, 0, 0, 4, 3, 2, 1], [0, 1, 0, 0, 1, 2, 0], [1, 1, 1, 1, 1], [3, 5, 5, 0, 5, 5, 5, 0, 0, 0], [1, 1, 1, 1], [0], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0, 3, 2, 2, 1, 0, 2, 0, 1, 1, 1], [0, 3, 2], [4], [0, 0, 1, 1, 0, 1], [0, 1, 3, 3], [4], [25], [], [1, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 0, 0, 1, 1, 6, 1, 4, 1, 1, 0, 1, 30, 30, 11, 2, 39, 10, 5, 7, 5, 10, 4, 1, 21, 0, 0, 6, 4, 1, 1, 0, 2], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( in0 not in in2 or int(18.0) \\l max(mod(len(in2),len(s0[( i1 + i0 ):mod(mod(( int(9.0) - int(7.0) ),int(9.0)),int(5.0))])), min(i2, i1)) ):{:\\nloopBreak% = 0\\nfor in2 in in2:{:\\nres0 = (in2[:int(5.0)][int(6.0):int(2174.0)] + s0) == (\"\"E\"\"[i2:int(20.0)][:mod(i1,( mod(( int(65083.0) + i1 ),int(305.0)) + ( i0 - int(5.0) ) ))] + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif s0[:int(8.0)] not in \"\"z\"\":{:\\nloopBreak% = 0\\nwhile \"\"\\\\\\n\"\" in \"\";\"\":{:\\ni1 *= min(int(72.0), int(9888.0))\\ni0 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0, 1], [2], [0, 0], [], [0, 0], [], [], [3, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 7, 9, 5, 5, 7, 1, 2, 7, 7, 1, 1], [2, 2, 2, 0, 2, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 3, 1, 2, 1, 2, 1, 0, 2, 0, 1, 0, 2, 3, 3, 3, 2, 3, 1, 1, 0, 1, 0, 3, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0], [4, 3, 3, 0, 0, 0, 3, 1, 4], [0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1, 0, 0, 0, 1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 1, 4, 4, 0, 2, 1], [0, 3, 2], [4], [2, 2, 1, 1], [3, 0, 2, 3, 3], [2], [], [8], [20, 21, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 6, 0, 35, 10, 9, 7, 3, 6, 5, 0, 17, 3, 1, 4, 5, 1, 0, 1, 3], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(s1) \\ge ( divInt(len(getCharFromString(in2, divInt(len((in0 + (s2[:( ( i2 + int(3.0) ) + int(7.0) )][min(int(9.0), ( int(5.0) + ( int(5.0) * i2 ) )):] + in1))[( i2 - int(7.0) ):]),i0))),divInt(min(min(len(\"\";\"\"), ( max(int(1.0), int(2.0)) * i2 )), int(7.0)),i0)) + saveOrd(in2.capitalize().rstrip(\"\"C8<_\"\"[:int(711.0)])) )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 1, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [0, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 2, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [1, 3, 2, 3, 3, 2, 0, 0, 2, 1, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1], [2, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5], [1], [], [0, 0, 0, 1, 0, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0, 0, 1], [3], [], [], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 3, 1, 8, 2, 3, 2, 1, 3, 1, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l abs(mod(len(in1),len(in2))):{:\\nres0 = in2 not in \"\"&\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= ( i0 - i2 )\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 7, 5, 5, 5, 6], [1, 0, 1, 2, 1, 1, 1, 2, 2, 2], [1], [3, 2, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 0, 1, 0, 2, 2, 2, 3, 1, 1, 3, 1, 1, 0, 3, 3, 0, 0], [1, 0, 1, 1, 1, 1, 1], [2, 1, 3, 0, 4, 3, 0, 1, 1, 4, 3], [2, 1], [0, 1, 0, 1, 1, 1], [4, 5, 3, 2, 4, 5, 3, 1, 5], [1], [], [0, 4, 0, 2, 3, 0, 3, 2, 2, 0, 0, 3, 1, 3, 0, 0, 4, 0, 0], [0, 3, 2], [4], [0, 1, 1], [2], [], [], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 7, 7, 10, 0, 34, 7, 11, 1, 6, 9, 1, 0, 19, 2, 1, 3, 1, 0, 0, 1, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(divInt(( max(len(in1), min(i1, mod(i0,i1))) * i2 ),int(22.0))) \\l saveOrd(getCharFromString(in2, len((in0 + (s2[:min(divInt(i1,i1), int(2.0))][:i1] + in1))[mod(mod(mod(max(int(7.0), int(5.0)),max(int(5.0), int(5.0))),i2),saveOrd((\"\"6\"\" + (in2 + in0)))):len(s1.rstrip(in2))]))):{:\\nres0 = i2 \\le i2\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 0, 2, 0, 0], [2, 1], [0, 1, 1], [], [0, 0, 0], [], [], [3, 1, 2], [4, 0], [1, 1, 0], [0, 0], [], [0], [], [], [1], [0, 1, 0, 1, 1, 1, 1, 1], [8, 6, 3, 8, 4, 3, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1, 0, 2], [1, 0], [1, 3, 2, 3, 3, 3, 2, 2, 0, 1, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 2, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 0, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1, 1], [], [1, 2, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0, 3, 4, 0, 1], [0, 3, 2], [4], [2, 0, 1, 2, 1, 1], [0, 1], [5], [1], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 3, 0, 0, 2, 2, 3, 2, 0, 1, 0, 0, 1, 8, 8, 9, 2, 24, 4, 7, 2, 3, 6, 2, 0, 19, 3, 1, 6, 2, 1, 1, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(86.0) \\le abs(mod(len(\"\"F\"\"),len(in1[abs(( divInt(i2,int(38.0)) - int(4.0) )):]))):{:\\nres0 = i1 \\l len(getCharFromString(in2.rstrip((in2[:len(s1)][int(3.0):i2] + in1[:mod(i2,i2)][:i0][i1:])), len((in2.capitalize() + \"\"b\"\"))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b1:{:\\ni0 += int(5.0)\\n:}else:{:\\ni2 = int(1.0)\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1], [2, 2, 1, 2, 1, 1, 0, 1, 1, 0], [2, 1, 2], [0, 2, 2, 0, 2, 2, 0], [], [0, 0], [], [], [3, 1, 3, 3], [0, 4, 0, 0, 5], [0, 1, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0], [0, 1, 5, 0], [3, 3, 2, 2, 3, 3, 0], [1, 1, 0, 1], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1, 5, 2, 0, 8, 1, 3, 1, 2, 9, 1, 2, 8, 8, 3, 1, 3, 3, 1, 6, 7, 3, 9, 1, 9, 7, 0, 6, 2, 2, 1, 9, 2, 2, 4], [0, 2, 2, 0, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 0, 2, 2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 1, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1, 1, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 3, 0, 1, 1, 0, 2, 0, 0, 1, 0, 2, 0, 1, 0, 1, 1, 1, 0, 0, 3, 1, 0, 0, 3, 3, 3, 0, 3, 2, 1, 3, 2, 1, 1, 1, 2, 3, 2, 0, 0, 0, 2, 3, 0, 3, 3, 1, 3, 3, 3, 3, 1, 2, 0, 3, 0, 3, 2, 0, 3, 3, 3, 1, 1, 2, 2, 2, 1, 2, 0, 2, 2, 3, 3, 2, 3, 2, 3, 1, 0, 0, 3, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 3, 0, 2, 0, 2, 0, 1, 0, 1, 2, 0, 0, 1, 2, 1, 3, 3, 2, 3, 0, 0, 3, 3, 2, 2, 2, 0, 2, 3, 2, 3, 2, 2, 0, 0, 1, 3, 3, 3, 2, 0, 1, 3, 1, 3, 3, 0, 3, 2, 0, 0, 1, 1, 2, 0, 1, 3, 1, 2, 1, 2, 0, 1, 0, 1, 3, 3, 1, 1, 0, 3, 3, 0, 1, 3, 2, 3, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0], [4, 3, 2, 0, 0, 4, 2, 3, 0, 1, 1, 3, 4, 2, 2, 4, 4, 2, 1, 1, 4, 1, 3, 2, 3, 4, 1, 1, 3, 2, 2, 4, 0, 1, 4, 4, 3, 0, 0, 3, 1, 1, 2, 2, 3, 3, 0, 0, 4, 2], [0, 0, 0, 2, 1, 2, 0, 2, 1, 1, 0, 2, 2, 2, 0, 0, 1, 1, 0, 2], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 3, 3, 2, 4, 5, 4, 4, 5, 4, 5, 5, 2, 1, 0, 0, 5, 5, 0, 3, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], [], [0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 0, 0, 1, 3, 2, 2, 4, 4, 4, 4, 2, 2, 4, 4, 1, 1, 4, 1, 2, 1, 2, 0, 1, 4, 2, 2, 2, 4, 2, 4, 2, 1, 1, 2, 0, 2, 1, 0, 1, 0, 0, 1, 1, 2, 4, 2, 0, 2, 4, 2, 0, 4, 2, 3, 1, 0, 4, 1, 1, 0, 1, 0, 0], [0, 3, 2, 3, 0, 3, 1, 1, 0, 0, 1, 1, 1, 2], [4, 2, 5], [2, 0, 0, 1, 1, 1, 0, 0, 2, 1, 1, 0, 2, 2, 2, 0, 1, 2, 0, 2, 0], [1, 1, 2, 1, 2, 2, 1, 2, 2, 2, 3, 1, 2, 3, 0, 0, 3, 0, 2, 0], [7, 23, 2, 10], [11, 1, 14, 8, 12], [2, 2, 7, 4, 4, 4, 1, 9], [8, 24, 19]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 3, 7, 0, 2, 0, 0, 4, 5, 16, 5, 4, 7, 4, 0, 1, 41, 41, 49, 0, 179, 42, 50, 20, 22, 21, 20, 0, 73, 14, 3, 21, 20, 4, 5, 8, 3], "tree_depth": 70, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( saveOrd(s0) \\l ( divInt(len(in0),divInt(abs(( ( min(i0, int(4.0)) + int(6.0) ) + i2 )),divInt(i2,i0))) + int(9.0) ) or i2 \\le ( i2 * int(8.0) ) ):{:\\nif \"\"l\"\" in (in0 + (s2[i2:int(7.0)][int(7.0):int(1.0)] + in1))[i0:]:{:\\nres0 = in2 not in \"\"b\"\"\\n:}else:{:\\nloopBreak% = 0\\nwhile i2 \\l min(int(5.0), i1):{:\\nin1 = (getCharFromString(getCharFromString(\"\"2\"\".strip(\"\"o\"\"), i0)[saveOrd(saveChr(abs(len(\"\"2\"\")))):i2][:min(( int(2.0) - max(( int(0.0) * int(8.0) ), int(1.0)) ), ( max(divInt(i1,i2), i1) + ( len(\"\"7\"\"[i0:saveOrd(in1[abs(int(3.0)):])]) * abs(saveOrd(\"\"i\"\")) ) ))].strip().capitalize().rstrip(saveChr(saveOrd(getCharFromString(getCharFromString(\"\"4\"\"[abs(int(1.0)):], ( i2 - max(i2, max(( i2 - saveOrd(\"\"4\"\") ), max(len(in2[int(2.0):]), int(9.0)))) ))[mod(mod(( int(1.0) + mod(i1,( divInt(abs(len(\"\"4\"\"[divInt(saveOrd(in1),divInt(max(int(2.0), i2),i1)):max(i0, i0)])),i2) * i2 )) ),i1),mod(i1,i0)):], mod(int(8.0),len(\"\"%\"\")))[i0:mod(i1,( i0 * int(8.0) ))][:i0][:int(3.0)]))), divInt(i1,i0))[:int(1.0)][:mod(int(3.0),abs(abs(divInt(saveOrd(in2),i2))))] + in2)\\ns2 = \"\"m1\"\"\\nb1 = i0 \\l min(max(( divInt(mod(i0,divInt(saveOrd(\"\"?\"\"),( saveOrd(saveChr(divInt(divInt(i0,i1),int(3.0)))[:len(s1[min(min(( i0 * int(1.0) ), len(saveChr(int(6.0))[max(max(i2, abs(mod(i0,i0))), int(7.0)):int(3.0)])), ( i0 + int(9.0) )):])]) + abs(int(1.0)) ))),( int(9.0) - ( i0 - int(7.0) ) )) + i1 ), int(0.0)), len(s0[len(saveChr(int(6.0))):]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ns0 = (\"\"HX:\"\" + in2)[int(2219.0):i1]\\nin2 = \"\"C\"\".capitalize()\\nres0 = ( min(min(i0, int(2.0)), saveOrd(\"\"9\"\")) != ( abs(int(2.0)) * int(4.0) ) or not not ( s0.endswith(\"\"K\"\") and ( in0 in s2 or res0 ) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 0], [0], [0, 1], [0], [0, 0, 0], [], [], [3, 2, 2], [4, 3], [2, 1, 0], [0, 0], [1], [0], [], [], [1], [0, 1, 1, 1, 1, 1, 1], [1, 1, 9, 8, 6, 5, 5, 1, 4, 4, 7], [2, 1, 2, 2, 2, 0, 1], [1], [1, 3, 2, 3, 2, 3, 2, 2, 1, 1, 1, 0, 3, 0, 1, 0, 2, 0, 0, 0, 0, 3, 1, 1, 0], [1, 0, 1, 1, 1], [2, 3, 3, 3, 3, 3, 3, 0, 1], [1, 0, 0, 2, 1, 2, 0], [1, 1, 1, 0, 0], [4, 5, 5, 1, 4, 5, 2, 1], [1, 0, 0, 1], [0], [0, 2, 0, 4, 4, 0, 3, 2, 2, 0, 0, 2, 2, 2, 0, 2, 1, 1], [0, 3, 2], [3], [2, 0, 1, 2, 1, 1, 0], [0, 3, 2, 0], [5, 1], [], [8], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 7, 0, 21, 5, 4, 1, 4, 7, 4, 1, 18, 2, 1, 7, 4, 2, 0, 1, 1], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nres0 = in2[int(11.0):] not in getCharFromString(s1.lstrip((in1[:abs(mod(len(in2),( len(s2[:mod(mod(int(9.0),int(8.0)),int(6.0))][:i2][len(\"\"F\"\"[i1:int(5.0)]):]) - i2 )))][divInt(i2,i2):i0] + \"\"\\\\\\n8B\"\")), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [2, 0, 2, 2, 2, 1, 0, 1, 1, 2, 0, 1, 2, 0, 0, 1, 2, 0, 0, 2, 1, 0], [2, 0, 1, 1, 2, 0, 2, 1], [0, 1, 1, 1, 1, 1, 0, 1, 2, 2, 2, 2, 1, 0], [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [], [], [3, 1, 2, 0], [0, 4, 4, 4], [1, 2, 1, 2, 1, 2, 1, 0, 2], [0, 0, 0, 0], [1, 5, 3, 1], [0], [], [], [0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 9, 8, 9, 5, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8, 6, 4, 1, 5, 8, 7, 7, 5, 2, 7, 0, 8, 0, 8, 0, 8, 5, 5, 2, 4, 4, 9, 4, 2, 4, 4, 9, 8, 2, 6, 8, 4, 8, 6, 7, 2, 8, 1], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 0], [1, 3, 2, 3, 3, 2, 0, 3, 1, 2, 2, 1, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0, 0, 2, 3, 3, 2, 1, 0, 0, 1, 1, 1, 0, 1, 0, 3, 1, 2, 3, 3, 1, 1, 1, 2, 2, 0, 3, 3, 2, 0, 1, 1, 0, 1, 3, 3, 2, 3, 3, 2, 2, 2, 0, 1, 3, 0, 3, 3, 1, 3, 1, 2, 0, 0, 3, 2, 3, 1, 3, 1, 1, 2, 2, 0, 0, 1, 0, 3, 0, 1, 3, 3, 0, 0, 3, 3, 3, 0, 2, 1, 1, 3, 0, 0, 0, 3, 2, 3, 3, 0, 3, 0, 1, 1, 1, 1, 3, 3, 1, 3, 2, 0, 2, 0, 0, 2, 0, 1, 1, 1, 2, 2, 0, 1, 2, 2, 0, 0, 0, 3, 2, 3, 3, 3, 0, 2, 1, 3, 1, 3, 1, 0, 2, 1, 3, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [1, 3, 3, 0, 0, 4, 3, 2, 1, 2, 0, 3, 3, 4, 4, 0, 3, 0, 0, 1, 1, 1, 4, 2, 2, 4, 1, 3, 1, 0, 2, 4, 4, 1, 0, 0, 4, 3, 1, 1, 1, 0, 4, 4, 0], [2, 1, 0, 0, 0, 2, 0, 1, 1, 1, 0, 0, 0, 1, 0, 2, 2, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [4, 5, 5, 0, 5, 5, 3, 1, 3, 4, 2, 1, 1, 0, 4, 4, 0, 3, 4, 4, 5, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0], [0, 0, 0, 2, 0, 0, 3, 2, 2, 0, 0, 2, 1, 2, 4, 2, 2, 1, 4, 4, 4, 4, 2, 1, 2, 1, 2, 1, 2, 1, 4, 0, 4, 1, 0, 1, 0, 3, 3, 3, 2, 4, 2, 0, 2, 4, 4, 2, 2, 0, 2, 1, 0, 2, 2, 1, 0, 2, 4, 2, 0, 2, 2, 2, 1, 1, 2, 0, 2, 1, 1, 1], [0, 3, 2, 1, 1, 1, 0, 1, 0, 1, 1], [4], [0, 0, 1, 0, 2, 1, 0, 0, 2, 0, 2, 2, 1, 1, 2, 0, 0, 2, 0, 1, 0, 2, 2, 1, 2, 0], [1, 1, 2, 3, 3, 2, 2, 1, 1, 1, 1, 1, 2, 1, 0, 3], [5], [11, 5, 24, 4, 15, 17, 13, 2], [5, 7, 3, 6], [30, 5, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 22, 22, 8, 14, 2, 8, 0, 0, 4, 4, 9, 4, 4, 1, 0, 0, 3, 68, 68, 55, 7, 180, 35, 45, 20, 18, 22, 16, 2, 72, 11, 1, 26, 16, 1, 8, 4, 3], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(10.0) \\l max(mod(len(in1),len(in2)), ( i1 * min(int(9.0), mod(mod(int(8.0),int(9.0)),int(5.0))) )):{:\\nres0 = in2 not in s0[int(5.0):min(i0, i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in in2:{:\\nif int(6.0) \\le int(2174.0):{:\\nif (in0[:int(20.0)][i1:int(65083.0)] + s1).endswith(\"\"l\"\"[( i2 - mod(( ( int(305.0) + i1 ) + int(5.0) ),mod(i1,int(8.0))) ):int(72.0)]):{:\\ni0 += saveOrd(getCharFromString(\"\"f\"\"[int(9888.0):int(6.0)][:i1], i0)[divInt(len(saveChr(abs(( int(4.0) * i2 ))).capitalize().rstrip(saveChr(i2))),int(1.0)):])\\n:}else:{:\\ni0 += int(5.0)\\ni0 = int(8.0)\\n:}\\ni0 = i0\\nloopBreak% = 0\\nwhile int(7.0) \\le i0:{:\\ni2 = max(int(7.0), mod(abs(min(int(5.0), int(2.0))),int(7.0)))\\nb1 = \"\"5\"\"[mod(mod(i2,len(\"\"_\"\"[len(\"\"\"\"\"[divInt(i1,int(0.0)):int(8.0)]):])),i2):int(0.0)] != \"\"7\"\"[saveOrd(saveChr(saveOrd(in0))):]\\nloopBreak% = 0\\nfor in1 in getCharFromString(\"\"3\"\", divInt(min(len(s2), mod(( ( i1 - int(8.0) ) - min(i2, min(max(int(0.0), max(int(8.0), ( i1 - i1 ))), max(( saveOrd(\"\"y\"\") + int(5.0) ), abs(int(5.0))))) ),int(2.0))),mod(( i1 + i1 ),int(4.0)))):{:\\ni2 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = s1\\ns0 = (((saveChr(abs(i0))[int(4.0):] + in1[:saveOrd(getCharFromString(saveChr(max(i1, i2)), len(in1[max(min(i1, ( int(9.0) - int(4.0) )), abs(i0)):i1][i2:]))[:saveOrd(\"\"e\"\"[( saveOrd(s0) + max(i0, min(i0, int(2.0))) ):int(4.0)])])]) + \"\"p\"\"[int(4.0):int(9.0)][min(saveOrd(in0), int(8.0)):]) + saveChr(len(in1[( i2 * divInt(i2,i1) ):( i1 * int(2.0) )]))[:int(6.0)])\\nloopBreak% = 0\\nwhile int(84.0) \\le mod(mod(i1,int(8.0)),( mod(i1,i1) - i1 )):{:\\nin1 = \"\"r\"\"[:max(( max(max(min(i1, mod(int(6.0),saveOrd(\"\"n\"\"))), int(7.0)), saveOrd(in2[int(2.0):])) - i1 ), ( int(8.0) + min(i1, int(1.0)) ))][i0:][i0:]\\nin2 = \"\"6\"\"[i1:i1]\\nif b2:{:\\ni1 = i1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = \"\"c\"\" not in \"\"F^\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3, 1], [3, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 9, 8, 7, 7, 1, 9, 6, 2, 7, 0, 9, 4, 4, 4, 7, 1, 3, 7], [0, 2, 2, 0, 2, 0, 1, 1, 1, 1, 1, 2, 1, 0, 2, 1, 2, 0, 0, 1, 0], [0, 1], [3, 2, 2, 3, 2, 3, 2, 2, 0, 1, 0, 2, 0, 2, 1, 3, 1, 0, 2, 0, 1, 2, 1, 0, 2, 3, 2, 0, 0, 1, 1, 2, 0, 3, 1, 2, 3, 1, 3, 3, 0, 0, 0, 0, 3, 1, 3, 2, 3, 0, 3, 1, 0, 3, 3, 1, 3, 0, 2, 0, 3, 3, 3, 0, 1, 3, 1, 2, 0, 1, 1, 1, 3, 1, 2, 3, 1, 3, 3, 3, 0, 2, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [4, 4, 3, 0, 0, 0, 2, 1, 2, 1, 3, 0, 2, 1, 0, 1, 2, 4, 4, 1, 3, 2, 4, 4, 0], [0, 0, 0, 2, 1, 2, 0, 2, 2, 2, 0, 1], [0, 0, 0, 0, 1, 1], [0, 5, 3, 2, 4, 5, 4, 4, 1], [1, 1, 1, 1, 1], [], [0, 4, 2, 2, 3, 0, 3, 2, 2, 0, 0, 2, 1, 2, 3, 2, 1, 4, 2, 0, 4, 1, 2, 2, 1, 4, 1, 0, 2, 0, 0, 0], [0, 3, 2, 3], [4, 3], [0, 0, 1, 0, 1, 2, 2, 1, 1, 0, 0], [3, 2, 1, 0, 0], [21, 3], [9], [7], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 20, 20, 21, 0, 84, 18, 25, 12, 6, 9, 5, 0, 32, 4, 2, 11, 5, 2, 1, 1, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s0) \\ge ( divInt(saveOrd(getCharFromString((in2 + (in0[divInt(len(s2),( divInt(i0,int(4.0)) + i2 )):( i2 + divInt(int(6.0),min(int(9.0), i0)) )][:( i2 + int(8.0) )] + \"\"[\"\"[:( int(7.0) * i0 )]))[( min(( i1 - i1 ), int(7.0)) * int(1.0) ):mod(i1,min(int(9.0), ( abs(int(6.0)) + max(abs(i1), i1) )))][i2:i1], max(int(2.0), len((\"\"7\"\"[mod(min(i0, abs(int(7.0))),i2):] + in1[:max(min(int(0.0), max(i1, ( i2 * abs(saveOrd(\"\"j\"\".capitalize())) ))), saveOrd(\"\"V\"\"[i0:int(9.0)][:max(int(4.0), ( i0 * int(4.0) ))]))].rstrip(\"\"D\"\".lstrip(in2)))[int(4.0):])))),int(7.0)) * len(in1[int(1.0):( abs(int(3.0)) + saveOrd(in1) )]) ):{:\\nres0 = saveOrd(s1) \\le min(i1, ( i0 - int(7.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 0, 2, 2, 1, 0, 1, 1], [2], [0, 1, 1, 1, 1, 1], [], [0, 0], [], [], [3, 1], [4, 4, 4], [1, 2, 1, 2], [0, 0, 0], [1], [], [], [], [0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 9, 8, 9, 0, 5, 6, 2, 1, 7, 4, 2, 0, 6, 5, 0, 8, 3, 3, 0, 5, 5, 8, 7, 2, 9, 8, 8, 8], [1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 2, 0], [1, 1, 0, 0, 0], [3, 3, 2, 3, 3, 3, 0, 0, 2, 2, 2, 1, 1, 1, 1, 3, 0, 1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 3, 3, 0, 0, 4, 3, 2, 1], [2, 1, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 0, 0], [4, 5, 5, 0, 5, 5, 1, 0], [1, 1, 1, 1, 1], [], [2, 0, 0, 2, 3, 0, 2, 2, 2, 0, 0, 4, 3, 3, 2, 1, 3, 1, 2, 2, 0, 3, 0, 1, 3, 3, 0, 1, 1], [0, 3, 2], [4], [0, 0, 1, 2, 2, 1, 2, 2], [1, 3, 3, 3, 3], [], [16], [], [15, 19, 2, 2]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 30, 30, 8, 1, 38, 9, 7, 3, 7, 8, 5, 0, 29, 1, 0, 8, 5, 0, 1, 0, 4], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(len(in1[mod(len(in2),min(min(i1, i0), ( mod(mod(int(10.0),int(9.0)),int(8.0)) * int(9.0) ))):saveOrd((in2 + s0[i2:][int(0.0):][:int(5.0)])[int(6.0):int(2174.0)])]), i1) \\le int(20.0):{:\\nres0 = in2 not in getCharFromString(((\"\"q\"\"[:( i2 - mod(mod(divInt(int(65083.0),i1),int(305.0)),divInt(i1,int(5.0))) )] + (\"\",\"\" + in2[int(8.0):][len((s1 + \"\":\"\")):])) + ((s0 + \"\"\\\\\\t\"\") + \"\"\\\\\\t\"\")), int(72.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += int(9888.0)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [0, 2], [], [0, 0], [], [], [3], [0, 4], [1, 1], [0, 0], [], [0], [], [], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 9, 2, 5, 5, 5, 6, 2, 2, 1, 7, 1, 2, 5, 3, 2, 2, 4, 0, 6, 4, 5, 4, 4, 8, 0, 6, 9, 2, 9, 9, 3, 3, 7, 9, 5, 1, 8, 2, 1, 9, 8, 2, 1, 9, 2, 9, 1, 8, 2, 9, 3, 3, 3, 2, 6, 8, 9, 1, 8, 1, 0, 1, 0, 0, 9], [1, 0, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 0, 0, 1, 0, 1, 1, 2, 1, 2, 0, 1, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 1, 0, 2, 0, 0, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 1, 1, 1], [1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 2, 1, 0, 2, 2, 2, 3, 1, 1, 3, 1, 1, 3, 3, 2, 1, 0, 2, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 2, 0, 3, 1, 3, 2, 1, 1, 1, 0, 3, 1, 3, 2, 2, 1, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 3, 2, 3, 2, 3, 1, 3, 2, 0, 1, 1, 2, 3, 3, 0, 3, 2, 3, 3, 0, 2, 2, 1, 1, 2, 2, 2, 2, 0, 0, 2, 1, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 1, 2, 1, 0, 0, 0, 1, 1, 0, 2, 2, 1, 3, 1, 2, 0, 3, 0, 1, 2, 3, 2, 1, 2, 3, 2, 1, 3, 3, 3, 1, 0, 3, 3, 2, 1, 0, 3, 3, 2, 2, 0, 0, 2, 3, 3, 1, 3, 0, 0, 2, 3, 0, 2, 3, 1, 2, 1, 3, 3, 3, 3, 1, 0, 3, 1, 0, 1, 0, 1, 1, 3, 1, 0, 2, 2, 1, 3, 0, 2, 2, 2, 2, 3, 2, 0, 1, 2, 3, 1, 1, 2, 1, 0, 1, 2, 2, 2, 0, 2, 3, 1, 0, 0, 3, 2, 3, 2, 0, 3, 3, 3, 0, 2, 2, 1, 2, 3, 3, 3, 2, 2, 0, 0, 1, 1, 0, 3, 0, 3, 3, 2, 2, 3, 3, 0, 3, 3, 1, 0, 2, 3, 3, 2, 2, 1, 1, 1, 0, 3, 1, 2, 2, 1, 1, 2, 0, 0, 3, 3, 3, 0, 1, 0, 3, 3, 2, 3, 2, 3, 0, 1, 1, 3, 2, 2, 0, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1], [2, 1, 3, 0, 0, 3, 0, 3, 1, 4, 3, 2, 2, 1, 3, 4, 2, 3, 2, 0, 4, 3, 0, 1, 0, 0, 2, 2, 3, 1, 1, 4, 0, 0, 0, 1, 4, 3, 4, 4, 3, 0, 1, 1, 3, 1, 0, 3, 1, 1, 2, 3, 1, 3, 4, 2, 2, 4, 0, 3, 1, 2, 0, 0, 0, 4, 3, 3, 1, 1, 2, 1, 4, 2, 2, 1, 4, 1, 0, 3, 4, 2, 3, 1, 4, 3, 2, 4], [2, 1, 0, 0, 2, 1, 1, 2, 2, 2, 1, 0, 2, 0, 0, 1, 0, 1, 0, 2, 1, 2, 2, 0, 0, 1, 1, 0, 1, 1, 0, 2, 1, 2, 0, 0, 1, 1, 0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0], [4, 5, 3, 2, 4, 5, 1, 5, 2, 3, 4, 4, 4, 1, 5, 5, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [0, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0, 4, 2, 2, 4, 4, 2, 4, 2, 2, 2, 0, 2, 1, 2, 2, 1, 2, 4, 2, 0, 4, 0, 0, 1, 1, 4, 4, 1, 1, 2, 2, 2, 2, 1, 0, 0, 1, 4, 0, 4, 1, 0, 2, 2, 1, 4, 4, 1, 4, 0, 2, 4, 2, 0, 1, 4, 0, 1, 1, 0, 4, 4, 4, 2, 4, 2, 0, 1, 1], [0, 3, 2, 2, 1, 2, 3, 2, 2, 1, 3, 2, 1, 2, 1, 1, 2, 2, 2], [4, 5, 4], [0, 1, 0, 2, 2, 0, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 2, 1, 0, 2, 2, 2, 1, 0], [0, 0, 2, 2, 0, 1, 3, 0, 0, 3, 3, 2, 2, 1, 2, 2], [5, 6, 6, 21, 7], [10, 25], [6, 0, 2, 5, 1, 3], [16, 21, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 67, 67, 59, 0, 292, 79, 88, 39, 40, 19, 16, 0, 80, 19, 3, 24, 16, 5, 2, 6, 3], "tree_depth": 76, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif abs(max(divInt(len(in1),min(min(i1, ( i0 * i1 )), i2)), int(22.0))) \\l len(in2):{:\\nres0 = min(len(in0), mod(i1,divInt(int(9.0),i1))) \\le ( mod(( max(int(2.0), int(5.0)) - saveOrd((s2 + (in1[int(5.0):int(5.0)][:len(in2)] + getCharFromString(s1[abs(( int(6.0) + i2 )):mod(mod(i1,i1),abs(int(2.0)))][:int(2.0)][int(1.0):int(7.0)].capitalize()[( mod(divInt(i2,max(int(1.0), len(\"\"F\"\"[divInt(int(2.0),int(5.0)):]))),int(3.0)) + i1 ):saveOrd(\"\"G\"\"[int(2.0):abs(( ( int(2.0) * int(4.0) ) - len(saveChr(mod(i1,int(0.0)))[i0:int(6.0)]) ))][:abs(i1)])].capitalize().rstrip(in2[:( min(mod(saveOrd(s2.capitalize()),( len(in0) - int(4.0) )), min(( i0 * int(5.0) ), int(4.0))) * ( max(min(i0, min(divInt(abs(abs(i1)),( divInt(int(4.0),int(8.0)) * ( divInt(mod(divInt(i1,i2),divInt(int(0.0),mod(len(\"\"6\"\"),max(max(saveOrd(\"\"0\"\"), ( min(min(min(max(int(6.0), ( int(9.0) - i0 )), i0), i1), int(2.0)) + int(9.0) )), i0)))),( ( int(9.0) * saveOrd(\"\"G\"\".capitalize().strip(\"\"k\"\")) ) + int(3.0) )) + mod(i1,len(\"\"-\"\"[:i1][int(3.0):][divInt(saveOrd(in1),mod(int(7.0),mod(saveOrd(in1),( int(9.0) - len(\"\"V\"\") )))):min(max(int(5.0), i2), max(len(in1.capitalize()), divInt(int(1.0),i1)))][max(min(mod(mod(i2,i0),( len(saveChr(max(int(8.0), max(i1, i0)))) + ( abs(i0) - divInt(len(\"\"H\"\"),int(2.0)) ) )), mod(int(1.0),max(len(s1), saveOrd(\"\"<\"\"[abs(int(9.0)):][i2:abs(int(8.0))])))), i0):])) ) )), int(2.0))), i0) + int(1.0) ) )])[int(9.0):][saveOrd(\"\"]\"\".capitalize().rstrip(saveChr(int(2.0)))):], i2)))[( divInt(int(9.0),min(i0, mod(( mod(mod(len(in2),( i0 * int(1.0) )),( max(int(8.0), int(2.0)) - ( int(9.0) * i1 ) )) * int(3.0) ),divInt(mod(( i0 + ( abs(int(3.0)) + i1 ) ),i0),min(( min(( i2 - min(saveOrd(in2[len(\"\"2\"\"):].capitalize()[i0:]), ( ( int(3.0) - mod(len(saveChr(max(max(( ( i0 + i2 ) - int(2.0) ), int(6.0)), i2))),abs(i0)) ) - max(saveOrd(s1), divInt(mod(abs(abs(i2)),max(saveOrd(\"\"5\"\"), int(8.0))),i2)) )) ), mod(max(min(( ( int(9.0) + int(1.0) ) * int(8.0) ), i0), len(\"\"z\"\")),int(1.0))) - divInt(( int(0.0) * int(1.0) ),( i0 + i2 )) ), saveOrd(s0)))))) + abs(len(saveChr(i2))) ):int(0.0)]) ),i1) - max(saveOrd(s1[( len(\"\"1\"\") - ( abs(i2) + int(0.0) ) ):int(9.0)].capitalize()[:saveOrd(\"\"3\"\")].capitalize().capitalize()), divInt(divInt(i1,i1),i1)) )\\n:}\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [2], [0, 2, 2], [], [0, 0], [], [], [3], [4, 4], [1, 1, 1], [0, 0], [], [3], [0], [], [], [1, 1, 1, 1, 1], [4, 8, 2, 8, 7, 7, 1], [0, 2, 0, 0, 2], [0, 1], [3, 3, 2, 3, 3, 3, 0, 2, 0, 0, 0, 1, 2, 3, 2, 3, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0], [4, 3, 3, 0, 0], [0, 0, 0, 0, 1, 2, 0], [0, 0, 0], [1, 5, 3, 2, 4, 5], [1], [], [1, 0, 0, 2, 3, 0, 3, 2, 2, 0, 0], [0, 3, 2], [4], [0], [0], [13], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(\"\"N\"\") \\le len(s1)\\n", "test_case_results": [9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807], "other_info": {}, "test_fitness": 9223372036854775807}]