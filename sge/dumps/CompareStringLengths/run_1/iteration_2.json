[{"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(int(5.0),min(i2, ( divInt(( int(7.0) + i0 ),divInt(len(saveChr(( i1 + ( min(divInt(int(2.0),i2), ( max(int(1.0), i1) * int(7.0) )) - int(7.0) ) ))),i2)) + i0 ))):divInt(int(9.0),abs(int(8.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 38, 11, 8, 5, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(( i2 * min(max(( int(7.0) - i1 ), divInt(abs(int(7.0)),i2)), int(1.0)) ))),int(7.0))) + i0 )) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 9, 8, 5, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i0:i2].rstrip()[abs(mod(i0,int(0.0))):( int(7.0) + min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(( i2 * min(max(( int(7.0) - i1 ), divInt(abs(int(7.0)),i0)), int(1.0)) ))),i0)) + i0 )) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 10, 0, 33, 9, 8, 5, 4, 6, 0, 1, 11, 2, 1, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[max(i0, int(0.0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 3, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s2):] not in getCharFromString(s0[i1:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(len(saveChr(( divInt(( int(5.0) + i0 ),divInt(min(( i1 * max(abs(( int(7.0) - i2 )), divInt(max(int(3.0), i1),int(1.0))) ), int(7.0)),i2)) + i0 ))), ( int(7.0) * abs(divInt(min(i0, divInt(( ( int(9.0) - int(8.0) ) - ( int(5.0) * i1 ) ),int(0.0))),i0)) )) ):int(4.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 51, 15, 11, 9, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 11, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 13, 0, 50, 16, 8, 8, 8, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(getCharFromString(saveChr(i0)[int(0.0):max(mod(i2,int(7.0)), mod(int(5.0),min(i2, ( mod(( int(7.0) + i0 ),divInt(len(in0[( i0 + ( i1 * divInt(int(2.0),i1) ) ):( min(i2, i0) - divInt(int(1.0),i0) )]),i2)) + mod(int(7.0),max(int(7.0), abs(i2))) ))))], ( ( ( int(9.0) * int(8.0) ) - divInt(int(5.0),i1) ) - int(0.0) )))] not in (\"\"R\"\" + s0.rstrip())[:int(4.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 241}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 11, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 12, 0, 50, 16, 8, 8, 8, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(getCharFromString(saveChr(i0)[int(0.0):max(mod(int(7.0),int(5.0)), mod(int(7.0),min(i2, ( mod(( int(2.0) + i2 ),divInt(len(in0[( i0 + ( i0 * divInt(int(1.0),i1) ) ):( min(i1, i2) - divInt(mod(i0,i0),( int(7.0) + max(int(4.0), abs(i2)) )) )]),( ( int(9.0) * int(8.0) ) - int(5.0) ))) - divInt(int(0.0),i2) ))))], int(4.0)))] not in (\"\"R\"\" + s0.rstrip())[:int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 241}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):].startswith(s0[mod(int(0.0),i0):mod(int(7.0),int(5.0))].capitalize()[( int(7.0) + abs(i2) ):i2])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 10, 1, 3, 0, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i1,int(7.0))))[i2:int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [2, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 10, 1, 3, 0, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i1,int(7.0))))[i2:int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 0, 8], [2, 1], [0], [3, 1, 2, 3, 1, 1, 1, 0], [0], [2, 0, 0], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(int(1.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 4, 2], [], [], [4, 3, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in1 + s2).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [3, 5, 7], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [2], [0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 0], [2, 2], [1], [], [0], [], [], [3, 3], [], [0, 0], [], [], [0, 0], [], [], [], [1], [5], [1], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 1, 0], [], [0], [], [], [0, 2, 1, 3], [5], [0, 0], [0], [], [0, 0], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1], [7, 0, 6, 8, 3, 0, 1, 8], [2, 0, 2, 0, 1, 1, 0], [0], [0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 0, 1, 1, 0, 3, 0, 1], [1, 0, 1, 0, 1], [2, 0, 2], [2, 0], [1, 1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 4, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\ni2 = i0\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1], [6, 1], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(6.0) \\l int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3], [], [4], [], [], [4, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(saveOrd(s2)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 1, 1], [0, 3, 1, 2, 7, 6], [2, 0, 2, 2], [1, 1], [2, 0, 2, 1, 1, 1], [0, 0], [], [0, 0, 1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 3, 2, 6, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += ( i0 + ( int(03.0) - int(127.0) ) )\\ni2 *= int(6.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 2], [0], [0], [2, 1, 1], [0], [], [1], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( int(4.0) - int(2.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 2, 2], [2, 2, 2, 2], [], [2, 0, 2, 0, 2, 1, 3, 2, 3, 1, 0, 0, 1], [1, 0, 0, 0], [0, 0], [0, 2, 1], [0], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 13, 4, 2, 3, 1, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:divInt(i2,( i2 + ( int(1.0) * min(( min(int(2.0), i2) - i2 ), int(2.0)) ) ))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0], [1], [2], [0], [], [], [], [], [], [1, 1], [0, 8], [0], [0], [1, 1, 3, 0], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 1], [1], [3, 3, 0, 0, 0], [0], [0, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= min(min(i1, i2), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 2, 0, 0, 1], [0], [0, 0, 1, 2, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [4], [1, 0, 0], [0], [], [1, 0], [], [1], [], [1, 0, 0, 1], [5, 8, 9, 0], [0, 0, 2, 1], [1], [2, 1, 3, 0, 1, 3, 2, 3, 3, 0, 0], [0, 0, 1], [0, 4, 2], [0], [0, 0], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 4, 4, 1, 0, 6, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( int(5.0) + min(i0, int(890.0)) ) \\le saveOrd(s2)\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 0, 3, 1], [], [0], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\nin0 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 1, 1], [2, 2, 0, 1, 0, 1], [1, 0], [1, 1, 1, 0], [0], [0, 0, 0], [], [], [0], [], [0, 2], [], [0], [1], [], [0], [1], [1, 1, 1, 1], [6, 7, 8, 3], [1, 0, 2, 0, 2, 1, 0, 1], [1, 1, 0], [2, 3, 0, 0, 2, 1, 2, 2, 0, 3, 1, 3, 3, 0, 1, 2, 0, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [2, 4, 3, 2], [1, 2, 0, 2, 2, 2], [0, 0, 0, 0], [4, 3, 0, 4, 0, 5], [], [0], [0, 0, 0, 4, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 2, 2, 6, 3, 12, 4, 3, 4, 2, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif True:{:\\nloopBreak% = 0\\nfor in1 in in0:{:\\ni1 -= ( abs(i0) * i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += divInt(int(6.0),( divInt(i2,saveOrd(s0)) * int(7.0) ))\\n:}else:{:\\ni1 = len(in1)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [4, 2, 8], [0], [0], [2, 1, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = divInt(int(4.0),int(28.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 0, 1], [9, 5, 7, 2, 0], [1], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(95720.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [1, 0], [3], [1, 0], [0], [], [0], [], [], [], [0, 1], [0, 6], [2], [], [3, 1, 3, 0], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(int(06.0)) \\ge abs(i2):{:\\nb1 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [2], [4], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 0, 0, 4, 8, 2], [0, 2, 0], [0], [0, 3, 2, 1, 2, 1, 3, 2, 1, 1, 2, 0, 1, 0, 0, 1], [0, 0, 1, 1], [1, 4, 4], [0, 1], [0, 1], [], [], [], [2, 4], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 14, 4, 2, 2, 2, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 \\le max(( int(1.0) + ( int(0.0) - saveOrd(saveChr(divInt(int(0.0),int(4.0)))[mod(i2,int(8.0)):]) ) ), i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 2, 1], [0], [0, 0, 1, 0, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [2, 5], [0, 1, 0], [0, 0], [], [1, 0], [], [0], [], [1], [5], [1, 0, 1, 2], [1], [0, 1, 0, 0], [], [], [0], [], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\nb2 = i1 == int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [0], [1], [0], [0], [], [], [], [], [], [0, 1], [0, 8], [0], [], [2, 2, 1, 1, 0, 3], [0, 0], [3], [1, 0], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1, 1], [2, 0, 2], [1], [2, 1, 3, 0, 3, 1, 2], [1, 1], [1, 4], [1], [0, 1], [2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 5, 1, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= divInt(int(11.0),max(i0, saveOrd(s2)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [1], [1], [0], [], [], [], [], [], [1], [1], [2], [], [3, 3, 1, 0], [], [4, 1], [], [], [1, 4], [], [], [0, 4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s1) \\g max(int(1.0), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [3], [1], [0], [], [], [], [], [], [1, 1], [7, 2], [2], [], [3, 1, 0, 3, 3, 1], [], [1, 1, 3], [], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 6, 0, 3, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = max(int(7.0), i2) \\ge max(len(in2), int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 1], [1], [1, 1], [], [0], [], [], [], [3], [1], [0], [], [], [], [], [1], [0, 1, 1, 0, 1, 1, 1], [7, 9, 6, 4, 2, 7, 7], [0, 1, 1, 2, 2, 0, 2, 0, 1, 1, 0, 1], [1, 0], [3, 1, 0, 2, 3, 0, 2, 2, 2, 2, 0, 2, 1, 0, 0, 0, 1, 3, 1, 2, 3, 3, 0, 0, 0, 2, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [3, 3, 3, 0, 1], [1, 2, 0, 2, 1, 2], [0, 1, 0], [5, 4, 3, 4], [], [], [0, 2, 2, 2, 0, 2, 3, 0, 0], [], [], [2, 2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 7, 7, 12, 2, 28, 8, 5, 6, 3, 4, 0, 0, 9, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(in2) \\ge int(79.0):{:\\ni0 -= i1\\n:}else:{:\\ni1 = ( len(in1[:i2][divInt(( ( mod(i2,( int(6.0) * i0 )) + i2 ) * i0 ),int(42.0)):][len((in0 + in1)[:int(7.0)]):]) - divInt(min(max(i1, i1), i0),( i1 * int(7.0) )) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [1], [1, 2], [], [0, 0], [], [], [0], [], [0], [], [], [0], [], [], [0], [1], [9], [1], [1], [3, 1], [], [2], [1], [], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 2, 0, 1, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif b0:{:\\ni1 -= abs(int(9.0))\\nin1 = in2\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [0], [3], [], [4], [], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 2], [], [0, 0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [8, 4], [], [], [], [], [], [], [], [3, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\nin0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 4], [1], [], [2, 1, 0, 1, 0], [1], [2], [], [1], [0, 3], [], [], [4, 0], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 1, 0, 0, 1, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(in0, mod(int(8.0),i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [], [2], [], [4], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 3], [], [], [0, 3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s0.startswith((s0 + in0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [1], [0], [], [], [1], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [3], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1, 1], [0, 0, 5, 1, 1], [1, 2, 0, 0, 2], [1, 1], [2, 3, 3, 0, 0, 1, 2, 1, 2, 1, 0], [1, 0, 1], [0, 4], [1, 0, 0], [0, 0], [5], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 11, 3, 2, 3, 2, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= divInt(min(saveOrd(in2[i2:]), i0),int(00.0))\\ni0 += ( int(51.0) + divInt(int(1.0),i2) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [3, 3], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0[:i0].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [0], [], [], [0], [0], [1, 0], [0], [], [1], [], [0], [0], [1, 1, 1], [7, 7, 3], [1, 2], [], [1, 2, 0, 2, 0, 2, 1, 1], [0, 1, 0], [], [1, 0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 3, 3, 2, 0, 8, 3, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l ( i1 - mod(i2,( int(7.0) + int(3.0) )) ):{:\\nb0 = True\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [0, 1], [1], [2, 0, 1], [1], [], [1, 2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= mod(i1,int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [1, 0, 3], [5], [1, 2], [0], [5], [0, 2, 0], [], [], [], [1], [0], [2], [], [3, 1, 3, 0], [], [2, 2], [], [], [4, 2], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(int(0.0)) != abs(i2):{:\\nb1 = in1.endswith(s2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [5], [0, 0, 2], [0], [0], [2, 2], [], [], [], [1, 1, 1, 1], [6, 4, 3, 4], [1, 2, 2, 1], [], [2, 0, 1, 2, 3, 2, 0, 1, 2, 2, 2, 0, 0, 3, 2, 3, 3, 1], [1, 1, 1, 0, 1, 0], [4, 1, 4, 3], [0, 1, 1], [0, 0, 1], [0, 0], [], [], [4, 0, 2, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 3, 0, 1, 2, 0, 0, 0, 1, 1, 1, 0, 3, 1, 0, 0, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not not saveChr(divInt(i1,int(6.0))) in s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [3], [1], [0], [], [], [], [], [], [1], [6], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(6.0) \\ge i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 3, 9, 7, 1, 7, 3, 7, 5, 0, 4, 4, 1, 3, 6, 8, 5, 9, 4, 4, 0, 1], [2, 2, 1, 0, 2, 1, 2, 0, 0, 2, 0, 2, 2, 0, 1, 0, 2, 0], [0], [0, 2, 2, 3, 2, 2, 2, 3, 3, 2, 3, 3, 2, 3, 2, 0, 3, 0, 1, 3, 0, 1, 2, 3, 0, 0, 2, 2, 0, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 1, 3, 0, 1, 0, 0, 3, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 3, 1, 3, 3, 1, 2, 1, 3, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 3, 1, 3, 4, 1, 4, 3, 4, 0, 1, 2, 4, 3, 4, 4, 2, 1, 3, 1, 3, 2, 2], [2, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 5, 2, 0, 4, 5, 3, 1, 4], [1, 0, 0, 1, 1, 1, 1, 1], [], [1, 1, 2, 2, 1, 4, 2, 0, 0, 4, 0, 2, 1, 2, 4, 2, 1, 0, 0, 2, 1, 4, 0, 1, 0, 1], [3, 0, 0, 2, 1], [5, 3], [0, 2, 0, 0, 1, 0, 1], [3, 3, 0, 2, 0, 3, 2, 2], [20], [10], [5, 6, 4], [6, 24, 11]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i2\\ns0 = \"\"#\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 0, 1], [4, 3, 3, 9, 3, 7], [1, 1], [0], [2, 1, 2, 0, 2, 1, 3], [1, 0, 1], [3], [2], [0, 0], [2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 2, 1, 7, 3, 1, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = divInt(int(43.0),( i1 * divInt(int(3937.0),len(s2)) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 1, 4, 3, 0, 4], [], [0], [3, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 1, 8, 1, 3, 1, 0, 6, 0, 1, 8, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in (in2 + s1):{:\\nb0 = in1[len(in0):] not in s0[max(i1, int(0.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = abs(( i2 + int(7.0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [4], [1], [0], [], [1], [], [1], [], [1], [7], [1], [1], [3, 1], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = len(in2) \\le int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [0], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 1], [2, 4, 9, 4, 0], [0, 2], [], [1, 3, 1, 0], [1], [2], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(2.0) \\l abs(int(4940.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [], [], [0, 0, 2], [], [3, 0, 2, 0, 0], [1], [2], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = abs(i0) \\g mod(i0,i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2, 3], [], [2], [], [5], [0], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [1, 1, 1], [4, 5, 4], [0, 2, 0], [0], [1, 1, 0, 2, 3, 1, 1, 0], [0, 1], [1], [2, 0], [], [5, 2], [1, 1], [], [1, 0, 4], [1], [], [], [3, 1], [], [15], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\",\"\".endswith(in2)\\ni0 = int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 0], [1], [0, 0, 3], [1], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:max(len(in1), i0)]:{:\\nb0 = in1[int(0.0):].endswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [], [0], [], [], [3, 3, 2], [], [0, 2], [], [3], [0], [], [], [], [], [], [], [], [], [], [], [], [], [3, 2], [1], [], [0, 1], [], [], [], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\nb2 = in0 != \"\"U\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [1], [0, 0], [], [0], [], [], [2, 2], [5, 1], [1, 2, 1], [0, 0], [0], [2], [], [], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [6, 8, 7, 3, 5, 1, 6, 7, 0, 0, 7, 4, 5, 5, 1, 4, 2, 5], [1, 2, 0, 1, 1, 2, 1, 1, 0, 0, 2, 1, 1, 1, 0, 1], [], [2, 0, 3, 0, 1, 2, 1, 2, 1, 3, 3, 1, 0, 3, 2, 2, 3, 0, 3, 2, 0, 1, 3, 2, 3, 1, 0, 0, 0, 2, 0, 1, 0, 2, 3, 0, 2, 3, 0, 0, 3, 3, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 2, 2, 2, 1, 1, 0, 0, 0, 2, 0], [0, 0, 1, 0, 2], [0, 1, 0, 0, 0], [1, 1, 5, 5, 3, 2], [], [], [2, 2, 4, 0, 0, 0, 0], [3], [1], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 2, 3, 2, 1, 0, 0, 0, 1, 18, 18, 16, 0, 47, 10, 12, 5, 5, 2, 0, 0, 5, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( i1 + min(i2, int(6.0)) ) != divInt(int(87.0),( int(35.0) + max(min(int(1.0), i0), max(( ( abs(i1) - abs(mod(i1,int(6.0))) ) + abs(divInt(max(int(7.0), i2),i1)) ), i1)) )):{:\\nb2 = s1.rstrip()[:divInt(i0,int(0.0))][:i0] in s1\\n:}else:{:\\nb2 = divInt(max(i2, ( min(i1, i1) * min(min(int(074551.0), i1), int(425.0)) )),i0) \\g i1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [], [], [1, 0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i1 \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [3], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 0], [2], [0, 2], [], [0, 0], [], [], [0, 3, 3], [3], [0, 0, 1], [0], [], [1, 0], [], [1], [], [], [], [0, 2, 1, 0, 0, 2, 2], [], [0, 0], [], [], [], [], [0], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\ns0 = saveChr(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [0], [], [], [], [1], [3], [1], [0], [], [], [], [], [], [], [], [1, 2], [0], [0, 0], [], [4], [], [], [0, 2], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2:{:\\nb1 = i1 \\ge i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [], [2, 0, 0], [0], [], [0], [], [2, 5], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 1, 0, 1, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2[:( i0 + i1 )].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [7, 3, 7], [1], [0], [3, 1], [], [2], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = abs(int(737.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [1], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nloopBreak% = 0\\nwhile in1 not in in1:{:\\ni0 = len(in0[len(s0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 3], [2, 0, 0], [1], [0, 0, 1], [], [], [2], [], [4], [1], [], [2, 1], [], [], [0], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 3, 0, 0, 1, 0, 1, 1, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i0\\nin1 = \"\"U\"\"[i0:int(43.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [], [], [0, 0], [], [0, 3, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\l abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 2], [1, 1, 1, 2], [1], [2, 3, 0, 3, 1, 1, 0], [0, 0], [0, 1], [1, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 7, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= ( min(i1, max(int(2.0), int(2.0))) * i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [4], [0], [0], [], [1], [], [0], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [5, 4, 7, 0, 3, 0, 4, 8, 9, 6], [1, 1, 0, 1, 1, 0], [], [2, 3, 3, 0, 0, 2, 2, 1, 3, 0, 3, 0, 2, 3, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 0], [1, 0, 1, 1, 1, 0], [3, 0, 3, 3, 4, 1], [2, 1], [1, 1, 0, 0], [3, 0, 1, 4], [1, 1, 1], [], [2, 0, 0, 2, 3, 3, 3, 3, 0, 1, 2, 4, 4, 0, 2, 1], [3, 1], [1, 3], [0, 0, 2], [0, 3, 0], [10, 4], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [2, 0], [1], [0], [], [], [0], [], [4, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [], [], [1], [], [], [], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:int(1.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0, 1, 0], [], [0, 0, 1], [], [0], [], [], [1, 0, 1], [], [0, 0], [], [], [1, 0], [], [1], [], [], [], [0, 0, 0, 2], [0], [3, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 0, 0, 4, 8], [0, 2], [0], [0, 3, 2, 1, 0, 1, 3, 2, 3, 1, 2, 1, 1, 0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2], [1, 1], [0, 1, 1], [], [], [], [2, 4], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 1, 1, 0, 1, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 \\le len(saveChr(divInt(int(1.0),i2))[int(0.0):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [5, 9], [2, 1, 2], [0, 1], [1, 3, 3, 0, 1], [], [3, 0], [1, 1], [], [], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 5, 0, 2, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(5.0)\\ni1 -= len(saveChr(min(i2, int(9.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1], [1, 2, 0, 1, 0, 0, 0], [2], [1, 0, 2, 2, 2, 2], [], [0, 0, 0, 0], [], [], [0], [2], [0, 0], [0], [], [1], [], [1], [], [1, 1, 1], [6, 2, 6], [0, 0, 1, 2, 0, 1, 1, 1], [0, 1, 0], [1, 2, 0, 0, 1, 1, 2, 0, 1, 0, 0], [0, 0], [4], [2, 1, 1], [], [0, 0, 1, 0, 3], [], [], [4, 0, 0, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(6.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0, 0], [1], [0, 0, 1], [0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [0, 4, 0], [0, 1, 1, 2, 0], [], [3, 3, 0, 3, 2, 0, 1, 2, 1, 0, 0], [1, 1], [0, 0, 1], [], [0, 0], [5, 0, 4], [], [], [4, 2, 2, 0], [1], [], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 2, 3, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(min(min(i0, max(divInt(i1,int(0.0)), divInt(int(4.0),i1))), i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [2], [], [], [], [], [1], [0], [2, 0, 0], [], [2, 2, 0, 1, 0, 0], [0, 1], [], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 6, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( divInt(i2,int(0.0)) - i0 ) \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [2, 0, 1], [0], [2, 3, 3, 0, 0], [1], [3, 2], [1], [1], [5], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 1, 2, 0, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(len(in2[abs(i0):]),i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [], [2], [], [2], [], [], [], [], [1], [0], [2, 1], [], [2, 2, 0, 1, 0], [0, 1], [], [2, 1], [1], [5, 3], [], [], [4, 3, 0, 4, 0], [1, 3], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 2, 0, 1, 1, 2, 0, 0, 5, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveChr(( mod(i2,int(0.0)) * i1 )) == (in2 + in0.lstrip())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [0, 0], [], [2], [1], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [4], [], [], [2], [], [], [4, 0], [3], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(s2.strip())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [1], [], [0], [], [], [], [1], [0, 1], [0], [], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 2, 7, 4, 8, 2, 4, 4], [2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [1], [3, 0, 2, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [4, 1, 1, 1, 4, 2, 4, 4, 3, 4, 4, 0, 1, 4], [2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [3, 1, 3, 4], [1], [], [0, 2, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0], [3, 2, 2, 3, 0, 0, 2, 1], [0, 2], [1, 1, 1], [1], [], [24], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 4, 1, 7, 2, 1, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not saveOrd(in0) \\g i2:{:\\ni1 *= divInt(( int(7.0) + i1 ),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [2], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 1, 0], [2], [0, 0, 2], [], [0], [], [], [1, 2], [2, 1], [1, 0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1], [0, 8, 9, 8, 5], [1, 2, 0, 0, 2, 1, 1, 2], [], [0, 0, 3, 1, 2, 1, 2, 2, 0, 3, 0, 3, 0, 3, 0, 0, 1, 3, 0, 2, 2, 0, 1, 1], [0, 1, 0, 0, 0, 1], [0, 1, 4, 0, 1, 2], [2, 0, 2, 1], [1, 1], [1, 1], [1], [], [0, 1], [], [], [], [0], [16], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 2, 2, 3, 2, 0, 1, 0, 1, 0, 2, 2, 7, 0, 16, 3, 4, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 == i2:{:\\nb1 = False\\nb2 = min(int(0.0), ( int(8.0) * mod(( i0 + max(i0, saveOrd(s1)) ),i2) )) \\g min(i1, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [0, 1], [], [], [], [], [1], [1], [1], [0], [], [], [], [], [], [], [], [0, 2, 2], [1], [0, 0, 3], [], [3], [1], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = i0 \\g i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [9, 6, 4], [1, 0, 0], [0], [2, 1, 2, 3, 0, 1, 0], [0, 1], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 7, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = ( int(96.0) + mod(min(i0, int(4.0)),i0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [5], [1], [0], [], [0], [], [], [], [0, 1], [9, 3], [0], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(93.0) != i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nb2 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [], [0, 1], [3, 1], [2, 1, 0], [1, 1], [3, 1, 0], [], [4], [0, 2], [], [1, 5, 2], [], [], [4, 0, 0, 4], [3, 1], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 1, 2, 0, 3, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += saveOrd(s1.strip())\\ni1 *= int(31.0)\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 0], [], [0, 2, 2], [], [0, 0], [], [], [0], [], [2], [], [1], [], [], [], [], [1, 1, 1, 1], [6, 3, 7, 6], [1, 0, 0, 0, 0, 1], [], [0, 2, 3, 0, 0, 2, 1, 0, 2, 1, 2, 0, 1, 2, 3, 0, 1], [1, 0, 0, 0], [4, 4, 2, 3], [0, 1, 0], [0], [1, 0, 3, 1, 1, 5], [1], [], [2, 0, 0, 4, 2, 4, 4, 4, 1, 0, 1, 0], [1, 1, 1, 0], [], [0, 0, 2], [3], [], [], [], [10]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 5, 1, 1, 0, 1, 2, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s1[i1:divInt(saveOrd(s0),i0)] not in saveChr(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1], [0, 8, 1, 7, 2], [0, 2, 1, 0, 0, 2, 2], [1], [1, 0, 1], [0, 1, 0, 1, 0, 1, 1], [1, 3, 0, 0, 2, 3], [0, 2, 0, 1], [1, 0, 0, 0], [1, 0], [], [], [4, 0, 4, 4], [0, 2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = getCharFromString(s0, int(08.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 1, 0, 0, 1], [5, 3, 5, 8, 7, 2, 0], [2, 0, 1, 1], [1, 0], [2, 0, 2, 1, 1, 1], [0, 0], [], [0, 0, 1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 3, 2, 6, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += ( i0 + ( int(5.0) - int(358.0) ) )\\ni1 = int(720.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 9], [2, 0, 1, 2, 1], [1, 1], [2, 1, 3, 0, 1, 3, 2, 0, 0], [0, 1], [1, 2], [1, 1, 0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 2, 9, 2, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= ( int(4.0) - max(i0, int(9.0)) )\\ni1 += abs(mod(i2,i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2, 1], [0], [0, 1], [], [4], [0], [], [5], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 7, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 0, 1, 1, 2, 0, 0, 2, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 2, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1], [2], [2], [], [0, 1], [], [], [], [], [2, 3], [], [], [4, 4, 0], [2, 1], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(i2).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [2], [1], [0], [], [0], [], [], [], [1, 0, 1, 1, 1], [1, 3, 3, 4, 9], [1, 2, 2], [], [2, 2, 1, 2, 1, 2, 2, 3, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1], [2], [], [0, 1, 1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 13, 5, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = divInt(mod(int(1.0),mod(int(33.0),divInt(mod(abs(i1),i2),int(4.0)))),i2) == int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0], [0, 1], [0], [0], [], [], [2], [4], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [9, 1, 2, 4, 8, 0], [1, 0, 1, 1, 1, 0, 1], [0], [0, 3, 1, 3, 0, 0, 1, 3, 3, 2, 0, 1, 0, 1, 2, 3, 3, 2, 3, 0, 1, 2, 0, 1, 3, 1], [1, 1, 0, 0], [2, 4, 1, 0, 3, 3, 0, 4, 4, 2], [0, 2], [1, 1], [1, 2, 3, 0], [], [0], [2, 0, 4, 2, 4, 1, 4, 0], [1, 1], [], [2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 1, 6, 0, 2, 0, 0, 2, 0, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\le abs(int(9.0))\\nloopBreak% = 0\\nfor s1 in s2[saveOrd(saveChr(i0)):]:{:\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 6], [2], [], [1, 0], [], [], [], [], [4], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = getCharFromString(saveChr(int(06.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 0], [], [0], [], [], [0], [], [], [], [], [], [2, 0], [1], [3, 0], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 2], [2], [2, 2], [], [0], [], [], [], [], [0, 2], [], [2], [2], [], [], [0], [], [], [], [], [], [], [], [], [], [1, 4, 1, 4, 3], [0, 0, 0, 1], [], [0, 0, 3, 0], [], [], [], [3, 3, 0, 3], [], [], [], [5, 24, 8, 23]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1\\ns1 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [1, 2, 1, 2, 1, 0, 1, 2, 1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [9, 8], [0], [0], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(98.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0], [1], [2, 0, 0], [1], [], [1], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= divInt(i0,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [], [], [], [0], [2], [0], [0], [], [1], [], [1], [], [], [], [2, 1, 1, 2], [0], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [3, 8, 8], [2, 1, 0, 1], [], [2, 0, 3, 3, 3, 0, 0, 0], [0], [4, 1, 0], [2], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 1, 3, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( i2 * saveOrd(in0) ) \\le max(min(i1, i0), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [2], [], [], [], [], [], [5], [1], [0], [], [], [], [], [1], [1, 1], [5, 8], [1, 1, 0], [], [2, 2, 1, 0, 0, 0], [1, 0], [], [1], [1], [2, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 6, 2, 0, 1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(( int(5.0) - i1 ),i1) != i0:{:\\ns2 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [3], [0], [0], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [0, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [4, 6, 7, 4, 2, 6, 5, 0, 9, 8], [2, 2, 2], [1], [1, 0, 1, 2, 1, 3, 1, 1], [1], [2], [1], [0], [1, 4, 2], [], [], [3, 2, 4, 0, 2, 0], [0], [], [0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 2, 1, 8, 1, 1, 1, 1, 3, 0, 0, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(4.0)\\ns1 = (getCharFromString(in1, i2)[int(6.0):divInt(int(7.0),abs(int(4.0)))] + s2[int(26509.0):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [0], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [3], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = getCharFromString(saveChr(int(0.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2], [1], [3, 1], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= abs(int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 6, 2, 9, 0, 4, 3, 0, 8, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [1], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 2, 0, 3, 2, 2, 3, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 1], [2, 1, 2, 1, 2, 0], [1, 0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [0], [0, 1], [0], [], [], [], [1], [0], [1], [0], [], [], [], [], [], [1, 1, 0, 1], [0, 1, 6, 5], [0, 1, 2, 0], [0], [2, 0, 1, 1, 2, 1, 3, 0, 0], [1, 0], [0], [0], [1], [2, 1], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s1:{:\\nb1 = mod(i0,int(0.0)) \\l int(1.0)\\ni1 = ( int(65.0) + min(i2, i0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 1, 9, 2, 1, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nb0 = in1[len(in0):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [3, 7], [1], [1], [3, 1, 1], [], [1, 4], [1], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= max(int(3.0), int(7.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 1], [], [], [], [], [0], [5], [0, 0], [0], [], [2], [], [], [], [1, 1, 0, 0, 1], [9, 8, 5, 0, 6], [0, 0, 1, 1, 2], [0, 1], [2, 3, 0, 1, 1, 3, 0, 3, 3, 1, 0], [0], [0, 0, 0, 2], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 5, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( min(i0, int(9.0)) * int(8.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [3, 7], [2], [], [2, 2, 1, 0, 1], [1, 1], [], [], [1, 1], [5, 2, 2], [], [], [4, 3, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 2, 0, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(mod(mod(int(3.0),i2),int(7.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [], [2], [], [4], [], [], [], [], [], [], [], [1], [], [], [], [], [], [0, 0, 4], [], [], [0, 3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s0.startswith((s0 + in1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [1], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 2], [0], [2, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( i2 - int(5.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [3, 9], [0, 0], [1], [0], [], [], [1], [1, 0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 2, 2], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [6, 2, 8], [2], [0, 1, 1], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(628.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 1], [1], [2, 0, 1], [1], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += mod(i1,int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [0], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [4, 8, 1], [0, 0, 0, 2], [1, 0], [3, 3, 1, 0, 3, 0, 1], [], [2, 0, 0], [1], [], [0, 4, 0, 4], [], [0], [4, 4, 0, 0], [3, 2], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 2, 7, 0, 3, 1, 0, 2, 0, 1, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1.capitalize().rstrip():{:\\ni0 -= abs(min(int(4.0), i0))\\ni0 = min(i2, int(81.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [], [3, 0, 0], [], [0], [], [], [4, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(min(i2, i1)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 5], [1, 0], [], [0, 2, 2, 1, 0], [0], [], [1], [], [5, 0, 2], [1], [], [3, 4, 4, 0, 0, 3, 1, 2, 0], [3, 0], [1], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 5, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (getCharFromString(s0, i1).rstrip() + s2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 0], [2, 0, 0, 0, 2, 1, 0, 2, 0], [1], [1, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 2, 2, 2, 0, 0, 1, 2, 3, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 2, 4, 2], [0, 0, 2, 1, 2, 1, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 2], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 1, 0, 0, 1, 3, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = saveChr(int(0.0))[:divInt(i2,int(0.0))]\\ns1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [1, 0], [], [0], [], [], [1], [2, 5], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 5, 1, 1, 9, 6, 6, 1, 2, 2, 0, 4, 7, 9, 2, 0, 0], [0, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 0], [0, 1], [1, 1, 1, 2, 1, 3, 1, 2, 2, 3, 3, 0, 0, 2, 0, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 1, 0, 2, 2, 2, 3, 3, 1, 1, 3, 3, 2, 0, 0, 3, 1, 2, 1, 0, 2, 1, 3, 3, 0, 1, 0, 3, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0], [0, 3, 4, 3, 0, 1, 3, 1, 0, 2, 2, 0, 3, 1, 1], [2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0], [1, 1, 1, 1, 0, 1, 1], [3, 1], [1], [], [2, 0, 4, 1, 4, 2, 2, 4, 4, 0, 4, 4], [0, 0, 1, 3, 3, 1], [0, 2], [1, 1, 1], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 6, 1, 19, 5, 3, 4, 1, 1, 1, 0, 4, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) == int(9.0):{:\\ni0 = int(5.0)\\n:}\\nb1 = ( int(1.0) * min(int(1.0), ( ( len(in0[:saveOrd(getCharFromString(\"\"r\"\", i1))]) + i2 ) * mod(i2,i2) )) ) != ( int(9.0) + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 2, 0, 1, 2, 2, 1, 0], [1, 2, 2, 2], [1, 2, 1, 0, 1], [], [0, 0, 0], [], [], [], [5], [2, 1, 0, 2, 1], [0], [4, 3, 3], [2], [], [], [1, 1], [1, 1, 1], [9, 1, 4], [1, 1, 2, 0, 2, 2, 1, 2, 1], [1, 1, 0], [1, 1, 2, 2, 0, 2, 0, 3, 2, 2, 1, 3, 3, 1, 0, 0, 0, 3], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [4, 3, 0, 4], [0, 0, 1], [1, 1, 1, 1], [0, 2, 2, 0, 1, 1], [1], [], [0, 2, 0, 0, 1, 4, 1, 1, 1, 1, 1, 2, 0, 1, 1], [3], [0], [2, 0], [3, 1, 0, 0, 2, 3, 3, 0], [7, 2, 8], [0], [4], [25, 14, 27]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 3], [5], [0, 1, 0], [0], [], [3, 0], [1], [], [], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [9, 7, 2, 8, 2, 9, 0, 1, 8, 1, 3], [1, 0, 0, 0], [], [2, 1, 1, 2, 2, 1, 3, 2, 1, 3, 2, 3, 3, 1, 3, 2, 1, 3, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0], [3, 4, 3, 1, 1, 0], [0, 2, 1], [1, 0, 1], [1, 4, 0, 2], [], [], [2, 0, 2, 4, 4, 0, 0, 0], [3, 3], [5, 0], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 11, 11, 4, 0, 22, 6, 6, 3, 3, 4, 0, 0, 8, 2, 2, 2, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( ( int(9.0) + int(7.0) ) != mod(divInt(int(2.0),len(s1[( int(8.0) * saveOrd(in1.lstrip().strip(s0)[:mod(len(s2),max(int(290181.0), max(( int(3.0) - min(i1, i0) ), i0)))]) ):])),i0) or res0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 2, 0], [0, 0], [3, 1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(int(4.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0], [], [1, 1, 0], [], [0], [], [], [0, 2, 1], [5], [0, 2], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0], [0, 1], [0, 0, 3, 2, 2, 2, 2, 2, 1, 0, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [0, 0], [1, 0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\ni2 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 1], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [5, 9], [2, 2], [0], [2, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( i2 - int(59.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0], [], [0, 1, 1], [], [0, 0], [], [], [1], [], [2], [], [1], [], [], [], [], [1, 1, 1, 1], [6, 3, 9, 6], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0], [0, 3, 3, 1, 0, 2, 0, 0, 3, 1, 2, 0, 1, 3, 3, 0, 1], [0, 0, 0], [3, 4, 3, 3], [0, 1, 0], [], [1, 0, 3, 1, 1, 5], [1], [], [2, 2, 0, 4, 1, 4, 4, 4, 2, 0, 1, 0], [1, 1, 1, 2], [], [0, 0, 2], [3], [], [], [], [10]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 1, 10, 1, 3, 1, 0, 1, 1, 0, 7, 3, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s1[i0:len(saveChr(saveOrd(\"\"\"\\\\\"\"\")))][int(6.0):i0] not in saveChr(( i0 + i0 ))\\ni0 = len(saveChr(int(3.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [], [0, 1], [1], [3, 0], [], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2, 2], [1], [2, 0, 0], [0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i2 + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [], [], [1], [], [], [], [], [2, 2], [1], [], [4, 1, 3, 0, 4], [3, 1], [4], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, 5, 2, 1, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"F\"\".rstrip((s2 + saveChr(int(4.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [0], [], [2], [], [2], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [4, 4, 3], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in saveChr(i0):{:\\nb0 = in1 == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [0], [], [], [1, 0, 2], [4], [1, 0], [0], [], [0], [], [], [], [0, 1, 1, 0, 1], [1, 5, 6, 0, 9], [0, 2], [], [2, 3, 1, 0, 2, 1, 0, 1], [1, 1], [0, 0], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 5, 5, 2, 0, 8, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = divInt(min(int(15.0), i0),mod(int(6.0),i2)) \\le int(09.0)\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [0, 9, 6, 9, 5, 6], [2, 2, 0, 0, 2, 0, 1, 2, 1, 1], [], [2, 3, 2, 1, 1, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 2, 2, 3, 0, 2, 2, 3, 0, 0, 1, 3, 2, 3, 1, 0, 0, 0, 3, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 3, 2, 1, 3, 2, 3, 4, 2, 1, 0, 1], [2, 0, 0, 0, 0], [0, 1, 0, 1], [5, 5, 1, 2], [1, 1], [], [3, 0, 0, 4, 4, 1, 2, 0, 4, 2, 0, 2, 4, 1], [0, 3, 0, 2, 1], [0], [2, 0, 1], [1, 1], [], [17, 0], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in2 + s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [1], [1], [0], [], [], [], [], [], [1, 1, 0, 0, 0, 0, 0, 1], [0, 8, 7, 9, 6, 3, 9, 2], [0], [0], [1, 2, 3, 1, 2, 0, 1], [0, 1], [3], [0], [1], [1], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 1, 0, 7, 2, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(0.0) \\g ( len(saveChr(int(8.0))) + mod(i0,int(796392.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 7], [1], [0], [1], [], [], [], [], [5, 0], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(47.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [0], [], [], [1], [0], [1, 0], [0], [], [1], [], [1], [0], [0, 0, 0, 1], [7, 7, 1, 2], [1], [], [1, 0, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 4, 4, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7712.0) \\l i1:{:\\nb1 = False\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [0, 2, 2], [0], [2, 0, 0], [0], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( i2 + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 2, 1], [0], [0, 0, 1, 0, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [2, 5], [1, 1, 0], [0, 0], [], [1, 0], [], [0], [], [1], [5], [0, 2, 2, 2], [1], [0, 1, 0, 0], [], [], [0], [], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 == int(5.0)\\nb2 = i2 != i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [4, 2, 4], [0], [0], [2, 1, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = divInt(int(4.0),int(24.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [5, 0, 4], [2, 1, 2, 1], [1], [1, 3, 0, 0, 0], [0], [0], [2, 0], [], [], [], [], [], [], [], [1, 2, 0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(504.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [0], [1, 2], [], [], [], [], [4], [], [], [0, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [2], [0, 1], [0], [], [2], [], [0], [], [0, 1], [2, 3], [2], [], [0, 1], [], [4], [], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not i2 == int(23.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [2, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 2], [1], [0], [], [], [1], [], [3, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2\\ni1 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [], [], [1, 0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i1 \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [2, 0, 0, 2, 1, 0], [1, 0], [1, 1, 1, 0], [0], [0, 0, 0], [], [], [2, 0], [], [0, 2], [], [0], [0], [], [0], [1], [1, 1, 1, 1, 1, 0, 0, 1], [6, 7, 8, 1, 7, 8, 5, 7], [1, 0, 2, 0, 2, 1, 0, 1], [1, 1, 0], [2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 1, 3, 1, 0, 1, 2, 0, 0, 1, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1, 0], [2, 4, 3, 2], [1, 2, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0], [4, 4, 0, 4, 0, 4], [], [0], [0, 0, 0, 4, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 6, 6, 2, 4, 1, 3, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 1, 8, 8, 7, 3, 22, 9, 3, 5, 6, 6, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif b2:{:\\ni1 -= divInt(abs(divInt(divInt(divInt(( ( divInt(divInt(saveOrd(in1),int(6.0)),len(in1)) * int(7.0) ) + i0 ),int(8.0)),( i2 * i0 )),int(1.0))),i2)\\ni1 *= int(7.0)\\n:}else:{:\\nloopBreak% = 0\\nfor s0 in in1:{:\\ni0 = int(857.0)\\nb0 = s0.capitalize() in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1], [8], [2], [1], [2, 1, 3], [1], [4], [0], [0], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(8.0),saveOrd(s0.capitalize()))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [3, 8, 5, 3, 9, 9, 0, 7, 9, 0], [0], [1], [1, 2, 1, 3, 1, 1], [0], [0], [1], [0], [3, 0], [], [], [3, 0, 2, 4], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 0, 6, 1, 1, 1, 0, 2, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (s0 + saveChr(int(3.0))[( int(8.0) - min(int(5399079.0), int(0.0)) ):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [1, 0], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [5, 9, 9], [1, 1, 2], [1, 1], [1, 3, 3, 0, 1], [], [3, 1], [1, 1], [], [], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(59.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [5], [2, 1, 0], [1, 1], [2, 0, 3, 3], [0], [3, 3], [1, 1, 0], [], [1, 3], [], [], [0, 4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 4, 1, 2, 3, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= ( i1 - len(s1) )\\ni0 += len(in0.capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [1, 1], [], [0], [], [], [0], [], [1], [], [], [], [1, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b1\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 0], [0], [0, 0], [0], [], [0], [], [], [], [1, 0, 1, 1], [9, 3, 4, 0], [], [], [1, 2, 1, 1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [5], [0, 0, 2], [0], [0], [2, 1], [], [0], [], [1, 1, 1, 1], [6, 4, 3, 4], [2, 2, 2, 1], [], [2, 0, 1, 2, 3, 2, 0, 1, 2, 2, 2, 0, 0, 3, 2, 3, 3, 1], [1, 1, 1, 0, 1, 0], [4, 1, 4, 3], [0, 1, 1], [0, 0, 1], [4, 0], [], [], [4, 0, 2, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [1], [0], [0], [], [0], [], [], [], [1, 1, 1], [1], [], [], [3, 3, 1], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [2], [], [], [], [], [], [], [0, 0], [], [], [2, 1], [], [1], [0], [1], [3], [0], [0], [1], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not False:{:\\ns2 = in0\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [0], [0, 2], [0, 0], [2], [2], [], [], [], [1, 1, 1, 1], [5, 0, 3, 8], [1, 0, 0, 1, 2, 0], [], [3, 3, 2, 0, 3, 1, 2, 1, 0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0], [2, 3, 1], [2, 2, 1, 2, 0], [1, 1], [1, 3], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not s1 == in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [7, 8, 2], [0, 0], [0, 1], [1, 2, 1, 3, 3, 1, 3, 0, 0], [0], [1, 2, 3], [2], [], [1, 1, 2, 3], [], [], [2, 2, 2, 0, 2, 0, 0, 0], [], [], [1, 2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 0, 9, 1, 3, 1, 0, 3, 0, 0, 6, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s1[int(7.0):][( int(8.0) * max(abs(int(2.0)), len(s2[i0:])) ):][:i0]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1], [4], [0], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(4.0) \\ge i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [1, 1, 3], [5], [0, 0, 0], [0], [], [0, 2, 0], [], [], [], [1], [0], [2], [], [3, 1, 3, 0], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 3, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b1:{:\\nb1 = not res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [2, 5], [], [], [4, 0, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 2, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 1], [1], [2, 0, 2, 0, 0], [1, 0], [2], [2, 0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= mod(i1,( i2 + i1 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [1, 0, 0, 0, 0, 0, 1], [6, 6, 4, 3, 8, 0, 4], [1, 2], [1], [2, 2, 3], [1], [], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [2], [], [3], [], [], [], [], [1], [3], [1], [1], [3, 1, 3], [], [1, 4], [0], [], [5, 5], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in2 != in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [], [0], [], [], [], [], [2, 0], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0[i2:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1], [2, 0, 0, 0, 2, 0, 0, 2, 0, 2], [1], [1, 2, 0, 0, 2, 3, 2, 2, 1, 2, 1, 2, 2, 2, 0, 0, 3, 2, 2, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0, 3, 3, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 2, 4, 0, 2, 1], [2, 0, 2, 1, 2, 2, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 0], [], [0, 0], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [0, 2], [1], [0], [], [], [], [], [1, 1, 1, 2], [], [], [3, 3, 4, 4, 0, 2, 0, 0], [2, 3], [1], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 0, 0, 8, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = ((s1.rstrip().capitalize() + s1[:i0]) + s2)\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1, 9], [1, 2], [0], [1, 0], [], [], [], [], [2, 1], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1[:int(19.0)]\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [0], [0, 2, 1], [0], [4], [3, 0], [1], [], [], [1, 1, 0, 1, 1, 1], [9, 4, 9, 8, 8, 3], [2, 1, 0], [], [1, 0, 0, 3, 2, 2, 3, 0, 3, 2, 1, 1, 1, 1], [1, 0, 0], [0, 1, 3], [0, 1], [1], [5], [], [], [4, 4, 0], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 6, 6, 3, 0, 14, 3, 3, 2, 1, 1, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( saveChr(int(9.0)).startswith(saveChr(i2)) or i1 \\l min(mod(( max(i0, len(in2)) + ( int(4.0) - int(98.0) ) ),int(8.0)), int(3.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [3], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1, 1, 0, 0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[mod(i0,int(0.0)):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0, 4], [1, 0], [0], [1, 2, 1, 0, 3], [1], [3], [], [1], [3], [], [], [2, 2, 0], [], [], [2, 1], [], [], [], [], []], "fitness": 31, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(0.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 1], [1], [3, 3, 0, 0, 0], [0], [1, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= max(min(i1, i2), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1], [9], [1], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\ge int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [2, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [], [], [], [], [], [], [0, 0], [], [], [2, 1], [], [1], [0], [1], [3], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not False:{:\\ni0 = int(3.0)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 0], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(20.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [3, 1, 6], [1, 2], [1], [1, 0, 0, 1], [], [2], [0], [], [1, 4, 1], [1], [0], [0, 4, 1], [0], [], [], [0], [9], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in1:{:\\ni1 += int(316.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [2], [1, 1], [], [0, 0], [], [], [], [3], [0, 1], [0], [], [2], [], [], [], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [4, 6, 0, 1, 1, 9, 1, 6, 6, 4, 9, 1, 7, 0, 1, 9, 2], [2, 0, 1, 0, 1, 2, 1, 2], [1, 0], [2, 2, 3, 2, 1, 3, 2, 0, 0, 1, 2, 2, 3, 1, 1, 1, 1, 0, 2, 2, 1, 2, 0, 1, 0, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1], [1, 2, 1], [1, 1, 2, 0], [1, 0, 1, 0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 17, 17, 8, 2, 27, 9, 3, 4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= mod(divInt(max(( int(4.0) - abs(mod(i0,i1)) ), int(60.0)),divInt(mod(max(int(11.0), int(9.0)),int(1.0)),int(6.0))),i0)\\nloopBreak% = 0\\nwhile not ( ( int(6.0) * mod(i1,int(4.0)) ) + i2 ) \\ge i1:{:\\ni2 = int(9170192.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 0], [], [], [], [], [1, 3], [4], [0, 1, 0], [0], [], [3, 0], [1], [], [], [1], [9], [1, 1, 2], [], [2, 0, 1, 0], [1], [], [], [1], [4, 3, 3], [], [], [3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 1, 1, 2, 0, 4, 1, 0, 0, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (in0 + in0)\\nb1 = ( mod(i1,int(9.0)) \\le i1 or res0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [4], [1], [], [1], [], [], [], [3], [], [], [], [21]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"<\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 1, 1, 1], [1, 1], [0, 0, 3], [1], [], [0, 0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i1\\ni1 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0, 2, 0], [], [0], [3, 0], [1], [], [], [0], [2], [2], [], [0, 0], [], [], [], [], [5], [], [], [0, 4, 2, 0], [1, 2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 3, 0, 1, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( in2 in saveChr(i2) or b0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [0], [0], [0], [], [0], [], [], [], [0, 0, 0, 1], [5, 9, 1, 2], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [7, 1], [0, 1, 0, 2], [1], [3, 2, 2, 2, 3, 1, 1, 0, 0, 0], [1, 1, 1], [4, 0], [1], [1, 0, 1], [4, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 10, 3, 2, 1, 3, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= saveOrd(saveChr(mod(divInt(mod(min(int(7.0), int(1.0)),i1),i0),i2)).capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [0, 4, 6], [0, 2, 0], [1], [0, 0, 3, 2, 0, 1, 2, 1, 1], [0, 0], [3], [1, 2], [], [2, 1, 4, 2], [1], [], [4, 2, 2, 3, 4, 4, 3, 0, 0, 3, 4, 0], [2, 0, 1], [], [1, 0], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [1, 0, 1, 1], [2], [1, 1, 2], [], [0], [], [], [], [4], [0, 0], [0], [], [2], [], [], [], [1, 0, 1], [8, 3, 2], [1, 0, 2, 1, 0, 2], [1, 1], [1, 0, 0, 1], [], [3], [1, 0], [], [4, 1], [1], [], [0, 4], [], [], [], [3], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(8.0)\\ni0 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [], [0, 0], [], [], [2, 3, 3, 2], [], [0, 0], [], [], [0, 0], [], [], [], [], [], [2, 0], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i0\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [2], [], [0], [], [], [2], [], [1], [], [1], [2], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 0, 1], [], [1, 2, 1, 1], [], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 9], [0, 0, 2, 0, 1, 1, 1], [0, 1, 0], [0, 3, 0, 0, 2, 1, 3, 0], [0, 0], [4], [2, 1, 1], [], [0, 3], [], [], [4, 4, 4, 0, 0], [2, 2, 1, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 3, 4, 0, 1, 1, 0, 2, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\ns0 = saveChr(saveOrd(in0)).capitalize().capitalize()\\ni2 *= i0\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [2], [0, 1], [], [], [], [], [2], [4, 4], [1, 0], [0, 0], [], [1], [], [0], [], [1, 1, 1, 0, 1, 1], [0, 8, 2, 3, 6, 8], [1, 0], [1], [3, 2, 0, 1, 3, 1, 3, 1, 3, 1], [0], [4, 1, 2], [2, 1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 3, 3, 2, 1, 8, 1, 3, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(in2) \\le ( i1 * int(0.0) )\\nloopBreak% = 0\\nwhile True:{:\\ni0 -= max(int(8.0), abs(int(2.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1, 2, 1], [1], [3, 3, 0, 0, 0], [0], [1, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= max(min(i1, i2), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [1, 3], [1], [0], [0], [], [0], [], [], [], [1, 1, 1], [1], [], [], [3, 3, 1], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [], [], [], [], [], [], [0, 0], [], [], [2, 1], [], [1], [0], [1], [3], [0, 0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not False:{:\\ni0 = i0\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [0], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [0], [1, 2], [], [], [], [], [4], [], [], [0, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1], [], [], [], [], [3], [1, 2], [0, 1, 0, 2], [0, 0], [5], [0, 2], [1], [], [], [1, 1, 1, 1, 1, 1], [2, 9, 8, 4, 9, 2], [0, 1, 1, 2, 1, 1, 2], [0], [1, 0, 1, 2, 3, 2, 1, 3, 3, 2, 2, 2, 3, 1, 0, 0, 3, 0, 1, 2, 0, 0, 0, 3, 1], [0, 1, 1, 0, 0, 0, 1], [3, 1, 2, 0, 3, 2], [1, 2, 0, 2, 2], [0, 1, 0], [3, 1], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\ni0 = int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 3, 9, 7, 1, 7, 3, 7, 5, 0, 4, 4, 1, 3, 6, 8, 5, 9, 4, 4, 0, 1], [2, 0, 1, 0, 2, 1, 2, 0, 0, 2, 0, 2, 2, 0, 1, 0, 2, 0], [0], [0, 2, 2, 3, 2, 2, 2, 3, 3, 2, 3, 3, 2, 3, 2, 0, 3, 0, 1, 3, 0, 1, 2, 3, 0, 0, 2, 2, 0, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 1, 3, 0, 1, 0, 0, 3, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 3, 1, 3, 3, 1, 2, 1, 3, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 3, 1, 3, 4, 1, 4, 3, 4, 0, 1, 2, 4, 3, 4, 4, 2, 1, 3, 1, 3, 2, 2], [2, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 5, 2, 0, 4, 5, 3, 1, 4], [1, 0, 0, 1, 1, 1, 1, 1], [], [1, 1, 2, 2, 1, 4, 2, 0, 0, 4, 0, 2, 1, 2, 4, 2, 1, 0, 0, 2, 1, 4, 0, 1, 0, 1], [3, 0, 0, 2, 1], [5, 3], [0, 2, 0, 0, 1, 0, 1], [3, 3, 0, 2, 0, 3, 2, 2], [20], [10], [5, 6, 4], [6, 24, 11]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\ns0 = \"\"#\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [0], [2], [2], [], [5], [], [], [], [], [], [], [2, 0, 2, 1, 0], [], [0], [], [], [], [], [4, 1, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in saveChr(i2):{:\\nb0 = s1.endswith(s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 12, 2, 3, 0, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1[mod(int(0.0),i0):])]:{:\\nres0 = in0 == s0[mod(i2,int(7.0)):i2].capitalize()[int(5.0):abs(i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [2], [0, 2], [], [0], [], [], [2], [1], [0, 2, 1], [0], [0], [2], [], [], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [3, 8, 7, 3, 5, 1, 6, 7, 0, 0, 7, 4, 5, 5, 1], [2, 2, 0, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1], [], [3, 0, 3, 1, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 2, 3, 0, 1, 2, 0, 1, 0, 2, 3, 1, 0, 0, 0, 2, 0, 1, 0, 2, 3, 0, 2, 3, 0, 0, 3, 3, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 2, 2, 2, 1, 1, 0, 0, 0, 2, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 1, 3, 5, 3, 2], [], [], [2, 2, 4, 0, 0, 0, 0], [3], [1], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 0, 15, 15, 7, 0, 29, 7, 7, 4, 3, 2, 0, 0, 5, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not s1.rstrip()[:min(i2, max(int(3.0), int(87.0)))][:( int(35.0) + divInt(min(max(abs(int(1.0)), ( int(6.0) + ( mod(abs(i2),int(7.0)) - ( i0 + int(0.0) ) ) )), i1),divInt(abs(int(074551.0)),i1)) )] in s1:{:\\nb2 = i2 \\g i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [8, 9, 1], [1], [1], [1], [], [3], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(891.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 1, 0, 1, 2, 1], [1, 1], [0, 2, 2, 0, 0, 0], [1, 0], [], [1, 1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 6, 2, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\ni0 -= divInt(( i1 * i2 ),i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0, 0], [0], [3, 0, 1], [0], [3], [2, 2], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 4, 9, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 0, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 5, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString(s1[len(in1):], i0)):]:{:\\nin0 = saveChr(i2)[int(0.0):mod(i2,int(7.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [2], [1], [0], [], [], [], [], [], [0, 0, 1, 1], [6, 8, 2, 6], [2, 0, 2, 1, 0], [], [3, 1, 1, 0, 0, 2, 3, 0, 0, 0], [0, 1], [1, 1], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(int(682.0), int(6.0)) == i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0], [1], [], [0], [1], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 3, 0, 1, 7, 8, 3], [2, 0, 2, 1, 2], [0], [3, 2, 1, 0, 2, 3, 3, 2, 1, 0, 1, 1, 3, 2, 3, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0], [4, 1, 0, 2, 0, 0], [1, 2, 0], [0, 1, 0], [4, 4, 5], [], [], [2, 4, 0, 0, 0], [0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 4, 1, 18, 4, 5, 2, 2, 1, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(getCharFromString(in1, ( int(3.0) - i0 ))[:divInt(max(min(mod(int(6.0),i2), int(3.0)), int(0.0)),abs(( min(i1, int(1.0)) * int(7.0) )))])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [3], [4], [1], [0], [], [], [], [], [], [], [], [1, 0], [1], [0, 0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [], [], [2, 1], [1], [0, 0], [], [2], [1], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i2 != i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [1], [3, 0], [], [3], [0], [], [2], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += len(s2[i0:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [0], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [4, 8, 1], [0, 0, 0, 2], [1, 1], [3, 3, 1, 0, 3, 0, 1], [], [2, 0, 0], [1, 2], [], [0, 4, 0, 4], [], [0], [4, 4, 0, 0], [3, 2], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 2, 7, 0, 3, 2, 0, 2, 0, 1, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1.capitalize().strip():{:\\ni0 -= abs(min(int(4.0), i0))\\ni0 *= min(i2, int(81.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 2, 2], [], [0], [], [], [2], [], [0], [], [], [1], [], [1], [], [1], [8], [1, 0, 0, 0, 0, 1], [0], [1, 1, 3], [1], [4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [0], [0], [0], [0], [], [], [0], [2], [1], [0], [5], [], [], [], [], [0, 0, 1, 0, 1, 0, 1], [0, 0, 4, 8, 8, 0, 1], [2, 0, 2, 1, 0], [], [1, 3, 1, 1], [], [1], [], [], [4, 1, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(004.0) == max(int(88.0), int(01.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [0, 2], [0], [2, 0, 1], [0], [], [1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( i2 - int(5.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 1], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [0], [], [0], [], [0], [], [], [1], [5], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1], [5, 5, 0, 4, 7, 4, 8, 0], [], [], [1, 2, 3, 3, 1], [1], [2, 3], [], [1], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 0, 0, 5, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(5.0) != mod(abs(len(s1)),int(5047480.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [], [], [2, 0], [1], [0, 0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i2 \\ge i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [0], [], [], [1], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [0], [1], [0], [], [], [], [], [], [1, 1, 1, 1], [0, 5, 9, 9, 5], [1, 1], [], [3, 1, 2, 0, 1, 2, 3, 0, 1], [0, 1], [1, 4, 4], [0], [1], [0, 1], [], [], [4, 4, 0, 0], [1, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 9, 2, 2, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(int(0.0), ( i1 + int(5.0) )) \\l mod(saveOrd(saveChr(i1)),int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 0], [1, 1, 1, 1], [], [2, 1, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 3, 2, 8, 5], [0, 0, 1, 1, 1, 0, 2, 1], [0, 1], [2, 0, 2, 0, 1, 1, 0, 0, 2, 2, 1, 0, 3, 1, 0, 1], [0, 1, 1, 0], [0, 1], [0, 1, 2, 1], [0, 0], [0, 3, 2], [1], [], [2, 0, 1], [], [], [0], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 2, 0, 1, 1, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in0[( i0 + divInt(i0,int(0.0)) ):int(3.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [2, 2], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\l int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [8, 2], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(82.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [0], [], [], [], [0, 2, 1, 0, 0, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [], [0], [], [], [1], [], [1], [], [1], [2], [0, 1], [0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(2.0)\\nres0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 0], [2], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(00.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [0, 1], [1], [0, 3, 2], [1], [], [3, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (in0 + s2)\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [1], [6], [2, 0, 0, 1, 0], [1], [3, 2, 1, 0, 0, 2, 3, 0, 0, 0], [1, 1], [1, 1], [2, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 5, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= max(mod(int(6.0),i0), i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 1, 0], [0, 1], [0, 1], [], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 0, 2, 1, 1], [2, 2], [2, 1, 1], [], [0], [], [], [0], [1], [1, 0], [0], [], [0], [], [1], [], [1, 1, 1, 1, 1, 0, 1], [4, 5, 5, 0, 6, 1, 2], [1, 2, 1, 2], [0, 0], [1, 1, 1, 2, 1, 3, 0, 0, 1, 3, 1], [0], [2, 4], [0], [], [3, 0, 2], [1], [], [2, 4, 2, 4, 0, 3, 1, 2, 0], [2, 0], [0], [2, 1, 2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 7, 7, 4, 2, 11, 1, 2, 1, 0, 3, 1, 0, 9, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(4.0) \\g int(5.0):{:\\nin0 = getCharFromString(s0, int(5.0))[:( int(0.0) + abs(i1) )].capitalize()[i2:]\\nloopBreak% = 0\\nwhile b0:{:\\ni1 = int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = saveOrd((\"\"R\"\" + s2[int(12.0):]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [1], [2], [0, 1], [0], [], [2], [], [0], [], [0, 1], [2, 3], [], [], [3, 1], [], [4], [], [], [0, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [0], [], [], [1], [0], [1, 0], [0], [], [1], [], [1], [0], [1, 0], [7, 7], [1], [], [1, 0, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l i1:{:\\nb1 = False\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2, 0], [1], [2, 0, 0], [0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i2 + i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [], [], [1, 0], [0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i1 \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 2, 2], [2, 0, 1, 1], [], [2, 0, 2, 0, 2, 1, 2, 2, 3, 1, 0, 0, 1], [1, 0, 0, 0, 0], [0, 0], [0, 2, 1, 0], [0], [2, 3], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 13, 5, 1, 4, 1, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[divInt(i2,( i0 + ( int(1.0) * ( ( min(int(2.0), i1) - i1 ) + int(2.0) ) ) )):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [5, 4, 2], [], [], [4, 3, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in1 + s2).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [6, 7], [1, 2, 0], [1], [2, 3, 1, 0, 0], [1], [0, 2], [1], [0], [0], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 5, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= divInt(min(int(67.0), i2),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [0], [], [], [1], [0], [1, 0], [0], [], [1], [], [1], [0], [1, 1, 1, 1, 1, 1], [4, 7, 0, 9, 6, 8], [1, 2, 1, 2, 1], [], [1, 2, 0, 2, 0, 2, 3, 0, 2, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 0], [1, 0, 1, 0, 0, 1, 0], [2, 1, 2], [0, 2, 2, 2], [1, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 6, 6, 4, 0, 20, 7, 3, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) \\l mod(i1,( i2 + mod(abs(i1),( ( int(7.0) * divInt(int(0.0),( int(9.0) * max(int(6.0), abs(int(8.0))) )) ) * i2 )) )):{:\\nb1 = False\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 0, 0, 0, 1], [0, 8, 7, 0, 3, 4], [], [0], [1, 2, 3, 1], [0], [3], [0], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\g ( len(s1) + int(8.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [3], [0, 0, 1], [0], [], [3, 0], [0], [], [], [1], [1], [0, 0], [], [3, 1, 0, 0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( b2 and max(int(1.0), i0) \\ge i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 1], [1], [0, 2], [], [0], [], [], [2], [1], [0, 2, 1], [0], [0], [2], [], [], [0], [], [], [1, 2], [], [3, 0, 3, 0], [], [2, 4], [], [], [1, 5, 4, 5, 3, 2], [], [], [2, 2, 0, 0, 0, 0, 1], [], [], [1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not s1[abs(i1):][:saveOrd(in2)] in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [3, 6, 7], [2, 0, 0, 0], [], [2, 3, 1, 0, 1, 0, 3, 2, 3, 0, 0, 2, 2, 1, 0, 1], [0, 1, 1, 0], [0, 3, 2, 2, 3], [1], [1, 0, 1], [0], [1, 1], [], [2, 4, 2, 1, 4, 1], [1], [], [1, 2, 2], [2, 1], [], [10], [9], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 1, 1, 1, 0, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = saveChr(( min(int(3.0), i2) - int(6.0) ))[:i0]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0], [], [], [1, 2, 2], [4], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [1, 5, 2], [0, 2], [], [1, 3, 0, 0, 3, 1, 0, 1], [1], [0, 0], [], [0], [2, 5], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(1.0) \\le min(i0, i2)\\ns2 = in2.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [3], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (in2 + \"\">\"\")\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [3, 5, 2, 5], [], [], [3, 4, 3, 0, 0, 0], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (getCharFromString((in2 + s2), int(0.0)) + in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [3, 8], [0], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(38.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 2, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 2], [1], [3, 2, 3, 1, 3, 0], [0], [2, 2, 2], [1, 0], [], [0, 4, 0, 1], [], [0], [4, 4, 0, 0], [3, 0], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 6, 1, 3, 1, 0, 2, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(in1, abs(( abs(int(4.0)) - abs(i0) ))).rstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [0, 1], [0, 8], [1], [], [1, 2, 3, 0], [1], [3], [1], [1], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(08.0) \\g mod(len(s1),i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1], [2], [2], [0], [5], [], [], [], [], [0, 0, 1], [6, 8, 2], [1, 0, 2, 1, 0], [1], [3, 2, 1, 0, 0, 2, 3, 0, 0, 0], [0, 1], [1, 1], [2, 0], [1], [], [0, 1, 1], [], [1, 4, 1], [0], [], [], [1, 1, 3], [], [23, 13], [], [2]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 5, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= max(( int(682.0) + i0 ), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2, 1, 1], [], [], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [], [], [4, 0], [3], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s1.strip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = len(in1) != len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [0, 0], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [1], [3, 0, 0], [1], [4], [1], [1], [1, 1], [], [], [4, 3, 0, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 2, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= saveOrd(getCharFromString((s1 + s1), i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [0], [0], [0], [0], [], [], [0], [4], [1], [0], [5], [], [], [], [], [1], [3], [0, 2], [], [0, 0, 1], [], [2], [], [], [4, 1, 5], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\le i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1], [0], [2, 1], [0], [0, 1], [], [4], [0], [], [5], [], [], [2, 0], [], [1, 0], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [3], [1], [0], [], [], [], [], [], [1, 1], [8, 2], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(8.0) \\ge int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [0, 1], [], [], [], [], [2], [1], [1], [0], [], [], [], [], [], [], [], [0, 2, 2], [1], [0, 0, 3], [], [3], [1], [], [3], [], [], [0], [], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 \\g i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0, 0], [], [], [0], [1], [1], [0], [], [], [], [], [], [0, 1], [4, 5], [0, 0], [], [2, 0, 0, 1], [0], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( i0 + i0 ) \\g int(45.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [0], [], [], [1], [0], [1, 0], [0], [], [1], [], [1], [0], [1, 0], [7, 7], [1], [], [1, 0, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l i1:{:\\nb1 = False\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [], [0, 1], [9, 1], [2, 1, 0], [1, 1], [3, 1, 0], [], [4], [0, 2], [], [1, 4, 2], [], [], [4, 0, 0, 4], [3, 1], [2], [], [], [], [], [], []], "fitness": 31, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += saveOrd(s1.strip())\\ni1 *= int(91.0)\\nin1 = s2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 1, 2, 0, 3, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [0, 0, 0, 0, 1], [5, 9, 1, 2, 9], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(59129.0) \\g i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [1], [3, 0, 1, 1], [], [2], [2], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 1, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i1)\\ns2 = in0[:int(4.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [2, 2], [], [0], [], [], [3], [0], [0], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [7, 7, 3, 2, 7, 8], [0, 0], [], [1, 2, 0, 0, 3, 3, 1, 1, 1, 3, 1, 1, 0], [1, 1], [1, 3, 4, 4], [], [0, 1], [0, 1], [0, 1], [], [4, 4, 0, 4, 2, 2, 4, 1], [3, 1, 1, 1], [3], [2, 2], [3, 3], [], [], [], [4, 22]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = saveChr(int(7.0)).lstrip(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [5, 1], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(51.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [2], [0, 0], [], [0, 0], [], [], [3, 3], [0, 5], [1, 0, 1], [0, 0], [], [1], [], [0], [], [1, 0, 1], [6, 1, 3], [0, 2, 0], [], [1, 1, 0, 2, 0, 0], [0], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 2, 2, 3, 2, 0, 1, 0, 1, 0, 3, 3, 3, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(6.0) \\l int(13.0):{:\\nres0 = True\\nres0 = i0 != ( i2 + i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [2, 0, 0, 2], [0], [0, 3, 1, 1, 0, 0], [0, 0], [3], [2, 0], [], [2, 3, 4], [], [], [0, 0, 4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [3], [], [4], [1], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= saveOrd(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [1, 1], [], [0], [], [], [], [1], [1], [0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 5, 1, 1, 9, 6, 6, 1, 2, 2, 0, 4, 7, 9, 7, 0, 0], [0, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 0], [0, 1], [1, 0, 1, 2, 1, 3, 1, 3, 1, 3, 3, 3, 0, 3, 1, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 1, 0, 2, 2, 2, 3, 3, 1, 1, 2, 3, 2, 0, 0, 3, 1, 2, 1, 0, 3, 1, 3, 0, 2, 1, 0, 3, 2, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0], [1, 3, 4, 0, 4, 1, 4, 1, 0, 2, 2, 0, 3, 1, 1], [2, 1, 2, 0, 2, 2, 2, 2, 0, 2, 0], [1, 1, 1, 1, 0, 1, 1], [3, 1], [1], [], [2, 0, 4, 1, 4, 2, 2, 4, 1, 0, 4, 4], [2, 0, 1, 3, 3, 1], [0, 2], [1, 1, 1], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 5, 5, 3, 2, 9, 1, 2, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) \\g i0:{:\\ni1 = int(9.0)\\n:}\\ni2 *= ( int(5.0) - max(int(1.0), len(in0[:int(1.0)])) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [5, 9], [2, 1, 2], [1, 1], [1, 3, 3, 3, 2], [], [3, 1], [1, 1], [], [], [], [], [1], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 2], [1], [0], [], [], [2], [], [1, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ns1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 3, 2, 1, 0, 4, 0, 1, 0, 1, 4, 4, 2, 0, 2, 2, 2, 0, 4], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 8], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(08.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 1, 0, 1], [6, 7, 8, 8], [2, 0, 2, 2, 0], [], [3, 1, 1, 0, 2, 2, 3, 0, 1, 2, 1, 0], [1, 1, 0], [1, 1], [1, 2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = max(int(6.0), int(7.0)) == i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [6, 3], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(63.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1], [1], [1], [0], [], [], [], [], [0], [1], [1], [1], [0], [3, 3, 1, 0], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 0, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 1, 1, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [1], [6], [2, 0, 2, 1, 0], [1], [3, 2, 1, 0, 0, 2, 3, 0, 0, 0], [0, 0], [1, 1], [2, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 5, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= max(( int(6.0) - i0 ), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [3, 0], [], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [4], [1], [0], [], [], [], [], [], [1], [5], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(5.0) \\le i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1], [5, 8, 5, 1], [1, 1, 2, 2, 0, 2], [0, 1], [3, 1, 2, 0, 2, 3, 1, 3, 2, 0, 0, 0, 3], [1, 1, 0], [0, 3, 1, 4], [2, 0, 1], [1, 1], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 6, 2, 12, 3, 3, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = min(int(5.0), mod(i1,mod(len(s1),int(8.0))))\\ni2 *= max(( i2 + i0 ), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [], [], [1, 1, 3, 1], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\g int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [], [], [], [0], [2], [1], [0], [], [], [], [], [], [], [], [2, 0, 0, 2, 1, 0, 0], [0], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i2 == i0\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1, 0, 0], [], [1, 1], [], [0], [], [], [2, 1], [], [], [], [], [], [], [], [], [1], [0], [0, 2], [1, 1], [3, 1], [], [3], [1, 1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 0, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= len(in2)\\ni2 -= int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [0], [2], [0], [4], [], [], [], [], [0, 1, 0, 1], [0, 5, 5, 7], [1, 1], [], [3, 1, 2, 0, 2, 2, 3, 0, 3], [0, 1], [2, 4, 4], [0], [0], [4, 5], [], [], [4, 4, 0, 0], [1, 2], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveChr(abs(int(05.0))).startswith(in1.capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [1, 0, 1], [8, 9, 7], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(8.0) \\le i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [], [], [1], [], [], [], [], [3], [1], [], [4, 1, 4], [3, 1], [4], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 3, 2, 1, 0, 1, 1, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"F\"\".rstrip(saveChr(int(4.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1], [7, 7, 5, 3], [1, 2], [0], [1, 3, 2, 0, 2, 3, 2, 1, 2, 1, 0, 1], [0, 0, 0, 0], [1, 3, 2], [1, 0, 2, 0], [], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 4, 2, 4, 0, 2, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (saveChr(int(7.0)) + saveChr(max(( i1 - ( len(s2.capitalize()) + ( int(7.0) * ( int(5.0) + i2 ) ) ) ), int(3.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [], [0, 0], [], [], [2], [], [0], [], [], [1], [], [0], [], [], [], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [2], [1, 2], [], [], [], [], [0], [], [0], [], [], [0], [], [], [], [1, 1], [9, 5], [0], [1], [3, 1, 1], [], [0], [0], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 2, 2, 1, 1, 3, 0, 1, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b0:{:\\ni0 += min(int(9.0), int(5.0))\\nin0 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [1, 1], [], [0], [], [], [], [1], [1], [0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 5, 1, 1, 9, 6, 6, 1, 2, 2, 0, 4, 7, 9, 2, 0, 0], [0, 1, 2, 2, 0, 1, 1, 0, 2, 1, 2, 2, 0], [0, 1], [1, 2, 3, 2, 1, 3, 1, 2, 1, 3, 3, 0, 0, 3, 1, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 1, 0, 2, 2, 2, 3, 3, 1, 1, 3, 3, 2, 0, 0, 3, 1, 2, 1, 0, 0, 1, 3, 3, 2, 1, 0, 3, 2, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0], [0, 3, 4, 2, 4, 1, 4, 1, 0, 2, 2, 0, 3, 1, 1], [2, 0, 2, 0, 2, 2, 1, 1, 0, 2, 0], [1, 1, 1, 1, 0, 1, 1], [3, 1], [1], [], [2, 0, 4, 1, 0, 2, 2, 4, 4, 0, 4, 4], [2, 0, 1, 3, 3, 1], [0, 2], [1, 1, 0], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 4, 4, 4, 2, 14, 3, 5, 4, 0, 2, 1, 0, 5, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) \\g ( min(( int(9.0) * len(in0[:int(5.0)]) ), ( int(1.0) + saveOrd(\"\"r\"\".capitalize()) )) * abs(i0) ):{:\\ni1 = i2\\n:}\\ni2 += saveOrd(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 5, 1], [], [], [4, 0, 0], [3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2.lstrip(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 8, 6], [1, 1], [1], [3, 3, 0, 2, 1, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [2, 0, 0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 6, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(min(i1, mod(int(1.0),int(8.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 2, 2, 0, 1, 1, 2, 0, 2, 0, 1], [2, 1, 0, 1], [2, 1, 2, 2, 0, 0, 2], [0], [0, 0, 0], [], [], [1, 2, 2], [3, 1, 1], [1, 2, 1, 1, 0, 0, 2], [0, 0, 0], [2, 4], [2, 0], [], [], [1, 0, 1], [1, 1, 1, 1, 0, 1], [0, 2, 7, 5, 1, 8], [0, 0, 1, 0, 2, 1, 0, 2, 0, 1, 0, 1, 1], [0, 0], [0, 3, 1, 3, 0, 2, 2, 1, 0, 1, 0, 2, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0], [], [1, 0, 1], [1], [2, 0, 4, 0, 2, 0, 5], [1, 1], [0], [0, 0, 4, 2, 0, 4, 0, 1, 2, 4, 1], [1, 3, 2], [0], [0, 1], [0, 0], [5], [], [], [18]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [2, 0], [0], [0], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1], [3], [2], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(3.0) \\ge i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [], [1, 3, 2, 0, 2, 3, 3, 1, 2, 1, 0], [0, 0, 0], [1, 3, 2], [0, 0, 2], [1], [3, 2, 2, 5], [], [], [3, 0, 4, 4, 0, 0, 0], [1, 0, 3], [5], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (s2 + saveChr(int(5.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [1, 2, 2], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 0, 1, 1, 1], [4, 9, 2, 6, 9, 5, 4, 8, 9], [0, 2, 0], [1], [1, 2, 2, 3, 1, 1, 2, 0, 2, 0, 0, 1], [1, 1, 0, 1], [0], [0], [0, 0, 1], [2, 2], [], [], [3, 0, 2, 4], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 3, 0, 12, 4, 1, 1, 3, 2, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (s2 + saveChr(int(4.0))[divInt(divInt(min(int(9.0), int(26954.0)),( i0 + mod(i2,i0) )),int(8.0)):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0], [1], [0, 2], [], [0, 0], [], [], [2], [1], [0, 2, 1], [0], [0], [2], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 0, 8, 2, 9, 6, 7, 8, 3, 3, 2, 8], [1, 2, 1, 2, 0, 2], [], [3, 0, 3, 0, 3, 2, 2, 2, 2, 1, 3, 3, 1, 1, 1, 1, 1, 0, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 1, 1, 0], [1, 2, 2, 2], [1, 1, 0, 0], [1, 1, 4, 5, 3, 2], [], [], [2, 2, 0, 0, 0, 0, 0], [], [], [1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 1, 10, 10, 6, 0, 28, 8, 5, 4, 4, 5, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not s1[len(s1):][:i1] in in1:{:\\nb2 = max(i2, max(( mod(mod(( int(5.0) - max(min(int(0.0), int(8.0)), int(2.0)) ),int(9.0)),int(6.0)) * i1 ), ( int(7.0) * ( int(8.0) * divInt(int(33.0),divInt(i2,i0)) ) ))) \\g i2\\n:}else:{:\\nin2 = in0\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [0], [], [], [], [], [1, 2], [2, 1, 0, 2], [0, 0], [5], [3, 2], [1], [], [], [1, 1, 1, 1, 1, 1], [2, 9, 8, 4, 9, 2], [0, 0, 1, 2, 1, 1, 2], [1], [1, 1, 1, 2, 3, 2, 1, 3, 3, 2, 2, 2, 3, 1, 0, 0, 3, 0, 1, 2, 0, 0, 0, 3, 1], [0, 1, 1, 0, 0, 0, 1], [3, 1, 2, 0, 3, 2], [1, 2, 0, 2, 2], [0, 1, 0], [3, 5], [], [0], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2:{:\\ni0 -= int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [0, 1], [4, 0], [1, 2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni1 += int(40.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 2, 1], [], [0, 0], [], [], [1, 0, 1], [], [0, 0], [], [], [1, 0], [], [1], [], [], [], [2, 1], [0], [3, 0], [], [2], [], [], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\nin1 = in2\\ni2 = abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [2], [1], [1], [0], [], [], [], [], [], [1, 1], [3, 7], [0], [], [0, 1, 0, 0], [], [0], [], [], [2, 0], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\nb2 = i0 \\g int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [2, 2, 0], [1, 0], [0, 1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i2\\ni0 = int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 6, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 3, 1, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 0, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 10, 0, 49, 15, 9, 8, 7, 5, 1, 1, 14, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1[len(in1):]))[int(0.0):]:{:\\nb2 = saveChr(abs(min(mod(i0,int(7.0)), mod(int(5.0),len(in0[i2:( divInt(( int(7.0) + i2 ),divInt(( ( i0 + divInt(min(int(0.0), int(6.0)),i1) ) * ( min(int(7.0), i2) - int(7.0) ) ),int(9.0))) + i0 )])))))[i2:divInt(int(8.0),abs(int(5.0)))] not in (\"\"R\"\" + saveChr(max(i0, mod(( ( int(0.0) * int(4.0) ) - ( int(8.0) - i0 ) ),int(59.0))))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [1], [], [0], [], [], [], [3], [0, 1], [0], [], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 2, 7, 4, 8, 2, 4, 4], [1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [1], [3, 0, 2, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [3, 3, 1, 0, 3, 0, 1, 2, 1], [2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [3, 1, 3, 4], [1], [], [0, 2, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0], [3, 2, 2, 3, 0, 0, 2, 1], [0, 2], [1, 1, 1], [1], [], [24], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 4, 1, 7, 2, 1, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not len(in0) \\ge i1:{:\\ni0 *= ( ( int(7.0) + i2 ) - i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 0, 1], [], [0, 0], [], [], [3, 0, 1], [], [0, 0], [], [], [1, 0], [], [1], [], [], [], [2, 1], [0], [3, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\nb0 = b1\\ni2 = abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [], [], [1], [], [], [], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:int(1.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [4], [], [], [4, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 2], [0], [0], [2, 1, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = divInt(int(8.0),int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [7, 9, 7, 4, 2, 6, 5, 9, 2, 1], [2, 0, 2], [1], [1, 0, 0, 3, 1, 1], [1], [2], [1], [0], [1, 5], [], [], [3, 2, 4, 0], [1], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 5, 0, 1, 1, 0, 2, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(79.0)\\ns1 = (saveChr(i0)[i2:abs(int(7.0))] + in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 0, 1], [], [0, 0], [], [], [1, 0, 1], [], [0, 0], [], [], [1, 0], [], [1], [], [], [], [2, 1], [0], [3, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\nb0 = b1\\ni2 = abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [0], [0], [0], [], [1], [], [1], [], [1], [0], [0, 2], [], [2, 0, 1, 0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [1, 1], [6, 4], [2, 0, 2, 0, 0], [], [2, 2, 1, 0, 0, 2, 1, 0, 0, 0], [0, 1, 0], [1, 1], [2, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 8, 3, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( mod(int(6.0),i2) * i0 ) == ( int(4.0) - i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [2], [], [0], [], [], [1], [], [1], [], [], [], [0, 1], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i1\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1, 1], [2, 0, 0, 2, 1, 0, 0, 2], [1], [2, 2, 2, 0, 3, 1, 0, 2, 2, 3, 2, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 0, 0], [1, 1], [1, 2, 2], [0, 1, 0, 1], [0, 4], [], [], [4, 4, 0, 4, 1], [3, 3, 0], [5, 2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 8, 1, 17, 6, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= divInt(mod(divInt(i0,max(int(1.0), i0)),mod(( max(( i2 * i1 ), int(1.0)) * i0 ),i0)),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0, 3], [0], [2, 2, 1], [0], [4], [3, 0], [1], [], [], [1, 1, 0, 1, 1], [9, 4, 9, 8, 8], [2, 1, 0], [1], [1, 0, 0, 1, 2, 1, 3, 0, 3, 2, 1, 1], [1, 1], [0, 1, 3], [1], [1], [5], [], [], [4, 4, 0], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [4, 6, 7], [0, 2, 2], [0], [1, 0, 1, 2, 1, 0], [1], [], [], [0], [1, 5], [], [], [0, 2, 2, 0], [1], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(4.0)\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [2], [0], [], [], [], [], [5], [1], [0], [], [], [], [], [0], [1, 0], [5, 8], [0], [], [2, 1, 1, 0], [1], [], [], [0], [5, 0, 1, 3], [1], [0], [0, 0], [], [], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\ns1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [], [3, 2, 0, 3, 0], [0], [2, 4], [1], [], [5, 5, 3, 4, 5], [], [], [4, 0, 0], [3, 0], [2], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2.strip()\\nin0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2, 2], [1], [2, 0, 0], [0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i2 + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [0], [1], [0], [], [], [], [], [], [1, 1, 0, 0, 1], [0, 5, 4, 1, 5], [1, 0], [], [3, 1, 0, 0, 1, 2, 3, 0, 1], [0, 0], [1, 4, 4], [0], [0], [0, 1], [], [], [2, 4, 0, 0], [1, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(int(0.0), i1) \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(s2)]:{:\\nres0 = \"\"R\"\"[i0:] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [0], [], [], [1, 1], [0], [1, 0], [0], [], [0], [], [1], [0], [1, 0], [7, 7], [1], [], [1, 0, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l i1:{:\\nb1 = b1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [2, 3], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:i0].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [5], [0], [0], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [9, 2], [0], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(92.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [], [0], [], [], [0, 3], [], [0], [], [], [0], [], [0], [], [0, 1, 1], [6, 0, 6], [0, 2, 2, 2, 0, 1, 1, 2, 0, 0, 2, 2, 1], [1], [2, 3, 2, 0, 1, 0, 3, 2, 0, 1], [0, 1, 0], [1, 2], [1, 1, 2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 3, 3, 4, 1, 10, 3, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( max(mod(i2,int(60.0)), i2) - abs(( i2 * int(6.0) )) )\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [0], [0], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [2], [1], [0], [], [0], [], [], [], [0, 0, 0, 1], [8, 8, 4, 5], [1, 2], [], [1, 2, 0, 0], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(8845.0) == ( i1 - i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 2, 2], [], [0, 0], [], [], [0], [], [2], [], [1], [], [], [], [], [1, 1, 1, 1, 0, 1], [6, 3, 7, 6, 7, 3], [1, 0, 0, 0, 0, 1], [], [0, 3, 3, 0, 0, 2, 1, 1, 2, 1, 2, 0, 3, 2, 3, 0, 1, 0, 1], [1, 0, 0, 0], [3, 1, 2, 3], [0, 1, 0], [0], [1, 0, 3, 1, 1, 5], [1], [], [2, 0, 0, 4, 2, 4, 4, 4, 1, 0, 1, 0], [1, 1, 1, 0], [], [0, 0, 2], [3], [], [], [], [10]], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 6, 0, 19, 4, 4, 3, 1, 4, 1, 0, 9, 4, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s1[i1:len(s0)] not in saveChr(max(i0, i0))\\nin0 = saveChr(divInt(int(6.0),int(3.0)))[( int(7.0) + ( i0 - abs(( len(saveChr(i0)) + int(6.0) )) ) ):i1]\\ns1 = getCharFromString(\"\"\"\\\\\"\"\", int(73.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 0], [], [2, 1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6], [0, 2, 1, 0, 0, 0], [0], [3, 3, 0, 0, 0, 0, 3, 2, 1, 0, 0], [0], [1, 0, 1], [2], [], [5, 5, 4], [0, 1], [], [4, 2, 1], [0], [], [0], [3, 0], [1], [], [], [8]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 6, 0, 11, 1, 3, 1, 0, 1, 2, 0, 3, 1, 0, 1, 2, 1, 0, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(\"\"%B\"\"[max(min(i0, i2), i1):i0], max(( int(6.0) * i0 ), i0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1], [0], [2], [], [0, 3, 1, 0], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i2 \\g saveOrd(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0], [], [], [], [], [0], [5, 5], [1, 1], [0, 0], [], [], [], [], [], [1], [5], [0, 0, 2], [0, 1], [0, 0, 0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i0 != i0:{:\\nb0 = i2 != int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 0, 0], [0, 0], [0, 1], [], [], [], [], [2], [], [], [4], [3], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 2], [0], [1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [1], [5], [1, 2], [1], [1, 0, 0, 1], [], [2], [0], [], [1, 4, 1], [1], [0], [0, 4, 1], [0], [], [], [0], [9], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s0.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1, 1, 2], [1, 0], [0, 0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [0], [3], [], [3], [], [], [2], [], [], [4, 0], [3], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = len(s2.strip())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [0, 0, 0, 1], [5, 9, 1, 4], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(5914.0) \\l i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 0, 1], [], [0, 0], [], [], [1, 0, 1], [], [0, 0], [], [], [1, 0], [], [1], [], [], [], [2, 1], [0], [3, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\nb0 = b1\\ni2 = abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1], [2, 0, 0, 0, 2, 0, 0, 2, 0, 2], [1], [1, 2, 0, 1, 2, 0, 2, 2, 1, 0, 3, 2, 2, 2, 0, 0, 1, 2, 2, 3, 1, 2, 1, 3, 1, 1, 0, 2, 2, 0, 3, 2, 0, 1, 0, 0, 0, 1, 1, 0, 3, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [1, 2, 4, 0, 1, 1], [2, 0, 1, 1, 2, 2, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 4], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 6, 1, 26, 10, 3, 2, 9, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(42.0)\\ns1 = saveChr(divInt(i0,int(0.0)))[:divInt(i0,mod(divInt(int(7.0),i0),max(divInt(divInt(divInt(i2,i0),int(3.0)),divInt(divInt(abs(int(6.0)),( int(1.0) + saveOrd(in1) )),int(4.0))), int(3.0))))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [2], [], [], [], [], [], [], [2, 0], [], [5], [0, 1], [], [1], [0], [1], [3], [0], [0], [1, 0], [], [], [], [], [0, 0, 5], [], [], [0, 4, 2, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 3, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0.endswith(saveChr(int(3.0))):{:\\ns0 = in2[:i0]\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [8, 9, 1], [1], [1], [1], [], [], [1], [], [1, 0], [], [], [0], [], [], [], [3, 0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 0], [2], [1, 1, 2], [], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [], [], [0, 2, 2, 1, 0, 2], [1, 0], [0, 3, 0, 0], [], [2], [1], [], [4, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\ni2 = abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [], [2], [1], [3, 3], [], [2, 4], [1], [], [2, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= abs(saveOrd(s2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [0], [0], [], [1], [], [1], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [], [0, 0, 0, 1], [3, 1, 5, 1], [2, 1, 0], [1, 1], [3, 1, 0], [], [4], [0, 2], [], [1, 5, 2], [], [], [4, 0, 0, 4], [3, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 2, 2, 0, 1, 2, 0, 3, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += saveOrd(s1.lstrip())\\ni1 *= int(3151.0)\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 1], [9, 9, 0, 3, 9, 5], [0, 2, 2], [1], [2, 0, 1, 2, 1, 1, 3, 3, 0, 0, 0], [1, 0], [1, 2], [0], [1], [1, 4], [], [], [2, 2, 0], [], [], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 3, 0, 10, 2, 2, 1, 1, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1[mod(i0,int(9.0)):( int(9.0) + int(0395.0) )][max(abs(i2), i2):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 1], [0, 0], [1, 5], [3, 0, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 2, 2, 1, 3, 0, 3, 2, 2, 1, 0, 3, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 1, 1, 1, 0, 1, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 2, 2, 2, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 4, 1, 1, 2, 1, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1[saveOrd(in2):] not in in1[i0:]:{:\\nres0 = ( i1 != int(0.0) or b2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [0, 1], [7, 0], [1, 0, 1, 2], [], [2, 0, 2, 0, 0, 2, 0, 1], [0, 0, 0], [], [0, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 8, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( i1 + ( i0 * i1 ) ) \\l ( i2 + int(70.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [0, 1], [0], [0], [0], [], [], [1], [3], [1, 0], [0], [], [1], [], [0], [0], [1, 1], [7, 2], [0, 1], [0], [0, 1, 0], [], [], [], [], [0, 3, 0, 4], [], [0], [3, 0, 3, 3, 4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 1, 1, 2, 0, 3, 0, 0, 0, 0, 4, 0, 1, 7, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in0 + ((saveChr(i0) + s0) + in1)):{:\\nif int(7.0) \\ge i1:{:\\nb1 = True\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [1], [1], [1], [0], [], [], [], [], [], [1, 1], [3, 7], [0], [], [0, 1, 0, 0], [], [0], [], [], [2, 0], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\nb1 = i0 \\g int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1, 1], [3, 9, 1], [2], [], [3, 3, 3, 3, 3, 2, 0, 1, 1, 1], [1], [0, 4, 0, 1, 4], [], [1], [4, 0], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 1], [8, 1, 0, 8, 4], [1], [0], [2, 1, 1], [1], [4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = mod(int(81.0),int(084.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0, 0], [], [2], [1], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0], [0, 0], [2], [1], [], [0], [], [], [], [], [0], [], [], [1], [], [0], [], [1], [5], [1], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [0, 3], [3], [0, 1], [0], [], [1], [], [1], [], [0, 0, 1], [4, 1, 2], [0, 1, 1], [1, 1], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i1\\ni1 *= int(412.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [0], [0, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (saveChr(i1) + saveChr(i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 2, 1, 0], [2, 0], [2, 1], [0], [0], [], [], [], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 8, 7, 5, 4, 6, 1, 2], [2, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0], [2, 0, 2, 1, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0, 2, 0, 1, 2, 1, 2, 3, 2, 0, 3, 1, 3, 1, 2, 0, 3, 2, 2, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [2, 3, 3, 2], [0, 2, 2, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1], [3, 1, 3, 5, 3, 4], [], [0], [0, 4, 2, 2, 4, 0, 0, 2, 0], [3, 0, 1], [5], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [3, 9], [0], [], [1], [], [], [], [], [2, 5], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2[:int(39.0)].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [2], [0, 1], [0], [], [2], [], [0], [], [0, 1], [2, 3], [], [], [3, 1], [], [4], [], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not saveOrd(s0) == int(23.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [2], [], [], [], [], [], [5], [1], [0], [], [], [], [], [0], [0, 1, 0, 0, 0, 0, 1], [5, 8, 7, 2, 1, 1, 5], [0, 1, 0], [], [2, 2, 1, 0, 0, 0, 1], [1, 1], [], [1], [1, 1], [1, 0], [], [], [4, 4, 0], [3, 1], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 7, 7, 3, 0, 7, 2, 0, 0, 2, 2, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(mod(int(58.0),i0),i1) != i0:{:\\ns1 = saveChr(int(72115.0)).lstrip(s0)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [0, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [3], [], [], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4], [1], [], [1], [], [], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"F\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [5, 5], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2[:i0].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [1, 4], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 3, 9, 7, 1, 7, 3, 7, 5, 0, 4, 4, 1, 3, 6, 8, 5, 9, 4, 4, 0, 1], [2, 2, 1, 0, 2, 1, 2, 0, 0, 2, 0, 2, 2, 0, 1, 0, 2, 0], [0], [1, 2, 2, 3, 2, 2, 2, 3, 3, 2, 3, 3, 2, 3, 2, 0, 3, 0, 1, 3, 0, 1, 2, 3, 0, 0, 2, 2, 0, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 1, 3, 0, 1, 0, 0, 3, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 3, 1, 3, 3, 1, 2, 1, 3, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 3, 1, 3, 4, 1, 4, 3, 4, 0, 1, 2, 4, 3, 4, 4, 2, 1, 3, 1, 3, 2, 2], [2, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0], [], [0, 5, 2, 0, 4, 5, 3, 1, 4], [1, 0, 0, 1, 1, 1, 1, 1], [], [1, 1, 2, 2, 1, 4, 2, 0, 0, 4, 0, 2, 1, 2, 4, 2, 1, 0, 0, 2, 1, 4, 0, 1, 0, 1], [3, 0, 0, 2, 1], [5, 3], [0, 2, 0, 0, 1, 0, 1], [3, 3, 0, 2, 0, 3, 2, 2], [20], [10], [5, 6, 4], [6, 24, 11]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(7.0)\\ns0 = \"\"#\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0, 5], [0, 2, 2, 1, 2, 0], [1, 1], [0, 2, 0, 2, 3, 0, 0], [1, 1], [4], [1, 2, 0], [0, 1], [0, 5, 4, 4, 3, 0, 4], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 7, 2, 1, 2, 2, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\ni2 *= divInt(i1,mod(saveOrd(s0[i2:]),i0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 1, 1], [], [1, 1, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 1], [0, 3, 2, 8, 5], [0, 1, 1, 1, 1, 0, 2, 1], [1, 1], [1, 3, 2, 0, 1, 1, 0, 3, 2, 2, 0, 0, 3, 1, 0, 1], [0, 1, 1, 0], [0, 1], [0, 0, 1, 2], [0, 0], [0, 3, 2], [1], [], [2, 0, 4], [], [], [0], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 2, 6, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(0.0)\\ni1 += min(( i1 - int(32.0) ), int(8.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 0, 0, 0, 0, 1], [6, 2, 5, 3, 7, 5, 0, 7], [1, 1, 0, 0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(62537507.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [8], [1], [0], [2, 1, 3, 3], [1], [2, 4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 4, 1, 2, 0, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = mod(int(8.0),abs(saveOrd(s0.capitalize())))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [], [0], [], [], [2, 3, 2], [], [0, 0], [], [], [1, 0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0, 0], [], [], [0], [], [2], [], [4], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [5, 5], [], [], [0, 4, 4, 0], [2, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = in2.startswith(in2.capitalize().capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 2], [0], [0, 0, 2], [0], [5], [3, 0], [0], [], [], [1, 1], [9, 5], [1, 0], [], [2, 1, 2, 0, 1, 2, 3, 0, 3], [1, 1], [1, 1, 4], [0], [0, 1], [0, 1], [], [], [4, 4, 0, 0], [1, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 3, 0, 1, 2, 1, 0, 0, 2, 2, 1, 0, 5, 2, 0, 0, 2, 2, 0, 0, 4, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( b2 and saveChr(divInt(int(9.0),mod(i1,int(5.0)))).endswith(s0.lstrip(s1)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [0, 1, 1], [3, 8, 8], [2, 1], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(38.0) \\le i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [3], [], [3], [0], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [3], [0], [1], [1], [], [], [2], [], [4, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [0, 6, 2, 0, 0, 4, 3, 0, 7, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 3, 2, 2, 3, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [2, 1], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 8, 6], [1, 1], [1], [3, 1, 0, 3, 1, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [2, 0, 0], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(int(1.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [4], [], [], [4, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [1, 2], [2, 1], [], [], [], [], [], [0], [0, 1, 0], [0], [], [2, 1], [], [1], [1], [1, 1, 1, 1, 1], [1, 5, 4, 1, 8], [0, 2, 0, 2], [1], [1, 1, 0, 2, 0, 2, 0, 1, 2, 3, 1, 3, 2, 1, 0, 0], [0, 0, 0, 0, 1], [2, 4, 4], [1, 2, 1, 2], [1], [1, 2], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 0, 1, 3, 1, 0, 2, 0, 1, 1, 3, 3, 4, 1, 8, 2, 0, 3, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not int(1.0) \\l int(5.0):{:\\nloopBreak% = 0\\nwhile False:{:\\ns1 = saveChr(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 -= ( i0 * ( i2 - int(4.0) ) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [0, 1], [1], [0, 3, 0], [1], [], [3, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (in0 + s0)\\ni1 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [2, 2, 0, 0, 0, 0], [2, 2], [1, 1, 1, 0], [0], [0, 0, 0], [], [], [2, 3], [], [0, 2, 0], [], [0], [1, 0], [], [0], [1], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1], [6, 7, 8, 3, 0, 0, 6, 7, 6, 2, 9, 5, 8, 6, 2, 4, 0, 9, 9, 4, 6], [1, 0, 0, 0, 2, 1, 0, 1, 2, 1, 0, 1, 0], [1, 1, 0], [2, 3, 2, 2, 2, 0, 2, 2, 2, 3, 1, 3, 3, 0, 2, 2, 1, 1, 2, 1, 1, 3, 3, 1, 3, 3, 2, 2, 3, 3, 0, 0, 3, 0, 2, 0, 2, 2, 1, 2, 0, 0, 3, 2, 0, 1, 2, 1, 2, 2, 1, 1, 2, 2, 3, 0, 1, 2, 1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [2, 2, 3, 2, 0, 4, 2, 1, 3, 2, 0, 2, 4], [1, 2, 0, 2, 0, 2, 0, 2, 1, 0, 2, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [4, 1, 0, 4, 0, 5], [], [0], [0, 0, 0, 4, 0, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 1, 0, 21, 21, 12, 2, 60, 23, 13, 13, 12, 6, 0, 0, 7, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nwhile in1 in s1:{:\\ni1 -= ( abs(divInt(divInt(divInt(i0,( divInt(( abs(int(6.0)) * len(s0) ),abs(i0)) + ( ( int(7.0) * int(8.0) ) + mod(int(3.0),int(006.0)) ) )),min(saveOrd(in1.capitalize()), int(7.0))),abs(max(( mod(len(s0),abs(i0)) * i2 ), min(i1, mod(i0,( divInt(int(6.0),( i1 + i2 )) * abs(mod(i1,int(2.0))) ))))))) - ( int(958.0) + divInt(divInt(int(6.0),int(2.0)),( ( saveOrd(in2) * i0 ) - int(4.0) )) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += mod(int(099.0),int(46.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [1], [0], [], [], [], [], [2, 0], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0[i2:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 1], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(21.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [3], [3], [1], [0], [], [], [], [], [], [0, 1], [9, 8], [2, 1], [0], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [], [], [], [], [2], [5, 2], [1, 1], [0, 0], [], [], [], [], [0], [1, 0, 1], [5, 8, 5], [0, 0], [], [0, 1, 1, 0], [1], [], [], [0], [2, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 3, 3, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i0 != int(5.0):{:\\nb2 = int(85.0) == i0\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [2, 0, 0, 2], [0], [0, 2, 2, 1, 0, 0], [0, 0], [3], [2, 0], [], [2, 3, 4, 3], [], [], [3, 0, 4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (in0 + saveChr(i2))\\nin1 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 0], [3], [1], [0], [], [0], [], [], [], [0, 1], [7, 4], [0], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\ge int(74.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1, 1], [2, 0, 0, 2, 1, 0, 0], [1], [2, 2, 2, 0, 3, 1, 0, 2, 2, 3, 2, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0], [1, 3], [2, 0, 2], [0, 1, 1, 1], [2, 4], [], [], [4, 4, 0, 4, 0], [3, 3, 0], [5, 2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 7, 1, 16, 6, 2, 3, 4, 2, 0, 0, 5, 3, 2, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= divInt(mod(mod(i0,max(int(1.0), i0)),mod(( len(s2.strip().strip(getCharFromString(in1, ( i2 + i1 )))) * int(1.0) ),i0)),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [], [], [0, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 1], [0, 5], [0, 2, 2, 1, 2], [1, 1], [0, 2, 0, 2, 1, 0, 0], [1, 1], [4], [1, 1, 0], [0, 0], [0, 5, 4, 4, 3, 0, 4], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 5, 1, 7, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 == divInt(i2,divInt(int(0.0),i2))\\ni1 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [2], [1], [0], [], [], [], [], [], [1, 1, 0, 1, 1], [0, 5, 4, 9, 5], [1, 1], [], [3, 1, 2, 0, 1, 2, 3, 0, 1], [0, 1], [1, 4, 4], [0], [1], [0, 1], [], [], [4, 4, 0, 0], [1, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 9, 2, 2, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = max(int(0.0), ( i1 + int(5.0) )) == mod(saveOrd(saveChr(i1)),int(49.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 0], [], [0, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 2], [], [], [3, 1, 1], [], [2], [], [], [0], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(saveChr(abs(int(2.0))), int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [6, 0], [0, 1, 1, 0], [0], [2, 1, 3, 3, 0, 2, 1, 2, 0, 0], [1, 1, 1], [2, 1], [0], [1, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 10, 3, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(int(6.0),abs(max(i1, mod(int(0.0),divInt(i1,i0)))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [2, 0], [], [], [], [], [1, 3], [4], [0, 1, 0], [0], [], [3, 0], [1], [0], [], [], [], [1, 1, 2], [], [2, 0, 1, 0], [1], [], [], [1, 1, 0, 0, 0, 0, 1, 0], [4, 3, 3], [], [], [3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (in0 + in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [5, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [1], [0], [], [0], [], [], [1], [0], [1, 0], [0], [], [1], [], [1], [0], [1, 1, 1, 1, 1], [7, 7, 0, 9, 6], [1, 2, 0, 2, 1], [], [1, 1, 0, 2, 0, 2, 3, 0, 2, 2, 1, 2, 1, 2, 1, 3, 0, 3, 1, 1], [1, 0, 1, 0, 0, 1, 0], [2, 1, 2], [2, 2, 1, 0], [1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(7.0) \\l int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [1, 0, 1], [6, 3, 0], [2, 0, 2, 1, 0], [], [3, 2, 1, 0, 0, 2, 3, 1, 0, 0], [0, 1], [1, 1], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 10, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(( int(6.0) * i2 ), i0) == mod(max(int(30.0), i2),i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [0], [0, 0], [0], [0], [], [], [0, 2], [2], [2, 0], [], [5], [1], [], [0], [], [], [], [2, 0, 2, 1, 0], [], [0], [], [], [], [], [2], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveChr(i2).endswith(s2)\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 1, 1], [], [], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [1], [3, 0, 1, 1], [], [2], [2], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 2, 1, 1, 1, 2, 0, 2, 0, 1], [2, 1, 0, 1], [2, 1, 2, 1, 0, 0, 2], [0], [0, 0, 0], [], [], [1, 2, 2], [3, 1, 1], [1, 2, 1, 0, 0, 0, 2], [0, 0, 0], [2, 4], [2, 0], [], [], [0, 0, 1], [1, 1, 1, 1, 0, 1], [0, 2, 0, 5, 1, 8], [2, 2, 1, 0, 1, 1, 0, 2, 0, 1, 0, 1, 1], [0, 0], [0, 0, 1, 2, 0, 2, 2, 1, 0, 1, 0, 2, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0], [], [0, 2, 1], [1], [0, 0, 4, 0, 2, 0, 5], [1, 1], [0], [0, 0, 4, 2, 0, 4, 1, 1, 2, 4, 1], [1, 0, 2], [0], [0, 1], [0, 0], [5], [], [], [18]], "fitness": 31, "mapping_values": [1, 5, 5, 1, 4, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 6, 2, 10, 3, 0, 2, 1, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\ni2 = i2\\nloopBreak% = 0\\nwhile i1 \\ge int(0.0):{:\\nin1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = mod(i1,( ( int(2.0) + i1 ) * int(0.0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0, 1, 2], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [1, 1], [8, 4], [2], [], [2, 1, 3, 1, 0], [1], [0], [], [1], [0], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [6, 8], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(68.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [2], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = getCharFromString(saveChr(int(0.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [3], [1], [0], [], [], [], [], [], [0, 1], [9, 6], [0, 1, 2, 1], [1], [3, 2, 0, 0, 0, 1], [0], [0, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 6, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(( i0 - i1 ), i2) \\ge int(96.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [0], [], [], [1, 2, 2], [4], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [1, 5, 2], [0, 2], [], [2, 3, 1, 0, 3, 1, 0, 3], [1], [0, 0, 3], [], [0], [], [1], [], [1], [], [], [], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = divInt(min(int(1.0), i0),min(int(5.0), i2)) \\le len(\"\"U\"\")\\nb2 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [9, 7, 2], [1, 2, 1], [1, 0], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i2\\ni1 = int(972.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 1, 0], [], [0], [], [], [0, 2, 0], [5], [0, 1], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0, 0], [0, 1], [0, 0, 3, 2, 1, 2, 2, 2, 1, 1, 0, 2, 0, 0, 0, 2, 3, 0], [1, 0, 1, 0, 1, 1], [2, 0], [2, 0, 2], [1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\ni2 *= i0\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 0, 1, 1], [0, 1, 2, 0, 0, 1], [0], [0, 0, 1, 0, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [2], [1, 0, 0], [0], [], [1, 0], [], [0], [], [1], [5], [0, 0, 2, 2], [1], [2, 3, 0, 0], [1], [3], [0], [0], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = divInt(len(s2),i0) == i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 2, 2], [1, 2], [1], [0], [0], [], [], [2], [5, 3], [1, 2, 1], [0, 0], [1], [], [], [], [0], [0, 1, 1, 0, 0], [2, 4, 7, 1, 6], [2, 0], [0], [0, 1, 1, 1], [], [], [], [], [2, 0, 2, 4], [], [], [4, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 0], [], [0], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [1, 1], [6, 0], [1, 1, 1, 1], [0], [2, 3, 2, 0, 1, 0, 3, 2, 0, 1], [0, 1, 0], [4, 3], [1, 1], [1], [2, 1, 4], [], [], [2, 3, 2, 0, 0, 0], [], [], [0, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 10, 3, 2, 2, 1, 3, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = ( saveOrd((s2[mod(i1,int(6.0)):] + s1)[i1:len(in1)]) - ( i1 - int(0.0) ) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [1, 2, 0, 1], [2], [1, 1, 2], [], [], [], [], [], [4], [1], [0], [], [], [], [], [], [], [], [0, 0, 2, 1, 0, 2], [1, 0], [0, 0, 0, 0], [], [], [1], [], [0, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [3], [1], [0], [], [], [], [], [], [1], [6], [2, 0, 2, 1, 1], [], [3, 0, 1, 0, 0, 2, 3, 0, 2, 0], [0, 1], [1, 1], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(i2, int(6.0)) \\ge i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [2], [], [], [], [], [], [5], [1], [0], [], [], [], [], [0], [1, 1, 0], [5, 8, 5], [0], [], [2, 1, 1, 0], [1], [], [], [0], [2, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 4, 1, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif divInt(int(5.0),int(8.0)) != i0:{:\\ns2 = s0\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [1], [], [1, 1], [4, 5], [1], [], [1, 1, 1], [], [], [], [], [3, 0, 2], [1], [], [1, 0, 2, 2, 0, 3, 1, 2, 0], [2, 0], [0], [2, 1, 2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [1, 1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [1], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [8, 0, 3, 3, 7, 5, 1, 4, 5, 5, 2, 9, 4, 4, 5, 7, 6, 4, 9, 1, 3, 1], [0, 0, 1], [], [3, 3, 1, 2, 2, 1, 2, 3, 2, 2, 1, 1, 3, 3, 2, 0, 2, 1, 2, 2, 2, 2, 1, 3, 0, 1, 1, 2, 1, 1, 3, 1, 1], [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [4, 1, 2, 1, 2, 3, 3], [2, 0, 0, 0, 0, 0, 1, 2], [1, 0, 0, 0], [1, 4, 2], [1], [], [0, 4, 0, 1], [0], [], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 22, 22, 2, 0, 33, 12, 7, 8, 4, 2, 1, 0, 4, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s1) \\g max(int(8.0), mod(( int(0337514.0) * ( abs(( ( int(5.0) + int(5.0) ) + max(abs(divInt(i0,divInt(int(2.0),divInt(( ( ( int(9.0) + len(getCharFromString(in1, i0)) ) + int(4.0) ) + int(4.0) ),( int(5.0) - int(7.0) ))))), len(\"\"R\"\")) )) * int(6.0) ) ),int(49131.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 5], [1], [], [0, 1, 1], [], [], [], [], [5, 0, 2], [1], [], [3, 4, 1, 0, 1, 3, 0, 2, 0], [2, 0], [0], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 4, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (\"\"R\"\".capitalize() + s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 2, 0], [2, 2], [1], [], [0], [], [], [3, 3], [], [0, 0], [], [], [0, 0], [], [], [], [1], [5], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [1, 0], [3], [1, 0], [0], [], [0], [], [], [], [1], [0], [2], [], [0, 1, 3, 0], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i2 \\ge int(0.0):{:\\nb1 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [2], [1, 2], [], [], [], [], [0], [], [0, 0], [], [], [2, 0], [], [], [], [1, 1], [9, 5], [0], [0], [3, 1, 1], [], [0], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 0, 2, 2, 1, 1, 3, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not b0:{:\\ni0 = min(int(9.0), int(5.0))\\nin0 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [], [], [], [], [], [], [], [1, 1], [9, 4], [1, 2], [0], [1, 1, 1], [1], [], [], [1], [1, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [2], [0, 1], [0], [], [2], [], [], [], [1, 0, 1], [8, 9, 7], [2], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not int(8.0) == i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 1], [3, 5, 3, 5], [2], [0], [3, 3, 1, 2, 1, 1], [1], [1, 3], [], [1], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(len(s0), int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 0, 0, 0, 1], [1, 1, 3, 2, 9, 3, 5, 9, 6], [2, 0, 2], [0], [2, 1, 2, 3, 1, 1, 0], [1, 0], [1], [0], [0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 2, 1, 7, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(int(1.0),( max(int(1.0), int(3293596.0)) + i0 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [6, 0], [0, 1, 0, 0, 1], [0], [2, 1, 3, 3, 0, 2, 1, 2, 0, 0, 0], [1, 1, 1], [0, 1], [0], [1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 1, 11, 3, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(int(6.0),min(max(i1, mod(int(0.0),mod(i0,i0))), i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [3, 0], [], [2], [1, 1, 2, 1, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 0, 1], [], [1, 2, 1, 1], [], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [9, 9], [1, 0, 2, 0, 1, 1, 1], [0, 1, 0], [0, 2, 0, 0, 2, 1, 3, 0, 1], [0, 1], [4], [2, 1, 1], [0], [0, 4], [], [], [4, 4, 4, 0, 0], [1, 2, 1, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 7, 3, 9, 2, 1, 2, 1, 1, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\ns0 = saveChr(( i2 * i0 ))\\ni1 -= divInt(int(9.0),saveOrd(saveChr(i1).capitalize()))\\ni1 = int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 2], [0], [0, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [3], [1], [], [1], [], [1, 1, 1, 1], [8, 5, 4, 1], [0, 2, 0], [1], [1, 1, 0, 2, 3, 1, 1, 0], [0, 1], [1], [2, 0], [], [5, 2], [1], [], [1, 2, 4], [1], [], [0], [3], [], [], [], [6]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 1, 8, 1, 1, 2, 0, 0, 1, 0, 3, 1, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\"#\"\" != saveChr(int(8.0))[int(5.0):i0]\\ni2 *= ( max(int(4.0), int(1.0)) + i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2], [1], [0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [], [0], [], [5], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [1], [0], [1, 1], [4, 5], [1], [], [0, 1, 1], [], [], [], [], [3, 0, 2], [1], [], [0, 4, 2, 2, 0, 3, 1, 2, 0], [2, 0], [0], [2, 1, 2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [0, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [4], [1], [], [1], [], [0, 1, 1], [4, 5, 4], [0, 2, 0], [0], [2, 1, 0, 2, 3, 2, 1, 0], [1, 0], [4], [0, 1], [0], [0, 2], [1], [], [1, 0, 4], [2], [], [], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 3, 1, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\",\"\".startswith(s0)\\ni0 = divInt(int(45.0),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [8, 6, 4], [1], [0], [2, 1, 3, 2, 1, 1], [1, 0], [3], [2], [0], [0], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 6, 2, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = divInt(int(8.0),len(saveChr(( int(6.0) * int(4.0) ))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [2, 0], [1], [0], [], [], [0], [], [5, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [1], [0], [3, 1], [], [2], [0], [], [0, 4, 0, 1], [], [0], [4, 4, 0, 0], [3, 2], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 4, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1.capitalize().strip():{:\\ns0 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 2], [5], [0, 1], [0], [], [2, 0], [], [], [], [], [], [2, 2, 1], [], [2, 0, 0, 0], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not divInt(i2,i2) != i1\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 3, 0, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [2, 1], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [1], [3], [], [4], [2], [], [1, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = saveChr(saveOrd(s2)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [3], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 4, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 10, 7, 3, 7, 6, 1, 1, 15, 4, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in1):] not in saveChr(mod(int(0.0),i0))[mod(i2,int(7.0)):divInt(int(4.0),saveOrd(saveChr(i0)[i0:divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( len((\"\"R\"\" + s0.lstrip()).rstrip()) + mod(min(i1, ( max(int(6.0), i2) * int(1.0) )),int(7.0)) ) ), i0),i0))]))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [1, 2, 0, 0], [1], [2, 2, 3, 0, 1, 2, 0, 0], [1, 1, 1], [2, 2], [1], [1, 1, 1], [1], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 8, 3, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= mod(mod(abs(i2),int(9.0)),mod(i0,i0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [1], [1, 2], [], [0], [], [], [0], [], [0], [], [], [0], [], [], [0], [1], [9], [0, 1], [0], [3, 0], [], [2], [], [], [5, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 1, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif b0:{:\\ni0 = abs(i1)\\nin2 = s1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 1, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1], [2, 0, 0, 0, 2, 0, 1, 2, 0, 2], [1], [1, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 2, 2, 2, 0, 0, 3, 2, 2, 3, 1, 2, 1, 3, 1, 1, 2, 0, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0, 3, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 2, 4, 0, 2, 1], [2, 0, 2, 1, 2, 1, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(40.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s0[len(in2):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [1], [0], [0], [], [0], [], [], [], [1, 1, 1], [1], [], [], [3, 3, 1], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [0], [0], [0], [], [1], [], [1], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [5, 5], [], [], [4, 0, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [0], [0, 0], [], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [1], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 1], [8, 4, 6, 4, 7, 2, 6], [1, 1, 0], [0], [2, 1, 2, 1, 2, 0, 0], [1, 1, 1], [3], [], [1, 1, 1], [0, 1], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 3, 1, 7, 3, 0, 0, 3, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = mod(int(8.0),mod(int(464726.0),mod(i1,i0)))\\ns0 = s1.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 1], [1], [0, 2], [], [0], [], [], [2], [1], [0, 2, 1], [0], [0], [2], [], [], [0], [], [], [1, 2], [], [3, 0, 3, 0], [], [3, 4], [], [], [1, 1, 4, 5, 3, 2], [], [], [2, 2, 0, 0, 0, 0, 1], [], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not s1[:len(s1)][:i1] in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [2, 5], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2[:i0].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [1], [], [0, 1, 0, 0, 1, 0, 1], [4, 5, 8, 6, 1, 5, 7], [1], [], [0, 3, 1, 2, 1, 1], [1], [1], [], [1], [3, 0, 2], [1], [], [2, 4, 2, 0, 0, 3, 1, 2, 0], [1, 0], [0], [2, 1, 2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 1, 0, 6, 1, 1, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = saveChr(i1)[max(int(45.0), mod(int(861.0),int(57.0))):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [0, 3], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 1], [1], [1, 2], [], [0], [], [], [2], [1], [2, 2, 1], [0], [0], [2], [], [], [0], [], [], [1, 2], [1], [3, 0, 3, 0], [], [3, 4], [1], [], [1, 1, 4, 5, 3, 2], [], [], [2, 2, 0, 0, 0, 0, 1], [], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 1, 0, 2, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(s1[:i2][:saveOrd(s1)])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [9, 0, 1], [1, 2, 1], [1, 0], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i2\\ni1 = int(901.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 0, 1], [1, 2], [0, 1], [], [0], [], [], [2], [4, 3, 5], [1, 1, 1], [0, 0, 0], [1], [], [], [], [0], [1, 1, 1, 0, 1, 0, 1], [2, 4, 7, 9, 7, 4, 3], [2, 1, 1, 1], [1], [0, 1, 1, 1, 2, 3, 1, 3, 3, 1, 0, 1], [1], [1, 4, 3], [1, 1], [0], [1, 2], [], [], [4, 0, 4, 0, 0], [2, 2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 1, 7, 7, 3, 1, 11, 1, 3, 1, 1, 2, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i2 \\le int(2.0):{:\\nloopBreak% = 0\\nwhile int(4.0) \\ge int(7.0):{:\\nb2 = divInt(max(int(97.0), saveOrd(s1.capitalize())),len(s2.capitalize())) != int(43.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0, 0, 1], [9, 9, 0, 3, 7, 0], [1, 2, 2], [1], [0, 2, 1, 2, 1, 1, 3, 3, 0, 0, 0], [1, 0], [1, 2], [0], [1], [1, 4], [], [], [2, 2, 0], [], [], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 3, 0, 10, 2, 2, 1, 1, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1[i1:mod(int(9.0),( int(90.0) + int(370.0) ))][max(abs(i2), i2):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [], [0, 2, 0], [], [4], [2, 0], [1], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [], [], [], [4, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not saveChr(int(0.0)).startswith(saveChr(i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [0], [], [], [0, 0], [3], [0, 1], [0], [], [1], [], [1], [], [0, 0, 1], [4, 1, 2], [0, 1], [1], [0, 1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\nb0 = i0 \\ge int(412.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [0, 1], [4, 9], [1, 2], [1], [3, 2, 0, 1], [0], [4], [2, 0], [], [3, 2, 0], [], [], [3, 0, 4, 3, 4, 0, 4, 0], [3, 2, 1], [5], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 1, 1, 2, 0, 3, 0, 0, 8, 3, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= saveOrd((in0 + (s2.capitalize() + saveChr(( i2 + int(49.0) ))).strip(s0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 9], [2, 1, 0], [1, 1], [1, 1], [], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(2.0)\\ni1 += int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1, 1, 0, 0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 9, 1, 6, 3, 1, 1, 1, 7, 8, 1, 2, 5, 9, 6, 7, 8], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 0, 1, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 3, 0, 2, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 3, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 0, 1, 1, 3, 2, 0, 0, 3, 2, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0], [3, 3, 1, 0, 4, 0, 1, 2, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 15, 0, 60, 18, 11, 10, 8, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(getCharFromString(saveChr(i0)[int(2.0):max(mod(i2,int(9.0)), mod(int(1.0),min(i2, ( mod(( int(6.0) + int(3.0) ),divInt(saveOrd(s2[i0:( ( i0 + divInt(int(1.0),i1) ) * ( min(i1, i2) - ( int(1.0) + i0 ) ) )]),max(divInt(int(1.0),abs(int(7.0))), max(i0, ( ( ( int(8.0) * int(1.0) ) - divInt(int(2.0),i2) ) - i2 ))))) * int(5.0) ))))], int(9.0)))] not in (\"\"R\"\" + s0.rstrip())[:max(divInt(i0,i1), max(( i1 + int(67.0) ), int(8.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 0], [1], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 1], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0, 3], [], [0], [], [], [0], [1, 0], [], [], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1], [8, 9, 8, 1, 3, 0, 7, 6, 9, 4], [0, 0, 1, 1, 0], [0], [2, 1, 2, 2, 2, 3, 0, 2, 0, 2, 1, 0, 0, 3, 2, 1, 1], [1, 0, 0, 1, 0, 0, 1], [0, 4], [1, 2, 2, 0], [1, 0, 0], [0], [], [], [0], [], [1, 0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 5, 1, 17, 7, 2, 4, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(int(898.0),( ( divInt(min(i0, ( i1 - ( int(13.0) * i1 ) )),i0) * saveOrd(s0) ) + divInt(int(0.0),int(7694.0)) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1], [], [0], [], [], [0], [1], [0, 1], [0], [], [1], [], [1], [], [1, 1], [9, 5], [2], [0], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile False:{:\\ni2 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [2], [1], [0], [], [], [], [], [], [0, 0, 1, 0, 0, 1], [1, 8, 8, 8, 1, 2], [2, 0, 2, 1, 0], [], [3, 1, 1, 0, 3, 2, 3, 2, 0, 0], [1, 1], [2, 1], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = abs(int(188.0)) == int(812.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [], [], [0, 2, 1, 2], [1, 0], [0, 0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i2\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [1], [], [1, 2, 3, 0], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\g ( len(s1) - i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [1, 3], [], [0, 2, 0], [], [4], [3, 0], [1], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [2], [], [], [4, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [], [], [0, 0], [1], [0, 0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = i0 \\ge i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [1], [2, 0], [], [0], [], [], [3], [], [0, 2], [], [4], [1], [], [0], [0], [], [], [1], [], [0], [], [], [], [], [1, 5, 0], [], [], [0, 0, 4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif True:{:\\ns1 = in2\\nres0 = s0.startswith(saveChr(i1))\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 4], [2, 0, 0, 0], [1], [2, 1, 0, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(2.0),i0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2, 2], [1], [2, 0, 0], [0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i2 + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 1, 2, 1], [0, 0], [3, 0, 2, 1, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 2, 5, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i1)\\ni2 = ( int(3.0) + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [], [], [], [], [], [3], [1], [0], [], [], [], [], [0], [0, 1, 0, 1], [4, 8, 4, 4], [0, 2, 1, 2, 0, 2], [1], [2, 3, 0, 0, 0, 1, 0, 0, 0], [1], [1, 0], [1], [1], [], [], [], [1], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 2, 5, 1, 7, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(max(i0, i2),i1) \\ge int(48.0):{:\\ni2 -= i0\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [], [0, 0], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [2, 5], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2[:i0].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 2], [1, 0], [3, 0], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in2)\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 8], [1], [0], [1], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(08.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [], [], [1], [], [], [], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:int(5.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0, 0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 5, 7, 7, 2, 2, 8], [0, 0, 2, 1, 1], [], [1, 3, 2, 2, 2, 1, 3, 1, 0, 0, 3, 1, 2, 3, 2, 3, 3, 3, 2, 0, 0, 1, 2, 2, 2, 0, 1], [1, 0, 1, 1, 0, 0, 0, 0], [2, 1, 4, 1, 0, 4, 3], [1, 0, 2, 1, 1], [1, 0, 0], [5, 5, 3, 4], [], [], [3, 0, 2, 0, 0, 0, 1], [], [], [1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 12, 3, 3, 1, 2, 2, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g abs(mod(( divInt(int(15.0),max(int(7.0), i0)) - i0 ),saveOrd((in2 + in2[:int(7.0)]))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1], [8, 2, 2, 9], [0, 2], [0], [2, 1, 3, 2, 1, 1], [1, 1], [4], [], [1, 0], [1], [], [], [2, 0], [2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 6, 2, 1, 0, 2, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(int(8.0),saveOrd(s1[divInt(int(22.0),int(9.0)):]))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 2], [1], [3, 0, 1], [1], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += min(i2, int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [3, 0], [], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 2], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [4, 8, 3, 9, 1, 5, 5, 8, 9, 0, 6, 3, 1], [1], [], [2, 2, 1, 1, 0, 3, 1], [0, 0], [2], [1, 0], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 1, 0, 7, 2, 1, 2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( ( int(4.0) - int(8.0) ) + i1 ) \\g abs(int(39155890631.0))\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [0], [], [], [], [], [5], [1], [0], [], [], [], [], [0], [1, 0, 1], [5, 8, 7], [0], [1], [2, 1, 1, 0], [1], [], [2], [0], [5, 0, 1], [1], [0], [0, 1], [], [], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 1, 0, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\ni0 *= divInt(int(5.0),int(87.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [], [], [], [0, 3], [5, 1], [1, 1], [0, 0], [], [], [], [], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 6, 2, 0, 0, 4, 3, 0, 8, 4, 4], [0, 0, 0, 0, 0, 0, 1, 2], [1], [0, 2, 2, 2, 1, 3, 2, 1, 1, 1, 0, 0, 2, 0, 2, 0, 3, 2, 2, 0, 1, 0, 3, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 1, 3], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 7, 0, 23, 8, 3, 5, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 != ( ( mod(int(0.0),abs(( int(62.0) * int(00.0) ))) - int(430.0) ) * i0 )\\nres0 = i0 \\g ( i0 - ( i0 * max(divInt(mod(i0,int(8.0)),i1), len(in1)) ) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 9, 5, 8, 1], [2, 0, 0, 0, 2, 1, 0, 2, 0], [1], [1, 2, 0, 1, 2, 0, 2, 1, 1, 3, 1, 2, 2, 2, 1, 0, 1, 2, 2, 1, 2, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 2, 4, 0], [2, 2, 2, 1, 2, 0, 2, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 1, 0, 0, 1, 3, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = saveChr(int(4.0))[:divInt(i2,int(0.0))]\\ns1 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0, 2], [], [0], [], [], [1], [], [0], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 6], [2], [1], [1, 0], [], [], [1], [], [4, 5], [], [], [4, 4, 0], [2, 2, 1, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 2, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2.capitalize().capitalize()\\ni2 -= int(06.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0], [9, 9, 0, 3], [1, 2, 2, 2], [1], [2, 0, 1, 2, 0, 1, 3, 3, 0, 0, 0], [1, 0], [1, 2], [1], [1], [1, 4], [], [], [2, 2, 0], [], [], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 0, 10, 2, 2, 1, 1, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1[mod(i1,int(9.0)):( i2 - int(9.0) )][:max(abs(i2), i2)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 11, 0, 4, 0, 0, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(getCharFromString(in0[:i0], int(0.0))[max(int(7.0), i1):int(5.0)][i2:int(7.0)])] not in saveChr(saveOrd((\"\"R\"\" + s0.rstrip())))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [0, 1, 1], [1, 2, 9], [2], [], [3, 0, 2, 1, 3, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 3, 2, 1, 0, 4, 0, 1, 0, 1, 4, 4, 2, 0, 2, 2, 2, 0, 4], [2], [], [1, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 6, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = max(i2, ( int(12.0) * len(s1) )) \\g int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 5], [0, 2, 2], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 5, 8, 1], [2, 0, 0, 0, 2, 1, 2, 2, 0], [1], [1, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 2, 2, 2, 3, 0, 1, 2, 2, 1, 0, 2, 1, 3, 1, 1, 2, 1, 1, 0, 1, 2, 2, 1, 2, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 2, 4, 0], [2, 0, 2, 1, 2, 0, 2, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1], [], [], [2, 4, 0], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 6, 1, 30, 12, 3, 4, 9, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(4.0)\\ns1 = saveChr(divInt(i0,int(0.0)))[( i0 + divInt(mod(int(0.0),mod(max(divInt(divInt(divInt(abs(i0),int(7.0)),divInt(( int(3.0) * i2 ),( int(6.0) - saveOrd(s1) ))),int(1.0)), int(4.0)),divInt(int(3.0),int(0.0)))),i1) ):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 0, 0, 1, 1], [0, 1, 2, 0, 0, 1], [0], [0, 0, 1, 0, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [4], [1, 0, 0], [0], [], [1, 0], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [5], [0, 0, 2, 2], [1], [0, 1, 0, 0], [], [], [0], [], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\le int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 0, 1, 1, 1, 0], [1], [0, 2, 0, 2, 0, 3, 0, 0, 0, 0, 2, 0, 0], [0, 1, 0], [1, 0], [1, 1, 1], [0], [3], [], [0], [2, 4], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 9, 2, 1, 2, 1, 1, 0, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in saveChr(i1)[:( i0 - divInt(i1,max(i1, i0)) )]:{:\\ni1 -= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 2, 0, 0, 1], [0], [0, 0, 1, 2, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [4], [1, 0, 0], [0], [], [1, 0], [], [0], [], [1, 0, 0, 1], [8, 8, 9, 0], [0, 0, 2, 1], [1], [2, 1, 3, 0, 1, 3, 2, 3, 3, 0, 0], [0, 1, 1], [0, 3, 4], [0], [0, 0], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 4, 4, 1, 0, 6, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( int(8.0) + min(i0, int(890.0)) ) \\le len(s2)\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\l int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [0, 9, 6, 9, 5, 6], [2, 2, 0, 0, 2, 0, 1, 2, 1, 1], [], [2, 3, 2, 1, 1, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 2, 2, 3, 0, 2, 2, 3, 0, 0, 1, 3, 2, 3, 1, 0, 0, 0, 3, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 3, 2, 1, 3, 2, 3, 4, 2, 1, 0, 1], [2, 0, 0, 0, 0], [0, 1, 0, 1], [5, 5, 1, 2], [1, 1], [], [3, 0, 0, 4, 4, 1, 2, 0, 4, 2, 0, 2, 4, 1], [0, 3, 0, 2, 1], [0], [2, 0, 1], [1, 1], [], [17, 0], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in2 + s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [2], [0, 1], [0], [], [2], [], [0], [], [0, 1], [2, 3], [], [], [3, 1], [], [4], [], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not saveOrd(s0) == int(23.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [0, 1, 1], [3, 8, 8], [2, 1], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(38.0) \\le i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 0, 3, 1], [], [0], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\nin0 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [4], [0], [0], [], [1], [], [0], [], [1, 0, 0, 1], [5, 4, 7, 0, 3, 0, 4, 8, 9, 6], [1, 1, 0, 1, 1, 0], [], [2, 3, 3, 0, 0, 2, 2, 1, 3, 0, 3, 0, 2, 3, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 0], [1, 0, 1, 1, 1, 0], [3, 0, 3, 3, 4, 1], [0], [1, 1, 0, 0], [3, 0, 1, 4], [1, 1, 1], [], [2, 0, 0, 2, 3, 3, 3, 3, 0, 1, 2, 4, 4, 0, 2, 1], [3, 1], [1, 3], [0, 0, 2], [0, 3, 0], [10, 4], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0, 0], [0], [3, 0, 1], [0], [3], [2, 2], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 1], [0], [2, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 0], [0], [3, 2, 3, 1, 3, 0], [0], [2, 2, 2], [1, 2], [], [0, 4, 0, 1], [], [0], [4, 4, 0, 0], [3, 2], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in1.capitalize().rstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 0, 7, 7, 1, 2, 8, 3], [0, 1, 2, 1, 2, 2], [], [1, 2, 3, 1, 2, 2, 2, 0, 1, 3, 2, 2, 0, 0, 1, 1, 2, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0], [2, 0], [1, 1, 2, 0, 1], [0, 0], [0, 1, 2, 0], [], [], [0, 2, 2, 4, 0], [0], [], [1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 6, 0, 20, 7, 2, 5, 2, 4, 0, 0, 5, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\ns2 = getCharFromString(s0, int(0107.0))[divInt(abs(int(7.0)),( ( ( i0 - int(1.0) ) - min(divInt(( i1 * i2 ),int(28.0)), int(3.0)) ) + ( i1 - i2 ) )):][:i2]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [0], [2], [0], [4], [], [], [], [], [0, 1, 0, 1], [8, 5, 5, 7], [1, 1], [], [3, 1, 2, 0, 2, 2, 3, 0, 3], [0, 1], [2, 4, 4], [0], [0], [4, 2], [], [], [4, 4, 0, 0], [1, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 4, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveChr(abs(int(85.0))).startswith(in1.lstrip(s2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [1], [3, 0, 1, 1], [], [2], [2], [], [2, 3], [], [], [2, 0], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 1, 1, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i1)\\ns2 = in0[int(4.0):int(1.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [5, 1], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(51.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [2], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [2], [1], [0], [], [], [], [], [], [1], [3], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(3.0) == i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1], [1], [1, 1, 3], [], [1, 4], [1], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 3, 2], [0, 0], [], [1, 2, 3, 3, 3, 1, 3, 0, 0], [0], [4, 2, 3], [2], [], [1, 5, 2, 3, 5], [], [], [2, 3, 2, 0, 2, 0, 0, 0], [], [], [1, 2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 6, 1, 3, 1, 0, 5, 0, 0, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = (in2[int(1.0):] + s2[( saveOrd(in0) * abs(len(in2)) ):])[:int(3.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [], [1], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [9, 5], [2], [0], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [1], [1], [0], [], [], [], [], [], [1], [1], [2], [], [3, 3, 1, 0], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 1, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s1) \\g saveOrd(getCharFromString(saveChr(int(1.0)), i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [1], [1], [0], [], [], [], [], [], [1, 0, 1], [3, 2, 9], [2, 0, 2, 1, 0, 0, 2], [], [3, 2, 0, 0, 2, 2, 3, 0, 0, 0, 1, 2, 1, 0, 0, 1], [0, 1, 0, 0], [0, 1, 1], [2, 2, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 6, 0, 14, 4, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = min(( i2 * i0 ), mod(( max(i2, i1) * i0 ),int(3.0))) \\g ( int(29.0) - i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 5], [0, 0], [1], [2, 0, 1], [0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( i0 * int(25.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 2, 2], [0, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(5.0)\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [], [], [], [], [], [3], [1], [0], [], [], [], [], [0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [4, 4, 5, 4, 7, 6, 2, 3, 6, 6, 5], [2, 2, 1, 2, 1, 2], [1], [1, 3, 0, 1, 3, 2, 3, 0, 0, 3, 3, 3, 1, 1], [1], [1, 0, 2, 3, 0, 3], [1], [1], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 3, 3, 4, 1, 10, 1, 4, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) \\ge max(i2, int(45.0)):{:\\ni2 -= min(mod(abs(i1),i2), len(s1))\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1], [6, 1], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(6.0) \\l int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [2], [0, 0, 0, 0, 1, 0], [0], [], [3, 3, 2, 1, 1], [0, 1], [1, 1], [], [0, 1], [2, 2], [0, 0], [], [2, 3, 2, 0, 1, 0, 3, 2, 0, 1], [0, 1], [3], [0], [1], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 6, 1, 0, 5, 2, 2, 0, 2, 2, 2, 0, 6, 2, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( ( not False and ( len(in0) + mod(i0,int(22.0)) ) == i0 ) or False )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [0], [], [], [], [1], [], [2], [], [1], [], [], [], [], [], [], [1, 0, 1, 2, 0, 1, 1, 1, 0], [1], [0, 2, 0, 2, 3, 3, 0, 0, 0, 0, 2, 0, 0, 2, 3, 0], [0, 1, 0, 1], [1, 0, 3], [0, 1, 1], [0, 1], [0, 2, 2], [], [0], [2, 4, 4, 0, 4, 0], [1, 0, 1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 9, 0, 16, 4, 3, 2, 2, 3, 0, 1, 6, 3, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in saveChr(i1)[:( i0 + divInt(max(min(i1, i2), i0),i1) )]:{:\\nb1 = getCharFromString(s2, ( i1 - i1 )) not in saveChr(mod(len(s2),i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [], [], [1], [], [], [], [], [5], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [3, 8], [1], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(38.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3], [], [4], [], [], [4, 2], [], [], [4, 0, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s2.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1, 1], [6, 0], [0, 1, 1, 0], [0], [2, 1, 3, 3, 0, 2, 1, 2, 0, 0], [1, 1, 1], [2, 1], [0], [1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 10, 3, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(int(6.0),abs(max(i1, divInt(int(0.0),mod(i1,i0)))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [2, 0, 2], [], [0, 0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [5, 6, 8, 9, 7, 0, 1, 2, 6, 7], [2, 1, 0, 0, 1], [], [0, 1, 1, 0, 0, 2, 0, 0, 3, 3, 3, 1, 1], [1], [2, 2], [], [0], [2, 3, 2, 3, 1, 0, 2, 0], [], [], [4, 2, 0, 2, 3, 2, 0, 0, 2, 3, 3, 4, 4, 0, 3, 0, 2, 3, 4, 2], [2, 3, 2, 1], [2], [0, 1, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 8, 1, 0, 0, 1, 5, 0, 0, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[i2:int(5.0)].capitalize()\\nb0 = int(68.0) == i1\\ns2 = (in0[:i0] + s1)[:divInt(i0,i1)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [1], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [], [0], [1, 2, 3, 1], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(0.0) \\g ( len(s1) - int(8.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [2, 2], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [0, 9], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\l int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [2, 0], [], [], [], [], [2], [5], [1, 2], [0], [5], [], [], [], [0], [1, 0, 1], [5, 8, 4], [0], [], [0, 1, 1, 0], [1], [], [], [0], [2, 0, 0, 0, 2], [], [], [0, 3, 2, 0, 0, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 3, 3, 1, 0, 3, 0, 0, 0, 0, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i0 != int(5.0):{:\\ns2 = s0\\n:}\\nb2 = (s0[int(84.0):] + s0).endswith(s2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 1, 0, 0, 0, 1], [0, 3, 1, 2, 7, 4, 9, 2, 2], [0, 0, 2, 2], [1, 1], [2, 0, 2, 1, 1, 1], [0, 1], [], [0, 0, 1, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 3, 2, 6, 2, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i0 + mod(int(0.0),int(3127.0)) )\\ni2 -= int(4922.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [2], [0], [0], [], [], [], [], [2], [1], [], [4, 1, 4], [3, 1], [4], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 3, 2, 1, 0, 1, 1, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"F\"\".rstrip(saveChr(i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [9, 4, 7], [2], [0], [2, 1, 1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(int(9.0),int(47.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [], [0], [], [], [], [], [4, 5], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2[:i2]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [0], [], [0, 2], [], [0], [2], [], [], [], [0], [2], [2, 0], [], [0, 0], [], [], [], [], [1, 5, 2], [], [0], [0, 4, 2, 0], [1, 2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 3, 0, 1, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2:{:\\nb0 = not saveChr(i2) in s2[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [3, 0], [0], [2], [], [], [4, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(abs(i0)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [], [0], [], [], [1], [], [1], [], [1], [], [], [], [], [], [], [], [], [5, 0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [0, 2, 2], [0], [2, 0, 0], [0], [], [2], [1], [3], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = saveChr(( i0 * i2 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [], [0, 0, 2], [], [2], [1, 1], [1], [1], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [], [1, 1], [], [], [], [3, 3], [], [], [], [9, 30]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [5, 0, 4], [0, 1, 1, 1], [1], [2, 3, 0, 0, 0], [0], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( min(i1, i1) + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [2], [], [], [], [], [], [2], [1], [0], [], [], [], [], [0], [1, 1], [4, 6], [1, 1, 0, 2], [], [0, 0, 0, 3, 1, 1, 0, 0], [1], [2, 0], [], [1], [2, 0], [], [], [3, 2, 2, 4, 0], [1], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 6, 0, 1, 0, 0, 2, 0, 0, 5, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 == i1:{:\\ns2 = (saveChr(i0)[:abs(int(4.0))][int(6.0):] + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [0, 0, 1, 0], [6, 7, 8, 8], [2, 0, 2, 1, 0, 1, 0], [], [3, 2, 3, 0, 2, 2, 3, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1], [1, 1, 1], [1, 2], [1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 7, 0, 14, 3, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(mod(max(i2, ( divInt(max(i0, i2),i1) - int(678.0) )),i0), i1) == i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [0, 9, 1], [1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(09.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 2], [1], [0, 0, 3], [1], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [1], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 1, 0], [], [0], [], [], [0, 2, 1], [5], [0, 1], [0], [], [0], [], [], [], [1, 1, 1, 0, 1, 0, 1], [7, 0, 6, 9, 1, 2, 4], [2, 0, 2, 0, 1, 1, 0], [0], [0, 0, 3, 2, 2, 2, 1, 2, 1, 1, 1, 1, 3, 0, 0, 0], [1, 0, 1, 0, 0], [2, 0], [1, 0], [0, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 7, 7, 3, 1, 12, 4, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\ni2 = i0\\nb1 = i2 != abs(divInt(( divInt(int(7.0),( int(0.0) - int(6.0) )) + int(91.0) ),int(24.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 1, 2, 1, 1, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 0, 1, 1, 0, 0, 0, 2, 2, 1, 2, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 4, 2, 0, 4, 4, 2, 2, 0, 2, 3, 1, 4, 0, 1, 0], [1, 1, 3, 3], [1, 0], [2, 1, 0, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 15, 1, 49, 15, 7, 8, 7, 5, 1, 1, 15, 4, 2, 6, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in saveChr(len(in2[int(0.0):i2]))[:int(7.0)][len(saveChr(mod(i2,int(5.0)))):]:{:\\nin1 = in1[:mod(i1,max(i0, ( mod(( int(1.0) + i0 ),divInt(min(( i1 + ( i1 * divInt(int(2.0),i0) ) ), ( len((\"\"R\"\" + in0.lstrip())[:i0]) - i0 )),divInt(int(1.0),i2))) + i2 )))][mod(int(1.0),min(int(7.0), max(i1, ( ( int(9.0) * int(8.0) ) - int(5.0) )))):( int(0.0) - i2 )].rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [3, 1, 7], [], [], [2, 1, 1], [1], [], [0], [1], [4, 0, 0], [], [], [4, 2, 4, 0], [3, 2], [1], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 1, 0, 0, 1, 2, 0, 0, 4, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0.capitalize()[mod(int(3.0),int(17.0)):].rstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 1, 1], [0, 3, 1, 1, 7, 3], [2, 0, 2, 2], [1, 0], [2, 0, 2, 1, 1, 1], [0, 0], [], [0, 0, 1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 3, 2, 6, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += ( i0 + ( int(0.0) - int(3117.0) ) )\\ni2 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 2, 0, 0, 1], [0], [0, 0, 1, 2, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [4], [1, 0, 0], [0], [], [1, 0], [], [0], [], [1, 0, 0, 1], [0, 8, 9, 0], [0, 0, 2, 1, 0], [1], [2, 1, 3, 0, 3, 2, 2, 3, 3, 0, 0, 0, 0], [0, 1, 1], [0, 3, 4, 1], [0], [0, 0], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 5, 0, 13, 3, 4, 1, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( int(0.0) + min(i0, len(s2)) ) \\le divInt(divInt(saveOrd(s2[max(i0, i2):]),i1),i0)\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [5, 7], [1, 0, 1, 2], [0], [3, 3, 3, 0, 3, 0, 2, 3, 1, 0], [0], [1, 2, 2, 1, 2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 10, 1, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = max(abs(abs(i0)), max(i1, ( abs(int(5.0)) * i2 )))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1], [3, 3, 2, 8], [0, 0, 1], [], [1, 2, 1, 3, 3, 1, 3, 0, 0, 1, 0], [0], [1, 1, 1], [2], [], [1, 5, 2, 3], [], [], [2, 3, 2, 0, 2, 0, 0, 0], [], [], [1, 2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 0, 11, 1, 3, 1, 0, 3, 0, 0, 6, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = (in2[int(3.0):] + s2[( int(3.0) * max(max(int(2.0), max(i0, i0)), int(8.0)) ):])[:i1]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 1], [4, 2, 2, 4], [2], [0], [2, 1, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(int(4.0),int(224.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1], [0, 1, 0, 0], [], [1, 1, 0, 1], [], [0, 0, 0], [], [], [2], [], [0], [], [], [1], [], [0], [], [1, 0, 0, 1, 0, 0, 1], [6, 1, 6, 5, 0, 6, 6], [1, 0, 2, 0, 2, 2], [0, 0, 0], [3, 0, 0, 2, 3, 3, 1, 0, 1, 1], [0], [0, 4, 1], [2], [], [1], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 0, 4, 0, 3, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 7, 7, 6, 3, 10, 1, 3, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = min(i0, i2)\\ni0 = ( saveOrd(s1[max(int(6.0), i2):]) * int(165.0) )\\nb2 = True\\ni2 = int(066.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [2], [0, 1], [], [0, 0], [], [], [2], [2], [1, 0], [0], [], [1], [], [0], [], [1, 1, 1, 1, 1, 1, 1], [0, 2, 8, 7, 3, 3, 4], [0, 2, 2, 1, 0, 1, 1], [1], [3, 0, 3, 3, 1, 2, 1, 2, 2, 0, 1, 3, 1, 0, 3, 1, 1, 2, 0, 1, 3, 1, 2, 1, 0, 3, 3], [0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 4, 1, 3, 2, 4], [1, 2, 2, 1, 0], [1, 0], [4], [1], [], [4, 2], [1], [], [], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 7, 7, 5, 1, 20, 4, 5, 3, 2, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(i0, max(min(int(0.0), ( int(2.0) - mod(( i2 * int(8.0) ),min(int(7.0), i2)) )), saveOrd(saveChr(int(3.0))))) == int(3.0):{:\\nb2 = True\\ni1 *= divInt(i0,int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [7, 9, 2], [0, 0, 2], [], [1, 1, 0, 0, 3, 0, 3, 0, 0], [1], [1, 2, 3], [2], [], [1, 5, 2, 3], [], [], [2, 2, 2, 0, 2, 2, 0, 0], [], [], [1, 2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2[int(7.0):][int(9.0):][:i0]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [4], [], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 2, 3], [2, 1, 1, 0, 2, 1], [], [3, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 0, 2, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0], [1], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1], [0, 1], [], [], [2, 2, 0], [], [0, 2], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 21, 8, 1, 4, 4, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1[max(mod(i2,divInt(int(1.0),( int(3.0) + mod(i1,int(9.0)) ))), mod(( i1 + i0 ),int(4.0))):i2][:( i1 * ( int(2.0) * int(3.0) ) )]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2, 0], [0], [1, 3, 2, 0, 2, 3, 2, 1, 2, 1, 0, 0], [0, 0, 0, 0], [1, 3, 2], [0, 2, 0, 2], [], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 12, 4, 2, 4, 0, 2, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (saveChr(int(5.0)) + saveChr(max(( i1 + ( len(s2.capitalize()) * ( int(7.0) + ( int(5.0) * i2 ) ) ) ), i0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [1, 1], [], [0], [], [], [], [1], [1], [0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 4, 1, 1, 2, 6, 6, 1, 2, 2, 0, 4, 7, 9, 1, 0, 0], [0, 1, 2, 2, 1, 1, 1, 0, 2, 1, 2, 2, 0], [0, 1], [0, 2, 1, 2, 1, 3, 0, 1, 0, 1, 2, 0, 0, 3, 1, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 2, 0, 2, 2, 2, 3, 3, 1, 1, 3, 3, 2, 0, 0, 3, 1, 2, 1, 0, 2, 1, 1, 3, 2, 1, 0, 2, 2, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0], [0, 3, 4, 2, 4, 1, 4, 1, 0, 2, 2, 0, 3, 1, 1], [2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0], [1, 1, 0, 1, 1, 1, 0], [3, 1], [1], [], [2, 0, 4, 1, 4, 2, 2, 4, 4, 0, 4, 4], [2, 0, 1, 3, 3, 1], [2, 3], [1, 1, 1], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 4, 4, 5, 2, 10, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i0 \\g ( int(4.0) * ( int(9.0) + min(i1, int(4.0)) ) ):{:\\ni2 = i2\\n:}\\ni1 *= int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [5], [0, 0, 2], [0], [0], [2, 2], [], [], [], [1, 1, 1, 1], [6, 4, 3, 4], [0, 2, 2, 1], [], [2, 0, 1, 2, 3, 2, 0, 1, 2, 2, 2, 0, 0, 3, 2, 3, 3, 1], [0, 1, 1, 0, 1, 0], [4, 1, 4, 3], [0, 1, 1], [0, 0, 1], [0, 0], [], [], [4, 0, 2, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 3, 0, 1, 2, 0, 0, 0, 1, 1, 1, 0, 3, 1, 0, 1, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not not saveChr(( i0 + int(6.0) )) in s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [0, 0], [1], [2, 0, 1], [0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( i0 * int(9.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1], [], [], [], [], [], [1, 2], [0, 1, 1], [0, 0], [], [2], [1], [], [], [0, 1, 1, 1, 1, 1], [4, 9, 8, 4, 9, 2], [0, 0, 1, 0, 1, 0, 2], [0], [1, 2, 1, 2, 3, 1, 1, 3, 3, 2, 2, 2, 2, 1, 0, 0, 3, 0, 1, 1, 3, 0, 0, 3, 1], [0, 1, 1, 0, 0, 0, 1], [3, 1, 3, 1, 3, 2], [2, 2, 0, 2, 1], [0, 1, 0], [3, 1], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 5, 5, 1, 1, 7, 2, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not int(49.0) \\g ( int(8.0) * divInt(len(in0),int(4.0)) ):{:\\ni0 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [4], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = getCharFromString(saveChr(int(0.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [], [], [2], [0], [3], [], [4], [], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1], [3, 2, 3, 5], [2], [1], [3, 3, 1, 2, 1, 1], [1], [1, 2], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 6, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= max(abs(int(3.0)), mod(int(2.0),int(35.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [2], [1, 2], [], [], [], [], [0], [4], [0, 1], [0], [], [2], [], [], [], [1, 1, 1], [9, 5, 8], [0, 0], [0], [3, 1, 1, 0, 1], [], [0], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 2, 1, 5, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not min(int(9.0), int(5.0)) \\le i0:{:\\ni0 = int(8.0)\\nin0 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [0], [], [], [1, 2, 2], [4], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [1, 5, 8], [0, 2, 1, 2, 0], [], [2, 2, 1, 2, 3, 3, 0, 1, 0, 0, 0, 0], [1, 0, 0], [0, 0], [0, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 5, 0, 12, 3, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = mod(( int(1.0) + ( min(min(i0, int(5.0)), i2) - i1 ) ),i2) \\le i0\\nb2 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 3, 9, 7, 1, 7, 3, 7, 5, 0, 4, 4, 1, 3, 6, 8, 5, 9, 4, 4, 0, 1], [0, 2, 1, 0, 2, 1, 2, 0, 0, 2, 0, 2, 2, 0, 1, 0, 2, 0], [0], [0, 2, 2, 3, 2, 2, 2, 3, 3, 2, 3, 3, 2, 3, 2, 0, 3, 0, 1, 3, 0, 1, 2, 3, 0, 0, 2, 2, 0, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 1, 3, 0, 1, 0, 0, 3, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 3, 1, 3, 3, 1, 2, 1, 3, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2], [2, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 5, 2, 0, 4, 5, 3, 1, 4], [1, 0, 0, 1, 1, 1, 1, 1], [], [1, 1, 2, 2, 1, 4, 2, 0, 0, 4, 0, 2, 1, 2, 4, 2, 1, 0, 0, 2, 1, 4, 0, 1, 0, 1], [3, 0, 0, 2, 1], [5, 3], [0, 2, 0, 0, 1, 0, 1], [3, 3, 0, 2, 0, 3, 2, 2], [20], [10], [5, 6, 4], [6, 24, 11]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\ns0 = \"\"#\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [0], [0, 0, 1], [0], [], [3, 1], [1], [1], [], [1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 5, 4, 9, 5, 2, 4, 2, 3], [1, 1], [], [3, 1, 2, 0, 1, 2, 3, 0, 1, 1], [0, 1], [1, 0, 4], [0], [0], [0, 1], [], [], [4, 4, 0, 0], [1, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 0, 2, 1, 1, 0, 9, 9, 2, 0, 10, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( False or max(int(0.0), ( i1 + int(5.0) )) \\l divInt(min(i1, int(495242.0)),int(3.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [1, 2, 2], [0, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(5.0)\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [1], [1], [0], [], [], [], [], [], [1, 0, 1], [6, 5, 1], [2, 0, 0, 0, 0], [], [3, 1, 1, 0, 0, 2, 3, 0, 0, 0], [0, 1], [1, 1], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(int(6.0), int(51.0)) \\g i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 2, 2, 1, 0, 1, 0, 0, 2, 0, 1], [2, 1, 1, 1], [2, 0, 1, 0, 0, 0, 2], [], [0, 0, 0], [], [], [1, 2, 2, 2], [3, 1, 1], [1, 2, 1, 1, 0, 0, 2], [0, 0, 0], [2, 4], [2, 0], [], [], [1, 0, 1], [1, 1, 1, 1, 0, 1], [0, 4, 4, 5, 5, 6], [1, 0, 1, 2, 1, 1, 0, 2, 0, 1, 0, 1, 1], [0, 0], [0, 0, 1, 2, 1, 2, 0, 1, 0, 1, 0, 2, 0, 2, 2, 0, 1, 0], [1, 0, 0, 0, 1], [], [1, 1, 1], [1, 1], [1, 0, 5, 0, 2, 0, 5], [1, 1], [], [0, 0, 4, 2, 0, 4, 0, 1, 2, 4, 1], [1, 3, 2], [0], [0, 1], [3, 0], [15], [], [], [18]], "fitness": 31, "mapping_values": [1, 7, 7, 2, 5, 0, 3, 0, 0, 4, 3, 6, 3, 1, 2, 0, 0, 1, 6, 6, 9, 1, 18, 5, 0, 3, 2, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s0\\nloopBreak% = 0\\nwhile i1 \\ge i0:{:\\nif in2 == saveChr(int(0.0)):{:\\nb1 = mod(int(4.0),( i1 - int(4.0) )) \\g i2\\n:}else:{:\\ni1 = int(5.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = i1 \\g ( i0 - ( mod(i2,int(56.0)) - i0 ) )\\nb2 = not b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 0], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(20.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [1], [1], [1], [0], [], [], [], [], [], [1, 0, 1], [3, 7, 8], [0], [], [3, 1, 1, 0], [], [1], [], [], [2, 0], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 4, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\nb1 = max(int(3.0), int(78.0)) \\g i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [4], [1], [0], [], [], [], [], [], [1, 1, 1, 1], [6, 0, 1, 7], [1, 1, 0, 0], [], [3, 2, 2, 1, 0, 1, 0, 2, 1, 2, 1, 2, 0, 0], [1, 0, 1, 1, 1], [1], [0], [0, 1, 0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 14, 5, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(divInt(( int(6.0) + i1 ),int(0.0)), i1) \\le mod(int(1.0),divInt(int(7.0),mod(i0,i0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 9, 1, 5, 4, 5, 9, 8, 3, 9, 4, 1, 4], [1, 1, 0, 0, 2, 2], [1, 0], [1, 2, 2, 2, 0, 2, 3, 3, 1, 3, 1, 3, 1, 3, 3, 3, 1, 0, 1, 3, 1, 0, 0, 1], [0, 0, 0, 1], [0, 2, 3, 2, 3, 0, 2, 0], [1, 0, 2, 0], [0], [0, 2], [], [], [4, 0, 2, 2, 2, 4, 0], [3, 2], [1], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 6, 2, 24, 4, 8, 4, 1, 2, 0, 0, 7, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(29.0)\\ni1 = ( ( ( i0 + divInt(min(abs(int(1.0)), len(s0.rstrip())),int(54.0)) ) * abs(int(5.0)) ) + len(s2.capitalize()[:min(abs(int(9.0)), i0)][int(8394.0):min(int(1.0), i2)][i2:int(4.0)]) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [1], [3, 0], [], [3], [0], [], [3], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += len(in0[i0:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [4], [1], [0], [], [], [], [], [], [1], [5], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(5.0) \\le i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 6, 6, 4, 1, 6, 5, 4], [2, 1, 0, 2, 2, 0, 1, 2, 0, 0], [], [1, 2, 1, 2, 3, 1, 1, 1, 2, 1, 3, 2, 1, 1, 2, 0, 2, 2, 1, 1, 0, 0, 2, 2, 0, 3, 0, 1, 2, 2, 0, 0, 3, 0, 0, 3, 1, 0, 2, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], [3, 0, 4, 0, 0, 4, 1], [1, 2, 1, 2, 1, 0, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1], [5, 3, 5, 4], [1], [], [4, 2, 0, 1, 0, 0], [2], [], [0], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 6, 2, 1, 1, 1, 2, 1, 0, 4, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in0[int(8.0):( int(9.0) - divInt(len(\"\"u\"\"),int(6.0)) )].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1], [8], [2, 2, 1], [1], [2, 1, 3, 3, 2, 0, 0], [1, 1], [0, 3], [0], [0, 1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 7, 2, 2, 1, 2, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(8.0),min(len(s0.capitalize()), mod(i2,i1)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 8, 6], [1, 1], [1], [3, 3, 2, 3, 1, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [2, 0, 0], [0], [1], [], [], [], [], [], [], [2, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 1, 8, 1, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(min(mod(min(int(1.0), int(8.0)),int(6.0)), i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1], [8], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [2], [0, 1], [], [], [], [], [3], [4, 4], [1, 0], [0, 0], [], [1], [], [0], [], [1, 1, 1, 0, 1, 1], [0, 8, 2, 3, 6, 8], [1, 0], [1], [1, 2, 0, 1, 1, 1, 3, 1, 3, 1], [0], [3, 1, 2], [1, 1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 3, 3, 2, 1, 5, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(0.0) \\le ( i1 - int(8.0) )\\nloopBreak% = 0\\nwhile True:{:\\ni0 -= int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [4], [], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0], [], [0, 1, 0], [], [0], [], [], [3, 2, 1], [5], [0, 2], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0], [0], [0, 0, 3, 2, 2, 2, 2, 2, 1, 0, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [0, 0], [1, 0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [1, 1], [1], [0, 3, 2], [1], [], [3, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (in0 + s2)\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [0], [], [], [], [], [], [], [0, 1], [5, 1], [1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(51.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [8, 9, 1], [2], [1], [1], [], [3], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(891.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [2], [], [], [], [], [], [5], [1], [0], [], [], [], [], [0], [1, 1, 1], [5, 8, 5], [0], [], [2, 1, 1, 0], [1], [], [], [1], [2, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 4, 1, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(int(5.0),int(8.0)) != i0:{:\\ns2 = s0\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [5, 1, 2, 6, 8, 8, 2, 5, 0, 8, 4, 1, 8, 5, 0, 0, 2, 4, 2, 4, 2], [2, 0, 2, 1, 2], [], [2, 3, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 0, 1, 3, 3, 3, 1, 1, 3, 1, 1, 1, 0], [0, 0, 1, 1, 1], [4, 1, 0, 3, 2], [2, 2], [0, 1, 1, 0], [3, 4], [], [], [4, 2, 2, 2, 4, 0, 4, 2, 4], [2, 0, 1, 1], [], [0, 0, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 21, 5, 0, 25, 5, 5, 2, 3, 2, 0, 0, 9, 4, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = getCharFromString(in1, ( saveOrd(saveChr(( i2 * int(5.0) ))) * divInt(i0,int(1.0)) ))[mod(i2,int(268.0)):][mod(int(825.0),i1):int(0.0)][max(min(len(saveChr(int(8.0))[int(4.0):abs(int(18.0))]), int(50.0)), int(024242.0)):i2].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [2], [], [0], [], [], [1], [], [1], [], [], [], [0, 1], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [8, 8, 1, 9, 8, 4, 9, 7, 5, 0, 2, 5], [1, 2], [1], [2, 1, 2, 0, 1], [1, 0], [4], [2, 1], [1], [0], [], [], [4, 1], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 2, 1, 5, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= mod(int(881984.0),( i2 - int(975025.0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 2], [1], [0], [2, 1, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = divInt(int(4.0),int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [1], [], [], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [2, 1], [1], [2, 2, 1, 1, 0, 3], [0, 0], [3], [1, 0, 2], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 5, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= ( ( int(0.0) + int(8.0) ) * i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0], [0], [2, 0, 0], [1], [], [1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(i1,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [], [], [1, 2, 3, 1], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\g ( len(s1) - int(8.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0, 0], [0], [], [2, 0, 3, 1, 1], [0], [1], [1], [], [5, 3], [], [], [4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(in0, ( i0 - max(int(0.0), int(0.0)) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1], [1], [0], [], [0], [], [], [1], [0], [1, 0], [0], [], [1], [], [1], [0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [7, 4, 0, 9, 6, 7, 3, 6, 9, 5, 8], [1, 2, 1, 2, 1], [], [1, 1, 0, 1, 0, 2, 3, 0, 2, 2, 0, 2, 1, 2, 1, 3, 0, 3, 1, 0], [1, 0, 1, 0, 0, 1, 0], [2, 1, 2], [1, 2, 2, 2], [1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(740967.0) \\l int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [], [0], [], [], [], [], [0, 0], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0[i2:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 2, 1], [0], [0, 0, 1, 0, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [2, 5], [1, 1, 0], [0, 0], [], [1, 0], [], [0], [], [1], [5], [0, 2, 2, 2], [1], [0, 1, 0, 0], [], [], [0], [], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 == int(5.0)\\nb2 = i2 != i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [9, 5, 2], [2, 1, 0, 2], [0, 0], [0, 2, 0, 1], [0], [], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 2, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\ni0 = ( i2 + int(952.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 1, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = abs(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [0], [0], [], [1], [], [1], [], [0, 1], [0, 8], [0], [], [1, 2, 0, 0], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [], [2], [], [4], [], [], [], [], [1], [6], [2], [1], [1, 0], [], [], [1], [], [3, 3], [], [], [2, 2, 0, 0], [], [], [2, 1], [], [], [], [], []], "fitness": 39, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[:int(6.0)][i2:].startswith(in0)\\n", "other_info": {}, "test_fitness": 253}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 1, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 42, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:mod(len(in1),mod(int(6.0),i0))]:{:\\nres0 = in1[( int(7.0) + int(5.0) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 423, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 8, 3, 1, 1, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 1, 3, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 46, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 13, 0, 55, 17, 11, 8, 9, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString(in1[max(i0, int(07.0)):], abs(mod(i2,int(5.0))))):]:{:\\nres0 = in1 not in in0[mod(int(7.0),min(i2, ( divInt(( len(s0[i0:divInt(min(( i1 + ( divInt(( int(4.0) + i2 ),divInt(max(int(1.0), i1),int(7.0))) * int(7.0) ) ), i2),i0)]) - mod(int(9.0),abs(int(8.0))) ),max(i0, ( ( ( int(5.0) + int(0.0) ) * divInt(int(4.0),i2) ) - int(8.0) ))) - mod(abs(int(59.0)),len(saveChr(i2))) ))):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 648}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 3, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 1, 3, 0, 1, 2, 1], [1, 0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = len(in1[i0:]) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 0, 1, 2], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 12, 12, 13, 0, 50, 15, 10, 9, 6, 5, 1, 0, 15, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( True or saveOrd(getCharFromString(s0, len(in2[i0:]))[i2:]) != abs(mod(i2,int(0.0))) ) and in1 not in saveChr(( int(7.0) + min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(in1[( i2 * min(max(( int(7.0) - i1 ), divInt(abs(int(7.0)),i2)), int(1.0)) ):int(7.0)]),i0)) + i0 )) ))[( int(7.0) * max(divInt(saveOrd((\"\"R\"\" + in0.capitalize()).rstrip()),i2), divInt(( ( int(9.0) - int(8.0) ) - ( int(5.0) * i1 ) ),int(0.0))) ):i1] )\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [], [0, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 0, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 62, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = in1.startswith(in1[len(in0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 744}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [5], [1], [0], [], [1], [], [1], [], [1], [9], [0, 1, 0], [1], [0, 1, 0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i1\\nres0 = int(9.0) != i0\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [0], [1], [0], [], [], [], [], [], [0, 1], [0, 1], [2, 0], [], [0, 2, 1, 0], [0], [], [1], [], [0, 0], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i2 \\l ( int(01.0) - i0 )\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 1], [], [0, 2], [], [], [], [], [3, 3], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [2], [0, 2], [], [], [], [], [3], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 9, 2, 9, 6, 8, 5, 3, 7, 7, 8, 7, 5, 9, 0, 4, 1, 5, 9, 2, 5, 0, 3, 7, 4, 1, 7, 3, 3, 5, 0, 6, 4, 7, 9, 9, 3, 6, 5, 9, 4, 1, 3, 3, 6, 1, 2, 1, 6, 6, 1, 6], [1, 1, 0, 2, 1, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1, 0, 0, 2, 0, 1, 0, 2, 2, 2, 0, 1, 0, 2, 1, 2, 0, 2, 1, 2, 1, 0, 0, 2, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 1, 2, 2], [1], [3, 2, 1, 1, 3, 1, 3, 0, 3, 2, 0, 2, 1, 2, 0, 2, 3, 2, 1, 1, 2, 0, 0, 0, 2, 1, 0, 3, 3, 2, 2, 2, 3, 0, 1, 0, 2, 3, 3, 0, 3, 2, 1, 1, 3, 3, 0, 2, 3, 2, 0, 3, 3, 0, 3, 2, 0, 0, 0, 2, 1, 0, 2, 2, 3, 2, 0, 3, 0, 3, 2, 2, 2, 3, 1, 3, 0, 3, 2, 0, 0, 3, 1, 3, 1, 3, 1, 0, 0, 3, 3, 1, 3, 1, 0, 3, 0, 1, 0, 2, 2, 3, 3, 3, 1, 3, 1, 3, 3, 2, 2, 1, 1, 1, 0, 1, 3, 3, 3, 1, 1, 1, 3, 0, 2, 1, 3, 0, 3, 3, 3, 0, 3, 0, 2, 1, 2, 2, 0, 3, 1, 1, 0, 3, 0, 2, 2, 1, 0, 2, 1, 2, 1, 1, 2, 2, 0, 3, 0, 0, 2, 2, 2, 1, 1, 1, 0, 0, 1, 1, 1, 3, 3, 3, 2, 1, 0, 3, 2, 0, 2, 2, 0, 3, 1, 0, 2, 0, 3, 1, 1, 1, 3, 0, 2, 0, 3, 3, 3, 3, 3, 0, 2, 1, 3, 3, 1, 0, 3, 2, 3, 3, 0, 2, 2, 0, 2, 3, 1, 0, 1, 2, 3, 3, 1, 3], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [4, 2, 2, 3, 4, 4, 2, 3, 4, 1, 2, 1, 4, 2, 3, 0, 1, 1, 1, 1, 2, 3, 0, 0, 0, 4, 3, 2, 1, 3, 4, 4, 2, 4, 3, 4, 2, 0, 3, 4, 2, 1, 0, 3, 3, 2, 0, 4, 3, 0, 0, 2, 2, 0, 0, 3, 0, 4, 0, 4, 2, 3, 3, 1, 2, 3, 2, 4, 4], [1, 1, 0, 2, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 2, 2, 0, 1, 2, 0, 2], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 2, 5, 4, 2, 1, 2, 2, 4, 1, 5, 2, 3, 2, 2, 3, 3, 5, 2, 2, 2, 5, 4, 5, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1], [], [4, 4, 3, 3, 3, 1, 1, 2, 0, 2, 3, 3, 4, 4, 4, 2, 4, 0, 2, 2, 2, 4, 2, 2, 1, 4, 2, 2, 2, 4, 0, 2, 1, 4, 0, 0, 4, 2, 0, 1, 4, 0, 2, 0, 2, 0, 2, 4, 1, 4, 1, 2, 2, 2, 2, 2, 0, 0, 0, 2, 1, 1, 4, 0, 1, 0, 2, 2, 4, 1, 4, 2, 0, 4, 2, 1, 0, 0, 3, 3, 4, 3, 0, 4, 3, 0, 3, 2, 1, 2, 3, 4, 1, 4, 1, 0, 2, 0, 0, 4, 0, 2, 2, 1, 4, 0, 4, 2, 1, 1, 0, 1], [3, 3, 3, 3, 3, 0, 1, 2, 3, 0, 0, 0, 0, 2, 1, 0, 1, 0, 3, 1, 1, 0, 0, 0, 3], [4, 1, 3, 3, 1, 5, 5, 4], [2, 0, 1, 0, 0, 2, 0, 0, 2, 1, 0, 0, 2, 2, 1, 0, 1, 1, 2, 0, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1], [3, 2, 1, 1, 3, 1, 3, 0, 2, 3, 1, 0, 2, 0, 1, 3, 2, 0, 3, 0, 1, 0, 2], [13, 12, 20, 2, 14, 6], [13, 13, 16, 25, 6, 21], [1, 2, 6, 3, 0], [18, 4, 5, 15, 30, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 52, 52, 53, 0, 226, 53, 69, 29, 24, 26, 23, 0, 112, 25, 8, 32, 23, 6, 6, 5, 6], "tree_depth": 77, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd((((\"\"/\"\" + \"\"1\"\") + s1[( int(0.0) - int(9.0) ):]) + ((getCharFromString(s2, abs(int(2.0)))[:abs(i1)].rstrip().lstrip(saveChr(len(\"\"n\"\"[( i1 - ( int(9.0) + divInt(i0,mod(saveOrd(in2.strip(\"\"n\"\"[divInt(int(6.0),int(8.0)):( i2 * i1 )])[i2:mod(int(5.0),i0)][:saveOrd(getCharFromString(in1, abs(mod(divInt(divInt(len(s2),i1),int(3.0)),i2))))][( saveOrd(getCharFromString(s1[max(i1, abs(mod(int(7.0),int(7.0)))):], max(saveOrd(\"\"!\"\"), i2))) - ( abs(divInt(i0,len(getCharFromString(s2, min(i0, max(( i2 + i1 ), i0)))))) - divInt(int(8.0),i0) ) ):].capitalize()),( divInt(max(mod(i2,max(i0, max(mod(( ( abs(int(7.0)) - len(s2[i1:]) ) - min(( i0 - i2 ), min(int(5.0), min(int(9.0), saveOrd(in1[:int(0.0)])))) ),i2), i2))), len(getCharFromString(\"\"q\"\", abs(int(4.0)))[max(int(1.0), i0):len(\"\"\"\"\".capitalize())])),i1) + int(5.0) ))) ) ):i0][( ( saveOrd(s1[saveOrd(in2):][abs(int(9.0)):saveOrd(s2)][int(2.0):][:len(\"\"N\"\"[:saveOrd(\"\"2\"\")])][:( divInt(int(5.0),int(0.0)) + int(3.0) )]) + i2 ) - int(7.0) ):abs(min(len(saveChr(int(4.0))), int(1.0)))]))[int(7.0):][saveOrd(in0):i1][( int(3.0) * abs(i2) ):max(min(len(\"\",\"\"), i0), len(s2))]).lstrip(getCharFromString(\"\"z\"\", i2)[:mod(int(3.0),( ( i1 - abs(int(5.0)) ) + int(0.0) ))][i2:]) + saveChr(min(i1, mod(( int(6.0) + i0 ),( int(4.0) + ( int(7.0) * int(9.0) ) ))))) + s2[:divInt(divInt(i0,saveOrd(getCharFromString(\"\"M\"\"[:i2], i2))),divInt(( divInt(int(9.0),int(3.0)) * int(6.0) ),i2))])[i1:int(59.0)]).rstrip().rstrip(in0)) \\le int(4.0)\\nloopBreak% = 0\\nwhile int(1.0) \\le len(in0):{:\\nin2 = (((s2 + saveChr(min(min(( int(3.0) - i1 ), abs(( i2 * mod(mod(i0,abs(int(3.0))),i0) ))), ( i0 * min(int(6.0), int(1.0)) )))).strip((s2 + (\"\"6Ug\"\"[int(2.0):] + (saveChr(min(i1, ( i0 + len(\"\"_\"\") ))) + getCharFromString(\"\"3C\"\", min(saveOrd(s2), min(saveOrd(in2[i0:]), divInt(int(1.0),abs(len(in1)))))))[:int(6.0)]))) + getCharFromString(in2, i0)) + \"\"/\"\"[len(getCharFromString(s2, divInt(max(abs(i1), ( ( i2 - ( len(\"\"O\"\"[:int(6.0)].rstrip(\"\"v\"\")) * i2 ) ) + int(1.0) )),( abs(saveOrd(s1)) * int(6.0) )))):][:saveOrd(\"\"G0\"\")])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 2, 0, 2, 1, 2, 0, 1, 1, 0, 2, 0, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0], [2, 2, 1, 1, 1, 1, 0, 2, 1, 2, 1, 2], [1, 1, 1, 0, 0, 1, 2, 0, 1, 0, 1, 1, 2, 2, 2, 0, 1, 2, 1, 2, 1], [0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 0, 0, 0, 1, 0], [1, 4, 5, 3, 3], [2, 0, 2, 2, 1, 1, 1, 0, 2, 2, 2, 0, 2, 0, 1, 2, 0, 2, 1], [0, 0, 0, 0, 0], [5, 3, 0, 4, 0, 1, 3, 1, 2], [2, 0, 3, 1, 1], [1], [1, 0], [0, 1, 1, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 6, 6, 3, 0, 4, 9, 8, 9, 9, 9, 9, 0, 5, 8, 8, 1, 4, 8, 6, 4, 2, 1, 2, 1, 6, 0, 4, 1, 7, 3, 7, 7, 9, 7, 6, 4, 8, 3, 2, 3, 7, 8, 5, 3, 5, 3, 6, 2, 0, 1, 4, 0, 0, 3, 6, 1, 7, 8, 5, 3, 3, 2, 7, 5, 2, 7, 2, 3, 5, 4, 7, 8, 6, 2, 9, 7, 9, 6, 8, 5, 2, 8, 4, 6, 8, 6, 2, 6, 9, 0, 3, 3, 0, 3, 0, 2, 4, 0, 8, 0], [0, 1, 2, 1, 2, 0, 0, 2, 2, 2, 0, 0, 2, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 2, 2, 2, 0, 2, 2, 1, 1, 1, 2, 0, 1, 2, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 2, 1, 1, 1, 0, 1, 1, 2, 2, 0, 2, 0, 1, 2, 0, 0, 1, 2, 2, 2, 2, 2, 1, 1, 1, 0, 2, 1, 0, 1, 1, 2, 0, 1], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [2, 3, 0, 0, 1, 1, 1, 3, 0, 0, 1, 2, 2, 3, 0, 2, 1, 2, 0, 2, 3, 1, 2, 2, 1, 0, 3, 2, 3, 0, 3, 1, 3, 2, 3, 2, 1, 2, 3, 1, 2, 1, 1, 3, 1, 1, 0, 2, 0, 2, 2, 1, 3, 2, 2, 0, 2, 3, 1, 3, 2, 0, 3, 1, 2, 2, 3, 0, 2, 3, 2, 1, 3, 0, 3, 0, 0, 0, 3, 3, 0, 0, 1, 2, 0, 1, 0, 2, 2, 0, 1, 2, 3, 2, 2, 0, 1, 2, 0, 3, 0, 0, 1, 3, 0, 1, 1, 3, 1, 1, 1, 0, 0, 3, 0, 2, 1, 2, 0, 3, 0, 1, 2, 2, 2, 3, 1, 1, 0, 0, 3, 3, 2, 0, 3, 2, 1, 3, 1, 3, 1, 2, 2, 3, 0, 0, 1, 0, 2, 2, 1, 3, 2, 0, 3, 0, 3, 1, 2, 1, 1, 0, 1, 1, 2, 2, 0, 2, 1, 3, 3, 2, 2, 0, 2, 2, 1, 1, 1, 0, 3, 0, 1, 3, 2, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 2, 0, 1, 2, 3, 2, 3, 1, 0, 1, 3, 0, 1, 0, 2, 0, 0, 3, 2, 0, 1, 2, 0, 1, 0, 3, 3, 2, 0, 3, 2, 3, 1, 1, 2, 1, 0, 2, 2, 1, 3, 3, 3, 3, 0, 2, 0, 1, 2, 0, 2, 1, 3, 1, 0, 1, 2, 3, 1, 3, 2, 3, 3, 3, 2, 0, 2, 2, 1, 1, 0, 2, 2, 0, 2, 3, 2, 0, 2, 3, 1, 3, 1, 2, 1, 2, 1, 1, 0, 2, 2, 3, 1, 2, 1, 1, 3, 1, 3, 1, 2, 0, 1, 0, 2, 2, 3, 0, 2, 0, 0, 2, 2, 2, 3, 1, 3, 1, 0, 1, 1, 0, 3, 0, 2, 0, 2, 0, 3, 2, 1, 1, 1, 2, 1, 0, 1, 0, 2, 0, 0, 1, 0, 2, 1, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 1, 3, 4, 2, 4, 3, 1, 4, 4, 1, 0, 0, 4, 4, 2, 2, 0, 2, 0, 3, 3, 4, 4, 1, 4, 2, 0, 4, 2, 2, 2, 3, 3, 3, 3, 0, 3, 2, 2, 3, 4, 0, 1, 3, 1, 2, 2, 4, 1, 2, 3, 1, 3, 2, 4, 2, 2, 3, 3, 4, 0, 0, 3, 2, 0, 1, 3, 4, 1, 3], [1, 1, 2, 0, 2, 1, 2, 0, 2, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 2, 0, 0, 1, 2, 2, 2, 1, 0, 2, 2, 2, 1, 0, 0, 1, 1, 1, 2, 1, 2, 0, 1, 1, 2, 0, 2, 2, 2], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 3, 2, 3, 2, 5, 4, 5, 4, 0, 3, 1, 5, 0, 1, 0, 1, 4, 0, 1, 3, 1, 2, 0, 5, 0, 5, 5, 3, 5, 5, 0, 3, 2, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [3, 3, 2, 0, 2, 3, 1, 4, 4, 4, 0, 3, 4, 0, 3, 1, 2, 2, 2, 1, 0, 1, 2, 0, 1, 0, 2, 4, 0, 0, 2, 2, 2, 1, 1, 0, 0, 2, 0, 3, 4, 2, 4, 0, 0, 4, 3, 4, 2, 1, 4, 2, 4, 2, 2, 4, 4, 1, 0, 2, 0, 4, 1, 4, 2, 0, 4, 1, 2, 2, 4, 1, 3, 0, 3, 0, 4, 0, 4, 2, 0, 0, 4, 2, 1, 3, 2, 1, 1, 4, 4, 2, 4, 4, 1, 2, 1, 2, 1, 4, 4, 4, 4, 0, 4, 1, 4, 1, 4, 4, 1, 2, 2, 4, 4, 1, 1, 0, 2, 2, 0, 2, 0, 1, 0, 4, 1, 1, 0, 4, 0, 2, 1, 4, 1, 2, 4, 2, 0, 0, 4, 1, 2, 2, 2, 1, 2, 2, 4], [1, 0, 0, 2, 3, 2, 1, 3, 3, 1, 2, 3, 1, 0, 1, 2, 1, 0, 2, 1, 2, 2, 2, 2, 3, 2, 3, 1, 3, 3, 1, 1, 3, 1, 3, 0, 3, 1, 2, 1], [1, 3, 1, 4, 1, 3, 1, 5, 2, 3, 2], [0, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 1, 2, 2, 2, 2, 0, 1, 0, 1, 1, 1, 0, 1, 2, 1, 2, 0, 1, 0], [2, 1, 2, 1, 1, 3, 0, 2, 1, 1, 2, 3, 0, 0, 2, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3, 1, 0, 0, 1, 1, 0, 1, 0, 3, 3], [22, 12, 6, 18, 10, 6, 7], [3, 1, 25, 4, 14, 17, 24, 22, 4, 14, 24, 3, 21, 17], [3, 7, 1, 7, 7, 1, 2, 3, 0], [17, 31, 30, 8, 6, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 33, 33, 12, 21, 1, 9, 0, 0, 6, 5, 19, 5, 9, 5, 1, 2, 6, 101, 101, 95, 10, 342, 96, 71, 48, 51, 37, 36, 1, 149, 40, 11, 39, 36, 7, 14, 9, 6], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( min(i1, i2) - int(0.0) )\\nloopBreak% = 0\\nwhile ((s0[int(6.0):int(63.0)] + (\"\"3d7bz.W\"\" + saveChr(max(i1, i2)))[:int(0.0)]) + getCharFromString(getCharFromString(s2, divInt(( len((in0.capitalize() + (\"\"1\"\" + \"\"e\"\"[i0:divInt(int(4.0),divInt(i0,( saveOrd(s2) * int(9.0) )))][:divInt(divInt(int(8.0),i2),abs(mod(saveOrd(\"\"o\"\"),i2)))][len(in0[int(9.0):]):]))) + max(( saveOrd(\"\"7\"\") * ( int(9.0) - divInt(saveOrd(s2),int(9.0)) ) ), divInt(int(9.0),int(0.0))) ),max(int(5.0), int(8.0)))), i2)).endswith(in2.rstrip()[divInt(i0,mod(( int(81.0) * min(( ( i0 + divInt(min(int(4.0), saveOrd(in1)),( i2 * saveOrd(\"\"`\"\"[int(8.0):( mod(abs(i1),( abs(mod(int(6.0),min(i0, abs(i0)))) + i0 )) + i0 )][min(len(\"\"M\"\"), i1):i2][int(4.0):( i2 - int(2.0) )]) )) ) + i2 ), ( ( i0 - int(1.0) ) + ( len(in2) * ( ( i2 - int(2.0) ) - ( i0 + saveOrd(in1) ) ) ) )) ),i0)):]):{:\\ni1 *= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not s0[int(16.0):] != (saveChr(saveOrd(in0))[i1:].capitalize() + s1):{:\\ni0 = int(04.0)\\nif (\"\"G\"\"[int(1.0):max(int(7.0), int(3.0))].rstrip() + saveChr(int(77.0))).lstrip(saveChr(i0).rstrip(\"\"7\"\")[:i0][saveOrd(in2):i2].capitalize()[mod(int(9.0),( i1 + abs(i1) )):]) in s0[int(764.0):( mod(( min(int(8.0), int(3.0)) + i2 ),i2) - saveOrd(getCharFromString(\"\"_\"\", abs(( i2 * abs(( int(2.0) * abs(int(3.0)) )) )))) )]:{:\\nb0 = len(saveChr(int(7.0))) \\g mod(divInt(len(s1[i0:i2]),int(8.0)),i2)\\nb0 = divInt(mod(int(5.0),len(\"\"1\"\".capitalize())),( i1 * len(saveChr(i1)[:min(int(3.0), divInt(int(5.0),int(3.0)))][i1:]) )) \\le int(6.0)\\n:}\\ni2 = int(2.0)\\ns0 = \"\"2\"\"\\nif mod(( i0 - ( int(01.0) + len((s1 + (in1 + getCharFromString(s0, abs(divInt(( i1 * divInt(divInt(int(4.0),int(0.0)),int(0.0)) ),i2)))))) ) ),abs(i2)) != int(3617.0):{:\\nb0 = b0\\ni0 *= len(s1[:mod(i1,int(8.0))].capitalize())\\n:}else:{:\\nif in0.startswith(saveChr(( saveOrd(\"\"3\"\"[( i1 * int(5.0) ):]) - int(3.0) ))):{:\\nif (\"\"0\"\"[i1:] + \"\"r\"\") in \"\"y\"\".capitalize().capitalize()[i1:].capitalize().capitalize():{:\\nb1 = \"\"w\"\"[( i1 + int(3.0) ):] not in \"\"e\"\"[divInt(min(( max(int(2.0), i1) + int(7.0) ), len(saveChr(i1).lstrip(s1).capitalize().rstrip())),int(5.0)):i2]\\n:}else:{:\\nloopBreak% = 0\\nfor s2 in \"\"o\"\".rstrip():{:\\nloopBreak% = 0\\nwhile ( \"\"%\"\".strip(saveChr(divInt(i1,i1))) != saveChr(max(( i0 - int(2.0) ), divInt(i2,int(7.0)))) or False ):{:\\nif i1 \\ge abs(abs(mod(i1,saveOrd(\"\"y\"\")))):{:\\nloopBreak% = 0\\nwhile saveChr(( max(int(2.0), int(3.0)) - divInt(int(5.0),i1) )).strip()[mod(( int(4.0) - abs(len(\"\"S\"\")) ),max(len(\"\"K\"\"), i0)):( i1 * int(7.0) )][:mod(i1,divInt(int(8.0),abs(int(6.0))))] not in s0:{:\\ni2 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(2.0)\\n:}\\nif True:{:\\nin2 = s0[:divInt(saveOrd(in2[:int(9.0)]),abs(mod(abs(len(\"\"d\"\")),len(in2))))][:( i2 - ( divInt(int(7.0),int(9.0)) * i0 ) )]\\nin0 = \"\"v\"\".lstrip(\"\"G\"\")\\nin2 = in2\\n:}else:{:\\nb0 = getCharFromString(s0, mod(divInt(i1,divInt(saveOrd(\"\"r\"\"[mod(i2,divInt(min(int(6.0), min(int(8.0), mod(int(5.0),divInt(int(2.0),int(8.0))))),i0)):( divInt(len(\"\"H\"\".strip()),int(4.0)) + ( int(6.0) - int(8.0) ) )]),abs(int(6.0)))),min(int(2.0), ( i0 - int(6.0) )))) == saveChr(i1)[:( ( max(i2, divInt(i2,i2)) * mod(( mod(len(in0[int(9.0):]),saveOrd(s2)) + int(0.0) ),i2) ) * int(3.0) )]\\ni2 = int(3.0)\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile i1 \\ge max(i1, mod(i1,mod(i0,len(\"\"#\"\".capitalize())))):{:\\ns1 = \"\",\"\"[( int(0.0) * int(3.0) ):int(0.0)][( int(2.0) * i2 ):][:int(4.0)]\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = saveChr(mod(i1,i1))[int(0.0):i2][:mod(int(8.0),int(0.0))]\\ni0 = i1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 2, 0, 4, 8], [0, 2], [0], [0, 3, 2, 1, 2, 1, 3, 2, 3, 1, 2, 1, 1, 0], [0, 0, 1, 1], [3, 2, 2], [0, 1], [0, 1], [], [0, 1], [], [1, 4], [1], [], [2], [3, 1], [], [2], [], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 \\le len(\"\".c\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1], [0, 2, 0, 2, 2, 0, 0, 2, 1, 2, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 2, 1, 0], [0, 0, 0], [0, 0, 0, 0, 0, 0], [], [], [0, 2, 3, 2, 1, 0], [1, 5, 0, 3], [2, 1, 2, 2, 1, 1, 0, 0, 1], [0, 0, 0, 0], [2, 4, 4], [2, 1], [], [0], [0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 6, 8, 6, 9, 5, 5, 9, 2, 7, 8, 0, 9, 3, 1, 9, 5, 8, 0, 2, 2, 5, 5, 1, 3, 0, 9, 6, 6, 3, 2, 8, 5, 1, 0, 8, 1, 4, 7, 2, 2, 4, 1, 4], [1, 1, 0, 0, 0, 2, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 1, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 1, 0, 2, 0, 2, 0], [0, 0, 1], [1, 1, 1, 2, 1, 1, 3, 0, 1, 2, 0, 3, 0, 1, 2, 2, 2, 1, 2, 3, 2, 2, 2, 3, 2, 3, 0, 2, 3, 0, 0, 0, 2, 2, 0, 3, 0, 1, 1, 0, 2, 3, 1, 1, 2, 2, 0, 0, 1, 2, 3, 1, 2, 3, 3, 1, 1, 2, 0, 2, 1, 1, 0, 3, 3, 3, 3, 3, 2, 1, 2, 2, 3, 1, 3, 3, 1, 1, 3, 0, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 3, 3, 0, 0, 1, 3, 0, 0, 1, 2, 0, 2, 0, 1, 2, 0, 2, 3, 2, 1, 1, 2, 3, 3, 3, 0, 2, 2, 2, 2, 3, 3, 0, 0, 3, 1, 2, 0, 2, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0], [2, 1, 1, 2, 2, 4, 2, 4, 2, 4, 4, 0, 4, 1, 3, 0, 1, 2, 4, 1, 1, 1, 1, 0, 3, 1, 2, 1, 4, 2], [0, 2, 0, 2, 0, 0, 1, 1, 1, 2, 0, 2, 0, 2, 1, 1, 2, 2, 1], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0], [5, 0, 0, 0, 3, 0, 5, 0, 1, 3, 1, 0, 3, 4, 3, 4, 5, 1, 4], [0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0], [4, 4, 0, 2, 0, 0, 2, 3, 1, 0, 4, 4, 2, 0, 0, 0, 2, 1, 2, 1, 3, 0, 2, 1, 2, 3, 3, 4, 0, 1, 1, 0, 3, 3, 0, 3, 1, 1, 4, 0, 2, 2, 3, 1, 1, 2, 1, 1, 0, 0, 0], [1, 3, 1, 3, 0, 3], [4, 4, 1], [0, 0, 2, 1, 1, 2, 1, 0, 0, 1], [2, 1, 3, 3, 3, 2, 1, 1, 3, 2, 3, 2, 0, 3, 1, 3, 3, 0, 0, 1], [11, 10, 4], [0, 0, 1, 23, 23], [7, 3, 1, 5], [27, 9, 8, 4, 20, 23, 0, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 15, 15, 5, 10, 3, 6, 0, 0, 6, 4, 9, 4, 3, 2, 0, 1, 2, 45, 45, 37, 3, 134, 36, 30, 19, 18, 19, 20, 3, 51, 6, 3, 10, 20, 3, 5, 4, 8], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(1.0)\\nloopBreak% = 0\\nfor in2 in saveChr(int(368695.0)):{:\\nb0 = s0.rstrip(s0[int(5.0):( int(9.0) + int(2.0) )]) == s0\\nloopBreak% = 0\\nfor in0 in (\"\"7a\"\" + s0)[abs(i1):int(78093.0)]:{:\\nif ( i0 * max(i0, int(1.0)) ) \\g mod(mod(( int(9.0) + mod(max(( ( ( abs(( abs(i0) * divInt(saveOrd(saveChr(i2)),i1) )) + i1 ) + divInt(( i2 - abs(i1) ),int(5.0)) ) - int(8.0) ), i0),mod(saveOrd(in2[int(0.0):].rstrip(s0)),int(2.0))) ),( mod(i1,i0) - int(2.0) )),divInt(abs(int(5.0)),mod(saveOrd(s1),saveOrd(\"\"\\\\\\\\\"\"[:int(5.0)])))):{:\\ni1 = int(1.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = \"\"&%\"\"[:( i0 * divInt(int(3.0),int(0.0)) )].startswith((in0 + \"\"3\"\"[i1:]))\\nloopBreak% = 0\\nfor s1 in ((getCharFromString(s0, min(saveOrd(\"\"a\"\"), max(len(\"\"b\"\"), min(mod(int(9.0),( mod(max(int(6.0), abs(saveOrd(in0))),int(6.0)) + int(3.0) )), max(i0, divInt(i1,i0)))))) + ((in1 + (\"\"!1;\"\" + \"\"5\"\")) + in0.rstrip())) + (\"\"L\"\" + \"\">\"\")[i2:int(28.0)][int(5.0):i1])[:int(1.0)]:{:\\nres0 = \"\"x\"\"[:i0].startswith(\"\"@KEx\"\")\\nif int(08.0) != i2:{:\\nb2 = max(max(i2, i2), int(1.0)) \\l max(i2, i0)\\nb1 = not True\\nin1 = in2\\ni2 *= int(4.0)\\n:}else:{:\\nb0 = divInt(i1,divInt(i1,int(7.0))) \\ge ( i2 + divInt(min(( int(2.0) * int(2.0) ), ( len(s1) - max(abs(i1), divInt(divInt(( ( max(saveOrd(in1), i0) - i2 ) * abs(int(4.0)) ),( i0 * ( i2 - int(1.0) ) )),int(4.0))) )),i0) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [2, 0, 1, 0], [0], [2, 0, 2], [0], [0, 0], [], [], [2], [1], [1], [0], [], [], [], [], [], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [3, 7, 4, 1, 5, 9, 9, 6, 6, 0, 3, 3, 0, 2, 7, 1, 6, 7, 4, 6], [0, 1, 0, 0, 0, 1, 2, 0, 0, 1, 1, 2, 1, 2, 0, 2, 1], [], [0, 1, 0, 0, 2, 2, 1, 3, 0, 3, 1, 2, 3, 3, 3, 2, 0, 3, 3, 2, 2, 2, 2, 2, 3, 3, 2, 0, 1, 3, 1, 3, 0, 0, 1, 3, 3, 0, 3, 0, 0, 3, 2, 2, 3, 3, 1, 3, 2, 0, 0, 1, 1, 2, 3, 2, 2, 1, 3, 0, 2, 1, 1, 0, 0, 2, 0, 2, 1, 3, 1, 3], [1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 4, 2, 4, 2, 1, 0, 1, 3, 3, 0, 1, 4, 2, 1, 0, 0, 4, 1, 4, 4, 3], [2, 1, 1, 0, 1, 1, 0, 2, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 0], [2, 0, 4, 4, 2, 1, 5, 3, 2, 1, 1, 2], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0], [0, 2, 1, 2, 3, 1, 4, 2, 3, 4, 0, 0, 2, 0, 0, 0, 0, 4, 4, 0, 4, 3, 3, 1, 1, 1, 0], [3, 1, 1, 1, 3], [4, 0], [2, 0, 0, 2], [3, 0, 3, 3, 1, 1, 0, 1, 2, 2, 0], [20, 2, 2], [16, 4, 9], [3, 9], [10, 22, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 20, 20, 17, 0, 72, 19, 22, 11, 8, 12, 11, 1, 27, 5, 2, 4, 11, 3, 3, 2, 3], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\nin1 = \"\"\"\\\\\"U=\"\"[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = int(3.0) \\g i1\\nin1 = (\"\"qe\"\" + (saveChr(i0) + s2)[divInt(( int(7.0) * min(i0, saveOrd(s1)) ),int(4159.0)):( abs(saveOrd(in2[abs(divInt(i0,max(min(( ( mod(divInt(divInt(max(len(in0), ( i1 - int(9.0) )),len(s2)),int(6.0)),min(i2, i0)) - int(6.0) ) + max(saveOrd(s1), i0) ), abs(i1)), i1))):])) - max(( mod(min(min(int(0.0), saveOrd(saveChr(( i2 - i1 )))), int(3.0)),int(3.0)) + mod(max(divInt(( int(0.0) * saveOrd(saveChr(i2)) ),( int(2.0) - int(7.0) )), i0),i2) ), ( i1 - ( int(1.0) + saveOrd(s1) ) )) )].rstrip(((\"\"C\"\" + \"\"j39\"\") + \"\"C\"\").lstrip()))[int(6746.0):len(s2)]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1, 3], [0], [], [1, 2, 3, 1, 0, 1, 3], [1], [1, 1, 4], [], [0], [4, 4], [0, 1], [], [4, 1, 0], [1], [], [], [3, 1], [], [7], [], [7]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 2, 2, 0, 2, 1, 0, 0, 2, 0, 1, 0, 1], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(int(13.0))\\nin1 = \"\"$h\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [2, 0], [1], [3, 0], [], [2], [0], [], [5], [1], [], [4, 1], [0], [], [], [2], [], [], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 1, 0, 2, 1, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(\"\"7\"\", abs(i2))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [2], [], [2], [], [3], [], [], [], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 9, 1, 4, 3, 4, 5, 1, 9, 5, 6, 5, 5, 9, 5, 2, 4, 9, 5], [1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 1, 0, 1], [1], [1, 2, 0, 2, 2, 0, 2, 2, 2, 2, 1, 1, 2, 3, 3, 2, 2, 0, 3, 1, 2, 0, 3, 3, 1, 2, 3, 1, 3, 0, 0, 2, 2, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3, 1, 0, 0, 2, 3, 1, 0, 3, 1, 1, 2, 1, 3, 0, 1, 0, 3, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0], [3, 1, 1, 3, 1, 3, 1, 3, 3, 3, 3, 0, 2, 4, 0, 1, 0], [1, 1, 2, 2, 1, 0, 1, 2, 2], [1, 1, 1, 1, 1, 0, 0], [2, 1, 2, 3, 0], [1, 1, 1, 1], [], [2, 4, 1, 4, 2, 0, 0, 0, 0, 4, 0, 4, 4, 2, 2, 3, 1, 4, 2, 2, 1, 2, 1], [1, 1, 3, 2, 2, 1], [3], [2, 2, 0, 1, 0, 0, 1], [0, 1, 1, 1], [21], [17, 0, 15], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 13, 0, 62, 16, 17, 9, 7, 5, 4, 0, 23, 6, 1, 7, 4, 1, 3, 0, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveChr(int(891.0))[mod(i1,mod(mod(i0,( ( ( ( int(4.0) - int(3.0) ) - ( len(\"\"V\"\") * max(mod(mod(i2,max(int(4.0), divInt(i2,len(saveChr(max(int(5.0), ( len(s2[int(1.0):]) * max(i1, i0) ))))))),( divInt(int(9.0),int(5.0)) - i1 )), i1) ) ) + len(s1) ) - len(s2) )),len(in0))):] != s0.lstrip((\"\"r\"\" + saveChr(len(\"\"a\"\"[min(abs(int(6.0)), i0):i0][( saveOrd(\"\"p\"\"[:int(5.0)]) * i1 ):min(int(5.0), int(9.0))])))[:( int(52.0) * max(i0, int(4.0)) )][i1:min(int(9.0), int(5.0))].capitalize().capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 1, 0, 0], [1, 1], [2], [0], [0], [], [], [], [2], [0, 2], [0], [2], [2], [], [], [0], [1, 1], [5, 6], [0, 1, 0, 2], [], [0, 2, 0, 3, 1, 1, 0, 0], [1], [2, 0], [], [1], [2, 1], [0, 1, 1, 0, 1, 0, 0, 1], [0], [4, 1, 3, 1, 2, 1, 1], [2], [], [0], [1, 2, 1, 3, 3, 2, 1, 2], [], [1, 10, 16], [9, 8, 8], [16, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 1, 1, 1, 2, 0, 5, 1, 1, 0, 1, 1, 8, 0, 7, 1, 0, 1, 8, 0, 3, 3, 2], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not \"\"b9\"\".capitalize() == (\"\"k\"\" + \"\"-#\"\"[i0:mod(i1,abs(int(5.0)))]):{:\\ns2 = \"\"8q8\"\"\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 1], [3, 1, 7, 3, 7], [1, 0, 0, 1, 0, 1, 1, 1], [], [2, 1, 1, 2, 3, 0, 3, 2, 0, 0, 0, 3, 1, 0, 2, 3, 1, 0, 0, 0], [0, 1, 0, 0], [1, 0, 0, 4], [0, 0, 0], [1], [4, 0, 0, 1], [1], [], [4, 2, 2, 0, 4, 4, 4, 4, 0, 2, 3, 1, 0], [3, 0, 3, 0, 2], [4, 1], [2, 2, 0], [0], [6], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 8, 0, 20, 4, 4, 3, 1, 4, 1, 0, 13, 5, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0[( int(3.0) + int(17.0) ):][mod(max(i1, min(( i0 + i0 ), i1)),min(int(3.0), i0)):].rstrip(getCharFromString(getCharFromString(s0.capitalize(), ( saveOrd((\"\"G\"\" + s1)[int(7.0):i1]) + i1 )).rstrip(), i1))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 0], [5], [0, 1, 2], [0], [5], [3], [0], [], [], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [9, 3, 4, 0, 4, 1, 1, 7, 7, 3, 9, 5, 9, 6, 5], [0, 1, 2, 1, 1, 0, 0, 2, 0, 0], [], [1, 3, 1, 3, 3, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 0, 2, 0, 0, 0, 2, 0, 2, 3, 1, 2, 3, 0, 3, 0, 2, 1, 2, 1, 3, 0, 2, 3, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [1, 1, 3, 1, 4, 3, 1, 3], [0, 0, 2, 0, 2, 0], [0, 1, 1, 0, 1, 1], [3, 4, 1, 2, 2], [1, 1, 1, 1, 1, 1], [], [3, 4, 4, 3, 0, 1, 3, 0, 4, 3, 3, 2, 1, 2, 2, 4, 3, 1, 1, 4, 2, 0, 1, 0, 2, 1, 4, 4, 0], [3, 2, 1, 2, 0, 3, 3], [2, 0, 0], [1, 1, 0, 2, 1], [1, 0, 0, 0, 2, 1], [14, 9, 3], [4, 18], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 15, 15, 10, 0, 42, 12, 8, 6, 6, 5, 6, 0, 29, 7, 3, 5, 6, 3, 2, 1, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( int(9.0) != max(int(34.0), max(len(((in0 + \"\"e\"\").capitalize().strip() + (in1 + saveChr(int(0.0))))), int(41.0))) and ((\"\"O\"\"[:int(17.0)] + (\"\"J\"\" + \"\"D\"\").capitalize()[divInt(mod(mod(( int(7.0) + ( int(3.0) + i0 ) ),( i1 * i2 )),i1),divInt(i1,( max(int(9.0), mod(saveOrd(getCharFromString(s1[i0:], len(\"\"3\"\"))),i0)) + ( int(5.0) * ( int(9.0) + max(i2, mod(len(s2),int(6.0))) ) ) ))):int(5.0)][:i0]) + \"\"s\"\"[:i0]).endswith(s2.lstrip().lstrip()) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [1, 1, 1], [9, 5, 4], [0, 2, 0], [0], [1, 1, 0, 2, 3, 1, 1, 0], [0, 1], [1], [2, 0], [], [5, 2], [0, 0, 1], [], [1, 0, 4], [1], [], [], [1, 3, 1], [], [13, 17], [], [15]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 3, 0, 2, 0, 0, 0, 3, 0, 2, 0, 1], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\"n,r\"\".endswith(in2)\\ni0 = int(9.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 2, 1, 2, 0, 2, 1, 0, 1], [0, 2, 1], [0, 0, 1, 1, 0, 2, 1, 0], [0], [0, 0, 0, 0], [], [], [1, 0, 3, 1, 1], [3, 0], [0, 0, 2, 2, 0, 1, 1, 2], [0, 0], [3, 3, 1], [1, 0, 3], [1], [1], [0], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [9, 0, 3, 4, 9, 6, 2, 5, 7, 2, 6, 9, 3, 6, 2, 7, 0, 5, 1, 3, 5, 3, 0, 1, 7, 0, 6, 4, 0, 3, 0, 2, 6, 0, 6, 4, 2, 9, 8, 4, 4, 6, 0, 8, 5, 2, 3, 4, 4, 3, 4, 9, 3, 0, 3, 1, 6, 2, 2, 7, 3, 0, 3, 6, 7, 3, 3, 3, 4, 2, 1, 0, 5, 0, 7, 2, 4, 9, 9], [2, 1, 2, 0, 0, 1, 1, 2, 1, 2, 0, 2, 2, 1, 1, 2, 0, 2, 2, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 1, 2, 0, 2, 1, 1, 1, 0, 2, 2, 0, 2, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 1, 2, 1, 2, 2, 0, 0, 1, 2, 1, 2, 0, 1, 1, 0, 1, 2, 2, 1, 2, 2, 0, 2], [0, 1, 1], [3, 0, 2, 1, 0, 2, 0, 0, 3, 2, 1, 0, 2, 2, 2, 3, 3, 2, 0, 1, 0, 0, 2, 0, 3, 1, 2, 0, 3, 0, 3, 2, 0, 2, 2, 2, 1, 3, 1, 3, 1, 1, 1, 3, 2, 0, 1, 1, 1, 3, 1, 3, 0, 3, 2, 3, 3, 1, 0, 1, 3, 2, 2, 3, 3, 0, 1, 1, 0, 0, 1, 2, 2, 1, 1, 1, 0, 3, 1, 3, 0, 3, 0, 2, 2, 3, 3, 0, 3, 2, 1, 3, 1, 3, 3, 1, 2, 0, 3, 2, 2, 2, 3, 1, 2, 2, 1, 3, 1, 2, 2, 2, 3, 3, 1, 1, 0, 3, 3, 0, 2, 3, 0, 2, 0, 3, 3, 2, 1, 3, 0, 1, 1, 2, 3, 1, 0, 0, 2, 3, 1, 2, 3, 2, 3, 1, 2, 3, 0, 1, 3, 2, 2, 0, 1, 3, 0, 3, 2, 3, 1, 0, 3, 0, 0, 3, 3, 1, 1, 2, 3, 2, 2, 3, 2, 2, 0, 3, 1, 2, 1, 3, 2, 2, 1, 1, 1, 3, 2, 0, 2, 2, 1, 2, 1, 3, 0, 1, 1, 2, 3, 2, 2, 3, 3, 1, 2, 2, 0, 3, 2, 0, 0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 3, 2, 3, 1, 3, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 2, 2, 2, 2, 0, 1, 2, 3, 2, 3, 3, 0, 2, 0, 0, 1, 2, 3, 3, 3, 1, 2, 0, 2, 2, 0, 0, 2, 1, 0, 3, 3, 3, 1, 0, 2, 0, 1, 3, 0, 3, 0, 1, 0, 2, 1, 1, 2, 0, 3, 3, 0, 0, 0, 3, 3, 0, 3, 1, 0, 0, 1, 2, 0, 3, 0, 2, 0, 3, 2, 0, 0, 2, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [2, 1, 3, 1, 2, 2, 1, 0, 2, 1, 0, 4, 2, 3, 4, 1, 2, 1, 4, 0, 1, 4, 1, 1, 3, 3, 3, 4, 4, 0, 4, 2, 3, 1, 3, 4, 3, 1, 0, 3, 4, 2, 3, 3, 2, 2, 4, 1, 1, 3, 2, 1, 1, 1, 1, 1, 0, 3, 4, 1, 2, 3, 3, 2, 1, 1, 0, 2, 2, 4, 0, 3, 4, 3, 3, 0, 4, 0, 1, 0, 4], [1, 1, 1, 0, 1, 0, 2, 1, 1, 2, 2, 0, 1, 2, 0, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 0, 1, 2, 2, 1, 0, 0, 0, 1, 1, 2, 0, 1, 0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 5, 4, 2, 3, 3, 5, 5, 1, 0, 3, 2, 0, 2, 1, 3, 3, 1, 5, 3, 5, 2, 4, 0, 3], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [0], [4, 3, 1, 4, 2, 2, 1, 4, 0, 0, 4, 3, 0, 2, 2, 0, 2, 2, 4, 4, 1, 1, 1, 2, 4, 2, 2, 1, 4, 0, 2, 2, 1, 2, 2, 1, 4, 2, 2, 4, 0, 0, 4, 4, 0, 4, 1, 1, 4, 2, 4, 4, 0, 1, 0, 4, 0, 2, 2, 0, 4, 4, 0, 1, 0, 1, 4, 2, 4, 2, 1, 4, 2, 4, 2, 0, 0, 0, 0, 0, 1, 4, 0, 0, 1, 2, 4, 4, 1, 3, 3, 0, 4, 2, 1, 1, 0, 1], [0, 2, 0, 2, 0, 0, 3, 2, 3, 3, 1, 3, 2, 0, 3, 1, 3, 0, 0, 3, 2, 0, 2, 1, 1, 1, 1], [5, 3, 3, 2, 0, 2, 4], [0, 0, 0, 2, 0, 1, 0, 2, 2, 1, 0, 2, 2, 0, 2, 2, 1, 0, 2, 1, 0, 2, 0, 1], [3, 2, 3, 3, 0, 1, 0, 2, 1, 2, 0, 3, 2, 1, 3, 3, 1, 0, 2, 0, 0, 0, 2, 3, 1, 2, 2, 0, 2, 2], [7, 23, 0, 11, 25, 9, 5, 15], [3, 1, 21, 6, 12], [2, 7, 3, 9, 6, 2, 2, 5, 9, 8], [14, 18, 28, 18, 23, 16, 19]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 3, 8, 1, 4, 0, 0, 5, 2, 8, 2, 3, 3, 1, 1, 1, 79, 79, 74, 3, 312, 88, 81, 40, 50, 25, 30, 1, 98, 27, 7, 24, 30, 8, 5, 10, 7], "tree_depth": 79, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\nb0 = res0\\ni2 = abs(i1)\\nloopBreak% = 0\\nfor s1 in getCharFromString((\"\"+\"\" + \"\"2\"\"[( int(9.0) - i2 ):( i0 - i0 )][max(divInt(int(034.0),i1), divInt(( mod(len(getCharFromString(in2, max(mod(i1,int(9.0)), i2))),i1) - ( i2 + abs(int(6.0)) ) ),( i0 - abs(i2) ))):max(mod(i2,( mod(( int(2.0) + min(int(5.0), abs(int(7.0))) ),int(2.0)) * int(6.0) )), max(( i1 - int(93.0) ), int(627.0)))].capitalize()), int(0.0)):{:\\ni1 -= min(int(5.0), saveOrd(in1))\\nloopBreak% = 0\\nwhile (s2 + in0[i2:][abs(( len(getCharFromString(getCharFromString(\"\"/\"\", saveOrd(\"\"]\"\")), int(1.0))[:i0][int(3.0):max(mod(( abs(max(i2, int(5.0))) * int(3.0) ),i2), i2)]) * int(0.0) )):divInt(( int(1.0) + int(7.0) ),int(0.0))]).capitalize() != \"\"HdX7b3A\"\":{:\\nb1 = \"\"/\"\"[i2:][saveOrd(in0.capitalize()):].strip(\"\"9\"\"[int(6.0):min(i1, max(i1, ( ( saveOrd(\"\"v\"\"[max(i2, max(mod(int(4.0),len(in2.lstrip(in2)[int(0.0):][len(saveChr(len(s1.strip()))):int(3.0)].lstrip(\"\">\"\".capitalize()))), ( i0 - saveOrd(\"\"-\"\") ))):][( mod(( saveOrd(getCharFromString(saveChr(int(0.0)).lstrip()[divInt(( int(2.0) * min(int(6.0), ( ( ( saveOrd(s0) + abs(int(0.0)) ) - int(6.0) ) - i0 )) ),len(\"\"g\"\")):], max(i0, mod(len(in0),i1)))) - ( i0 * saveOrd(s2.strip()) ) ),len(s0[divInt(int(4.0),max(i1, int(2.0))):int(9.0)][:divInt(min(int(8.0), i2),i0)])) - mod(len(getCharFromString(getCharFromString(s2, int(4.0)), mod(saveOrd(\"\"L\"\"),mod(abs(int(4.0)),( len(s1) - i2 ))))),int(6.0)) ):]) * len(\"\"6\"\") ) - ( divInt(i1,int(0.0)) - abs(i1) ) )))][:abs(mod(saveOrd(\"\"Z\"\"[:int(8.0)].capitalize()[i1:].rstrip(getCharFromString(in0[max(i0, i2):].capitalize()[max(len(in0), int(5.0)):int(2.0)], ( abs(divInt(( max(( divInt(i2,max(int(3.0), divInt(int(4.0),max(( mod(int(4.0),int(3.0)) * int(4.0) ), max(( i0 * ( mod(int(9.0),mod(int(3.0),max(i2, int(0.0)))) + int(3.0) ) ), ( min(divInt(divInt(len(s1),saveOrd(in2)),int(1.0)), mod(mod(i1,max(mod(i0,i2), int(6.0))),( i0 - int(2.0) ))) * divInt(i0,int(2.0)) )))))) * mod(int(7.0),abs(( len(in0) - int(3.0) ))) ), len(\"\"J\"\")) + divInt(int(0.0),mod(int(3.0),divInt(int(6.0),mod(int(7.0),mod(i0,( ( mod(mod(i1,int(3.0)),divInt(abs(mod(max(max(i0, ( i0 + i1 )), int(3.0)),divInt(min(abs(abs(int(3.0))), mod(i1,( divInt(i2,i1) + mod(int(4.0),i2) ))),saveOrd(saveChr(min(len(in2), int(2.0))))))),i2)) - ( i0 - int(1.0) ) ) * saveOrd(s2) )))))) ),i0)) + len(\"\"F\"\") )))),i1))])[int(0.0):i2] != saveChr(divInt(int(5.0),int(0.0)))[mod(i1,len(saveChr(min(i2, i0)))):i1]\\nif ( saveOrd(\"\"2\"\") \\ge min(i1, max(int(7.0), i0)) or i1 \\l int(24.0) ):{:\\nin1 = ((s0 + saveChr(mod(i2,min(i2, ( i1 - saveOrd(\"\":\"\"[:mod(i2,i2)]) ))))) + \"\"m\"\")\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += mod(i2,int(99.0))\\nb1 = in0 not in \"\"25P98\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 2, 2, 2, 1, 0, 2, 1, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0], [1, 2, 1, 2, 2, 2, 1], [1, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 1, 2, 1], [], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 1, 0, 1, 0], [2, 5, 2, 4, 1], [0, 1, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1], [0, 0, 0, 0, 0], [4, 5, 2, 5], [0, 2, 1], [], [1], [0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [7, 4, 9, 8, 1, 0, 3, 0, 4, 4, 3, 8, 8, 6, 2, 5, 2, 2, 3, 1, 9, 0, 8, 8, 3, 7, 9, 3, 9, 3, 3], [0, 1, 2, 1, 1, 2, 2, 1, 1, 0, 0, 1, 0, 2, 1, 1, 0, 2, 0, 0, 1, 1, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 1, 2, 2, 0], [1, 1, 0, 1, 0, 0], [0, 2, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 2, 0, 3, 3, 2, 3, 3, 0, 2, 3, 2, 1, 0, 1, 1, 1, 2, 2, 3, 2, 3, 0, 3, 0, 0, 2, 0, 0, 1, 0, 2, 3, 2, 1, 2, 2, 0, 0, 3, 3, 1, 2, 3, 2, 0, 3, 3, 0, 3, 1, 0, 3, 3, 0, 3, 0, 0, 1, 2, 0, 3, 1, 0, 0, 0, 0, 0, 3, 3, 1, 2, 1, 1, 2, 0, 3, 0, 1, 1, 1, 3, 0, 3, 0, 1, 2, 0, 1, 1, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 2, 0, 2, 2, 3, 4, 4, 4, 4, 2, 1, 4, 0, 2, 3, 1, 0, 3, 1, 0, 3, 4, 4], [1, 1, 1, 1, 1, 0, 2, 0, 2, 0, 2, 0, 2], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [1, 2, 2, 3, 4, 5, 3, 4, 0, 0, 1, 2, 3, 3, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [], [2, 3, 2, 2, 1, 0, 4, 1, 0, 1, 1, 4, 1, 2, 0, 2, 2, 0, 1, 2, 0, 1, 1, 1, 0, 0, 2, 2, 0, 3, 3, 3, 2, 1, 1, 1, 0, 0, 0, 2, 4, 2, 2, 4, 4, 0, 1, 2, 1, 2, 4, 2, 1, 0], [2, 3, 2, 0, 1, 3], [3, 4], [0, 2, 2, 1, 2, 0, 2, 2, 2, 0, 1, 1, 2, 0, 0, 2], [3, 2, 0, 1, 1, 0, 2, 3, 0, 0, 0, 2, 0, 3, 2, 1, 2, 3, 2, 1, 1, 2], [17, 8, 3, 19, 13, 17], [5, 16, 19, 2, 12], [9, 2, 0, 6, 4, 9, 2], [28, 20, 24, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 21, 21, 7, 14, 0, 11, 0, 0, 5, 5, 12, 5, 4, 3, 0, 1, 3, 31, 31, 40, 6, 102, 21, 24, 13, 11, 17, 22, 0, 54, 6, 2, 16, 22, 6, 5, 7, 4], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i1\\nif b0:{:\\nloopBreak% = 0\\nwhile mod(( i2 - divInt(i1,i1) ),i2) == int(7.0):{:\\nif (\"\"]\"\"[int(4.0):][int(9.0):] + s1)[i2:divInt(i1,min(abs(( min(abs(i1), ( abs(( int(8.0) - i0 )) - int(1.0) )) - int(0.0) )), int(3.0)))].startswith(\"\"9\"\".capitalize()):{:\\nb1 = not s2.endswith(\"\"R\"\")\\ni0 += mod(( len(\"\"f\"\") * divInt(saveOrd(\"\"q\"\".lstrip(s2[:i1])),saveOrd(in0[i0:i2][mod(i1,i1):])) ),int(0.0))\\nloopBreak% = 0\\nwhile False:{:\\nin1 = \"\"I\"\"\\nin2 = in0[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = \"\"2\"\" == \"\";\"\"\\nb1 = mod(saveOrd(\"\"DTN\"\"),mod(int(44.0),mod(( i2 + i0 ),saveOrd(in1)))) != abs(int(38.0))\\nloopBreak% = 0\\nwhile ( max(( i0 * saveOrd(s0) ), min(i1, abs(int(86.0)))) + i1 ) == len(s0[max(i2, min(i2, i2)):][int(252.0):]):{:\\nloopBreak% = 0\\nwhile (((\"\"0R\"\"[( i0 * len(\"\"?\"\") ):int(23.0)] + \"\"6t4*\"\") + s1) + s2).endswith(in0):{:\\ni2 = i0\\nif i2 \\le i2:{:\\nin0 = getCharFromString(saveChr(i2), i0)[max(min(int(1.0), ( int(9.0) + int(0.0) )), divInt(i2,len(s1))):][:i0].capitalize()[:int(8.0)]\\n:}else:{:\\nb0 = int(8.0) \\g int(3.0)\\n:}\\ni2 *= saveOrd(\"\"9\"\")\\ni2 = i1\\ns1 = \"\"cm\"\"[saveOrd(\"\"2\"\"[i2:].rstrip(s0)[int(7.0):divInt(i2,int(9.0))]):int(393.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni0 = int(3.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 5], [1, 0, 2], [0], [0, 0, 0, 1, 0], [0], [], [1], [], [5, 2, 2], [1, 0, 1], [], [3, 4, 4, 2, 0, 3, 1, 2, 0, 1], [3, 0], [4], [2, 1], [0, 3, 0], [17, 2], [], [], [11]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 3, 3, 0, 10, 2, 1, 2, 3, 2, 0, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (getCharFromString(s2[i1:], i0).rstrip((\"\"R\"\" + s2[:i2])) + \"\"(C\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1], [1, 1, 2, 2, 2, 0, 1, 0, 2, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0, 2, 0, 0, 2, 1, 2, 0, 2, 0, 1, 1, 0], [0, 0, 0, 2, 1, 1, 1, 0, 1, 1, 1, 1, 2], [1, 0, 2, 0, 1, 1, 0, 0, 2, 2, 0, 2, 1, 0, 2, 1, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [1, 0, 1, 0, 0, 0, 1, 3, 2], [0, 1, 4, 5, 1, 1, 2], [2, 1, 2, 2, 1, 2, 0, 0, 0, 1, 2, 1, 2, 0, 2, 0, 1, 0, 1, 0, 1, 2, 0, 2], [0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 0, 1, 0, 2, 4, 4], [3, 3, 0, 2, 3, 1, 2, 0], [1, 0, 0], [0], [1, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 4, 6, 6, 8, 5, 7, 1, 9, 6, 8, 7, 1, 3, 7, 1, 8, 8, 7, 3, 1, 1, 9, 4, 7, 1, 1, 8, 7, 0, 3, 1, 0, 0, 6, 1, 9, 4, 3, 2, 2, 9, 2, 0, 3, 5, 2, 2, 8, 5, 4, 8, 4, 2, 2, 4, 0, 8, 8, 5, 9, 2, 8, 8, 7, 8, 9, 6, 9, 6, 4, 5, 7, 6, 8, 5, 2, 1, 2, 3, 1, 2, 5, 8, 9, 2, 1, 1, 2, 7, 2, 9, 6, 0, 1, 1, 8, 1, 7, 1, 0, 0, 9, 2, 8, 9, 3, 8, 8, 3, 3, 7, 2, 3, 0, 3, 4, 3, 0, 1, 0, 8, 3, 7, 8, 0, 1, 7, 6, 5, 3, 8, 2, 7, 2], [2, 0, 2, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 2, 0, 2, 2, 2, 1, 2, 0, 1, 0, 1, 2, 2, 0, 1, 2, 2, 0, 2, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 2, 2, 1, 2, 2, 0, 1, 2, 2, 1, 0, 1, 2, 0, 1, 2, 0, 1, 1, 1, 2, 2, 0, 2, 1, 0, 1, 0, 2, 1, 1, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 0, 2, 2, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0], [1, 1, 3, 1, 0, 3, 3, 0, 2, 3, 3, 1, 1, 0, 2, 0, 1, 0, 2, 3, 3, 3, 1, 3, 1, 0, 2, 3, 3, 2, 3, 0, 2, 1, 0, 2, 3, 2, 2, 1, 0, 3, 1, 2, 0, 2, 2, 1, 3, 2, 0, 3, 1, 2, 3, 2, 0, 1, 0, 1, 1, 2, 0, 2, 0, 0, 0, 1, 1, 3, 0, 1, 3, 1, 1, 1, 1, 3, 0, 3, 2, 2, 2, 2, 2, 2, 3, 1, 3, 2, 2, 1, 2, 2, 2, 3, 0, 2, 1, 1, 3, 1, 1, 2, 3, 3, 1, 2, 2, 3, 3, 1, 1, 1, 3, 3, 1, 0, 1, 0, 1, 2, 2, 3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 0, 3, 0, 1, 3, 0, 2, 1, 0, 3, 3, 1, 0, 2, 1, 0, 3, 1, 3, 1, 2, 0, 3, 0, 0, 1, 3, 2, 2, 0, 0, 0, 1, 0, 2, 3, 3, 1, 3, 0, 0, 1, 0, 0, 1, 2, 2, 3, 0, 2, 1, 2, 0, 3, 3, 0, 2, 3, 3, 0, 2, 2, 3, 0, 3, 2, 2, 2, 1, 3, 2, 3, 2, 2, 3, 2, 2, 3, 2, 3, 2, 2, 3, 3, 3, 0, 1, 0, 0, 2, 3, 0, 2, 3, 0, 1, 3, 2, 1, 0, 3, 0, 2, 1, 2, 1, 1, 0, 1, 1, 2, 1, 3, 2, 2, 0, 3, 0, 0, 3, 0, 0, 3, 2, 2, 3, 3, 0, 2, 2, 2, 1, 1, 1, 3, 3, 3, 1, 2, 3, 0, 2, 3, 3, 1, 0, 0, 0, 2, 2, 1, 3, 1, 2, 3, 3, 2, 2, 1, 0, 3, 1, 3, 0, 0, 0, 0, 2, 3, 2, 0, 0, 0, 3, 3, 3, 0, 2, 1, 3, 3, 1, 3, 2, 3, 3, 3, 1, 3, 3, 1, 2, 1, 1, 1, 1, 1, 2, 3, 2, 3, 3, 3, 1, 1, 0, 2, 2, 3, 0, 0, 2, 1, 3, 2, 3, 2, 1, 3, 1, 2, 2, 0, 3, 2, 3, 2, 3, 3, 2, 0, 2, 3, 3, 2, 3, 1, 2, 3, 3, 1, 2, 0, 2, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 1, 2, 1, 1, 0, 1, 1, 0, 1, 2, 1, 1, 2, 1, 3, 3, 2, 2, 1, 3, 2, 1, 0, 0, 2, 3, 1, 3, 3, 2, 0, 1, 2, 2, 1, 0, 0, 0, 2, 0, 2, 1, 1, 3, 2, 1, 2, 0, 2, 3, 3, 2, 1, 2, 3, 0, 3, 1, 0, 2, 2, 3, 2, 3, 2, 1, 0, 2, 2, 3, 0, 0, 2, 3, 3, 1, 0, 3, 0, 0, 2, 2, 2, 3, 0, 1, 3, 2, 1, 1, 3, 2, 3, 1, 1, 1, 3, 0, 2, 1, 1, 3, 2, 2, 3, 2, 0, 2, 2, 1, 0, 0, 3, 3, 1, 3, 1, 1, 2, 0, 3, 3, 0, 3, 3, 2, 2, 3, 0, 3, 0, 2, 1, 2, 2, 1, 3, 0, 1, 3, 3, 1, 2, 2, 3, 3, 0, 1, 3, 2, 1, 2, 2, 2, 1, 2, 3, 0, 1, 0, 2, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0], [4, 3, 3, 0, 2, 0, 0, 3, 4, 4, 2, 1, 1, 4, 4, 4, 2, 1, 0, 2, 3, 2, 3, 4, 4, 0, 2, 0, 4, 1, 4, 4, 3, 0, 2, 3, 1, 0, 0, 1, 3, 2, 2, 0, 1, 4, 2, 2, 2, 2, 0, 0, 2, 3, 2, 1, 4, 0, 4, 2, 2, 3, 2, 4, 4, 1, 1, 3, 4, 0, 4, 3, 4, 0, 3, 4, 2, 2, 3, 4, 3, 1, 3, 1, 1, 4, 0, 4, 0, 0, 2, 4, 4, 2, 1, 4, 3, 0, 3, 3, 4, 3, 1, 0, 3, 3, 2, 2, 2, 4, 0, 2, 1, 1, 4, 4, 3, 3, 1, 2, 2, 1, 3, 3, 2, 0, 0, 1, 0, 4, 1, 4, 4, 4, 3, 4, 2, 0, 0, 3, 1, 3, 1, 0, 2, 0, 3, 4, 4, 3, 0, 4, 2], [0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 2, 1, 0, 1, 2, 2, 2, 0, 1, 2, 0, 2, 0, 1, 1, 0, 2, 0, 2, 2, 0, 2, 1, 1, 0, 1, 2, 2, 0, 2, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 1, 0, 0, 1, 2, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 0, 2, 3, 2, 3, 1, 3, 2, 5, 4, 2, 3, 5, 2, 0, 2, 0, 2, 0, 4, 0, 4, 3, 0, 4, 5, 5, 1, 2, 3, 4, 3, 0, 1, 0, 3, 1, 0, 5, 5, 5, 3, 3, 4, 2, 5, 4, 5, 4, 0, 1, 2, 0, 2, 2, 1, 4, 4, 5, 2, 0, 1, 2, 0, 2], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0], [4, 0, 4, 4, 3, 3, 3, 2, 3, 2, 0, 4, 2, 0, 2, 2, 2, 1, 2, 1, 4, 2, 2, 4, 0, 0, 0, 4, 4, 0, 2, 0, 4, 0, 3, 4, 4, 1, 2, 2, 2, 1, 3, 1, 3, 1, 2, 4, 4, 1, 2, 1, 1, 4, 1, 4, 1, 0, 4, 0, 0, 2, 2, 1, 0, 4, 0, 4, 2, 1, 0, 1, 0, 2, 2, 1, 0, 0, 3, 0, 1, 2, 4, 2, 4, 4, 0, 1, 3, 0, 3, 2, 0, 2, 4, 4, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 2, 0, 4, 0, 0, 2, 0, 2, 2, 2, 4, 1, 2, 2, 4, 1, 2, 2, 2, 0, 2, 0, 2, 4, 1, 1, 2, 0, 1, 4, 4, 2, 4, 2, 4, 2, 4, 1, 1, 4, 1, 4, 1, 0, 1, 4, 0, 0, 4, 4, 2, 1, 0, 2, 4, 4, 0, 1, 1, 1, 0, 0, 2, 4, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 0, 4, 1, 2, 0, 1, 1, 0, 2, 1, 2, 1, 0, 1, 4, 4, 4, 0, 4, 1, 1, 1, 2, 0, 0, 3, 2, 1, 1, 4, 0, 1, 2, 2, 2, 0, 1, 4, 0, 1], [2, 3, 2, 0, 1, 0, 0, 0, 2, 0, 1, 0, 3, 2, 2, 3, 3, 2, 2, 2, 3, 3, 0, 2, 3, 2, 1, 2, 1, 3, 2, 1, 3, 0, 3, 3, 2, 0, 1, 0, 0, 1, 2, 2, 3, 1, 3], [4, 4, 2, 5, 3, 2, 3, 1, 4, 5, 4, 5, 2], [0, 1, 1, 0, 2, 2, 1, 1, 2, 1, 1, 0, 2, 2, 1, 2, 0, 0, 0, 2, 1, 2, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 1, 2, 1, 0, 1, 2, 2, 0, 0, 1, 2, 1, 1, 1, 1, 2, 2, 0], [1, 1, 0, 3, 3, 3, 2, 3, 0, 0, 0, 0, 0, 3, 2, 1, 0, 0, 1, 0, 3, 1, 0, 0, 0, 1, 0, 0, 1, 3, 2, 3, 0, 2, 1, 2, 1, 0, 3, 1, 0, 0, 2, 3, 3, 2, 0, 1, 3, 0, 0, 3, 1, 3, 2, 3, 2, 3, 0, 0, 3, 1], [9, 20, 6, 22, 23, 13, 24, 21, 20, 21, 25, 14, 3, 24, 4, 21, 12, 17, 24, 14, 0, 19, 20], [16, 0, 3, 12, 20, 12, 25, 25, 5, 16, 16, 19, 18], [7, 7, 5, 2, 7, 5, 6, 3, 5], [22, 11, 6, 28, 10, 7, 21, 9, 23, 24, 26, 5, 21, 14, 2, 8, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 31, 31, 13, 18, 4, 10, 0, 0, 9, 7, 24, 7, 9, 8, 3, 1, 7, 136, 136, 117, 5, 551, 154, 153, 81, 73, 67, 62, 4, 220, 47, 13, 53, 62, 23, 13, 9, 17], "tree_depth": 85, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(8.0)\\nb1 = s0.capitalize() != ((((s2[:int(9.0)] + getCharFromString(s0[:saveOrd(\"\"q\"\"[int(4.0):][i0:][len(\"\"a\"\"[:len(saveChr(i2))]):mod(min(abs(int(6.0)), int(6.0)),i0)])], divInt(i2,int(8.0))))[i0:mod(min(min(len(getCharFromString(s2, int(5.0))[saveOrd(in0):][:int(7.0)]), i0), divInt(saveOrd(s2),abs(( max(i1, ( int(1.0) + i0 )) - divInt(max(divInt(( int(9.0) + i2 ),saveOrd(getCharFromString(getCharFromString(in0, int(6.0)), ( i0 - ( divInt(int(8.0),saveOrd(s1[:( i0 * saveOrd(in0.capitalize()) )])) + int(7.0) ) )))), ( abs(( i0 + int(1.0) )) + i1 )),int(3.0)) )))),int(71.0))] + (getCharFromString(saveChr(( i0 + divInt(i0,i1) )), i2) + \"\"J\"\")) + \"\"=\"\"[int(8.0):][int(87.0):max(i0, int(3.0))][:min(int(119.0), int(4.0))]) + (\"\"(#\"\" + (\"\"7]UGW\"\" + getCharFromString(\"\"X\"\".rstrip(\"\"N\"\"[:int(7.0)]), int(1.0))[abs(i2):]))).capitalize().rstrip(\"\"\"\\\\\"\"\")\\nloopBreak% = 0\\nfor s2 in \"\"7d\"\".capitalize():{:\\nloopBreak% = 0\\nfor in2 in \"\"YV\"\".capitalize():{:\\nloopBreak% = 0\\nfor in1 in s2:{:\\nin0 = in2.strip()\\nb0 = len(s2) \\l divInt(( ( ( ( divInt(abs(int(1.0)),len(\"\"m\"\"[divInt(mod(int(8.0),divInt(divInt(divInt(saveOrd(s0),i2),( int(7.0) + int(0.0) )),saveOrd(s2.strip(\"\"U\"\"[int(3.0):int(1.0)].capitalize())))),( min(abs(int(0.0)), mod(( min(saveOrd(s0), int(0.0)) * int(6.0) ),int(1.0))) - max(saveOrd(\"\"$\"\"), int(9.0)) )):i2][int(4.0):])) + i1 ) - int(3.0) ) + ( divInt(saveOrd(s2),len(\"\"u\"\"[divInt(int(2.0),i2):][( int(2.0) + int(9.0) ):( int(2.0) * i0 )])) - min(i1, int(0.0)) ) ) + abs(i0) ),( int(3.0) - i1 ))\\ni2 = len(s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile in1 in (s0 + \"\"VZO\"\"):{:\\nif in1.lstrip(\"\"m\"\").capitalize()[max(int(5.0), i2):].capitalize()[:( int(2.0) * i0 )] not in (in0 + (s0[min(int(2.0), min(int(8.0), mod(i1,max(i2, i2)))):int(5.0)] + getCharFromString(\"\"D\"\"[:len(\"\"Y\"\")], divInt(divInt(i0,i2),i0)).strip()[:int(4.0)])):{:\\nif i1 \\g ( abs(abs(int(8.0))) * min(i1, i1) ):{:\\nif in1 in \"\"z\"\":{:\\ni1 = int(4.0)\\n:}\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in in2:{:\\nb1 = ( ( b0 or i0 \\le i0 ) and s1 not in s2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif int(2.0) != ( ( max(i1, ( int(2.0) * divInt(i1,saveOrd(\"\"<\"\")) )) + abs(i0) ) - divInt(abs(abs(i0)),( ( abs(i2) * min(mod(mod(( int(4.0) + min(( abs(divInt(( len(\"\"5\"\") * ( ( abs(divInt(max(divInt(divInt(saveOrd(in0[:min(saveOrd(in1.capitalize()), i2)]),int(0.0)),i1), i2),mod(abs(i2),( abs(i0) + int(8.0) )))) - len(in0) ) - ( int(8.0) + i1 ) ) ),abs(i2))) * ( int(5.0) + ( int(9.0) * int(2.0) ) ) ), i2) ),int(8.0)),int(8.0)), mod(int(7.0),saveOrd(s0[( divInt(i1,saveOrd(\"\"&\"\".lstrip(\"\"E\"\".capitalize()[i0:i1][max(i2, i0):max(mod(divInt(len(s1[saveOrd(s0[:i1]):][( mod(mod(int(8.0),int(9.0)),int(6.0)) * min(saveOrd(saveChr(len(\"\"2\"\"))[int(9.0):]), ( saveOrd(\"\"z\"\") + i2 )) ):( min(len(in0[:int(6.0)]), i0) * i1 )][:i1]),mod(divInt(int(4.0),saveOrd(\"\"7\"\")),int(5.0))),divInt(abs(abs(divInt(divInt(int(7.0),i1),len(saveChr(int(6.0)).capitalize())))),saveOrd(saveChr(i2)[i2:].capitalize()[:i0].rstrip()[i2:( len(\"\"f\"\") - mod(i1,i0) )]))), i1)])[:max(len(\"\"V\"\"), max(i0, ( int(8.0) - max(saveOrd(\"\">\"\".rstrip(getCharFromString(\"\"q\"\", int(5.0)))), min(( saveOrd(s1) + min(min(int(2.0), abs(saveOrd(\"\"M\"\"))), int(1.0)) ), mod(int(2.0),int(3.0)))) )))][int(1.0):int(2.0)][:int(5.0)])) - ( saveOrd(s0.strip(in2)) * ( abs(max(saveOrd(\"\"R\"\"[int(8.0):].capitalize().rstrip(in2)), int(9.0))) * i2 ) ) ):( ( len(getCharFromString(saveChr(i1), i1)[divInt(int(2.0),min(mod(len(in2),( int(1.0) + len(\"\"5\"\") )), int(1.0))):mod(( i0 * saveOrd(\"\"?\"\") ),( len(\"\"[\"\") + ( max(min(( i0 + divInt(len(in0),len(in0)) ), ( abs(int(2.0)) - divInt(abs(abs(int(7.0))),( i2 * mod(int(2.0),int(9.0)) )) )), int(6.0)) + int(0.0) ) ))]) + ( mod(saveOrd(getCharFromString(in1, min(abs(max(int(1.0), ( int(1.0) - int(8.0) ))), i0))[int(1.0):int(7.0)]),i0) + int(1.0) ) ) + ( int(0.0) + int(0.0) ) )]))) ) + ( int(9.0) - max(saveOrd(s2), ( ( int(2.0) * saveOrd(in2) ) * mod(int(8.0),i2) )) ) )) ):{:\\nb0 = \"\"6\"\" in in1[:i0]\\n:}else:{:\\nin2 = \"\"Y\"\"\\n:}\\nin1 = s0\\n:}else:{:\\nif not s1 == s2:{:\\nb0 = ( ( len(s0) - int(9.0) ) \\g len(getCharFromString(\"\"q\"\", max(divInt(i1,int(3.0)), divInt(( int(8.0) - i1 ),i1)))) and True )\\n:}\\n:}\\ns2 = s2[i1:]\\nif ( i1 + ( int(8.0) + int(3.0) ) ) \\g abs(mod(int(3.0),mod(i0,( abs(max(divInt(int(7.0),( len(\"\"\"\"\") + i1 )), len(\"\"O\"\"))) + int(2.0) )))):{:\\ni2 = i0\\nif not mod(divInt(abs(mod(min(divInt(int(3.0),i1), mod(( min(i2, i0) + divInt(max(min(int(0.0), i1), saveOrd(s1)),i0) ),i0)),( ( divInt(max(i1, int(3.0)),saveOrd(\"\"A\"\"[:mod(int(4.0),int(3.0))])) - saveOrd(\"\"<\"\"[:divInt(saveOrd(in1),int(0.0))]) ) * int(1.0) ))),int(0.0)),len(\"\"t\"\")) == i1:{:\\nb1 = saveChr(( int(8.0) - int(3.0) )).startswith(in1.capitalize().capitalize())\\nloopBreak% = 0\\nwhile res0:{:\\nin2 = \"\"+\"\".strip(\"\"3\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni2 = saveOrd(\"\"\\\\\\t\"\")\\n:}\\nb2 = s2[:( ( abs(mod(i2,divInt(( int(7.0) - i1 ),i1))) * min(min(int(8.0), len(s0)), int(0.0)) ) - int(1.0) )].startswith((\"\"5%\"\"[:( i0 + max(len(\"\"T\"\"), i0) )] + saveChr(max(min(mod(( abs(i0) + min(i2, mod(int(7.0),( mod(int(6.0),len(s1)) - i2 ))) ),int(5.0)), saveOrd(\"\"U\"\")), saveOrd(s2[int(3.0):( ( len(\"\"\\\\\\\\\"\") * min(i0, int(8.0)) ) + saveOrd(s0.strip()) )][( int(2.0) - divInt(( mod(int(7.0),mod(abs(i0),int(2.0))) + i2 ),( i0 - i2 )) ):][i0:])))))\\ns2 = \"\"s\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [0], [], [0], [], [], [0], [], [0, 2], [], [0], [1], [], [1], [], [1, 1, 1, 1, 0, 0, 1, 1], [9, 0, 5, 3, 9, 3, 2, 9], [1, 1, 0, 1, 0, 1, 2], [1], [3, 0, 0, 3, 3, 1, 3, 0, 2, 1, 1, 3, 0, 2, 1, 3, 0, 0, 0, 1, 3, 2, 1, 3], [0, 1, 1], [3, 3, 4, 0, 3, 2, 2, 3], [1], [1, 0], [5, 4, 3], [1, 1, 1, 1, 1, 1], [], [0, 4, 4, 4, 4, 3, 4, 1, 4, 4, 1, 4, 1, 2, 2, 1, 1, 2, 4, 4, 0, 2, 4, 2, 2, 1, 0], [2, 0, 3, 0, 3, 1, 0, 3, 1, 3, 0], [3, 5, 4, 1], [2, 2, 1, 0, 1, 0], [0, 2, 1, 2, 1, 0], [9, 15], [21, 25], [2, 2], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 8, 8, 7, 0, 24, 3, 8, 1, 2, 3, 6, 0, 27, 11, 4, 6, 6, 2, 2, 2, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile False:{:\\nb0 = in2 in getCharFromString(getCharFromString((\"\"J\"\".strip(saveChr(len(getCharFromString(\"\"2\"\", i1)))) + \"\"v\"\".rstrip(\"\"2\"\"[i1:][len(\"\"z\"\"):])), saveOrd(saveChr(int(9.0))[:min(i0, ( int(0.0) - int(5.0) ))])).lstrip(in1.rstrip()), len(getCharFromString(\"\"P\"\"[i1:mod(int(3.0),abs(i0))][:i1], i2)[int(932.0):abs(divInt(int(9.0),len(in0)))])).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1, 1], [2, 2, 1, 2, 1, 0], [2, 0, 2], [1, 2, 0], [0], [0], [], [], [0, 1], [5], [0, 1, 2], [0], [3], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [9, 0, 9, 4, 7, 1, 7, 9, 1, 5, 4, 5, 7, 4, 7, 0, 2, 6, 8, 8, 7, 3, 1, 0, 6, 6, 2, 0, 0, 5, 9, 6, 8, 1, 0, 9, 2, 4, 7, 3, 1], [1, 0, 0, 0, 1, 2, 2, 1, 1, 2, 2, 0, 2, 0, 2, 1, 1, 1, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0, 0, 2, 1, 2, 2, 1, 1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0], [1], [3, 1, 1, 0, 2, 0, 2, 2, 0, 2, 3, 1, 0, 0, 0, 1, 1, 2, 0, 2, 2, 2, 3, 2, 0, 0, 0, 3, 0, 1, 1, 2, 2, 1, 3, 3, 0, 0, 1, 0, 2, 0, 3, 2, 0, 3, 2, 2, 1, 1, 1, 2, 1, 2, 2, 0, 3, 0, 1, 1, 2, 2, 2, 2, 2, 0, 0, 0, 1, 2, 3, 2, 2, 3, 3, 0, 2, 1, 3, 0, 0, 3, 0, 3, 1, 3, 2, 2, 0, 3, 1, 2, 1, 2, 3, 0, 0, 3, 1, 3, 0, 3, 0, 0, 2, 1, 0, 0, 0, 3, 0, 1, 1, 2, 2, 3, 2, 2, 1, 1, 2, 3, 3, 2, 0, 1, 0, 2, 2, 0, 0, 1, 0, 1, 0, 3, 3, 0, 3, 2, 2, 1, 3, 0, 0, 2, 3, 3, 1, 0, 1, 3, 3, 2, 0, 3, 1, 0, 0, 2, 3, 0, 1, 3, 2, 3, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0], [1, 0, 1, 3, 0, 1, 2, 1, 1, 4, 4, 2, 2, 3, 0, 1, 2, 1, 1, 1, 1, 2, 0, 1, 0, 1, 0, 1, 2, 3, 0, 3, 0, 2, 2, 0, 1], [1, 0, 2, 0, 2, 0, 0, 0, 2, 1, 2, 0, 2, 1, 1, 0, 0, 1, 0, 2, 1, 2, 1, 1], [1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [4, 5, 4, 5, 5, 5, 1], [1, 1, 1, 1], [0], [2, 4, 0, 3, 2, 4, 1, 4, 0, 2, 1, 3, 1, 4, 0, 0, 2, 2, 3, 2, 2, 4, 0, 2, 4, 4, 4, 1, 4], [1, 0, 1, 0, 0, 1, 1, 3, 1], [4], [0, 2, 0, 0, 1, 0, 0, 2], [2, 3, 2, 1], [], [15], [3, 6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 3, 3, 1, 1, 0, 0, 2, 1, 3, 1, 1, 1, 0, 0, 0, 41, 41, 51, 1, 170, 46, 37, 24, 23, 7, 4, 1, 29, 9, 1, 8, 4, 0, 1, 2, 1], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b0:{:\\nloopBreak% = 0\\nfor in1 in saveChr(max(int(9.0), int(0.0)))[i1:( i0 - mod(( i0 + ( min(int(9.0), i0) * i1 ) ),i2) )]:{:\\ni2 += int(4.0)\\nloopBreak% = 0\\nwhile int(7.0) != mod(i1,mod(( divInt(max(mod(i1,i2), i2),len(in2)) * i0 ),int(1.0))):{:\\nin1 = (getCharFromString(\"\"3\"\", int(7.0))[divInt(divInt(int(9.0),min(max(i2, i0), int(1.0))),i2):] + saveChr(( i1 + abs(mod(i1,max(( mod(int(5.0),int(4.0)) + int(5.0) ), ( int(7.0) + mod(( i1 * max(i2, int(4.0)) ),int(7.0)) )))) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = in2 != \"\";\"\"[divInt(( ( divInt(( i0 - i2 ),i2) * int(0.0) ) + divInt(saveOrd((\"\"6\"\" + getCharFromString(in2, divInt(( saveOrd(in2) * abs(i2) ),divInt(int(2.0),abs(i2)))))),i0) ),len((getCharFromString(s1, i2)[min(int(6.0), max(( divInt(i0,abs(int(8.0))) - ( int(8.0) - mod(max(i0, i0),max(int(7.0), max(i2, max(i1, i2)))) ) ), ( int(3.0) + i2 ))):i1][i1:abs(i2)] + saveChr(int(1.0))[int(0.0):])[:mod(( min(( ( int(6.0) + int(6.0) ) - ( max(min(mod(i2,int(2.0)), i0), mod(( i2 + i0 ),int(0.0))) * i1 ) ), int(0.0)) - i0 ),max(min(i0, max(divInt(( int(5.0) * abs(i0) ),i1), ( len(saveChr(min(int(9.0), i1))) - int(6.0) ))), len(\"\"p\"\".rstrip(saveChr(min(divInt(i0,abs(int(8.0))), i1))))))][i1:mod(abs(i1),int(1.0))])):min(( max(int(092.0), int(4.0)) - int(731.0) ), i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 2, 1], [0], [0, 2, 1, 0, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [2, 5], [1, 1, 0], [0, 0], [], [1, 0], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 3, 5, 1, 7, 4, 5, 5, 9, 1, 2, 8, 7, 4, 8, 6, 7, 3, 5, 3, 7, 7, 8, 0, 8, 9, 4, 2], [0, 0, 2, 2, 2, 1, 0, 2, 0, 2, 1, 0, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 0, 0, 0, 2, 2, 0, 2, 1, 0, 2, 2], [1], [0, 1, 0, 1, 3, 2, 2, 2, 2, 0, 3, 0, 1, 1, 2, 2, 3, 1, 1, 0, 3, 0, 1, 0, 2, 3, 3, 0, 3, 3, 0, 1, 0, 1, 2, 3, 1, 2, 2, 1, 0, 0, 0, 3, 2, 1, 0, 2, 0, 2, 3, 1, 1, 2, 1, 1, 2, 3, 0, 0, 3, 0, 3, 3, 0, 3, 1, 0, 0, 1, 3, 1, 0, 0, 0, 2, 1, 2, 1, 1, 0, 3, 3, 3, 2, 2, 0, 1, 0, 3, 1, 0, 0, 0, 2, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 2, 3, 2, 0, 1, 2, 1, 1, 4, 0, 3, 4, 3, 2, 0, 0, 4, 0, 3], [0, 1, 1, 2, 0, 0, 0, 0, 0, 1, 0, 2, 1, 1], [0, 1, 0, 0, 1, 0, 0], [2, 2, 3, 0, 3, 0, 5, 4, 2, 4], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0], [0, 2, 0, 3, 0, 3, 0, 3, 3, 1, 3, 4, 2, 4, 1, 3, 4, 0, 4, 2, 1, 1, 3, 1, 4, 2, 3, 3, 4, 1, 3, 1, 3, 0, 4, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 0, 2, 4, 2, 4, 2, 4, 1, 0], [2, 0, 0, 3, 1, 1, 2, 0, 3, 1], [4, 2], [2, 2, 0, 0, 0, 2, 2, 1, 1, 0, 2, 0, 2, 0, 0], [1, 2, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 1, 3, 1], [20, 22, 3, 15, 17, 12, 7, 21, 23], [5, 22, 8], [7], [26, 25, 24, 21, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 1, 5, 1, 2, 0, 0, 3, 2, 3, 2, 0, 1, 0, 1, 0, 29, 29, 33, 1, 97, 20, 21, 14, 7, 10, 18, 1, 54, 10, 2, 15, 18, 9, 3, 1, 5], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 == int(5.0)\\ns2 = s2\\ni0 += i2\\nb2 = int(2.0) != min(( ( ( divInt(i2,max(i2, int(3.0))) - int(5.0) ) - ( ( abs(int(1.0)) * int(7.0) ) + i1 ) ) + len(in0[i0:]) ), int(4.0))\\nloopBreak% = 0\\nfor s0 in (in0 + (s0 + ((\"\"f7UW\"\" + (getCharFromString(\"\"[@\"\", i2)[( abs(min(i0, max(abs(i2), int(5.0)))) + i1 ):].capitalize() + (getCharFromString(in2, int(59.0)) + \"\"?<\"\"[( max(int(1.0), ( ( int(2.0) + i0 ) + i2 )) - i2 ):max(mod(int(8.0),i1), divInt(i1,divInt(saveOrd(\"\"D\"\"),int(7.0))))].rstrip((\"\"PRM\"\" + saveChr(int(4.0))))))) + ((saveChr(( int(8673.0) + int(53.0) )) + \"\"H\"\") + (\"\"VX\"\" + (in1 + \"\"w\"\"[mod(min(i2, i1),len(\"\"=\"\"[i1:saveOrd(s2)][len(getCharFromString(saveChr(i2)[abs(int(7.0)):i1].strip()[i1:int(7.0)], min(int(8.0), i0))[i0:]):][i0:divInt(int(0.0),divInt(int(8.0),int(9.0)))][:i2][:min(saveOrd(\"\"i\"\"), min(( ( i2 * int(4.0) ) - i0 ), len(in1)))][int(2.0):])):][i2:i1].capitalize())))[i0:( i2 - i2 )]))):{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [0, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [3], [1, 0], [0], [5], [1], [], [1], [], [0, 1, 1], [4, 5, 4], [0, 2, 0], [0], [2, 1, 0, 2, 3, 2, 1, 0], [0, 0, 0], [4], [2, 1, 2], [], [4, 2], [0, 0, 0, 0, 1], [], [1, 0, 4], [2], [], [], [3, 3, 2, 1, 0], [12], [13], [2], [15, 26]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 8, 3, 1, 3, 0, 0, 5, 0, 1, 0, 0, 0, 5, 1, 1, 1, 2], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( int(45.0) * i0 ) \\ge ( saveOrd(\"\",[2nM\"\") - ( int(4.0) * i2 ) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1, 1, 1], [0, 0, 8, 3, 1], [2, 0, 1, 0, 0, 0], [0], [3, 2, 3, 2, 0, 2, 1, 1, 2, 0, 3, 1, 0, 2, 0, 0], [0, 0, 1, 0, 1], [1, 4, 4], [0, 0, 0], [0, 1], [1, 2], [1, 1, 1, 1, 0, 0, 1], [], [3, 3, 4, 0, 3, 4, 4, 4, 2, 1, 1, 4, 0, 3, 1, 4, 4, 1, 1], [3, 3, 2, 2, 2, 0, 2], [4, 0], [0], [0, 3, 0, 0, 3, 2, 3], [18, 12, 4], [], [2], [5, 11, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 6, 1, 16, 5, 3, 3, 2, 2, 7, 0, 19, 7, 2, 1, 7, 3, 0, 1, 3], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(( saveOrd(((s1.rstrip((\"\"S\"\"[( i0 + divInt(int(008.0),int(3.0)) ):( i1 + saveOrd(\"\"\"\"\") )].capitalize().capitalize().lstrip() + s2.capitalize())) + (\"\"M\"\" + getCharFromString(\"\"E\"\".capitalize(), int(1.0)))) + \"\"(2&\"\")) + i0 ), mod(i0,i0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 1, 1], [2, 5, 8, 2, 3, 8, 6], [1, 2, 1, 1, 1, 2], [1, 1], [2, 2, 3, 2, 1, 0, 0, 3, 2, 1, 2, 1, 3, 1, 3, 0, 3, 3, 0], [1, 0, 1, 0, 0], [4, 0, 4, 0, 1, 4], [1, 1, 0, 1, 0], [1, 0], [4, 4], [0, 1], [], [2, 0, 1, 0], [], [], [2], [0, 0], [8, 19], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 6, 2, 19, 5, 6, 5, 2, 2, 2, 0, 4, 0, 0, 1, 2, 2, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= mod(( saveOrd(in1[divInt(int(2.0),i2):]) - i1 ),min(( int(5.0) + ( int(8238.0) - saveOrd(\"\"IT\"\") ) ), int(6.0)))\\ni1 += min(i1, max(saveOrd(in1), i2))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [9, 5], [], [], [1, 1], [], [], [], [], [3], [0, 0, 0, 0, 0, 1, 1], [], [4, 1, 1], [3], [3], [], [1, 2, 0, 1, 3, 0, 0], [7, 7, 9], [24, 25], [3], [19]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 0, 3, 1, 1, 0, 7, 3, 2, 1, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"y3Hz:H\"\".lstrip(\"\"J\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 0, 0, 2, 1], [2, 2], [2, 2, 0], [], [0, 0], [], [], [1, 2], [3], [0, 1, 2, 0], [0], [0], [2, 0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [7, 4, 3, 2, 7, 4, 8, 2, 4, 4, 1, 7, 0, 6, 2, 4, 5, 6, 4, 6, 8], [2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0, 0], [1], [3, 2, 2, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0, 3, 1, 3, 2, 2, 1, 2, 2, 1, 3, 1, 2, 2, 1, 3, 3, 0, 1, 0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0], [4, 1, 1, 1, 4, 2, 4, 4, 3, 4, 4, 0, 1, 4, 4, 2, 2, 2, 3], [2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0], [3, 1, 3, 4, 1, 1, 1, 4, 4, 0, 1], [1, 0, 0, 1, 1], [], [0, 2, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0, 0, 2, 1, 4, 2, 4, 2, 2, 0, 4, 4, 0, 4, 0, 4], [3, 2, 2, 3, 0, 0, 2, 1, 2, 0, 0, 1], [0, 2], [1, 1, 1, 1, 0, 2, 0], [1, 3, 0, 3, 0], [15, 6], [24], [], [15, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 2, 0, 0, 2, 1, 4, 1, 1, 2, 0, 0, 0, 21, 21, 21, 0, 85, 27, 19, 15, 12, 11, 5, 0, 31, 12, 2, 7, 5, 2, 1, 0, 2], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not saveOrd(in0) \\ge divInt(divInt(mod(int(7.0),i2),i0),int(4.0)):{:\\ns1 = in0.capitalize().capitalize()[:max(max(( max(int(3.0), saveOrd(\"\"y\"\".strip())) * abs(int(2.0)) ), i2), i0)].lstrip()[:int(7.0)]\\nin1 = \"\",P/\"\"\\nloopBreak% = 0\\nwhile s1 in getCharFromString(getCharFromString(s1, ( i0 + ( divInt(i1,( ( saveOrd(s1[:i0]) - saveOrd(in1) ) + ( len(\"\"G\"\"[:i0]) * int(4.0) ) )) - saveOrd(saveChr(int(8.0))[saveOrd(in1[min(divInt(i0,i0), ( int(2.0) * max(( mod(( i0 - divInt(i0,i1) ),int(4.0)) - i1 ), mod(mod(i2,divInt(i1,saveOrd(getCharFromString(s0, int(4.0)).capitalize()))),int(1.0))) )):( int(7.0) + i2 )][mod(i0,i1):]):saveOrd(getCharFromString(s1, int(0.0)))].capitalize()) ) )), abs(( ( int(6245.0) - ( ( int(6.0) + abs(int(4.0)) ) + divInt(( int(6.0) + abs(len(saveChr(i0))) ),int(8.0)) ) ) - i0 ))):{:\\nb1 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1], [1, 2, 2, 0, 1, 0, 1, 0], [2, 1], [1, 1, 1, 2, 0, 1], [], [0, 0, 0], [], [], [2], [4, 4, 5], [1, 0, 1, 1], [0, 0, 0], [], [2], [], [], [0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [3, 8, 2, 2, 6, 0, 6, 2, 0, 0, 1, 8, 2, 9, 9, 3, 5, 6, 8, 7, 3, 7, 0, 8, 6, 6, 2, 3, 5, 6, 4], [2, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 2, 1, 1, 2, 1, 0, 0, 0, 2, 2, 2, 0, 0, 2, 1, 2, 0, 1, 1, 1, 1], [0, 0, 0, 1], [1, 0, 3, 2, 3, 3, 2, 3, 1, 0, 0, 1, 0, 1, 3, 2, 1, 3, 2, 0, 3, 3, 0, 1, 1, 1, 0, 3, 1, 0, 3, 1, 2, 3, 0, 1, 2, 0, 3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 0, 2, 3, 2, 2, 0, 2, 3, 2, 2, 1, 1, 0, 0, 1, 2, 3, 3, 2, 0, 3, 3, 0, 2, 0, 0, 2, 0, 1, 3, 0, 0, 2, 1, 3, 0, 3, 1, 3, 3, 2, 2, 3, 0, 1, 0, 2, 3, 0, 1, 3, 0], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0], [1, 0, 0, 3, 4, 2, 4, 2, 4, 4, 4, 4, 4, 4, 2, 4, 3, 1, 1, 2, 3, 3, 0, 4, 0, 4], [1, 0, 0, 2, 1, 2, 2, 1, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [1, 5, 1, 2, 5, 5, 2, 2, 2, 2, 1, 5, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [], [3, 3, 4, 4, 1, 0, 3, 1, 1, 3, 2, 3, 2, 0, 0, 2, 4, 0, 2, 4, 1, 4, 2, 0, 3, 1, 3, 2, 4, 4, 1, 0, 4, 2, 2, 0, 1, 0, 2, 2, 2, 4, 1, 0, 0, 4, 2, 2, 0, 2, 0, 1, 1, 1, 1], [0, 0, 3, 2, 0, 0, 0, 3, 0, 2], [4, 0], [2, 1, 2, 0, 2, 0, 1, 0, 2, 1, 2, 0, 1, 2], [1, 0, 2, 1, 1, 1, 2, 3, 1, 2, 3, 3, 0, 0, 0, 3, 0], [11, 5, 12, 19, 15], [18, 3, 12, 7, 17], [8, 7, 7], [1, 25, 21, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 2, 6, 0, 3, 0, 0, 1, 3, 4, 3, 0, 1, 0, 0, 1, 31, 31, 32, 4, 100, 24, 26, 11, 14, 13, 17, 0, 55, 10, 2, 14, 17, 5, 5, 3, 4], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(382.0)\\nloopBreak% = 0\\nwhile i1 \\le max(divInt(min(min(( len(((getCharFromString(getCharFromString(\"\"s\"\", int(2.0)), i0) + s1) + (\"\"L\"\" + \"\"8\"\"))) - i1 ), int(606.0)), i1),int(20.0)), saveOrd(((in2[:( int(01.0) + abs(( i0 + saveOrd(s1) )) )] + s2.rstrip(\"\"d\"\".capitalize()[abs(i0):int(8.0)])[int(2.0):])[int(99.0):] + getCharFromString(in2[i1:], saveOrd((\"\"mh7\\\\\\n\"\" + (getCharFromString(getCharFromString(\"\"r\"\", int(3.0)), i0)[saveOrd(in2):int(5.0)] + s2[mod(saveOrd(\"\"7\"\"),i0):int(6.0)][:( i0 * saveOrd(s2) )].lstrip()))))))):{:\\nif not ( divInt(int(8.0),i2) - divInt(i1,int(7.0)) ) \\le divInt(int(3.0),i1):{:\\ni2 = ( saveOrd(getCharFromString(\"\"@\"\", mod(divInt(i1,divInt(saveOrd(s2),( divInt(int(7.0),int(0.0)) * i0 ))),i0))[int(8.0):][:mod(abs(saveOrd(s2)),( i0 * len(s1[:max(i2, divInt(i2,i2))][divInt(i0,int(6.0)):max(i0, i2)].capitalize()) ))][divInt(int(6.0),abs(i1)):]) - len(in2[int(2.0):]) )\\n:}\\ni2 = len(\"\"<\"\")\\ns1 = \"\"F\"\"\\nb2 = min(divInt(( saveOrd(\"\"M\"\") - i0 ),int(356.0)), i1) != ( min(i1, int(4.0)) + saveOrd(\"\"T@P\"\") )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [2], [], [3], [1], [], [0], [], [1, 0, 0, 1], [8, 0, 4, 6], [2, 1, 2], [], [2, 0, 2, 0, 1, 0, 1], [1, 0], [], [1], [0], [3], [0, 1, 1], [], [3, 4, 0, 2, 2, 4, 1, 4, 1], [3, 3, 0], [0, 0], [1, 2], [0, 1, 2], [25], [14], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 7, 2, 0, 1, 1, 1, 3, 0, 9, 3, 2, 2, 3, 1, 1, 1, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = (in0.lstrip() + \"\"Zo\"\".lstrip()[divInt(i2,( i1 - int(8.0) )):][:i2]) != getCharFromString(\"\"4\"\", int(046.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 0, 1], [2, 2, 1, 0, 2, 0, 1, 0], [2, 1, 1], [1, 2, 2, 0, 1], [], [0, 0, 0], [], [], [2, 2], [5, 5], [0, 1, 1, 2], [0, 0], [2], [0], [], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 0, 8, 7, 9, 0, 4, 4, 5, 1, 2, 3, 6, 9, 1, 7, 2, 4, 6, 0, 8, 9, 2, 3, 6, 0, 6, 6, 8, 5, 7, 1], [1, 1, 1, 2, 2, 1, 2, 2, 1, 0, 2, 0, 0, 1, 1, 2, 2, 1, 2, 2, 0, 0, 2, 2, 1, 2, 0, 1, 0, 2, 1, 2, 1, 2, 2, 1], [0, 0], [1, 2, 0, 3, 1, 0, 0, 1, 2, 3, 0, 0, 3, 3, 2, 1, 2, 1, 2, 3, 2, 0, 1, 0, 1, 2, 2, 3, 3, 3, 2, 1, 0, 2, 3, 1, 0, 0, 0, 3, 1, 1, 2, 3, 1, 2, 2, 1, 0, 0, 1, 2, 3, 2, 1, 1, 3, 0, 2, 2, 0, 0, 2, 3, 2, 0, 0, 0, 2, 3, 2, 0, 3, 3, 0, 2, 2, 3, 3, 3, 0, 2, 0, 0, 1, 3, 3, 3, 0, 2, 2, 1, 1, 2, 3, 2, 2, 2, 3, 1, 0, 2, 0, 0, 2, 1, 1, 0, 3, 3, 3, 3, 1, 1, 1, 0, 0, 0, 2, 1, 2, 2, 2, 2, 2, 3, 1, 0, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0], [0, 1, 4, 0, 0, 4, 3, 2, 4, 0, 3, 0, 2, 4, 0, 1, 4, 1, 1, 0, 1, 3, 4, 2, 4, 0, 2, 4, 2, 0, 4, 4], [1, 2, 0, 2, 1, 1, 2, 2, 1, 1, 1, 0, 1, 0, 0, 1, 2, 0, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0], [4, 1, 0, 2, 3, 1, 1, 0, 3], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [], [4, 1, 2, 3, 0, 2, 4, 1, 2, 4, 0, 2, 4, 4, 2, 4, 1, 4, 0, 1, 1, 3, 0, 3, 0, 3, 1, 4, 4, 1, 1, 4, 0, 2, 2, 2, 4, 0, 2, 2, 2, 1, 2, 1, 4], [2, 1, 1, 3, 0, 3, 3, 1, 2, 0, 3, 1], [1, 1, 2, 2], [0, 1, 2, 2, 0, 0, 1, 2, 1, 1, 2, 1], [2, 2, 1, 3, 3, 1, 3, 1, 1, 3, 2, 2, 0, 2], [5], [6, 13, 7, 14], [9, 4, 0, 8, 8], [9, 14, 28, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 0, 3, 0, 0, 2, 2, 4, 2, 1, 1, 0, 0, 2, 33, 33, 36, 2, 138, 39, 32, 20, 19, 9, 14, 0, 45, 12, 4, 12, 14, 1, 4, 5, 4], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b2:{:\\nif int(2.0) != ( i1 - min(int(4.0), i1) ):{:\\ni1 = i2\\n:}else:{:\\nin1 = \"\"94g&\"\".capitalize()\\nif int(0.0) != ( max(i2, i1) * saveOrd((s1 + saveChr(min(( int(8.0) + ( int(7.0) * mod(min(divInt(i2,int(9.0)), i2),int(0.0)) ) ), mod(( saveOrd(\"\"+\"\") - len(saveChr(abs(( int(4.0) - i1 )))[divInt(saveOrd(s0),int(4.0)):]) ),i0)))[:i2])[i0:min(int(5.0), int(1.0))]) ):{:\\ns2 = getCharFromString(\"\"n\"\".rstrip()[divInt(len(in0.strip()),int(2.0)):divInt(( int(3.0) * i0 ),i1)], int(6.0)).rstrip()[divInt(min(mod(int(9.0),int(1.0)), abs(i1)),mod(divInt(i2,i2),( saveOrd(\"\"]\"\") * mod(i1,i2) ))):]\\n:}else:{:\\nb2 = \"\"ho\"\" == (s1 + (s1 + (\"\"?\"\" + saveChr(i2))))\\ni0 = ( min(( i0 - max(saveOrd(\"\"0\"\".capitalize()), i2) ), divInt(( max(max(min(i2, ( i1 - i2 )), int(7.0)), max(len(\"\"8\"\"), saveOrd(getCharFromString(s0, i0)))) - mod(( int(2.0) + int(4.0) ),divInt(abs(( divInt(mod(saveOrd(in0.strip()[int(6.0):][:i1][( i0 - i2 ):mod(int(0.0),int(8.0))]),i1),min(abs(saveOrd(\"\"F\"\"[abs(int(9.0)):][:int(2.0)][:int(3.0)])), i2)) + i1 )),i2)) ),( int(6.0) + ( ( divInt(divInt(( min(int(0.0), i2) - int(6.0) ),i1),int(6.0)) * int(8.0) ) + saveOrd(\"\"8\"\"[:saveOrd(saveChr(int(5.0)))]) ) ))) - ( int(7.0) + int(1.0) ) )\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [8, 9, 5, 5, 7, 6, 0, 3, 1, 6], [2, 2, 1, 1], [1], [2, 2, 3, 1, 1, 2, 1, 0, 1, 0, 0, 1, 3], [1, 0, 1], [3, 4], [0, 0, 1], [0, 0], [3, 5, 0, 1, 2, 5, 3], [0, 1, 0, 0, 0, 0, 1, 1], [], [3, 1, 3, 3, 3, 1, 3, 1, 3, 3, 0, 3, 4, 4, 4, 0, 3, 4, 4, 4, 0, 0, 2, 2, 0, 0, 0], [0, 3, 1, 1, 3, 0], [4, 2], [2, 1], [3, 2, 3, 0, 1, 2, 1, 1], [11], [2, 12, 22], [0, 9], [3, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 4, 1, 13, 3, 2, 2, 2, 7, 8, 0, 27, 6, 2, 2, 8, 1, 3, 2, 2], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(( len((\"\"0\"\" + (((\"\"#Lc9m\"\" + (\"\"w\"\" + ((in0 + (getCharFromString(saveChr(int(8.0)).rstrip(in2), int(9.0)) + (saveChr(divInt(int(55.0),i2)) + getCharFromString(s0, int(76031.0)).strip()))) + s1))) + s2[:i1][i1:]) + in2))) + int(6.0) ),saveOrd(in0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1], [1, 1, 1, 0, 1], [], [0, 0, 0, 0, 2], [], [0], [], [], [0, 3, 2, 2, 2], [5, 0], [1, 1, 2, 0], [0, 0], [1], [0], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 8, 5, 2, 9, 9, 9, 9, 7, 1], [2, 1, 2, 0, 2, 2], [0], [1, 2, 3, 0, 1, 3, 1, 2, 1, 2, 0, 2, 3, 3, 1, 3, 1, 0, 0, 3, 2, 1, 0, 2, 0, 1], [0, 1, 0, 0, 1, 1], [3, 0, 1, 2, 0, 1], [1, 0, 2], [1, 1, 1], [1, 1, 5], [0, 1], [], [0, 4, 0, 1], [1], [], [], [1, 3], [], [2], [], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 0, 5, 0, 1, 0, 0, 5, 2, 4, 2, 1, 1, 0, 0, 0, 10, 10, 6, 0, 26, 6, 6, 3, 3, 3, 2, 0, 4, 1, 0, 0, 2, 0, 1, 0, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) != ( len(s1) - i2 )\\nres0 = int(8.0) \\l min(int(5.0), mod(int(2.0),( i1 + ( max(abs(int(9.0)), min(int(9.0), i2)) * i0 ) )))\\nb2 = saveChr(max(mod(int(997.0),i2), mod(i2,int(1.0)))) not in s1\\nb2 = b2\\nin2 = \"\"c#\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 2], [], [0, 0], [], [], [0], [3], [1], [0], [], [], [], [], [], [1, 1], [1, 2], [0, 1], [], [1, 0, 2, 0, 3], [0], [4], [2], [], [0], [1, 0, 1], [], [2, 1, 1], [], [], [1], [0, 2, 2], [15], [], [7, 3], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 5, 1, 1, 1, 0, 1, 3, 0, 3, 0, 0, 1, 3, 1, 0, 2, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\ge i0\\ns0 = \"\"P\"\"[:( i1 * saveOrd(\"\"73\"\") )]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1], [2, 2, 2, 2, 2, 1, 0, 0, 1, 2, 0, 0, 0], [0, 1, 0, 2, 1, 2], [2, 0, 0, 0, 1, 2, 0], [0, 0], [0, 0, 0, 0, 0], [], [], [2, 3, 3, 2, 0], [1, 4], [2, 2, 0, 2, 1, 0, 0, 0, 0, 1], [0, 0], [2, 4, 5], [1, 3, 1, 0, 1], [1], [1, 0, 0], [1, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], [9, 8, 3, 9, 5, 3, 4, 3, 5, 4, 9, 6, 1, 4], [2, 1, 0, 1, 0, 2, 2, 2, 2, 1, 0, 1, 2, 1, 1], [0], [1, 0, 3, 2, 1, 3, 2, 1, 0, 0, 1, 0, 1, 3, 2, 2, 0, 0, 3, 3, 0, 1, 0, 3, 2, 1, 3, 2, 0, 0, 0, 3, 1, 0, 1, 3, 0, 2, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1], [2, 1, 1, 4, 1, 3, 4, 3, 3], [1, 1, 0, 1, 0], [0, 0], [4, 1, 0, 0, 4, 3, 4, 4, 4, 5, 2, 4, 3, 2], [0, 0, 1, 0, 1, 1, 1], [0, 0], [1, 2, 2, 3, 4, 2, 4, 0, 1, 2, 4, 2, 4, 0, 0, 0, 4, 0, 2, 0, 2, 0, 0, 2, 0, 1, 4, 0, 1], [0, 2, 3, 0, 1, 1], [2], [1, 0, 0, 1, 0, 1, 1, 2], [0, 0, 2, 0, 1, 2, 3], [5, 21, 17], [21], [1, 6], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 13, 13, 6, 7, 2, 5, 0, 0, 5, 2, 10, 2, 3, 5, 1, 3, 2, 14, 14, 15, 1, 41, 7, 9, 5, 2, 14, 7, 2, 29, 6, 1, 8, 7, 3, 1, 2, 1], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in \"\"FV1\"\":{:\\nif (getCharFromString(s1.capitalize()[int(9.0):i2], abs(( int(8.0) - max(( int(3.0) - i1 ), i0) ))) + \"\"Rv\"\")[int(95.0):i1][:int(3.0)] == getCharFromString(s0, max(divInt(( i0 + i2 ),saveOrd(s0)), max(i2, int(4.0))))[i2:len(in1)].strip()[:( int(35.0) - saveOrd(saveChr(( i2 + i1 ))) )]:{:\\nloopBreak% = 0\\nfor in0 in in1:{:\\nloopBreak% = 0\\nwhile in1[:i0].startswith(in1[:len(in2)]):{:\\nif False:{:\\ns2 = in1[int(4.0):]\\n:}else:{:\\nb2 = \"\"6\"\".endswith(saveChr(i1))\\n:}\\nres0 = int(9.0) \\g len(in0)\\nres0 = ( True or b2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile True:{:\\ni2 = i1\\ns2 = \"\"&\"\"\\nb0 = divInt(i1,int(6.0)) \\le int(14.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 2, 0, 1, 0, 1, 1, 1, 0, 1], [1], [0, 0, 2, 0, 1, 2, 2, 2, 0], [], [0, 0, 0, 0], [], [], [1, 0, 0, 0], [5, 1], [0, 0, 0, 2, 1, 1], [0, 0], [3], [1, 1, 2], [], [1, 0], [0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [8, 4, 4, 1, 9, 3, 3, 9, 6, 5, 3], [2, 1, 0, 1, 2, 2, 0, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 1, 2, 0], [0], [2, 1, 3, 1, 0, 0, 3, 3, 1, 2, 0, 0, 3, 3, 3, 0, 2, 3, 3, 0, 0, 3, 3, 3, 0, 0, 2, 0, 3, 2, 0, 0, 0, 0, 3, 0, 3, 2, 3, 0, 2, 2, 2, 0, 1, 2, 0, 2, 1, 1, 2, 0, 0, 1, 2, 0, 0, 2, 0, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 3, 4, 0, 3, 2, 3, 2, 3, 1, 1, 4, 2, 3, 4], [2, 0, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 0, 1], [0, 4, 2, 3, 5, 0, 3, 0, 3, 5, 1, 5, 1], [1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [], [4, 4, 2, 0, 2, 2, 0, 1, 4, 2, 0, 2, 0, 4, 1, 0, 4, 1, 3, 0, 2, 3, 1, 1, 3, 0, 3, 1, 4, 4, 2, 3, 4, 2, 0, 0, 1], [0, 1, 0, 1, 3, 0, 1, 1], [4], [2, 1, 1, 1, 2, 1, 0, 1], [3, 3, 2, 1, 2, 2, 0, 3, 2, 1, 1, 1, 3], [10], [9, 24, 7, 21], [0, 3, 7, 1], [14, 23, 29, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 1, 9, 0, 4, 0, 0, 4, 2, 6, 2, 1, 3, 0, 2, 1, 11, 11, 24, 1, 60, 14, 15, 6, 8, 13, 13, 0, 37, 8, 1, 8, 13, 1, 4, 4, 4], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\nif True:{:\\nb0 = not getCharFromString(saveChr(mod(int(8.0),min(int(4.0), i2))), i1) != s0[len(in1[:saveOrd(\"\"+\"\")][:int(4.0)]):]\\ns2 = getCharFromString(in0[:( i0 * i1 )], min(len(in2[abs(i2):]), ( len(saveChr(abs(i2))) + i0 )))\\nb0 = len(\"\">\"\") != max(max(i1, i1), ( i1 - saveOrd(s0) ))\\ni1 = divInt(i0,i1)\\nin0 = \"\"0j3\"\".rstrip((s0 + (\"\"7\"\" + \"\"K\"\")[:i2]))\\n:}\\nin0 = (in2 + (\"\"^1\"\" + getCharFromString(saveChr(i1), abs(i1))))\\ns1 = (saveChr(len(in2[:( saveOrd(s1) + i1 )])) + \"\"yhv@\"\")[( mod(mod(i1,int(1.0)),( i0 + divInt(int(933.0),int(9.0)) )) + mod(i0,i0) ):int(65.0)]\\nb0 = divInt(i1,i2) \\g mod(i0,int(3.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [], [0, 0], [], [], [0], [], [2], [], [0], [3], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 5, 8, 5, 6, 4, 2, 6, 5, 8, 6, 1, 3, 9, 0, 1, 1, 4, 8, 9, 5, 4, 3, 9, 3, 0, 2, 0, 6, 9], [1, 1, 2, 0, 1, 1, 2, 2, 0, 2, 0, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1], [0], [0, 3, 3, 0, 2, 2, 0, 1, 3, 3, 2, 1, 2, 1, 2, 3, 0, 0, 2, 0, 3, 3, 0, 2, 3, 3, 2, 2, 2, 0, 0, 1, 0, 2, 0, 2, 2, 1, 3, 1, 3, 1, 3, 0, 0, 2, 1, 3, 0, 1, 0, 2, 1, 1, 3, 2, 1, 0, 1, 2, 2, 3, 3, 1, 2, 2, 2, 1, 3, 2, 2, 1, 3, 3, 1, 3, 2, 3, 3, 3, 0, 2, 1, 2, 0, 0, 2, 0, 1, 1, 1, 3, 1, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 2, 4, 4, 4, 3, 1, 1, 4, 3, 4, 3, 3, 4, 4, 0, 1, 2, 3, 4, 2], [1, 2, 1, 0, 1, 1, 0, 2, 0, 0, 2, 2, 2, 2, 0], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0], [2, 0, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [], [3, 2, 3, 1, 0, 2, 4, 4, 4, 4, 0, 2, 1, 1, 2, 1, 2, 1, 1, 3, 2, 1, 1, 3, 2, 4, 1, 4, 2, 2, 1, 4, 1, 1, 4, 2, 1, 0, 4, 1, 2, 4], [2, 0, 0, 2, 1, 2, 3, 1, 0, 1], [3], [0, 2, 2, 1, 1, 1, 0, 1, 1, 0, 1], [0, 3, 0, 2, 0, 3, 1, 3, 0, 0, 1, 3, 3, 1, 2], [5, 25, 23, 16, 1], [9, 14, 19], [7, 4], [24, 0, 9, 11, 2]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 30, 30, 21, 1, 94, 27, 24, 15, 12, 3, 15, 0, 42, 10, 1, 11, 15, 5, 3, 2, 5], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\nb0 = ((\"\"F\"\" + s2)[min(max(i2, ( ( i0 - int(1.0) ) * max(max(divInt(int(5.0),( int(8.0) - divInt(abs(i1),i1) )), divInt(i2,saveOrd(getCharFromString(getCharFromString(s0.capitalize(), saveOrd(\"\"?\"\"[i2:])), mod(saveOrd(\"\"Z\"\"),len(\"\"7\"\"[:( mod(mod(i0,i2),int(5.0)) + i0 )]))).capitalize()[divInt(i2,( ( int(6.0) - max(int(4.0), max(int(2.0), saveOrd(\"\"X\"\"[:i1]))) ) - i2 )):]))), ( int(6.0) + len(\"\"\"\") )) )), i2):int(58.0)] + (\"\"j\"\"[:i2] + \"\"&\"\")) in (saveChr(( int(6.0) * int(1.0) ))[saveOrd(\"\"Q\"\"):( int(39.0) + i1 )] + \"\"Bo\"\"[:int(011.0)][:( mod(len(\"\"(\"\".lstrip(\"\"\\\\\\t\"\")),len(saveChr(int(48.0)))) + mod(( mod(int(95.0),saveOrd(\"\"t\"\"[( ( int(4.0) * saveOrd(in1) ) * min(int(3.0), max(divInt(abs(len(getCharFromString(\"\"4\"\", saveOrd(saveChr(i2)[:( int(9.0) * ( i1 * i1 ) )])))),divInt(i1,int(3.0))), int(0.0))) ):int(2.0)])) + abs(int(06.0)) ),int(9.0)) )].capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 1, 2, 1, 0, 2, 0, 2, 0, 2, 2, 1, 0, 0, 2, 1], [1, 2, 2, 2, 2, 1, 0], [1, 0, 0, 2, 0, 1, 2, 0, 0, 1], [0], [0, 0, 0, 0, 0], [], [], [2, 0, 2, 1, 3, 2], [3, 1, 5, 4, 4, 4], [0, 2, 2, 0, 1, 1, 1, 1, 0, 2, 2, 2, 1, 1], [0, 0, 0, 0, 0, 0], [4, 4, 3, 2, 1], [0, 2, 3], [0], [], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 0, 8, 1, 0, 7, 0, 3, 5, 1, 1, 3, 3, 5, 4, 6, 4, 0, 0, 3, 4, 5, 1, 5, 8, 2, 0, 0, 0, 1, 8, 6, 3, 3, 5, 5, 3, 9, 9, 1, 6, 5, 0], [1, 0, 2, 1, 2, 0, 0, 1, 1, 1, 2, 0, 2, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 2, 1, 2, 1, 2], [0, 1, 1], [2, 3, 2, 0, 1, 0, 3, 2, 0, 1, 2, 2, 0, 3, 1, 2, 2, 0, 0, 2, 0, 0, 2, 1, 2, 3, 0, 0, 3, 1, 3, 0, 1, 2, 0, 3, 0, 0, 3, 1, 1, 0, 2, 3, 1, 2, 1, 0, 3, 1, 0, 0, 3, 2, 0, 2, 3, 2, 0, 3, 3, 3, 2, 0, 3, 2, 0, 3, 3, 0, 0, 2, 2, 3, 0, 3, 3, 1, 1, 3, 1, 3, 3, 1, 0, 1, 1, 2, 1, 3, 3, 1, 3, 0, 3, 1, 3, 0, 0, 2, 0, 0, 1, 1, 3, 0, 2, 3, 1, 0, 3, 3, 1, 0, 3, 0, 3, 1, 3, 0, 1, 0, 1, 0, 2, 1, 2, 1, 0, 3, 0, 3, 3, 0, 1, 3, 0, 3, 2, 3, 0, 3, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [1, 2, 0, 3, 2, 1, 0, 2, 1, 4, 4, 3, 2, 1, 0, 3, 4, 3, 3, 4, 1, 4, 1, 0, 4, 0, 2, 4, 2, 2, 3, 1, 4, 1, 3, 0, 4, 1, 3, 3, 1, 4, 3], [1, 1, 2, 2, 0, 0, 2, 0, 1, 1, 1, 1, 2, 1, 0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 3, 3, 0, 0, 3, 0, 2, 1, 0, 0, 4, 5, 0, 0, 3, 5, 5, 4, 0, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [2, 3, 3, 4, 4, 0, 2, 4, 0, 0, 0, 3, 4, 2, 3, 4, 2, 1, 0, 2, 2, 1, 4, 1, 2, 1, 3, 4, 1, 1, 4, 4, 0, 1, 2, 0, 1, 1, 0, 0, 4, 4, 2, 3, 1, 4, 2, 1, 0, 1, 0, 4, 1, 1, 3, 3, 4, 1, 0, 4, 4, 1, 2, 2, 1, 4, 2, 4, 1, 0, 1, 4, 4, 2, 0, 2, 4, 2, 0, 1, 2, 4, 2, 2, 1, 1, 0, 0, 1, 2, 1, 1, 0, 4], [3, 2, 2, 3, 2, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 1, 3, 2, 3, 2, 0, 1], [5, 5, 3, 4, 0], [1, 2, 1, 1, 0, 0, 1, 2, 2, 2, 0, 2, 0, 1, 1, 1, 0, 0, 1, 0], [0, 0, 3, 2, 2, 0, 2, 1, 2, 3, 0, 1, 2, 3, 3, 3, 1, 3, 1, 1, 1, 3, 0, 0, 2, 1], [15, 6, 20, 17, 9, 12], [0, 20, 17, 22, 4, 22, 23], [3, 4, 4, 7, 1, 6], [9, 28, 2, 19, 17, 0, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 17, 17, 7, 10, 1, 5, 0, 0, 6, 6, 14, 6, 5, 3, 1, 0, 2, 43, 43, 47, 3, 144, 26, 43, 15, 13, 21, 26, 1, 94, 23, 5, 20, 26, 6, 7, 6, 7], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = ( max(mod(i0,int(6.0)), i2) - abs(( i1 - int(0.0) )) )\\nif b2:{:\\nb0 = ((s0.capitalize().strip(in0.capitalize()[( divInt(i2,min(int(8.0), ( ( i0 * i0 ) * ( i1 + i1 ) ))) + divInt(int(1.0),divInt(len(in0),i1)) ):]) + s0) + ((\"\"P\"\"[:i2].capitalize() + s0)[:abs(int(0.0))].strip(\"\"G\"\"[max(i0, int(7.0)):mod(i2,min(i2, i2))][abs(int(0.0)):int(3.0)]) + getCharFromString(\"\"&\"\", i1)))[:( max(int(511.0), mod(int(33.0),i2)) * saveOrd(\"\"3\"\"[:int(54.0)]) )].startswith((getCharFromString(\"\"4\"\", i2) + \"\"U\"\"))\\nloopBreak% = 0\\nwhile getCharFromString(in0.capitalize(), i2).startswith(\"\"4\"\"):{:\\nb2 = not saveOrd(s0[( i0 + mod(len(\"\"a\"\"),( i2 - abs(max(min(( i2 - len(\"\"7\"\") ), mod(i0,saveOrd(s2))), len(s1))) )) ):]) \\ge i1\\ns0 = getCharFromString((\"\"]\"\" + getCharFromString(\"\"R\"\"[i0:], mod(( len(s0) - i0 ),saveOrd(\"\"u\"\"))))[max(int(6.0), int(4.0)):], saveOrd(in1)).lstrip(getCharFromString(\"\"1\\\\\\t\"\", int(0.0)))\\nloopBreak% = 0\\nwhile max(min(int(03.0), i0), int(4.0)) \\g int(515820.0):{:\\nb1 = mod(int(0.0),saveOrd(\"\":\"\")) != min(int(0.0), abs(i0))\\nloopBreak% = 0\\nwhile saveOrd(((getCharFromString(\"\".\"\", int(1.0)) + in2) + getCharFromString(\"\"r\"\".capitalize(), abs(i1)))) \\le i0:{:\\ni1 -= ( i2 * i0 )\\nloopBreak% = 0\\nwhile ( \"\"\"\"[int(8.0):][int(6.0):abs(i0)] != saveChr(divInt(len(\"\"w\"\".rstrip(s0)[int(3.0):i0]),max(saveOrd(\"\"e\"\"), int(3.0)))) and s0[:i0].lstrip().capitalize() == in0[:max(i1, len(\"\"w\"\"))].capitalize()[:int(5.0)] ):{:\\nif getCharFromString(\"\">\"\"[:min(i0, int(5.0))][i0:int(3.0)], i2)[( int(9.0) - mod(int(9.0),i1) ):saveOrd(\"\"J\"\")] not in in2:{:\\nin2 = in1\\n:}else:{:\\nres0 = i0 \\le max(len(\"\"M\"\"), i2)\\n:}\\nb2 = int(1.0) \\le len(\"\"6\"\"[i1:max(mod(saveOrd(\"\"x\"\"),i2), len(s0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in saveChr(int(650.0)):{:\\ni1 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 0, 2, 2, 0, 0, 2, 0, 2, 0, 2, 2, 2, 0, 0, 2, 2, 0, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 1, 2, 0, 0, 2, 2, 2, 0, 2, 0, 2, 2, 0], [2, 2, 1, 1, 2, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 2, 2, 2, 0], [2, 0, 0, 1, 0, 2, 1, 1, 1, 2, 1, 1, 0, 1, 1, 2, 0, 1, 1, 0, 2], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [1, 2, 3, 0, 1, 1, 0, 3], [0, 0, 4, 1, 4, 0, 4, 4, 3], [1, 1, 0, 0, 0, 2, 2, 2, 2, 0, 1, 2, 1, 2, 2, 2, 0, 1, 0, 2, 2, 1, 2, 1, 1, 2, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 4, 0, 0, 4, 5, 4, 5, 5, 0, 1, 3], [0, 0, 3, 3, 3, 2], [1, 1, 1], [], [1, 1, 1, 1, 0, 1, 0], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [5, 2, 7, 5, 7, 8, 2, 5, 4, 0, 8, 5, 7, 5, 7, 9, 6, 6, 8, 6, 9, 8, 3, 0, 0, 3, 3, 8, 8, 3, 5, 0, 3, 1, 4, 4, 9, 7, 8, 0, 5, 1, 7, 7, 8, 7, 3, 0, 0, 9, 5, 5, 9, 3, 0, 9, 0, 3, 4, 9, 1, 4, 7, 7, 7, 3, 1, 0, 7, 8, 8, 0, 6, 8, 4, 1, 1, 3, 7, 7, 4, 3, 0, 3, 0, 3, 0, 9, 0, 0, 6, 3, 8, 9, 6, 0, 4, 9, 0, 6, 6, 2, 2, 4, 7, 6, 1, 8, 8, 3, 9, 8, 2], [2, 2, 0, 1, 1, 1, 2, 1, 2, 0, 2, 1, 0, 2, 1, 1, 0, 1, 0, 2, 2, 2, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 2, 0, 1, 1, 0, 0, 1, 1, 1, 2, 2, 2, 0, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 2, 0, 2, 2, 1, 1, 1, 0, 2, 0, 1, 1, 2, 2, 1, 2, 1, 2, 0, 0, 0, 1, 2, 1, 0, 1, 1, 0, 1, 0, 1, 2, 1, 0, 1, 2, 1, 2], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [3, 1, 1, 1, 0, 2, 1, 3, 2, 2, 3, 1, 2, 1, 2, 2, 2, 0, 2, 1, 0, 3, 1, 3, 3, 0, 3, 0, 1, 1, 1, 3, 1, 2, 1, 2, 0, 2, 3, 1, 3, 2, 1, 2, 0, 1, 1, 2, 1, 1, 1, 0, 1, 0, 3, 0, 1, 0, 3, 1, 1, 1, 3, 0, 0, 3, 3, 3, 0, 2, 2, 2, 1, 3, 0, 3, 1, 3, 2, 3, 2, 1, 1, 3, 1, 0, 1, 0, 2, 3, 2, 3, 1, 0, 0, 3, 1, 3, 1, 0, 1, 1, 0, 2, 3, 3, 0, 1, 2, 0, 1, 3, 3, 0, 0, 0, 2, 3, 1, 3, 1, 2, 3, 3, 2, 1, 0, 1, 0, 1, 1, 1, 2, 1, 2, 1, 0, 2, 1, 2, 3, 1, 0, 2, 0, 1, 2, 0, 0, 3, 3, 2, 1, 2, 1, 1, 1, 3, 2, 3, 0, 3, 2, 1, 2, 3, 3, 1, 0, 3, 3, 3, 1, 2, 0, 2, 2, 3, 2, 3, 3, 0, 1, 3, 0, 3, 2, 0, 1, 0, 1, 2, 2, 1, 2, 0, 2, 1, 2, 2, 3, 0, 0, 3, 3, 1, 2, 0, 2, 1, 0, 3, 1, 1, 2, 1, 2, 1, 3, 3, 2, 2, 3, 2, 1, 1, 1, 2, 3, 3, 3, 0, 2, 0, 3, 3, 0, 1, 1, 2, 3, 2, 1, 2, 3, 0, 0, 3, 2, 1, 2, 0, 2, 2, 3, 2, 0, 3, 1, 3, 0, 3, 1, 0, 2, 1, 2, 0, 1, 2, 0, 2, 2, 3, 0, 3, 2, 0, 3, 1, 2, 0, 0, 0, 0, 3, 0, 3, 2, 3, 3, 0, 3, 3, 2, 3, 1, 2, 3, 3, 1, 1, 1, 2, 1, 0, 1, 1, 1, 2, 0, 0, 0, 2, 0, 0, 2, 1, 2, 1, 2, 3, 2, 0, 0, 2, 2, 2, 1, 2, 3, 2, 0, 2, 2, 3, 0, 0, 0, 0, 3, 0, 0, 3, 3, 2, 0, 2, 0, 1, 0, 3, 2, 3, 2, 1, 1, 3, 1, 3, 3, 2, 1, 1, 0, 3, 2, 2, 2, 3, 2, 3, 2, 0, 0, 3, 1, 0, 2, 3, 2, 2, 2, 2, 1, 1, 3, 1, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 3, 1, 1, 1, 2, 0, 2, 1, 3, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [2, 3, 1, 3, 0, 0, 0, 3, 3, 3, 1, 1, 1, 4, 4, 0, 1, 4, 2, 3, 4, 0, 4, 4, 1, 1, 2, 0, 1, 1, 4, 4, 2, 0, 1, 3, 2, 0, 2, 1, 1, 1, 0, 3, 3, 2, 4, 2, 0, 0, 3, 3, 4, 4, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 2, 1, 4, 4, 3, 0, 4, 1, 3, 0, 1, 3, 3, 0, 3, 2, 1, 4, 2, 4, 2, 1, 4, 1, 3, 4, 0, 1, 4, 0, 3, 4, 2, 3, 2], [2, 0, 2, 0, 2, 0, 0, 1, 1, 2, 1, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 2, 1, 0, 1, 1, 2, 1, 2, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 0, 0, 1, 2, 2, 0, 1, 2, 2], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [1, 5, 0, 2, 4, 2, 4, 3, 1, 3, 5, 0, 4, 2, 4, 0, 5, 0, 4, 2, 2, 2, 0, 0, 4, 1, 1, 5, 3, 1, 3, 5, 5, 4, 0, 4, 0, 3, 5, 4, 1, 1, 5, 3, 2, 5, 2, 4, 3, 3, 2, 1, 1, 1, 0, 2, 0, 3, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [0, 4, 2, 1, 2, 0, 0, 1, 0, 4, 2, 4, 0, 2, 0, 2, 1, 1, 2, 0, 0, 2, 4, 4, 2, 4, 2, 2, 0, 0, 1, 4, 1, 2, 2, 0, 2, 2, 4, 4, 2, 2, 0, 2, 2, 4, 2, 0, 2, 2, 0, 1, 4, 4, 0, 4, 2, 4, 2, 0, 2, 1, 0, 0, 4, 2, 0, 1, 4, 1, 1, 4, 4, 4, 4, 0, 0, 0, 4, 2, 1, 0, 1, 2, 2, 1, 2, 4, 1, 4, 2, 2, 4, 4, 0, 0, 1, 4, 0, 3, 0, 2, 4, 2, 0, 1, 0, 2, 1, 4, 0, 1, 0, 2, 1, 4, 1, 0, 4, 4, 2, 1, 0, 0, 2, 1, 0, 0, 0, 2, 2, 0, 2, 2, 2, 1, 4, 0, 0, 4, 0, 1, 4, 0, 4, 0, 4, 4, 1, 0, 1, 0, 4, 2, 0, 0, 4, 1, 4, 0], [0, 1, 1, 0, 3, 3, 3, 3, 3, 0, 2, 0, 3, 0, 3, 3, 2, 0, 1, 1, 1, 0, 3, 0, 2, 1, 2, 2, 2, 3, 2, 2, 1, 1, 0, 3, 3, 3, 1, 3], [1, 1, 1, 5, 4, 5, 2, 3, 1, 2, 0, 3, 4, 0], [2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 0, 0, 2, 1, 2, 2, 0, 1, 2, 2, 1, 2, 1, 0, 1, 2, 2, 0, 1, 1, 0, 2, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [2, 1, 3, 3, 1, 3, 0, 2, 3, 3, 2, 0, 0, 0, 0, 0, 3, 3, 3, 2, 0, 1, 0, 2, 0, 1, 3, 3, 1], [24, 22, 14, 21, 24, 19, 8, 24, 25], [0, 20, 3, 21, 0], [3, 5, 1, 9, 3], [29, 7, 16, 24, 13, 8, 26, 4, 27, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 42, 42, 21, 21, 7, 14, 0, 0, 8, 9, 27, 9, 12, 6, 3, 0, 7, 113, 113, 104, 10, 410, 108, 99, 69, 45, 60, 29, 7, 160, 40, 14, 43, 29, 9, 5, 5, 10], "tree_depth": 77, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(int(5.0)) \\l int(2.0):{:\\nloopBreak% = 0\\nwhile int(75.0) \\l i2:{:\\ns1 = in2\\nif b1:{:\\nif b2:{:\\nres0 = ( getCharFromString(\"\"3\"\"[( int(7.0) * len(s0[:( ( max(int(8.0), ( int(2.0) + ( ( ( i2 * ( int(5.0) + i0 ) ) * len(s2) ) + int(4.0) ) )) + min(min(i1, min(i1, int(0.0))), int(8.0)) ) - int(5.0) )]) ):], len(\"\"a\"\")) != in1 or saveChr(int(7.0)).startswith(saveChr(mod(int(5.0),divInt(i1,mod(len(s2),int(7.0)))))[len(in1[divInt(int(9.0),mod(i2,int(6.0))):]):]) )\\n:}else:{:\\nb0 = \"\"^\"\"[:int(6.0)] in \"\"$\"\"\\n:}\\nloopBreak% = 0\\nwhile in0[:divInt(int(8.0),int(6.0))] in s1:{:\\ni1 -= int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( i2 \\le int(8.0) or getCharFromString(in0[:i0][max(i2, int(3.0)):].rstrip()[i1:].rstrip(), max(int(0.0), int(0.0)))[:int(3.0)].startswith(in2) ):{:\\nb1 = max(i0, i2) \\g saveOrd(\"\"u\"\")\\n:}else:{:\\nloopBreak% = 0\\nwhile \"\"-\"\".rstrip().endswith(s0[saveOrd(in1[min(i1, ( mod(( int(3.0) * max(i1, saveOrd(getCharFromString(s2[:int(8.0)], abs(divInt(len(in1[( int(8.0) - int(3.0) ):][saveOrd(\"\"Y\"\"):]),int(5.0))))[i0:int(0.0)][i1:])) ),divInt(min(mod(saveOrd(getCharFromString(s0, int(3.0)).capitalize()),i0), i2),saveOrd(getCharFromString(in2[int(1.0):], max(int(4.0), i2))[:int(4.0)].strip(\"\"5\"\"[:int(9.0)])))) + i2 )):][:( max(abs(i1), int(7.0)) + ( i0 * int(8.0) ) )].rstrip(s0).strip(in1)[min(max(i0, i1), i1):][( max(int(0.0), saveOrd(s2[int(5.0):( saveOrd(\"\"?\"\") + abs(( int(1.0) * i0 )) )].strip())) - int(7.0) ):i1]):int(7.0)][int(8.0):]):{:\\nif \"\"*\"\".lstrip(\"\"1\"\").startswith(getCharFromString(saveChr(int(7.0)), mod(int(3.0),( int(0.0) - i0 ))).capitalize()):{:\\nif saveChr(divInt(int(0.0),( min(int(9.0), i2) * ( i1 + int(5.0) ) ))).endswith(s2):{:\\ns2 = s0\\n:}\\n:}else:{:\\ni2 = ( i0 + i1 )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in in1:{:\\nloopBreak% = 0\\nfor s1 in saveChr(max(len(\"\"W\"\"[:divInt(int(5.0),( int(9.0) - int(3.0) ))]), int(0.0))):{:\\ni1 -= abs(( min(i0, abs(( int(9.0) - ( max(max(int(0.0), i0), max(min(len(s1), int(3.0)), ( i1 - ( ( len(\"\"O\"\") + divInt(abs(saveOrd(\"\"V\"\"[i1:][int(4.0):])),abs(i1)) ) + min(( i2 + int(9.0) ), i2) ) ))) + int(1.0) ) ))) - ( ( int(4.0) + divInt(i2,( int(7.0) * divInt(divInt(min(i0, i2),len(getCharFromString(\"\"Y\"\", len(getCharFromString(in2.capitalize(), int(7.0))[:( i2 + divInt(int(7.0),i0) )][:saveOrd(in0)].rstrip()))[int(3.0):int(1.0)])),divInt(int(0.0),divInt(int(7.0),saveOrd(\"\"T\"\")))) )) ) + max(( divInt(min(( int(8.0) - int(8.0) ), int(0.0)),( abs(len(saveChr(abs(i2)))) + ( i2 + max(len(s1), i2) ) )) * int(6.0) ), int(8.0)) ) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nfor in0 in (in2 + in2[( len(\"\"%\"\") - mod(int(4.0),( abs(i0) + i0 )) ):].capitalize()[max(( int(1.0) - mod(i0,( ( abs(mod(i0,max(int(1.0), saveOrd(in1)))) - i2 ) * saveOrd(\"\"[\"\"[:int(3.0)]) )) ), i1):mod(int(7.0),mod(i0,int(7.0)))]):{:\\nloopBreak% = 0\\nfor s0 in in1.capitalize():{:\\ni1 = ( i0 - ( ( len(\"\"!\"\") * i0 ) + min(mod(i1,saveOrd(s0)), int(4.0)) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin0 = \"\"9\"\"[:divInt(i0,i1)]\\nif ( i1 \\le i1 or not \"\"I\"\".capitalize().endswith(in2) ):{:\\ni2 = max(i0, len(\"\"d\"\"[:divInt(min(max(i2, len(in1)), len(s1)),divInt(min(int(3.0), ( len(\"\"Y\"\"[abs(int(0.0)):int(3.0)]) - int(0.0) )),( int(3.0) * i2 )))].capitalize().strip()))\\ni1 = int(0.0)\\nb1 = s1 in in2\\n:}else:{:\\ni1 *= int(9.0)\\ni1 *= int(0.0)\\nin0 = s2\\n:}\\nloopBreak% = 0\\nfor in2 in s2[:divInt(i0,i2)][:i0]:{:\\nb0 = divInt(i1,i1) \\l ( int(0.0) + divInt(int(6.0),( max(( i2 + i2 ), divInt(( ( int(3.0) + divInt(saveOrd(\"\"3\"\"[:mod(i1,( ( abs(i2) + i1 ) * i2 ))][i0:saveOrd(in1.capitalize())][:i0]),i0) ) * abs(max(mod(i1,( i2 - int(8.0) )), i1)) ),saveOrd(in0))) - mod(max(( int(9.0) - int(6.0) ), len(saveChr(int(0.0)))),saveOrd(in0)) )) )\\ni0 -= min(divInt(int(4.0),int(9.0)), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s2 in \"\"Z\"\":{:\\nif saveChr(max(( mod(mod(saveOrd(s1),divInt(min(mod(i1,i0), len(getCharFromString(s1, int(0.0)))),i1)),( saveOrd(\"\"v\"\".lstrip(s1).lstrip()) + ( divInt(( divInt(int(6.0),int(6.0)) + abs(int(2.0)) ),i0) - ( int(2.0) * i1 ) ) )) * i2 ), ( int(4.0) + int(7.0) ))) not in \"\"\\\\\\\\\"\":{:\\nloopBreak% = 0\\nwhile i1 \\le i0:{:\\ni1 -= len(s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile int(61.0) \\le int(8.0):{:\\nres0 = s2[:int(8.0)].rstrip(s0) != saveChr(( i2 * ( int(3.0) * abs(i1) ) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i2 \\ge int(982.0):{:\\nloopBreak% = 0\\nfor in0 in \"\"\"\\\\\"a\"\":{:\\ns2 = in0.lstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0, 0], [], [0, 1], [], [0], [], [], [1], [], [2], [], [3], [1], [], [1], [], [], [], [1, 2], [1], [0, 0], [], [], [2], [], [1, 3], [1, 0, 0, 0, 0, 0, 0, 1, 1], [], [3, 2, 1, 0, 4, 1], [0], [], [1], [1, 0, 3, 2, 0, 3, 1, 0, 2], [21, 10, 6], [11, 1, 23], [4, 3], [23, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 1, 8, 0, 6, 1, 0, 1, 8, 3, 2, 1, 2], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = (\"\"l\"\"[:i1] + s1) != getCharFromString(\"\"V>4K%bG\"\", i2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [1], [2], [1, 2, 2, 2, 2, 2, 1], [], [0, 2, 0, 2, 0, 2, 2, 2, 3, 0, 0, 1, 3, 2, 0, 2, 3, 0, 3], [0, 1, 1, 0, 1, 0, 0], [2, 0, 3, 4], [1, 0, 0, 2], [1, 1, 1], [3], [1], [], [1, 0], [], [], [], [0], [22], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 7, 0, 19, 7, 4, 4, 3, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\le ( i2 - mod(i2,mod(( mod(abs(i2),i2) + int(2.0) ),min(( i2 + ( len(\"\"W\"\") * i1 ) ), saveOrd(in0)))) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 0, 1, 0, 2, 0, 2, 0], [1, 2, 0, 2], [1, 1, 1, 0, 2], [0], [0, 0, 0, 0], [], [], [2, 3, 2], [], [0, 2, 0, 0], [], [0], [1, 0, 0], [], [0], [1], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 7, 8, 3, 0, 2, 6, 0, 8, 9, 6, 0, 0, 8, 6, 2, 9], [1, 0, 0, 0, 2, 1, 0, 1, 2, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 2, 2, 0, 1], [1, 1, 0], [2, 3, 2, 2, 2, 0, 2, 2, 2, 3, 1, 3, 3, 0, 2, 2, 1, 0, 1, 0, 1, 3, 3, 1, 3, 3, 3, 2, 3, 3, 0, 0, 3, 0, 2, 0, 2, 2, 1, 2, 0, 0, 3, 1, 3, 2, 1, 2, 2, 1, 0, 0, 2, 0, 3, 3, 2, 2, 2, 0, 1, 3, 0, 0, 2, 0, 0, 2, 0, 3, 1, 2, 1, 3, 3, 0, 2, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [2, 2, 3, 2, 0, 4, 2, 1, 3, 0, 0, 2, 4, 2, 0, 1, 4, 4, 0, 4], [1, 2, 0, 2, 2, 2, 0, 2, 1, 0, 1, 2, 1, 0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0], [4, 1, 0, 4, 0, 5, 1, 5, 5, 1, 3, 1, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1], [0], [0, 0, 0, 4, 0, 0, 0, 3, 1, 3, 3, 2, 3, 2, 3, 1, 3, 0, 3, 1, 4, 0, 3, 0, 4, 4, 4, 0, 2, 0, 0, 1, 1, 1], [2, 2, 0, 1, 3], [1], [0, 1, 2], [3, 3, 0, 0, 0, 2, 0, 1], [2, 5, 8, 18], [25], [1], [7, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 4, 5, 1, 4, 0, 0, 3, 0, 4, 0, 1, 3, 0, 1, 1, 17, 17, 24, 3, 79, 25, 20, 14, 13, 14, 8, 1, 34, 5, 1, 3, 8, 4, 1, 1, 2], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif True:{:\\nloopBreak% = 0\\nwhile in1 in s1:{:\\ni1 -= ( abs(divInt(mod(divInt(i0,( ( divInt(abs(int(6.0)),len(s0)) * abs(i0) ) + ( ( int(7.0) * i0 ) * int(8.0) ) )),i2),int(3.0))) * min(saveOrd(in1.capitalize()), int(026.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += abs(max(len(s0), mod(min(min(i0, i1), abs(i2)),( i1 * mod(mod(int(0.0),( i0 - i1 )),saveOrd(in2)) ))))\\n:}else:{:\\ni0 = int(8.0)\\nloopBreak% = 0\\nfor s1 in (\"\"$\"C\"\" + ((((\"\"F\"\" + (in2 + (\"\"I\"\" + in2.capitalize())))[:abs(divInt(int(9.0),divInt(( int(6.0) + i0 ),i0)))] + (s1 + getCharFromString(saveChr(divInt(i0,min(max(( ( divInt(i1,int(0.0)) - saveOrd(in0.rstrip()) ) * i0 ), i2), ( i0 - i2 )))), mod(i2,saveOrd(s1[int(0.0):])))))[divInt(int(862.0),min(saveOrd(s0), i0)):( i1 + int(9.0) )] + \"\"1\"\") + \"\"S\"\")):{:\\nb2 = res0\\nloopBreak% = 0\\nwhile b2:{:\\ns1 = \"\"z\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [6, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 0, 7], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 1, 2, 2, 1, 2], [1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 0, 2, 3, 1, 2, 2, 0, 3, 0, 1, 1, 3, 2, 2, 0, 3, 3, 3, 2, 1, 2, 3, 2, 3, 0, 0, 1, 3, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 1, 3, 0, 3, 0, 2, 2, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4, 2, 1, 5], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 21, 21, 17, 0, 80, 24, 19, 10, 14, 10, 2, 1, 18, 2, 0, 4, 2, 1, 0, 1, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[max(i2, int(6.0)):] not in in0:{:\\nres0 = ( abs(mod(i2,int(7.0))) != mod(int(5.0),min(i2, ( divInt(( len(s0[i0:divInt(min(( i1 + ( divInt(( int(7.0) + i2 ),divInt(max(int(4.0), i1),int(1.0))) * int(7.0) ) ), i2),i0)]) - mod(int(7.0),abs(int(9.0))) ),max(i0, ( ( ( int(8.0) + int(5.0) ) * divInt(int(0.0),i1) ) - int(4.0) ))) - max(int(8.0), i2) ))) or ( in1[mod(max(int(59.0), mod(mod(i1,len(getCharFromString((\"\"R\"\" + saveChr(i2)), int(9.0)))),int(2.0))),min(mod(divInt(i2,len(s2)),min(abs(( int(2.0) * ( abs(mod(saveOrd(\"\"9\"\"),i1)) + i2 ) )), int(0.0))), saveOrd(s1))):int(7.0)].endswith(in2) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [0, 0, 1, 2, 1, 1], [2], [0, 2, 0, 1, 0], [], [0, 0], [], [], [2, 0, 3], [1, 2], [0, 1, 0, 2, 1], [0, 0], [5], [1, 2], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [4, 4, 1, 0, 1, 1, 2, 6, 9, 5, 2, 9, 3, 0, 1, 2, 4, 6, 2, 7, 6, 7, 2, 2, 9, 4, 8], [1, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 1, 2, 2, 1, 0, 1, 2, 2, 1, 0], [1], [0, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 3, 3, 0, 0, 2, 1, 0, 3, 3, 2, 3, 1, 0, 0, 3, 0, 2, 3, 3, 3, 0, 0, 2, 2, 3, 2, 3, 3, 3, 2, 1, 0, 2, 2, 3, 2, 2, 2, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 3, 2, 0, 1, 0, 1, 3, 3, 2, 1, 2, 1, 3, 0, 2, 3, 1, 3, 1, 2, 1, 3, 0, 3, 1, 0, 1, 3, 1, 1, 3, 2, 2, 1, 0, 1, 1, 3, 3, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [4, 0, 1, 3, 0, 3, 3, 2, 2, 2, 4, 0, 2, 0, 4, 0, 0, 3, 3, 2, 2, 0, 3, 3, 3, 4, 3, 1, 3, 1], [1, 0, 2, 2, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 2, 2, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0], [2, 1, 5, 4, 2, 5], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [4, 1, 3, 0, 1, 2, 2, 4, 4, 4, 1, 4, 0, 1, 4, 2, 0, 2, 4, 4, 1, 0, 1, 4, 1, 1, 1, 4, 4, 4, 4, 4, 1, 4, 0], [0, 3, 0, 0, 1, 1, 0, 2, 0, 1, 3, 1, 3, 3, 2], [5, 1, 1, 2], [1, 2, 0, 1], [3, 3, 0, 3, 1, 3, 2, 2, 2, 2, 0], [23, 6], [8], [2, 9, 9, 0], [16, 13, 18, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 1, 5, 0, 2, 0, 0, 3, 2, 5, 2, 1, 2, 0, 1, 0, 27, 27, 21, 1, 101, 28, 30, 18, 11, 6, 11, 0, 35, 15, 4, 4, 11, 2, 1, 4, 4], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\ns2 = getCharFromString(\"\"-\"\", i1)\\nb0 = saveOrd((s1 + \"\"*X\"\")) \\g min(( ( divInt(( ( mod(int(4.0),int(4.0)) - max(len(getCharFromString(getCharFromString(\"\"/\"\", i2), i0).strip(saveChr(divInt(int(1.0),i1)))[min(len(in2), divInt(len(\"\"i\"\"),int(0.0))):][:i1]), i1) ) + abs(i0) ),( abs(abs(saveOrd(saveChr(i2)))) * i2 )) * divInt(( min(( abs(min(saveOrd(in1[divInt(int(1.0),i0):( divInt(min(( mod(mod(mod(int(1.0),i1),i1),( int(2.0) + min(int(6.0), len(getCharFromString(\"\"<\"\".capitalize(), i2)[:( len(s2) + ( i2 - int(9.0) ) )])) )) - i1 ), int(5.0)),abs(abs(divInt(int(2.0),( int(9.0) + min(i0, ( len(\"\"2\"\") + int(3.0) )) ))))) * len(getCharFromString(\"\"9\"\", int(0.0))) )]), ( int(1.0) + len(\"\"9\"\") ))) - i1 ), saveOrd(\"\"0\"\")) + int(246.0) ),i2) ) + int(2.0) ), len(saveChr(int(767.0))))\\nloopBreak% = 0\\nwhile not saveChr(int(2.0)).rstrip().endswith(\"\"G\"\".strip().rstrip()):{:\\ni2 *= max(( ( int(2.0) * i1 ) - int(9.0) ), int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = len(in2.capitalize()) == max(i0, int(8.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [1], [3], [], [3], [0], [], [5, 0], [1], [], [4, 1], [2], [], [], [3], [], [], [], [15]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 2, 1, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += len(\"\",\"\".capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 1, 2], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 2, 1, 2, 1, 3, 1, 3, 0, 0], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 1, 3, 4, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 3, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 14, 0, 60, 17, 14, 8, 9, 7, 2, 1, 17, 4, 2, 4, 2, 1, 0, 0, 1], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[max(i0, i2):] not in getCharFromString(in0[int(0.0):mod(i2,int(7.0))].rstrip()[( int(5.0) + abs(i0) ):( mod(( int(7.0) + i1 ),divInt(min(( i2 * len((\"\"R\"\" + getCharFromString(s0, min(mod(int(7.0),i1), divInt(max(int(1.0), i2),abs(int(7.0)))))).lstrip()) ), i0),i0)) - ( int(7.0) + max(divInt(max(i1, mod(( ( int(9.0) * int(8.0) ) - ( int(5.0) - i2 ) ),int(0.0))),max(len(\"\";\"\"), divInt(int(4.0),divInt(int(8.0),saveOrd(in1))))), int(59.0)) ) )], min(i1, i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [8, 2], [2], [0], [0], [], [], [], [], [4], [0, 1], [], [1], [], [], [], [2, 0], [25], [], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"6Z\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1], [0, 2, 0, 0, 0, 0, 1], [0], [1, 0, 2, 0, 1, 2], [0], [0, 0, 0, 0, 0], [], [], [0, 2, 2], [], [0, 0], [], [], [0, 1], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [9, 0, 5, 8, 2, 0, 3, 6, 7, 0, 1, 9, 4, 3, 8, 4, 6, 3, 4], [1, 2, 1, 0, 2, 0, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 1, 2, 1, 2], [1, 1], [1, 2, 3, 1, 3, 2, 1, 1, 0, 3, 0, 1, 2, 3, 2, 2, 0, 1, 2, 3, 3, 0, 3, 2, 3, 0, 2, 0, 0, 2, 0, 1, 2, 2, 3, 0, 0, 3, 2, 2, 2, 1, 0, 0, 1, 1, 0, 2, 2, 0, 2, 1, 2, 0, 0, 0, 1, 3, 0, 1, 1, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [2, 0, 1, 4, 2, 3, 4, 0, 1, 4, 3], [2, 0, 1, 1, 1, 1, 1, 0, 2, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 3, 2, 3, 2, 2, 1, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1], [0], [1, 3, 4, 2, 4, 2, 3, 2, 4, 4, 2, 0, 1, 4, 2, 4, 2, 2, 0, 0, 1, 1, 2, 0, 1, 3, 0, 1], [2, 3, 0, 0, 2, 3], [1, 0], [1, 0, 2, 0, 2, 0, 0, 0], [3, 2, 3, 3, 0, 3, 0, 3, 0, 3, 1, 0], [3, 0, 12, 8], [10], [4], [25, 25, 30, 18, 30, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 1, 6, 1, 5, 0, 0, 3, 0, 2, 0, 0, 2, 0, 1, 0, 19, 19, 20, 2, 63, 18, 11, 10, 10, 8, 12, 1, 28, 6, 2, 8, 12, 4, 1, 1, 6], "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(9.0)\\nloopBreak% = 0\\nfor in1 in \"\"@4@\"\":{:\\nb0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = ((getCharFromString(getCharFromString(s2[divInt(abs(int(0.0)),min(( int(5.0) + int(8.0) ), i2)):max(i1, int(2.0))], ( saveOrd(\"\"_\"\") - mod(( i0 - int(0.0) ),mod(abs(len(in0[i2:saveOrd(s2)][divInt(min(i0, ( i1 - i2 )),( i2 - int(3.0) )):mod(mod(max(i0, i0),saveOrd(\"\"D\"\")),( mod(divInt(int(6.0),i2),i0) - int(7.0) ))].lstrip()[int(0.0):].capitalize())),i0)) )), ( ( i0 + divInt(int(1.0),mod(i0,i1)) ) * i2 ))[int(9.0):] + \"\"/A\"\")[len(s2[i1:int(4.0)]):int(384.0)].rstrip()[:int(6.0)].capitalize() + \"\"_M&k\"\")\\nb2 = False\\ni2 += int(34.0)\\ns1 = (s0 + \"\"I\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [3, 3, 3, 9, 2, 0, 1, 4, 1, 6, 6], [0, 1, 1, 1, 0, 1], [1], [3, 0, 3, 1, 1, 3, 1, 0, 3, 0, 2, 0, 1, 2, 3, 0, 1, 1], [0, 1], [4, 0, 4, 2, 0], [2, 1], [0], [1, 4, 2, 1, 0, 0, 4, 1], [1, 1, 1, 1], [], [3, 4, 3, 1, 3, 3, 0, 2, 3, 0, 0, 0, 4, 3, 1, 4, 3, 1, 0, 3, 1, 4, 3, 3, 4, 0, 2, 4, 4, 0, 2, 0], [3, 0, 0, 0, 3, 1, 3], [2, 1, 3], [0, 2, 2], [2, 0, 2, 1], [20], [0], [9, 8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 6, 1, 18, 2, 5, 2, 1, 8, 4, 0, 32, 7, 3, 3, 4, 1, 1, 2, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= saveOrd(((\"\"9\"\" + ((s1 + (in1 + s2)[i1:min(int(3.0), int(33.0))]) + s1)).strip() + getCharFromString((\"\"U\"\" + getCharFromString((\"\"8\"\" + s0), saveOrd((\"\"a\"\" + getCharFromString(((s0.rstrip() + saveChr(int(9.0))[i1:]) + in1.lstrip(s1[abs(i1):])), ( i0 - int(2.0) )))))), divInt(min(i1, int(01416.0)),int(6.0)))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0], [5, 0, 0], [1], [0], [], [], [], [], [], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [9, 3, 7, 5, 4, 7, 8, 0, 9, 1], [1, 2, 0, 2, 0, 2, 2], [], [3, 3, 3, 0, 0, 0, 1, 0, 2, 1, 1, 3, 1, 2, 3, 2, 0, 0, 1, 0, 3, 1, 1], [1, 0, 0], [0, 4, 1, 0, 2, 0], [0, 2], [0], [5, 4, 4, 0], [0, 1, 1, 1, 1, 1, 0, 1], [], [4, 3, 3, 1, 2, 0, 4, 3, 3, 3, 3, 4, 4, 2, 0, 4, 1, 1, 3, 0, 4, 4, 4, 1, 1, 1], [0, 0, 0, 2, 0, 1, 2, 3], [3], [0, 1], [0, 3, 1, 0, 2, 3, 3, 2], [5, 0], [24], [3, 0], [9, 11, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 7, 0, 23, 3, 6, 2, 1, 4, 8, 0, 26, 8, 1, 2, 8, 2, 1, 2, 3], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(((\"\"F&\"\" + in1[min(saveOrd(getCharFromString(((((getCharFromString(in1[:max(i1, i2)].capitalize(), i0) + getCharFromString(\"\"y\"\", int(9.0))) + \"\"A\"\") + (s0 + saveChr(i2))) + \"\"3\"\".lstrip(\"\"(\"\").capitalize()), divInt(int(3.0),int(75.0)))), min(int(4.0), ( abs(( i0 + i2 )) * int(78.0) ))):i2]) + \"\"\"0\"\"), min(int(0.0), int(91.0)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 1, 2, 1, 0, 1, 2, 2, 0, 2, 0, 2, 2, 2, 0, 1, 0, 1, 2, 2, 1, 2, 1, 1, 1, 1], [1, 1, 0, 2, 1, 2, 0, 2, 2, 1, 0], [2, 2, 2, 2, 1, 0, 2, 1, 2, 1, 2, 2, 2, 1, 1], [0, 0, 0], [0, 0, 0, 0, 0], [], [], [0, 2], [5, 5, 1, 0, 1, 5], [1, 1, 2, 1, 1, 1, 1, 2, 0], [0, 0, 0, 0, 0, 0], [5, 4], [0], [], [1], [1, 1, 1, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [4, 5, 8, 7, 2, 5, 2, 6, 5, 0, 1, 5, 1, 9, 5, 2, 1, 4, 7, 1, 6, 3, 8, 0, 2, 6, 5, 8, 3, 7, 7, 6, 3, 6, 9, 1, 6, 8, 8, 3, 2, 7, 0], [1, 0, 0, 2, 1, 0, 0, 1, 2, 1, 1, 1, 1, 0, 2, 1, 0, 1, 2, 0, 2, 0, 1, 0, 0, 2, 2, 0, 1, 2, 1, 1, 1, 1], [1, 1, 0, 0, 0], [0, 1, 1, 2, 2, 0, 1, 0, 2, 0, 1, 3, 0, 0, 1, 1, 0, 2, 2, 1, 2, 2, 3, 2, 2, 3, 0, 2, 0, 1, 1, 0, 1, 1, 3, 3, 1, 3, 1, 2, 1, 0, 1, 0, 1, 3, 0, 0, 3, 1, 0, 0, 3, 3, 1, 3, 1, 0, 0, 2, 3, 3, 0, 3, 1, 3, 3, 0, 1, 0, 1, 0, 1, 2, 2, 1, 1, 3, 1, 3, 2, 1, 2, 3, 1, 0, 2, 0, 0, 1, 3, 3, 1, 2, 3, 2, 1, 3, 2, 1, 1, 1, 0, 1, 2, 1, 0, 0, 1, 1, 2, 3, 0], [1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [2, 1, 2, 4, 0, 4, 0, 0, 1, 1, 2, 3, 3, 2, 3, 4, 2, 2, 4, 2, 3, 2, 4, 4], [1, 1, 0, 2, 2, 1, 1, 2, 0, 1, 0, 0, 1, 0, 1, 2], [0, 0, 0, 0, 0, 1, 0, 0], [3, 0, 2, 2, 3, 1, 0, 5, 0, 1, 3, 5, 2, 3, 1, 1, 5, 4, 1, 4, 2, 0, 3, 2, 5, 4, 0, 5, 5, 3, 4, 0, 3, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [0, 0, 0], [2, 4, 2, 2, 0, 3, 1, 2, 0, 1, 0, 4, 1, 1, 4, 0, 0, 2, 2, 4, 0, 2, 0, 0, 1, 3, 3, 2, 4, 4, 2, 0, 0, 0, 1, 3, 0, 4, 0, 4, 2, 3, 1, 4, 4, 3, 3, 4, 2, 0, 4, 2, 2, 2, 2, 2, 0, 0, 1, 0, 0, 4, 1, 4, 2, 2, 2, 0, 4, 4, 4, 4, 0, 3, 1, 3, 0, 1, 0], [2, 0, 1, 0, 2, 2, 3, 2, 0, 1, 2, 0, 3, 1, 2, 3, 1, 3], [0, 3, 3, 1], [0, 0, 1, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 2, 2, 0, 1, 2, 1], [0, 1, 3, 1, 1, 3, 1, 2, 2, 0, 0, 2, 3, 1], [17, 17, 2], [20, 25, 3, 21, 20], [6, 8, 3], [21, 18, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 26, 26, 11, 15, 3, 5, 0, 0, 2, 6, 9, 6, 2, 1, 0, 0, 4, 43, 43, 34, 5, 113, 22, 24, 16, 8, 34, 14, 3, 79, 18, 4, 19, 14, 3, 5, 3, 3], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i1 != int(4.0):{:\\nin0 = s0[:int(5.0)][divInt(divInt(i0,int(8.0)),i0):divInt(i2,int(7.0))].capitalize()[abs(i1):i0]\\nif int(2526.0) != int(5.0):{:\\ns2 = (\"\"R\"\" + s2[:i0])\\nin0 = \"\"u\"\"\\ns1 = s0\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in getCharFromString(\"\"<\"\", ( ( int(0.0) - ( ( max(divInt(divInt(abs(i1),( i2 - int(1.0) )),int(5.0)), i1) + int(1.0) ) * int(9.0) ) ) * saveOrd(\"\"z\"\") )):{:\\nloopBreak% = 0\\nwhile saveChr(min(int(5.0), saveOrd(s0))).endswith(s1):{:\\ni1 -= int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( int(1.0) - i1 ) \\g int(4.0):{:\\nb0 = i1 \\l int(7.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile min(i0, i2) \\g min(int(1.0), i1):{:\\nloopBreak% = 0\\nfor in0 in getCharFromString(in2, i0)[:max(max(int(6.0), abs(int(3.0))), i1)][i2:]:{:\\nloopBreak% = 0\\nwhile ( len(s2[len(in0):]) * i0 ) != abs(int(8.0)):{:\\ns1 = \"\"d\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += len(((s1[saveOrd(in2):i0].capitalize().capitalize()[int(0.0):] + in1) + \"\"/\"\"))\\ns1 = (in1 + s2.lstrip())\\ni1 = i0\\nloopBreak% = 0\\nwhile (\"\"v\"\" + getCharFromString(saveChr(int(2.0)), i0))[:int(65.0)].capitalize().startswith(((s0[( ( int(8.0) - int(3.0) ) + abs(int(7.0)) ):abs(( int(7.0) + mod(saveOrd(getCharFromString(in0[int(6.0):i2][( i2 - i0 ):][int(3.0):][abs(len(s2)):][:int(6.0)], divInt(abs(( int(9.0) + saveOrd(\"\"6\"\") )),divInt(int(1.0),int(6.0))))),int(8.0)) ))].capitalize() + in2) + in1)):{:\\nif b2:{:\\ns0 = \"\"8\"\".lstrip(saveChr(i1))\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in in2[:int(8.0)][( int(3.0) - i2 ):][:i1]:{:\\nin0 = saveChr(int(2.0)).lstrip(in1.rstrip()).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ns0 = (\"\"RC\"\" + (in0 + \"\"3*u\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(70.0)\\n:}\\n:}else:{:\\ni1 = ( saveOrd(s1) * i1 )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1], [1, 2, 1, 1, 0], [1], [0, 2, 1, 1], [], [0], [], [], [1, 0], [2], [0, 0, 2, 2], [0], [2, 4], [0, 3], [1], [], [1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 8, 8, 9, 3, 1, 8, 8, 4, 6, 8, 4, 7, 4, 9, 2, 9, 6], [2, 0, 2, 1, 0, 1, 2, 0, 0, 2, 1, 1, 1, 0, 0, 1, 1, 2, 2, 2, 2, 2, 0, 1], [0, 0], [3, 2, 1, 0, 2, 2, 3, 0, 0, 0, 1, 0, 3, 0, 1, 2, 1, 3, 2, 0, 2, 0, 3, 2, 2, 0, 2, 3, 1, 3, 0, 0, 1, 2, 1, 2, 2, 1, 3, 0, 1, 0, 0, 0, 1, 0, 0, 1, 3, 2, 1, 2, 0, 2, 0, 2, 3, 1, 0, 3, 0, 1, 0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 1, 4, 4, 2, 4, 0, 3, 1, 3, 3], [1, 2, 2, 0, 1, 2], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1], [4, 2, 2, 1, 2, 4, 5, 2, 1, 1, 0, 5], [1, 0, 0, 1, 1, 1, 1, 0, 1], [], [4, 2, 1, 2, 3, 2, 3, 0, 2, 1, 0, 2, 0, 2, 0, 0, 4, 2, 3, 0, 3, 4, 2, 4, 2, 4, 0, 2, 1, 4, 0, 0, 3, 2, 1, 3, 4, 3, 2, 2, 3, 4, 4, 4, 1, 0, 0, 4, 1], [2, 2, 2, 3, 1, 2, 1, 3, 1, 2, 1], [4, 5], [1, 2, 2, 2, 2, 1, 2, 0, 0, 2, 1, 0, 2], [2, 0, 0, 2, 0, 1, 3, 3, 2], [9, 22, 9], [12], [3, 9, 5], [16, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 1, 0, 0, 2, 0, 4, 0, 2, 2, 1, 0, 1, 19, 19, 24, 2, 63, 16, 11, 6, 10, 12, 9, 0, 49, 11, 2, 13, 9, 3, 1, 3, 2], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b0\\nif ( \"\"3\"\"[:max(( int(678.0) - i2 ), mod(( max(i0, i2) * i1 ),int(8.0)))].capitalize() == ((in1 + \"\"JW9\"\"[i0:])[saveOrd(s2):] + s2[i1:])[int(931.0):] or s1[:divInt(int(8.0),saveOrd(s2))].startswith((in1 + (saveChr(( i2 * mod(i0,abs(mod(divInt(i0,mod(saveOrd(in2),int(8.0))),min(i2, i1)))) ))[int(4.0):( int(6.0) + divInt(divInt(int(8.0),len(\"\"J\"\"[i1:])),int(4.0)) )].rstrip(s2.capitalize())[i1:i0].capitalize() + s1))[i0:].capitalize()) ):{:\\ns1 = (\"\"m\"\"[:int(7.0)] + (saveChr(i1) + ((saveChr(i1).strip(\"\"-\"\".capitalize()) + s0)[int(49.0):][max(divInt(int(2.0),( i2 - mod(i2,( len(in2) * int(9.0) )) )), i2):len(saveChr(i2))] + \"\"_5\"\")))\\n:}else:{:\\ni2 = int(6.0)\\n:}\\ni0 = i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2], [1], [0], [], [], [1], [], [5], [1], [], [1], [], [], [], [3], [], [], [], [30]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = \"\"_\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 1, 2, 2, 0, 1, 0], [0, 0, 2], [2, 2, 0, 0, 2], [0, 0], [0, 0, 0], [], [], [0, 3], [0], [0, 0, 1], [0], [], [1, 1], [], [1, 1], [], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [9, 0, 6, 3, 9, 3, 6, 5, 2, 0, 2, 5, 3, 5, 0, 8, 2, 8, 7, 7, 5, 1, 3, 3, 3, 2, 1, 2, 1, 3, 5, 3, 5, 4, 4, 0, 2, 7, 4, 0, 6], [0, 1, 1, 1, 0, 2, 1, 0, 0, 0, 2, 1, 1, 2, 1, 2, 0, 1, 0, 0], [], [3, 0, 2, 1, 3, 2, 1, 1, 1, 2, 2, 1, 2, 0, 3, 3, 1, 2, 3, 3, 2, 3, 0, 3, 0, 3, 2, 2, 3, 2, 2, 3, 2, 1, 1, 3, 1, 3, 0, 1, 3, 2, 2, 2, 2, 2, 3, 1, 2, 2, 0, 1, 2, 2, 0, 1, 3, 3, 0, 0, 0, 1, 1, 2, 0, 3, 2, 3, 1, 1, 3, 1, 3, 1, 3, 2, 1, 2, 1, 1, 3, 0, 1, 0, 0, 0, 3, 0, 2, 3, 3, 1, 0, 1, 1, 2, 1, 2, 2, 3, 0, 2, 3, 1, 1, 2, 2, 1, 1, 1, 2, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0], [3, 0, 1, 1, 2, 2, 2, 4, 1, 1, 2, 3, 1, 2, 0, 2, 3, 4, 0, 1, 0, 0, 0, 0, 0, 2, 3, 3], [0, 2, 1, 0, 0, 1, 2, 1, 2, 2, 0, 0, 0, 1, 1, 0, 1, 2], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 2, 2, 1, 0, 3, 1, 0, 4, 5, 5], [0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [4, 1, 3, 3, 3, 4, 1, 0, 4, 4, 1, 0, 1, 1, 0, 2, 4, 1, 0, 4, 2, 2, 4, 4, 4, 0, 0, 4, 0, 2, 1, 4, 1], [0, 2, 2, 2, 3, 0, 3, 0, 3, 3, 1], [4, 2, 1, 2], [2, 0, 0, 2], [2, 1, 1, 1, 0, 1, 2, 1, 3], [13], [21, 0, 3, 23, 23], [8, 5], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 2, 3, 0, 0, 2, 1, 3, 1, 0, 2, 0, 2, 0, 41, 41, 20, 0, 113, 33, 28, 18, 15, 12, 9, 2, 33, 11, 4, 4, 9, 1, 5, 2, 1], "tree_depth": 66, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(\"\"8v\"\", len((((\"\"a\"\".capitalize() + s1) + \"\"d\"\".capitalize().capitalize()) + s2)))\\nloopBreak% = 0\\nfor s2 in \"\"N\"\":{:\\ns1 = \"\"x\"\"\\nloopBreak% = 0\\nfor s0 in in0:{:\\nloopBreak% = 0\\nwhile False:{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = i0 \\l divInt(int(90.0),min(( int(639.0) + int(3.0) ), int(6520.0)))\\ns1 = \"\"5\"\".rstrip(s0)[( divInt(int(2.0),mod(i1,max(max(int(535.0), mod(abs(abs(mod(abs(i1),saveOrd(getCharFromString(getCharFromString(in1.rstrip(), i1).strip()[max(( mod(max(( ( abs(mod(int(0.0),int(8.0))) * len(in2) ) - int(2.0) ), max(i0, int(8.0))),abs(( ( ( ( divInt(min(int(7.0), ( divInt(i2,int(7.0)) + ( ( i1 + int(5.0) ) - abs(len(in2.strip())) ) )),i0) * i0 ) - i0 ) * int(1.0) ) * int(3.0) ))) + divInt(i2,saveOrd(\"\"x\"\"[( min(int(3.0), int(3.0)) + max(int(2.0), min(int(1.0), min(( int(2.0) + divInt(int(1.0),int(3.0)) ), min(i1, int(5.0))))) ):])) ), i1):i2][i1:min(i2, mod(min(abs(int(3.0)), i0),int(5.0)))], int(4.0)))))),( int(4.0) - divInt(mod(len(saveChr(i1)),( len(\"\"\"\") - int(0.0) )),int(2.0)) ))), ( mod(int(74.0),int(0.0)) + int(6.0) )))) - ( i0 * i0 ) ):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 0, 2, 1], [1, 2], [0, 0], [], [0], [], [], [1, 2], [0, 4], [1, 2, 0, 1], [0, 0], [5], [1], [], [1], [0], [1, 0, 1], [7, 7, 8], [2, 1, 0, 1, 2], [], [1, 0, 0, 1, 3, 0, 0, 0], [0], [1], [1], [], [3, 3], [0, 1, 1, 0, 1], [], [4, 4, 3, 1, 0, 4, 3, 2, 1, 1, 0], [3, 3, 3], [0, 2, 4], [0], [3, 0, 0, 3, 2], [12, 6], [], [3], [11, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 2, 2, 4, 2, 1, 1, 0, 1, 1, 3, 3, 5, 0, 8, 0, 1, 0, 0, 2, 5, 0, 11, 3, 3, 1, 5, 2, 0, 1, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l i2:{:\\nb1 = (\"\"(M\"\" + in0).strip().lstrip().endswith((\"\"G\"\"[i1:int(78.0)] + \"\")3\"\").rstrip(in0))\\nloopBreak% = 0\\nwhile False:{:\\nb2 = max(i0, i1) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [1, 0, 2], [], [0, 0], [], [], [1], [], [2], [], [5], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 8, 7, 3, 0, 9, 0], [2, 2, 1, 1, 0, 2], [0], [2, 1, 3, 2, 1, 1, 3, 3, 3, 2, 2, 3, 3, 2, 0, 2, 3, 1, 0, 0, 3, 3, 1, 2, 1, 2, 2, 1, 3, 1, 2, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1], [2, 3, 2, 2, 1, 3, 3, 3, 4, 3], [1, 2, 1, 0, 1], [0, 1, 1, 1, 0], [3, 1, 5, 1, 3, 3], [1], [], [0, 4, 0, 2, 0, 2, 0, 4, 4, 1, 0, 4], [2, 1, 1, 1], [5], [0, 0], [2], [], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 6, 1, 33, 10, 10, 5, 5, 6, 1, 0, 12, 4, 0, 2, 1, 0, 0, 1, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(int(7.0),abs(( int(2.0) - int(8.0) )))\\nb1 = in0.endswith(s1.capitalize())\\nin2 = s1[len(in0[abs(abs(mod(( max(len(saveChr(mod(i2,mod(len(saveChr(int(7.0))),i1)))), i1) * len(\"\"1\"\") ),saveOrd(in0)))):int(3.0)]):( int(0.0) - ( ( int(9.0) + len(saveChr(int(0.0))) ) - divInt(i0,i2) ) )]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2, 1, 2, 0, 1, 2], [0, 0], [0, 0, 0, 3, 2, 0, 0, 3, 0], [0], [2, 2], [0], [], [4, 0, 1, 5], [1], [], [4, 2, 4, 3, 0, 2, 1, 3, 0, 2, 0], [2, 3], [4], [1, 0, 1], [2], [], [], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 9, 1, 2, 1, 0, 4, 1, 0, 11, 2, 1, 3, 1, 0, 0, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\nin1 = (s0 + \"\"3\"\"[i1:i2]).rstrip((s1 + in2[:abs(( i0 + i1 ))]))[:abs(i2)].capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [], [3, 2, 0, 3, 0], [0], [2, 4], [2], [], [5, 5, 1, 4, 5], [0, 0, 1], [], [0, 4, 1, 0, 4, 0], [3, 0], [2], [1], [3, 0, 2], [0], [], [1], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 1, 1, 0, 3, 1, 0, 1, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\ns1 = \"\"^A1\"\".strip()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [1, 0, 0], [2], [0, 1], [], [0, 0], [], [], [3], [5], [1, 1], [0], [], [2], [], [0], [], [1, 1, 1, 1, 1, 1, 1], [4, 2, 8, 3, 3, 3, 3], [0, 2, 1, 1, 0, 1, 1], [1], [3, 3, 2, 3, 1, 2, 1, 2, 2, 0, 3, 3, 1, 0, 3, 2, 1, 2, 2, 0, 3, 1, 2, 1, 2, 3, 3, 1, 0, 0, 3, 3, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0], [0, 1, 0, 0, 2, 1, 3, 2, 4, 2, 2], [0, 2, 2, 1, 1], [1, 0, 1, 1], [1], [1, 1], [], [1, 1], [], [], [], [0, 0], [20, 6], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 7, 0, 34, 9, 11, 5, 4, 0, 2, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(max(( min(int(4.0), mod(int(2.0),( divInt(i0,min(abs(int(8.0)), i2)) + max(( int(3.0) * ( mod(i1,len(\"\"U\"\")) * int(3.0) ) ), mod(int(3.0),( abs(saveOrd(\"\"G\"\")) - int(3.0) ))) ))) - i1 ), i0), abs(abs(i1))) != i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 2], [], [0], [], [], [2], [3], [1], [0], [], [], [], [], [], [0, 0, 1], [2, 2, 1], [1], [], [0, 1], [], [], [], [], [3], [1], [], [4, 1], [3], [1], [], [1], [], [6], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 1, 1, 0, 2, 1, 1, 0, 1, 0, 1, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\ge int(221.0)\\nin0 = \"\"g\"\".rstrip()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1], [2, 1, 1, 0, 0], [0], [1, 1, 1, 2], [0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [4, 8, 6, 4, 0, 0, 4, 1, 5, 8, 5, 4, 5, 2, 1, 7, 7, 3, 2, 9, 3, 7, 6, 1, 9], [0, 2, 2, 0, 0, 0, 0, 1], [1, 0, 0], [2, 0, 1, 1, 0, 2, 2, 3, 1, 2, 3, 1, 1, 3, 2, 0, 1, 2, 2, 3, 1, 1, 0, 1, 1, 3, 2, 1, 3, 1, 0, 3, 1], [1, 1, 1, 1, 1, 1, 1, 0], [4, 0, 4, 2, 0, 0, 2], [0, 1], [1, 0, 0, 1, 1, 1, 0], [3, 2, 0, 2], [1, 0, 0, 1], [0], [3, 0, 4, 1, 4, 2, 0, 2, 2, 2, 1], [1, 3], [0], [1, 2, 0, 2], [2, 2, 3, 0], [15], [], [5, 8], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 8, 3, 33, 8, 7, 2, 7, 4, 4, 1, 11, 2, 1, 4, 4, 1, 0, 2, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in (s2 + saveChr(mod(i0,int(4.0)))):{:\\ni2 += int(86.0)\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = divInt(divInt(saveOrd(\"\"5\"\"),int(4.0)),mod(min(int(004.0), int(15.0)),saveOrd(s0[:mod(i0,int(8.0))].lstrip())))\\ns2 = \"\"8[P\"\"[mod(divInt(abs(int(545.0)),int(21.0)),i0):][int(7.0):int(7329.0)][min(( int(3.0) - min(int(76.0), i1) ), abs(int(19.0))):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [0, 2, 0, 0], [2], [2, 0, 0], [], [0, 0, 0], [], [], [3, 2], [3, 0, 5], [0, 1, 1, 1], [0, 0, 0], [], [2], [], [], [], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [4, 6, 0, 1, 1, 9, 1, 6, 6, 1, 0, 9], [2, 0, 1, 0, 1, 1, 1, 2, 2, 2, 2, 0, 1], [1, 0], [2, 3, 3, 2, 1, 3, 2, 0, 0, 1, 2, 2, 3, 1, 1, 1, 3, 0, 1, 3, 3, 0, 3, 3, 0, 3, 3, 0, 2, 0, 2, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 3, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0], [3, 2, 1, 3, 3, 4, 2, 3, 3, 4, 1, 2], [2, 1], [1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 4, 2, 4, 0, 2], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [2, 0, 3, 3, 2, 1, 0, 0, 3, 1, 4, 3, 2, 0, 1, 1, 4, 1, 3, 1, 4, 3, 3, 0, 3, 2, 0, 3, 0, 1, 2, 4, 4, 1, 1, 1, 1, 4, 4, 2, 4], [3, 2, 0, 3, 3, 0, 0, 1], [4, 3, 0], [1, 1, 2, 1, 0, 0], [1, 1, 1, 2, 1, 2, 3, 1, 3, 1, 0, 2, 3, 3, 1], [23], [17, 8, 6, 7, 9, 25, 5], [1, 9, 3], [31, 3, 8, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 3, 0, 0, 2, 3, 4, 3, 0, 1, 0, 0, 0, 12, 12, 13, 0, 43, 9, 12, 2, 7, 8, 15, 0, 41, 8, 3, 6, 15, 1, 7, 3, 4], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1[:mod(len(((\"\"ri\"\"[:abs(divInt(int(46.0),max(mod(i2,i0), int(0.0))))] + s1) + in1)),divInt(mod(len((\"\"g1h9\"\" + (s2[int(11.0):] + \"\"`\"\").rstrip(\"\"j\"\"))),int(9.0)),int(1.0)))]\\nloopBreak% = 0\\nwhile not len(\"\"\"\".capitalize()) \\ge i1:{:\\nres0 = int(6.0) \\l saveOrd((\"\"z\"\" + getCharFromString(((in1 + (s0[:abs(i0)] + (s2 + \"\"X\"\"))) + \"\"3\"\".lstrip().lstrip(\"\"%\"\")[len(\"\"<\"\"):len(\"\"f\"\")]), i1)))\\nb2 = saveOrd(getCharFromString(getCharFromString(saveChr(max(i1, divInt(i1,( i2 * int(6.0) ))))[int(10.0):i2], i2), mod(( i2 - i0 ),i1))) != abs(int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [2], [1, 2], [], [0], [], [], [0], [], [2], [], [4], [0], [], [], [], [0, 1, 0, 1], [4, 7, 8, 2], [0, 2, 0, 0], [0], [0, 2, 0, 1, 1, 0], [1], [2], [], [0], [5, 1, 5, 1, 3], [1], [], [0, 4, 4, 4, 0, 2, 0, 4, 0, 1, 4], [3, 3, 3, 3, 1], [3, 1, 4, 5], [0], [2], [], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 1, 6, 1, 0, 0, 1, 5, 1, 0, 11, 5, 4, 1, 1, 0, 0, 1, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2.startswith(s1.rstrip(in2[i0:divInt(i2,int(47.0))]).rstrip().lstrip(s1.strip(\"\"5\"\"))):{:\\ni0 = int(82.0)\\nin0 = saveChr(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1], [4, 1, 5, 0, 4, 2, 4, 0, 5, 8], [1, 2, 2, 0, 0, 2, 1], [0], [3, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 2, 3, 3, 2, 1, 2, 3, 1, 2, 3, 3, 0, 0, 2, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 1, 1, 0], [2, 2, 1, 1, 3, 2, 0, 3, 2, 0], [0, 2, 2, 0], [1, 0, 1, 0], [2, 4, 0, 1, 0], [0, 1, 0, 0, 0, 1, 1], [0], [4, 3, 0, 0, 4, 2, 3, 4, 1, 1, 1, 0], [3, 2, 2], [2], [1], [2, 1, 2, 3, 1, 3, 0], [19], [2, 4], [5, 7], [13, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 7, 1, 30, 8, 10, 4, 4, 5, 7, 1, 12, 3, 1, 1, 7, 1, 2, 2, 2], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in (in1 + s0).strip():{:\\ns1 = (\"\"5c\"\".capitalize() + \"\"7*e&\"\")[:abs(int(4.0))].capitalize()\\ni1 = ( abs(max(max(int(15.0), mod(int(0.0),( len(\"\"T\"\") + ( abs(min(divInt(int(4.0),mod(len(s0),int(2.0))), divInt(abs(min(i2, i2)),( i0 * i0 )))) * i2 ) ))), i1)) + int(4058.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [2, 1, 1, 1, 0, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 1, 1, 2, 2, 0, 0, 0, 2, 0], [1, 2, 2, 0, 2, 0, 2, 2, 1, 2, 2, 2, 2, 1], [1, 2, 1, 0, 1, 1, 2, 1, 0, 1, 0, 2, 1], [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 3], [2, 5, 1, 5, 2, 3, 1], [0, 0, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 3, 0, 5, 3, 4], [1, 1], [], [1, 1], [1, 1, 0], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 9, 2, 2, 9, 7, 1, 3, 9, 1, 7, 5, 4, 1, 6, 2, 3, 0, 8, 6, 3, 2, 3, 1, 9, 4, 4, 8, 7, 9, 2, 8, 2, 6, 1, 7, 1, 2, 7, 9, 7, 8, 8, 0, 4, 7, 9, 7, 6, 5, 2, 0, 0, 0, 8, 7, 4, 1, 9, 0, 3, 6, 8, 6], [0, 0, 2, 1, 2, 0, 1, 0, 2, 0, 1, 0, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 2, 1, 1, 0, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 2, 0, 2, 2, 0, 1, 0, 2, 1, 1, 2, 0, 0, 0, 2, 2, 1, 0, 1, 0, 0, 2, 1, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2, 2, 0, 0, 0, 0, 1, 2, 0, 2, 2, 1], [1, 0, 0, 1, 0, 1, 0], [1, 2, 1, 0, 3, 1, 3, 0, 0, 3, 2, 1, 2, 0, 1, 1, 2, 3, 1, 0, 1, 0, 3, 0, 0, 2, 2, 3, 3, 3, 3, 2, 1, 1, 0, 1, 2, 0, 0, 2, 0, 0, 0, 3, 3, 2, 0, 1, 2, 1, 2, 1, 2, 0, 3, 3, 2, 2, 1, 0, 0, 0, 1, 2, 0, 0, 1, 1, 0, 1, 2, 3, 1, 3, 0, 0, 1, 3, 0, 0, 1, 0, 1, 2, 3, 3, 3, 3, 1, 3, 1, 1, 2, 1, 0, 1, 3, 2, 3, 3, 3, 2, 1, 2, 3, 3, 0, 3, 1, 0, 0, 2, 1, 1, 1, 3, 0, 3, 1, 0, 3, 3, 1, 1, 2, 0, 0, 1, 3, 2, 2, 0, 2, 0, 3, 3, 2, 1, 1, 3, 0, 2, 3, 1, 1, 0, 2, 0, 0, 3, 0, 2, 1, 2, 1, 3, 3, 0, 0, 0, 2, 0, 1, 0, 0, 3, 2, 0, 2, 0, 2, 3, 3, 3, 3, 0, 0, 1, 2, 2, 0, 0, 1, 3, 1, 2, 0, 2, 1, 0, 2, 0, 3, 1, 2, 0, 0, 3, 3, 0, 3, 1, 3, 3, 0, 2, 3, 3, 3, 1, 3, 1, 0, 3, 3, 1, 3, 2, 2, 3, 1, 2, 0, 3, 1, 2, 1, 3, 3, 2, 3, 0, 0, 0, 1, 2, 3, 0, 3, 2, 2, 0, 2, 0, 0, 0, 3, 0, 2, 2, 0, 2, 0, 2, 0, 3, 2, 0, 2, 1, 3, 1, 1, 0, 1, 2, 0, 3, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1], [1, 2, 3, 3, 3, 3, 4, 2, 2, 0, 4, 4, 3, 3, 1, 2, 3, 4, 3, 4, 4, 2, 0, 0, 2, 3, 0, 4, 0, 3, 4, 3, 4, 2, 0, 1, 3, 1, 0, 0, 2, 3, 2, 4, 0, 3, 0, 3, 1, 3, 0, 4, 4, 1, 2, 1, 2, 0, 2, 4, 0, 0, 3, 0, 1, 1, 1, 0, 4, 1], [2, 1, 2, 0, 2, 1, 1, 1, 2, 0, 0, 2, 0, 0, 2, 2, 1, 0, 2, 2, 0, 1, 1, 1, 0, 2, 2, 1, 2, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0], [1, 5, 2, 3, 1, 0, 2, 0, 0, 4, 5, 5, 3, 0, 3, 0, 3, 1, 4, 1, 5, 5, 0, 3, 5, 2, 1, 5, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [0, 0], [2, 3, 2, 0, 2, 2, 0, 0, 1, 1, 4, 0, 2, 1, 2, 1, 1, 4, 0, 2, 1, 0, 2, 1, 1, 3, 2, 1, 1, 0, 2, 2, 2, 1, 4, 2, 2, 4, 2, 4, 4, 4, 4, 2, 2, 2, 2, 1, 1, 2, 4, 2, 1, 2, 4, 1, 0, 4, 0, 1, 0, 4, 2, 4, 0, 1, 4, 2, 4, 2, 0, 4, 1, 3, 2, 0, 2, 2, 0, 2, 1, 1, 3, 3, 0, 0, 2, 1, 3, 0, 4, 4, 1, 2, 0, 0, 4, 0, 3, 2, 2, 4, 1, 0, 2, 3, 4, 0, 1, 2, 4, 1, 4, 1, 2, 1, 0, 4, 0], [0, 3, 1, 0, 0, 3, 1, 3, 3, 3, 2, 1, 1, 0, 2, 2, 0, 0, 2, 0, 0, 1, 2, 1], [1, 1, 2, 4, 2], [1, 2, 2, 2, 1, 2, 2, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 2, 0, 2, 0, 0, 1, 0, 0, 0, 2, 1, 2, 1, 2, 0, 0, 0, 1, 0], [1, 1, 2, 0, 2, 0, 1, 2, 0, 0, 0, 0, 3, 2, 1, 1, 3, 0, 0, 0, 0, 2, 3, 1, 2, 2, 3, 0, 3, 1], [23, 17, 20, 9, 2, 25, 25, 18, 16, 13, 18], [15, 5, 16, 24, 0, 7, 12], [1, 0, 4, 2, 0, 4, 9], [26, 15, 0, 19, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 27, 27, 14, 13, 2, 8, 0, 0, 3, 7, 15, 7, 6, 2, 0, 2, 3, 64, 64, 87, 7, 270, 59, 70, 31, 31, 29, 30, 2, 119, 24, 5, 36, 30, 11, 7, 7, 5], "tree_depth": 55, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif False:{:\\ni0 *= int(7.0)\\ns1 = (in2[( int(9.0) - i0 ):] + s2[max(int(2.0), abs(i2)):][i1:])[:len(in0)]\\n:}else:{:\\ni2 = divInt(int(29.0),divInt(i0,int(7.0)))\\nres0 = False\\nloopBreak% = 0\\nwhile int(1.0) == ( len(\"\"p\"\") * int(3.0) ):{:\\nloopBreak% = 0\\nwhile i1 != int(9.0):{:\\ni0 = i2\\nloopBreak% = 0\\nfor s1 in \"\"f\"\":{:\\nloopBreak% = 0\\nwhile getCharFromString(s0, len(\"\"1\"\"[:i0])) not in \"\"X\"\"[i1:]:{:\\nloopBreak% = 0\\nfor s2 in \"\"0\"\":{:\\ni0 += ( divInt(len(s0.rstrip()),saveOrd(\"\"R\"\"[abs(abs(( int(1.0) * int(7.0) ))):])) - i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile s0 != \"\"q\"\"[int(54.0):( i1 - i1 )]:{:\\nloopBreak% = 0\\nwhile \"\"4\"\" in (\"\"U\"\"[mod(i1,i2):i1] + \"\"J\"\"):{:\\nif min(saveOrd(in1), ( i0 - int(1.0) )) \\g ( int(6.0) * mod(int(2.0),mod(i1,saveOrd(\"\"C\"\"[:len(saveChr(divInt(divInt(int(3.0),i1),i1)))][:i1][int(0.0):]))) ):{:\\nloopBreak% = 0\\nwhile getCharFromString(getCharFromString(saveChr(( i2 + i1 )).rstrip(), int(8.0))[int(6.0):i1], int(3.0))[divInt(len(\"\"Z\"\"[int(2.0):max(i0, i2)][int(3.0):][:abs(i1)][i1:].strip()),int(1.0)):i1][int(9.0):( len(\"\"[\"\") + saveOrd(\"\"2\"\"[len(\"\"y\"\".strip()[saveOrd(in2):int(4.0)]):saveOrd(in2.capitalize())].rstrip(\"\"a\"\")[int(4.0):]) )].endswith(in0):{:\\nloopBreak% = 0\\nwhile saveChr(int(8.0)) != saveChr(( int(7.0) * i2 ))[:int(9.0)]:{:\\ns0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 = abs(divInt(min(min(abs(( int(2.0) + mod(len(\"\",\"\"),min(i2, saveOrd(getCharFromString(s0[int(8.0):i1].capitalize()[i1:( int(2.0) + int(6.0) )], int(1.0))))) )), min(i1, len(\"\"Z\"\".capitalize()))), int(7.0)),i0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = (in0[saveOrd(s1[:len(\"\"S\"\"[int(1.0):])][int(2.0):]):( i0 * i0 )] + \"\"Q\"\").startswith(((in1 + s1) + \"\"N\"\"[:int(7.0)]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile saveOrd((in2 + getCharFromString(getCharFromString(\"\"0\"\", ( divInt(i1,( i1 * abs(min(( int(9.0) - int(7.0) ), max(i2, mod(len(in2[int(8.0):]),int(8.0))))) )) + i0 )), mod(i2,i2)))) != max(i0, mod(int(04.0),divInt(int(7.0),min(min(i1, i0), i2)))):{:\\nloopBreak% = 0\\nwhile divInt(i1,int(9.0)) == i1:{:\\ni2 *= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = abs(mod(i0,( i0 * ( len(s0) + abs(saveOrd(in0.capitalize())) ) ))) \\ge min(i2, i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = (getCharFromString(\"\"\"\", int(7.0))[mod(( i1 - i0 ),int(6.0)):len(s2)][int(5.0):mod(i1,( int(2.0) - i0 ))] + (getCharFromString(s1, divInt(i0,min(int(0.0), ( i2 - i1 )))) + \"\"h49:\"\")[len(saveChr(max(i1, len(\"\"S\"\")))[:int(0.0)]):min(saveOrd(\"\"_\"\".capitalize()), i2)])\\nif ( saveOrd(\"\"m\"\"[max(abs(int(0.0)), max(int(8.0), i0)):abs(min(int(7.0), abs(mod(mod(saveOrd(in2),int(4.0)),mod(i0,min(int(1.0), ( int(9.0) + min(len(saveChr(mod(min(i1, i1),i1))), int(0.0)) )))))))]) * mod(max(i2, max(mod(( i2 * divInt(i0,i2) ),i2), max(i0, mod(mod(i0,( i0 - ( i0 * min(( i1 - ( int(3.0) - saveOrd(s2) ) ), int(6.0)) ) )),int(8.0))))),i2) ) \\g int(6.0):{:\\ni0 = divInt(i2,max(i2, i1))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1], [2, 2, 0, 0, 0], [0, 1], [0, 1, 0], [0], [0, 0, 0], [], [], [1, 2], [1], [0, 2, 2, 2, 0, 2, 1], [0], [3, 2, 4, 1], [3, 3], [0, 1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [9, 9, 3, 0, 0, 8, 7, 7, 7, 2, 9, 7], [0, 0, 0, 1, 1, 2], [0], [2, 2, 2, 1, 0, 0, 0, 1, 2, 3, 0, 1, 3, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 0, 3, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0], [4, 1, 3], [2, 1, 1, 0, 2, 1], [0, 1], [5, 3, 5, 3, 4, 3, 0, 2, 5, 5, 1, 4], [1, 1, 1], [0], [0, 0, 0, 2, 0, 3, 3, 3, 4, 0, 2, 0, 2, 1, 0, 2, 0, 0, 0, 1, 1, 0], [3], [2], [0, 0, 1, 2], [2, 2, 3], [], [], [0, 5], [24]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 3, 0, 0, 2, 1, 7, 1, 4, 2, 2, 0, 1, 12, 12, 6, 1, 27, 8, 3, 6, 2, 12, 3, 1, 22, 1, 1, 4, 3, 0, 0, 2, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in0:{:\\nif ( in2 != in0 and in1[( ( ( int(9.0) * i0 ) - i0 ) - i0 ):int(9.0)] == (((in0.strip() + s0[divInt(saveOrd(\"\"0\"\"[:i1]),int(3.0)):max(int(0.0), mod(( ( int(0.0) + int(8.0) ) * int(7.0) ),int(7.0)))]) + s2) + in2[int(72.0):]) ):{:\\nb1 = in2.startswith(s1)\\ni1 = ( i2 - len(\"\"5\"\") )\\n:}\\nb2 = ( \"\"?\"\" not in in1 or int(9.0) \\g int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [1], [0, 0], [], [0, 0], [], [], [1, 2, 2], [4, 4], [1, 1, 2], [0, 0], [0], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 5, 9, 1, 0, 4, 6, 8, 3, 1, 8, 8, 2, 7, 3, 2, 8, 6, 1, 8, 1, 9, 3, 5, 3, 7, 0, 6, 2, 0, 4, 3, 3, 8, 2, 0, 0, 7, 1, 0, 6], [0, 2, 1, 2, 1, 0, 1, 0, 2, 0, 1, 0, 0, 0, 0, 1, 0, 2, 1, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 0, 1, 1, 0, 2, 0, 0], [], [2, 3, 1, 0, 0, 1, 0, 1, 3, 0, 1, 1, 0, 0, 3, 1, 2, 2, 1, 1, 1, 2, 1, 1, 3, 0, 1, 2, 3, 1, 2, 3, 0, 0, 1, 2, 0, 3, 2, 2, 2, 2, 3, 2, 2, 1, 1, 0, 0, 3, 0, 3, 2, 2, 2, 0, 2, 1, 2, 2, 1, 0, 3, 3, 1, 2, 2, 1, 3, 3, 3, 0, 0, 2, 3, 1, 1, 2, 0, 0, 2, 2, 1, 3, 3, 2, 0, 0, 3, 0, 0, 3, 0, 2, 0, 1, 2, 2, 0, 0, 2, 2, 2, 0, 0, 1, 3, 2, 3, 2, 1, 1, 3, 3, 0, 3, 0, 0, 3, 2, 2, 3, 0, 2, 1, 3, 2, 0, 3, 3, 1, 2, 3, 1, 2, 3, 1, 0, 1, 1, 3, 1, 1, 1, 2, 1, 1, 0, 2, 3, 1, 2, 2, 0, 3, 3, 2, 3, 0, 3, 2, 0, 0, 2, 3, 0, 1, 3, 3, 0, 0, 1, 0, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 3, 1, 4, 0, 2, 0, 3, 1, 2, 1, 4, 3, 0, 4, 2, 2, 2, 4, 0, 4, 4, 0, 1, 0, 2, 4, 1, 0, 2, 0, 0, 1, 2, 4, 0, 2, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 2, 0, 1, 2, 2, 0, 0, 2, 1, 2, 2, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0], [3, 4, 3, 0, 4, 4, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [], [2, 4, 2, 3, 2, 2, 4, 1, 3, 0, 2, 1, 3, 1, 2, 3, 0, 2, 3, 3, 4, 2, 4, 4, 1, 4, 2, 0, 0, 0, 2, 2, 4, 1, 1, 2, 1, 4, 2, 2, 0, 1, 0], [3, 1, 2, 2, 0, 1, 1, 1], [2], [0, 0, 1, 0, 2, 2, 0, 0, 2, 2, 2, 0, 2, 0], [3, 0, 0, 2, 3, 1, 2, 3, 2, 0, 3, 3], [22, 1, 4], [10], [2, 1, 8], [12, 21, 25, 15, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 2, 2, 3, 2, 1, 0, 0, 0, 1, 42, 42, 45, 0, 175, 47, 41, 20, 27, 7, 12, 0, 43, 8, 1, 14, 12, 3, 1, 3, 5], "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = divInt(min(int(1.0), i0),i2) \\le int(5.0)\\nif i1 \\le int(5.0):{:\\nb2 = (saveChr(min(i2, int(9.0)))[int(1.0):i1][:i0] + \"\")W\"\")[min(int(0.0), mod(divInt(int(4.0),int(6.0)),int(8.0))):mod(int(3.0),int(1.0))].strip()[len((in0 + \"\"B2\"\"[i1:])):int(8.0)] in (\"\"<k1\"\" + (in1 + ((getCharFromString(\"\"@\"\", ( max(int(8.0), mod(saveOrd(saveChr(i0)),i2)) + int(2.0) )).capitalize()[( i0 - min(( ( divInt(divInt(abs(mod(( int(7.0) - int(3.0) ),i1)),i0),min(i0, len(in0[( mod(divInt(i0,divInt(int(2.0),mod(divInt(int(8.0),i0),max(abs(int(6.0)), ( divInt(int(1.0),max(saveOrd(s0), len(in1))) - i1 ))))),i0) - divInt(min(int(8.0), int(1.0)),( i2 + i1 )) ):]))) - divInt(mod(int(9.0),saveOrd(saveChr(abs(divInt(i2,i2)))[abs(i2):][i1:])),abs(i1)) ) + ( i2 * int(3.0) ) ), ( ( i1 + i0 ) - ( ( ( i1 * i1 ) * int(5.0) ) + saveOrd(\"\"8\"\") ) )) ):divInt(min(( int(3.0) + int(7.0) ), saveOrd(\"\"E\"\")),saveOrd(\"\",\"\"[i1:min(i2, i0)]))].capitalize() + saveChr(max(( divInt(min(i0, mod(int(0.0),abs(( i2 * saveOrd(in1[max(int(6.0), ( min(int(2.0), divInt(abs(int(0.0)),i2)) - int(4.0) )):int(3.0)][min(int(3.0), int(8.0)):]) )))),int(2.0)) * divInt(int(0.0),int(0.0)) ), i1))) + \"\"+\"\")[mod(min(int(7.0), ( divInt(i0,max(abs(( saveOrd(s1) * i2 )), min(mod(i0,i1), divInt(abs(i1),int(1.0))))) - min(max(i0, i2), int(0.0)) )),i0):int(6.0)])[i0:])\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 2], [], [], [], [], [3], [], [2], [], [0], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 3, 9, 7, 1, 7, 3, 7, 5, 0, 4, 4, 1, 3, 6, 8, 5, 9, 4, 4, 0, 1], [2, 2, 1, 0, 2, 1, 2, 0, 0, 2, 0, 2, 2, 0, 1, 0, 2, 0], [1], [0, 2, 2, 3, 2, 2, 2, 3, 3, 2, 3, 3, 2, 3, 2, 0, 3, 0, 1, 3, 0, 1, 2, 3, 0, 0, 2, 2, 0, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 1, 3, 0, 1, 0, 0, 3, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 3, 1, 3, 3, 1, 2, 1, 3, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 3, 1, 3, 4, 1, 4, 3, 4, 0, 1, 2, 4, 3, 4, 4, 2, 1, 3, 1, 3, 2, 2], [2, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 5, 2, 0, 4, 5, 3, 1, 4], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [], [2, 1, 2, 2, 1, 4, 2, 0, 0, 4, 0, 2, 1, 2, 4, 2, 1, 0, 0, 2, 1, 4, 0, 1, 0, 1, 0, 1], [3, 0, 0, 2, 1], [5, 3], [0, 2, 0, 0, 1, 0, 1, 0], [3, 3, 0, 2, 0, 3, 2, 2, 1, 0, 2, 3], [20, 7, 23], [10], [5, 6, 4, 3], [6, 24, 11, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 20, 20, 17, 0, 85, 29, 19, 12, 17, 9, 12, 0, 28, 4, 1, 8, 12, 3, 1, 4, 4], "tree_depth": 72, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"#\"\"[i2:( mod(len(\"\"?U5\"\"[( mod(divInt(len(s0[max(mod(len(in2),saveOrd(getCharFromString(s2, ( max(( i2 * saveOrd(\"\"H\"\"[:i1]) ), int(7.0)) + len(getCharFromString(\"\"(\"\"[:i0], int(7.0))[divInt(saveOrd(s0),i2):i1]) )))), divInt(( i2 - int(3.0) ),mod(( min(max(divInt(( mod(( divInt(divInt(( mod(( abs(saveOrd(in1)) - len(\"\"6\"\"[saveOrd(in2.capitalize()):int(9.0)]) ),divInt(int(7.0),( int(1.0) * saveOrd(\"\"4\"\") ))) * i0 ),i0),int(7.0)) + int(3.0) ),int(7.0)) + int(5.0) ),mod(i2,divInt(mod(int(0.0),int(4.0)),( int(4.0) + abs(i0) )))), int(1.0)), i2) + i2 ),max(i0, int(3.0))))):int(6.0)].strip(in0)),i1),int(8.0)) + mod(int(5.0),i0) ):i2][int(9.0):]),len(\"\"kX\"\")) + int(4.0) )] in s1\\nin1 = \"\"3`\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 1, 1, 1, 0, 2, 2, 2, 2, 1, 2, 1], [2, 0, 2, 2, 2, 0, 2, 0], [1, 1, 0, 2, 1, 0, 0], [0, 0, 0], [0], [], [], [0, 3, 3], [4, 0, 2, 5], [1, 1, 2, 0, 1, 0, 0, 2, 2, 0, 0, 2, 1, 0, 0, 2, 0], [0, 0, 0, 0], [5, 3, 5, 5, 0], [3, 1, 2, 3, 3, 1, 3, 1], [1, 0, 1, 0], [1, 1, 1], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 2, 2, 7, 2, 4, 7, 3, 7, 9, 2, 5, 4, 5, 1, 8, 3, 5, 1, 6, 2, 5, 5, 5, 6, 9, 3, 0, 7, 9, 8, 4, 1, 2, 3, 4, 5, 5, 6, 4, 2, 9, 1, 3, 2, 1, 3, 2, 2, 1, 5, 2, 9], [0, 2, 0, 0, 1, 0, 2, 1, 2, 0, 1, 1, 2, 2, 2, 0, 0, 0, 2, 2, 2, 1, 1, 2, 2, 1, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0], [1, 1, 0], [0, 2, 2, 2, 2, 3, 1, 3, 3, 2, 2, 1, 3, 0, 2, 1, 0, 2, 2, 2, 1, 1, 1, 3, 2, 1, 3, 2, 2, 2, 2, 2, 3, 0, 3, 0, 3, 0, 2, 1, 2, 3, 2, 0, 3, 1, 1, 1, 0, 1, 2, 3, 2, 1, 1, 2, 1, 0, 0, 1, 3, 2, 0, 0, 1, 1, 1, 1, 1, 2, 3, 0, 3, 1, 0, 1, 0, 2, 1, 1, 2, 0, 2, 3, 0, 1, 1, 1, 2, 3, 1, 0, 2, 2, 2, 1, 3, 1, 2, 2, 1, 2, 0, 3, 0, 3, 0, 2, 0, 0, 3, 1, 0, 0, 2, 2, 2, 2, 1, 0, 3, 3, 3, 1, 3, 0, 1, 3, 1, 2, 0, 3, 3, 0, 3, 3, 3, 1, 2, 0, 1, 0, 1, 0, 0], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 2, 4, 0, 3, 3, 4, 4, 1, 2, 4, 2, 2, 0, 2, 0, 1, 2, 1, 2, 0, 2, 3, 1, 4, 1, 2, 4, 3, 2, 0], [2, 2, 0, 1, 1, 0, 1, 1, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0], [5, 2, 1, 2, 2, 1, 4, 5, 5, 2, 2, 1, 0, 4, 4, 0, 4, 2], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0], [3, 4, 0, 1, 4, 4, 0, 4, 0, 4, 2, 2, 4, 4, 0, 2, 4, 3, 1, 0, 4, 0, 1, 1, 1, 2, 0, 4, 3, 2, 3, 0, 1, 2, 0, 1, 0, 0, 4, 1, 2, 1, 0, 0, 1, 2, 2, 2, 1, 4, 1, 1, 2, 0], [3, 0, 1, 1, 2, 0, 1, 3, 0, 2, 0, 3], [5, 3, 2], [1, 0, 0, 2, 1, 2, 2, 1, 2, 1, 1], [2, 3, 0, 3, 2, 2, 3, 1, 1, 2, 2, 1, 0, 3, 0], [8, 20, 1], [3, 7, 15], [4, 5, 4, 2, 1], [22, 12, 20, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 15, 15, 8, 7, 3, 1, 0, 0, 3, 4, 17, 4, 5, 8, 4, 3, 0, 54, 54, 36, 3, 145, 41, 31, 21, 22, 18, 15, 3, 54, 12, 3, 11, 15, 3, 3, 5, 4], "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i2\\nloopBreak% = 0\\nwhile mod(mod(( mod(min(int(38.0), abs(saveOrd((in2.strip(\"\"4\"\") + getCharFromString(saveChr(( divInt(int(2.0),min(i0, mod(int(2.0),i0))) * mod(mod(( int(7.0) + int(2.0) ),int(4.0)),len(s2)) )), divInt(int(7.0),len(saveChr(divInt(( divInt(( mod(saveOrd(s1),i1) - saveOrd(getCharFromString(saveChr(i0), max(i2, ( int(3.0) - ( abs(mod(i1,saveOrd(s2))) + int(7.0) ) )))[int(9.0):int(2.0)][:i2].capitalize()) ),int(5.0)) - ( abs(divInt(int(4.0),int(5.0))) - mod(int(1.0),i0) ) ),i1))))))))),int(8.0)) + abs(( i1 * i2 )) ),int(3.0)),int(51625.0)) \\le int(556.0):{:\\nloopBreak% = 0\\nfor s2 in (\"\"=\"\" + s1).lstrip(getCharFromString(in1, int(93.0)))[int(07.0):( min(i2, abs(int(98.0))) + i2 )]:{:\\nloopBreak% = 0\\nwhile int(4.0) \\l i0:{:\\ni0 += divInt(int(1.0),int(2.0))\\nb0 = \"\"I\"\".endswith(\"\")\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = \"\"54\"\"\\ni0 = mod(i2,mod(min(i2, int(3.0)),int(4.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( int(5.0) == divInt(max(int(56429.0), i2),mod(( ( int(1.0) - abs(int(3.0)) ) - ( ( int(2.0) - ( i1 + max(i1, abs(i2)) ) ) + ( i2 + i1 ) ) ),min(int(1.0), i0))) or False ):{:\\nloopBreak% = 0\\nwhile not in2[i0:] != ((s2 + \"\";\"\")[:mod(divInt(( ( int(3.0) + i1 ) * abs(len(s2[max(int(2.0), saveOrd(\"\"d\"\")):])) ),i0),int(2.0))] + s1).capitalize():{:\\nloopBreak% = 0\\nfor s0 in in1:{:\\nloopBreak% = 0\\nwhile getCharFromString(\"\"h\"\", max(int(1.0), divInt(i0,abs(saveOrd(\"\"2\"\"[i2:]))))).endswith(in1):{:\\nres0 = ( ( s0.endswith(\"\"1\"\") and len(\"\"p\"\"[:abs(min(int(5.0), ( i1 - int(2.0) )))][i0:][:int(9.0)]) != i0 ) or False )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in \"\"U\"\\\\\"\"\".strip():{:\\nres0 = ( \"\"B\"\" in s2[:i0] and False )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [0], [0], [], [], [], [], [], [], [], [0], [], [], [], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 4, 4, 4, 7, 0, 7, 3, 2, 3, 3, 4, 8], [2, 0, 0, 0, 2, 1, 2, 0, 2, 2, 2, 0, 0, 0, 0, 1, 0, 2, 0], [0], [2, 0, 3, 3, 0, 3, 2, 1, 0, 0, 2, 3, 3, 1, 1, 2, 3, 0, 2, 2, 2, 0, 1, 0, 0, 2, 2, 2, 0, 2, 2, 0, 3, 1, 3, 0, 1, 2, 2, 0, 0, 1, 2, 2, 3, 0, 1, 2, 1, 0, 3, 3, 2, 3, 0, 3, 1, 3, 0, 3, 3, 0, 3, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1], [2, 1, 0, 4, 0, 1, 0, 4, 1, 0, 2, 0, 2, 0, 0, 3, 3], [0, 0, 2, 0, 2, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [5, 5, 3, 2, 1], [1, 1], [0], [3, 0, 2, 2, 1, 0, 2, 0, 1, 2, 0], [], [], [1, 1, 1, 1], [0, 0], [23, 25], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 19, 1, 64, 18, 17, 11, 7, 5, 2, 1, 11, 0, 0, 4, 2, 2, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in (in2 + \"\"X\"\"[:divInt(i2,abs(max(i0, min(( int(8.0) + i0 ), i0))))][:( saveOrd(in0) + min(int(4.0), int(447.0)) )]):{:\\ni2 = ( max(i1, ( mod(mod(i2,int(0.0)),i0) * i2 )) + ( ( ( i2 * mod(divInt(i2,min(int(7.0), saveOrd(s2[:i0]))),int(3.0)) ) + mod(( i0 + i0 ),int(2.0)) ) - ( ( max(i0, int(3.0)) - ( int(3.0) + i1 ) ) + min(abs(divInt(min(i0, abs(int(4.0))),min(i2, min(len(\"\"Z\"\"), i0)))), len(s1[:int(8.0)])) ) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [0], [0, 0, 0, 1, 0, 0, 1], [4, 8, 9, 3, 4, 9, 5], [0, 2, 0], [0, 0], [0, 1], [], [], [], [], [4], [1, 1], [], [3, 1, 1], [], [], [], [2, 1], [], [16], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 2, 0, 3, 0, 0, 0, 2, 0, 1, 1, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\nin1 = (\"\"5\"\" + \"\"q\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 2, 0, 2, 1, 0, 2, 2, 0, 2, 1, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 0, 0, 2, 2, 0, 1, 0], [1, 2, 0, 1, 0, 0, 1, 1, 1, 0, 0], [2, 0, 2, 1, 1, 0, 0, 0, 0, 1, 1, 0, 2, 0, 2, 0, 0, 2, 2, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 1, 2, 3, 0, 2, 1, 2, 3, 0], [2, 5, 1, 2, 5, 2, 3, 0, 3], [0, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 0, 1, 2, 0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 5, 1, 3, 2, 2, 2, 5], [3, 2, 2, 3, 3, 1, 2], [0, 0, 1], [1], [1, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [8, 4, 1, 8, 2, 0, 0, 4, 1, 1, 1, 7, 4, 4, 6, 1, 3, 1, 4, 6, 2, 1, 4, 8, 3, 6, 1, 3, 3, 4, 2, 8, 8, 1, 0, 8, 5, 7, 4, 1, 0, 6, 9, 0, 6, 0, 6, 0, 9, 2, 3, 7, 3, 8, 2, 2, 4, 1, 4, 1, 1, 0, 9, 2, 1, 2, 5, 0, 1, 6, 1, 3, 1, 7, 4, 7, 1, 9, 7, 6, 3, 8, 1, 9, 1, 2, 4, 6, 6, 4, 4, 7, 6, 8, 4, 5, 7, 8, 9, 0, 8, 5, 4, 6, 7, 6, 6, 3, 2, 1, 8, 1, 2, 5, 1, 0, 9, 1, 7, 8, 0, 7, 7], [2, 1, 2, 1, 0, 0, 0, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 1, 0, 0, 1, 2, 0, 0, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 0, 0, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 2, 2, 2, 1, 0, 1, 1, 0, 0, 0, 1, 2, 0, 1, 2, 2, 0, 0, 1, 2, 2, 2, 0, 2, 1, 2, 2, 2, 2, 0, 0, 1, 0, 2, 1, 2, 0, 1, 2, 0, 0, 0, 1, 2], [1, 1, 1, 1], [2, 1, 3, 1, 0, 1, 0, 0, 1, 3, 1, 2, 1, 3, 0, 3, 1, 3, 3, 0, 2, 2, 1, 2, 1, 2, 0, 2, 2, 0, 3, 3, 1, 3, 1, 1, 3, 2, 1, 3, 0, 2, 1, 2, 0, 2, 1, 3, 0, 2, 1, 1, 3, 3, 1, 3, 1, 1, 3, 0, 3, 1, 1, 1, 3, 3, 3, 0, 3, 0, 0, 1, 3, 2, 2, 1, 3, 2, 0, 1, 1, 1, 1, 2, 0, 0, 1, 1, 0, 3, 2, 0, 2, 2, 1, 3, 1, 2, 3, 2, 0, 1, 2, 0, 1, 3, 1, 0, 2, 2, 1, 0, 3, 0, 0, 1, 2, 3, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 0, 1, 2, 3, 3, 3, 1, 1, 2, 3, 3, 2, 1, 3, 0, 0, 2, 2, 3, 2, 1, 2, 2, 1, 0, 3, 3, 0, 3, 1, 3, 2, 1, 2, 3, 1, 2, 1, 3, 2, 3, 0, 2, 3, 1, 2, 2, 3, 1, 1, 1, 0, 3, 0, 1, 2, 1, 1, 1, 2, 0, 0, 3, 1, 3, 3, 0, 0, 3, 3, 3, 3, 2, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 3, 3, 3, 1, 0, 0, 3, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 1, 0, 1, 2, 1, 0, 0, 3, 1, 3, 2, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 3, 1, 0, 1, 2, 0, 3, 3, 1, 0, 2, 3, 0, 1, 1, 1, 0, 2, 3, 3, 1, 2, 2, 0, 0, 3, 3, 3, 1, 0, 1, 3, 0, 1, 2, 0, 3, 1, 2, 3, 1, 0, 3, 2, 3, 1, 0, 1, 2, 2, 3, 0, 3, 1, 1, 0, 1, 2, 3, 0, 2, 1, 0, 1, 2, 0, 0, 2, 3, 3, 2, 0, 2, 0, 1, 0, 1, 2, 0, 3, 2, 3, 0, 2, 3, 1, 0, 2, 1, 0, 2, 1, 0, 2, 2, 3, 3, 2, 3, 1, 1, 3, 0, 1, 0, 2, 1, 2, 3, 2, 0, 2, 3, 3, 3, 1, 0, 0, 2, 1, 0, 3, 2, 3, 1, 2, 0, 2, 3, 2, 3, 3, 3, 2, 0, 3, 1, 3, 0, 2, 3, 3, 0, 1, 1, 2, 3, 2, 1, 1, 1, 0, 0, 3, 2, 1, 3, 1, 1, 0, 2, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1], [2, 3, 2, 4, 3, 0, 2, 4, 1, 1, 2, 0, 1, 2, 4, 0, 2, 0, 1, 1, 0, 0, 4, 1, 1, 4, 4, 0, 1, 4, 3, 1, 0, 2, 4, 0, 3, 3, 2, 2, 2, 4, 1, 3, 1, 1, 4, 2, 4, 4, 0, 2, 1, 0, 0, 1, 1, 0, 0, 3, 1, 4, 4, 0, 1, 2, 4, 2, 0, 0, 4, 1, 1, 4, 4, 0, 0, 0, 0, 0, 2, 2, 0, 2, 4, 2, 2, 1, 2, 2, 0, 3, 1, 1, 3, 0, 1, 4, 3, 0, 1, 3, 0, 2, 1, 3, 3, 2], [0, 1, 2, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 2, 0, 1, 0, 2, 2, 0, 2, 0, 2, 1, 2, 0, 2], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 3, 2, 2, 3, 5, 2, 4, 5, 2, 5, 3, 4, 3, 0, 0, 4, 3, 2, 5, 4, 0, 0, 5, 1, 1, 5, 1, 3, 4, 3, 0, 0, 3, 5, 3, 1, 2], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0], [4, 1, 1, 2, 4, 1, 3, 2, 3, 1, 2, 4, 1, 2, 0, 0, 0, 4, 3, 4, 3, 2, 4, 0, 0, 2, 4, 4, 4, 2, 2, 2, 2, 0, 4, 4, 4, 1, 0, 3, 1, 4, 4, 3, 1, 0, 1, 2, 3, 4, 0, 3, 0, 2, 4, 2, 4, 1, 1, 1, 3, 2, 4, 1, 0, 2, 1, 4, 4, 1, 0, 1, 0, 1, 4, 1, 1, 2, 1, 1, 2, 1, 0, 0, 0, 1, 4, 4, 2, 0, 1, 1, 1, 2, 4, 0, 3, 1, 4, 2, 4, 0, 1, 0, 4, 4, 2, 1, 4, 0, 2, 4, 2, 4, 0, 4, 0, 2, 2, 0, 1, 2, 4, 4, 0, 2, 2, 1, 1, 1, 2, 0, 1, 3, 4, 0, 1], [0, 1, 3, 2, 2, 2, 0, 0, 0, 1, 1, 2, 2, 2, 2, 0, 0, 1, 0, 1, 1, 1, 2, 0, 0, 3, 1, 3, 3, 1, 1, 0, 1, 1, 1], [1, 4, 3, 1], [1, 1, 2, 2, 2, 1, 2, 0, 0, 1, 2, 0, 2, 2, 0, 0, 2, 0, 1, 0, 1, 2, 1, 1, 2, 2, 2, 2, 0], [1, 0, 1, 2, 1, 2, 1, 2, 1, 3, 2, 2, 1, 2, 1, 3, 1, 2, 2, 1, 1, 2, 0, 0, 1, 0, 1, 1, 3, 1, 3, 3, 0, 2, 0, 2, 2, 0, 3, 2, 0, 3, 2], [21, 0, 16, 20, 13, 14, 12, 22], [8, 0, 23, 5, 3, 16, 5, 23, 1, 25, 10, 14, 24, 15], [6, 0, 0, 8, 3, 2, 6, 9, 5, 3, 1, 6, 2, 2], [30, 19, 21, 17, 14, 27, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 31, 31, 11, 20, 5, 11, 0, 0, 10, 9, 25, 9, 9, 7, 3, 1, 5, 123, 123, 99, 4, 415, 103, 108, 57, 50, 38, 43, 5, 137, 35, 4, 29, 43, 8, 14, 14, 7], "tree_depth": 71, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(\"\"i\"\", ( int(8.0) + abs(int(4.0)) ))\\nb0 = ( \"\"Va6x\"\" != saveChr(i2)[:int(1820.0)] and i1 == i2 )\\nin0 = \"\"0\"\"\\ni1 -= int(0.0)\\nif ((\"\"f\"\" + \"\"0d\"\".rstrip()[len(s2[int(4.0):]):])[:( int(1.0) * abs(i0) )] + s2) not in in0:{:\\ni0 += saveOrd(((in2.capitalize()[int(1.0):] + s2).capitalize() + getCharFromString(getCharFromString(getCharFromString(in1[:len(saveChr(min(i0, ( ( int(1.0) - mod(int(7.0),( i2 - mod(mod(i1,abs(saveOrd(saveChr(int(4.0))))),max(int(4.0), int(6.0))) )) ) - max(divInt(int(1.0),abs(i2)), ( int(3.0) - ( i2 + divInt(int(1.0),min(i1, mod(int(4.0),int(6.0)))) ) )) ))))][max(abs(int(2.0)), saveOrd(\"\"_\"\".capitalize())):int(1.0)][int(4.0):min(i1, abs(int(8.0)))][int(3.0):], int(6.0)), min(max(max(i2, min(i2, i2)), int(1.0)), min(divInt(mod(int(3.0),saveOrd(in2)),( i2 * int(3.0) )), int(4.0)))), int(2.0))[:int(8.0)]).capitalize())\\n:}else:{:\\nloopBreak% = 0\\nwhile (\"\"8\"\" + (\"\"3q\"\" + s2).capitalize().capitalize()).endswith(\"\"2\"\"):{:\\nb1 = ( i2 * i2 ) != int(810.0)\\nb2 = (in2.capitalize() + (in0 + getCharFromString(getCharFromString(\"\"f\"\", int(8.0))[i2:], max(( i0 * divInt(mod(int(5.0),max(int(7.0), ( saveOrd(\"\":\"\") * ( i0 * int(4.0) ) ))),mod(i0,int(1.0))) ), saveOrd(\"\"x\"\")))[int(0.0):i0]))[( divInt(int(6.0),i1) - min(i0, i0) ):] not in (saveChr(int(9.0))[( max(divInt(saveOrd(\"\"6\"\"),int(0.0)), ( int(6.0) - divInt(len(in1),( int(0.0) - mod(max(i1, int(6.0)),mod(min(abs(saveOrd(\"\"9\"\"[int(0.0):int(9.0)])), mod(min(len(getCharFromString(saveChr(mod(int(2.0),len(\"\"b\"\"))), i2)), i0),( ( abs(( int(3.0) - ( ( int(7.0) - i0 ) - abs(abs(i2)) ) )) - saveOrd(in0) ) - int(3.0) ))),max(( int(8.0) + mod(len(\"\"z\"\"),int(2.0)) ), divInt(int(2.0),max(mod(max(i2, divInt(saveOrd(s0),int(4.0))),divInt(divInt(abs(int(1.0)),int(4.0)),int(1.0))), i1))))) )) )) * saveOrd(\"\"5\"\") ):] + saveChr(i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nfor s0 in \"\"AQ\"\":{:\\nif int(109.0) \\g ( int(2.0) - int(1.0) ):{:\\nres0 = int(2.0) == ( i1 - i1 )\\nloopBreak% = 0\\nfor in1 in \"\"k\"\":{:\\nb0 = \"\"U\"\"[saveOrd(\"\"o\"\"):int(5.0)] != \"\"y\"\"[min(abs(i1), i2):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= max(min(min(max(( i2 + i1 ), max(i2, ( i0 - i0 ))), min(i2, i0)), min(len(in0), max(int(0.0), i1))), i1)\\n:}else:{:\\ni0 += saveOrd(s2)\\nloopBreak% = 0\\nfor in2 in in1:{:\\nb2 = \"\"<\"\" == saveChr(divInt(divInt(i1,int(1.0)),divInt(divInt(i0,divInt(( ( i2 - i1 ) - int(6.0) ),i1)),int(1.0))))\\nif s0[( int(3.0) - i2 ):i2].capitalize() == \"\"p\"\":{:\\ns0 = \"\".\"\"\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nif \"\"+\"\" == getCharFromString(in2, saveOrd((\"\"N\"\" + getCharFromString(s1.rstrip(\"\"3\"\")[int(1.0):min(( divInt(i2,i1) - mod(( int(7.0) * i0 ),( max(( abs(int(4.0)) + i1 ), int(7.0)) + divInt(i1,saveOrd(s1)) )) ), abs(int(1.0)))], i0))))[:mod(min(i0, int(9.0)),int(763.0))]:{:\\nif int(81.0) != i0:{:\\nb1 = not ( min(saveOrd(saveChr(int(9.0))), mod(( i1 - i2 ),max(max(saveOrd(\"\"O\"\"[:int(1.0)].lstrip(in2.rstrip())), i0), int(2.0)))) * saveOrd(saveChr(i1)[int(4.0):]) ) == ( i2 + min(int(6.0), mod(min(int(6.0), i2),min(( min(int(4.0), i0) + int(4.0) ), divInt(mod(min(i0, abs(int(7.0))),int(6.0)),i1)))) )\\n:}else:{:\\ns1 = saveChr(int(8.0))[:divInt(abs(i2),( int(4.0) - i2 ))]\\nb2 = in0.endswith(getCharFromString(in1, int(5.0)))\\n:}\\n:}else:{:\\nres0 = not divInt(i2,i0) \\ge divInt(min(abs(divInt(i2,( i1 * int(7.0) ))), i2),int(8.0))\\nloopBreak% = 0\\nfor in0 in s0[( i2 * saveOrd(\"\"1\"\") ):][:( abs(i2) + ( abs(int(9.0)) - i2 ) )]:{:\\nloopBreak% = 0\\nfor s0 in saveChr(mod(int(0.0),i0))[( int(8.0) + i0 ):]:{:\\nin0 = saveChr(mod(( max(abs(mod(abs(int(5.0)),int(4.0))), min(i1, int(6.0))) * i0 ),( int(7.0) * ( len(in2) + ( i2 * divInt(max(max(len(\"\"6\"\"[int(6.0):][i1:]), i2), divInt(int(6.0),i0)),min(divInt(max(int(3.0), divInt(i1,( saveOrd(\"\"M\"\") + ( len(\"\"\\\\\\\\\"\") * min(max(( i2 - len(in0[int(2.0):min(i0, ( abs(max(i0, int(1.0))) * int(8.0) ))]) ), ( len(\"\"2\"\") + divInt(int(1.0),int(2.0)) )), int(5.0)) ) ))),i0), i1)) ) ) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = (saveChr(len(s2)) + \"\"W,2\"\")\\nb0 = ( ( False and not ( int(1.0) * abs(int(0.0)) ) \\l int(9.0) ) or i2 \\ge divInt(int(17807.0),int(7.0)) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1], [0, 1, 1, 0, 0], [], [0, 1, 1, 1, 1], [], [0, 0, 0], [], [], [0], [4], [2], [0], [2], [], [], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [5, 8, 4, 2, 8, 8, 3, 1, 5, 7, 0, 8, 3, 0, 6, 5, 6, 0, 2, 8, 7, 1, 1, 8, 0, 7, 6], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 2, 2], [0, 1, 0, 0], [1, 0, 3, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 3, 1, 3, 0, 3, 0, 1, 1, 3, 3, 0, 3, 1, 0, 2, 2, 3, 0, 2, 1, 2, 1, 2, 0, 1, 3, 3, 2, 2, 3, 0, 3, 1, 1, 1, 3, 3, 0, 2, 1, 0, 3, 3, 1, 3, 1, 3, 0, 3, 3], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0], [1, 3, 2, 1, 1, 0, 3, 2, 1, 0, 0, 4, 3, 4, 0, 0, 2, 0, 2, 4], [2, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0], [4, 4], [0, 1, 1, 0, 1, 1, 1], [], [4, 2, 2, 1, 1, 4, 0, 4, 2, 1, 1, 3, 1, 0], [1, 1, 3], [2], [2, 0, 2], [1, 3, 2, 3, 0, 3, 1], [9], [20, 25], [1], [11, 4, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 0, 5, 0, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 27, 27, 20, 4, 66, 16, 20, 11, 6, 2, 7, 0, 14, 3, 1, 3, 7, 1, 2, 1, 3], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveChr(int(5.0)) == \"\"u(\"\"[i0:max(( i1 * i0 ), i0)][( divInt(( ( mod(divInt(divInt(i1,i1),len(\"\"1\"\")),int(8.0)) + abs(i1) ) - max(i1, int(4.0)) ),int(2.0)) - max(min(i1, len(saveChr(int(8.0)))), i1) ):]\\ni1 = ( divInt(abs(i1),( int(83.0) - ( int(15708.0) + ( i1 + int(306.0) ) ) )) - max(min(divInt(( min(i1, saveOrd(in1)) + int(5.0) ),int(602.0)), int(8711.0)), len(\"\"!J\"\"[saveOrd(\"\"+\"\"):].strip())) )\\ni0 += i1\\ni2 = ( int(8.0) - i1 )\\ni2 = min(min(int(07.0), abs(int(6.0))), min(i2, abs(saveOrd((\"\"z\"\" + in1)))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [1, 2, 1, 1], [2], [1, 1, 0], [], [], [], [], [2], [], [0, 2, 2, 0, 2], [], [3, 1, 4], [3, 2], [0], [], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 5, 5, 5, 3, 5, 2, 4, 3, 6, 4, 9, 9], [1, 0, 2, 1, 0, 0, 1, 1, 0, 2, 0, 1, 1, 2, 1, 2, 1, 0, 2], [1, 0], [1, 3, 0, 3, 2, 1, 3, 0, 2, 2, 0, 2, 2, 3, 3, 2, 3, 0, 3, 3, 0, 2, 0, 2, 2, 1, 0, 2, 1, 2, 1, 0, 2, 0, 0, 3, 3, 1, 0, 1, 1, 2, 2, 0, 0, 2, 2, 3, 2, 0, 1, 2, 0, 2, 3, 2, 1, 2, 3, 1, 3, 0, 1, 3, 0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [2, 2, 0, 3, 3, 4, 4, 1, 3, 2, 4, 2, 2, 3, 4], [1, 0, 2, 1, 1, 2, 0, 1, 2, 0, 0, 2, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1], [3, 2, 4, 0, 3, 1], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [], [3, 1, 0, 1, 1, 0, 4, 2, 4, 4, 4, 2, 1, 0, 1, 2, 1, 4, 4, 4, 4, 0, 2, 0, 4, 0, 1], [1, 0, 3, 0, 0, 0, 1, 2, 1], [5], [0, 2, 2, 2], [0, 1, 2, 2, 3, 1, 1, 3, 2, 1, 3], [9], [7, 10, 17, 15], [0, 7, 2], [26, 24, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 0, 0, 0, 1, 0, 5, 0, 3, 2, 1, 0, 0, 13, 13, 19, 2, 65, 21, 15, 13, 9, 6, 11, 0, 27, 9, 1, 4, 11, 1, 4, 3, 3], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(3.0)\\nloopBreak% = 0\\nwhile ( (\"\"Jh\"\" + in0) != \"\"0\"\" and \"\"7[kr\"\" not in s2 ):{:\\ni0 = abs(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = not saveChr(abs(mod(int(55.0),min(i1, ( mod(i0,( ( len(getCharFromString(getCharFromString(\"\"?\"\"[len(in1):], mod(saveOrd(\"\"2\"\"),i0)).strip(\"\"p\"\"[saveOrd(getCharFromString(getCharFromString(saveChr(max(i1, ( i1 + ( mod(int(5.0),i0) * ( int(3.0) - ( int(5.0) - i2 ) ) ) ))), mod(i0,i1)), len(s0.capitalize()))):]), abs(int(2.0)))[i1:int(4.0)]) * int(3.0) ) + ( ( i2 - i1 ) * ( divInt(saveOrd(in0[divInt(i2,int(6.0)):]),( i1 + divInt(abs(mod(int(4.0),( abs(int(9.0)) + len(saveChr(i0)) ))),int(9.0)) )) * saveOrd(s1) ) ) )) + i2 ))))).startswith(\"\"?\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 0, 8, 8, 4, 0, 8, 6, 0, 9, 2, 6, 0, 5, 0, 2, 2, 6, 8, 0, 3, 1, 4, 6, 7, 8, 7, 7, 0, 9, 5, 3, 8, 2, 6, 9, 4, 3, 5, 0, 7, 4, 4, 1, 9, 2, 8, 9, 4, 2], [0, 2, 2, 2, 1, 2, 1, 0, 1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 0, 2, 2, 0, 0, 2, 0, 1, 2, 1, 2, 2, 0, 2, 0, 0, 0, 1, 2, 2, 1, 1, 2, 0, 2, 0, 1], [1], [2, 0, 0, 2, 1, 2, 3, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 3, 2, 2, 2, 3, 0, 0, 2, 0, 1, 3, 1, 3, 1, 3, 1, 2, 1, 1, 2, 0, 0, 2, 3, 3, 2, 0, 3, 2, 2, 1, 2, 3, 0, 3, 1, 2, 1, 3, 0, 3, 3, 0, 1, 3, 3, 0, 3, 1, 1, 1, 2, 1, 2, 0, 1, 2, 2, 2, 2, 2, 3, 0, 2, 1, 2, 1, 1, 2, 0, 1, 2, 2, 0, 1, 1, 1, 2, 0, 3, 1, 2, 3, 3, 3, 0, 0, 2, 0, 3, 0, 2, 1, 0, 0, 2, 3, 2, 3, 0, 0, 1, 0, 3, 1, 3, 2, 0, 1, 1, 3, 0, 1, 1, 0, 0, 2, 0, 3, 3, 3, 1, 2, 0, 2, 2, 1, 1, 0, 1, 3, 0, 3, 3, 1, 0, 2, 0, 1, 1, 0, 3, 3, 3, 1, 0, 0, 2, 2, 2, 2, 2, 1, 2, 3, 3, 3, 2, 2, 2, 0, 3, 1, 1, 1, 0, 1, 0, 2, 2, 3, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0], [1, 2, 0, 1, 3, 1, 0, 1, 0, 3, 4, 0, 3, 0, 0, 0, 0, 4, 3, 2, 0, 1, 1, 1, 3, 3, 3, 0, 1, 0, 2, 3, 1, 1, 4, 3, 4, 0, 3, 4, 4, 3], [2, 0, 2, 1, 0, 2, 0, 1, 0, 1, 1, 0, 2, 0, 2, 2, 1, 0, 1, 1, 1, 0, 2, 2, 1, 0, 0, 2, 1, 2], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [5, 1, 3, 0, 0, 0, 0, 1, 5, 2, 4, 2, 3, 3, 0, 2, 1, 3, 3], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0], [3, 3, 2, 3, 2, 3, 3, 2, 2, 2, 1, 1, 1, 3, 2, 4, 3, 3, 0, 2, 4, 2, 2, 4, 4, 1, 2, 1, 4, 0, 4, 2, 0, 1, 0, 2, 0, 1, 4, 1, 2, 2, 2, 0, 2, 1, 2, 3, 2, 3, 0, 0, 2, 2, 4, 0, 0, 2, 0, 0, 4, 3, 0, 3, 2, 0, 1, 2, 2, 1, 0, 0, 1, 0, 1, 0], [0, 3, 2, 3, 1, 3, 0, 2, 3], [0, 2, 4, 5], [1, 2, 2, 1, 1, 2, 1, 2, 0, 2, 0, 2, 1, 1, 0, 0, 2, 0, 2, 0, 0, 2, 1, 1], [2, 2, 0, 2, 3, 3, 0, 3, 3, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 3], [13, 20, 18, 5, 11, 24, 8], [22, 9, 8], [3, 0, 8, 7, 4, 8], [15, 21, 17, 17, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 50, 50, 46, 0, 193, 55, 42, 30, 25, 19, 21, 1, 76, 9, 4, 24, 21, 7, 3, 6, 5], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in (((((\"\"3\"\"[:( i0 * i2 )][:( int(5.0) + ( max(int(0.0), int(8.0)) * mod(divInt(( int(8.0) - divInt(( int(4.0) + int(0.0) ),int(8.0)) ),abs(( ( ( min(i2, i2) * ( i1 + int(6.0) ) ) - max(int(0.0), len(\"\"0\"\")) ) + int(9.0) ))),max(int(2.0), ( int(6.0) - int(0.0) ))) ) )][mod(i2,i1):] + \"\"N8\"\") + (getCharFromString(((s1 + \"\",\"\".strip().capitalize()[divInt(min(max(( i0 - min(( mod(int(5.0),( len(\"\"<\"\"[i1:]) + saveOrd(saveChr(int(0.0))) )) * ( int(2.0) + min(i2, len(in0)) ) ), min(i2, int(2.0))) ), min(min(i1, min(int(6.0), int(8.0))), int(0.0))), ( int(3.0) * ( i1 * int(1.0) ) )),( divInt(divInt(divInt(mod(saveOrd(s0[i0:( int(4.0) - mod(int(6.0),int(7.0)) )].rstrip(\"\"U\"\")),mod(i0,int(8.0))),mod(( i0 + int(7.0) ),int(7.0))),int(0.0)),mod(i0,len(s0))) - int(9.0) )):( abs(min(max(i1, i1), divInt(i0,max(i2, divInt(int(5.0),i2))))) - i0 )][divInt(max(( len(s0[i0:]) - i2 ), int(3.0)),i0):].lstrip()[:len(\"\".\"\")]) + getCharFromString(\"\".\"\", int(8.0))), len(s0[divInt(i1,int(2.0)):int(6.0)][:min(i2, int(9.0))][:int(4.0)]))[i1:] + \"\"S\"\"[i2:mod(i2,max(min(abs(int(3.0)), divInt(i0,( ( int(5.0) + int(0.0) ) * i2 ))), int(7.0)))]))[len(((s1 + in2)[i0:max(max(int(4.0), i0), ( i0 * int(4.0) ))] + s2.capitalize()[int(1.0):i1][saveOrd(in1):])[len(s2[saveOrd(in0):int(9.0)]):]):] + (in0 + (s0[i2:] + \"\"w7jFL\"\")).strip(\"\"Y48\"\"[:i2][:( mod(divInt(( mod(int(2.0),( min(len(s2), saveOrd(s1)) - ( ( mod(i1,saveOrd(\"\"i\"\")) + int(8.0) ) + int(9.0) ) )) * int(4.0) ),i1),int(2.0)) - i2 )]))[:divInt(( len(in0) * i0 ),i2)] + \"\"I>\"\") + in0):{:\\nb0 = i0 \\l i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [1, 1, 1], [1, 5, 4], [0, 2, 0], [0], [1, 1, 0, 2, 3, 1, 1, 0], [0, 1], [1], [2, 0], [], [5, 2], [0, 1], [], [1, 0, 4], [1], [], [], [3, 2], [], [], [5], [15]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 2, 0, 2, 0, 0, 0, 2, 0, 0, 1, 1], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\",5\"\".endswith(in2)\\ni0 = int(1.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 0, 1, 1], [2, 2, 0, 2, 1, 1], [1, 1, 2], [1, 2, 0], [], [0], [], [], [0], [3], [2, 1, 0, 2], [0], [1, 4], [1], [], [1], [0, 1], [1, 0, 1], [0, 0, 4], [2, 0, 2], [1], [3, 0, 3, 1, 0, 1], [], [4, 0], [1], [], [5, 5, 5, 4, 4], [1, 0, 0, 1], [], [0, 0, 0, 1, 1, 2, 0], [], [], [2], [1, 1, 2, 1], [], [13, 14, 5], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 3, 3, 0, 1, 0, 0, 1, 1, 4, 1, 2, 1, 0, 1, 2, 3, 3, 3, 1, 6, 0, 2, 1, 0, 5, 4, 0, 7, 0, 0, 1, 4, 0, 3, 1, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2 not in in2:{:\\nif saveOrd(in2) \\ge i2:{:\\ni0 -= min(int(0.0), i2)\\n:}else:{:\\nloopBreak% = 0\\nwhile False:{:\\nin1 = \"\"n\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = \"\"o4f\"\".startswith(in1[int(04.0):])\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [0], [], [2], [], [4], [], [], [], [], [0, 1, 0, 1, 0, 0, 0, 1], [9, 1, 3, 1, 1, 9, 2, 5], [1, 2, 0], [0], [3, 0, 2, 1, 2, 1, 3, 1, 0], [0, 1], [3, 0], [2], [1], [4], [0, 1, 1], [], [0, 2, 1, 1], [], [], [0], [3, 1, 3], [], [23], [], [30, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 3, 1, 9, 2, 2, 1, 1, 1, 3, 0, 4, 0, 0, 1, 3, 0, 1, 0, 2], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(in1)\\nb0 = \"\"_x\"\"[i2:( int(91.0) * mod(int(31.0),min(int(1925.0), i0)) )].startswith(\"\"-\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2, 2], [], [2, 2, 0, 3, 0, 0], [0, 1], [2, 4], [2], [1], [5, 5, 3, 4, 5], [0, 1], [], [1, 4, 2, 0, 4, 0], [3, 0], [2], [1], [2, 1], [], [18], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 2, 1, 1, 1, 3, 2, 0, 4, 1, 1, 1, 2, 0, 1, 1, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = \"\"9s\"\"\\nin2 = in0[:( mod(i1,abs(i2)) * i2 )].strip()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3], [0], [4], [], [], [4, 2], [1], [], [4, 1, 0], [2, 1], [], [], [2], [], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 1, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"5\"\".capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4], [1], [], [1], [], [], [], [0], [11], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"L\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [0, 0, 0, 1, 0, 1], [2, 5, 6, 6, 5, 8], [2, 1, 2, 1], [1], [3, 0, 2, 2, 1, 0, 2, 1, 2, 0, 0], [1, 0, 0, 1], [3], [1, 1], [1, 0], [5], [1], [], [2, 1], [], [], [1], [3], [], [], [], [27]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 4, 0, 11, 4, 1, 2, 2, 0, 1, 0, 2, 0, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = len(\"\"\\\\\\\\\"\"[:i2]) \\g mod(( int(2566.0) - i1 ),( int(58.0) - divInt(i2,i1) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [0], [0, 0], [0], [0], [], [], [3, 3], [], [2, 2], [], [4, 1], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [9, 7, 5, 5, 6, 0, 6, 6, 9, 5, 9, 8, 5, 0, 3, 3, 8, 9, 2, 7, 6, 0, 1, 6], [1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 1, 2, 0, 2, 1, 2, 2, 1, 0, 0, 1, 0, 1, 1, 1, 2, 0, 2, 2, 0], [], [2, 0, 2, 3, 3, 0, 3, 2, 1, 3, 0, 3, 2, 3, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 3, 2, 1, 2, 3, 0, 3, 3, 1, 3, 1, 0, 3, 0, 1, 0, 0, 2, 0, 1, 2, 2, 3, 0, 2, 2, 3, 3, 0, 1, 0, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 0, 2, 3, 1, 2, 3, 3, 0, 3, 2, 0, 3, 0, 0, 2, 3, 0, 0, 3, 3, 2, 0, 0, 3, 2, 1, 0, 1, 2, 2, 3, 0, 0, 1, 2, 3, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [2, 1, 1, 1, 0, 1, 0, 2, 4, 3, 3, 1, 0, 2, 3, 2, 3, 3, 4, 2, 4, 4, 1, 2, 1, 0, 1, 4, 3, 4], [2, 2, 1, 1, 1, 2, 0, 0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0], [2, 2, 4, 5, 1, 2, 1, 3, 1, 4, 0], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [0], [1, 2, 1, 0, 2, 4, 0, 0, 4, 3, 1, 4, 2, 2, 3, 0, 0, 1, 3, 4, 4, 2, 4, 4, 1, 2, 2, 4, 4, 1, 0, 4, 2, 1, 4, 0, 0, 2, 3, 1, 1, 2, 2, 4, 0, 2, 1, 0], [3, 0, 3, 2, 0, 3, 1, 2, 1, 3, 2, 2], [2, 1, 4, 2], [0, 2, 1, 0, 0, 0, 1, 2, 0, 0, 1, 0], [0, 2, 2, 2, 0, 1, 3, 1, 2, 3, 1, 3, 2, 1, 0, 3], [5, 13, 2], [6, 6, 20, 10], [4, 7, 7, 2, 9], [4, 6, 17, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 24, 24, 30, 0, 105, 26, 30, 8, 18, 11, 16, 1, 48, 12, 4, 12, 16, 3, 4, 5, 4], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"F\"\".startswith(\"\"4\"\"[mod(i1,( abs(max(i2, max(mod(int(9.0),max(i2, min(( max(int(7.0), int(5.0)) * int(5.0) ), ( int(6.0) * int(0.0) )))), divInt(int(6.0),mod(divInt(mod(int(6.0),min(( int(9.0) - ( abs(i0) - saveOrd(s2) ) ), len(s2.strip()[int(5.0):]))),len(in1)),int(9.0)))))) - i0 )):max(i1, int(8.0))])\\nloopBreak% = 0\\nfor in2 in getCharFromString((\"\"7\"\" + (s1 + s2)[i2:i0][:mod(i1,int(503.0))].rstrip()), divInt(mod(min(i0, mod(divInt(abs(len(\"\"7\"\")),i1),int(38.0))),i2),abs(i0))):{:\\nres0 = (getCharFromString(saveChr(divInt(i2,len(\"\"N\"\"))).rstrip(saveChr(len(\"\"g\"\")).capitalize()[:i1][i2:i2])[saveOrd(s1):i1], mod(abs(int(9.0)),divInt(saveOrd(\"\"!\"\"[saveOrd(in0.capitalize()):].strip()),i0))).capitalize() + s1) not in (\"\"g2\"\" + \"\"#u.9kC\"\")[max(mod(i0,abs(i1)), i0):( max(i1, i1) * min(max(divInt(i1,i2), saveOrd(in1.capitalize()[:( int(2.0) + i0 )][int(7.0):( mod(len(\"\">\"\"[i2:i2]),int(6.0)) + divInt(saveOrd(s0),i0) )])), int(016.0)) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 2, 0], [0, 1], [1, 2], [0], [0], [], [], [], [1], [1], [0], [], [], [], [], [0], [0, 1, 1, 1], [3, 0, 2, 4], [1, 0, 1, 2, 0, 1, 0, 1, 0, 2, 1, 0, 0], [1], [0, 2, 3, 2, 0, 3, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 2, 0, 2, 0, 2, 2, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1], [1, 0], [0, 1, 1, 1], [0, 1, 0, 1, 0], [5, 4], [1], [0], [2, 4, 1], [1], [], [1], [1], [], [16], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 4, 4, 13, 1, 25, 8, 2, 4, 5, 2, 1, 1, 3, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in saveChr(i1)[:( max(divInt(i0,min(i1, i2)), i0) + i1 )]:{:\\ni0 -= ( i1 - i0 )\\nif ( int(30.0) - i2 ) \\g mod(i1,divInt(i0,mod(divInt(int(2.0),i0),int(4.0)))):{:\\nin1 = \"\"q\"\"\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 2, 0, 2, 1, 0, 2, 0, 2, 2, 1, 1, 1, 2, 1, 2, 0, 1, 1], [1, 1, 0, 1, 1, 2, 0, 0], [0, 1, 2, 1, 0, 0, 2, 1, 1, 0, 2, 0], [0, 0, 0], [0, 0, 0, 0, 0], [], [], [0, 3, 3, 0, 0, 3], [5, 0, 1, 4], [1, 2, 1, 1, 0, 0, 2, 0, 0, 1], [0, 0, 0, 0], [5, 5], [1, 1, 0, 1], [], [1, 0, 0], [1, 0, 0, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [7, 2, 1, 8, 5, 0, 0, 4, 4, 5, 1, 4, 2, 1, 0, 6, 7, 4, 6, 2, 3, 3, 6, 3], [2, 1, 1, 2, 2, 2, 0, 0, 2, 1, 1, 1, 2, 2, 0, 1], [1, 1, 0, 1], [1, 1, 2, 3, 3, 1, 1, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 1, 0, 2, 3, 3, 2, 3, 1, 0, 1, 1, 1, 3, 1, 3, 0, 0, 1, 0, 2, 1, 1, 1, 3, 1, 0], [0, 0, 0, 1, 1], [0, 1, 3, 3, 3, 4, 3, 0, 4, 2, 4], [2, 1, 0, 0, 1, 0], [1, 1], [0, 0, 5, 2, 4, 1, 3, 1, 5, 4, 1, 1, 2, 0, 2, 0], [1, 1, 1, 0, 1, 1, 1], [0, 0, 0], [2, 2, 2, 0, 2, 2, 4, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, 1, 4, 0, 0, 0, 2, 4, 3, 2, 1, 4, 2, 4, 0], [0, 0, 1, 2, 2, 1], [], [1, 2, 0, 0, 1, 2, 1, 1], [0, 3, 3, 0, 0, 2, 2], [12, 9, 0], [], [7, 9], [8, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 20, 20, 8, 12, 3, 5, 0, 0, 6, 4, 10, 4, 2, 4, 0, 3, 4, 24, 24, 16, 4, 43, 5, 11, 6, 2, 16, 7, 3, 31, 6, 0, 8, 7, 3, 0, 2, 2], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(7.0) != int(2.0)\\nif s0[( min(max(int(1.0), int(8.0)), len(getCharFromString(\"\"M\"\", len(s0))[:len(\"\"%\"\")][i2:i1])) * i1 ):( i2 - i2 )][i2:][:int(50.0)].endswith(in2):{:\\nif i0 \\l ( saveOrd(\"\"<\"\") + len(s2) ):{:\\ni0 += mod(min(int(0.0), i2),int(4.0))\\n:}\\n:}else:{:\\nloopBreak% = 0\\nfor in1 in \"\"JA\"\":{:\\ns1 = in0\\ni1 -= int(4.0)\\nif int(5.0) \\g saveOrd(getCharFromString(s1, int(1.0))):{:\\nres0 = False\\nif True:{:\\nloopBreak% = 0\\nwhile \"\"7\"\".endswith(saveChr(abs(i1))):{:\\nres0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin2 = in1\\ni1 = i2\\n:}\\nloopBreak% = 0\\nfor s1 in s1:{:\\ni2 += int(4.0)\\nloopBreak% = 0\\nfor s2 in s0:{:\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ns2 = (\"\"9\"\"[:i0] + saveChr(mod(int(2.0),int(1.0)))[:int(0674623.0)].capitalize()).capitalize()[saveOrd(s0):]\\nres0 = int(363.0) \\le i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0, 8], [0, 1, 2, 1], [1], [2, 3, 0, 0, 2, 1, 1], [0, 1], [0], [1, 0], [0], [0, 4, 3], [1], [], [1, 0], [], [], [], [3], [], [], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = \"\"&\"\"\\nin1 = in0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 2, 2, 0, 0, 1], [0, 0], [0, 2, 1, 2, 0], [0, 0], [0, 0, 0], [], [], [0, 2, 3, 3], [4], [1, 0, 0], [0], [], [1, 0], [], [0], [], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [5, 8, 9, 0, 3, 0, 4, 6, 8, 6, 1, 2, 2, 3, 8, 7, 9, 3, 1, 9, 6, 0, 1, 7, 0, 4, 5], [0, 0, 2, 1, 2, 1, 2, 2, 2, 1, 1, 0, 0, 1, 2, 2, 1, 2, 1, 0, 1, 1, 1, 0, 0, 2, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0], [1], [2, 1, 3, 0, 1, 2, 2, 3, 3, 0, 0, 1, 1, 0, 0, 3, 2, 3, 2, 2, 3, 1, 3, 2, 2, 3, 3, 2, 0, 2, 0, 2, 3, 3, 2, 3, 2, 2, 1, 0, 1, 3, 0, 3, 2, 2, 0, 2, 0, 3, 0, 3, 3, 1, 3, 2, 3, 0, 2, 3, 1, 0, 2, 0, 2, 2, 3, 3, 3, 1, 1, 1, 3, 0, 2, 0, 1, 3, 0, 2, 3, 2, 3, 3, 2, 0, 3, 1, 2, 0, 2, 3, 0, 2, 0, 0, 2, 3, 2, 3, 3, 3, 3, 2, 1, 0, 3, 0, 0, 0, 1, 0, 2, 3, 0, 1, 0, 1, 0, 2, 2, 3, 1, 3, 2, 1, 2, 0, 3, 1, 0, 3, 2, 1, 0, 0, 3, 3], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 3, 4, 0, 4, 3, 0, 0, 0, 2, 1, 3, 0, 2, 0, 3, 2, 2, 3, 4, 3, 3, 4, 1, 3, 1, 3, 0, 4, 2, 0, 3, 0, 0, 2, 1, 1, 3, 2, 1, 1, 2, 3], [0, 2, 2, 1, 2, 2, 2, 1, 1, 0, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0, 2, 0, 2], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [2, 2, 3, 0, 1, 3, 1, 3, 1, 2, 4, 1, 2, 2, 5, 5, 5, 5, 5], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0], [0, 0, 0, 4, 2, 0, 3, 2, 3, 1, 4, 3, 0, 4, 0, 2, 2, 1, 1, 4, 4, 2, 0, 1, 0, 4, 0, 0, 0, 4, 1, 1, 4, 0, 4, 1, 2, 2, 3, 2, 1, 3, 0, 4, 0, 2, 1, 3, 0, 1], [1, 3, 3, 1, 1, 0, 3, 3, 3, 2], [2, 3, 1, 2, 1], [2, 2, 0, 2, 1, 0, 1, 1, 2], [3, 1, 2, 2, 2, 2, 0, 3, 3, 3, 1], [7], [1, 7], [9, 8, 7, 0], [11, 11, 28, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 2, 3, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 27, 27, 36, 1, 138, 38, 43, 23, 16, 19, 11, 2, 50, 10, 5, 9, 11, 1, 2, 4, 4], "tree_depth": 73, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( int(5.0) + min(i0, int(8.0)) ) \\le mod(divInt(len(s2),saveOrd(s2)),i0)\\nloopBreak% = 0\\nfor in0 in s0:{:\\nloopBreak% = 0\\nfor s1 in saveChr(i2):{:\\nin0 = s1[int(90.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= int(3.0)\\nin0 = ((\"\"(\"\" + (s1 + s2.lstrip(\"\"b\"\"[i2:][i1:min(( saveOrd(\"\"9\"\") * ( divInt(len(saveChr(int(0.0))),min(divInt(( min(min(( i2 - ( i2 * mod(abs(max(( len(saveChr(( divInt(int(4.0),i2) * int(6.0) ))) * min(i1, abs(divInt(( i1 - ( i0 - min(i0, len(in1[:abs(int(8.0))])) ) ),abs(( len(\"\"8\"\") + i1 ))))) ), ( saveOrd(s1) + int(6.0) ))),i2) ) ), ( i2 - ( mod(len(getCharFromString(s2, len(s2))),saveOrd(in2)) * int(1.0) ) )), int(2.0)) + int(2.0) ),max(i1, ( i2 - int(3.0) ))), len(\"\"7\"\".rstrip()))) + i1 ) ), divInt(max(( len(\"\"0\"\") + min(mod(i0,saveOrd(in2.strip())), int(8.0)) ), ( i1 + mod(abs(i1),mod(i1,i0)) )),mod(min(divInt(len(\"\"H\"\".rstrip()),min(min(abs(( int(7.0) + i0 )), max(i2, i0)), i0)), int(9.0)),i2)))])).strip())[( max(i1, int(319.0)) + i2 ):] + (\"\"(]\"\"[:int(60.0)] + (in2 + in2.capitalize()))[:i0][( ( len(\"\"#\"\"[int(1.0):]) * abs(mod(int(7.0),divInt(i0,max(int(0.0), i0)))) ) + max(( int(45.0) * i0 ), i0) ):abs(len((in2 + \"\"h\"\")))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [1, 1, 1], [4, 5, 4], [0, 2, 0], [0], [1, 1, 0, 2, 3, 1, 1, 0], [0, 1], [1], [2, 0], [], [5, 2], [1], [], [1, 0, 4], [1], [], [], [2], [], [], [9], [15]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\"9\"\".endswith(in2)\\ni0 = int(4.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1], [2, 1, 1, 2, 2, 0, 2, 0, 2, 2, 0, 0, 2, 2, 1, 0], [0, 2, 1, 1, 2, 2, 2, 2], [2, 0, 1, 2, 1, 1, 2, 0], [0], [0, 0, 0, 0, 0], [], [], [2, 3], [5, 4, 3, 3, 0], [2, 1, 2, 2, 2, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0], [1, 1, 2, 2], [2], [], [], [0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 2, 6, 0, 9, 9, 1, 9, 8, 2, 6, 1, 0, 8, 9, 9, 8, 3, 6, 9, 5, 5, 4, 9, 7, 1, 4, 6, 9, 3, 5, 0, 4, 2, 1, 8, 5, 3, 3, 7, 7], [2, 0, 2, 1, 2, 1, 2, 2, 2, 0, 2, 2, 0, 0, 1, 1, 0, 2, 1, 1, 2, 1, 2, 1, 1, 2, 0, 2, 1, 1, 2, 2, 1], [0, 1, 0], [2, 0, 0, 2, 3, 3, 1, 2, 1, 2, 1, 1, 2, 2, 0, 0, 1, 2, 0, 2, 2, 1, 1, 2, 3, 2, 0, 3, 2, 1, 0, 0, 2, 3, 1, 3, 2, 3, 0, 2, 3, 3, 0, 3, 2, 1, 3, 1, 1, 2, 2, 3, 0, 2, 3, 0, 1, 0, 3, 2, 0, 1, 1, 3, 2, 3, 1, 0, 3, 3, 2, 0, 2, 3, 0, 0, 2, 3, 1, 2, 2, 0, 2, 2, 2, 2, 3, 1, 3, 1, 3, 1, 1, 1, 1, 1, 0, 1, 2, 3, 3, 1, 3, 2, 3, 3, 0, 0, 2, 1, 1, 0, 1, 3, 1, 1, 1, 2, 3, 3, 1, 1, 0, 3, 1, 0, 1, 0, 3, 0, 1, 3, 0, 2, 1, 2, 3, 1, 3, 1, 2, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [4, 4, 1, 2, 2, 3, 1, 3, 3, 3, 0, 1, 0, 4, 0, 4, 1, 1, 1, 4, 2, 0, 3, 4, 2, 4, 3, 2, 2, 1, 1, 0, 4, 3, 2, 3], [1, 1, 0, 0, 0, 0, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [0, 5, 3, 3, 4, 0, 1, 4, 4, 3, 2, 1, 5, 1, 4, 0, 5, 5, 5, 1, 2, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [0, 0, 0, 2, 1, 2, 0, 1, 4, 1, 0, 3, 1, 2, 1, 0, 0, 4, 0, 0, 2, 0, 2, 4, 4, 0, 4, 2, 1, 2, 2, 4, 2, 1, 4, 2, 1, 0, 4, 0, 0, 2, 0, 1, 1, 0, 1, 4, 1, 3, 0, 4, 2, 1, 1, 0], [3, 2, 0, 3, 3, 3, 0, 2, 1, 0], [4, 4, 5, 2], [0, 0, 0, 1, 0, 1, 1, 2, 0, 2, 0, 0], [0, 3, 0, 2, 0, 0, 0, 3, 3, 3, 3, 1, 3, 3, 3], [15, 11, 3, 16, 15], [15], [0], [7, 18, 7, 8, 10, 25, 31, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 8, 8, 1, 5, 0, 0, 2, 5, 10, 5, 4, 1, 0, 0, 2, 42, 42, 33, 3, 143, 37, 36, 19, 19, 22, 15, 1, 56, 10, 4, 12, 15, 5, 1, 1, 8], "tree_depth": 72, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nin0 = in0\\nb2 = in1 not in \"\"P$\"\"[mod(i2,i0):( saveOrd(s0[saveOrd(\"\"L\"\"):int(7.0)]) - divInt(int(4.0),mod(int(2.0),int(6.0))) )]\\nloopBreak% = 0\\nwhile ( ( i2 - i1 ) + int(0.0) ) != ( i2 + ( divInt(int(9.0),int(919.0)) + mod(max(mod(i1,abs(divInt(int(8.0),i2))), i2),divInt(abs(int(2.0)),len(\"\"0\"\".rstrip(s1)))) ) ):{:\\nif (\"\"D\"\" + \"\"Q\"\"[( max(i2, ( len(in1) + len(in1) )) * i0 ):len(in0.capitalize())]) not in s2:{:\\ni2 = ( int(6.0) + min(int(1.0), int(0.0)) )\\n:}\\nif s1[:mod(( max(i2, mod(min(i0, int(8.0)),i0)) * saveOrd(getCharFromString(in2.rstrip(\"\"P\"\"[:( i1 - int(9.0) )].strip(\"\"/\"\"[int(9.0):min(( saveOrd(getCharFromString(\"\"$\"\"[int(8.0):], i1)) + max(max(( i0 - divInt(max(i2, i1),mod(saveOrd(s1),int(3.0))) ), mod(mod(i1,mod(( divInt(( abs(int(6.0)) + min(int(9.0), len(in1.capitalize())) ),int(5.0)) * int(5.0) ),int(4.0))),int(9.0))), int(7.0)) ), i2)].strip()[int(1.0):][:mod(saveOrd(s0),abs(int(4.0)))])), saveOrd(in2[( len(\"\"%\"\") + abs(i1) ):i2]))[( int(6.0) - int(9.0) ):i1]) ),int(3.0))] == \"\"\"\\\\\"\"\":{:\\nin2 = in2\\nloopBreak% = 0\\nwhile \"\"p\"\" == saveChr(abs(int(5.0))):{:\\nloopBreak% = 0\\nwhile int(0.0) \\le int(4.0):{:\\ni1 -= ( max(max(int(2.0), int(1.0)), i2) - min(int(8.0), i0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni2 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not i1 \\ge saveOrd(\"\"@\"\"):{:\\nloopBreak% = 0\\nwhile i1 \\ge int(3.0):{:\\ns1 = (s2 + getCharFromString(\"\"`\"\"[len(\"\"]\"\"):i2], ( int(3.0) - divInt(abs(int(7.0)),len(s0)) )))\\nres0 = int(7.0) \\l divInt(i2,i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 5], [2, 1, 1], [1, 1], [3, 0, 3, 1], [], [3, 2], [2, 1], [], [], [1], [], [2, 1], [], [], [2], [2], [], [], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 4, 0, 2, 2, 0, 0, 1, 0, 2, 0, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= len(\"\"6\"\"[i1:])\\ni1 -= abs(int(45.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 2, 2, 2, 2, 2, 1, 2, 1, 0, 1, 2, 0, 1, 2, 0, 1], [0, 2, 1, 1, 0, 2, 2, 1], [1, 1, 2, 1, 2, 1, 1, 0, 0], [0, 0], [0, 0, 0, 0], [], [], [3, 2], [1, 2, 4, 0, 3], [1, 2, 0, 1, 2, 1, 1, 2, 1], [0, 0, 0, 0, 0], [5, 1, 4], [2], [], [], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [6, 0, 0, 0, 5, 5, 1, 1, 8, 1, 9, 7, 7, 7, 2, 2, 2, 4, 8, 0, 5, 4, 3, 5, 9, 5, 4, 9, 2, 7, 0, 1, 4], [0, 1, 0, 1, 1, 2, 2, 0, 2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 0, 2, 2, 0, 1, 1, 0, 2, 2, 2, 1, 2, 0, 1, 0, 1], [0, 1, 0, 0, 1], [2, 0, 0, 3, 1, 0, 1, 0, 0, 2, 0, 2, 3, 1, 3, 1, 2, 1, 0, 1, 2, 3, 3, 2, 0, 3, 0, 3, 3, 2, 2, 1, 1, 1, 2, 3, 3, 3, 1, 2, 1, 0, 0, 1, 0, 0, 1, 0, 3, 3, 3, 1, 0, 0, 3, 2, 1, 2, 3, 0, 1, 3, 1, 0, 1, 3, 0, 0, 3, 0, 0, 2, 3, 0, 0, 3, 0, 1, 2, 1, 1, 0, 2, 0, 2, 0, 1, 1, 1, 2, 3, 2, 1, 3, 3, 0, 2, 1, 1, 3, 1], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [4, 0, 2, 3, 2, 2, 0, 2, 3, 1, 1, 1, 0, 4, 2, 4, 0, 3, 0, 2, 4, 1, 3, 3, 2], [1, 0, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 3, 5, 4, 2, 1, 5, 5, 0, 2, 2, 5, 0, 3], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0], [0, 4, 2, 3, 1, 4, 2, 4, 0, 4, 3, 4, 1, 2, 1, 2, 0, 1, 2, 0, 2, 2, 4, 1, 0, 4, 0, 2, 4, 0, 4, 2, 0, 4, 0, 1, 4, 1, 4, 4, 3, 1, 2, 0, 1, 4], [0, 0, 2, 2, 1, 2, 0, 3, 3, 0, 3, 0, 1, 1], [1, 0, 2], [2, 0, 1, 1, 0, 0, 0, 0, 2, 2], [2, 1, 1, 1, 0, 0, 2, 2, 3, 3, 3, 3, 1], [7, 4], [21, 2, 11, 5], [3, 8, 4], [25, 22, 21, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 17, 17, 8, 9, 2, 4, 0, 0, 2, 5, 9, 5, 3, 1, 0, 0, 3, 33, 33, 34, 5, 101, 19, 25, 8, 13, 14, 13, 2, 46, 14, 3, 10, 13, 2, 4, 3, 4], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(i1,i0)\\nloopBreak% = 0\\nfor s0 in in0:{:\\nloopBreak% = 0\\nwhile saveOrd(getCharFromString((\"\"3\"\" + getCharFromString(in2.capitalize()[int(6.0):i1], int(0.0)))[i1:], i2)) \\g ( i2 - divInt(min(int(0.0), abs(int(0.0))),( int(5.0) + i0 )) ):{:\\nif (saveChr(int(5.0)) + \"\"v\"\").capitalize().endswith(\"\"c\"\"[:mod(len(in1[:abs(( i2 - abs(i0) ))]),min(abs(( mod(int(1.0),int(1.0)) - int(8.0) )), mod(len(\"\"l\"\"),max(max(int(1.0), divInt(int(9.0),i2)), i0))))]):{:\\nif not int(7.0) == i1:{:\\nloopBreak% = 0\\nfor s2 in s1[i0:int(7.0)]:{:\\ni2 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile \"\"H\"\".capitalize()[max(min(saveOrd(in2), int(7.0)), i0):i2][abs(divInt(int(2.0),mod(saveOrd(getCharFromString(in2, i0)),int(2.0)))):min(int(2.0), i2)] not in s0.rstrip()[int(4.0):len(s2[i2:].lstrip())]:{:\\ns2 = getCharFromString(in2, i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 = min(i1, i0)\\ns0 = \"\"E84\"\"\\nloopBreak% = 0\\nwhile mod(abs(i2),i2) \\le saveOrd(\"\"@\"\".strip()):{:\\ni2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 -= int(8.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif divInt(int(05.0),int(4.0)) \\l i0:{:\\nres0 = getCharFromString(saveChr(mod(i1,divInt(i0,int(3.0)))), int(59.0)).startswith((\"\"=<(\"\" + in0[int(5.0):]))\\nb2 = divInt(max(( int(4.0) + len(\"\"f\"\") ), len(saveChr(i1))),( int(92.0) + int(70.0) )) \\ge abs(int(14.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [1, 2, 0, 2, 2, 1, 0, 0, 2, 1], [1, 0, 0, 2], [2, 2, 2, 0, 2, 2], [0, 0], [0, 0, 0], [], [], [2, 0], [0], [1, 0, 0, 0, 0, 2], [0], [2], [3, 2, 0, 1], [0], [0], [1], [1, 0, 0, 0, 1, 1], [2, 9, 4, 7, 0, 2], [1, 2, 2, 0, 0, 0, 0, 0, 1, 2, 0, 0], [], [3, 2, 0, 3, 0, 2, 2, 0, 0, 2, 0, 2, 0, 3, 0, 0, 2, 2, 3, 0, 1, 1, 3, 0, 3, 2, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0], [2, 4, 3, 4, 4, 1], [1, 1, 2, 0, 0], [0, 0, 1], [5, 5, 3, 4, 5, 2, 0, 5, 4, 4, 0, 1, 2], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 0], [4, 0, 0, 4, 1, 0, 1, 1, 4, 2, 1, 2, 3, 1, 1, 1, 3, 1, 2, 4, 2, 0, 3, 0, 1, 3, 0, 1], [3, 0, 0, 1], [2], [1, 1, 2, 0], [1, 2, 1, 1, 2, 2, 0, 2, 3, 1, 1, 2, 1, 1, 0, 2, 2, 3, 2], [25, 14], [9, 24, 21, 9, 13, 24, 1], [3, 9, 2, 1, 8, 4, 5, 0], [15, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 4, 6, 2, 3, 0, 0, 2, 1, 6, 1, 1, 4, 1, 1, 1, 6, 6, 12, 0, 29, 8, 6, 5, 3, 13, 19, 2, 28, 4, 1, 4, 19, 2, 7, 8, 2], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2.strip()\\nif abs(( i1 - saveOrd(in0) )) \\l i2:{:\\nin1 = getCharFromString(\"\"j\"\", divInt(( i2 - i0 ),divInt(i0,( i0 * len(in2) ))))\\n:}else:{:\\nloopBreak% = 0\\nfor s2 in \"\"3yv92\"\":{:\\nloopBreak% = 0\\nfor s0 in \"\"Z\"\":{:\\nin2 = getCharFromString(\"\"1\"\"[:i0], i0)\\nb2 = ( not b0 and True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = (\"\",j\"\" + \"\"n8\"\")[:( mod(saveOrd(\"\"y\"\"),i1) + int(2.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile (\"\"bO4\"\" + saveChr(int(9470.0))[saveOrd(in1[i2:max(( i0 + int(2.0) ), i0)]):]) == (s0 + \"\"5\"\"):{:\\ns1 = (s2 + \"\"(0\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [3, 2, 2, 0, 4, 6, 8, 8, 0, 6, 5, 0, 7, 3, 3, 0, 9, 6, 6, 2], [0, 0, 2, 1, 2, 2, 2, 0, 0, 1, 1, 1, 0, 0, 1, 1], [], [3, 3, 2, 2, 2, 3, 1, 2, 2, 2, 3, 3, 0, 3, 1, 2, 1, 1, 2, 2, 3, 0, 0, 3, 3, 2, 3, 0, 3, 2, 1, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 3, 3, 0, 2, 3, 0, 2, 2, 1, 1, 0, 1, 1, 1, 0, 2, 3, 2, 2, 1, 2, 0, 1, 2, 0, 0, 3, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], [3, 3, 4, 0, 3, 1, 4, 1, 4, 4, 1, 0, 3, 4, 2, 2], [1, 0, 0, 0, 1, 1, 2, 1, 1, 1, 0, 0, 1, 2, 2], [0, 0, 1, 0, 1, 1, 0, 1], [2, 5, 2, 3, 2, 3, 4, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [], [4, 4, 0, 3, 0, 3, 2, 1, 3, 4, 4, 1, 3, 4, 3, 0, 2, 2, 2, 4, 2, 4, 0, 2, 4, 0, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 4, 0, 0, 1, 1], [0, 3, 3, 2, 0, 3, 0, 3, 3], [4, 1, 1, 4, 1], [1, 0, 2, 2, 0, 2, 2, 1, 1, 1], [2, 1, 2, 3, 1, 1, 3, 3, 1, 0, 0, 0, 3], [12, 12, 13], [25, 12, 25, 6], [3, 9], [24, 5, 18, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 20, 16, 0, 73, 23, 16, 15, 8, 8, 13, 0, 41, 9, 5, 10, 13, 3, 4, 2, 4], "tree_depth": 75, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = getCharFromString(in2.rstrip((s2 + (\"\"3z\"\"[:len((\"\"9\"\".capitalize().rstrip() + (getCharFromString((in0 + getCharFromString(s2, len(in0.rstrip(\"\"?\"\"[( ( ( saveOrd(\"\"m\"\") - int(3.0) ) + ( ( ( min(len(\"\"z\"\"), i0) + max(int(2.0), ( int(2.0) + int(0.0) )) ) - ( ( saveOrd(\"\"\"\"\"[:i0]) - i2 ) * max(saveOrd(\"\"/\"\"), divInt(saveOrd(\"\"g\"\"[:i1][:max(divInt(int(4.0),( mod(( divInt(i2,i2) - i2 ),int(6.0)) - int(8.0) )), int(8.0))]),min(len(in1.rstrip()), i0))) ) ) - mod(saveOrd(s1),i0) ) ) + mod(divInt(int(0.0),int(6.0)),i1) ):])[int(5.0):]))[int(0.0):int(7.0)].rstrip()[i1:][( abs(( mod(int(3.0),( i1 + int(3.0) )) - ( i0 * i0 ) )) * abs(int(0.0)) ):][int(9.0):i1]), i1) + \"\"MMN\"\")))] + \"\"!\"\"))), int(662.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [1, 2, 0, 1], [2], [2, 0, 2], [], [0], [], [], [1], [3, 2], [0, 1, 0, 2, 1], [0, 0], [1], [2, 3], [1], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [1, 6, 6, 8, 9, 3, 0, 0, 8, 7], [0, 1, 1, 1, 0, 2, 0, 1, 0], [], [3, 0, 3, 0, 1, 1, 0, 0, 3, 2, 3, 2, 3, 0, 0, 1, 2, 0, 2, 1, 1, 3, 2, 1, 0, 2, 1, 0], [1, 1, 0, 1, 0, 1], [4, 0, 0, 0, 4, 4], [1, 2], [0, 1, 1, 0], [5, 2, 0, 2, 3, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [], [0, 0, 1, 3, 2, 3, 1, 1, 2, 4, 4, 0, 3, 3, 2, 4, 1, 1, 4, 1, 2, 1, 0, 0], [3, 3, 1, 3], [5, 2, 3], [1, 1, 0, 2], [3, 1, 1, 3, 3, 3, 3, 0, 1, 2, 3, 1], [11], [4, 3, 6, 0], [6], [15, 19, 14, 16, 15, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 1, 0, 0, 1, 2, 5, 2, 1, 2, 1, 0, 0, 10, 10, 9, 0, 28, 6, 6, 2, 4, 7, 12, 0, 24, 4, 3, 4, 12, 1, 4, 1, 6], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\nloopBreak% = 0\\nwhile not saveOrd(s0) \\ge i0:{:\\nb1 = ( \"\",ed:+\"\" not in ((\"\"-\"\" + \"\",L\"\")[:min(i1, int(1.0))] + s2.strip().strip(((saveChr(int(6.0))[i1:i1] + \"\"g\"\") + \"\"6\"\"))[:min(divInt(min(mod(saveOrd(\"\"*\"\".lstrip(\"\"a\"\"[i0:])),i2), int(6.0)),( i0 - mod(int(8.0),int(9.0)) )), saveOrd(in0))]) or ( int(300.0) * i1 ) == divInt(int(87.0),i0) )\\ns1 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [2, 2, 0, 1, 0, 0, 0, 2, 2, 2, 1, 0], [1, 0, 0, 1, 1], [2, 2, 0, 0, 1, 0, 2], [0, 0], [0, 0, 0, 0, 0], [], [], [2, 3, 0], [0, 3], [2, 2, 2, 2, 1, 1], [0, 0], [0, 0, 4, 2], [1], [], [0], [1, 0, 0], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 7, 8, 3, 0, 3, 1, 4, 8, 3, 8, 5, 8, 1, 7, 6, 6, 5, 1, 7, 1, 2, 3, 9, 4, 8, 2, 7, 0, 3, 7, 0, 7, 3, 3, 7, 8, 8, 2, 1, 4, 2, 8, 3, 9, 1, 8, 6, 1], [1, 0, 2, 0, 2, 1, 0, 1, 0, 1, 1, 2, 1, 2, 2, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2], [0, 1, 0], [3, 3, 0, 2, 2, 2, 2, 2, 2, 3, 1, 3, 3, 0, 1, 2, 0, 0, 1, 0, 1, 0, 3, 2, 2, 1, 0, 0, 3, 1, 1, 2, 3, 3, 1, 3, 3, 2, 2, 2, 0, 1, 3, 0, 3, 3, 0, 0, 1, 0, 1, 3, 1, 1, 1, 1, 3, 1, 2, 3, 2, 2, 3, 2, 2, 0, 1, 2, 2, 0, 1, 0, 2, 0, 1, 2, 1, 1, 0, 1, 0, 0, 1, 2, 0, 3, 2, 2, 2, 1, 0, 2, 1, 2, 3, 3, 2, 3, 1, 3, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 0, 3, 2, 1, 0, 0, 3, 0, 3, 1, 2, 1, 1, 2, 1, 2, 3, 0, 3, 3, 2, 3, 1, 1, 0, 1, 3, 0, 2, 2, 1, 0, 3, 3, 0, 0, 1, 0, 3, 0, 2, 3, 1, 0, 1, 0, 0, 2, 0, 1, 3, 1, 2, 3, 0, 3, 3, 2, 3, 0, 2, 2, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 4, 3, 2, 1, 1, 3, 1, 4, 0, 3, 3, 2, 0, 2, 3, 4, 1, 0, 2, 2, 0, 3, 0, 4, 0, 2, 1, 1, 1, 4, 3, 3, 1, 0, 0, 1, 0, 1, 1, 0, 4], [2, 2, 0, 2, 2, 2, 0, 1, 0, 0, 1, 2, 1, 2, 1, 0, 2, 2], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [4, 3, 0, 4, 0, 5, 4, 4, 4, 4, 5, 2, 3, 5, 2, 3, 4, 3, 3, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [0, 0, 0, 4, 0, 0, 2, 4, 3, 2, 0, 4, 0, 2, 4, 1, 2, 2, 1, 0, 2, 1, 3, 2, 4, 2, 4, 0, 1, 2, 1, 1, 4, 3, 0, 1, 2, 2, 2, 2, 0, 1, 0, 3, 3, 3, 0, 2, 1, 3, 1, 3, 1, 4, 1, 3, 1, 3, 2, 4, 1, 2, 4, 0, 2, 4, 1, 1, 4, 2, 1, 2, 4, 1, 1, 4, 4, 4, 2, 1, 2, 2, 1, 0], [2, 3, 3, 2, 2, 1, 0, 1, 2, 3, 1, 3, 2, 2, 3, 3], [2, 1, 1, 3, 4, 2], [1, 1, 1, 2, 0, 2, 0, 2, 0, 2, 2, 1, 0, 2, 1, 2, 2, 1, 1, 1, 2, 0], [0, 0, 0, 2, 0, 0, 2, 1, 2, 3, 3, 2, 0, 0, 1, 1, 3, 0, 2, 2, 1, 2, 3], [23, 22, 18, 19, 14, 22, 15, 9], [14, 8, 15, 5], [2, 7, 4, 8, 4, 7, 1], [13, 7, 10, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 12, 12, 5, 7, 2, 5, 0, 0, 3, 2, 6, 2, 4, 0, 0, 0, 3, 49, 49, 45, 1, 177, 46, 42, 18, 28, 20, 23, 2, 84, 16, 6, 22, 23, 8, 4, 7, 4], "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in1 in in0:{:\\nloopBreak% = 0\\nfor s0 in in1:{:\\ns0 = in2.capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = in1\\n:}else:{:\\nb2 = (in1[:abs(saveOrd(in1.rstrip()))] + \"\"X\"\".capitalize()[:i1]).strip()[:( divInt(divInt(divInt(( ( len(\"\"W\"\"[int(6.0):abs(max(i0, int(7.0)))][divInt(i2,i0):]) * int(8.0) ) * i2 ),int(3.0)),i1),max(( ( int(0.0) + i0 ) * i1 ), len(in2))) * int(31.0) )] in \"\"S\"\"[int(4.0):]\\nres0 = (saveChr(( max(saveOrd(s2), int(8.0)) * min(len(\"\"2\"\"), mod(divInt(mod(i0,int(3.0)),len(\"\"T\"\"[i1:abs(min(i1, i2))])),int(8.0))) ))[i1:].capitalize()[int(5.0):abs(int(81.0))] + \"\"O\"\").startswith(getCharFromString((in0 + \"\"7o\"\"), int(76.0)))\\ni2 = int(65.0)\\nloopBreak% = 0\\nfor in2 in s2[int(1.0):len(\"\"4\"\")][:int(7.0)][divInt(saveOrd(in0),mod(( max(divInt(mod(i2,int(1.0)),( divInt(i2,int(2.0)) + i1 )), ( i2 - int(3.0) )) + divInt(int(9.0),int(4.0)) ),i0)):][int(8.0):]:{:\\nif (((in1 + \"\"*\"\"[i1:]) + (\"\"$\"\" + (\"\"8\"\" + saveChr(i2)))) + \"\"W\"\") == (\"\"Pi\"\" + (\"\"p\"\".capitalize()[:int(2.0)] + in0.rstrip()[mod(i1,min(divInt(( ( int(7.0) + i2 ) - mod(int(0.0),mod(abs(abs(divInt(min(int(3.0), len(saveChr(int(7.0))[min(i0, divInt(( mod(saveOrd(\"\"\"\\\\\"\"\"),i1) * divInt(int(0.0),i1) ),min(( int(7.0) - i1 ), i0))):])),abs(i1)))),max(int(3.0), ( int(3.0) * int(7.0) )))) ),mod(int(8.0),( max(i1, max(saveOrd(\"\"J\"\"), ( len(\"\"4\"\"[:int(8.0)].lstrip(\"\"7\"\".capitalize()[:int(2.0)])) - i1 ))) + int(1.0) ))), len(\"\"f\"\"))):])):{:\\nif i0 \\l ( divInt(int(4.0),i0) * max(min(i2, i0), int(2.0)) ):{:\\nb0 = i2 \\ge min(i0, mod(max(int(8.0), i0),int(3.0)))\\n:}\\nin0 = \"\"1\"\"[:i0].strip().rstrip(\"\"(\"\"[i0:mod(i2,int(9.0))][min(int(1.0), ( max(i2, max(min(mod(saveOrd(s0),i2), divInt(mod(i2,int(8.0)),int(6.0))), i2)) * int(1.0) )):]).capitalize()\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [0], [], [], [], [1, 2], [0], [2], [], [], [2], [], [3], [0, 0, 1], [], [1], [], [], [], [0, 0, 1], [25, 4], [13], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 1, 0, 0, 0, 3, 2, 1, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\nin0 = \"\"ZEn\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 0, 0, 1, 1, 2, 2, 2, 2, 0, 2, 0, 1, 1, 2, 0, 1, 2, 2, 1, 0, 1, 0, 1, 0], [2, 0, 2, 2, 2, 0, 1, 1, 1, 1, 2, 0, 2, 0, 2, 1], [1, 1, 2, 2, 0, 0, 2, 1, 1, 2, 2, 0, 0, 2, 0, 0, 0, 1, 1, 1, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 3, 3, 1, 0, 0, 3, 1, 0, 1, 2], [1, 3, 3, 4, 4, 1, 2, 2, 0, 0, 3, 1, 4], [2, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 2, 2, 0, 1, 2, 1, 2, 1, 1, 0, 1, 0, 1, 0, 1, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 1, 2, 4], [3, 3, 0, 2, 0, 2, 3, 0, 2, 0], [0, 0, 1], [], [1, 1, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [3, 1, 4, 4, 0, 8, 2, 0, 2, 5, 7, 9, 6, 7, 6, 5, 9, 4, 4, 2, 4, 5, 0, 8, 5, 3, 0, 5, 3, 6, 1, 4, 3, 2, 7, 6, 4, 1, 4, 7, 4, 9, 4, 8, 9, 6, 2, 1, 3, 0, 1, 1, 1, 6, 4, 2, 4, 9, 0, 8, 2, 4, 9, 5, 7, 4, 2, 0, 8, 6, 7, 5, 4, 7, 3, 3, 5, 9, 1, 8, 6, 0, 3, 6, 7, 3, 7, 0, 5, 3, 9, 8, 5, 7, 5, 8, 4, 8, 2, 0, 8, 9, 1, 7, 4, 5, 4, 4, 3, 9, 1, 5, 5, 2], [2, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1, 1, 0, 2, 0, 2, 1, 2, 0, 1, 2, 2, 1, 0, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 2, 1, 0, 2, 1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 2, 2, 1, 2, 2, 0, 2, 1, 1, 0, 0, 2, 2, 2, 0, 2, 0, 2, 0, 1, 0, 2, 0], [1, 1, 1, 0, 1, 0, 1], [3, 0, 0, 1, 3, 0, 3, 2, 1, 2, 3, 0, 2, 3, 3, 0, 1, 0, 0, 2, 2, 1, 1, 1, 0, 0, 2, 1, 0, 1, 0, 0, 1, 1, 2, 0, 3, 1, 3, 3, 1, 2, 1, 2, 2, 1, 0, 2, 2, 3, 3, 1, 0, 1, 1, 0, 3, 3, 0, 3, 2, 2, 1, 1, 2, 0, 1, 2, 2, 1, 0, 1, 2, 2, 3, 1, 2, 3, 1, 2, 2, 0, 0, 2, 1, 1, 0, 3, 1, 0, 2, 2, 1, 0, 1, 1, 3, 2, 0, 2, 2, 2, 0, 0, 3, 0, 2, 3, 0, 1, 3, 1, 2, 0, 1, 1, 3, 3, 1, 1, 2, 1, 1, 0, 1, 0, 0, 2, 2, 3, 1, 0, 3, 3, 0, 3, 1, 1, 3, 3, 1, 0, 3, 3, 2, 0, 1, 3, 0, 0, 1, 2, 2, 3, 0, 0, 3, 1, 3, 3, 3, 2, 2, 1, 0, 0, 1, 0, 1, 2, 1, 1, 0, 0, 3, 0, 2, 2, 1, 3, 3, 2, 0, 2, 3, 1, 2, 0, 1, 3, 0, 3, 1, 0, 2, 3, 2, 1, 2, 3, 1, 3, 0, 1, 3, 2, 1, 1, 2, 2, 3, 2, 2, 3, 0, 3, 2, 1, 1, 0, 1, 3, 3, 3, 2, 3, 3, 3, 1, 3, 3, 1, 0, 1, 1, 2, 2, 0, 2, 2, 1, 3, 2, 3, 2, 0, 1, 0, 1, 0, 3, 1, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 1, 1, 1, 1, 2, 1, 0, 3, 0, 2, 3, 3, 2, 2, 3, 2, 3, 2, 3, 3, 2, 0, 3, 3, 2, 1, 0, 0, 2, 1, 2, 2, 0, 3, 0, 3, 0, 3, 3, 3, 0, 3, 0, 3, 3, 0, 0, 3, 1, 2, 0, 2, 0, 2, 3, 0, 2, 1, 0, 3, 0, 2, 1, 1, 1, 3, 3, 1, 3, 3, 3, 1, 2, 3, 1, 3, 3, 2, 3, 2, 2, 1, 0, 1, 2, 3, 3, 3, 2, 0, 3, 1, 2, 0, 2, 3, 1, 2, 0, 2, 1, 2, 0, 3, 0, 1, 2, 0, 2, 0, 0, 2, 1, 3, 1, 2, 0, 2, 0, 3, 3, 1, 1, 3, 3, 0, 2, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [4, 3, 1, 4, 2, 4, 0, 1, 4, 4, 3, 1, 0, 0, 2, 3, 2, 0, 0, 4, 2, 1, 0, 2, 2, 3, 1, 1, 0, 4, 3, 4, 0, 3, 4, 3, 3, 3, 3, 3, 1, 0, 0, 3, 3, 4, 2, 4, 4, 0, 4, 0, 4, 0, 3, 0, 4, 0, 1, 0, 4, 0, 3, 0, 2, 3, 0, 3, 3, 1, 2, 2, 2, 4, 2, 0, 3, 1, 1, 4, 1, 1, 2, 1, 0, 4, 2, 3, 0, 3, 1, 0, 3, 0, 4, 0, 3, 0, 4, 2, 2], [0, 2, 2, 0, 2, 0, 1, 2, 1, 1, 0, 2, 0, 2, 0, 2, 1, 0, 0, 2, 1, 1, 2, 1, 0, 2, 1, 0, 2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 2, 0, 2, 2, 1, 2], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [1, 5, 2, 2, 0, 0, 1, 4, 2, 0, 2, 3, 1, 0, 2, 5, 0, 2, 5, 1, 0, 3, 3, 0, 0, 0, 3, 0, 5, 4, 4, 2, 1, 4, 1, 2, 2, 5, 3, 2], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0], [4, 0, 0, 4, 3, 1, 3, 2, 3, 1, 4, 4, 1, 4, 3, 1, 0, 1, 4, 2, 2, 0, 1, 2, 2, 0, 2, 4, 1, 1, 2, 2, 2, 0, 2, 1, 1, 4, 0, 4, 2, 4, 1, 1, 0, 0, 0, 4, 3, 4, 4, 4, 0, 0, 2, 0, 4, 1, 0, 1, 1, 0, 4, 4, 3, 3, 4, 2, 2, 4, 1, 0, 4, 1, 2, 0, 4, 1, 0, 1, 4, 0, 4, 4, 1, 4, 2, 4, 1, 1, 1, 1, 2, 4, 1, 4, 0, 4, 2, 0, 2, 2, 0, 4, 2, 2, 4, 4, 0, 4, 2, 0, 4, 4, 0, 4, 4, 2, 2, 4, 1, 1, 0, 4, 2, 1, 1, 4, 1, 1, 2, 2, 4, 2, 0, 2, 4, 1, 1, 4, 1, 2, 0, 2, 3, 2, 1, 0], [3, 1, 1, 2, 2, 2, 2, 3, 1, 3, 0, 3, 1, 1, 1, 1, 1, 2, 0, 3, 1, 1, 0, 1, 3, 3, 3, 3, 0, 3, 1, 1, 0, 0, 1, 2, 1, 1, 0, 3, 2, 0, 0], [2, 2, 5, 5, 5, 2, 4, 1, 1, 0, 3], [0, 1, 0, 2, 2, 0, 0, 2, 2, 1, 0, 1, 2, 0, 0, 0, 1, 2, 0, 0, 2, 1, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 0], [0, 0, 1, 0, 1, 2, 0, 2, 0, 0, 1, 3, 2, 2, 1, 2, 3, 1, 0, 2, 3, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 0, 0, 3, 3, 2, 0, 3, 2, 1, 3, 0, 3, 2], [6, 0, 12, 16, 15, 14, 17, 1, 21, 15, 3], [17, 6, 6, 0, 21, 14, 11, 14, 7, 7, 15, 10, 8], [8, 1, 3, 6, 7, 5, 5, 8, 7, 1, 2], [2, 14, 24, 17, 25, 21, 23, 31, 0]], "fitness": 9223372036854775807, "tree_depth": 87, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s1.strip() in in2:{:\\ni2 += saveOrd(saveChr(i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= i1\\nloopBreak% = 0\\nfor s2 in (\"\"GAr\"\" + ((\"\"M\"\" + saveChr(int(31.0)))[len(\"\"g\"\".capitalize()):i0] + (\"\"8\"\" + s2).capitalize())):{:\\nloopBreak% = 0\\nwhile max(( int(4.0) * divInt(saveOrd(\"\"Q\"\"),i1) ), ( abs(saveOrd(s0[i1:int(4.0)][:i0].capitalize())) + i0 )) \\g divInt(( int(0.0) * int(8.0) ),int(20.0)):{:\\ns0 = \"\"1\"\"\\ns1 = in1[i1:][i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( ( res0 and divInt(int(2.0),i0) \\ge int(5.0) ) and i0 \\ge i2 ):{:\\nb2 = int(7.0) \\le int(9.0)\\nloopBreak% = 0\\nwhile not res0:{:\\nloopBreak% = 0\\nfor s2 in \"\"P\"\".capitalize()[mod(i0,min(int(6.0), max(saveOrd(\"\"O\"\"), int(7.0)))):mod(int(6.0),divInt(divInt(int(5.0),i1),divInt(( saveOrd(s0[len(\"\"g\"\"[:int(9.0)]):][i0:][int(4.0):int(4.0)]) + i1 ),max(min(i2, min(mod(divInt(int(2.0),int(4.0)),( i0 - int(5.0) )), mod(( int(0.0) * i2 ),int(8.0)))), ( mod(abs(int(5.0)),divInt(len(\"\"\\\\\\t\"\"),int(3.0))) - divInt(( i1 - i1 ),( int(0.0) + int(5.0) )) )))))]:{:\\nres0 = i0 \\le abs(int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif i2 \\g divInt(( int(6.0) * i0 ),int(1.0)):{:\\nif s2.strip() != saveChr(int(4.0)):{:\\nin0 = \"\"3\"\".strip(\"\"6\"\")[min(divInt(i2,( divInt(( i1 + i2 ),min(i0, ( saveOrd(s1) * i1 ))) + int(3.0) )), abs(int(2.0))):mod(i2,int(7.0))]\\n:}else:{:\\ni2 *= int(6.0)\\n:}\\n:}else:{:\\ni1 = max(min(int(4.0), int(1.0)), divInt(int(4.0),int(7.0)))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = s2\\nif in2 in getCharFromString((saveChr(i0).strip(saveChr(int(4.0))) + s0), i0):{:\\nif not i2 == ( ( abs(int(9.0)) - i0 ) + abs(len(s2)) ):{:\\nloopBreak% = 0\\nwhile in2[:i1] not in saveChr(max(int(4.0), int(8.0))):{:\\nloopBreak% = 0\\nfor s1 in \"\"a\"\":{:\\ns0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile max(min(int(9.0), i1), saveOrd(\"\"7\"\")) == len(\"\"+\"\"):{:\\nb1 = in0 == saveChr(( i1 + int(6.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb0 = saveOrd(saveChr(i1)) \\l i1\\ns0 = ((getCharFromString(\"\"v\"\", int(2.0))[mod(( min(i1, i1) * len(s0) ),int(1.0)):saveOrd(\"\"R\"\".strip(s0[len(saveChr(len(\"\"5\"\"))):mod(divInt(int(3.0),i2),i2)]))][int(0.0):].capitalize() + in0) + \"\"?ol\"\")\\nloopBreak% = 0\\nfor s0 in saveChr(i2):{:\\nb0 = int(1.0) \\l mod(int(1.0),int(1.0))\\nres0 = ( i0 \\ge i0 or b1 )\\nloopBreak% = 0\\nwhile len(in2) \\g i0:{:\\nif not mod(( int(6.0) - len(getCharFromString(saveChr(len(\"\"o\"\")), ( i0 - divInt(max(int(4.0), divInt(i1,int(2.0))),min(i1, min(int(4.0), i2))) ))) ),divInt(len(\"\"5\"\".rstrip(\"\".\"\")[divInt(int(9.0),divInt(len(\"\"h\"\"),int(0.0))):saveOrd(\"\"h\"\")].strip()),i1)) \\le int(8.0):{:\\nb0 = \"\"8\"\".rstrip()[:abs(mod(int(2.0),int(4.0)))].startswith(in1.rstrip())\\n:}else:{:\\ni0 *= mod(( saveOrd(getCharFromString(in1[mod(mod(saveOrd(s2[i2:min(( int(9.0) - int(5.0) ), i1)][int(7.0):saveOrd(saveChr(min(saveOrd(saveChr(( min(len(s1), min(int(4.0), saveOrd(getCharFromString(in1[min(int(2.0), i2):int(0.0)], int(8.0))))) + ( ( i2 * mod(divInt(int(6.0),max(mod(min(( i0 - int(7.0) ), i2),int(5.0)), i0)),saveOrd(getCharFromString(saveChr(int(4.0)), i1))) ) + mod(int(7.0),int(3.0)) ) ))), int(3.0)))[:i0][int(5.0):].lstrip())]),( i0 * divInt(int(9.0),int(1.0)) )),int(8.0)):], int(6.0))) + mod(int(0.0),i0) ),min(i0, ( len(s1) - min(( divInt(abs(( len(saveChr(mod(min(len(saveChr(divInt(i0,len(\"\"p\"\")))[max(divInt(int(3.0),i1), i1):][:( int(6.0) + divInt(divInt(i1,abs(i0)),abs(i2)) )]), abs(saveOrd(\"\"k\"\"))),abs(i0))).capitalize()) + min(i2, len(s2)) )),max(i2, i1)) + max(int(7.0), mod(i2,mod(i2,( saveOrd(getCharFromString(\"\"B\"\"[:i0], divInt(int(3.0),i2))) * max(i1, divInt(int(7.0),int(0.0))) )))) ), int(5.0)) )))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = max(abs(int(3.0)), max(min(saveOrd(\"\"V\"\"), int(9.0)), ( abs(int(8.0)) + len(\"\"@\"\".lstrip(\"\"<\"\")) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni0 += min(( len(s2[mod(( int(5.0) + i0 ),int(7.0)):].capitalize()[:( max(min(len(getCharFromString(\"\"7\"\", ( i2 - min(int(5.0), mod(i2,( saveOrd(\"\"P\"\") * int(8.0) ))) ))[( i2 + divInt(int(4.0),divInt(i0,min(i2, int(8.0)))) ):divInt(i0,mod(i2,i0))]), ( int(2.0) * len(getCharFromString(\"\">\"\", int(0.0))) )), mod(i1,( i0 * min(saveOrd(in2[:int(8.0)]), int(9.0)) ))) - abs(abs(i2)) )][divInt(int(1.0),int(7.0)):]) * int(45.0) ), int(443915.0))\\nin0 = (\"\"1i`D2\"\"[int(5.0):int(2.0)] + s2)[i0:]\\nb1 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 38, 38, 16, 22, 4, 9, 0, 0, 12, 13, 29, 13, 6, 10, 3, 0, 5, 114, 114, 99, 7, 396, 97, 101, 45, 57, 40, 44, 4, 148, 43, 11, 33, 44, 11, 13, 11, 9]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 0, 0, 2, 3, 0, 0, 2, 0, 3, 1, 0, 2, 3, 0, 0, 2, 1, 0, 3, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 3, 1, 1, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 3, 0, 1], [3, 20], [18], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 12, 12, 14, 0, 50, 14, 10, 8, 6, 6, 4, 1, 16, 3, 1, 5, 4, 2, 1, 0, 1], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s1):]:{:\\nres0 = ( ( len(in1[:i0]) != int(0.0) or True ) and getCharFromString(saveChr(max(mod(i2,int(7.0)), ( int(5.0) + len(in0[i2:( mod(( i0 + i0 ),mod(max(i1, i1),( i2 * max(int(7.0), i0) ))) - ( max(i0, i2) + divInt(int(2.0),i2) ) )]) )))[abs(( int(1.0) * max(int(7.0), saveOrd((\"\"D\"\" + s0.rstrip())[:i1])) )):divInt(divInt(( int(7.0) - int(9.0) ),( int(8.0) - i1 )),int(5.0))], int(0.0)) not in \"\";Us\"\" )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 1], [1, 2, 2, 0, 0], [0, 2], [2, 2, 1], [0], [0, 0], [], [], [3], [], [0], [], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [5, 0, 9, 9, 7, 0, 8, 6, 6, 9, 6, 7, 6, 2, 3], [1, 1, 2, 2, 2, 2, 0, 2, 0, 0, 0, 1, 1, 1, 1, 1], [0], [3, 2, 0, 2, 3, 3, 3, 1, 3, 3, 3, 1, 0, 3, 3, 1, 0, 2, 3, 3, 2, 1, 1, 2, 3, 2, 1, 2, 2, 2, 0, 0, 1, 0, 0, 2, 3, 1, 2, 3, 2, 1, 3, 2, 3, 0, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [4, 3, 1, 2, 2, 2, 0, 0, 1, 2, 3, 2, 0, 2, 3, 4, 1, 1], [1, 0, 2, 0, 2, 2, 1], [0, 0, 0, 0, 1, 0, 0], [2, 4, 0, 0, 3, 2], [1, 1, 1, 1, 1], [0], [0, 2, 4, 2, 2, 0, 3, 4, 4, 0, 4, 1, 2, 1, 1, 2, 2, 1, 1, 4, 4, 4], [2, 0, 3, 0, 1, 3, 1], [5, 2], [2, 1, 1, 2, 0, 0], [2, 2, 3, 3, 0], [17], [], [2, 5], [21, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 15, 15, 16, 1, 61, 14, 18, 7, 7, 6, 5, 1, 22, 7, 2, 6, 5, 1, 0, 2, 2], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\nloopBreak% = 0\\nfor s0 in s0[:saveOrd((getCharFromString(in0.strip(getCharFromString(\"\"2\"\", divInt(i1,( len(\"\"5\"\"[max(abs(int(5.0)), abs(abs(min(int(0.0), i1)))):]) - min(max(int(9.0), i2), divInt(abs(len(\"\"<\"\")),divInt(int(9.0),int(7.0)))) )))), ( abs(( int(0.0) + ( divInt(mod(i2,i2),int(8.0)) * i2 ) )) + i0 )) + \"\"<\"\"[( min(int(6.0), divInt(abs(( int(6.0) * len(\"\"R\"\") )),( saveOrd(saveChr(i2)) * int(9.0) ))) - max(i0, int(6.0)) ):max(i0, i0)][int(76.0):i1]))][:i1].capitalize()[i1:]:{:\\nloopBreak% = 0\\nwhile res0:{:\\ns2 = saveChr(divInt(int(2.0),int(3.0))).strip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [7], [1, 2, 2], [1], [2, 1, 3, 0, 0], [1], [3, 2], [1], [1], [1, 2, 1], [0, 1], [], [2, 0, 4, 3, 1, 0], [3], [0], [2], [1, 0], [6], [15], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 1, 1, 0, 1, 3, 2, 0, 6, 1, 1, 1, 2, 1, 1, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s2[mod(int(7.0),len((\"\"pG\"\" + s1).lstrip())):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [0, 0, 2, 0, 0, 1], [0], [0, 0, 1, 2, 0], [0], [0, 0, 0, 0], [], [], [0, 2, 3, 3], [4], [1, 0, 0], [0], [], [1, 0], [], [0], [], [1, 1, 0, 1], [5, 8, 9, 0], [0, 0, 2, 1], [1], [2, 1, 3, 0, 1, 2, 1, 3, 3, 0, 1], [0, 1, 1], [0, 3, 4], [0, 1], [0, 0], [2, 2, 3, 0, 1], [0, 0, 1], [0], [0, 2, 0, 0, 1], [], [], [2], [1, 2, 2], [], [3], [7, 2], []], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 1, 5, 1, 4, 0, 0, 4, 1, 3, 1, 0, 2, 0, 1, 0, 4, 4, 3, 1, 10, 2, 3, 2, 1, 5, 3, 1, 5, 0, 0, 1, 3, 0, 1, 2, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( int(5.0) + min(i0, int(8.0)) ) \\le divInt(int(90.0),len(s2))\\nb2 = True\\nloopBreak% = 0\\nfor s2 in in0[saveOrd(s0):]:{:\\ni0 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = \"\"d72\"\"\\nres0 = res0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [2], [0], [0], [], [], [], [], [], [], [0, 0, 2], [], [3, 0, 2, 0, 0], [1], [2], [], [1], [3, 4], [1, 1, 0, 0, 0, 1, 1, 1], [], [2, 3, 2, 1, 3, 0, 1, 0], [], [], [1, 1], [2, 1, 1, 2, 3, 1, 1, 0], [20], [9, 0, 25, 4], [3, 2], [0]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 5, 1, 1, 0, 1, 2, 2, 0, 8, 0, 0, 2, 2, 0, 1, 1, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = (\"\"3\"\"[:abs(i0)] + (in0 + \"\"j\"\"))[:mod(i0,i2)] in in1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [], [0, 0], [], [], [3], [], [2], [], [4], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [7, 6, 7, 2, 2, 6, 5, 9, 9, 8], [2, 1, 2], [1], [1, 0, 1, 2, 1, 1], [1], [], [1], [0], [1, 5], [1, 0, 1], [], [3, 2, 4, 0, 4, 3, 1, 1], [1, 2], [], [0], [1, 3, 1], [], [16, 5], [], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 2, 1, 6, 1, 0, 1, 1, 1, 3, 0, 8, 2, 0, 1, 3, 0, 2, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(7.0)\\nres0 = (saveChr(i1)[int(6.0):divInt(int(7.0),int(2265998.0))] + s1).startswith((\"\"q\"\" + \"\"[f\"\").capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [0], [1, 0], [0], [0], [], [], [3], [1], [1], [0], [], [], [], [], [], [1, 0, 1, 0, 1], [4, 8, 1, 5, 8], [0, 0, 0, 2, 2], [1, 0], [3, 3, 1, 0, 3, 0, 1, 3, 0, 2, 1, 0], [0], [2, 0, 0, 2], [1, 2], [], [0, 4, 0, 4], [0, 0, 1], [0], [4, 4, 1, 0], [3, 2], [1], [], [0, 3, 1], [4], [21], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 1, 9, 0, 4, 1, 0, 1, 3, 1, 3, 2, 1, 0, 3, 1, 1, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"E;v\"\".capitalize().rstrip():{:\\ni0 -= abs(min(int(4.0), i0))\\nres0 = min(i0, int(81.0)) \\g abs(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [2, 8, 5, 4, 9, 3, 1], [0, 2, 2, 1, 2, 1, 0, 2, 1], [1], [2, 0, 2, 1, 3, 3, 0, 0, 2, 3, 3, 0, 2, 3, 3, 1, 1, 3, 0, 1, 3, 1, 3, 3, 3, 2, 3, 3, 3, 1, 3, 0, 1, 2, 0, 0], [0, 1, 0, 1, 0, 0], [4, 2, 3, 1, 2, 0, 3, 0, 3, 3, 0, 0, 4, 4, 0], [0, 0, 0, 1, 0], [1, 1], [2, 2, 3, 4, 4, 5, 0, 4, 3], [1, 1, 1], [], [2, 4, 4, 4, 0, 2, 3, 3, 3, 0, 1, 0, 2, 0, 4, 1, 4, 2, 2, 1, 0, 3, 2, 0, 0, 0, 0], [3, 0, 3, 0, 2], [3, 2], [0, 1, 2, 1, 1, 1], [2, 2, 2], [], [], [8, 1, 7], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 9, 1, 36, 6, 15, 5, 2, 9, 3, 0, 27, 5, 2, 6, 3, 0, 0, 3, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i2 + mod(int(2.0),saveOrd(getCharFromString(s2.strip(), abs(i2)).lstrip((((s2 + \"\"8\"\") + in0) + in1[i1:])[:( len(getCharFromString(\"\"1\"\", max(i2, mod(abs(min(int(8.0), int(5.0))),len(\"\"7\"\"[:i1][:int(4.0)].capitalize()))))) + min(int(9.0), len(in1)) )])[len((in2[:min(( min(saveOrd(s0), saveOrd(in1)) - int(3.0) ), min(i0, int(1.0)))] + in0)):( i2 + i1 )])) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 1], [2, 1, 1, 2, 1, 1, 2, 0, 1], [1, 2, 1], [2, 2, 2, 2, 1, 0], [], [0], [], [], [0, 0], [3, 4, 1], [1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0], [], [2, 3, 0, 2, 1], [0], [0], [0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 6, 3, 6, 1, 4, 4, 9, 0, 4, 7, 1, 9, 6, 8, 1, 0, 3, 7, 6, 7, 7, 2, 2, 8], [2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 2, 1, 0, 1, 1, 1, 0], [0], [1, 0, 3, 1, 0, 3, 1, 2, 2, 2, 0, 1, 3, 1, 3, 1, 0, 3, 3, 3, 1, 0, 2, 3, 0, 3, 2, 3, 0, 3, 1, 0, 0, 3, 3, 3, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 3, 0, 1, 2, 0, 3, 1, 1, 2, 3, 0, 3, 2, 0, 2, 0, 2, 1, 2, 2, 0, 0, 0, 3, 2, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0], [3, 2, 0, 0, 2, 0, 2, 4, 4, 2, 0, 0, 3, 2, 4, 2, 0, 4, 1], [2, 1, 1, 0, 0, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0], [4, 1, 2, 2, 1, 0, 0, 1, 5, 3, 3], [1, 0, 1, 1, 0, 0, 1], [], [4, 4, 4, 4, 0, 2, 1, 3, 2, 0, 3, 3, 1, 2, 4, 0, 4, 0, 0, 3, 3, 2, 0, 1, 1, 0, 4], [0, 1, 0, 2, 1, 1, 1], [], [1, 1, 2, 2], [3, 2, 0, 3, 1, 1, 3], [5], [20, 23], [8], [11, 24, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 3, 6, 0, 1, 0, 0, 2, 3, 8, 3, 0, 5, 1, 1, 2, 25, 25, 19, 1, 75, 19, 19, 9, 10, 11, 7, 0, 27, 7, 0, 4, 7, 1, 2, 1, 3], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(063.0) \\ge i2:{:\\nin1 = getCharFromString(saveChr(len(getCharFromString(s1.capitalize(), int(61.0)))), i1)\\ns2 = \"\"(\"\"[:abs(int(44.0))]\\nloopBreak% = 0\\nwhile ( ( ( i2 * int(9.0) ) - min(int(047.0), min(int(1.0), i1)) ) - abs(min(abs(int(9.0)), i1)) ) \\le mod(saveOrd((s2[:i1] + ((\"\"8F\"\" + saveChr(saveOrd(s1))[divInt(abs(i1),min(int(6.0), i1)):]) + saveChr(i1)))),min(len(s0), abs(int(8.0)))):{:\\ns0 = s1\\nin2 = ((in0[int(1.0):] + \"\"?\"\") + \"\"ux;\"\")\\nif not ( divInt(int(0.0),( ( int(3.0) + int(7.0) ) + divInt(divInt(divInt(saveOrd(in0),i1),int(6.0)),mod(i2,abs(int(7.0)))) )) \\g int(7.0) and b0 ):{:\\ni0 = ( min(i2, saveOrd(saveChr(( i1 - ( i0 - mod(int(2.0),mod(divInt(i1,i1),i1)) ) )))) - max(( i0 + int(2.0) ), int(8.0)) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not True\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 0, 1], [], [2, 2, 2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [9, 5], [1, 0, 1, 1, 1], [], [2, 3, 0, 0, 2, 2, 0, 0, 2, 3, 0, 1, 3], [1, 1, 1, 0], [1, 0, 4], [0], [0, 0, 0], [5, 2, 2, 3, 3, 4], [1, 1], [], [0, 1, 1, 4, 0], [1], [], [], [1, 1], [], [22, 20], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 0, 13, 4, 3, 1, 3, 6, 2, 0, 5, 1, 0, 0, 2, 0, 2, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\ns2 = \"\"w\"\"\\nin0 = \"\"u\"\"\\nin0 = saveChr(divInt(max(i1, i0),divInt(divInt(i1,i1),( min(i1, int(95.0)) + saveOrd(in1) ))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 1], [9, 8, 9, 6, 0, 4, 4], [1, 1, 1, 0], [1], [2, 2, 0, 3, 1, 0, 0, 1, 3], [0, 0], [0, 4], [1, 2, 0], [], [1, 3, 2, 5], [1], [], [1, 4, 2, 4, 0, 0], [3, 1], [3], [2], [1], [], [21], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 4, 1, 9, 2, 2, 3, 0, 4, 1, 0, 6, 2, 1, 1, 1, 0, 1, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= ( ( i1 * min(int(9.0), i1) ) + i0 )\\ns1 = \"\"v\"\"\\nin0 = saveChr(int(896044.0))[saveOrd(s2):].lstrip(in2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0, 1], [4, 6, 7, 4, 8], [0, 2, 2, 2, 0], [0], [1, 0, 1, 2, 1, 0, 0, 0], [1], [], [], [0], [1, 5], [0, 0, 0, 0, 1], [], [1], [1, 1], [], [0, 1], [0, 0, 3, 1, 1], [24, 17], [14, 5, 8], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 5, 0, 1, 0, 0, 0, 5, 2, 2, 0, 1], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(4.0)\\ns1 = \"\"YR&of\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [2, 2, 1, 1, 2, 2, 2, 1, 1, 0, 2, 2, 0, 0, 2, 0, 0], [0, 1, 0, 0, 2, 2, 1, 0], [1, 2, 2, 2, 0, 2, 1, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0, 0], [], [], [2], [3], [2, 2, 0, 2, 2, 0, 1], [0], [3, 0, 2, 4], [2, 2], [], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 0, 3, 7, 6, 0, 1, 2, 9, 6, 5, 2, 7, 0, 7, 3, 2, 9, 3, 5, 4, 7, 5, 2, 3, 5, 7, 7, 6], [0, 1, 0, 0, 2, 0, 1, 0, 2, 1, 2, 2, 1, 2, 2, 1, 1, 0, 1, 2, 0, 1, 1, 2], [0, 1], [3, 0, 1, 1, 1, 3, 0, 0, 1, 3, 3, 2, 1, 3, 1, 2, 1, 2, 2, 1, 3, 3, 0, 1, 3, 3, 3, 0, 2, 2, 0, 3, 2, 0, 3, 2, 2, 2, 2, 3, 2, 3, 3, 2, 1, 3, 1, 3, 2, 1, 3, 0, 3, 3, 2, 2, 3, 3, 0, 3, 1, 1, 3, 0, 1, 0, 3, 2, 2, 3, 1, 3, 3, 2, 3, 2, 0, 0, 1, 2, 1, 2, 2, 1, 3, 0, 0, 0, 0, 1, 3, 3, 3, 0, 1, 0, 1, 2, 1, 2, 3, 1, 0, 1, 1, 2, 3, 0, 1, 3, 2, 0, 3, 1, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1], [2, 2, 2, 1, 0, 0, 1, 4, 2, 4, 4, 3, 1, 3, 2, 4, 4, 4, 3, 0, 4, 3, 1, 3, 3, 1, 2, 4, 0, 1, 2, 3, 2, 2, 3, 3, 2], [2, 1, 2, 2, 1, 1, 0, 1, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [5, 3, 5, 1, 2, 1, 3, 0, 2, 3, 5, 4, 3, 2, 5, 5, 1, 1, 0, 5, 2, 5, 0, 0, 1, 3, 2, 2, 3, 2, 0, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0], [1, 3, 1, 3, 4, 0, 3, 3, 4, 2, 3, 3, 1, 2, 1, 2, 4, 0, 3, 0, 3, 3, 4, 2, 2, 0, 1, 4, 0, 0, 4, 1, 2, 1, 0, 4, 2, 2, 0, 1, 0, 0, 4, 2, 2, 2, 2, 0, 4, 4, 1, 1, 1, 1, 0, 1, 3, 3, 4, 4, 1, 0, 4, 0, 1, 2, 4, 0, 4, 1, 0, 3, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 3, 2, 0, 1], [1, 2, 2, 1, 0, 1, 1, 2, 0, 2, 0, 1, 2, 0, 2], [], [2, 2, 1, 1, 1, 1, 1, 2, 2, 0, 2, 0, 0, 1, 1], [0, 0, 1, 2, 3, 2, 0, 0, 2, 2, 1, 2, 2, 1, 0, 1, 3, 1, 2, 3, 0, 1, 1], [17, 7, 16, 20, 20, 24], [7, 6, 24, 20, 10, 17, 20], [1, 8, 7, 4, 9, 8, 2], [30, 7, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 17, 17, 8, 9, 4, 5, 0, 0, 1, 1, 7, 1, 4, 2, 0, 0, 2, 29, 29, 24, 2, 115, 27, 37, 16, 12, 33, 23, 4, 86, 15, 0, 15, 23, 6, 7, 7, 3], "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\":{:\\nif (\"\"H\"\" + (saveChr(abs(i0)) + in0)) != ((((\"\"h\"\" + \"\"1\"\"[int(3.0):]) + in2.capitalize()[:int(0.0)])[int(3.0):].capitalize() + (s1 + ((saveChr(abs(i1)) + s2[:i0][:int(7.0)]) + \"\"_\"\"))) + getCharFromString(s1, abs(max(( int(6.0) * min(int(0.0), divInt(int(1.0),( mod(int(2.0),min(max(i0, int(9.0)), saveOrd(in0))) - abs(saveOrd(saveChr(i2))) ))) ), ( divInt(i0,saveOrd(\"\"8\"\")) * mod(i1,len(\"\"Q\"\"[:mod(( ( ( max(divInt(len(s0),abs(( int(6.0) * saveOrd(saveChr(int(5.0))) ))), saveOrd(s2[divInt(int(2.0),saveOrd(\"\"U\"\")):][:i0])) - len(in0) ) - min(( ( saveOrd(in2) + len(in1[i2:max(int(7.0), int(0.0))][len(getCharFromString(\"\"7\"\".capitalize(), i1)):][int(7.0):i2][len(\"\"4\"\"):].capitalize()) ) - divInt(divInt(max(int(3.0), abs(saveOrd(\"\"g\"\"))),( min(( i2 - i1 ), int(2.0)) * ( int(9.0) - ( mod(int(3.0),max(i2, i2)) * i1 ) ) )),i1) ), int(5.0)) ) + abs(len(\"\"9\"\")) ),abs(i0))])) ))))):{:\\ni1 = int(4.0)\\n:}else:{:\\nin0 = s2\\n:}\\nloopBreak% = 0\\nfor in2 in \"\"8yUu\"\":{:\\nloopBreak% = 0\\nfor in2 in ((getCharFromString(saveChr(i2), int(7.0)) + \"\"$\"\") + s1):{:\\nloopBreak% = 0\\nwhile s1.capitalize() in \"\"k\"\":{:\\ns0 = getCharFromString(in2, mod(int(5.0),( abs(int(2.0)) + i0 )))[int(3.0):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = \"\"2\"\".capitalize()\\nb2 = not in2 == (s0 + s0)\\nloopBreak% = 0\\nwhile s1.startswith(in0):{:\\nif not ( len(\"\"^\"\"[:i1]) - int(7.0) ) \\ge len(\"\"Y\"\"):{:\\ns2 = s2\\ni1 += mod(i2,abs(int(7.0)))\\n:}else:{:\\nloopBreak% = 0\\nfor in0 in s2:{:\\ns0 = \"\"r\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ns2 = (in2[:int(6.0)] + \"\"u\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [], [0], [], [], [0], [], [2], [], [2], [], [], [], [], [0, 0, 1, 1, 1, 1, 1, 1, 1], [8, 9, 1, 5, 6, 8, 8, 9, 6], [1, 1, 1, 2, 0, 2, 0, 0, 2, 0, 2], [1], [1, 2, 3, 1, 2, 3, 0, 0, 3, 3, 3, 0, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 1, 2, 1, 0, 2, 1, 1, 2, 3, 0, 0, 2, 2, 3, 3, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [4, 0, 3, 3, 3, 3, 0, 4, 0, 3, 2], [1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1], [4, 2, 4, 4], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [2, 0, 0, 3, 3, 0, 1, 3, 3, 1, 1, 2, 3, 4, 3, 3, 4, 2, 1, 2, 4, 1, 1, 4, 3, 4, 4, 1, 1, 1, 4, 2, 1, 0], [2, 1, 2, 2, 1, 1, 3], [1], [2, 1, 2, 2, 0], [3, 0, 1, 3, 3, 1, 3, 3, 3, 0, 1], [4, 3], [5, 13, 0], [], [22, 19, 5, 1, 26, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 11, 1, 39, 11, 11, 8, 4, 4, 11, 0, 34, 7, 1, 5, 11, 2, 3, 0, 6], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(891.0)\\nb0 = in1[divInt(saveOrd(s2),int(5.0)):] == ((in1 + \"\"=E\"\") + ((\"\"f\"\" + \"\":\"\") + (((saveChr(( min(i1, i1) - len(\"\"\"\"\"[len(\"\"n\"\".capitalize()[len(\"\"\\\\\\n\"\"):]):]) )) + (saveChr(i2) + saveChr(i0)).capitalize()) + \"\"[\"\").capitalize() + \"\"\"\")[:( len(\"\"D\"\") + ( i2 + ( min(( saveOrd(\"\"a\"\"[i0:int(6.0)].rstrip()) + divInt(int(8.0),i0) ), ( int(8.0) - int(9.0) )) - divInt(min(i2, i0),( mod(len(in1),abs(i2)) + int(6.0) )) ) ) )]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1], [2, 0, 6, 6], [0, 2, 1, 2], [1], [2, 2, 0, 3, 0, 2, 1, 1, 0, 1], [1, 1, 1], [3], [2], [1, 0, 0], [1], [0, 1, 1], [], [3, 4, 2, 2, 4, 3, 1, 0, 1], [3, 1], [4], [1, 1], [1, 2, 1], [], [23, 4], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 1, 10, 3, 1, 1, 3, 1, 3, 0, 9, 2, 1, 2, 3, 0, 2, 1, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= mod(divInt(i2,len((saveChr(i1)[:divInt(int(20.0),int(6.0))][:i2].rstrip((\"\"x2\"\" + s1)) + \"\"e\"\"))),int(6.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [1], [0], [], [], [], [], [2, 0], [1], [], [1, 0], [], [], [2], [0], [7], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"H\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [2, 0, 1, 1], [1], [2, 1, 0], [], [0], [], [], [3, 1], [5], [1, 0, 0], [0], [], [2, 0], [], [], [0], [0, 0, 0, 0, 1, 0, 0, 1], [2, 7, 2, 6, 5, 5, 3, 6], [2, 1, 0, 0], [0], [2, 0, 2, 3, 1, 3, 0, 3, 1, 0], [0, 0], [2, 4, 0], [2, 0], [], [0, 2, 5], [0, 0, 1], [], [0, 3, 4, 4, 0, 1], [3, 3], [0, 1], [], [3, 0, 2], [24], [], [4], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 1, 0, 0, 2, 1, 3, 1, 0, 2, 0, 0, 1, 8, 8, 4, 1, 10, 2, 3, 2, 0, 3, 3, 0, 6, 2, 2, 0, 3, 1, 0, 1, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( i2 * ( abs(int(27265.0)) + saveOrd(s0) ) ) != i1:{:\\ns2 = (in2.rstrip().lstrip() + \"\"]Y4\"\")\\n:}\\ni0 = min(int(536.0), i0)\\nres0 = not b1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 2, 0, 0, 0, 0, 0, 1], [1], [2, 0, 0, 2, 1, 0, 0, 0], [], [0, 0, 0, 0, 0, 0], [], [], [3, 2, 1, 3, 1], [0, 5, 3, 3], [2, 0, 0, 0, 1, 1, 2, 1, 1], [0, 0, 0, 0], [5, 5], [2, 1, 3], [1], [1], [1], [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 2, 8, 9, 6, 8, 7, 8, 8, 2, 7, 5, 6, 0, 3, 5, 4, 8, 2, 1, 9, 0, 8, 9, 7, 7, 8, 8, 8, 6, 5, 6, 4, 6, 3, 2, 9, 9, 8, 3, 6, 6, 5, 8, 7, 6, 4, 1, 4, 0, 8, 7], [0, 0, 2, 0, 0, 1, 1, 1, 2, 1, 1, 0, 2, 0, 1, 1, 1, 2, 1, 0, 2, 1, 1, 2, 2, 0, 0, 1, 1, 2, 0, 1, 0, 1, 2], [0], [1, 1, 1, 3, 1, 3, 3, 1, 2, 0, 0, 0, 0, 2, 0, 0, 1, 2, 3, 1, 1, 1, 3, 2, 2, 0, 1, 3, 2, 2, 0, 2, 2, 3, 1, 0, 1, 3, 3, 2, 1, 0, 1, 2, 1, 3, 0, 2, 1, 3, 3, 0, 2, 0, 3, 3, 0, 3, 0, 0, 3, 3, 1, 1, 3, 3, 3, 2, 3, 1, 2, 2, 2, 3, 1, 3, 3, 1, 0, 1, 1, 0, 2, 1, 1, 1, 1, 0, 3, 2, 3, 1, 1, 3, 2, 0, 0, 2, 0, 2, 0, 1, 3, 1, 0, 0, 2, 2, 1, 3, 0, 2, 3, 1, 3, 1, 1, 1, 3, 1, 1, 0, 0, 1, 0, 0, 3, 0, 0, 2, 3, 3, 3, 3, 2, 1, 3, 2, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0], [1, 3, 2, 1, 0, 4, 0, 1, 0, 1, 4, 4, 2, 0, 2, 2, 2, 0, 4, 3, 3, 4, 1, 1, 3, 0, 0, 3, 1, 0, 4, 4, 2, 2, 0, 4, 3, 1], [1, 1, 2, 0, 0, 1, 0, 1, 2, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [2, 3, 4, 2, 1, 4, 1, 1, 3, 1, 2, 2, 1, 1, 1, 1, 5, 4, 0, 0, 3, 5, 5, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [], [0, 3, 2, 3, 2, 4, 0, 4, 0, 0, 0, 4, 0, 3, 3, 1, 3, 1, 2, 4, 0, 0, 4, 2, 2, 2, 0, 3, 3, 1, 2, 4, 2, 1, 2, 2, 4, 4, 1, 4, 2, 0, 0, 3, 4, 1, 4, 3, 0, 2, 0, 4, 0, 2, 0, 0, 4, 2, 3, 3, 2, 3, 2, 4, 1, 4, 4, 0, 2, 0, 4, 4, 1, 0, 3, 4, 0, 4, 4, 0, 0, 2, 2, 1], [0, 3, 0, 1, 2, 3, 2, 1, 2, 0, 0, 3, 1, 2, 0, 3, 2, 3, 0, 1, 0], [0, 1, 3, 4, 1], [0, 2, 0, 0, 1, 0, 0, 1, 1, 2, 0, 1, 2, 0, 2, 1, 1, 2, 1], [3, 1, 3, 3, 0, 3, 2, 0, 3, 3, 1, 3, 1, 2, 2, 0, 1], [6, 7, 4], [13, 19, 21, 21], [5, 1, 5], [26, 18, 13, 9, 22, 9, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 1, 8, 0, 6, 0, 0, 5, 4, 9, 4, 2, 3, 1, 1, 1, 52, 52, 35, 1, 143, 28, 38, 13, 15, 24, 17, 0, 84, 21, 5, 19, 17, 3, 4, 3, 7], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\nres0 = ((getCharFromString(in1, int(2.0))[int(2.0):] + s2.lstrip())[int(89.0):max(int(6.0), len(s1))] + in1).endswith(getCharFromString(s1, abs(int(8.0))))\\nif not False:{:\\nb2 = ( ( i0 - i0 ) \\l i2 or i0 != mod(i0,i1) )\\ns1 = ((\"\"[n/*\"\" + (\"\"G\"\" + saveChr(int(78.0))[( max(int(8.0), int(2.0)) - int(75603.0) ):min(mod(( i1 * int(5.0) ),saveOrd(in0)), ( ( i1 + mod(divInt(min(int(4.0), i2),int(8.0)),max(min(mod(int(2.0),i1), int(1.0)), mod(int(9.0),max(i1, ( int(0.0) + saveOrd(s1) ))))) ) - saveOrd(s2[i0:divInt(i2,abs(min(i0, abs(i1))))][:i1][abs(abs(int(8.0))):int(9.0)].capitalize()) ))])) + ((\"\"&5\"\" + \"\"H=\"\"[:min(saveOrd(saveChr(len(\"\"&\"\")).capitalize()[mod(len(s2[int(7.0):mod(( ( saveOrd(s1) + int(7.0) ) - max(max(int(8.0), i1), int(8.0)) ),int(8.0))].capitalize()),i2):][:mod(int(6.0),int(5.0))]), int(6.0))].rstrip()[int(463.0):i1]) + (getCharFromString(\"\"t<v1\"\", len(getCharFromString((s1 + s1[:( min(int(2.0), int(9.0)) * min(( i0 + i2 ), divInt(i1,divInt(i1,int(9.0)))) )]), len(s1.lstrip(in2[int(8.0):]))))) + in1)))\\n:}else:{:\\ni2 = i2\\nb1 = saveChr(i0).endswith((((\"\"5\"\".capitalize()[:divInt(( int(3.0) - max(i0, mod(min(int(6.0), saveOrd(getCharFromString(s0.rstrip(s0[:int(6.0)]), int(5.0)))),int(8.0))) ),saveOrd(\"\"E\"\".rstrip().capitalize()))] + in0)[int(7.0):] + (getCharFromString(in2, int(6.0)) + saveChr(i1))) + getCharFromString(in2, i1))[int(4.0):i2])\\nres0 = i0 \\ge abs(i1)\\nb1 = i0 \\ge ( abs(min(saveOrd(s0), len(\"\"v\"\"[:mod(int(1.0),max(( int(4.0) + i1 ), i2))][int(0.0):]))) - int(87.0) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [2, 2, 1], [], [0, 0], [], [], [1], [4], [1], [0], [5], [], [], [], [], [1, 1], [8, 6], [2, 0, 1], [0], [0, 1, 2, 0, 1], [1], [], [], [1], [3, 1, 5, 1], [0, 0, 0, 0, 0, 1], [], [0, 4, 0, 1, 0], [3, 1], [4], [], [3, 3, 3, 0, 2, 3], [15], [], [8], [8, 21, 26, 1]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 4, 6, 0, 4, 1, 1, 0, 6, 1, 0, 1, 4], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\nin2 = s1.rstrip(\"\"%<[P8\\\\\\n\"\")\\ni2 = i0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1], [1, 2, 2, 0, 1, 1, 0], [0, 0], [0, 2, 0, 1, 0], [0, 0], [0, 0], [], [], [0, 1, 2], [1, 2], [2, 0, 0, 2, 1], [0, 0], [3, 1], [2, 2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 8, 8, 8, 2, 9, 4, 1, 5, 6, 9, 3, 7, 9, 0, 0, 8, 2, 9, 9, 9, 8, 7, 3, 6, 0, 9, 7, 3, 1, 9, 4, 4, 3, 4, 7, 2, 5, 6, 5, 6], [1, 1, 1, 2, 0, 1, 0, 2, 0, 1, 2, 1, 0, 2, 1, 0, 2, 2, 0, 0, 2, 2, 1, 2, 1, 1, 2, 2, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 0, 1, 1, 2, 0, 0], [1], [2, 2, 1, 2, 0, 3, 3, 1, 2, 1, 2, 0, 1, 0, 2, 0, 3, 3, 0, 1, 2, 1, 1, 0, 3, 0, 0, 1, 2, 3, 2, 2, 1, 2, 2, 0, 0, 2, 3, 2, 3, 1, 0, 0, 0, 3, 3, 3, 3, 2, 1, 3, 2, 1, 0, 0, 2, 1, 0, 3, 1, 0, 3, 3, 2, 3, 0, 1, 0, 2, 3, 2, 0, 2, 0, 1, 0, 0, 3, 2, 1, 0, 2, 3, 1, 0, 3, 2, 3, 1, 1, 0, 3, 1, 3, 0, 3, 3, 3, 0, 3, 1, 3, 2, 2, 0, 2, 2, 1, 0, 2, 1, 3, 3, 2, 3, 0, 0, 0, 2, 0, 2, 3, 2, 1, 3, 1, 1, 1, 3, 3, 2, 1, 0, 2, 3, 3, 1, 0, 3, 2, 1, 2, 2, 3, 3, 3, 3, 0, 0, 3, 1, 3, 1, 1, 3, 1, 0, 3, 1, 0, 0, 1, 3, 0, 2, 0, 0, 3, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [3, 3, 4, 1, 2, 2, 1, 2, 2, 3, 3, 0, 1, 2, 1, 3, 0, 0, 1, 0, 2, 0, 1, 1, 2, 2, 2, 3, 4, 3, 0, 3, 2, 2, 4, 4, 3, 0, 2, 0, 3, 4, 1, 1, 2, 4, 3, 2, 4, 1], [1, 0, 1, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 1, 2], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 5, 1, 0, 5, 0, 2, 0, 1, 0, 5, 3, 1, 3, 4, 5, 1, 5, 2, 4, 2, 5, 3, 3, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 0], [0, 2, 3, 4, 1, 3, 3, 0, 2, 4, 3, 3, 0, 1, 4, 2, 1, 4, 1, 3, 4, 0, 0, 3, 4, 2, 2, 2, 2, 4, 1, 0, 2, 2, 2, 2, 1, 0, 2, 0, 3, 2, 0, 3, 0, 0, 0, 2, 4, 0, 1, 2, 3, 2, 4, 2, 2, 2, 4, 2, 1, 4, 2, 2, 0, 1, 2, 0, 4, 4, 1, 0, 1, 4, 2, 4, 1, 4, 0, 1, 0, 3, 2, 4, 4, 0, 4, 2, 2, 4, 4, 1, 0, 0, 0, 1, 0], [3, 3, 0, 2, 3, 2, 2, 3, 3, 1, 2, 1, 0, 3, 1, 0, 1, 0, 2, 3, 3], [5, 0, 4, 1, 5, 5, 4, 3], [1, 2, 2, 1, 2, 2, 0, 1, 2, 2, 0, 1, 2, 2, 0, 1, 2, 1, 1, 0, 0, 0, 2, 1, 1, 1, 1], [0, 1, 2, 0, 2, 2, 3, 2, 0, 1, 0, 2, 2, 3, 1, 2], [17, 15, 11, 3], [21, 11, 9], [3, 7, 9, 4, 7, 0, 9], [8, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 2, 2, 0, 0, 3, 1, 5, 1, 2, 2, 0, 0, 0, 41, 41, 45, 1, 170, 39, 49, 18, 22, 26, 16, 2, 97, 21, 8, 27, 16, 4, 3, 7, 2], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s1 != (\"\"R\"\".strip(((in2 + ((s1 + \"\"v\"\") + getCharFromString(\"\"3\"\"[( ( int(0.0) - mod(i1,len(\"\"P\"\".capitalize())) ) + len((s0.rstrip(in2) + (\"\"7\"\".capitalize()[int(8.0):( int(8.0) - ( i1 + int(8.0) ) )][i1:][mod(i2,saveOrd(s0)):][:max(i0, int(2.0))].capitalize() + \"\"9\"\"[( int(9.0) + int(4.0) ):i1][abs(i0):][i2:][:int(1.0)]))) ):], mod(abs(( mod(int(5.0),divInt(( i0 * i1 ),( max(divInt(abs(int(6.0)),i2), i1) + i0 ))) + abs(len(s2)) )),len(s0[:min(( int(9.0) * max(divInt(int(3.0),i2), i1) ), divInt(int(7.0),i0))])))).lstrip()[abs(int(9.0)):]) + (s1[i2:] + (s0 + in2)))) + in0)[:max(len(s1.rstrip()[( min(i2, int(0.0)) + i0 ):]), mod(min(mod(i0,mod(i2,int(0.0))), i2),i1))]\\nloopBreak% = 0\\nfor in0 in \"\"%\"\":{:\\nloopBreak% = 0\\nfor in1 in (saveChr(max(( int(8.0) + i2 ), ( min(int(2.0), i1) * abs(mod(min(int(9.0), int(9.0)),i1)) )))[:max(int(9.0), max(i2, abs(abs(abs(i2)))))][:len(\"\"4\"\"[int(8.0):saveOrd(in2[divInt(( i0 + divInt(divInt(int(7.0),i2),mod(int(3.0),len(\"\"L\"\"))) ),min(mod(len(s1[i1:]),i2), i1)):mod(i0,( abs(( int(6.0) + abs(int(0.0)) )) + int(9.0) ))][int(7.0):saveOrd(saveChr(saveOrd(getCharFromString(\"\"lD\"\", ( int(319.0) * i1 )))))].capitalize())])][divInt(len(in2),min(int(4.0), i0)):].strip(\"\"7\"\")[:abs(mod(int(4.0),( divInt(min(len(saveChr(saveOrd(\"\"0\"\"))[:max(i0, i0)].strip(getCharFromString(s2, max(int(3.0), abs(int(4.0)))))), int(72.0)),saveOrd(\"\"]\"\")) - int(5.0) )))] + in1)[i2:len((saveChr(int(6.0))[:i0] + getCharFromString(s2, i1)))]:{:\\nin2 = \"\"j\"\".lstrip(in0).rstrip(in0)[:int(5.0)][:abs(i1)].capitalize()\\nb1 = not not s2 not in \"\"9\"\"\\ni2 *= mod(i0,i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = saveOrd(in1) \\g int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0], [0, 1], [0], [0], [], [], [2], [4], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [9, 0, 2, 7, 8, 1], [1, 2, 2, 1, 1, 0, 1, 0, 1], [0], [0, 3, 3, 3, 2, 0, 1, 3, 3, 2, 3, 1, 0, 1, 2, 3, 3, 3, 3, 0, 1, 2, 0, 0, 3, 2, 1, 0, 0], [1, 1, 0, 0, 1], [2, 4, 1, 0, 3, 3, 0, 2, 4, 2, 0], [0, 2], [1, 1, 1], [1, 2, 3, 0, 1], [1], [0], [2, 0, 4, 2, 2, 0, 4, 0, 0, 1], [1, 3], [4], [2, 1, 0], [2], [], [], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 9, 1, 29, 5, 11, 2, 3, 5, 1, 1, 10, 2, 1, 3, 1, 0, 0, 1, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\le abs(saveOrd(s1[max(mod(i2,int(9.0)), min(len(saveChr(mod(len(s2[int(0.0):i2][:int(2.0)]),( min(abs(saveOrd(in0.rstrip(s0))), abs(i1)) + int(7.0) )))), ( i1 * i0 ))):]))\\nloopBreak% = 0\\nfor s1 in \"\"3\"\":{:\\ni1 = min(mod(int(8.0),i0), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 0], [], [0, 2], [], [5], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [7, 8, 6, 1, 0, 0, 3, 8, 5, 2, 9, 1, 0, 9, 9, 1, 0], [0, 2, 2, 2, 1, 0, 1, 0, 1], [], [3, 2, 3, 0, 3, 2, 0, 3, 3, 1, 3, 1, 3, 2, 2, 2, 2, 2, 0, 0, 1, 2, 1, 3, 0, 0, 3, 2, 3, 1, 0, 0, 1, 2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [1, 3, 0, 4, 2, 4, 3, 3, 1, 0], [2, 1, 0, 1, 0, 1, 1, 2], [0, 0, 0, 1, 1, 0], [0, 5, 5, 0], [0, 1], [], [0, 4, 4, 1, 4, 4, 4, 2, 0, 2, 4, 4, 4, 0, 2, 4, 0], [2, 0, 0, 2, 2, 1, 2, 1, 2], [], [0, 2, 0], [1, 1], [], [21, 9], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 17, 17, 9, 0, 46, 14, 10, 8, 6, 4, 2, 0, 17, 9, 0, 3, 2, 0, 2, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not s0.endswith(getCharFromString(\"\"vj\"\", max(( len(getCharFromString(in2[i0:min(divInt(i2,saveOrd(saveChr(abs(int(7.0)))[saveOrd(saveChr(int(8.0)).capitalize()):])), len(in2))].capitalize().capitalize(), ( divInt(( ( divInt(i2,i2) * int(6.0) ) - mod(int(1.0),len(s0.capitalize()[i1:i0])) ),max(mod(min(int(0.0), i1),i0), int(0.0))) + divInt(int(3.0),( int(8.0) - int(5.0) )) ))) + int(29.0) ), ( ( int(10.0) - int(991.0) ) - ( int(0.0) * i1 ) ))).capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [1], [], [], [], [], [], [1, 2], [0, 1, 1], [0, 0], [], [3], [1], [], [], [1, 0, 1, 1, 1, 1, 1], [2, 9, 8, 4, 9, 2, 6], [0, 0, 1, 0, 1, 0, 2], [1], [1, 0, 1, 2, 3, 1, 2, 3, 3, 2, 2, 2, 2, 1, 0, 0, 3, 0, 1, 1, 3, 0, 0, 3, 1], [0, 1, 1, 0, 0, 0, 1], [3, 1, 3, 1, 3, 2], [2, 2, 0, 2, 1], [0, 1, 0], [3, 1], [1, 1], [], [2, 0, 4, 1, 4, 1], [2, 2], [], [0], [0, 3], [0], [], [], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 2, 3, 2, 0, 1, 1, 0, 0, 7, 7, 7, 1, 23, 6, 5, 5, 2, 1, 2, 0, 6, 2, 0, 1, 2, 1, 0, 0, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( int(2.0) \\g i0 or int(98.0) == ( len(in0[int(4.0):divInt(max(len(\"\"A\"\".capitalize()), mod(( ( ( int(9.0) * i0 ) * i1 ) + max(i0, int(2.0)) ),int(6.0))),len(\"\"]\"\".capitalize()))]) * i1 ) ):{:\\ni0 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [0, 1], [], [3, 4, 0, 1], [3], [0], [], [2, 2], [], [], [9, 4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 4, 1, 1, 0, 2, 0, 0, 2, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (s1.lstrip() + \"\"94\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [1, 0, 0], [2, 0, 2, 0, 2, 0, 1], [0, 0], [1, 5, 3], [3, 3, 2], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 1, 0, 0, 0], [0, 1, 1], [3, 1, 0, 1, 2, 0, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 3, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [2, 0, 0, 0, 1], [0, 2], [17], [], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 7, 1, 3, 3, 2, 0, 0, 9, 9, 11, 0, 34, 9, 5, 4, 5, 6, 2, 0, 17, 4, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1[saveOrd(in2):] not in in1[int(1.0):i0]:{:\\nres0 = ( getCharFromString(saveChr(int(7.0))[mod(i1,i2):int(5.0)], mod(int(7.0),divInt(i0,i1))).endswith(in1[( ( int(2.0) + i2 ) + abs(abs(divInt(i1,( min(( int(1.0) * i1 ), divInt(len((\"\"R\"\" + getCharFromString(in0, int(7.0))).rstrip()),i0)) - int(7.0) )))) ):int(9.0)]) or ( \"\"0\"\" != s0 and not i0 \\g i0 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 3, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.capitalize()[len(saveChr(mod(int(0.0),i0))[mod(i2,int(7.0)):saveOrd(in0[int(5.0):min(i2, i0)])]):] not in (\"\"R\"\" + getCharFromString(s0, ( divInt(int(7.0),i1) + divInt(len(\"\";\"\"),divInt(i2,( min(( max(i1, divInt(abs(int(6.0)),i2)) + int(1.0) ), int(7.0)) * i0 ))) ))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 33, 9, 8, 3, 6, 6, 2, 1, 16, 4, 1, 4, 2, 1, 0, 0, 1]}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [4, 5, 3, 4, 5, 6, 3, 5, 9, 6, 7, 6, 2], [1, 0, 0, 2, 0, 1, 0, 1, 1, 2], [], [0, 1, 1, 1, 1, 2, 0, 0, 0, 3, 3, 0, 2, 0, 1, 2, 3, 3, 1, 3, 3, 3, 2, 3, 2, 3, 0, 2, 2, 3, 1, 0, 3, 2, 3, 2, 3, 1, 0, 1, 1, 3, 0], [1, 1, 1, 0, 0, 0, 0, 1, 1], [4, 3, 2, 4, 4, 4, 1, 4, 3, 4, 1, 2, 2, 3], [2, 1, 0, 0], [0, 1, 0, 1, 0], [2, 0, 2, 2, 2, 1, 3, 1], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [], [3, 4, 4, 3, 0, 3, 0, 2, 0, 2, 3, 3, 1, 2, 1, 3, 2, 3, 1, 1, 3, 4, 3, 2, 4, 2, 2, 4, 2, 1, 4, 2, 4, 2, 0, 0, 0, 1, 2, 1, 1, 1, 0, 4, 1, 1, 1], [3, 0, 2, 2, 0, 3, 1, 0], [1, 3], [2, 1, 0, 2, 0, 2, 2, 0, 1, 2, 1], [0, 3, 3, 1, 2, 1, 0, 3, 0, 0, 3, 3, 2, 3, 3, 2, 1], [17, 7, 10, 23], [2, 13, 8], [9, 7, 8], [31, 24, 14, 5, 21, 10, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 10, 0, 43, 9, 14, 4, 5, 8, 17, 0, 47, 8, 2, 11, 17, 4, 3, 3, 7], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (getCharFromString((s0 + (s2 + s2[i1:])), int(45.0)).rstrip() + ((\"\"R\"\" + \"\"`?c\"\"[int(3.0):int(4.0)]) + ((\"\"9\"\" + \"\"n\"\")[int(56.0):] + ((getCharFromString(\"\"H\"\"[divInt(i0,i0):i2], saveOrd(saveChr(len(s2[i0:]))[:mod(i1,int(3.0))].lstrip(s1)))[divInt(abs(saveOrd(in0)),int(5.0)):][saveOrd(\"\"+\"\"):].capitalize()[saveOrd(\"\"K\"\"[:max(( saveOrd(\"\"X\"\") * ( len(\"\"\"\"\") - i0 ) ), ( ( saveOrd(s1) + int(9.0) ) + i1 ))]):max(mod(abs(divInt(abs(int(6.0)),i1)),int(7.0)), int(62.0))] + getCharFromString(\"\"<\"\", len(\"\"7\"\"))).capitalize() + \"\"\"\\\\\"\\\\\\\\8i\"\")))[:i2])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1, 1, 1], [3, 8, 5, 2, 8, 5, 0], [1, 2, 2, 2, 2, 2, 1, 1], [0, 0], [3, 1, 2, 0, 2, 3, 1, 0, 2, 1, 2, 3, 1, 2, 3, 2, 3, 2, 1, 2, 0, 0, 1, 2, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 2, 4, 3, 3], [2, 0, 1, 0, 0, 2, 2], [1, 0], [5, 3], [0, 1, 1], [], [2, 3, 0, 1, 2, 0, 1], [], [], [2, 0], [1, 1, 3], [], [20, 18], [], [0]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 8, 2, 26, 9, 5, 7, 2, 2, 3, 0, 7, 0, 0, 2, 3, 0, 2, 0, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = min(int(3.0), ( i2 * ( abs(int(8.0)) + i2 ) ))\\ni2 = ( int(52.0) - mod(saveOrd((in2 + \"\"us\"\")[int(8.0):]),divInt(len(in0[( len(\"\"\"\") + ( int(5.0) + ( i2 * i2 ) ) ):int(0.0)]),( i1 * i1 ))) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 1, 2, 1, 0, 1, 0, 1, 0, 1], [2], [1, 1, 2, 2, 1, 0, 2, 2, 0], [], [0, 0, 0, 0], [], [], [0, 3], [1, 4, 0], [1, 1, 1], [0, 0, 0], [], [], [], [], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [5, 7, 7, 5, 2, 3, 4, 0, 7, 6, 3, 4, 3], [1, 0, 1, 1, 1, 0, 2, 0, 1], [1, 1, 0], [1, 1, 2, 0, 2, 1, 2, 0, 2, 0, 2, 0, 1, 1, 3, 0, 1, 0, 1], [0, 1, 0, 0, 1], [3], [2, 1, 1, 1, 0], [0, 0], [4, 4, 4, 1, 2, 5, 0, 0, 2], [1], [], [0, 0, 4, 0, 1, 0, 0], [3], [3], [], [2], [], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 1, 9, 0, 4, 0, 0, 2, 3, 3, 3, 0, 0, 0, 0, 0, 13, 13, 9, 3, 19, 5, 1, 5, 2, 9, 1, 0, 7, 1, 1, 0, 1, 0, 0, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(577.0)\\ni0 -= int(52.0)\\nloopBreak% = 0\\nwhile ( i1 - divInt(int(3.0),( i1 - ( i1 + divInt(i0,int(4.0)) ) )) ) \\g int(07.0):{:\\nin1 = in1\\nin1 = s1\\ni2 = len(s2.lstrip(\"\"1\"\"))\\nb0 = i0 \\le int(634.0)\\nin2 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = s2\\nres0 = i1 \\l int(3.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 2, 2, 1, 0, 0, 1, 1, 1, 1], [2, 1], [1, 1, 2, 0, 2, 2, 2, 1, 0], [], [0, 0, 0, 0], [], [], [2, 2, 2], [3, 2], [1, 2, 0, 0, 1, 0], [0, 0], [2], [3, 1, 0], [1], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [4, 4, 5, 5, 9, 3, 1, 3, 7, 7, 8, 2, 0, 0, 0, 3, 0, 6, 6, 1, 0, 2, 3, 3, 9, 6, 8, 4, 9, 1, 4, 0, 4, 2, 0, 2, 7, 2, 7, 0, 7, 0, 6, 1, 3, 6, 7, 4, 3, 0, 9, 9, 5, 1, 8, 4, 6, 6, 3, 1, 2, 8, 3], [1, 0, 1, 0, 2, 0, 1, 1, 0, 2, 1, 1, 0, 2, 2, 2, 0, 2, 1, 1, 2, 1, 0, 0, 1, 2, 2, 0, 1, 0, 0, 2, 2, 2, 1, 0, 2, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0], [1, 0, 0], [2, 3, 3, 1, 1, 0, 1, 0, 3, 2, 1, 1, 1, 2, 1, 1, 3, 0, 0, 0, 2, 1, 3, 3, 3, 3, 2, 3, 2, 3, 2, 2, 0, 0, 2, 2, 1, 2, 3, 0, 1, 2, 0, 3, 0, 2, 1, 3, 3, 3, 0, 3, 3, 1, 0, 0, 3, 1, 0, 0, 3, 1, 1, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 3, 0, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 3, 2, 1, 0, 3, 3, 1, 0, 3, 0, 3, 2, 3, 3, 3, 1, 3, 2, 1, 0, 3, 1, 1, 1, 3, 3, 3, 2, 0, 2, 2, 1, 2, 0, 3, 3, 1, 3, 0, 1, 0, 2, 0, 1, 3, 0, 3, 1, 3, 3, 0, 0, 0, 3, 3, 2, 3, 1, 2, 2, 1, 2, 2, 2, 3, 0, 3, 2, 2, 3, 2, 2, 1, 0, 3, 2, 0, 2, 2, 2, 2, 3, 1, 2, 0, 3, 3, 1, 1, 2, 0, 0, 2, 2, 3, 0, 3, 1, 2, 3, 1, 0, 3, 1, 0, 2, 3, 1, 0, 2, 0, 2, 0, 1, 0, 3, 1, 1, 0, 0, 3, 1, 2, 1, 0, 3], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0], [3, 3, 0, 3, 3, 1, 1, 3, 0, 3, 1, 2, 0, 1, 0, 0, 3, 4, 1, 1, 0, 3, 0, 2, 2, 4, 2, 0, 2, 0, 4, 3, 4, 1, 4, 1, 4, 1, 0, 2, 4, 3, 1, 3, 1, 3, 0, 0, 0, 2, 4, 1, 1, 4, 0, 3, 3, 3], [2, 0, 1, 2, 2, 1, 1, 2, 1, 1, 0, 1, 1, 1, 2, 0, 2, 1, 1, 1, 2, 0, 2, 0, 1, 1], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0], [3, 2, 0, 1, 1, 5, 4, 1, 2, 4, 4, 3, 2, 1, 0, 1, 4, 2, 1, 1, 4, 3, 4, 3], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [3, 4, 3, 1, 3, 3, 2, 2, 2, 4, 4, 0, 0, 4, 4, 1, 2, 1, 1, 4, 3, 4, 4, 0, 4, 2, 4, 4, 2, 0, 4, 0, 0, 1, 2, 4, 1, 4, 0, 2, 1, 2, 1, 4, 4, 1, 4, 2, 4, 0, 0, 0, 0, 2, 3, 0, 3, 0, 2, 0, 2, 4, 4, 1, 0, 2, 2, 0, 4, 1, 0, 0, 1, 3, 2, 0, 1, 4, 0, 4, 1, 2, 2, 1, 4, 1, 4, 1, 1, 1, 1], [3, 1, 0, 3, 3, 0, 0, 3, 1, 2, 2, 3, 1, 2, 2, 0, 3, 0, 0, 2, 3, 0, 1, 2, 3], [4, 4, 3, 5, 5, 0, 1, 3], [0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 0, 0, 1, 1, 0, 1, 1], [0, 0, 2, 0, 2, 2, 1, 0, 1, 1, 0, 3, 1, 3, 1, 0, 2, 1, 3, 0, 0, 1, 3], [0, 0, 17, 3, 16, 25, 6, 13], [21, 6, 0, 16, 12, 20, 14], [6, 8, 4, 6], [23, 7, 6, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 2, 9, 0, 4, 0, 0, 3, 2, 6, 2, 1, 3, 1, 1, 1, 63, 63, 52, 3, 211, 54, 58, 26, 29, 24, 23, 0, 91, 25, 8, 18, 23, 8, 7, 4, 4], "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= ( len(((\"\"AA\"\" + ((saveChr(len(getCharFromString(in0, int(4.0))))[int(4.0):][i0:][int(5.0):i1] + s2) + \"\"6\"\".lstrip(\"\"R\"\"[min(( int(5.0) + int(9.0) ), int(3.0)):]).rstrip(\"\"8\"\"))).rstrip(getCharFromString((getCharFromString(s0.strip(saveChr(( int(1.0) - int(3.0) ))), len(s1[i0:].capitalize().capitalize()[i2:])) + s1.strip(in2)), i0)) + \"\"4v\"\")) * divInt(int(77.0),len(saveChr(max(max(len(\"\"D\"\"), mod(min(( len(in1.capitalize()) * mod(mod(i1,i1),mod(( int(8.0) - divInt(max(i0, int(2.0)),mod(i2,abs(i1))) ),( int(0.0) - min(max(min(i1, min(len(\"\"g\"\"[int(0.0):]), i0)), i2), saveOrd(\"\"a\"\"[int(0.0):])) ))) ), i2),i2)), max(int(3.0), int(0.0))))[( i0 * mod(( int(6.0) - int(6.0) ),i2) ):i1])) )\\ni1 = i2\\nloopBreak% = 0\\nwhile mod(max(i1, int(10233.0)),( divInt(int(9.0),int(6.0)) - ( int(8.0) + ( int(4.0) - ( min(mod(int(9.0),i0), len(getCharFromString(\"\"Q\"\", min(int(1.0), i0)).capitalize())) - abs(i1) ) ) ) )) \\ge abs(divInt(saveOrd(getCharFromString(s1, abs(min(int(4.0), abs(mod(int(0.0),i2)))))[min(int(4.0), int(2.0)):int(0.0)].lstrip()),saveOrd(s2))):{:\\nif in1 == in1:{:\\nin0 = (s2 + (s1 + s0[len(getCharFromString(\"\">\"\".capitalize(), saveOrd(s1))[( i2 - mod(( int(2.0) * divInt(i0,max(saveOrd(in1[:int(7.0)][:max(i1, int(2.0))]), i0)) ),( i0 + int(7.0) )) ):saveOrd(\"\"q\"\".rstrip())]):i2]))[max(int(07.0), min(abs(i2), i2)):]\\n:}else:{:\\nb2 = ( True or i1 == saveOrd(s2) )\\ns1 = s1\\n:}\\nin1 = \"\"$m\"\"\\nin0 = (in1[len(\"\"Z\"\"):divInt(max(int(06136.0), divInt(divInt(int(7.0),divInt(mod(( len(getCharFromString(in0, i0)) * max(divInt(divInt(len(saveChr(( mod(int(4.0),i2) - min(mod(i2,( divInt(divInt(mod(min(int(3.0), divInt(i0,min(abs(int(0.0)), int(9.0)))),( i2 - i2 )),( ( saveOrd(\"\"6\"\") - i0 ) * max(int(9.0), divInt(max(int(5.0), i1),saveOrd(\"\"u\"\"[:int(1.0)][:i1]))) )),( min(int(8.0), i1) + ( i0 * ( i2 + int(4.0) ) ) )) - i1 )), len(\"\"#\"\".capitalize())) ))),int(6.0)),int(6.0)), i1) ),i1),len(\"\"G\"\".lstrip(\"\"N\"\")))),int(31.0))),( int(283.0) - i1 ))] + \"\"o\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(\"\"\"\")\\nb2 = b2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 2, 2, 0, 2, 0, 1, 0, 1, 1, 2, 0, 2, 1, 0, 0, 2, 1], [2, 1, 2, 1, 2, 0, 2], [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 2, 1], [0], [0, 0, 0, 0, 0, 0, 0, 0], [], [], [1, 1, 1, 0, 1], [3, 4, 5, 2, 5], [0, 1, 0, 1, 2, 0, 0, 0, 0, 2, 2, 1, 2, 1, 2, 1, 0], [0, 0, 0, 0, 0], [0, 4, 0, 5, 4], [2, 3, 2, 1, 2, 2, 1], [1], [1, 0], [0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 0, 4, 4, 9, 1, 3, 6, 6, 3, 6, 0, 0, 1, 2, 4, 6, 6, 9, 2, 5, 1, 9, 3, 7, 1, 5, 5, 8, 4, 9, 5, 2, 1, 7, 0, 2, 9, 7, 8, 9, 7, 7, 1, 3, 5, 1, 2, 6, 3, 9, 9, 2, 2, 9, 8, 3, 0, 5], [2, 0, 1, 0, 1, 2, 2, 2, 2, 0, 1, 0, 0, 0, 1, 2, 1, 0, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 1, 2, 2, 2, 1, 1, 1, 0, 2, 2, 0, 0, 2, 0, 0, 1, 2, 1, 2, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1, 1], [1, 0, 3, 2, 1, 3, 2, 0, 0, 1, 2, 2, 3, 1, 1, 1, 1, 0, 1, 3, 0, 0, 2, 3, 3, 0, 0, 2, 3, 2, 0, 0, 0, 3, 0, 1, 1, 1, 3, 2, 3, 2, 0, 0, 3, 0, 2, 3, 1, 0, 1, 0, 2, 0, 3, 3, 2, 2, 0, 1, 2, 0, 1, 3, 1, 1, 0, 1, 1, 0, 3, 1, 0, 2, 1, 2, 0, 3, 0, 0, 0, 0, 2, 2, 2, 0, 3, 0, 2, 1, 1, 2, 3, 0, 2, 1, 3, 2, 1, 3, 3, 3, 2, 0, 2, 2, 3, 2, 3, 3, 2, 0, 3, 2, 2, 0, 1, 3, 3, 2, 1, 2, 2, 1, 2, 3, 1, 3, 0, 1, 1, 1, 0, 0, 3, 3, 3, 3, 1, 0, 2, 0, 2, 2, 3, 1, 1, 2, 3, 3, 2, 0, 2, 0, 0, 0, 1, 3, 1, 1, 2, 1, 2, 3, 1, 3, 0, 1, 1, 1, 3, 0, 1, 2, 3, 0, 2, 2, 3, 2, 2, 1, 3, 0, 3, 1, 1, 2, 1, 0, 2, 2, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 3, 0, 1, 4, 2, 0, 1, 0, 3, 3, 2, 1, 0, 4, 0, 4, 1, 4, 1, 0, 0, 2, 1, 1, 0, 4, 0, 1, 0, 0, 3, 4, 2, 4, 0, 3, 3, 2, 3, 0, 2, 3, 1], [1, 1, 2, 2, 0, 1, 2, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 2, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0], [5, 4, 5, 5, 3, 3, 4, 4, 1, 2, 5, 5, 1, 5, 2, 3, 1, 2, 1, 0], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0], [0, 0, 0, 4, 4, 1, 4, 4, 2, 0, 0, 2, 4, 0, 2, 4, 4, 4, 0, 2, 4, 0, 3, 1, 4, 3, 0, 4, 0, 2, 1, 1, 0, 2, 1, 0, 0, 3, 2, 0, 4, 1, 4, 2, 1, 0, 4, 2, 0, 2, 0, 2, 0, 2, 1, 2, 4, 4, 1, 4, 1, 1, 1], [0, 3, 3, 1, 2, 1, 0, 2, 0, 2, 0, 3, 2, 3, 2, 3, 2], [1, 0, 4, 3, 1], [0, 2, 1, 1, 1, 2, 0, 1, 1, 2, 2, 0, 0], [2, 0, 2, 3, 0, 2, 0, 3, 3, 3, 1, 0, 2, 1], [25, 2, 0, 22], [6, 6], [0, 9, 1, 0], [30, 8, 8, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 20, 20, 7, 13, 1, 8, 0, 0, 5, 5, 17, 5, 5, 7, 1, 2, 2, 60, 60, 56, 7, 195, 50, 46, 27, 29, 20, 14, 1, 63, 17, 5, 13, 14, 4, 2, 4, 4], "tree_depth": 71, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(4.0)\\nloopBreak% = 0\\nwhile not i0 \\ge max(divInt(int(60.0),abs(mod(i1,i0))), int(44.0)):{:\\ni1 = divInt(mod(max(int(9.0), int(1.0)),int(3.0)),int(6.0))\\nif ( i2 \\le int(63.0) or in2 in in1 ):{:\\nloopBreak% = 0\\nwhile not False:{:\\nb1 = not not in2.startswith(getCharFromString(\"\"0\"\".rstrip(), len(saveChr(i2).lstrip())))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif in2[i2:mod(min(max(i2, i0), mod(saveOrd(in0),( i1 - i0 ))),i0)] in in0.capitalize()[abs(i0):]:{:\\nb1 = int(6.0) != int(0.0)\\n:}else:{:\\ni1 *= int(0.0)\\n:}\\ni2 *= min(divInt(max(divInt(i1,i0), min(i0, ( len(saveChr(int(1.0))[:i2]) + int(2.0) ))),i0), ( i0 - len(getCharFromString(in1.capitalize(), abs(mod(( i0 * int(4.0) ),mod(i2,int(6.0)))))) ))\\ni0 -= max(int(69.0), int(2.0))\\ni1 += i0\\nloopBreak% = 0\\nwhile getCharFromString(in1, int(5.0))[:int(19.0)].endswith((\"\"Z\"\" + (s1 + getCharFromString(s2, i0)).capitalize())):{:\\nb1 = min(int(3.0), i2) == ( int(7.0) + ( i0 + saveOrd(\"\"9\"\"[:i0]) ) )\\nloopBreak% = 0\\nfor in2 in \"\"_C\"\":{:\\nb0 = in2.startswith(\"\"1\"\"[i1:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = i0 != i1\\ns1 = in2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile True:{:\\ni2 -= divInt(divInt(( i2 - min(i2, divInt(int(15.0),int(5.0))) ),( saveOrd(s2) + i1 )),( int(84.0) + max(( int(9521.0) - saveOrd((in0[max(min(mod(i1,( divInt(min(mod(abs(max(( i1 - max(( ( i0 + int(7.0) ) + min(saveOrd(\"\"A\"\".rstrip(\"\"%\"\"[:( int(0.0) - mod(( int(2.0) + divInt(min(int(9.0), max(i2, int(7.0))),int(8.0)) ),int(9.0)) )].capitalize())), i2) ), i0) ), min(min(len(s1), saveOrd(s2[:int(7.0)].lstrip(s1[i0:]))), ( i2 + mod(mod(abs(int(7.0)),int(1.0)),divInt(saveOrd(s0[min(( i0 - mod(i0,i1) ), i2):]),int(3.0))) )))),len(\"\"%\"\"[int(5.0):int(1.0)])), ( int(2.0) - divInt(len(\"\"*\"\".rstrip().capitalize()[int(6.0):abs(i1)]),int(3.0)) )),int(9.0)) * int(9.0) )), len(\"\"g\"\".capitalize())), i2):int(2.0)] + \"\"W0\"\")) ), mod(min(i1, mod(( abs(mod(( int(2.0) - len(\"\"g\"\") ),i0)) + max(int(9.0), int(8.0)) ),mod(int(3.0),i0))),mod(divInt(i0,int(0.0)),int(5.0)))) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 9, 7, 7, 6, 0, 9], [1, 1, 1, 2, 1, 2, 1, 2], [1], [0, 3, 2, 1, 2, 3, 2, 3, 0, 3, 0, 0, 2, 3, 1, 3, 0, 0, 0], [1, 1, 1, 1], [1, 1, 2, 2, 0, 3], [1], [1, 0, 0, 1], [5, 5], [1, 0, 0, 1], [], [3, 4, 1, 3, 1, 4], [1, 1], [], [], [3, 0, 0, 2], [15, 15], [], [0], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 1, 19, 4, 6, 1, 4, 1, 4, 0, 6, 2, 0, 0, 4, 2, 0, 1, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i1\\nin2 = (saveChr(max(mod(int(1.0),divInt(max(divInt(abs(i1),abs(i2)), i1),mod(min(int(3977609.0), len(\"\"\"\")),i2))), i1)) + (\"\"PP0\"\" + saveChr(i2)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0, 2, 1], [0, 0], [1, 5], [3, 3, 1, 3], [1, 0, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 0, 2, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 1, 0, 0, 3, 3, 1, 0, 3, 0, 3, 3, 0, 3, 1, 1, 3, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 4, 1, 0, 0, 4, 1, 0, 4, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [5, 5, 4, 4, 3, 0, 4, 4], [1, 1, 1, 1], [0], [2, 3, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0, 4, 4, 3, 1, 0, 1], [0, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 0, 3], [17, 2], [17], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 8, 2, 2, 4, 3, 1, 0, 18, 18, 16, 0, 68, 17, 18, 8, 9, 8, 4, 0, 23, 4, 2, 4, 4, 2, 1, 0, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( ( len((in2 + in2[max(i0, int(0.0)):])[abs(mod(i2,int(7.0))):]) != mod(int(5.0),min(i2, ( divInt(( len(in1) + i0 ),divInt(min(( i1 + ( divInt(( int(7.0) * i2 ),divInt(max(int(4.0), i1),int(1.0))) - int(7.0) ) ), i2),i0)) + mod(int(7.0),abs(int(9.0))) ))) or True ) and in1[max(i0, ( ( ( int(8.0) * int(5.0) ) - divInt(int(0.0),i1) ) - int(4.0) )):divInt(saveOrd(in0[int(8.0):i0]),i0)] not in getCharFromString((\"\"R\"\" + saveChr(max(min(int(59.0), i2), min(i1, saveOrd(s0))))), max(i2, min(int(9.0), int(2.0)))) ):{:\\nres0 = ( \"\"r\"\".endswith(in1) or saveOrd((\"\"C\"\" + in1).lstrip().rstrip()) \\l len(\"\";\"\") )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 7, 5, 3, 6, 9, 7, 8, 4, 6, 0], [2, 1, 1, 0, 0, 2, 1, 1, 2], [], [1, 2, 3, 2, 1, 3, 3, 0, 3, 1, 2, 1, 1, 0, 3, 2, 2, 0, 2, 0, 2, 1, 2, 2, 3, 2, 1, 2, 3, 1, 2, 0, 0, 3, 3, 3, 2, 1, 3, 0, 0, 1, 3, 3, 3, 0, 1, 1], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [4, 4, 4, 1, 2, 3, 4, 0, 1, 4, 4, 2, 3, 2], [2, 2, 1, 1, 2, 2, 1, 2], [0, 1, 0, 1, 0], [4, 5, 3, 4, 1, 3, 2, 2, 4], [1, 1], [], [3, 4, 4, 4, 0, 2, 3, 0, 2, 0, 2, 1, 1, 2, 2, 4, 0, 4, 0, 4, 0, 0, 0], [0, 1, 3, 1, 0, 0], [5], [0, 1, 2, 0, 0], [1, 3], [], [6], [], [15]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 9, 0, 48, 13, 14, 8, 5, 9, 2, 0, 23, 6, 1, 5, 2, 0, 1, 0, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (getCharFromString(saveChr(int(0.0)), divInt(saveOrd(in2.strip((in0 + in1[:mod(int(7.0),saveOrd(\"\"g\"\"[saveOrd(\"\",\"\"):]))])[i2:max(int(7.0), divInt(int(5.0),int(3.0)))])),i1)) + saveChr(abs(mod(( i1 * ( i0 * ( int(6.0) - ( ( len(s1) - divInt(int(9.0),( saveOrd(getCharFromString(in0, int(7.0))) * ( i0 * i2 ) )) ) - min(max(saveOrd(getCharFromString(s2, ( int(8.0) * saveOrd(s2) ))), i1), i1) ) ) ) ),int(4.0))))[abs(len(in1)):abs(i2)][int(6.0):int(0.0)])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 1], [2, 2, 1, 1, 1], [1, 0], [0, 1, 1], [0], [], [], [], [1], [2, 3], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [6, 7, 8, 8, 7, 0, 7, 0, 7, 7, 0, 4, 9, 4, 5], [2, 0, 2, 1, 0, 2, 2, 0, 2, 1], [0, 0], [0, 1, 0, 2, 1, 3, 1, 1, 1, 3, 3, 0, 1, 2, 2, 2, 0, 3, 0, 1, 0, 2, 3, 2, 2, 1, 0, 2, 1, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 4, 4, 4], [1, 2, 1, 0, 1], [1, 0, 0], [3, 5, 0, 2], [0, 0, 0, 1], [0], [2, 4, 2, 4, 0, 3, 4, 1, 4, 0, 0], [2, 2, 1, 2], [], [0, 0], [2, 1, 3, 0], [21], [10], [9], [22]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 15, 15, 10, 2, 31, 8, 5, 5, 3, 4, 4, 1, 11, 4, 0, 2, 4, 1, 1, 1, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i2 == int(6.0):{:\\nloopBreak% = 0\\nfor in0 in in2.capitalize()[i0:( int(7.0) - max(int(8.0), int(8.0)) )].capitalize()[int(707077.0):max(saveOrd((saveChr(i2) + \"\"9k=V\"\")), int(0.0))]:{:\\nb1 = mod(( ( i1 * saveOrd(s0.capitalize()) ) - i0 ),int(4.0)) \\ge i2\\ni2 = divInt(saveOrd(s2),( ( int(9.0) + i0 ) - divInt(int(4.0),int(5.0)) ))\\ni2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [2, 0], [0], [0], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1], [3], [1], [], [1, 2, 3, 0], [1], [3], [], [1], [], [0, 0, 0, 1], [], [1], [], [], [], [0, 1, 3, 3], [6], [23], [], [2, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 0, 4, 0, 1, 0, 0, 0, 4, 1, 1, 0, 2], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(3.0) \\ge mod(len(\"\"Gx\\\\\\t/\"\"),i1)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 1, 0, 0], [], [0, 2, 0], [], [0], [], [], [0, 0], [1, 4], [0, 1, 1], [0, 0], [], [2], [], [], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [8, 6, 5, 5, 9, 1, 7, 1, 4, 2, 7, 7, 2, 7], [1, 1, 0, 1, 0], [], [1, 2, 0, 3, 1, 2, 1, 1, 2, 3, 0, 2, 1, 2, 0, 2, 1, 3, 1, 1, 3, 1, 3, 3, 0, 2, 0, 1], [0, 0, 0, 1, 0, 0, 1], [4, 2, 4, 2, 4, 2], [2, 2, 0, 0, 0], [1, 0], [1, 3], [1], [], [4, 2, 2, 0, 2, 4, 4, 1], [0, 1, 1], [], [1, 0, 2], [3], [], [], [], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 2, 2, 3, 2, 0, 1, 0, 0, 0, 14, 14, 5, 0, 28, 7, 6, 5, 2, 2, 1, 0, 8, 3, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not int(865.0) \\g ( i1 * saveOrd(getCharFromString(s1[int(5.0):( int(9.0) * int(1.0) )][:( abs(i1) + mod(int(7.0),( i0 + ( int(1.0) + saveOrd(saveChr(int(4.0))[int(2.0):]) ) )) )], abs(int(772.0)))) )\\nin0 = saveChr(saveOrd(\"\"]\"\"))\\nb0 = abs(i1) \\le divInt(i0,int(7.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [1, 2, 1, 2, 2, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1], [2, 1, 0, 0, 1, 0, 0, 2, 0], [0, 0], [0, 0, 0, 0, 0], [], [], [1, 2, 2, 1, 3, 1], [3, 2, 3, 0], [1, 0, 1, 1, 2, 0, 0, 0, 2, 1, 0], [0, 0, 0, 0], [4, 0], [0, 3, 2, 3, 1], [1, 0], [1], [1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 5, 5, 4, 4, 1, 0, 4, 8, 6, 6, 7, 2, 7, 8, 0, 3, 8, 0, 6, 9, 8, 2, 8, 5, 0, 0, 5], [0, 2, 2, 0, 1, 1, 1, 0, 1, 2, 2, 1, 0, 2, 1, 1, 1, 0, 0, 2, 1, 2, 0, 2, 2, 0, 0, 2, 1, 2, 2, 0, 0], [1, 0], [1, 2, 2, 0, 3, 0, 1, 0, 0, 3, 2, 2, 1, 1, 3, 2, 3, 0, 2, 2, 2, 2, 3, 1, 0, 0, 0, 2, 0, 3, 1, 3, 2, 3, 0, 0, 1, 2, 1, 3, 2, 1, 2, 1, 1, 3, 1, 0, 3, 2, 2, 0, 0, 1, 3, 1, 2, 1, 1, 1, 3, 0, 2, 2, 2, 0, 3, 0, 0, 0, 0, 2, 1, 0, 3, 2, 2, 0, 3, 3, 3, 2, 0, 2, 3, 0, 1, 3, 2, 1, 1, 2, 1, 2, 3, 3, 1, 0, 0, 2, 1, 1, 2, 0, 2, 0, 2, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 4, 2, 4, 0, 0, 0, 0, 3, 0, 1, 3, 1, 1, 1, 3, 0, 3, 3, 3, 4, 3], [0, 0, 2, 0, 0, 2, 2, 0, 2, 1, 0, 0, 0, 2, 2, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1], [2, 4, 0, 4, 2, 0, 2, 1, 3, 1, 3, 3, 1], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0], [0, 1, 4, 0, 1, 0, 1, 4, 0, 1, 2, 4, 4, 0, 1, 4, 3, 2, 0, 1, 4, 2, 3, 1, 4, 4, 1, 4, 4, 0, 2, 4, 1, 2, 0, 1, 4, 1, 2, 3, 0, 1, 2, 3, 1, 1], [2, 3, 0, 3, 3, 3, 0, 2, 1, 1, 3, 2], [1, 3, 1, 5, 5], [2, 0, 1, 0, 1, 0, 1], [2, 0, 2, 3, 3, 2, 1, 1, 1, 0, 0, 3, 3, 2, 3, 1, 0, 0, 2, 3, 3, 3, 3, 3, 2, 3, 3], [6, 5, 20, 10, 11], [6, 21, 21, 22], [3, 5, 9, 2, 3, 7], [31, 19, 20, 18, 0, 1, 9, 0, 4, 21, 7, 2]], "fitness": 9223372036854775807, "mapping_values": [1, 12, 12, 3, 9, 2, 5, 0, 0, 6, 4, 11, 4, 2, 5, 2, 1, 1, 29, 29, 33, 2, 111, 32, 22, 16, 17, 13, 27, 2, 46, 12, 5, 7, 27, 5, 4, 6, 12], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\nloopBreak% = 0\\nfor s0 in \"\"3G5\"\":{:\\ni0 += int(145.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in s2.capitalize():{:\\nif mod(mod(i2,max(i2, int(5.0))),i0) \\ge i1:{:\\nb1 = b2\\nb2 = saveOrd(\"\"`\"\") == ( mod(int(4.0),int(4.0)) + abs(mod(saveOrd(s0),i1)) )\\ni1 = divInt(( mod(mod(min(int(1.0), i0),i1),i2) * mod(i2,min(int(0.0), min(( min(i1, i0) + int(4.0) ), ( int(8.0) + len(\"\":\"\") )))) ),mod(int(6.0),divInt(int(6.0),int(7.0))))\\n:}else:{:\\nb1 = min(int(2.0), i2) \\ge max(( ( i1 * i1 ) * int(7.0) ), len(s2.rstrip()))\\n:}\\nres0 = \"\"9g\"\".startswith(getCharFromString(s1.lstrip(\"\"v\"\"), int(8.0))[divInt(int(0.0),int(3.0)):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = (s1[int(80.0):max(i1, ( mod(( i0 + max(i0, i2) ),i1) * i2 ))] + \"\"vFU;/2\"\").rstrip()\\nb1 = ( not ( (\"\"\"\" + getCharFromString(\"\"w\"\".capitalize(), ( int(6.0) - i0 )))[:max(( divInt(i2,len(saveChr(min(len(saveChr(mod(i2,mod(len(in0),i0)))), int(9.0))))) + len(\"\"K\"\".strip(in0[:( int(8.0) + int(2.0) )])[( int(8.0) + ( saveOrd(\"\"L\"\") * len(\"\"3\"\".capitalize()) ) ):int(5.0)]) ), i0)].strip((s1 + \"\"\\\\\\n&\"\")[i2:( int(0.0) * int(0.0) )]) in (\"\"\"\" + \"\"!<7$\\\\\\t\"\")[:divInt(i1,mod(i2,( int(5.0) + i2 )))] or i0 \\l i0 ) and False )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1], [1, 1, 0, 1, 1], [], [1, 0, 1, 2, 0], [], [0], [], [], [3, 1, 3], [1], [0, 2, 1, 0], [0], [1], [3, 0], [0], [], [], [0, 1, 0, 1, 1, 1, 1, 0, 1], [4, 4, 3, 5, 9, 2, 1, 9, 9], [0, 1, 2, 1, 1, 2, 0, 2, 2, 2, 2, 0, 0, 2], [1, 0], [2, 3, 0, 0, 0, 3, 3, 3, 3, 0, 1, 2, 0, 2, 1, 1, 1, 0, 3, 1, 0, 2, 1, 3, 0, 0, 0, 0, 0], [0, 0, 1, 0], [0, 2, 3, 2, 4, 0, 1], [1, 0, 0, 2], [1], [5, 5, 4, 0, 0, 2, 0, 1, 4], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1], [], [4, 0, 0, 3, 2, 1, 0, 0, 3, 2, 3, 3, 3, 1, 1, 3, 4, 3, 0, 4, 4, 1, 4, 2, 1, 3, 1, 4, 3, 0, 4, 0, 2, 0], [0, 3, 1, 2, 0, 2, 0], [5], [1, 0, 1, 2], [2, 2, 3, 0, 1, 2, 1, 2, 1, 1, 0, 2, 3, 0, 1, 0, 1, 2], [15, 19, 16, 17], [4, 4, 6, 13, 24, 1], [5, 7, 3, 3, 0, 3], [4, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 0, 5, 0, 1, 0, 0, 3, 1, 4, 1, 1, 2, 1, 0, 0, 9, 9, 14, 2, 29, 4, 7, 4, 1, 9, 18, 0, 34, 7, 1, 4, 18, 4, 6, 6, 2], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( min(i1, i2) + i1 )\\nres0 = ( getCharFromString(in2, abs(len(in2))) not in (\"\"57\"\"[:abs(saveOrd(in1))] + s0) and i1 \\g int(44.0) )\\ni2 = ( i0 + mod(int(35.0),int(9.0)) )\\ns0 = ((((\"\"!Pe3e\"\" + \"\"3\"\") + ((s2 + saveChr(int(2.0))).strip(\"\"gnT\"\".capitalize()) + getCharFromString(\"\"0-Q\"\"[:i2], min(int(1.0), i2)))) + (\"\"yRb3\"\" + (s0 + getCharFromString(s1, ( int(99.0) * max(i2, i2) ))).capitalize()))[i0:i0] + in1[i2:])\\nb1 = res0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 0], [0], [0], [0], [0], [], [], [1], [2], [2], [], [5], [], [], [], [], [1], [], [2, 0, 2, 1, 0], [], [0], [], [], [], [], [4, 1, 0], [1, 1], [0], [3, 0, 0, 3, 1, 2, 1], [2], [], [1], [2, 0], [14], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 7, 0, 0, 1, 2, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = (in1 + s1).endswith((\"\"1\"\" + \"\"O\"\"[:i2]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [1], [], [0], [], [], [], [2], [0, 1, 0, 2], [0], [5], [3, 2], [0], [], [], [1], [6], [0, 1, 0, 0], [1], [0, 0, 0, 1], [1], [], [1], [1], [2], [0, 0, 1], [], [1, 2, 0], [], [], [2], [0, 3, 1], [2], [22], [], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 4, 1, 1, 2, 1, 0, 0, 1, 1, 4, 1, 4, 0, 0, 1, 0, 1, 3, 0, 3, 0, 0, 1, 3, 1, 1, 0, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( i0 == i1 and not \"\"C.w\"\".endswith(s2[i0:]) ):{:\\ni0 -= int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [], [], [1], [], [], [], [], [2], [1, 1], [], [4, 1, 1], [3, 1], [4], [], [0, 1], [5], [9], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 3, 1, 1, 0, 2, 1, 1, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"F\"\".rstrip(\"\"j\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [2, 0, 1, 0], [0], [2, 1, 2], [0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0, 1, 1], [4, 9, 5, 4, 3, 4], [1, 0], [1], [3, 2, 3, 1, 3, 0, 2, 2, 1, 2, 3, 3, 1, 1], [0, 0, 1, 1], [2, 2, 2, 2, 3], [1, 0, 1], [0, 1], [0, 4, 0, 1, 4, 1], [1], [0], [4, 4, 0, 0, 2, 1, 0], [3, 2], [1], [2], [0], [0], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 2, 1, 14, 4, 5, 3, 2, 6, 1, 1, 7, 2, 1, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1.capitalize().rstrip():{:\\ns0 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= abs(( abs(int(4.0)) + abs(i0) ))\\nin1 = \"\"A\"\"[( divInt(int(95.0),mod(abs(len(s1)),int(43.0))) - int(4.0) ):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [2], [], [4], [], [1], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [6, 7, 4, 8, 2, 4, 4, 3, 7, 1, 2, 9, 3, 0], [2, 1, 2, 1, 2, 2, 0, 1, 1, 2, 0, 1, 2, 1, 0, 1], [0], [1, 0, 0, 2, 3, 0, 0, 2, 0, 1, 2, 2, 0, 3, 0, 1, 1, 1, 3, 2, 0, 1, 2, 0, 2, 0, 2, 3, 2, 1, 1, 3, 2, 0, 1, 0, 1, 2, 0, 2, 2, 0, 3, 0, 1, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [4, 3, 4, 2, 2, 0], [1, 2, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1], [4, 0, 4, 1, 5, 5, 3, 2, 5, 4], [1, 1, 0, 1, 0, 1], [], [3, 0, 4, 3, 2, 0, 3, 3, 1, 4, 2, 2, 4, 0, 2, 1, 4, 0, 2, 3, 3, 4, 4, 0, 2, 0, 3, 2, 0, 4, 3, 3, 1, 1, 3, 0, 0, 4, 0], [3, 3, 3, 0, 1, 1, 3, 0], [0, 3, 0, 2], [0, 0, 1, 0, 0, 1, 0], [1, 3, 0, 3, 1, 0], [2, 2], [12, 21], [], [26, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 16, 0, 46, 13, 6, 5, 8, 10, 6, 0, 39, 8, 4, 7, 6, 2, 2, 0, 2], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = (in1 + (s0[int(67.0):i2] + ((\"\"m\"\" + in1.lstrip()[:i1][( saveOrd(\"\"[\"\"[i2:i1]) - mod(i2,int(4.0)) ):divInt(divInt(i2,len(getCharFromString(s1, i0))),int(8.0))].lstrip(((saveChr(int(2.0)) + saveChr(int(4.0))) + in2)[saveOrd(in2[:( i1 * int(4.0) )]):divInt(i1,divInt(i2,( abs(divInt(int(3.0),int(7.0))) - abs(( i0 + int(1.0) )) )))])) + (in0[i1:int(29.0)] + ((\"\"C?\"\" + \"\"vC\"\") + (s2 + in2)).strip()))).lstrip()).startswith(getCharFromString(in1, divInt(i2,( mod(i1,min(i0, int(30.0))) + i1 ))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0], [1], [1, 1], [], [0, 0], [], [], [], [1], [1], [0], [], [], [], [], [1], [1, 1, 1], [5, 9, 2], [2, 1, 2, 2, 2, 1], [1, 1], [1, 3, 3, 0, 1, 2, 1, 0, 2, 3, 0, 0], [0, 1], [3, 1, 4], [1, 1, 1], [1], [], [0, 0, 1, 1], [], [4, 3, 2, 1, 1], [1], [], [1], [0, 1, 0, 2], [8, 24], [8], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 3, 3, 6, 2, 12, 2, 3, 3, 1, 0, 4, 0, 5, 1, 0, 1, 4, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(5.0) \\g len(saveChr(max(i2, int(9.0)))):{:\\ni1 -= ( int(2.0) - i2 )\\n:}else:{:\\ni2 -= mod(saveOrd((\"\"IiY\"\"[:i2] + \"\"1\"\")),i1)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [5, 7], [0, 2], [1], [2, 3, 0], [0], [3], [0, 1], [], [], [1], [], [1], [], [], [], [3], [], [], [], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 1, 1, 2, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( len(\"\">\"\") - i2 )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1], [1, 2, 0, 2, 2, 0, 0, 2, 2, 0, 2, 1, 2, 0, 0, 2, 1, 1, 0], [0, 2, 1, 1, 0, 2, 0, 2], [2, 2, 0, 0, 2, 2, 0, 0, 0, 1, 0], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [0, 2, 3, 0, 2, 3, 3], [5, 3, 1, 2, 4, 2, 2], [1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 0], [0, 0, 0, 0, 0, 0, 0], [4, 4, 1], [0], [], [], [0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [9, 9, 8, 6, 2, 1, 6, 9, 1, 0, 0, 4, 9, 6, 8, 4, 5, 0, 6, 1, 5, 5, 5, 3, 2, 1, 8, 2, 0, 9, 6, 1, 7, 9], [0, 0, 1, 0, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1, 2, 2, 1, 1, 2, 2, 1, 0, 0, 2, 1, 1, 2, 2, 2], [0], [1, 1, 3, 3, 0, 0, 0, 2, 3, 2, 1, 2, 1, 1, 0, 1, 0, 0, 2, 3, 2, 2, 1, 0, 3, 1, 3, 3, 1, 0, 3, 2, 1, 3, 2, 2, 0, 2, 0, 0, 2, 1, 1, 3, 0, 1, 2, 2, 0, 1, 0, 2, 2, 3, 0, 1, 2, 0, 2, 1, 1, 3, 2, 0, 2, 2, 3, 0, 0, 0, 3, 3, 0, 1, 0, 1, 2, 3, 3, 2, 0, 3, 3, 3, 0, 2, 2, 3, 3, 3, 3, 0, 1, 3, 2, 1, 0, 2, 2, 1, 1, 2, 1, 3, 1, 0, 3, 2, 2, 0, 0, 1, 0, 0, 1, 3, 0, 0, 0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 2, 3, 2, 2, 0, 4, 0, 2, 2, 3, 3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 3, 2, 2, 1, 1], [2, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 2, 0, 2, 2, 1, 2], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], [5, 2, 3, 0, 1, 5, 3, 5, 3, 5, 5, 2, 5, 2, 5, 4, 3, 3, 0, 5, 0, 4, 1], [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0], [3, 1, 3, 1, 1, 1, 0, 0, 3, 4, 0, 0, 4, 0, 1, 3, 2, 0, 4, 0, 2, 0, 2, 4, 2, 2, 1, 1, 0, 2, 0, 2, 1, 0, 0, 0, 0, 3, 0, 1, 1, 2, 4, 3, 2, 2, 3, 1, 1, 4, 0], [0, 3, 3, 3, 2, 3], [5, 5, 5, 0], [2, 0, 2, 0, 0, 0, 0, 1, 1, 2], [2, 2, 1, 3, 3, 0, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0], [0, 12, 2], [9, 24, 18, 0, 25], [3, 5, 1, 4], [28, 9, 22, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 19, 19, 8, 11, 3, 7, 0, 0, 7, 7, 11, 7, 3, 1, 0, 0, 2, 34, 34, 37, 1, 124, 30, 28, 17, 13, 23, 16, 3, 51, 6, 4, 10, 16, 3, 5, 4, 4], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (\"\"3\"\" + (\"\"5\"\" + \"\"j]&\"\"))\\nloopBreak% = 0\\nfor s2 in \"\"A1=\"\":{:\\nin0 = s0\\nloopBreak% = 0\\nwhile int(998.0) != int(62.0):{:\\nif s1.startswith((getCharFromString(in2, min(abs(i0), i0)) + in0)):{:\\nb0 = i1 \\ge ( abs(mod(int(1.0),( int(6.0) * int(9.0) ))) * i0 )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = int(1.0) \\g i0\\nif i2 == ( len(in2.strip(\"\"y\"\")) - ( mod(int(0.0),i1) - abs(int(0.0)) ) ):{:\\nloopBreak% = 0\\nfor in0 in (in2[abs(min(int(4.0), i0)):] + in2.strip(s2[saveOrd(\"\"_\"\"[( int(9.0) - min(mod(( i2 + mod(i1,i2) ),( int(6.0) - int(8.0) )), abs(i1)) ):int(4.0)][mod(divInt(i2,int(5.0)),i1):( ( abs(i1) - int(0.0) ) - divInt(i0,divInt(int(6.0),int(1.0))) )].strip(\"\"s\"\")[len(in2):]):( i1 + ( ( len(s2[i0:i1]) + i0 ) * max(max(i1, int(5.0)), i1) ) )])):{:\\nin2 = \"\"a\"\"[int(5.0):( max(max(mod(i2,abs(abs(abs(i2)))), ( mod(abs(abs(max(len(in1), i1))),int(5.0)) + abs(( int(3.0) * i1 )) )), ( mod(int(2.0),int(1.0)) * mod(int(8.0),abs(int(2.0))) )) - i2 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile max(( divInt(i2,i1) * int(0.0) ), i0) \\le i0:{:\\nin0 = in0\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = int(9.0) == max(i2, i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb0 = s0.startswith((in1 + \"\"z\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i1 == i2:{:\\nb2 = \"\"4\"\" not in ((\"\"M\"\" + \"\"C\"\")[int(6.0):][:int(17.0)] + s1.lstrip()).capitalize()[:i2]\\ni2 = int(9.0)\\nres0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [2], [], [5], [], [], [], [], [1], [2], [0], [0], [1], [], [], [], [], [2, 5], [1], [], [0, 3, 0, 1], [], [], [], [3], [], [], [], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s2.endswith((in2 + \"\"]\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [0], [1, 2], [0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [2, 7, 9], [0, 1, 1, 2, 2, 2, 0], [0], [1, 0, 2, 1, 2, 0, 2, 0, 1, 3, 3, 0, 3, 3, 3, 2, 0, 2, 3, 0, 3], [0, 0, 1, 1, 1], [0, 4, 3, 4, 0, 3, 4], [1, 2], [0, 0, 0], [4, 3, 0, 4, 1, 1, 4, 5, 4], [1, 1], [0], [4, 2, 0, 4, 0, 4, 1, 3, 3, 0, 4, 3, 4, 0, 0, 1, 0, 0], [0, 2, 0, 1, 0], [], [0], [3, 0], [18], [], [], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 7, 1, 21, 5, 7, 2, 3, 9, 2, 1, 18, 5, 0, 1, 2, 1, 0, 0, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in getCharFromString(in0[int(2.0):i0], ( int(7.0) - ( i1 * divInt(i1,int(9.0)) ) )):{:\\ni2 = min(saveOrd(s0.capitalize()), i2)\\nin1 = getCharFromString(\"\"\\\\\\t\"\", len(((s1 + saveChr(saveOrd((getCharFromString(s1, min(divInt(i2,divInt(len(in1),i0)), saveOrd(\"\"S\"\"))) + in2)))) + in1)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1, 5], [0, 1], [], [1], [], [4], [], [1, 3], [], [12], [], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"m\\\\\\t\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 1, 1], [2, 2, 2, 0, 1, 2, 2, 1, 0], [1, 2, 2, 2, 2], [1, 2, 1, 0, 1], [], [0, 0, 0], [], [], [3], [5, 5, 5, 2], [2, 1, 0, 2, 1, 1, 1], [0, 0, 0, 0], [4, 3, 3], [2], [], [], [1, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 1, 4, 7, 0, 3, 6, 4, 9], [1, 1, 2, 0, 2, 2, 1, 2, 1, 2, 1, 0, 1], [1, 1, 0], [1, 1, 2, 2, 0, 2, 0, 3, 2, 2, 1, 3, 3, 1, 0, 0, 0, 3, 3, 2, 2, 3, 1, 0, 2, 2, 0, 0, 0, 0, 1, 3, 2, 1, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0], [4, 3, 0, 4, 2, 4, 2], [2, 0, 1, 2, 0, 0], [1, 1, 1, 1, 1, 1], [0, 2, 2, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [], [0, 2, 0, 0, 1, 4, 1, 1, 1, 1, 1, 2, 0, 1, 1], [3], [0], [2, 0], [3, 1, 0, 0, 2, 3, 3, 0], [7, 2, 8], [0], [4], [25, 14, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 5, 4, 0, 2, 0, 0, 1, 4, 7, 4, 2, 1, 0, 0, 1, 9, 9, 13, 2, 35, 10, 7, 6, 6, 4, 6, 0, 11, 1, 1, 1, 6, 2, 1, 1, 2], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0.startswith(s2[int(0.0):]):{:\\nloopBreak% = 0\\nwhile int(1.0) != mod(mod(i1,mod(i1,saveOrd(s2))),mod(( int(4.0) * len(\"\"@\"\") ),min(int(7.0), i2))):{:\\nloopBreak% = 0\\nwhile not \"\"a\"\".lstrip() != \"\"H\"\":{:\\ni0 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = \"\"C\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile i2 != saveOrd(\"\"4\"\"):{:\\nloopBreak% = 0\\nwhile abs(( mod(saveOrd(\"\"+\"\"),int(0.0)) - i1 )) != mod(( i2 * i1 ),i2):{:\\ni1 += i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nres0 = int(3.0) == abs(( int(649.0) + i1 ))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 1, 2, 2, 2, 2, 1, 0, 0, 0, 0], [0, 2, 0, 2, 1, 1], [0, 0, 1, 0, 0, 1], [0, 0], [0, 0, 0, 0], [], [], [2, 0, 0, 0, 1], [2, 2, 3, 3, 2], [0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0], [], [0, 1, 1], [], [0, 0], [1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [4, 4, 7, 6, 1, 0, 4, 5, 0, 7, 4, 2, 5, 8, 2], [1, 2, 2, 0, 1, 1, 0, 2, 1, 0, 0, 1], [0, 0], [0, 1, 1, 3, 1, 2, 3, 2, 0, 1, 0, 1, 0, 1, 0, 2, 3, 3, 1, 0, 0, 1, 2, 2, 3, 1, 1, 3, 1, 0, 2, 2, 2, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1], [3, 1, 4, 1, 4, 3], [0, 0, 1, 2, 0], [0, 1, 0], [2, 1, 4, 4], [0, 1, 1, 1, 1, 1], [0, 0], [1, 3, 4, 2, 4, 0, 3, 4, 4, 2, 0, 1, 1, 1, 1, 4], [0, 0, 2, 3, 1], [1], [1, 1], [3, 2, 2, 2, 1, 0], [6], [11], [0, 7, 4], [30]], "fitness": 9223372036854775807, "mapping_values": [1, 12, 12, 6, 6, 2, 4, 0, 0, 5, 5, 8, 5, 0, 3, 0, 2, 2, 15, 15, 12, 2, 37, 8, 6, 5, 3, 4, 6, 2, 16, 5, 1, 2, 6, 1, 1, 3, 1], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in \"\"_0\"\":{:\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = True\\nloopBreak% = 0\\nfor s1 in (getCharFromString(getCharFromString(in1, i1)[:int(4.0)], int(47.0)) + (in1[:len(\"\"7\"\")].rstrip().capitalize() + \"\"4\"\")):{:\\nloopBreak% = 0\\nwhile int(6.0) == ( max(divInt(i2,int(1.0)), i2) + int(0.0) ):{:\\nif i0 == int(4.0):{:\\nif True:{:\\nb0 = i1 \\ge ( saveOrd(\"\"l\"\") + max(int(5.0), i1) )\\n:}else:{:\\ni0 = i2\\n:}\\n:}else:{:\\nb0 = int(0.0) \\ge ( ( saveOrd(\"\"G\"\") - int(7.0) ) * int(4.0) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = len(saveChr(int(2.0))) == i1\\ni0 = ( mod(divInt(i0,int(5.0)),int(82.0)) + i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0, 3], [], [0], [0, 0], [], [3], [], [], [], [], [], [2, 0], [1], [3, 0], [], [3], [0], [], [], [1], [], [2, 1, 0], [], [], [1], [1], [], [2], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 1, 0, 2, 0, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += len(\"\"c\"\"[:i0])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [5], [0, 0, 1, 2], [0], [2], [2, 3], [1], [], [], [1, 1, 1, 1, 1, 0, 1, 0, 1], [4, 2, 5, 7, 4, 3, 8, 2, 3], [2, 0, 0, 2, 2, 1, 2, 1], [], [2, 2, 0, 1, 2, 0, 2, 3, 3, 2, 1, 1, 0, 3, 3, 0, 2, 1, 3, 0, 1, 0, 0, 1, 1, 0], [0, 1, 1, 1, 1, 0], [3, 0, 3, 0, 2], [1, 1], [0, 0, 1, 1], [5, 3, 1, 5, 5], [1, 1, 1, 0, 1], [], [4, 3, 0, 4, 3, 1, 2, 0, 1, 4, 3, 3, 1, 2, 0, 4, 4, 3, 2, 4, 0, 0], [1, 2, 0, 0, 0, 2], [0], [1, 1, 1], [3, 3, 2, 0, 3], [20], [19], [6], [2, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 4, 1, 1, 2, 1, 0, 0, 9, 9, 8, 0, 26, 6, 5, 2, 4, 5, 3, 0, 22, 6, 0, 3, 3, 0, 0, 1, 2], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not ( ( divInt(i2,int(4.0)) - divInt(i0,mod(len(saveChr(min(mod(int(2.0),int(5.0)), i0))),len((in2 + (\"\"\\\\\\t\"\" + in0[:min(i2, ( int(7.0) - abs(i2) ))]).capitalize())))) ) != int(4.0) or \"\"@\"\" == getCharFromString(((\"\"6\"\" + s1[:i1]) + getCharFromString(getCharFromString((in2.capitalize()[:i2] + in2), int(38.0)), int(23.0))), i1) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [1, 0], [1], [3, 2, 3, 1, 3, 0, 3], [0], [1, 2, 2, 4], [1, 0], [], [5, 4, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1], [0], [4, 4, 0, 0, 3, 1, 1], [3, 2], [1], [], [3, 1, 2, 1, 0, 2, 1, 3], [24], [22, 11, 17], [6, 5], [17, 19]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 7, 1, 4, 2, 0, 4, 8, 1, 7, 2, 1, 0, 8, 1, 3, 2, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in1.capitalize().rstrip():{:\\ns0 = s1\\ni1 -= max(( abs(int(4.0)) + abs(i0) ), saveOrd((\"\".w6lY5\"\" + \"\"r:\"\")))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [2], [], [4], [3], [], [0], [], [1, 1], [7, 6], [], [], [3, 3, 3, 1, 1], [], [4, 0, 2], [], [], [2], [0, 0, 1, 0, 1, 1], [], [2, 3, 1, 0, 2, 1, 4, 1], [2], [], [2, 1], [2, 2, 3, 3, 2, 2], [], [], [0, 0, 9, 5], [18, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 5, 0, 3, 0, 0, 1, 6, 0, 8, 1, 0, 2, 6, 0, 0, 4, 2], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = (\"\"00/\"\" + s2)[saveOrd(\"\"]9\"\"[:min(abs(int(7.0)), int(6.0))]):].startswith(\"\"5\"\".capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1], [1, 0, 2, 1, 1], [1], [0, 2, 0, 0], [], [0], [], [], [0, 3, 2, 3], [3], [0, 2, 2, 0, 1], [0], [4, 2], [0, 2], [], [], [1], [0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [3, 8, 0, 0, 2, 3, 4, 5, 2, 9, 8, 7, 4, 0, 9, 9, 9, 5, 0, 3, 7, 4, 3, 0, 2, 3, 6, 3, 8, 2, 3, 3], [1, 1, 0, 0, 1, 1, 0, 0, 2, 1, 1, 0, 1, 0, 0, 1, 0, 0], [], [3, 0, 1, 0, 1, 2, 0, 2, 1, 1, 2, 1, 1, 3, 2, 1, 2, 3, 2, 3, 2, 3, 0, 0, 1, 2, 3, 3, 0, 1, 2, 0, 0, 2, 0, 3, 2, 3, 1, 3, 0, 2, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 1, 1, 0, 2, 3, 3, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0], [1, 3, 1, 2, 1, 4, 3, 3, 2, 3, 4, 0, 3], [1, 1, 1, 1, 0, 2, 1], [1, 1, 1, 0, 1, 1, 0, 0], [0, 2, 4, 4, 5, 2, 4, 1], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [], [4, 3, 3, 1, 2, 4, 3, 3, 0, 1, 3, 0, 2, 1, 0, 3, 4, 4, 4, 4, 2, 4, 4, 1, 4, 2, 1, 0, 1, 4, 2, 1, 2, 4, 4, 0, 3, 4, 2, 0, 4, 4, 2, 0, 4, 3, 1, 3, 1, 2, 4, 1], [1, 2, 1, 2, 0, 0, 3, 2, 3, 1, 1, 0, 3, 1, 0, 1, 0], [5, 4, 0], [0, 2, 0, 0, 1, 1, 2, 2, 2], [3, 2, 0, 0, 1, 2, 3, 3, 2, 0, 1, 1, 3, 2, 3, 1, 1], [10, 24, 16], [18, 6, 11, 0, 2], [0, 7, 8, 1], [1, 8, 7, 17, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 1, 0, 0, 4, 1, 5, 1, 2, 2, 0, 0, 1, 32, 32, 18, 0, 65, 15, 13, 7, 8, 8, 17, 0, 52, 17, 3, 9, 17, 3, 5, 4, 5], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\ns0 = saveChr(max(i1, int(38.0)))\\nif ((\"\"\\\\\\n0\"\" + ((s2 + \"\"KYs\"\") + (in1 + \"\"7%\"\"[i1:])).capitalize()[int(0.0):( i0 - mod(int(02.0),int(3.0)) )]) + in1).startswith((saveChr(( int(45.0) - int(298740999.0) )) + getCharFromString(getCharFromString(\"\"$\"\".capitalize().strip(\"\"8\"\"[len(in2):mod(int(5.0),mod(max(divInt(abs(mod(max(i0, i1),int(0.0))),mod(saveOrd(\"\"Q\"\"),len(saveChr(i1)))), int(3.0)),divInt(i0,i0)))].rstrip(\"\"g\"\"[:( i2 - len(saveChr(( abs(int(7.0)) - len(getCharFromString(s2, i1)) ))[:( int(4.0) + i1 )]) )]))[i0:i1], i0), i0).capitalize())):{:\\nb2 = (in1[divInt(( saveOrd(saveChr(int(3.0))) * int(0.0) ),int(2.0)):].lstrip() + getCharFromString(s1[i1:], ( min(len(saveChr(int(3.0))), int(6.0)) - int(382.0) ))) == (\"\"l\"\" + (\"\".\"\" + getCharFromString(\"\"1,ac\"\", i0)[int(3.0):]))\\n:}else:{:\\nres0 = not int(3.0) \\ge i0\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1], [2, 2, 2, 0, 0, 0, 1], [2, 2, 1], [1, 0, 1, 2], [], [0, 0, 0], [], [], [1], [0, 0], [1, 0, 1, 2, 2], [0, 0], [4, 3], [2], [], [], [0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1], [4, 1, 7, 6, 8, 8, 4, 4, 6, 9, 7, 2, 7, 3, 4, 4, 7, 5, 4, 0, 0, 4, 8, 2, 3, 7, 5, 3, 3, 1, 6, 5, 7, 2, 2, 2, 6, 3, 1, 9, 9, 5, 0, 9, 7, 3, 3, 3, 9, 9, 9, 4, 6, 9, 5, 2, 0, 1, 0, 3, 4, 9, 9, 9, 9, 0, 4, 5, 5, 6], [0, 1, 2, 0, 0, 0, 1, 0, 1, 0, 0, 2, 2, 0, 2, 2, 0, 1, 0, 1, 0, 0, 0, 1, 2, 1, 2, 0, 0, 1, 1, 2, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1, 0, 0, 1, 2, 2, 0, 1, 2, 0], [1, 0], [3, 0, 1, 1, 0, 1, 0, 2, 0, 1, 0, 0, 3, 3, 1, 3, 1, 2, 1, 3, 0, 0, 3, 2, 3, 2, 2, 2, 2, 3, 2, 3, 1, 3, 3, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 3, 0, 3, 2, 2, 1, 3, 1, 0, 3, 1, 0, 3, 3, 0, 2, 0, 1, 1, 0, 1, 3, 3, 1, 1, 2, 1, 2, 2, 1, 2, 0, 3, 1, 3, 3, 1, 0, 3, 3, 3, 2, 3, 0, 2, 3, 0, 1, 3, 0, 1, 1, 3, 3, 2, 3, 2, 3, 0, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 1, 2, 0, 3, 3, 1, 0, 3, 0, 2, 3, 3, 0, 3, 1, 1, 3, 2, 3, 2, 3, 3, 2, 1, 2, 2, 2, 1, 1, 2, 3, 2, 0, 2, 1, 3, 3, 3, 2, 0, 2, 1, 3, 3, 1, 1, 0, 3, 2, 0, 2, 2, 2, 1, 1, 3, 1, 1, 1, 0, 0, 1, 2, 2, 0, 2, 0, 1, 3, 1, 1, 1, 3, 3, 0, 3, 2, 1, 2, 3, 0, 1, 1, 1, 1, 1, 2, 0, 2, 2, 1, 2, 0, 1, 1, 3, 3, 2, 2, 0, 0, 2, 0, 3, 1, 0, 0, 2, 0, 2, 3, 3, 1, 2, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [2, 1, 3, 1, 3, 1, 0, 3, 2, 3, 0, 2, 3, 1, 0, 1, 2, 3, 4, 1, 3, 4, 4, 1, 4, 1, 1, 2, 0, 3, 1, 4, 1, 1, 4, 4, 2, 2, 1, 1, 4, 2, 1, 0, 0, 1, 1, 4, 2, 0, 3, 2, 4, 3, 3, 2, 3, 4, 1, 0, 3, 3], [2, 2, 1, 1, 2, 2, 0, 0, 0, 2, 0, 1, 2, 2, 1, 0, 2, 1, 2, 2, 1, 2, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 2], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 3, 3, 4, 0, 1, 4, 2, 0, 2, 5, 0, 2, 1, 4, 5, 4, 3, 0, 4, 3, 5, 0, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [], [2, 0, 0, 2, 2, 0, 2, 2, 0, 2, 1, 2, 3, 4, 3, 2, 2, 0, 1, 1, 2, 0, 1, 0, 0, 0, 2, 2, 2, 1, 4, 0, 0, 4, 4, 4, 2, 1, 2, 2, 0, 2, 1, 1, 2, 0, 1, 2, 4, 4, 4, 2, 4, 4, 1, 0, 4, 0, 1, 0, 4, 3, 3, 0, 3, 3, 0, 4, 3, 0, 2, 3, 0, 1, 2, 4, 1, 3, 0, 1, 2, 1, 3, 1, 4, 4, 0, 0, 1], [0, 3, 0, 0, 2, 2, 1, 0, 1, 0, 2, 0, 1, 3, 3, 0], [3, 3, 3], [0, 0, 2, 1, 1, 1, 2, 0, 0, 1, 0, 1, 1, 0, 0, 1, 2, 1, 2, 2, 2, 0, 2], [0, 1, 0, 2, 1, 1, 3, 2, 2, 0, 2, 3, 0, 2, 2, 1, 3, 2, 0, 2, 1, 1, 0, 1, 3], [12, 21, 14, 6, 2, 20], [19, 5, 7, 2, 0, 23, 19], [7, 7, 1, 3, 4, 2, 5, 0], [21, 26, 29, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 0, 3, 0, 0, 1, 2, 5, 2, 2, 1, 0, 0, 1, 70, 70, 51, 2, 232, 61, 62, 33, 29, 24, 25, 0, 89, 16, 3, 23, 25, 6, 7, 8, 4], "tree_depth": 71, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(i0) \\l int(41.0):{:\\nloopBreak% = 0\\nwhile not int(768.0) \\l i1:{:\\nif s2[int(8.0):i2].startswith(in0):{:\\ni0 *= divInt(i0,int(4.0))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = in0[i0:][i1:max(len(in1[:int(4.0)][:max(int(6.0), ( int(9.0) * len(\"\"M\"\"[:i0]) ))]), i1)] != (getCharFromString((s0[max(mod(min(mod(( mod(mod(len(\"\"t\"\"),mod(abs(int(7.0)),len(\"\"V\"\"))),min(int(2.0), int(7.0))) - ( mod(int(3.0),( int(4.0) - ( divInt(( mod(abs(i0),len(s1[:divInt(divInt(int(4.0),max(int(7.0), i0)),min(int(5.0), i2))])) * max(abs(i2), ( i0 * int(4.0) )) ),int(0.0)) + i2 ) )) + int(0.0) ) ),len(\"\"7\"\")), saveOrd(in1)),int(4.0)), int(8.0)):divInt(int(2.0),( ( int(3.0) + ( i2 * max(int(7.0), len(s2)) ) ) + saveOrd(s0) ))][int(5.0):i0] + \"\"f\"\"[:saveOrd(s2.lstrip(in2))][:max(saveOrd(getCharFromString(getCharFromString(\"\"h\"\"[( max(i1, divInt(max(i0, int(3.0)),abs(i1))) - int(3.0) ):int(1.0)].capitalize(), min(len(s0[:( max(divInt(saveOrd(\"\"<\"\"[i0:]),max(max(( mod(i0,i0) * ( i1 * i2 ) ), i1), i2)), int(6.0)) - divInt(i0,saveOrd(\"\"7\"\")) )][saveOrd(s2[:int(5.0)]):i0]), abs(i1))), ( abs(max(i1, max(int(7.0), int(2.0)))) + saveOrd(\"\"1\"\") ))), ( abs(( max(min(( int(2.0) * divInt(divInt(mod(int(2.0),int(6.0)),mod(min(mod(i2,( int(3.0) - max(max(saveOrd(saveChr(( i0 * ( int(1.0) * abs(min(int(9.0), int(9.0))) ) )).capitalize()[i0:]), len(getCharFromString(saveChr(( i0 - ( ( ( int(5.0) * int(0.0) ) - abs(int(9.0)) ) + int(7.0) ) ))[int(3.0):], i0))), i1) )), int(3.0)),mod(mod(i1,divInt(i0,int(3.0))),saveOrd(getCharFromString(\"\"O\"\", int(9.0)))))),int(9.0)) ), int(9.0)), len(s1)) * len(in1.capitalize()) )) - i0 ))][abs(( int(4.0) - ( len(\"\"3\"\") + i2 ) )):int(6.0)]), int(9.0)) + in2)[int(5.0):]\\ni1 = int(201.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = getCharFromString(((in0 + ((s0 + saveChr(int(03.0))) + (in1 + (in0 + \"\"[G42\"\")[( i0 + ( ( int(4.0) - divInt(i0,int(9.0)) ) + int(999.0) ) ):]))) + \"\"c\"\".lstrip((in2 + \"\"^5C0\"\"))[saveOrd(\"\"axU\"\"[max(divInt(mod(i1,i2),( i2 - min(int(0.0), i0) )), i1):]):mod(i2,mod(len((\"\"t\"\" + getCharFromString(s0, len(in2)).lstrip(\"\"!\"\"))),int(4.0)))]), ( i0 * int(556.0) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 1], [0, 2, 1, 2, 1, 0], [1, 0], [2, 2, 1, 1], [0], [0, 0], [], [], [], [5], [1], [0], [], [], [], [], [0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [2, 2, 6, 9, 6, 4, 5, 8, 8, 1, 4, 1], [0, 1, 1, 2, 2], [0, 0], [1, 2, 1, 3, 1, 3, 0, 1, 1, 3, 2, 1, 0, 0], [0, 0], [0, 3, 0], [2, 2], [], [5, 3, 3, 0, 5], [1, 0, 0, 1], [0], [4, 3, 2, 1, 0, 1, 0], [1], [], [1], [0, 0, 1, 2], [16, 5], [0], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 12, 12, 5, 2, 14, 2, 3, 2, 0, 5, 4, 1, 7, 1, 0, 1, 4, 2, 1, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(2.0))\\nif ( int(2.0) * min(int(69645.0), len((\"\"Q\"\"[:i0] + in0))) ) != int(881.0):{:\\nin0 = \"\"Fa4\"\"\\nloopBreak% = 0\\nfor s0 in in2:{:\\ni1 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 = min(( int(1.0) * i2 ), i2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [0, 0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 4, 6, 9, 1, 9, 1, 9, 1, 7, 8, 7, 7, 6, 8, 1, 6], [2, 0, 0, 0, 2, 0, 2, 2, 0, 1, 2, 2], [1], [2, 1, 3, 3, 0, 3, 2, 3, 0, 0, 2, 1, 2, 3, 2, 3, 3, 2, 2, 0, 1, 2, 2, 3, 1, 2, 3, 0, 3, 2, 2, 1, 3, 3, 1, 1, 1, 0, 2, 3, 0, 1, 0, 2, 2, 3, 2, 2, 2, 1, 1, 0, 2, 3, 1, 2, 1, 1, 0, 3, 3, 1, 0, 3, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [2, 1, 0, 1, 1, 2, 2, 1, 1, 4, 1, 4, 0, 2, 3, 2, 2, 4], [0, 0, 2, 0, 1, 0, 0, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0], [4, 5], [1, 1], [], [2, 1, 1, 4, 4, 0, 0], [0, 3], [0], [0], [2, 3], [], [], [6], [16]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 12, 1, 66, 20, 18, 10, 11, 2, 2, 0, 7, 2, 1, 1, 2, 0, 0, 1, 1], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(8.0),abs(max(i0, min(( max(i0, i0) + divInt(int(4.0),( max(mod(abs(abs(( mod(i2,int(6.0)) * ( mod(max(int(9.0), mod(max(i0, saveOrd(\"\"6\"\"[divInt(divInt(int(1.0),max(saveOrd(\"\"-\"\"), int(9.0))),int(1.0)):int(9.0)])),i2)),mod(min(i2, int(1.0)),i0)) + ( ( abs(mod(( ( int(7.0) - int(8.0) ) + i1 ),( len(getCharFromString(in1.lstrip(), int(7.0))) + divInt(int(7.0),int(6.0)) ))) - i2 ) - abs(abs(int(8.0))) ) ) ))),i2), saveOrd(in2)) + int(1.0) )) ), int(6.0)))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 0, 0], [], [0, 0, 1, 1], [], [0, 0, 0, 0], [], [], [2, 3, 3, 2], [2], [1, 0], [0], [], [0, 0], [], [], [], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 7, 8, 4, 8, 8, 2, 3, 4, 6, 0, 6, 5, 8, 1, 9, 9, 5], [1, 2, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 1, 2], [1, 0], [0, 2, 0, 1, 3, 3, 1, 3, 0, 3, 0, 1, 2, 3, 1, 2, 0, 2, 0, 0, 3, 1, 3, 1, 3, 0, 3, 0, 2, 2, 0, 1, 2, 3, 1, 2, 1, 3, 2, 0, 2, 3, 0, 2, 3, 3, 2, 3, 1, 2, 2, 2, 1, 3, 3, 1, 3, 1, 1, 1, 2, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 2, 3, 2, 3, 4, 3, 4, 2, 4, 3, 0, 3, 3, 3, 2, 1], [0, 0, 0, 2, 0, 2, 2, 2, 2, 0], [1, 0, 0, 0, 0, 1, 0], [3, 4, 4, 5, 5, 0], [1, 1, 1, 1, 1, 1], [], [3, 2, 2, 4, 1, 0, 4, 3, 4, 2, 2, 0, 0, 4, 2, 1, 2, 2, 4, 4, 4, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 2, 0, 3, 0], [3], [0, 2, 0, 2, 0, 1, 2], [1, 3, 1, 1, 3, 3], [], [5, 0, 9], [], [16, 17, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 0, 4, 0, 4, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 19, 19, 14, 2, 63, 16, 18, 10, 7, 6, 6, 0, 28, 7, 1, 7, 6, 0, 3, 0, 3], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 == ( i2 + int(0.0) )\\nres0 = res0\\ni0 += max(max(int(2.0), abs(i2)), len((getCharFromString(\"\"f\"\", i0)[int(7.0):][( abs(int(848.0)) + mod(i1,( i0 * i0 )) ):len(in0)] + getCharFromString((saveChr(int(8.0)) + in1[saveOrd(in1):][int(2.0):len(\"\"-\"\"[i1:saveOrd(getCharFromString(getCharFromString(in2, i0).lstrip(in2), ( divInt(i0,int(3.0)) + ( abs(int(4.0)) * ( int(6.0) * saveOrd(\"\"a\"\") ) ) ))[divInt(i1,divInt(len(\"\"j\"\"),i1)):][:divInt(min(len(s0), ( len(\"\".\"\") * int(0.0) )),( ( mod(int(6.0),len(\"\";\"\")) * abs(int(5.0)) ) + max(int(8.0), int(1.0)) ))])].capitalize())]), int(9.0)))))\\ni2 = divInt(int(9.0),int(5.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1], [2, 2, 1, 0, 2, 0, 0, 2, 0], [2, 2, 1, 0], [0, 2, 1, 0, 2], [0], [0, 0, 0, 0], [], [], [1, 0, 1, 3], [2, 5, 4], [0, 1, 0, 2, 0, 0, 2, 1, 1, 0, 0], [0, 0, 0], [4, 1], [2, 3, 2, 3, 0, 0], [1, 0], [0], [1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 3, 2, 1, 1, 4, 9, 4, 4, 2, 6, 9, 8, 4, 2, 4, 1, 7, 7, 9, 7, 5, 6, 9, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 1, 0, 2, 1, 1, 1, 1, 1, 2, 0, 0, 0], [1], [3, 1, 1, 1, 3, 2, 0, 0, 2, 2, 3, 3, 0, 3, 2, 1, 0, 2, 0, 2, 1, 0, 0, 1, 2, 0, 1, 0, 2, 1, 3, 3, 2, 0, 0, 1, 3, 0, 3, 3, 0, 1, 1, 2, 0, 1, 0, 1, 1, 1, 1, 0, 3, 3, 3, 3, 1, 3, 0, 3, 0, 1, 3, 2, 3, 2, 0, 3, 1, 3, 3, 1, 2, 3, 3, 0, 1, 3, 1, 0, 2, 0, 0, 2, 0, 3], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [4, 3, 4, 4, 1, 4, 4, 3, 3, 3, 4, 1, 0, 1, 3, 3, 3, 0, 2, 3, 3, 0, 0, 4, 3], [0, 0, 0, 0, 2, 2, 0, 2, 1], [0, 0, 1, 1, 0, 0, 1], [0, 3, 1, 3, 0, 5, 3, 4, 5, 4, 5, 1, 3, 4, 2, 2, 1, 3], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0], [0, 2, 4, 3, 0, 3, 0, 4, 2, 4, 2, 1, 2, 4, 2, 0, 4, 2, 1, 4, 1, 2, 4, 1, 2, 1, 4, 2, 0, 2, 3, 1, 0, 1, 4, 0, 4, 4, 4, 4, 0, 4, 4, 0, 1, 1, 2, 4, 3, 4, 2, 2, 4, 2, 4, 0, 2, 4, 1, 2, 1, 2, 0, 0, 4, 0, 2, 1, 1, 4, 0, 4, 0, 1], [0, 2, 3, 0, 2, 2, 2, 1, 0, 3, 3, 3, 2, 2, 2, 2, 3, 2, 3, 3, 1, 0, 0], [1, 2, 0, 5, 2, 4, 3], [0, 2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 0, 2, 0, 1, 0, 0, 1], [3, 3, 0, 0, 0, 1, 1, 3, 2, 0, 2, 1, 2, 0, 1, 0, 3, 2, 1, 0, 2], [5, 14, 2, 16, 16, 14, 15], [0, 3, 0, 3, 18], [2, 4, 6, 1, 0], [18, 28, 4, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 4, 5, 1, 4, 0, 0, 4, 3, 11, 3, 2, 6, 2, 0, 1, 25, 25, 25, 1, 86, 15, 25, 9, 7, 18, 21, 1, 74, 23, 7, 18, 21, 7, 5, 5, 4], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not saveOrd(s0) == int(23.0):{:\\nloopBreak% = 0\\nwhile ( getCharFromString((in0 + (s1 + \"\"/\"\"[int(2.0):int(1.0)].rstrip()[len(getCharFromString(in0[divInt(i1,i1):], divInt(( saveOrd(\"\"]\"\"[saveOrd(\"\"F\"\".capitalize()):i1].capitalize()) + max(mod(int(1.0),i0), ( i0 + ( int(4.0) + i0 ) )) ),i0))[int(9.0):( i0 + int(4.0) )]):].capitalize())), i0)[mod(int(426.0),saveOrd(\"\"O\"\".capitalize()[saveOrd(\"\"C\"\"[( i2 * i0 ):]):int(9.0)])):len(saveChr(i0))].startswith(s0[len((\"\"a\"\" + in2)[len(\"\"d\"\"):]):]) or not ( getCharFromString(in0, i1) not in in1.capitalize().strip(in2.capitalize().capitalize()).lstrip().strip() and int(8.0) != int(4.0) ) ):{:\\nb1 = ( i1 * int(2.0) ) \\le i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = \"\"!2Q4a\"\"\\nif b0:{:\\ni2 += int(4.0)\\n:}else:{:\\nb1 = res0\\n:}\\nloopBreak% = 0\\nfor in2 in \"\"6QdO\"\":{:\\ns1 = (in0.rstrip(\"\"^\"\".lstrip(\"\"1\"\"[int(1.0):int(7.0)])[:int(7.0)])[i1:saveOrd(in1[max(min(max(int(9.0), len(s2)), i1), len(saveChr(i1))):int(7.0)])].capitalize()[len(s2):][( min(( i1 * abs(int(5.0)) ), len(\"\"s\"\"[:len(\"\"P\"\")])) - int(6.0) ):divInt(min(min(i1, int(9.0)), saveOrd(getCharFromString(s1, int(0.0)))),i2)].strip() + getCharFromString(in0, divInt(i0,i0))).capitalize()[:mod(i0,len(\"\"0\"\"))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 2, 2, 1, 1, 2, 2, 0, 2, 0, 1, 2, 2, 1, 2, 0, 1, 0, 0], [2, 1, 1, 1, 1, 2, 0, 0], [2, 1, 2, 1, 0, 1, 2, 1, 1, 1, 1], [0, 0], [0, 0, 0, 0, 0], [], [], [1, 2, 2], [3, 1, 3, 4], [1, 2, 1, 1, 0, 0, 2, 1, 2], [0, 0, 0, 0], [2, 4, 1], [1, 3], [1], [1], [1, 0, 1, 0], [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [0, 8, 0, 5, 2, 8, 5, 8, 0, 9, 8, 5, 4, 7, 0, 0, 3, 8, 7, 8, 3, 0, 4], [2, 0, 1, 0, 1, 1, 0, 2, 0, 1, 0, 1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 2, 0, 2, 0, 1, 0, 3, 0, 2, 0, 1, 0, 1, 1, 1, 3, 0, 3, 2, 3, 2, 0, 0, 0, 1, 2, 3, 3, 3, 1, 1, 1, 3, 3, 0, 1, 2, 2, 1, 2, 3, 0, 2, 2, 2, 0, 0, 1, 1, 3, 0, 0, 3, 1, 1, 0, 3, 2, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 2, 4, 2, 2, 0, 2, 4, 1, 1, 2, 1], [1, 0, 1, 0, 0, 2, 1, 1], [1, 1, 0, 0, 1, 1, 0], [0, 0, 2, 0, 2, 0, 5, 4, 0, 0, 3, 4, 2], [1, 1, 1], [0, 0], [0, 0, 4, 2, 0, 4, 0, 1, 2, 4, 1, 1, 4, 4, 4, 0, 0, 2, 0, 0, 4], [1, 3, 3, 3, 0, 2, 1], [0, 1, 2], [0, 1, 1], [3, 0, 1], [5], [2], [], [18]], "fitness": 9223372036854775807, "mapping_values": [1, 19, 19, 8, 11, 2, 5, 0, 0, 1, 4, 9, 4, 3, 2, 1, 1, 4, 23, 23, 28, 7, 65, 13, 13, 8, 7, 13, 3, 2, 21, 7, 3, 3, 3, 1, 1, 0, 1], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\nloopBreak% = 0\\nwhile i2 \\ge i0:{:\\nif s2 == saveChr(int(0.0)):{:\\ni1 = mod(i0,( i1 - int(8.0) ))\\n:}else:{:\\ns0 = s2[i1:min(i0, ( i2 + int(0.0) ))]\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif i0 \\g int(5.0):{:\\nif int(28.0) \\ge int(58.0):{:\\ni1 = min(i0, abs(( saveOrd(s0.lstrip()) - mod(i1,i1) )))\\n:}else:{:\\nif False:{:\\nb1 = ( \"\"/\"\".startswith(\"\"F\"\".rstrip()[:i1]) or int(0.0) \\le divInt(abs(abs(min(int(9.0), int(8.0)))),int(5.0)) )\\ni0 = abs(saveOrd(\"\"c\"\"))\\nloopBreak% = 0\\nwhile getCharFromString(in2.capitalize(), i1).strip() not in in1:{:\\nloopBreak% = 0\\nfor s0 in s0[:int(4.0)]:{:\\nin0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s2 in saveChr(( divInt(int(7.0),mod(max(i0, mod(divInt(( i2 + i2 ),int(0.0)),int(0.0))),max(i1, i1))) + abs(int(3.0)) )):{:\\ni1 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= i2\\n:}\\n:}\\ni2 -= max(( int(783.0) - int(04.0) ), i2)\\n:}\\ni2 = i0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [0, 2, 0, 0], [0], [2, 2, 2], [0], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 3, 2, 4, 1, 9, 4, 7, 4, 9, 6, 3, 3], [0, 1, 1, 0, 2, 0, 1, 1, 1, 1, 2, 2, 1, 1], [], [0, 1, 3, 2, 0, 1, 0, 2, 2, 2, 3, 1, 1, 1, 1, 2, 2, 1, 0, 0, 0, 0, 2, 0, 3, 3, 2, 1, 0, 1, 0, 0, 0, 3, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0], [3, 2, 0, 1, 4], [1, 2, 2], [1, 0, 0, 0, 1], [2, 3, 3, 4, 2, 1, 3, 1, 4, 1, 1, 3], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1], [0], [3, 2, 0, 3, 3, 3, 3, 1, 4, 2, 2, 4, 4, 2, 2, 4, 4, 0, 4, 2, 4, 0, 1, 3, 1, 2, 2, 1, 0, 4, 4, 3, 2, 0, 1, 3, 4, 1, 3, 0, 1, 3, 3, 0, 3, 1, 0, 4, 1], [2, 1, 3, 2, 0, 0, 3, 0, 1, 0, 2], [5, 1], [2, 1, 2, 1, 2, 1, 0, 0, 1], [2, 3, 1, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1, 3, 2, 0], [0, 4, 18, 8, 11], [17, 16, 15, 14, 17, 0], [7, 2, 8, 9], [15, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 14, 0, 38, 8, 5, 3, 5, 12, 17, 1, 49, 11, 2, 9, 17, 5, 6, 4, 2], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (in0[i0:] + ((((\"\"7,r\"\" + saveChr(int(2.0))[len(getCharFromString(in0, ( i1 - int(3.0) )).capitalize()[i1:][:( mod(divInt(abs(int(2.0)),int(4.0)),int(1.0)) * int(9.0) )].strip(getCharFromString(in1.rstrip()[:divInt(divInt(int(4.0),i0),i2)], i0))):][:i1].capitalize()) + \"\"A\"\") + (\"\"q\"\" + \"\"E2\"\"[mod(i1,min(max(( int(7.0) * i1 ), int(4.0)), i1)):i2][i2:saveOrd(s2)])) + getCharFromString(saveChr(int(9.0)), int(633.0))))\\nloopBreak% = 0\\nfor s1 in (in0[:i1] + \"\"SIp\"\"):{:\\ns1 = (getCharFromString(\"\"or\"\", i1) + (in1 + \"\"8a\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = ((s1 + (\"\"&\"\" + in0)) + \"\"9L\"\".capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1], [1, 0, 2, 0, 2, 2, 0, 2, 1, 0, 2, 2, 1, 1, 1, 2, 2, 0, 1, 0, 1, 0], [2, 0, 1, 1, 0, 1, 0, 2], [1, 0, 2, 0, 2, 2, 0, 0, 1, 2, 0, 2, 0, 1], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 2, 1, 1, 3, 1, 1], [4, 5, 2, 3], [2, 0, 1, 2, 2, 1, 2, 1, 0, 1, 2], [0, 0, 0, 0], [3, 1, 0, 3, 5], [0, 0], [], [], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [5, 0, 0, 4, 3, 5, 4, 9, 3, 7, 2, 7, 6, 8, 6, 0, 1, 2, 6, 1, 0, 3, 6, 6, 1, 4, 5, 8, 8, 8, 6, 2, 3, 3, 6, 9, 3, 7, 0, 1, 1, 2, 3, 1, 2, 7, 8, 8, 4, 2, 8, 3, 3, 7, 6, 0, 4, 2, 2, 9, 8, 9, 7, 9, 7, 0, 4, 3, 5, 9, 4, 6], [1, 0, 2, 1, 1, 2, 0, 1, 2, 1, 2, 2, 1, 2, 2, 1, 0, 2, 2, 0, 1, 2, 1, 1, 0, 0, 1, 1, 2, 1, 1, 2, 2, 0, 0, 2, 2, 1, 2, 2, 0, 2, 2, 2, 0, 2, 0, 1, 2, 1, 0, 1, 2, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 1], [0, 0, 2, 3, 2, 2, 3, 2, 0, 2, 0, 2, 0, 2, 2, 2, 3, 3, 3, 1, 1, 1, 2, 1, 0, 3, 3, 1, 1, 0, 3, 2, 2, 3, 2, 2, 2, 0, 3, 1, 3, 3, 0, 0, 2, 2, 1, 2, 2, 2, 1, 2, 3, 3, 3, 2, 0, 0, 2, 0, 1, 2, 3, 2, 1, 1, 2, 1, 0, 1, 1, 0, 1, 2, 0, 3, 0, 2, 1, 3, 2, 0, 3, 1, 3, 1, 1, 2, 1, 0, 1, 2, 2, 3, 2, 3, 0, 1, 2, 2, 0, 1, 1, 1, 2, 2, 1, 3, 1, 1, 3, 3, 2, 3, 3, 2, 3, 2, 1, 1, 3, 1, 2, 2, 1, 1, 0, 0, 3, 0, 2, 3, 3, 2, 1, 2, 1, 2, 2, 3, 3, 0, 0, 3, 3, 0, 3, 1, 0, 0, 2, 3, 2, 3, 2, 3, 0, 2, 3, 0, 1, 2, 3, 0, 2, 0, 1, 0, 3, 0, 2, 0, 2, 3, 0, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 0, 0, 3, 1, 0, 0, 0, 1, 2, 3, 0, 3, 1, 0, 1, 1, 3, 0, 3, 0, 2, 1, 2, 2, 0, 2, 3, 2, 2, 1, 1, 2, 2, 3, 1, 1, 3, 3, 0, 0, 1, 3, 0, 1, 2, 3, 2, 2, 3, 3, 2, 2, 1, 3, 0, 0, 2, 1, 2, 3, 2, 0, 3, 0, 1, 2, 3, 0, 2, 0, 3, 3, 3, 0, 0, 3, 3, 1, 2, 2, 2, 2, 0, 2, 1, 3, 0, 2, 0, 2, 1, 1, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 1, 2, 0, 1, 0, 2, 3, 3, 3, 0, 3, 0, 2, 1, 1, 3, 1, 1, 3, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [4, 0, 4, 4, 0, 1, 1, 1, 3, 3, 0, 3, 2, 4, 4, 2, 0, 4, 1, 3, 3, 2, 1, 3, 0, 3, 4, 0, 2, 1, 1, 3, 2, 2, 4, 0, 4, 0, 1, 0, 3, 2, 3, 4, 1, 0, 4, 2, 4, 1, 2, 1, 3, 3, 2, 0, 3, 2, 3, 2, 0, 4, 0, 1, 4, 1, 1, 3, 1, 0, 4, 2, 2, 2, 2, 4, 1], [1, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 1, 2, 2, 1, 2, 2, 0, 2, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 2, 2, 1, 0, 2, 0, 1, 2, 0, 1, 1, 1, 1, 0, 1, 1, 1, 2, 1, 0, 2, 2, 2, 0], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0], [2, 3, 0, 5, 0, 4, 3, 0, 5, 0, 1, 0, 2, 3, 2, 3, 3, 2, 0, 1, 3, 5, 4, 3, 2, 5, 1, 5, 2, 2, 2, 2], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0], [4, 4, 1, 0, 0, 3, 4, 2, 0, 0, 1, 4, 2, 2, 0, 1, 1, 1, 0, 2, 2, 4, 0, 1, 1, 1, 2, 1, 2, 0, 1, 2, 1, 2, 2, 0, 4, 2, 4, 4, 4, 2, 2, 2, 2, 1, 2, 1, 0, 1, 0, 4, 0, 4, 2, 1, 0, 2, 4, 0, 0, 1, 4, 1, 4, 0, 0, 1, 2, 2, 0, 4, 1, 1, 2, 0, 1, 2, 2, 0, 2, 2, 1, 1, 0, 0, 4, 3, 4, 0, 2, 2, 1, 1, 0], [3, 3, 3, 3, 0, 0, 3, 1, 3, 3, 1, 1, 3, 1, 3, 1, 2], [4, 3, 1, 2, 1, 1, 0, 3, 0], [2, 0, 2, 2, 0, 0, 2, 0, 2, 1, 1, 0, 0, 0, 2, 0, 1, 0, 1, 1, 0, 2, 1, 1, 2, 2, 1], [2, 0, 2, 3, 2, 1, 2, 1, 1, 1, 0, 3, 1, 3, 2, 2, 3, 0, 0, 1, 2, 0, 3, 1, 2, 1], [6, 25, 16, 23, 18], [4, 18, 17, 3, 15, 5, 24, 21], [7, 6, 6, 9, 2, 1, 4, 1], [28, 3, 6, 2, 19]], "fitness": 9223372036854775807, "mapping_values": [1, 22, 22, 8, 14, 3, 7, 0, 0, 8, 4, 11, 4, 5, 2, 0, 0, 3, 72, 72, 80, 3, 317, 93, 77, 53, 43, 32, 26, 3, 95, 17, 9, 27, 26, 5, 8, 8, 5], "tree_depth": 79, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i0\\nres0 = \"\"7G\"\".lstrip(s2).rstrip(in0) != (s0[i2:].rstrip() + in2)\\nloopBreak% = 0\\nwhile b2:{:\\ns0 = \"\"6\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in in0[( saveOrd(\"\"]\"\") + ( ( min(mod(i1,( i1 * mod(i2,( ( divInt(saveOrd(\"\"6\"\"),saveOrd(\"\"e\"\")) + min(int(5.0), int(0.0)) ) + int(0.0) )) )), mod(int(4.0),i0)) + max(max(int(3.0), int(5.0)), i1) ) + max(divInt(( len(s0) + divInt(( ( i2 * len(getCharFromString(in2, int(4.0))[min(len(\"\"9\"\"), i1):i2][mod(divInt(int(9.0),( divInt(( int(3.0) + ( abs(saveOrd(\"\"s\"\")) + saveOrd(\"\"r\"\") ) ),mod(i2,i1)) - mod(i2,int(7.0)) )),divInt(abs(divInt(int(2.0),int(7.0))),divInt(int(6.0),i2))):]) ) * int(8.0) ),int(6.0)) ),i1), int(0.0)) ) ):][mod(i0,min(i2, mod(int(1.0),saveOrd(\"\"d\"\"[divInt(i2,max(int(2.0), len(s0[int(6.0):]))):int(1.0)])))):divInt(int(0.0),i0)].strip():{:\\nif int(36.0) \\le divInt(divInt(len(\"\"Z\"\"),( abs(i1) * int(6.0) )),( ( i2 - int(1.0) ) * int(4.0) )):{:\\nb2 = \"\"\"\"[int(5.0):( ( int(8.0) * max(int(8.0), int(8.0)) ) + len(s1[:min(( len(getCharFromString(saveChr(saveOrd(\"\"p\"\"[( min(( int(6.0) * int(2.0) ), abs(int(3.0))) + ( ( int(3.0) - int(6.0) ) + i1 ) ):][i1:max(i0, mod(max(len(\"\"#\"\"[( int(9.0) - ( int(3.0) + divInt(( abs(abs(i0)) + i1 ),saveOrd(s0)) ) ):min(i1, saveOrd(\"\"2\"\"))]), int(7.0)),i2))][i1:mod(min(mod(max(( min(i1, ( len(s2) - i2 )) + int(0.0) ), ( abs(i2) + ( i0 - int(1.0) ) )),i0), len(in0.lstrip())),i2)][divInt(i2,( saveOrd(saveChr(i1)) * mod(int(1.0),mod(int(2.0),mod(int(3.0),mod(divInt(( int(1.0) * int(2.0) ),i2),i2)))) )):max(int(7.0), i0)].rstrip())).rstrip()[:i2], i2)) - int(8.0) ), divInt(min(i2, saveOrd(\"\"1\"\"[:int(8.0)])),i0))][int(4.0):]) )] not in s2\\n:}else:{:\\nif saveChr(int(2.0))[abs(i2):saveOrd(in0)] in in0:{:\\ns2 = \"\"\\\\\\t\"\"\\n:}else:{:\\ns0 = \"\"Q\"\".lstrip(saveChr(i0))\\n:}\\nloopBreak% = 0\\nfor s1 in in0:{:\\nif ( int(8.0) + divInt(( i1 * mod(max(( ( int(3.0) + int(3.0) ) - ( ( abs(int(7.0)) * int(6.0) ) + max(len(in2), i2) ) ), i1),int(0.0)) ),len(\"\"X\"\")) ) != i0:{:\\nb1 = in1[:int(4.0)][:( abs(( mod(min(len(\"\"f\"\".lstrip()), ( ( int(2.0) - abs(i1) ) - i2 )),mod(int(2.0),( len(\"\"4\"\") - ( i1 - abs(i0) ) ))) + int(9.0) )) - ( min(i0, mod(i0,saveOrd(in0[min(max(i2, i1), saveOrd(\"\"S\"\")):max(int(8.0), ( divInt(divInt(mod(i1,( int(9.0) - max(i2, ( i2 - ( int(7.0) * int(9.0) ) )) )),mod(mod(i1,i1),i2)),i2) - ( i1 + i1 ) ))]))) * i1 ) )] != s2[:len(\"\":\"\"[max(min(saveOrd(\"\"y\"\"), int(7.0)), mod(i1,int(0.0))):][:i2])][divInt(abs(abs(abs(i2))),abs(i2)):]\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( int(4.0) * int(3.0) ) == saveOrd(in2)\\ni1 *= int(5.0)\\nloopBreak% = 0\\nfor s1 in in2:{:\\nloopBreak% = 0\\nwhile res0:{:\\ns2 = saveChr(int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = max(i1, i2) \\ge i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ns2 = (s2.capitalize() + \"\"1\"\"[:i0][i1:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = \"\"v\"\".endswith(s2)\\ni0 += int(46.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0], [4], [0], [0], [], [1], [], [0], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [5, 4, 7, 0, 3, 0, 4, 8, 9, 6], [1, 1, 0, 1, 1, 0, 0, 0], [], [2, 3, 3, 0, 0, 2, 2, 1, 3, 0, 3, 0, 2, 3, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 0, 1, 0], [1, 0, 1, 1, 1, 0, 0], [3, 0, 3, 3, 4, 1, 2], [2, 1, 1], [1, 1, 0, 0], [3, 0, 1, 4, 5, 1], [1, 1, 1], [], [2, 0, 0, 2, 3, 3, 3, 3, 0, 1, 2, 4, 4, 0, 2, 1, 0, 1], [3, 1], [1, 3], [0, 0, 2, 0], [0, 3, 0], [10, 4], [], [], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 8, 0, 27, 7, 7, 3, 4, 6, 3, 0, 18, 2, 1, 4, 3, 2, 0, 0, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s0[mod(len(s1),min(i1, i1)):( mod(int(5.0),len(((((in1 + \"\"K\"\") + saveChr(i0).rstrip()[len(in2):]) + \"\">\"\"[i1:divInt(saveOrd(s1),max(int(4.0), i1))]) + \"\"E\"\")[int(7.0):divInt(int(0.0),abs(i0))])) * ( ( i0 - int(3.0) ) - i0 ) )]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [0, 0, 1], [], [], [], [], [2, 2], [0], [1, 0, 2], [0], [5], [2], [], [], [], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1], [8, 9, 8, 4, 1, 5, 2, 1, 2, 1, 5, 5, 0, 4, 2], [1, 0, 0, 2, 1, 2], [0], [1, 1, 3, 0, 2, 0, 2, 1, 3, 0, 3, 1, 0, 1, 0, 3, 1], [0, 0], [4, 1, 4, 2], [2, 1], [], [2, 4], [1, 1, 1], [], [3, 0, 2, 2, 2, 2, 2, 1, 0, 1, 1], [], [], [0, 1, 2, 0, 1], [1, 2, 0], [22], [1], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 0, 0, 0, 2, 1, 3, 1, 1, 1, 0, 0, 0, 15, 15, 6, 1, 17, 2, 4, 2, 0, 2, 3, 0, 11, 0, 0, 5, 3, 1, 1, 1, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(8.0) \\l int(98415.0)\\nb2 = not (s2 + \"\"b\"\"[:saveOrd(in1)][i1:( i0 * ( int(2.0) - max(i0, saveOrd(\"\"0\"\")) ) )][int(12.0):][:i2][int(155.0):i1]).endswith(\"\"W\"\")\\ni2 = abs(int(042.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1, 0, 0], [], [0], [], [0, 0], [], [], [3], [], [2], [], [2], [], [], [], [], [1, 1], [0, 4], [1, 0, 1], [0], [3, 2, 1, 0, 1, 0], [1], [3], [], [1], [3], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [], [1, 4, 0, 2, 3, 3, 1, 3, 2, 4, 4, 1, 1, 1, 1], [0, 3, 3], [0, 3], [0, 2], [2, 3, 2, 1, 1, 3, 0, 1, 2, 3], [1], [6, 8, 2], [6, 2, 9], [26, 30, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 6, 1, 1, 0, 1, 1, 10, 0, 15, 3, 2, 2, 10, 1, 3, 3, 3], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"6[\"\" == getCharFromString(in0, len(((\"\"2gi_\"\" + (\"\"B\"\".lstrip(\"\"c\"\").lstrip()[mod(int(0.0),i1):] + \"\"9\"\")) + \"\",\"\")[int(4.0):i0]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1], [0, 1, 0, 1], [], [0, 0, 1, 2], [], [0, 0], [], [], [1, 0, 1], [5], [1, 0], [0], [], [1, 0], [], [0], [], [1], [3], [2, 1, 1, 2], [0], [3, 0, 0, 1, 0], [], [2], [], [], [5], [1], [], [3, 4, 1], [1], [], [], [2], [], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 0, 4, 0, 2, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 4, 1, 5, 0, 1, 0, 0, 1, 1, 0, 3, 1, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = abs(i2) != i1\\nb0 = True\\ni1 = int(3.0)\\nin2 = (saveChr(i2) + \"\"8\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [], [2], [], [3], [], [], [], [], [0, 0, 1], [0, 7, 7], [1], [0], [1], [], [], [], [], [3], [1], [], [1, 2, 0], [], [], [1], [3], [], [], [], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 3, 0, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = \"\"@\"\" != in0[:int(077.0)]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 1], [2, 2, 1, 2, 0, 0, 1, 1], [0, 1, 2], [0, 2, 2, 0, 2], [0], [0, 0], [], [], [1, 3, 1], [4, 5], [2, 0, 1, 1], [0, 0], [5], [0], [], [], [1], [1, 0, 1, 1, 1, 1, 1], [4, 6, 0, 1, 0, 9, 6], [0, 0, 1], [1], [3, 2, 3, 1, 3, 0, 2, 0, 1, 1, 1, 1, 3, 3, 1, 0, 3], [1, 0], [2, 2, 2, 3, 1, 3], [1, 0], [0], [0, 1, 0, 0, 1, 4, 0, 4, 4, 0], [0, 1, 1], [0], [4, 4, 0, 0, 4, 0, 4, 2, 4, 1, 0, 3, 4, 1, 0, 0], [3, 2, 1, 3, 1, 0], [1, 5], [2], [1, 1, 2], [], [3, 9], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 1, 2, 0, 0, 3, 2, 4, 2, 1, 1, 0, 0, 1, 7, 7, 3, 0, 17, 2, 6, 1, 1, 10, 3, 1, 16, 6, 2, 1, 3, 0, 2, 1, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1.capitalize().rstrip():{:\\nif s0.endswith(saveChr(abs(divInt(abs(int(4.0)),abs(i0))))):{:\\nb1 = res0\\nloopBreak% = 0\\nwhile ( i0 - int(60.0) ) \\le int(1.0):{:\\ns0 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = saveChr(int(0.0))[int(9.0):].strip(\"\"dj\"\")\\n:}else:{:\\nb1 = len(s0) != max(int(6.0), i1)\\n:}\\nin1 = (getCharFromString(\"\"9\"\", len(in1)) + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1], [1, 0, 8, 5, 4, 9, 6, 9, 2, 9, 3, 3, 9, 1], [2, 1, 0, 1, 2, 0, 2, 0], [0], [3, 1, 2, 3, 1, 1, 1, 0, 2, 3, 0, 1, 3, 0, 2, 3, 3, 0, 1, 2, 1, 0, 2, 2, 2, 0, 0, 2, 0, 1, 1], [0, 1, 1, 0, 1, 0, 1, 1], [2, 0, 0, 4, 3, 4], [0, 1, 1], [1, 0, 1, 0, 0], [3, 3, 1, 0, 4], [0, 1, 0, 0, 1, 1, 0, 1, 1], [], [3, 3, 2, 4, 3, 3, 0, 3, 0, 2, 1, 2, 4, 1, 2, 2, 0, 4, 0, 4, 1, 3, 1, 1], [3, 1, 0, 3], [1, 0], [1, 0, 2, 0, 0], [2, 1, 1, 0, 3, 1, 0, 2, 2], [4, 0], [4, 1, 24], [2, 5, 6], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 8, 0, 31, 8, 6, 3, 5, 5, 9, 0, 24, 4, 2, 5, 9, 2, 3, 3, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = ((((in0 + (s1 + \"\"2e\"\"[abs(int(1.0)):( min(int(0.0), int(8.0)) + int(54.0) )])) + saveChr(i2)[mod(min(i1, int(9.0)),saveOrd(\"\"bE>\"\")):]).rstrip()[:i0] + s0[divInt(len(getCharFromString(in1, saveOrd(\"\"y\"\".lstrip()))),i1):int(6.0)][( int(92.0) - i2 ):mod(( divInt(i0,i2) - divInt(i0,int(9.0)) ),int(3391.0))]) + (\"\"A5\"\" + \"\"6\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [], [2], [], [], [], [], [2, 0], [1, 0, 0, 1], [], [3, 1, 1], [], [], [2], [2, 1, 1, 3], [], [13, 16], [8], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 3, 0, 0, 0, 4, 0, 2, 1, 1], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (\"\"8\"\" + \"\"nq\\\\\\n\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1], [3, 2, 3, 5], [2, 1], [0], [3, 3, 1, 2, 0, 1], [1], [1, 2], [], [1], [4], [1], [], [1], [], [], [], [0], [21], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 6, 1, 2, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(abs(int(3.0)), mod(i1,int(2.0)))\\nin1 = \"\"V\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1], [0, 0, 2, 0, 1], [1], [0, 1, 0, 2], [], [0, 0, 0], [], [], [3, 3], [1], [2, 1, 2], [0], [2, 5], [], [], [], [0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [4, 9, 8, 1, 1, 9, 1, 2, 8, 7, 8, 1, 5, 4, 4, 2, 5, 6, 7, 0, 2, 3, 5, 8, 6, 8, 8, 9, 6, 2, 6, 1, 7, 5, 0, 9, 4, 6, 8, 9, 4, 7, 4, 9, 4, 3, 5, 4, 5, 3, 3, 4, 2, 6, 3, 0, 1], [1, 2, 2, 1, 0, 0, 2, 0, 2, 1, 1, 1, 2, 2, 1, 1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 0, 2, 0], [0, 0], [1, 0, 3, 2, 0, 3, 2, 2, 1, 3, 2, 2, 1, 3, 0, 0, 2, 3, 3, 0, 3, 1, 0, 0, 2, 1, 2, 1, 3, 1, 3, 2, 0, 0, 3, 2, 3, 1, 3, 0, 2, 2, 1, 3, 3, 2, 0, 1, 3, 3, 3, 0, 1, 0, 3, 2, 2, 1, 3, 1, 2, 0, 3, 2, 2, 0, 2, 2, 0, 0, 1, 3, 0, 3, 0, 1, 3, 2, 0, 3, 0, 3, 3, 2, 1, 3, 2, 2, 2, 1, 2, 2, 2, 1, 2, 3, 3, 3, 3, 3, 2, 0, 3, 1, 3, 1, 2, 2, 1, 3, 1, 3, 3, 3, 1, 3, 0, 3, 2, 3, 1, 2, 1, 2, 0, 2, 1, 1, 1, 0, 3, 1, 3, 3, 1, 3, 1, 2, 2, 0, 1, 3, 1, 0, 2, 0, 3, 3, 2, 2, 0, 1, 1, 1, 3, 3, 0, 3, 1, 2, 3, 1, 0, 0, 2, 2, 3, 3, 3, 1, 0, 1, 3, 1, 1, 0, 1, 2, 1, 3, 1, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], [2, 0, 3, 3, 1, 4, 4, 2, 0, 4, 2, 2, 3, 1, 2, 1, 1, 0, 1, 0, 4, 4, 0, 2, 1, 4, 2, 2, 1, 0, 0, 3, 0, 0, 4, 3, 1, 3, 2, 1, 1, 4, 0, 2, 3, 0, 4, 0, 4, 0, 2, 0, 3, 4, 4, 4, 3], [2, 1, 1, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 1, 0, 0, 2], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 3, 5, 1, 2, 2, 1, 4, 4, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [], [3, 4, 4, 2, 4, 2, 2, 0, 1, 2, 0, 0, 4, 1, 0, 2, 2, 2, 0, 0, 4, 2, 3, 2, 2, 1, 2, 1, 2, 1, 2, 0, 2, 0, 4, 0, 2, 1, 0, 0, 2, 2, 0, 1, 2, 4, 2, 0, 2, 1, 2, 0, 1, 0, 4, 1, 0, 4, 4, 1], [0, 3, 3, 3, 0, 1, 2, 0, 1, 3], [1, 2, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 2, 1, 1, 0, 2, 2], [3, 3, 0, 1, 2, 0, 3, 3, 3, 3, 3, 1], [22, 7], [13, 8], [7], [28, 14, 8, 26, 9, 24, 7]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 3, 0, 0, 2, 1, 3, 1, 2, 0, 0, 0, 1, 57, 57, 36, 1, 182, 45, 57, 17, 28, 17, 12, 0, 60, 10, 4, 21, 12, 2, 2, 1, 7], "tree_depth": 79, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (getCharFromString(s1[:int(4.0)][:i1].strip()[:abs(mod(i2,min(divInt(( int(9.0) * len(\"\"]\"\") ),divInt(mod(int(8.0),len(s0[:i2])),i1)), ( max(saveOrd(s0), i0) - saveOrd(\"\"+\"\".rstrip()) ))))].rstrip(), int(1.0)) + s0) == s0[:i0][:i2][:mod(int(19.0),mod(int(128781.0),abs(int(544.0))))]\\ni0 = min(( i2 - i1 ), saveOrd(s1))\\nif mod(abs(int(25.0)),abs(i1)) \\g ( divInt(int(6.0),len(getCharFromString((\"\"W\"\"[:max(divInt(i1,int(7.0)), abs(max(max(i2, int(0.0)), i2)))][min(divInt(( int(2.0) * max(int(3.0), divInt(i1,min(( mod(i1,divInt(( i2 + i0 ),int(5.0))) + saveOrd(\"\"n\"\"[i2:saveOrd(\"\"7\"\"[:i0])]) ), int(8.0)))) ),min(divInt(i2,abs(i2)), max(saveOrd(s0[:divInt(int(6.0),abs(divInt(( divInt(int(8.0),divInt(( divInt(int(8.0),( abs(max(min(min(len(s1[:( i1 + min(int(9.0), min(int(6.0), ( ( int(2.0) + saveOrd(saveChr(int(6.0))) ) + len(in0) ))) )]), max(len(\"\"H\"\"[int(1.0):abs(i2)]), max(( max(int(7.0), mod(int(5.0),( i1 * mod(int(0.0),int(9.0)) ))) - int(4.0) ), i1))), saveOrd(in2)), int(6.0))) - min(abs(int(8.0)), len(s1)) )) * int(9.0) ),mod(divInt(i0,int(4.0)),min(int(7.0), i2)))) - ( i1 + saveOrd(s2[:min(divInt(divInt(i0,int(4.0)),int(9.0)), int(4.0))][saveOrd(\"\"%\"\"):]) ) ),min(i0, abs(int(3.0))))))]), divInt(min(int(5.0), i2),i1)))), mod(( len(s2[saveOrd(\"\"[\"\"[saveOrd(s1[int(4.0):]):]):i0].capitalize()[:int(5.0)]) + saveOrd(\"\"&\"\") ),int(3.0))):int(3.0)] + in1)[:i2], int(426.0)))) * mod(int(3.0),len(getCharFromString(\"\"?$\"\", int(01.0)))) ):{:\\nres0 = in1.endswith(saveChr(i0))\\ns1 = \"\"i\"\".lstrip()\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [2], [], [0], [], [], [], [4], [0, 2, 1], [0], [0], [3], [1], [], [], [0, 0, 1, 0, 1], [7, 8, 4, 8, 0], [2, 1, 0, 2], [], [0, 2, 3, 0, 3, 2, 0, 1, 2, 3, 1, 0, 3], [1, 0, 0], [2, 2, 1, 3], [2, 0], [1], [4, 5, 3], [0, 1, 1], [], [2, 0, 1, 1, 0], [], [], [1], [0, 1, 0], [5, 4], [0], [], []], "fitness": 9223372036854775807, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( in1[:i2] in \"\"Fa\"\" or mod(abs(i1),abs(( i0 * int(784.0) ))) \\le ( max(int(80.0), i2) + len(\"\"E\"\") ) ):{:\\nin2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 3, 1, 1, 1, 1, 0, 0, 5, 5, 4, 0, 13, 3, 4, 2, 1, 3, 3, 0, 5, 0, 0, 1, 3, 2, 1, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [2], [0], [4], [], [], [], [], [0, 0, 0, 1], [5, 4, 1, 2], [1], [], [1, 1], [], [], [], [], [], [0, 1, 0, 1, 0, 1], [], [3, 2, 4, 1, 1, 1], [2], [], [2], [3, 1, 2, 0, 0, 3], [23, 13], [14], [3], [21, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 0, 0, 1, 0, 0, 0, 0, 0, 6, 0, 6, 1, 0, 1, 6, 2, 1, 1, 2], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = (\"\"<o\"\".capitalize()[int(5412.0):] + \"\"3X\"\").startswith(\"\"N(\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 9, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 1, 1, 1, 0, 2, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 3, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 2], [17], [18], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 9, 0, 50, 16, 11, 9, 7, 6, 3, 1, 16, 3, 1, 4, 3, 1, 1, 1, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[len(in1):] not in getCharFromString(in0[i0:abs(min(mod(i2,int(0.0)), ( int(7.0) + len(saveChr(i2)) )))], ( mod(( int(5.0) + i1 ),divInt(min(( i1 * max(len((\"\"s\"\" + s0.rstrip())), ( int(7.0) - i2 )) ), divInt(max(int(7.0), int(1.0)),int(9.0))),int(7.0))) + i1 ))[( divInt(int(9.0),saveOrd(\"\"6\"\")) * divInt(abs(i2),( ( ( int(8.0) - int(5.0) ) - mod(int(0.0),i0) ) * int(4.0) )) ):int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 0, 0], [2, 2], [1, 0, 2], [], [0, 0, 0], [], [], [3, 3], [], [0, 0], [], [], [0, 0], [], [], [], [1, 1], [5, 9], [0, 2], [1], [1, 1, 0], [], [], [2], [], [0, 2], [1, 0, 1], [], [3, 1, 2, 3, 0, 1], [], [], [0], [1, 3, 1], [], [25, 13], [], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 3, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 2, 2, 2, 1, 3, 0, 0, 1, 0, 2, 3, 0, 6, 0, 0, 1, 3, 0, 2, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(5.0)\\nres0 = res0\\ns0 = (\"\"z\"\" + (s2 + \"\"#n\"\")[int(9.0):i2])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 2, 2, 1, 0, 1, 1, 2, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 2], [2, 1, 0, 2, 2, 2, 2, 2, 0, 1, 2, 0, 1, 1, 2, 2, 1, 1], [], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 2, 0], [4], [2, 0, 0, 0, 0, 2, 2, 1, 2, 2], [0], [4, 2, 3, 2, 4], [1, 3, 3, 1], [0, 0], [0, 1], [1, 1], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 6, 6, 1, 1, 6, 9, 7, 4, 6, 5, 7, 6, 1, 7, 2, 1, 0, 9, 6, 6, 9, 5, 5, 9, 8, 8, 6, 7, 1, 8, 8, 8, 6, 0, 0, 6, 2, 5, 3, 6, 0, 4, 8, 7, 3, 4, 0, 5, 9, 6, 7, 7, 9, 2, 8, 0, 8, 3, 2, 8, 7, 7, 1, 0], [0, 1, 2, 0, 0, 2, 2, 2, 1, 1, 2, 1, 0, 2, 0, 0, 2, 1, 2, 0, 1, 2, 1, 1, 1, 1, 0, 2, 1, 2, 0, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 0, 1, 1, 2, 0, 2, 0, 1, 2, 1, 1, 1, 0, 2, 2, 2, 2, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2], [1, 0, 1, 0, 1, 1], [1, 2, 1, 2, 2, 2, 1, 3, 0, 0, 1, 1, 3, 1, 0, 0, 2, 0, 1, 0, 1, 1, 2, 1, 2, 3, 1, 2, 3, 2, 3, 3, 0, 3, 2, 2, 1, 3, 0, 0, 3, 2, 0, 0, 3, 3, 2, 1, 1, 2, 0, 0, 0, 0, 3, 0, 0, 2, 2, 0, 1, 3, 1, 3, 2, 3, 3, 0, 2, 2, 0, 0, 1, 0, 3, 0, 3, 0, 1, 0, 1, 3, 3, 2, 1, 0, 1, 0, 2, 3, 2, 0, 2, 3, 0, 0, 3, 3, 3, 2, 3, 0, 3, 2, 1, 0, 1, 0, 1, 2, 3, 0, 2, 3, 0, 1, 1, 0, 2, 3, 0, 1, 0, 2, 2, 3, 1, 1, 0, 1, 2, 1, 1, 1, 1, 2, 2, 0, 0, 2, 3, 0, 2, 3, 3, 1, 2, 2, 2, 3, 0, 3, 0, 0, 1, 3, 2, 2, 2, 2, 3, 3, 0, 2, 1, 2, 2, 0, 3, 2, 0, 0, 0, 1, 0, 2, 2, 3, 1, 1, 0, 2, 1, 1, 1, 2, 0, 0, 0, 2, 1, 0, 0, 1, 2, 2, 3, 2, 0, 0, 0, 2, 0, 0, 2, 1, 1, 1, 3, 1, 3, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 0, 4, 1, 2, 1, 2, 0, 0, 3, 3, 4, 4, 1, 0, 2, 1, 3, 4, 1, 3, 3, 1, 3, 1, 1, 3, 0, 4, 4, 1, 0, 4, 0, 0, 0, 2, 1, 0, 2, 3, 0, 1], [0, 2, 1, 0, 2, 0, 0, 2, 2, 2, 1, 1, 2, 1, 2, 0, 1, 0, 2, 0, 1, 1, 2, 2, 2, 0, 0, 2, 2, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 3, 0, 0, 4, 0, 3, 5, 0, 1, 1, 5, 2, 1, 5, 2, 2, 1, 5, 2, 2, 3, 0, 2, 1, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [], [3, 2, 3, 4, 1, 2, 2, 4, 4, 2, 4, 2, 0, 3, 1, 4, 2, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 1, 1, 2, 2, 3, 1, 1, 3, 0, 4, 3, 1, 0, 4, 1, 4, 2, 3, 1, 1, 3, 1, 1, 0, 2, 3, 4, 4, 0, 4, 1, 2, 0, 1, 0, 4, 2, 3, 0, 2, 4, 1, 0, 1, 3, 0, 2, 4, 2, 1, 2, 1, 0, 4, 4, 1, 0, 2, 1, 2, 0, 4, 4, 2, 2, 4, 4, 1, 1, 4, 1, 1, 2, 1, 4, 2, 1], [1, 2, 0, 2, 0, 0, 1, 3, 0, 1, 3, 2, 2, 2, 0, 0, 2, 3, 3, 3, 2, 2, 3, 1, 2, 0, 2, 1], [4, 2, 1, 1, 3, 3], [1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 0, 2, 1, 0, 0, 2, 2, 0, 2, 0, 0, 1], [0, 3, 2, 0, 1, 3, 2, 3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 3, 2, 1, 3, 2, 2, 2, 2, 0, 1, 3, 2, 3, 3, 3], [10, 4, 20, 15, 13, 4, 13], [24, 9, 21, 8, 24, 3, 19], [9, 7, 6, 2, 4, 3, 9, 7, 6, 7, 5], [10, 29, 24, 12, 12, 19, 20, 21, 22, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 21, 21, 3, 18, 0, 10, 0, 0, 3, 1, 10, 1, 5, 4, 2, 2, 2, 65, 65, 68, 6, 213, 56, 44, 31, 29, 26, 35, 0, 104, 28, 6, 22, 35, 7, 7, 11, 10], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = ((saveChr(int(1.0)) + \"\"K\"\")[:( int(6.0) + mod(mod(( int(6.0) * max(i0, i1) ),int(1.0)),int(1.0)) )] + getCharFromString(in0[:max(int(6.0), i2)].capitalize()[i0:], divInt(i0,int(9.0))).capitalize()[:i2][:int(74657.0)])\\ni2 -= int(61.0)\\nb0 = (\"\"\"\\\\\"\"\" + getCharFromString(getCharFromString(s0, divInt(int(7.0),( min(int(2.0), ( saveOrd(saveChr(divInt(max(abs(i2), max(( ( int(1.0) + abs(i1) ) * i1 ), min(( i2 + i1 ), min(len(getCharFromString(saveChr(( int(0.0) + int(9.0) )), divInt(i0,i2)).rstrip(s0.strip())), i0)))),i0))) * len(in1) )) * i2 )))[i1:], ( mod(i2,int(66.0)) * saveOrd(s0) ))).startswith(\"\"9\"\")\\nin0 = \"\"E\"\"\\nin2 = (\"\"y\"\" + \"\"^\"\")[:int(9.0)][saveOrd((s0 + (\"\"7\"\" + s1).capitalize())):]\\nif True:{:\\nif ( ( False and \"\"?\"\".capitalize() == (\"\")\"\" + \"\"6\"\")[( max(min(i0, mod(divInt(i1,i2),int(5.0))), i1) - abs(i1) ):].capitalize() ) and (\"\"jU2\"\" + \"\"Pv4i\"\") != s1 ):{:\\nin2 = (getCharFromString(getCharFromString(s2, max(i1, int(5.0))), i1) + \"\"y\"\".capitalize())[int(9.0):]\\ns1 = in2[len(\"\"NE\"\"):saveOrd(s2)]\\ns2 = (s1 + \"\")\"\".rstrip()[:divInt(int(8.0),i0)])[int(867.0):].rstrip()\\n:}else:{:\\nb2 = i2 \\le mod(max(( i1 - divInt(len(in2),i2) ), i0),len(\"\"3\"\"))\\nloopBreak% = 0\\nwhile (s2 + \"\"d\"\"[max(len(\"\":\"\"[( max(i1, max(( int(1.0) * i1 ), int(8.0))) - i2 ):]), int(8.0)):( len(s2) * i1 )].lstrip(\"\"9\"\".capitalize().capitalize())[divInt(min(i2, int(8.0)),int(6.0)):i2]) == in0:{:\\ni2 = divInt(saveOrd(\"\"7\"\"[i1:]),int(0.0))\\ns0 = s2[i1:divInt(mod(saveOrd(saveChr(int(0.0)).lstrip(getCharFromString(\"\"6\"\", int(6.0)).capitalize()[i1:int(2.0)][mod(int(5.0),int(3.0)):])),int(6.0)),int(0.0))]\\nb0 = \"\"7\"\".startswith(\"\"N\"\".capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += mod(divInt(i1,i1),( max(i2, ( min(saveOrd(\"\"t\"\"), int(4.0)) - ( mod(divInt(min(i0, min(i2, i0)),int(8.0)),min(divInt(( divInt(divInt(abs(max(i1, mod(int(7.0),( ( i2 + min(( i1 * i1 ), i1) ) + int(3.0) )))),i0),( mod(abs(int(4.0)),int(0.0)) - i2 )) - ( int(5.0) * int(9.0) ) ),int(6.0)), mod(i2,i2))) * i2 ) )) * ( int(7.0) + i1 ) ))\\ni2 = i2\\ns1 = \"\";5\"\"[int(792.0):( divInt(len(saveChr(( i1 + i0 ))),i0) * ( i1 * i2 ) )]\\nin1 = \"\"<=*\"\"[:mod(int(8.0),int(083.0))]\\n:}\\n:}else:{:\\ni0 -= int(2.0)\\n:}\\ni2 -= min(int(87.0), max(int(7.0), int(10.0)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 2, 2, 2, 2, 2, 0, 2, 1, 1, 1, 1, 0], [0, 2, 1, 2, 2, 0], [1, 2, 0, 2, 1, 1, 0], [0, 0], [0, 0, 0], [], [], [2, 3, 3], [5, 5], [2, 1, 2, 1, 2, 0], [0, 0], [2, 1, 3], [0], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 4, 9, 9, 0, 0, 7, 3, 1, 3, 3, 9, 8, 8, 7, 6, 2, 5, 3, 8, 1, 1, 4, 9, 0, 6, 7, 3, 0, 4, 6, 3, 5], [2, 0, 2, 1, 2, 1, 0, 1, 2, 2, 1, 2, 1, 1, 1, 0, 1, 2, 0, 1, 1, 2, 1, 1, 2, 1, 0, 1, 2, 0, 1, 2, 1, 0, 2, 0, 2, 1, 2, 2, 1, 0, 1, 2, 0, 2, 2, 0, 2, 1], [1, 1, 1], [2, 2, 0, 0, 0, 2, 0, 2, 3, 3, 2, 3, 3, 3, 2, 1, 2, 3, 0, 3, 3, 2, 2, 0, 2, 3, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 2, 3, 1, 1, 0, 0, 3, 3, 0, 1, 2, 1, 1, 3, 2, 0, 2, 2, 3, 0, 0, 0, 1, 0, 1, 0, 1, 3, 2, 2, 1, 0, 2, 2, 0, 1, 2, 2, 1, 1, 3, 3, 1, 2, 1, 1, 0, 2, 0, 2, 1, 2, 3, 1, 2, 3, 2, 1, 0, 2, 2, 3, 2, 2, 2, 0, 2, 2, 3, 0, 0, 0, 3, 0, 1, 0, 0, 1, 3, 1, 0, 1, 0, 2, 3, 1, 1, 2, 1, 3, 2, 1, 2, 2, 0, 2, 3, 1, 2, 3, 0, 2, 0, 0, 0, 0, 1, 2, 3, 3, 0, 1, 3, 3, 2, 0, 3, 0, 0, 2, 0, 3, 1], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [2, 3, 0, 0, 2, 1, 3, 0, 2, 2, 0, 3, 3, 4, 0, 0, 3, 3, 0, 1, 2, 0, 1, 0, 1, 4, 1, 2, 2, 3, 0, 1, 2, 4], [1, 1, 1, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 2, 2, 2, 1, 1, 0, 2, 1, 2, 1, 1, 1, 2, 0, 2, 2, 0, 2], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1], [5, 3, 1, 5, 4, 2, 2, 3, 3, 5, 5, 3, 4, 2, 5, 4, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [4, 0, 0, 4, 0, 3, 2, 3, 2, 1, 2, 0, 1, 3, 4, 0, 3, 1, 1, 4, 3, 2, 0, 2, 2, 4, 2, 2, 4, 0, 0, 2, 1, 2, 2, 0, 0, 1, 1, 1, 0, 4, 1, 2, 2, 4, 0, 0, 2, 0, 1], [3, 3, 0, 1, 2, 2, 2, 1], [0, 4], [2, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 2, 1], [1, 3, 1, 0, 3, 2, 3, 1, 3, 3], [0], [5, 7, 14], [0], [12, 31, 16, 30, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 13, 13, 6, 7, 2, 3, 0, 0, 3, 2, 6, 2, 3, 1, 0, 0, 1, 33, 33, 50, 3, 159, 45, 34, 31, 17, 18, 10, 2, 51, 8, 2, 14, 10, 1, 3, 1, 5], "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= ( ( i0 - i2 ) - i1 )\\nloopBreak% = 0\\nfor in2 in in0.lstrip():{:\\nloopBreak% = 0\\nwhile s1 == in2.rstrip(((\"\"f\"\"[:( i2 - divInt(abs(len(in1[divInt(min(min(abs(( int(2.0) + divInt(max(i1, len(\"\")\"\")),min(( ( i0 + ( abs(i1) + abs(int(4.0)) ) ) - i2 ), int(9.0))) )), i2), i1),i2):i1])),i1) )] + (getCharFromString(s2, mod(min(int(9.0), int(0.0)),i1)) + (\"\"h\"\" + \"\"A\"\")))[i0:] + saveChr(len((s2[len(in0.capitalize()[:i1][:int(0.0)].capitalize()[divInt(int(7.0),int(3.0)):saveOrd(in0)][:divInt(i2,( mod(min(i0, i1),i1) * int(1.0) ))]):i2] + \"\"`\"\"[:int(3.0)]))))):{:\\nif i1 != int(3.0):{:\\nloopBreak% = 0\\nwhile in2[:min(( mod(int(9.0),i1) + ( ( i2 + int(8.0) ) + ( ( int(8.0) + int(7.0) ) * len(in2) ) ) ), len(\"\"0\"\"))][int(6.0):( int(2.0) * int(5.0) )] not in \"\"-\"\":{:\\nloopBreak% = 0\\nwhile i1 != ( i0 * divInt(int(3.0),mod(min(int(8.0), ( max(mod(int(1.0),i1), divInt(( abs(( divInt(divInt(i2,( ( min(i0, i1) - i2 ) - max(i1, int(1.0)) )),i0) + i2 )) * int(4.0) ),min(int(9.0), i0))) - int(0.0) )),i2)) ):{:\\nin0 = \"\"o\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in s2:{:\\nb2 = \"\"_\"\".capitalize() != saveChr(( max(int(6.0), int(7.0)) * mod(int(3.0),saveOrd(in2)) ))[( int(0.0) - ( ( i1 - divInt(max(int(4.0), ( abs(i2) - ( i2 * i1 ) )),i0) ) + i1 ) ):][int(6.0):( abs(len(in1)) * i2 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = in2[:int(3.0)]\\ni0 *= min(max(( i2 + abs(i2) ), i0), mod(i2,saveOrd(\"\"_\"\")))\\ni1 *= int(5.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [1, 2, 0, 0, 1, 1, 0, 2, 0, 0, 2, 0, 0, 1, 0, 1], [1, 0, 0], [2, 0, 1, 1, 0, 1, 2, 2, 0, 2, 1, 1, 2], [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [], [], [2, 3, 0], [0], [2, 0, 1, 2, 2], [0], [0, 0, 4], [2], [], [], [1], [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 5, 5, 7, 5, 1, 3, 1, 8, 4, 3, 7, 0, 9, 5, 7, 1, 3, 0, 5, 0, 1, 3, 3, 6, 7, 0, 9, 2, 6, 7, 3, 2, 4, 7, 0, 8, 5, 5], [1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 2, 2, 1, 1, 0, 1, 1, 2, 0, 0, 2, 2, 1, 1, 2, 0], [1, 1, 1, 0, 1], [3, 1, 2, 0, 2, 2, 3, 0, 3, 2, 0, 3, 2, 1, 0, 1, 0, 1, 2, 0, 0, 0, 1, 3, 1, 3, 3, 3, 3, 0, 1, 1, 1, 1, 2, 3, 3, 0, 3, 3, 2, 3, 2, 0, 0, 3, 1, 3, 2, 1, 2, 0, 3, 1, 3, 0, 2, 2, 0, 0, 3, 3, 0, 0, 3, 2, 0, 0, 3, 3, 2, 0, 0, 3, 3, 1, 2, 0, 3, 1, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 1, 2, 3, 0, 1, 0, 3, 1, 2, 3, 1, 0, 2, 2, 1, 0, 3, 2, 3, 0, 2, 3, 1, 0, 0, 0], [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0], [2, 4, 4, 3, 0, 3, 2, 3, 0, 3, 4, 2, 0, 0, 2, 0, 0, 3, 2, 2, 1, 1, 3, 4, 1, 0, 2, 3, 2, 0, 4, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 2, 1, 2, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 4, 3, 1, 4, 5, 4, 4, 4, 1, 5, 1, 3, 4, 4, 0, 5, 2, 5, 2, 5, 3, 0, 2, 3, 4, 4], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0], [4, 4, 0, 0, 3, 2, 0, 0, 0, 4, 3, 1, 3, 0, 3, 0, 2, 2, 4, 0, 4, 4, 2, 1, 0, 2, 1, 1, 4, 2, 2, 0, 2, 1, 0, 1, 0, 2, 3, 2, 4, 0, 0, 0, 2, 0, 0, 2, 4, 0, 1, 4, 4, 0, 2, 0, 0, 2, 1, 3, 1, 4], [1, 3, 1, 0, 3, 2, 2, 0, 3, 3, 2, 1], [3, 3, 1, 2], [0, 1, 0, 1, 2, 0, 2, 1, 0, 1, 0, 1, 0, 1], [2, 2, 1, 2, 0, 2, 2, 0, 0, 0, 1, 1], [14, 23, 8, 9], [8, 11, 17], [2, 7, 2, 8, 9], []], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 3, 13, 2, 8, 0, 0, 3, 1, 5, 1, 3, 1, 0, 0, 1, 39, 39, 39, 5, 116, 25, 33, 14, 15, 28, 12, 2, 62, 12, 4, 14, 12, 4, 3, 5, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = saveChr(abs(int(05.0)))\\nif s1.lstrip(in1) in (in0[( i1 + divInt(divInt(saveOrd(s1),i1),saveOrd(in1)) ):divInt(i0,len(saveChr(mod(int(57.0),i0))))] + (\"\"2\"\" + (in2 + (in1 + getCharFromString(in1, int(51.0))[i2:int(3.0)][:( i1 + i0 )])))):{:\\nb2 = not i0 \\l int(1.0)\\ni0 -= min(int(8.0), len(\"\"7\"\"[:abs(len(in1))].capitalize().lstrip(\"\"i\"\"[min(i0, int(4.0)):])))\\ni0 += int(3.0)\\nres0 = \"\"2O\"\" in s1[int(7.0):][int(0.0):( len(\"\"8\"\"[:saveOrd(in2)]) + i0 )].capitalize()\\ni1 -= abs(min(mod(min(mod(i1,i0), abs(int(9.0))),min(divInt(int(5.0),divInt(i0,min(int(7.0), len(\"\"9\"\")))), i1)), ( mod(i1,i1) + abs(abs(i1)) )))\\nloopBreak% = 0\\nfor s1 in in0:{:\\nin1 = (getCharFromString(in1, i1)[:max(mod(i0,i0), max(len(s0), ( i2 - i2 )))] + in2)[saveOrd(s2[max(int(1.0), divInt(i1,min(int(3.0), int(0.0)))):int(5.0)]):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = s2\\nloopBreak% = 0\\nfor in2 in in0.rstrip()[:i0]:{:\\nb0 = \"\"X\"\".startswith(s0.capitalize().strip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns2 = in0[( mod(int(01.0),i1) + ( abs(int(3.0)) * mod(len(in1),i1) ) ):int(36.0)]\\ni2 = i0\\n:}\\ni0 -= abs(int(709.0))\\nin1 = \"\"IJl\"\"[:mod(min(int(267.0), i2),( ( int(3247085.0) * i2 ) - saveOrd((\"\"r\"\" + saveChr(mod(max(i1, ( min(int(5.0), i1) - i2 )),i0)))) ))]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [2], [], [], [], [], [], [5], [2], [0], [0], [], [], [], [0], [1, 1], [5, 8], [0], [], [2, 1, 2, 0], [1], [], [], [0], [5, 0, 0], [0, 0, 0, 1], [], [0, 1, 0], [], [], [], [1, 0, 3, 1], [0], [16, 21], [], [7]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 3, 0, 0, 0, 4, 1, 2, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2 in \"\"qA$v\"\":{:\\ns0 = s0\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [0, 2, 0, 0], [0], [2, 2, 1], [0], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1, 1], [1, 8, 4, 8], [0, 1, 2, 1, 2, 2, 1], [1], [3, 0, 0, 0, 1, 3, 2, 2, 1, 0, 2, 0, 0], [0, 1, 1], [1, 2], [0, 2], [1, 0], [2, 3, 3, 3, 3, 3], [1, 1, 1], [0], [0, 3, 0, 2, 2, 2, 4, 3, 1, 4, 3, 1, 0, 1], [3, 2], [2], [2, 2, 1], [2, 3, 1], [], [22], [8], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 7, 1, 13, 3, 2, 2, 2, 6, 3, 1, 14, 2, 1, 3, 3, 0, 1, 1, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\nloopBreak% = 0\\nfor in0 in (in0 + (\"\"8\"\" + (\"\"\"\" + in0).capitalize()).strip()[:max(i0, i1)][i2:][int(184.0):]):{:\\nin0 = \"\"w\"\"\\ni1 += abs(( mod(int(8.0),i2) * divInt(i2,i1) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [2, 0, 2, 0, 1, 0, 1, 2, 2, 2, 2, 1, 1, 0, 0, 2, 2, 2, 2, 1, 1, 2, 1, 0, 2, 2, 1, 0, 1, 2, 1], [1, 2, 1, 2, 1, 2, 0, 1, 1, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [0, 2, 2, 0, 2, 3], [0, 4, 4, 4, 3], [0, 2, 1, 2, 1, 2, 1, 2, 2, 0, 1, 2, 1, 2, 2, 0, 2, 2], [0, 0, 0, 0, 0], [2, 0, 4, 2, 4, 3, 1, 1, 5, 3], [1, 1, 3], [1], [0, 0], [1, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 3, 0, 0, 5, 9, 7, 3, 5, 1, 4, 3, 9, 3, 2, 5, 5, 0, 2, 5, 1, 9, 0, 2, 0, 6, 2, 5, 9, 8, 0, 4, 5, 7, 2, 6, 0, 5, 2, 6, 8, 8, 1, 0, 5, 8, 1, 1, 5, 1, 8, 1, 5, 4, 0, 0, 2, 3, 0, 1, 1, 5, 0, 8, 8, 6, 7, 6, 1, 3, 6, 3, 4, 9, 1, 8, 4, 6, 4, 2, 9, 3, 0, 7, 3, 3, 0, 8, 5, 6, 1], [2, 1, 2, 2, 0, 1, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1, 1, 0, 2, 2, 0, 0, 1, 1, 1, 1, 2, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 2, 2, 1, 0, 2, 2, 2, 0, 2, 1, 2, 1, 0, 0, 0, 0, 2, 0, 1, 1, 1, 2, 2, 0, 0, 2, 0, 1, 1, 2, 2, 1, 1, 0, 2, 1, 0, 0, 0, 2], [1, 1, 0, 0, 0, 1], [2, 1, 0, 1, 3, 2, 3, 0, 2, 0, 3, 2, 3, 1, 2, 1, 1, 3, 2, 0, 0, 3, 2, 3, 1, 3, 2, 0, 1, 0, 0, 3, 0, 3, 0, 0, 1, 1, 3, 0, 0, 0, 2, 3, 3, 2, 2, 2, 2, 1, 3, 0, 1, 1, 0, 1, 0, 3, 1, 2, 3, 0, 2, 3, 0, 1, 1, 3, 2, 1, 1, 1, 3, 1, 3, 1, 0, 3, 0, 3, 1, 1, 3, 3, 0, 1, 0, 3, 1, 3, 3, 2, 1, 3, 0, 3, 1, 2, 2, 3, 1, 1, 1, 0, 3, 2, 2, 3, 2, 3, 3, 0, 0, 3, 1, 2, 0, 2, 1, 0, 0, 1, 0, 0, 1, 3, 2, 2, 0, 0, 2, 3, 3, 3, 2, 1, 2, 2, 2, 0, 2, 0, 0, 0, 2, 3, 1, 3, 1, 2, 0, 3, 1, 0, 1, 3, 3, 1, 2, 1, 2, 2, 1, 2, 1, 3, 1, 0, 3, 2, 1, 0, 1, 2, 3, 0, 3, 1, 0, 0, 3, 2, 0, 1, 2, 0, 2, 3, 3, 0, 0, 2, 2, 3, 2, 2, 2, 3, 1, 2, 2, 0, 1, 1, 0, 2, 3, 2, 3, 3, 3, 3, 2, 1, 1, 3, 1, 0, 3, 0, 0, 2, 0, 1, 0, 3, 0, 0, 3, 0, 2, 0, 3, 0, 1, 0, 3, 2, 0, 0, 0, 1, 3, 2, 1, 3, 2, 0, 2, 0, 3, 0, 0, 3, 0, 2, 2, 2, 1, 3, 0, 2, 2, 1, 2, 3, 1, 1, 1, 3, 1, 3, 0, 2, 3, 1, 1, 2, 1, 0, 0, 2, 3, 1, 2, 0, 3, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 3, 2, 1, 1, 0, 2, 1, 2, 3, 0, 2, 1, 2, 3, 1, 1, 3, 1, 2, 0, 1, 1], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [2, 1, 2, 2, 0, 1, 3, 0, 1, 2, 3, 1, 1, 0, 2, 0, 2, 4, 3, 2, 3, 3, 3, 1, 2, 1, 2, 3, 2, 4, 4, 4, 1, 0, 3, 1, 3, 2, 2, 4, 1, 4, 1, 2, 0, 2, 3, 3, 4, 3, 4, 3, 2, 4, 0, 3, 4, 4, 0, 4, 0, 0, 2, 1, 0, 4, 3, 1, 0, 0, 1, 3, 1, 4, 4, 1, 1, 4, 4], [2, 2, 1, 0, 2, 2, 2, 0, 0, 2, 0, 0, 1, 1, 0, 2, 0, 0, 0, 2, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 0, 2, 0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [3, 0, 4, 2, 3, 0, 4, 5, 5, 4, 5, 0, 4, 0, 4, 5, 0, 1, 0, 5, 2, 2, 4, 3, 2, 0, 2, 2, 5, 1, 2, 5, 2, 2, 0, 5, 2, 4, 2, 5, 5, 5], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0], [2, 3, 1, 0, 0, 1, 4, 4, 1, 3, 3, 4, 3, 1, 4, 1, 1, 2, 4, 4, 1, 4, 3, 4, 1, 4, 1, 0, 0, 2, 4, 2, 4, 2, 0, 4, 4, 0, 0, 0, 0, 4, 2, 2, 0, 2, 0, 1, 0, 4, 1, 1, 2, 2, 2, 0, 0, 0, 1, 2, 4, 0, 0, 2, 0, 2, 4, 1, 2, 0, 2, 1, 1, 2, 4, 2, 2, 0, 2, 2, 2, 2, 2, 2, 4, 1, 1, 0, 4, 1, 4, 2, 1, 4, 1, 4, 0, 4, 4, 4, 0, 3, 1, 4, 3, 3, 3, 4, 2, 4, 1, 0, 0, 1, 4, 1, 4, 0, 3, 3, 1, 4, 1, 1, 2, 4, 2, 4, 0, 0, 0, 0, 1, 2, 3, 2, 0, 2, 1, 0, 2, 4, 4, 4, 4, 1, 1, 0], [2, 1, 2, 1, 0, 3, 3, 0, 0, 1, 1, 2, 3, 1, 0, 0, 3, 1, 1, 1, 0, 0, 3, 1, 0, 0, 1, 1, 2, 3, 2, 2, 0, 0, 0, 2, 0, 0], [0, 0, 1, 2, 3, 4], [1, 1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 0, 1, 2, 0, 0, 0, 2, 1, 2, 1, 1, 1, 2, 0, 1, 2, 1, 0, 0, 1, 0, 2], [1, 1, 2, 0, 0, 1, 1, 0, 1, 1, 0, 1, 3, 2, 3, 1, 1, 2, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 1, 3, 0, 2, 1, 2, 3, 3, 3], [9, 19, 15, 10, 11, 15, 8, 10, 2, 16, 8, 3, 12], [8, 21, 6, 23, 18, 7, 5, 0, 9, 4, 2, 18], [3, 4, 5, 9, 4, 0], [10, 23, 0, 9, 27, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 31, 31, 14, 17, 4, 7, 0, 0, 6, 5, 18, 5, 10, 3, 1, 2, 7, 91, 91, 86, 6, 319, 79, 79, 47, 35, 42, 37, 4, 148, 38, 6, 33, 37, 13, 12, 6, 6], "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif True:{:\\nb0 = (\"\"i\"\" + in0)[:( int(03.0) * i2 )] == s0\\nloopBreak% = 0\\nwhile int(00.0) \\l abs(mod(max(i1, divInt(i2,abs(( abs(int(5.0)) * mod(int(9.0),int(7.0)) )))),min(( i2 - i0 ), max(divInt(len(\"\"v\"\"),int(3.0)), min(mod(i1,int(5.0)), i0))))):{:\\nb2 = saveChr(i2).capitalize() in \"\"3\"\"\\ni0 += max(i2, abs(i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= i2\\n:}else:{:\\nb2 = int(1.0) \\le int(43.0)\\n:}\\nif (((\"\"J\"\" + saveChr(len(\"\"T\"\"))).capitalize() + \"\"gx\"\") + getCharFromString(\"\"Ps\"\".lstrip(), i1)[:i0]).startswith((getCharFromString(\"\"h\"\", i1) + getCharFromString(\"\"K\"\", ( max(max(( mod(mod(divInt(int(9.0),min(i1, int(3.0))),int(2.0)),i0) * int(5.0) ), i2), abs(int(50.0))) * divInt(min(i2, ( abs(i0) + int(2.0) )),int(5190.0)) ))).lstrip()):{:\\nloopBreak% = 0\\nwhile saveOrd(in1) \\le ( int(2.0) + int(0.0) ):{:\\nif s2 == saveChr(int(6.0))[:len(saveChr(int(2.0))[abs(int(5.0)):])]:{:\\nloopBreak% = 0\\nwhile in0[i0:len(s0.rstrip().capitalize())].startswith(in1):{:\\ni1 = i1\\nin2 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = True\\nin1 = in2\\n:}else:{:\\nloopBreak% = 0\\nfor s0 in saveChr(len(in1[int(9.0):][int(8.0):len(s0[max(i1, int(0.0)):])])):{:\\nif i1 \\le abs(int(4.0)):{:\\nif \"\"f\"\" != in1:{:\\nloopBreak% = 0\\nfor in2 in getCharFromString(\"\"\"\\\\\"\"\", max(abs(divInt(int(5.0),len(\"\"4\"\"))), i2)):{:\\ni0 = abs(int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( divInt(saveOrd(s0[int(2.0):][int(6.0):int(0.0)][:i2]),saveOrd(s1)) * ( ( saveOrd(s0) + divInt(max(min(i0, i0), len(\"\">\"\")),int(5.0)) ) + ( i0 - ( int(2.0) - i1 ) ) ) ) \\ge i0\\nif getCharFromString(in2, int(6.0))[i1:i0] not in s2:{:\\ns2 = in1[:int(8.0)]\\n:}\\ni0 = max(divInt(( i0 + i0 ),( len(\"\"a\"\".strip()[abs(abs(( int(8.0) * divInt(mod(mod(i0,( i2 + i2 )),i0),( saveOrd(in0[int(1.0):max(int(0.0), divInt(i2,saveOrd(\"\"j\"\"[int(5.0):i0])))]) + int(8.0) )) ))):]) + max(abs(int(1.0)), mod(int(1.0),( ( int(5.0) * mod(int(1.0),min(int(8.0), i0)) ) + abs(mod(int(1.0),i2)) ))) )), int(5.0))\\n:}\\nloopBreak% = 0\\nfor s2 in \"\"5L\"\":{:\\nloopBreak% = 0\\nfor s0 in saveChr(divInt(len(s2[:i2][len(saveChr(int(4.0))[i1:i0][saveOrd(\"\"P\"\"):][:mod(i2,int(0.0))][:mod(i2,divInt(len(\"\"I\"\"),saveOrd(s2)))][:i2][i0:]):]),( mod(len(saveChr(( ( ( abs(int(0.0)) + ( ( i2 - int(2.0) ) - int(3.0) ) ) - i1 ) - mod(saveOrd(\"\"K\"\"),mod(min(len(getCharFromString(\"\"C\"\"[:saveOrd(getCharFromString(\"\"9\"\", saveOrd(in2.lstrip(saveChr(mod(int(0.0),int(1.0)))))))], min(int(1.0), i2))), saveOrd(getCharFromString(getCharFromString(s1, i1), i0))),( i0 * int(5.0) ))) ))),i0) * min(i0, i2) )))[min(i0, ( i1 - abs(i1) )):int(0.0)]:{:\\ni1 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = (\"\"Q\"\" + saveChr(max(( i2 - i0 ), i0)))\\nres0 = (((saveChr(int(8.0)) + \"\"I\"\".capitalize()[min(divInt(int(8.0),saveOrd(in2)), ( i2 - ( i0 * len(s2) ) )):]) + \"\"e\"\") + \"\"D\"\".rstrip(s2.capitalize())) not in ((\"\"c\"\" + \"\"\"\".capitalize()) + \"\"M4\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif ( getCharFromString(getCharFromString(s0, i1)[i1:max(i2, ( ( ( int(6.0) - min(i2, ( divInt(int(7.0),mod(min(int(6.0), int(1.0)),int(3.0))) - max(int(6.0), len(in2)) )) ) - i1 ) - mod(max(int(3.0), int(4.0)),mod(int(9.0),i1)) ))], i0)[:divInt(saveOrd(s2),int(18.0))].endswith(in1) or \"\"s0\"\" != (s2[:( i2 - saveOrd(\"\"&\"\"[( int(4.0) * ( i1 + int(6.0) ) ):int(4.0)]) )] + in2)[mod(int(29.0),( i0 * max(( int(3.0) + int(0.0) ), i0) )):( int(73.0) + ( max(i0, ( int(3.0) - ( saveOrd(getCharFromString(getCharFromString(getCharFromString(\"\"\\\\\\\\\"\", int(0.0)), int(8.0)).capitalize(), saveOrd(\"\"=\"\"))[int(5.0):]) - ( i2 + int(6.0) ) ) )) - int(1.0) ) )] ):{:\\nin2 = in2\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1], [4, 3, 5, 3, 7, 7, 8, 1, 0, 6, 5, 5, 7, 6, 7, 5, 9], [0, 2, 0, 2, 2, 1, 0, 1, 0, 1, 2], [0, 0], [0, 0, 2, 0, 2, 0, 1, 1, 1, 2, 1, 1, 3, 2, 3, 0, 2, 3, 2, 0, 2, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1], [1, 3, 0], [2, 1, 2, 2], [1, 0, 0], [2, 4], [1], [], [2, 2, 2, 3, 4, 1, 0, 3, 4, 4], [0, 1, 1], [], [0, 0, 0], [3], [], [], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 11, 1, 28, 7, 3, 4, 3, 2, 1, 0, 10, 3, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (getCharFromString(\"\"&\"\", i0) + in1)[i2:( i0 * ( i2 - int(4.0) ) )][int(35377.0):int(81.0)][( int(0655.0) * int(7.0) ):max(mod(len((saveChr(i2) + saveChr(divInt(min(( i1 * divInt(int(6.0),int(7.0)) ), i0),int(59.0))))),i1), i0)]\\ni1 = i2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [], [], [], [], [], [], [], [1, 1], [9, 4], [1, 0], [0], [0, 1, 1], [1], [], [], [1], [3], [1], [], [2, 1], [], [], [2], [1], [], [0], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"a\"\"[i1:]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1], [1, 2, 2, 0, 1], [2, 0], [1, 0, 2], [0], [0], [], [], [2], [], [2, 0], [], [3], [1], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 7, 0, 5, 2, 0, 0, 3, 2, 8, 8, 5], [0, 1, 2, 2, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 1, 2], [1], [0, 3, 2, 3, 1, 0, 1, 2, 2, 3, 3, 2, 1, 3, 2, 0, 3, 0, 3, 0, 2, 3, 3, 1, 0, 0, 3, 3, 2, 2, 0, 0, 1, 1, 0, 3, 3, 1, 0, 2, 2, 2, 3, 1, 2, 0, 0, 1, 1, 0, 0, 2, 3, 1], [1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [2, 1, 1, 2, 2, 4, 0, 4, 4, 1, 0, 0, 3, 2, 4], [0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 0, 1, 3, 3, 0, 3], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0], [0, 3, 4, 0, 2, 4, 1, 4, 1, 3, 2, 4, 2, 1, 4, 4, 0, 4, 0, 3, 3, 1, 4, 4, 4, 2, 4, 2, 1, 3, 0, 1, 4, 1], [1, 3, 3, 2, 1, 2, 3, 1, 2, 1, 2, 3], [3, 5, 0, 2], [0, 2, 2, 1, 0], [0, 3, 1, 0, 1, 2, 0, 1, 1, 2], [1, 6, 14], [5, 18, 13, 18], [2, 0], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 12, 12, 16, 1, 54, 13, 15, 5, 9, 7, 10, 1, 34, 12, 4, 5, 10, 3, 4, 2, 1], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\nloopBreak% = 0\\nwhile s1 != (saveChr(abs(divInt(max(int(2.0), i2),int(7.0)))) + s0):{:\\nloopBreak% = 0\\nfor s1 in \"\"B\"\".lstrip(\"\">fG\"\".strip((\"\"s\"\"[mod(divInt(max(abs(mod(int(0.0),abs(( i2 + saveOrd(saveChr(i0)) )))), min(i2, divInt(saveOrd(in0.capitalize()),saveOrd(in0.lstrip())))),int(5.0)),i2):].capitalize()[i2:] + ((\"\"2\"\" + saveChr(max(min(mod(( i2 + i1 ),int(2.0)), int(0.0)), i0))) + saveChr(min(len(\"\"O\"\"[int(0.0):i2].capitalize()[:( ( mod(abs(int(3.0)),mod(i2,i2)) + int(2.0) ) + int(8.0) )]), i1)).capitalize()))))[i2:mod(saveOrd((s0 + \"\"n\"\")),int(85.0))]:{:\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = \"\"s0\"\".strip()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [0], [], [2], [], [2], [], [], [], [], [1, 1, 0, 1, 1], [0, 9, 8, 1, 4], [2, 0, 0, 2, 2, 0], [1], [2, 2, 0, 1, 0, 3, 1, 3, 0, 1, 0, 0, 1], [0, 0], [1, 3], [2, 2, 1], [], [5, 0, 3], [1, 1, 1], [], [4, 3, 0, 4, 0, 4, 3, 2, 3, 3, 3, 1, 4, 1, 4, 0, 4, 1], [1, 3, 0, 1, 0, 3], [0, 1], [0], [1, 0, 3], [10], [20], [], [10]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 6, 1, 13, 2, 2, 3, 0, 3, 3, 0, 18, 6, 2, 1, 3, 1, 1, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveChr(( ( i2 * int(0.0) ) * i0 )) == (in2 + s0.lstrip())\\ni0 -= max(int(9.0), len(getCharFromString(((((\"\"u\"\" + saveChr(i2)) + \"\"K\"\") + getCharFromString(in0, int(81.0)))[i2:i0] + \"\"\"\\\\\"\"\".rstrip()), int(4.0))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [2], [3], [1, 2], [0], [2], [], [], [], [], [1], [2], [1, 1, 1], [], [0, 1, 3, 0, 0, 3], [], [3, 4], [], [], [5], [1, 0, 0, 1, 0, 1], [], [1, 2, 1, 2, 4, 0, 1], [0], [], [1, 0], [1, 0, 3, 2, 3, 3], [18], [8], [7], [24, 27, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 1, 1, 3, 0, 6, 0, 2, 0, 0, 1, 6, 0, 7, 1, 0, 2, 6, 1, 1, 1, 3], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 \\ge int(2.0):{:\\nb2 = \"\"i\"\" == \"\"S?7\"\"[:len(getCharFromString(in2, i1)[i1:saveOrd(\"\"\\\\\\\\(\"\")])]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 2, 0], [0], [2, 2, 2, 1, 2], [0], [0, 0, 0, 0], [], [], [3], [], [2], [], [4], [], [], [], [], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [1, 7, 9, 0, 0, 4, 6, 7, 1, 7, 2, 4, 1, 8, 8, 4, 7, 2, 8, 8, 3, 7, 8, 2, 0, 7, 9, 4, 6, 7, 1, 1, 5, 7, 4, 5, 0, 8, 1, 1, 7, 4, 7, 3, 0, 8, 6, 2, 9, 4, 8, 4, 9, 7, 5, 7, 4, 3, 0, 3, 4, 1], [0, 2, 0, 1, 2, 2, 0, 0, 0, 0, 1, 1, 0, 2, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 2, 2, 1, 2, 0, 0, 1, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 1, 0, 2, 2, 2, 1, 0, 0, 1, 0, 2, 2], [1, 1], [0, 2, 3, 0, 1, 0, 3, 1, 3, 3, 2, 0, 3, 1, 3, 0, 0, 3, 1, 3, 0, 1, 2, 1, 1, 3, 3, 1, 1, 0, 2, 0, 1, 0, 3, 1, 2, 3, 3, 3, 2, 1, 3, 1, 0, 0, 3, 3, 2, 1, 3, 3, 1, 0, 2, 3, 1, 2, 1, 2, 3, 2, 2, 2, 0, 1, 2, 3, 3, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 2, 3, 3, 0, 0, 0, 1, 2, 3, 1, 2, 1, 2, 2, 1, 2, 2, 0, 2, 1, 3, 3, 2, 0, 3, 0, 1, 3, 1, 3, 0, 3, 2, 2, 2, 2, 0, 3, 0, 0, 2, 3, 0, 3, 2, 2, 2, 0, 0, 1, 2, 2, 2, 2, 0, 1, 3, 1, 0, 0, 2, 2, 0, 0, 3, 0, 1, 2, 3, 2, 1, 0, 0, 0, 3, 0, 3, 3, 2, 0, 0, 0, 1, 3, 2, 3, 0, 2, 3, 2, 2, 2, 1, 3, 1, 3, 1, 2, 0, 3, 1, 0, 3, 0, 3, 3, 3, 1, 0, 1, 1, 3, 1, 1, 2, 1, 3, 1, 3, 3, 0, 0, 2, 1, 1, 2, 3, 3, 0, 1, 3, 0, 2, 0, 1, 2], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 2, 0, 3, 0, 4, 4, 4, 2, 3, 3, 2, 2, 2, 1, 4, 2, 3, 4, 4, 1, 3, 1, 2, 4, 3, 1, 2, 0, 1, 2, 1, 4, 1, 4, 2, 0, 2, 3, 4, 1, 4, 4, 1, 4, 4, 4, 4, 0, 3, 0, 1, 0, 3], [0, 1, 0, 1, 1, 0, 2, 1, 1, 1, 2, 2, 1, 0, 1, 1, 2, 2, 1, 1, 2, 0, 0, 0, 1, 2, 2, 2, 1, 1, 0, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [2, 3, 1, 1, 5, 3, 2, 1, 4, 0, 1, 3, 5, 5, 4, 2, 2, 2, 4, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0], [3, 2, 3, 3, 4, 2, 3, 4, 2, 4, 3, 2, 4, 2, 2, 4, 4, 0, 0, 4, 1, 1, 1, 4, 4, 2, 1, 3, 4, 2, 4, 2, 0, 4, 2, 4, 1, 2, 0, 0, 4, 4, 1, 4, 3, 4, 2, 4, 0, 4, 1, 1, 0, 0, 0, 0, 2, 1, 2, 4, 2, 0, 1, 1, 0, 3, 3, 2, 3, 0, 1, 1, 1, 2, 3, 3, 4, 1, 2, 2, 1, 1, 2, 3, 0, 4, 1, 3, 0, 1, 1, 0, 4, 1, 1, 0], [2, 3, 1, 2, 2, 2, 3, 0, 1, 0, 0, 0, 3, 0, 3, 1, 1, 2, 1, 0], [1, 0, 1, 5], [1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 0, 1, 1], [3, 3, 2, 3, 0, 1, 0, 3, 1, 0, 3, 0, 3, 3, 3, 0, 2, 0, 1, 0, 0, 3, 3, 1, 2, 1, 2, 1, 0], [11, 8, 6, 25, 24, 14, 25, 8], [6, 0, 21, 2, 22, 18], [6, 0, 4, 3, 2], [0, 30, 0, 25, 5, 17, 8, 24, 3, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 12, 0, 46, 6, 15, 4, 2, 6, 7, 0, 44, 16, 4, 11, 7, 2, 1, 1, 3], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = ((((saveChr(i0)[( max(i2, int(1.0)) + i0 ):abs(int(7.0))].rstrip() + (in0.capitalize().capitalize()[abs(min(( i1 - len(s1) ), int(9.0))):][:min(i2, i2)].capitalize()[saveOrd(\"\"\"\".lstrip()):] + \"\"_\"\"))[int(0.0):].capitalize() + \"\"6\"\") + getCharFromString(saveChr(saveOrd(\"\"L\"\"[i0:])), int(0467.0)))[:( int(1.0) + int(7.0) )] + (getCharFromString(getCharFromString(s1[saveOrd(getCharFromString(\"\"g\"\".rstrip()[abs(int(2.0)):], int(4.0))):i0], divInt(i0,int(1.0)))[i0:len(in2[int(8.0):])], divInt(len(in0),abs(abs(( int(8.0) - abs(int(4.0)) ))))) + getCharFromString(\"\"I\"\".strip(saveChr(i1)), i1)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0, 0, 1], [1], [0, 2], [], [0], [], [], [2], [1], [0, 2, 1], [0], [0], [2], [], [], [0], [], [], [1, 2], [], [3, 0, 3, 0], [], [3, 4], [], [], [1, 1, 4, 5, 3, 2], [0, 1], [], [2, 1, 0, 0, 0, 0, 1], [], [], [1, 1], [3, 1], [], [14], [], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 2, 0, 4, 0, 0, 1, 2, 0, 1, 0, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not \"\"[o\"\"[:len(s1)] in s1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1], [1, 2, 2, 0, 2, 0, 2, 2, 2, 2, 1, 1, 2, 0, 2, 1, 1, 1, 2, 0, 0], [2, 1, 1, 1, 2, 0, 1, 0, 2, 2], [1, 1, 1, 1, 1, 2, 1, 0, 1, 2, 1], [0, 0], [0, 0, 0, 0, 0], [], [], [0, 3], [1, 0, 2, 0, 0], [2, 0, 1, 1, 2, 1, 0, 1, 1, 2], [0, 0, 0, 0, 0], [5, 2, 2], [0, 2], [], [], [0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 6, 2, 1, 1, 2, 1, 5, 1, 3, 7, 7, 3, 1, 2, 3, 6, 3, 1, 4, 5, 6, 6, 7, 8, 3, 1, 7, 1, 2, 5, 3, 5, 0, 3, 5, 7, 6, 7, 9, 7, 6, 6, 5, 2, 0, 7, 0, 3, 6, 1, 8, 8, 3, 5, 4, 4, 6, 6], [0, 0, 0, 2, 2, 1, 2, 2, 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 2, 2, 1, 1, 0, 0, 1, 0, 1, 0, 2, 0, 0, 0, 2, 1, 2, 0, 1, 2, 0, 2, 2, 0, 0, 0, 2, 1, 2, 0, 2, 1, 2, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 1, 2, 3, 2, 3, 3, 1, 1, 1, 3, 3, 2, 0, 2, 0, 1, 0, 3, 0, 0, 3, 3, 2, 3, 1, 2, 2, 2, 2, 3, 1, 2, 0, 3, 2, 0, 1, 0, 0, 1, 2, 2, 0, 2, 1, 3, 3, 1, 0, 2, 0, 0, 1, 2, 0, 1, 3, 0, 3, 0, 3, 1, 3, 2, 0, 2, 1, 1, 2, 2, 3, 3, 2, 1, 1, 0, 1, 2, 3, 3, 0, 2, 3, 3, 2, 1, 2, 2, 3, 3, 1, 1, 3, 3, 0, 2, 2, 1, 3, 1, 2, 1, 2, 0, 1, 0, 2, 0, 0, 3, 1, 1, 0, 0, 3, 2, 1, 3, 0, 1, 1, 1, 2, 3, 2, 0, 1, 1, 2, 3, 3, 3, 3, 0, 2, 0, 2, 1, 1, 0, 2, 1, 2, 3, 0, 3, 1, 0, 3, 3, 3, 1, 2, 1, 2, 2, 0, 0, 3, 2, 1, 3, 2, 3, 3, 1, 0, 1, 0, 0, 3, 2, 1, 2, 2, 1, 1, 0, 0, 0, 2, 1, 0, 3, 0, 2, 3, 3, 2, 3, 1, 2, 1, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [2, 2, 0, 1, 3, 1, 0, 2, 3, 1, 1, 3, 2, 2, 4, 0, 3, 2, 1, 2, 0, 4, 4, 4, 1, 2, 1, 3, 1, 0, 1, 3, 1, 3, 4, 0, 2, 0, 2, 4, 0, 1, 3, 0, 4, 4, 3, 4, 1, 1], [1, 2, 2, 0, 1, 1, 2, 0, 2, 0, 0, 0, 1, 2, 0, 1, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0], [5, 0, 4, 5, 3, 2, 0, 2, 3, 5, 0, 1, 1, 2, 2, 3, 5, 1, 4, 1, 1, 3, 2, 1], [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [3, 0, 1, 1, 2, 0, 3, 3, 3, 1, 3, 2, 2, 1, 2, 2, 0, 1, 1, 2, 4, 2, 1, 4, 1, 1, 4, 2, 1, 4, 0, 3, 3, 0, 0, 0, 4, 4, 1, 0, 0, 4, 1, 1, 4, 2, 2, 4, 1, 4, 2, 0, 0, 0, 3, 2, 3, 0, 1, 3, 2, 3, 0, 1, 0, 4, 3, 0, 0, 2, 0, 0, 0], [1, 1, 2, 0, 3, 1, 2, 2, 2, 1, 2], [2], [1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 2], [0, 2, 1, 0, 0, 3, 3, 3, 0, 3, 3, 0, 0, 0, 3, 3, 3, 3, 0, 3], [20, 18, 3, 6, 1, 8, 13, 15], [3], [5], [26, 12, 0, 20, 18, 16, 15, 5, 0, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 21, 21, 10, 11, 2, 5, 0, 0, 2, 5, 10, 5, 3, 2, 0, 0, 4, 59, 59, 54, 8, 201, 51, 50, 23, 32, 24, 20, 2, 73, 11, 1, 14, 20, 8, 1, 1, 10], "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= int(1.0)\\nloopBreak% = 0\\nwhile (in2 + \"\"U\"\").endswith(\"\"5dSD[\"\"):{:\\nif b0:{:\\ni0 *= i0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(6.0) \\g int(2.0):{:\\ni2 = int(1.0)\\nif ( abs(mod(abs(min(int(1.0), int(2.0))),int(1.0))) * max(len(s0[:( i2 + divInt(i1,int(5.0)) )]), i2) ) \\l max(i2, i1):{:\\nloopBreak% = 0\\nwhile (((\"\")\"\" + (\"\"\"\"[min(abs(( len(in1[int(1.0):divInt(( mod(divInt(max(int(3.0), ( i0 - max(( i2 - int(7.0) ), i0) )),i1),int(7.0)) * ( ( i0 + divInt(int(3.0),len(\"\"G\"\")) ) * abs(int(1.0)) ) ),i2)][mod(i0,i1):int(2.0)]) + divInt(i0,int(3.0)) )), abs(i2)):][saveOrd(\"\";\"\"):i2] + saveChr(min(int(6.0), len(\"\"/\"\"[:mod(i1,mod(int(3.0),int(1.0)))])))[( mod(abs(max(mod(int(4.0),int(5.0)), i1)),int(6.0)) + mod(abs(min(i0, divInt(saveOrd(saveChr(saveOrd(\"\"B\"\"))),mod(int(6.0),mod(mod(saveOrd(\"\"I\"\"),max(int(7.0), int(8.0))),abs(max(i0, ( divInt(int(3.0),len(\"\"N\"\"[int(1.0):( int(7.0) + ( i1 - int(1.0) ) )].capitalize())) * i0 )))))))),divInt(i1,i0)) ):max(int(2.0), int(5.0))])) + getCharFromString(in2, i2)) + ((in0 + s2) + s0)) == saveChr(i0).strip():{:\\nloopBreak% = 0\\nfor s2 in \"\"-\"\":{:\\nif min(divInt(int(3.0),max(i0, int(5.0))), int(0.0)) == int(3.0):{:\\ni0 = ( len(in0) + divInt(i2,int(5.0)) )\\n:}else:{:\\ni1 -= int(7.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in s0:{:\\ns1 = \"\",\"\".capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not mod(max(len(\"\"\"\"\"), saveOrd(\"\"\"\".capitalize()[min(i2, divInt(i0,( int(6.0) - int(7.0) ))):i1][mod(int(9.0),divInt(abs(i2),min(int(7.0), i0))):abs(saveOrd(saveChr(min(int(6.0), ( int(6.0) - ( divInt(i2,i2) * max(divInt(int(5.0),len(s1[mod(min(saveOrd(s2), int(2.0)),i0):int(0.0)])), i0) ) )))))].capitalize())),i0) \\l saveOrd(s2):{:\\ni2 = ( int(7.0) - divInt(( int(0.0) + int(3.0) ),i1) )\\nres0 = i2 \\l i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = mod(int(618.0),i1)\\n:}\\n:}\\nloopBreak% = 0\\nwhile ((in0 + \"\"P\"\")[len(((in2 + \"\"?\"\")[:i2] + s1)):] + (in1 + s1).capitalize()) == s1[( saveOrd(in0) - max(mod(max(int(8.0), divInt(int(35.0),int(44.0))),i0), i1) ):]:{:\\ns2 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(66.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [0, 1], [1, 7], [], [], [1], [], [], [], [], [5], [1], [], [2, 4, 1], [2], [], [2], [2], [], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 3, 1, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = \"\"5\"\".capitalize()[int(17.0):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 0, 0, 1, 0], [4, 9, 2, 6, 9, 5, 4, 8, 9], [0], [1], [1, 2, 1, 0, 1, 1], [1], [0], [1], [1], [2, 5], [0, 1], [], [3, 1, 2, 4], [1], [], [2], [2, 1], [], [24], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 1, 0, 0, 1, 1, 2, 0, 4, 1, 0, 1, 2, 0, 1, 1, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (\"\"8y\"\" + saveChr(int(4.0))[mod(int(9.0),i0):])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [0], [2, 1], [0], [0], [], [], [2], [1], [2], [0], [], [], [], [], [], [1, 1, 0, 1], [3, 7, 9, 5], [1, 0, 1], [0], [3, 1, 1, 0, 3, 1, 0], [], [0, 3], [], [], [2, 0, 4, 0, 5, 2], [1, 0, 0, 1], [0], [0, 3, 3, 0, 3, 0, 3, 0, 1, 4, 1], [3], [2], [], [3, 0, 0, 0], [3, 19, 21], [], [], [30]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 0, 1, 0, 0, 6, 4, 1, 11, 1, 1, 0, 4, 3, 0, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\nin1 = ((s0 + (in2 + (s2 + \"\"_\"\"))) + \"\"DTV\"\".strip())\\ni1 = min(int(3.0), int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [2, 5, 8, 3, 8, 3, 9, 9, 6, 6, 2, 1, 2, 6, 8, 6, 9, 3, 5, 6, 1, 3], [1, 1, 1, 2, 1, 2, 1, 1, 0, 0, 1, 2, 2, 0, 1], [1], [2, 3, 0, 3, 2, 1, 0, 3, 3, 3, 2, 3, 3, 2, 2, 2, 3, 2, 1, 0, 1, 0, 3, 2, 2, 3, 2, 2, 2, 1, 1, 2, 3, 1, 0, 1, 2, 0, 0, 1, 0, 2, 2, 0, 0, 1, 1, 2, 3, 2, 3, 3, 1, 1, 0, 1, 3, 2, 0, 2, 0, 3, 1, 2, 0, 2, 1, 2, 3, 1], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 2, 1, 4, 2, 4, 0, 2, 2, 0, 2, 1, 0, 0, 3, 3], [1, 1, 0, 1, 0, 0, 1, 0, 1, 2, 1, 2, 2, 1, 2], [0, 0, 1, 1, 0, 1, 0, 1, 0], [5, 4, 5, 1, 0, 4], [1], [], [3, 4, 0, 0, 3, 2, 3, 4, 0, 1, 0, 0, 0], [1, 3], [4], [1], [2], [], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 22, 15, 1, 70, 23, 17, 15, 9, 6, 1, 0, 13, 2, 1, 1, 1, 0, 0, 1, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= ( min(i1, max(( int(2.0) - i1 ), abs(max(saveOrd((saveChr(divInt(abs(saveOrd(in2)),( divInt(mod(min(( int(5.0) + i2 ), int(8.0)),i1),abs(( ( abs(mod(( divInt(int(3.0),int(8.0)) - ( min(int(3.0), i2) + int(9.0) ) ),mod(i1,i1))) + int(9.0) ) - i0 ))) + ( ( i0 - i1 ) * int(6.0) ) ))) + in1)), int(6.0))))) - divInt(abs(mod(max(min(int(212.0), int(68.0)), i2),int(6.0))),min(divInt(i2,( i0 * len(((in2.rstrip(\"\"1\"\") + s1)[:int(9.0)] + s0)) )), ( i1 * ( int(3561.0) - ( len(in1) * int(3.0) ) ) ))) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 1, 1], [], [0, 0], [], [], [1], [], [2], [], [1], [], [], [], [], [1, 1, 1, 1], [6, 3, 9, 6], [1, 0, 0, 0, 0, 1, 0, 0], [0, 0], [0, 3, 3, 1, 0, 2, 0, 0, 2, 1, 2, 0, 1, 3, 3, 0, 1], [0, 0, 0], [3, 4, 3, 3], [0, 1, 0], [], [1, 0, 3, 1, 1, 5], [0, 1, 1], [], [4, 1, 0, 4, 2, 4, 4, 1, 2, 0, 1, 0], [3, 3, 1, 0], [2, 2], [0, 0, 2], [3, 3, 3], [], [], [], [10, 19, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 6, 2, 8, 1, 2, 1, 0, 1, 3, 0, 8, 4, 2, 1, 3, 0, 0, 0, 3], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = \"\"\"\\\\\":\"\".strip() not in s1\\ni1 = i0\\ni0 = len(saveChr(saveOrd(getCharFromString(\"\".\"\", int(6.0))))[i0:( i0 + i1 )].strip())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [0], [1, 2], [0], [0, 0], [], [], [0], [], [2], [], [5], [], [], [], [], [0, 1, 1], [5, 9, 3], [0, 1], [0], [2, 2, 3, 3, 1, 0, 0], [1, 1], [4, 4], [0], [0, 0], [4, 4, 5, 5], [0, 1], [0], [4, 0, 0, 1], [1], [], [], [1, 1], [], [16, 11], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 6, 2, 2, 0, 2, 4, 2, 1, 4, 1, 0, 0, 2, 0, 2, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in saveChr(divInt(divInt(saveOrd(in1),saveOrd(in2)),int(59.0))):{:\\ni0 = i1\\nin2 = \"\"ql\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 4], [1], [], [2, 1, 0, 1, 0], [1], [2], [], [0], [0], [1], [], [4, 4, 1], [0, 0], [], [], [1], [], [18], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 1, 0, 0, 1, 1, 1, 0, 3, 2, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(getCharFromString(\"\"s\"\", divInt(int(8.0),i1)), int(4.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 2, 1, 0, 2, 0, 1, 2, 2, 1, 2, 2, 2, 0, 2, 0, 1], [1, 1, 2, 0, 0, 2, 0, 2, 0, 1, 1, 0], [2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 2, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 2, 3, 1, 0, 2, 1], [1, 2, 2, 1, 4, 1, 0], [1, 0, 0, 2, 1, 0, 0, 1, 1, 2, 1, 2, 1, 2, 1, 2], [0, 0, 0, 0, 0, 0, 0], [5, 1, 4, 4, 4], [2, 0, 2, 2], [], [], [1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 6, 1, 2, 8, 8, 4, 3, 3, 7, 4, 7, 2, 6, 4, 4, 2, 3, 4, 5, 7, 7, 7, 8, 9, 9, 8, 2, 6, 3, 6, 1, 6, 4, 6, 5, 5, 5, 3, 0, 2, 5, 9, 7, 2], [2, 0, 0, 2, 1, 2, 0, 0, 2, 2, 0, 1, 2, 0, 1, 1, 2, 2, 1, 1, 2, 1, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 1, 0, 0, 2, 2, 2, 2, 1, 0, 0, 2, 2, 2, 1, 1, 0, 1, 2], [1, 1, 0, 0, 0, 1, 0], [3, 0, 0, 3, 3, 1, 0, 3, 3, 1, 3, 3, 2, 3, 3, 3, 3, 0, 2, 1, 3, 0, 0, 2, 3, 3, 2, 2, 2, 2, 0, 1, 2, 1, 1, 0, 2, 0, 1, 0, 3, 2, 1, 0, 2, 0, 2, 2, 1, 3, 0, 3, 3, 1, 0, 0, 0, 3, 0, 3, 0, 0, 1, 1, 3, 1, 3, 2, 1, 0, 3, 3, 3, 2, 3, 3, 2, 0, 2, 2, 1, 1, 0, 0, 0, 0, 3, 2, 2, 3, 0, 1, 2, 1, 0, 1, 1, 3, 2, 0, 2, 1, 2, 3, 1, 1, 3, 2, 0, 3, 1, 0, 1, 0, 1, 1, 1, 2, 1, 0, 3, 2, 2, 1, 3, 3, 1, 0, 2, 1, 0, 2, 2, 3, 3, 2, 0, 0, 0, 3, 0, 1, 3, 0, 3, 1, 3, 1, 1, 0, 0, 0, 3, 1, 2, 2, 3, 1, 0, 1, 1, 2, 2, 0, 0, 1, 0, 2, 3, 2, 0, 3, 2, 1, 1, 1, 3, 0], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1], [2, 1, 2, 2, 3, 4, 2, 2, 1, 4, 4, 4, 2, 0, 0, 3, 0, 0, 1, 4, 1, 2, 3, 0, 0, 2, 0, 3, 0, 0, 2, 4, 4, 4, 0, 3, 0, 1, 3, 3, 3, 2, 2, 4, 0, 3, 2], [0, 2, 2, 0, 0, 2, 2, 1, 2, 0, 2, 1, 0, 1, 2, 2, 2, 2, 0, 0, 2], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0], [4, 5, 5, 1, 4, 1, 0, 5, 3, 2, 0, 3, 1, 0, 0, 1, 4, 3, 0, 2, 0, 0, 0, 4, 3, 3, 4, 1, 3, 0, 5, 2, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [3, 4, 4, 3, 3, 0, 2, 2, 2, 2, 4, 0, 0, 1, 0, 4, 0, 4, 4, 1, 1, 2, 4, 4, 0, 2, 0, 4, 2, 1, 3, 3, 3, 4, 1, 0, 4, 0, 0, 4, 4, 0, 1, 4, 0, 4, 0, 4, 4, 2, 0, 1, 4, 3, 0, 3, 0, 1, 1, 0, 3, 2, 4, 1, 1, 2, 1, 1, 0, 4, 0, 4, 1, 4, 4, 2, 0, 1, 4, 2, 0, 0, 2, 2, 1, 1, 1, 4, 0, 0, 4, 1, 1, 1, 0, 2, 1, 1], [2, 3, 0, 0, 2, 0, 3, 1, 0, 0, 3, 0, 1, 2, 3, 0, 1, 2, 0, 0, 0, 3, 3, 2, 1, 3], [3, 3, 4, 4, 3, 2, 5], [0, 1, 1, 0, 1, 2, 0, 2, 1, 2, 2, 0, 1, 1, 1], [3, 1, 0, 3, 0, 3, 2, 0, 1, 3, 2, 3, 2, 2, 1, 1, 0, 2, 1, 1, 0, 1, 2, 1, 0, 1, 2, 1, 1, 3, 2, 3, 2, 1], [13, 3, 5, 15, 12, 17], [6, 8, 16, 15, 18, 7, 20, 25, 22, 24, 18, 7], [5, 8, 7, 1, 6, 6, 6, 2, 2], [30, 2, 30, 11, 3, 26, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 29, 29, 12, 17, 5, 9, 0, 0, 7, 7, 16, 7, 5, 4, 0, 0, 4, 45, 45, 55, 7, 178, 39, 47, 21, 21, 34, 34, 5, 98, 26, 7, 15, 34, 6, 12, 9, 7], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (((in2 + getCharFromString(in2, abs(i2))[i0:max(abs(int(0.0)), i0)][:abs(len(s1))][:int(6.0)][saveOrd(\"\"_\"\"):abs(mod(abs(max(saveOrd(in1), saveOrd(getCharFromString(s1, i2)))),divInt(int(1.0),saveOrd(getCharFromString(\"\"g\"\", i1).capitalize()))))]) + \"\"N\\\\\\tD_5\"\").lstrip(saveChr(i2).lstrip(s0)[:divInt(abs(min(divInt(divInt(( ( i0 + int(2.0) ) * mod(int(8.0),int(8.0)) ),i0),divInt(i2,int(4.0))), i2)),min(divInt(int(3.0),i0), mod(i1,divInt(mod(int(3.0),len(in2[i2:])),min(min(int(7.0), i0), i1)))))]).capitalize() + getCharFromString(\"\"F\"\"[i1:max(i2, saveOrd((((getCharFromString(\"\"i\"\", i2) + in0) + s2.rstrip(s0)) + getCharFromString(saveChr(i1), int(4.0)))))], int(7.0)))\\nin0 = s1\\nb0 = max(int(2.0), abs(( int(6.0) * i1 ))) \\g len(\"\"(\"\")\\nif not b2:{:\\ns0 = s0.capitalize()\\nres0 = s1.rstrip(getCharFromString(saveChr(min(min(mod(abs(min(mod(i2,( ( int(4.0) + int(4.0) ) + i1 )), i0)),i0), i0), len(in1[divInt(( min(i1, int(2.0)) * ( int(3.0) * i2 ) ),int(4.0)):]))), int(5.0))).endswith(\"\"871\"\")\\ni2 -= min(divInt(i2,mod(int(77.0),divInt(abs(int(7.0)),int(8.0)))), saveOrd((in0 + (s0 + \"\"q\"\")).capitalize()))\\n:}else:{:\\nif ( i2 * saveOrd(\"\"pP\"\") ) == int(9.0):{:\\nb1 = not not i2 == int(9.0)\\nb0 = i2 \\g int(8.0)\\nloopBreak% = 0\\nwhile s2 not in (getCharFromString(\"\"6\"\", int(2.0))[:int(6.0)] + \"\"s\"\"):{:\\nloopBreak% = 0\\nfor s0 in \"\"h\"\"[mod(int(3.0),i2):]:{:\\ni1 += saveOrd(\"\"M\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nfor s0 in s0:{:\\nb2 = ( ( int(6.0) * min(len(getCharFromString(in1, int(1.0))), i1) ) - ( int(6.0) + i1 ) ) \\le ( divInt(min(max(( i0 - i1 ), i0), len(getCharFromString(\"\"u\"\", i0))),int(4.0)) * len(in0[i2:].strip().lstrip(\"\"6\"\")) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = len(in0[int(6.0):abs(int(5.0))].capitalize())\\nloopBreak% = 0\\nwhile in1.startswith(\"\"z\"\"[:int(5.0)][:i2]):{:\\ni2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i0\\nloopBreak% = 0\\nfor s1 in \"\"Rw6y\"\":{:\\nloopBreak% = 0\\nwhile abs(int(5.0)) \\g ( ( saveOrd(\"\"s\"\") * int(3.0) ) * i2 ):{:\\nb1 = saveChr(int(0.0)).startswith(in0)\\nloopBreak% = 0\\nfor s0 in in2:{:\\nif int(2.0) \\l ( divInt(i2,i2) * int(5.0) ):{:\\nif \"\"[\"\".strip(\"\"2\"\").startswith(\"\"^\"\"):{:\\ni1 += i1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s2 in s1:{:\\ns1 = \"\"2\"\"[:( min(( i0 + len(\"\"h\"\") ), divInt(int(9.0),int(7.0))) * int(2.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\ni1 = abs(i2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 1], [1, 1, 2, 1, 1, 1], [1], [2, 0, 0, 0, 0], [], [], [], [], [0, 2, 2, 2], [1, 4], [0, 2, 1, 0, 1, 0, 2], [0, 0], [4, 2], [1, 2, 2], [], [0], [1], [0, 1, 1, 1, 1, 1, 1], [6, 5, 7, 2, 0, 9, 9], [1, 1, 1, 1, 0, 2, 0], [], [0, 2, 0, 1, 0, 1, 0, 2, 0, 3, 1, 2, 2, 3, 1, 2, 3, 0, 1, 3, 1, 3, 0], [0, 1, 1, 0, 1], [3, 3, 4, 3, 4], [2, 1], [1, 1, 0], [3, 5, 2, 3, 0], [1, 0, 0, 0, 1, 1, 1, 1, 1], [], [2, 0, 4, 0, 1, 3, 2, 1, 2, 2, 1, 2, 2, 1, 0, 1, 0, 1], [1], [], [2, 0, 1, 0, 2, 2], [0, 0, 0, 1, 2, 0, 0, 3, 3], [15, 23, 2, 23, 12], [13], [7], [11, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 1, 5, 0, 0, 0, 0, 4, 2, 7, 2, 2, 3, 0, 1, 1, 7, 7, 7, 0, 23, 5, 5, 2, 3, 5, 9, 0, 18, 1, 0, 6, 9, 5, 1, 1, 2], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2[i1:]\\nb0 = True\\nif saveChr(( i1 * int(65.0) )).startswith(s2):{:\\nb2 = i1 \\g int(7.0)\\nb2 = not i1 \\le mod(i0,len(\"\"P\"\"))\\n:}else:{:\\nb2 = not (\"\"XCn7\"\"[int(2.0):mod(( len(\"\"X\"\"[int(0.0):divInt(saveOrd(\"\"M\"\"[i2:][int(9.0):]),len(in0))][:int(9.0)]) - saveOrd(\"\"(\"\") ),i0)] + s0) == \"\";\"\"\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 0, 0, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 0, 2, 1, 2, 0, 1], [2, 0, 1, 2, 1, 0, 2], [1, 0, 2, 2, 2, 2, 0, 0, 1, 0, 2, 2], [0, 0], [0, 0, 0, 0], [], [], [3, 0, 1, 3, 2], [4, 0], [2, 2, 2, 0, 1, 2, 2, 2, 0, 1], [0, 0], [1, 2, 2, 4, 0, 2], [2, 0], [], [], [1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 7, 6, 7, 0, 7, 3, 2, 5, 8, 0, 6, 5, 3, 3, 5, 8, 0, 8, 1, 7, 9, 7, 2, 7, 4, 9, 4, 7, 6, 9, 9, 7, 1, 6, 0, 4, 6, 3, 0, 3, 7, 9, 7, 9, 3, 3, 3, 8, 9, 3, 7, 4, 7, 9, 5, 9, 3, 7, 6, 7, 0, 5, 9, 0, 5, 2, 8, 9, 3, 7, 5, 8, 2], [2, 0, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 0, 2, 2, 2, 2, 0, 2, 1, 2, 0, 2, 1, 1, 2, 2, 0, 1, 2, 2, 2, 1, 2, 2, 2, 0, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0, 1, 0, 1, 1, 1, 0, 0], [0, 1], [0, 3, 2, 3, 1, 3, 0, 3, 0, 2, 2, 3, 2, 1, 1, 0, 3, 1, 3, 3, 2, 1, 3, 2, 2, 2, 2, 2, 3, 2, 2, 1, 0, 2, 3, 3, 3, 2, 1, 3, 1, 3, 3, 0, 0, 3, 3, 3, 3, 0, 2, 2, 2, 0, 1, 2, 0, 2, 3, 2, 1, 1, 0, 1, 1, 1, 1, 3, 3, 3, 0, 2, 2, 1, 3, 1, 1, 2, 2, 2, 0, 1, 1, 2, 2, 0, 0, 0, 0, 2, 2, 2, 1, 3, 1, 3, 1, 1, 3, 1, 3, 0, 1, 2, 2, 1, 1, 1, 2, 1, 3, 0, 3, 0, 2, 0, 0, 3, 3, 3, 2, 1, 1, 2, 3, 1, 3, 0, 0, 1, 1, 1, 2, 1, 2, 1, 2, 3, 3, 0, 0, 2, 0, 1, 1, 2, 3, 0, 3, 2, 1, 0, 2, 2, 0, 3, 3, 3, 1, 3, 3, 0, 3, 2, 3, 3, 0, 1, 2, 0, 1, 0, 0, 1, 0, 2, 3, 1, 2, 3, 2, 3, 2, 3, 2, 1, 3, 0, 0, 0, 0, 1, 0, 2, 2, 1, 0, 1, 0, 1, 0, 3, 2, 2, 3, 0, 0, 2, 1, 1, 0, 2, 3, 0, 2, 1, 1, 3, 1, 0, 2, 0, 0, 2, 3, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 0, 2, 0, 3, 1, 1, 2, 1, 0, 1, 0, 0, 1, 1, 3], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0], [1, 2, 4, 1, 1, 4, 4, 0, 3, 2, 4, 1, 3, 3, 3, 0, 1, 4, 3, 4, 4, 2, 4, 1, 3, 0, 3, 3, 2, 1, 2, 3, 2, 1, 3, 1, 0, 3, 2, 2, 1, 2, 0, 4, 4, 3, 3, 0, 1, 2, 1, 3, 1, 4, 0, 1, 4, 2, 1, 3], [1, 1, 2, 1, 1, 1, 2, 1, 0, 2, 2, 0, 2, 1, 0, 2, 2, 1, 2, 2, 2, 0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 1, 0, 2], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [4, 0, 0, 0, 2, 5, 5, 1, 0, 0, 2, 3, 3, 0, 1, 2, 4, 0, 3, 1, 3, 4, 4, 5, 1, 0, 2, 0, 2, 1, 5, 2, 0, 2, 2, 3, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0], [4, 3, 0, 0, 3, 4, 0, 3, 2, 2, 1, 1, 2, 4, 4, 4, 0, 0, 4, 1, 4, 4, 2, 2, 0, 0, 1, 1, 4, 1, 2, 4, 1, 4, 0, 3, 1, 3, 0, 2, 1, 2, 2, 2, 0, 0, 3, 4, 4, 4, 4, 4, 4, 4, 0, 0, 2, 4, 0, 2, 4, 2, 2, 3, 2, 0, 4, 4, 2, 0, 3, 2, 0, 2, 4, 2, 1, 4, 1, 4, 4, 1, 1, 1, 0, 4, 2, 1, 0, 1, 3, 4, 1, 2, 3, 0, 3, 3, 1, 1, 0, 0, 4, 1, 4, 2, 2, 2, 1, 1, 1, 0, 2, 0, 0, 1, 2, 0, 1, 4, 1, 2, 2, 0, 2, 4, 2, 4, 0, 2, 1, 1, 3, 2, 4, 0, 2, 3, 3, 4, 1, 2, 1, 4, 2, 1, 1], [3, 1, 0, 2, 2, 0, 0, 1, 0, 1, 3, 0, 2, 3, 2, 2, 2, 1, 0, 2, 0, 2, 3, 2, 3, 3, 0, 3, 2, 3, 2, 0, 0, 1, 0, 0], [1, 2, 4, 3, 0, 3, 5, 0], [0, 2, 2, 1, 2, 1, 0, 0, 0, 1, 1, 2, 0, 1, 0, 0, 2, 1, 1, 2, 2, 2, 0, 1, 2, 0, 2, 1, 1, 2, 2, 2, 2, 0, 2], [1, 2, 3, 3, 2, 2, 2, 2, 3, 2, 1, 0, 1, 2, 0, 0, 3, 1, 3, 0, 1, 2, 1, 1, 3, 1, 2, 3, 1, 0, 2, 0, 3, 1, 2, 2, 3, 0, 0, 3], [7, 3, 0, 3, 13, 22, 16, 9], [1, 8, 24, 11, 14, 6, 20, 19, 19, 22], [6, 7, 4, 9, 5, 0, 5, 4, 9, 4, 8, 3], [15, 2, 12, 27, 12, 7, 16, 18, 4, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 19, 19, 7, 12, 2, 4, 0, 0, 5, 2, 10, 2, 6, 2, 0, 0, 2, 75, 75, 60, 2, 255, 66, 60, 35, 32, 37, 40, 2, 147, 36, 8, 35, 40, 8, 10, 12, 10], "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\nres0 = (in1 + s0).rstrip() not in (saveChr(max(( abs(int(19.0)) - saveOrd(s0) ), i1)) + (\"\"b6\"\"[max(i2, ( divInt(max(( int(7.0) - int(6.0) ), i1),saveOrd(\"\",\"\")) * int(7.0) )):][saveOrd(getCharFromString(s0.capitalize().capitalize(), min(( int(0.0) - len(s2) ), ( ( mod(( mod(abs(( ( int(7.0) - i2 ) - ( saveOrd(getCharFromString(\"\"\\\\\\t\"\", max(len(getCharFromString(saveChr(( int(3.0) * len(in2[int(2.0):][:len(in2)]) )), min(i1, i2))), max(saveOrd(\"\"7\"\"), len(\"\"4\"\"))))) - saveOrd(getCharFromString(\"\"9\"\", i2)) ) )),divInt(mod(( i2 + int(5.0) ),divInt(i1,( saveOrd(saveChr(( int(8.0) * int(0.0) ))[:i1]) * int(6.0) ))),int(5.0))) + int(3.0) ),int(3.0)) * abs(saveOrd(\"\"5\"\")) ) - max(i0, ( ( int(5.0) + len(s1.strip()) ) * int(8.0) )) )))[int(0.0):]):divInt(( mod(i2,int(8.0)) * int(17.0) ),divInt(mod(i2,i2),i2))] + (\"\")\"\" + (s0 + \"\"0i\"\"[i0:( mod(( int(9.0) - min(int(7.0), len(s0[:int(2.0)][int(7.0):len(s2)][int(4.0):abs(i2)])) ),int(9.0)) * ( divInt(int(4.0),int(7.0)) * int(6.0) ) )]))))\\nin0 = (getCharFromString(saveChr(( int(9.0) * max(i1, abs(i2)) )).capitalize().capitalize().capitalize().rstrip(in0).capitalize(), mod(i0,i2)) + s0)\\ns1 = getCharFromString(s2, len((in1[abs(max(( int(9.0) + int(7.0) ), mod(len(getCharFromString(s0[int(1.0):max(i1, i1)].capitalize(), int(6.0))),int(0.0)))):int(4.0)] + (in0[mod(int(6.0),divInt(int(3.0),divInt(min(len(\"\"H\"\"[:i2].lstrip(\"\"y\"\".capitalize())[:i2]), ( i0 * int(0.0) )),int(3.0)))):] + \"\"5\"\".lstrip(\"\"D\"\").lstrip()))[:mod(abs(i1),abs(divInt(int(7.0),i2)))][divInt(( i2 + max(abs(min(int(9.0), saveOrd(\"\"A\"\"))), saveOrd(s1)) ),i2):len(getCharFromString(\"\"\\\\\\\\\"\"[divInt(len(in0),min(i1, int(7.0))):], divInt(i2,int(9.0))))].capitalize()[i2:]))[:i2]\\nloopBreak% = 0\\nwhile \"\"l\"\" == (\"\")\"\".strip((in1 + ((\"\"D\"\" + \"\"o4g\"\") + in1))[int(3.0):]) + in2):{:\\ns1 = \"\"u$\"\".capitalize()\\nloopBreak% = 0\\nfor s0 in \"\"t9-\"\"[:i0][divInt(max(int(3.0), mod(abs(mod(max(( len(\"\"t\"\") + divInt(int(3.0),max(i2, i1)) ), i2),i1)),int(8.0))),i1):( ( int(9.0) + i1 ) * int(3.0) )][i1:].lstrip():{:\\nif \"\"N\"\" == s2:{:\\ns0 = s2[int(7.0):]\\nb0 = not i1 \\le saveOrd(s1)\\nloopBreak% = 0\\nwhile \"\"4\"\".startswith(in2[( ( min(i1, i1) * divInt(int(4.0),int(7.0)) ) * i0 ):mod(max(i1, ( int(9.0) * int(5.0) )),saveOrd(\"\"W\"\"))]):{:\\nif \"\"/\"\".capitalize() in s2[:int(9.0)][i0:]:{:\\nb1 = getCharFromString(getCharFromString(s0, ( i2 * i2 ))[divInt(abs(int(3.0)),i0):], i1)[:int(7.0)] == \"\"w\"\"[int(6.0):]\\n:}\\ni0 += int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s2 in \"\"83\"\":{:\\nres0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(0.0) \\l int(590.0):{:\\ns2 = (saveChr(int(5.0))[mod(int(2.0),mod(mod(( int(8.0) - i1 ),( i1 + max(int(9.0), int(3.0)) )),( int(7.0) * i1 ))):] + in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns1 = ((getCharFromString(\"\"!\"\", int(5.0)) + \"\"Q\"\"[i0:i0]) + getCharFromString(\"\"J\"\"[int(8.0):], int(2.0)))[len(\"\"-\"\"):]\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [2, 0, 1, 1, 0, 2, 2, 0, 1, 2, 0, 2, 2, 1, 1, 0, 0, 2, 1, 2, 1, 1, 1, 0, 0, 1], [1, 2, 2, 0, 1, 1, 1, 1, 0], [1, 1, 0, 2, 1, 1, 2, 2, 2, 1, 2, 0, 1, 0, 2, 2, 1], [0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 2], [1, 3, 2, 1, 3, 5], [1, 2, 2, 0, 0, 1, 0, 1, 1, 2, 1, 1, 0, 2, 2, 1, 2], [0, 0, 0, 0, 0, 0], [4, 1, 2, 4, 5, 1, 4], [2, 3, 2, 3], [0, 0, 1], [], [0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 5, 0, 1, 9, 6, 6, 1, 2, 2, 0, 4, 7, 9, 7, 0, 0, 3, 5, 6, 7, 9, 4, 7, 8, 1, 2, 9, 5, 3, 5, 3, 5, 1, 8, 1, 4, 5, 6, 5, 4, 3, 2, 6, 8, 4, 7, 9, 2, 7, 6, 4, 2, 9, 4, 2, 7, 3, 8, 7, 9, 4, 0, 1, 2, 7, 7, 0, 3, 7, 2, 5, 9, 7, 4, 3, 1, 4, 6, 2, 4, 4, 1, 6, 8, 3, 8, 9, 3, 5, 0], [0, 1, 2, 2, 2, 1, 0, 2, 1, 1, 2, 2, 0, 0, 1, 0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 1, 1, 0, 1, 0, 2, 0, 1, 2, 1, 1, 1, 1, 1, 1, 0, 1, 2, 2, 2, 1, 2, 2, 0, 2, 0, 1, 1, 0, 1, 0, 1, 1, 2, 1, 1, 2, 0, 1, 1, 1, 0, 2, 0, 2, 2, 1, 1, 0, 1, 0, 1, 2, 0], [0, 1, 0, 1, 1, 1, 0], [1, 3, 3, 2, 1, 3, 1, 1, 1, 3, 3, 3, 0, 3, 1, 3, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 1, 0, 2, 2, 2, 3, 3, 1, 1, 2, 3, 2, 0, 0, 3, 1, 2, 1, 0, 3, 1, 3, 0, 2, 2, 0, 3, 2, 1, 0, 1, 0, 0, 2, 3, 1, 0, 1, 0, 1, 3, 3, 2, 1, 1, 2, 2, 1, 1, 1, 2, 3, 3, 2, 0, 3, 1, 3, 1, 3, 1, 1, 1, 1, 3, 1, 3, 1, 2, 2, 3, 1, 1, 1, 0, 3, 0, 1, 2, 2, 0, 3, 0, 0, 3, 1, 3, 3, 2, 1, 1, 3, 3, 3, 2, 0, 2, 1, 3, 3, 1, 3, 1, 2, 2, 2, 0, 1, 1, 2, 2, 2, 0, 3, 3, 2, 0, 2, 2, 2, 3, 3, 2, 0, 1, 2, 3, 0, 0, 1, 3, 3, 1, 2, 1, 0, 0, 0, 2, 1, 0, 1, 3, 0, 2, 2, 2, 0, 0, 3, 1, 1, 1, 1, 2, 1, 0, 2, 0, 3, 0, 2, 1, 0, 0, 3, 0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 2, 1, 2, 0, 0, 2, 3, 2, 2, 3, 0, 0, 3, 0, 3, 3, 1, 2, 0, 3, 2, 3, 3, 2, 3, 0, 3, 1, 2, 2, 2, 2, 2, 0, 0, 1, 2, 1, 3, 1, 1, 0, 2, 0, 1, 0, 2, 1, 0, 3, 0, 3, 3, 1, 2, 1, 0, 1, 2, 3, 1, 2, 0, 1, 2, 3, 0, 3, 0, 0, 0, 3, 1, 2, 3, 1, 1, 2, 1, 2, 1, 2, 1, 2, 0, 3, 0, 2, 0, 0, 0, 3, 0, 2, 0, 0, 1, 3, 1, 3, 3, 2, 1, 1, 2, 1, 1, 3, 0, 1, 3, 0, 2, 3, 0, 1, 1, 2, 2, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [1, 3, 4, 0, 4, 1, 4, 1, 0, 2, 2, 0, 3, 1, 1, 3, 2, 2, 1, 3, 2, 1, 0, 0, 1, 1, 2, 4, 0, 1, 1, 3, 3, 0, 2, 3, 3, 1, 2, 4, 1, 3, 4, 2, 0, 4, 3, 4, 2, 3, 4, 0, 2, 0, 4, 0, 2, 2, 4, 0, 1, 3, 1, 0, 3, 3, 2, 3, 4, 1, 0, 1, 0, 3, 4, 4], [2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0, 1, 1, 1, 2, 0, 0, 0, 1, 1, 0, 0, 2, 1, 1, 2, 2, 1, 0, 2, 1, 1, 0, 1, 0, 0, 2, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 0, 0, 0, 1, 2], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [3, 1, 0, 3, 1, 3, 5, 4, 1, 5, 2, 4, 2, 3, 1, 1, 0, 3, 3, 4, 5, 1, 3, 0, 0, 5, 0, 0, 5], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0], [2, 0, 4, 1, 4, 2, 2, 4, 1, 0, 4, 4, 0, 1, 4, 1, 4, 2, 0, 2, 1, 1, 4, 1, 1, 4, 0, 0, 2, 1, 1, 1, 1, 1, 2, 3, 2, 0, 4, 4, 4, 4, 4, 4, 1, 1, 2, 4, 2, 2, 1, 1, 2, 0, 4, 2, 2, 1, 2, 1, 0, 4, 0, 2, 4, 2, 1, 1, 0, 2, 2, 1, 4, 0, 1, 0, 2, 2, 2, 1, 2, 0, 2, 2, 1, 1, 2, 2, 0, 4, 4, 2, 0, 1, 3, 3, 0, 4, 4, 0, 2, 4, 4, 1, 3, 2, 0, 1], [2, 0, 1, 3, 3, 1, 1, 0, 1, 3, 1, 3, 2, 2, 2, 0, 1, 3, 2, 0, 0, 1, 3, 1, 0, 1, 1], [0, 2, 2, 2, 4, 1, 4, 2], [1, 1, 1, 0, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 1, 0, 2, 1, 2, 2, 1, 2], [1, 3, 2, 2, 3, 3, 3, 3, 1, 3, 1, 1, 3, 0, 0, 1, 0, 1, 3, 2, 3, 0, 0, 3, 2, 3, 2, 3, 0, 1, 3], [19, 5, 24, 0, 0, 11], [17, 24, 18, 13, 13, 13, 20], [5, 9, 9, 0, 0], [7, 30, 20, 13, 28, 15, 4, 20, 5, 30, 27, 21, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 17, 17, 13, 2, 61, 16, 17, 10, 7, 3, 5, 0, 15, 6, 2, 3, 5, 0, 1, 2, 2], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) \\g max(len(in0[:( int(9.0) * saveOrd(\"\"r\"\".capitalize()) )]), int(5.0)):{:\\ni0 = int(0.0)\\ni1 += int(1.0)\\nres0 = getCharFromString(saveChr(min(saveOrd(\"\"$\"\"), max(i2, saveOrd(s1))))[:int(9.0)][:max(( int(6.0) * i2 ), ( mod(min(( int(6.0) + abs(( ( int(1.0) * int(2.0) ) * i2 )) ), mod(mod(( abs(min(int(2.0), int(0.0))) * divInt(len(s0.strip().lstrip()),( i1 * i0 )) ),max(int(4.0), divInt(int(7.0),i2))),max(int(9.0), len(\"\"59_\"\")))),i1) + mod(mod(i1,abs(( int(7.0) * i2 ))),int(0.0)) ))], i2).startswith(saveChr(i0))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1], [2, 1, 0, 2, 2, 1, 0, 1], [2, 0, 0], [1, 0, 0, 1, 0], [0, 0], [0, 0], [], [], [3, 3, 2], [1, 2, 2], [0, 0, 0, 2, 2, 1, 1, 1], [0, 0, 0], [5, 3], [3, 2, 2], [1], [], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [2, 0, 8, 4, 9, 2, 0, 5, 9, 2, 7, 7, 3, 7, 7, 0, 6, 4, 1, 9, 2, 4, 8], [0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 2, 1, 2, 1, 1, 0, 0, 1, 2, 1, 0, 1, 2], [0, 0], [1, 0, 1, 2, 3, 2, 1, 3, 3, 2, 2, 2, 3, 1, 0, 0, 3, 0, 1, 2, 0, 0, 0, 3, 1, 2, 3, 3, 2, 2, 2, 1, 1, 2, 1, 2, 1, 3, 2, 3, 0, 1, 3, 0, 0, 1, 1, 3, 3, 2, 0, 2, 0, 3, 2, 3, 3, 1, 0, 0, 1, 3, 1, 0, 2, 2, 0, 1, 3, 2, 3, 1, 3, 0, 0, 2, 0, 0, 3, 3, 0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 2, 2, 2, 2, 4, 2, 3, 0, 0, 2, 4, 0, 1, 3, 3, 1, 4], [2, 2, 0, 2, 2, 0, 1, 2, 0, 0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 0], [3, 1, 2, 1, 0, 4, 0, 5, 0, 4, 1, 3], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 0], [0, 0, 1, 2, 0, 3, 2, 3, 0, 1, 1, 4, 1, 4, 0, 3, 2, 2, 3, 3, 3, 0, 1, 0, 2, 1, 3, 1, 3, 1, 4, 0, 1, 2, 2, 1, 1, 4, 2, 0, 0], [0, 3, 1, 2], [0], [0, 0, 1, 2, 1, 1, 1, 1], [1, 2, 0, 2, 0, 1, 1, 2, 0, 3, 0, 3, 0], [19, 8, 23, 16, 25], [6, 16, 19], [3, 5, 5], [13, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 2, 2, 0, 0, 3, 3, 8, 3, 2, 3, 1, 0, 0, 23, 23, 23, 2, 81, 20, 22, 10, 10, 12, 13, 2, 41, 4, 1, 8, 13, 5, 3, 3, 2], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( not not in0.endswith(s1) or \"\"g3\"\" != s2[int(2.0):i0] ):{:\\ni0 = int(08.0)\\nres0 = ( len(((s1 + \"\"T\"\")[divInt(int(4.0),max(abs(mod(( ( min(int(9.0), i2) * i2 ) * len(\"\"5\"\") ),i0)), int(2.0))):( i0 + i0 )] + getCharFromString(\"\"I\"\", i2))) * abs(int(0.0)) ) \\g divInt(abs(abs(mod(mod(divInt(int(5.0),int(9.0)),mod(int(2.0),( int(7.0) * abs(( saveOrd(s0.lstrip()) + i2 )) ))),int(7.0)))),abs(i0))\\nloopBreak% = 0\\nfor in1 in ((((s0 + \"\"q\"\") + in2) + \"\"t5\"\"[:i2])[int(3770.0):][:int(64.0)] + (\"\"X\"\" + (\"\"*\"\" + saveChr(len(s0))))):{:\\nloopBreak% = 0\\nfor in1 in \"\"Q\"\":{:\\nres0 = min(mod(i1,( i2 - min(( abs(saveOrd(\"\"?\"\"[:int(1.0)][:i1])) * i1 ), int(9.0)) )), min(int(2.0), i0)) == ( ( i0 + int(4.0) ) + max(divInt(len(\"\"Z\"\"),int(8.0)), len(s1[:i1].capitalize())) )\\ni2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = divInt(i0,i1) == max(saveOrd(in0), i2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [0], [], [], [1, 2, 0], [4], [1, 0], [0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 5, 2, 2, 6, 6, 9, 5, 1, 0, 3, 9, 2, 6, 0, 7, 2, 8, 9, 1, 5, 5, 6, 1, 9, 9, 0, 3, 8, 2, 3, 4], [0, 1, 1, 1, 1, 2, 2, 0, 2, 1, 2], [0], [2, 3, 1, 3, 2, 3, 3, 1, 2, 1, 3, 3, 2, 3, 3, 0, 3, 1, 2, 0, 3, 2, 1, 1, 1, 3, 0, 3, 1, 1, 3, 3, 2, 1, 3, 1, 2, 2, 1, 2, 1, 2, 1, 1, 3, 2, 2, 1, 1, 3, 3, 1, 1, 1, 3, 1, 3, 1, 3, 1, 3, 0, 3, 1, 1, 0, 2, 2, 0, 2, 2, 3, 2, 0, 1, 1, 1, 0, 1, 3, 0, 3, 2, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 3, 1, 0, 0, 0, 4, 1, 1, 3, 4, 1, 1, 1, 3, 1, 2, 0, 1, 0, 4, 1, 4, 1], [1, 1, 0, 1, 2, 0, 1, 2, 0, 2], [1, 1, 0, 1, 0, 0, 1, 0, 1], [1, 5], [1, 1, 1, 1, 0, 1], [], [4, 2, 1, 0, 4, 1, 2, 2, 0, 1, 2, 1, 1], [0, 0], [], [0, 1, 0, 1], [2, 3, 3, 1, 3, 1], [], [4, 25], [2], [9, 30, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 32, 32, 11, 1, 86, 19, 26, 10, 9, 2, 6, 0, 13, 2, 0, 4, 6, 0, 2, 1, 3], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(min(int(1.0), min(mod(max(len(getCharFromString(\"\"2\"\"[int(5.0):( int(2.0) - max(min(( min(min(i1, saveOrd(s1)), int(2.0)) - ( i1 + max(( int(6.0) - int(6.0) ), int(9.0)) ) ), max(i1, len(getCharFromString(\"\"&\"\", int(5.0))))), int(1.0)) )], saveOrd(in2[max(( int(0.0) * max(int(3.0), ( divInt(int(9.0),( int(2.0) + mod(int(6.0),int(0.0)) )) - max(divInt(( int(7.0) * int(2.0) ),len(\"\"_\"\")), max(int(8.0), int(9.0))) )) ), int(1.0)):abs(int(5.0))][:min(int(5.0), max(int(6.0), min(i1, saveOrd(\"\"e\"\"[:int(1.0)]))))]))), int(9.0)),i2), ( divInt(i2,mod(( max(divInt(i0,int(9.0)), int(0.0)) + int(3.0) ),i2)) * int(8.0) ))),saveOrd(\"\"]z\"\"))\\nb1 = i1 \\le max(mod(i2,int(2.0)), int(34.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 1, 1], [0], [1, 1, 0], [0], [], [], [], [3], [5], [1], [0], [], [], [], [], [0], [0, 0, 1, 1, 1, 1, 1, 1], [5, 8, 9, 5, 2, 8, 0, 5], [1, 1, 2, 1, 0], [0, 0], [2, 3, 1, 0, 3, 3, 2, 3, 2, 0, 2, 3, 3, 1, 1, 2, 1, 1, 2, 1, 0], [1, 1, 1, 1, 0, 0], [3, 4, 2, 2, 2, 1], [2, 1], [0, 0, 1, 0], [5, 5, 1], [1, 1], [0], [0, 1, 1], [], [], [], [0, 2], [5], [], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 5, 2, 21, 6, 6, 2, 4, 2, 2, 1, 3, 0, 0, 0, 2, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2:{:\\ni1 = divInt(len(\"\"F\"\"),int(589.0))\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = saveOrd(\"\"7\"\") != abs(divInt(abs(mod(i1,divInt(abs(max(int(5.0), int(2.0))),( int(8.0) * int(0.0) )))),( int(5.0) - i0 )))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [8, 7, 0], [1], [0], [2, 1, 3], [1], [4], [], [1], [0, 2], [1], [0], [4, 0, 1], [2], [], [], [3], [], [], [], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 1, 1, 0, 1, 2, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2.capitalize():{:\\ni1 = mod(int(870.0),saveOrd(\"\"\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [1, 5, 6, 6, 9, 5, 0, 4, 0, 6, 7, 5, 6, 4, 7, 0, 0, 9, 1, 7, 5, 3, 7, 3, 0], [1, 0, 1, 0, 2, 0, 1, 0, 2, 1, 1, 0, 1, 1, 1, 0], [1], [2, 0, 2, 2, 3, 2, 2, 3, 2, 1, 2, 2, 0, 1, 1, 2, 2, 2, 0, 2, 2, 1, 3, 2, 2, 1, 2, 1, 2, 0, 1, 0, 3, 1, 3, 2, 1, 3, 1, 3, 2, 1, 2, 2, 1, 1, 0, 0, 2, 1, 2, 3, 2, 0, 0, 0, 2, 2, 2, 2, 3, 2, 2, 0, 0, 0, 1, 0, 3, 1, 0, 2, 1, 1], [1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1], [4, 2, 4, 4, 4, 4, 0, 4, 2, 1], [2, 2, 2, 1, 0, 2, 1, 2, 1, 2, 0, 2, 2, 2, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1], [0, 2, 5], [0, 0, 0, 1], [], [4, 3, 4, 0, 0, 1, 4, 0, 4, 2, 4, 4], [3, 3, 1, 1, 1, 1], [4, 2], [2], [1, 0, 3, 3], [16], [16], [], [1, 26]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 16, 1, 74, 31, 10, 17, 15, 3, 4, 0, 12, 6, 2, 1, 4, 1, 1, 0, 2], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= mod(i0,( mod(saveOrd((s0.strip() + s2).rstrip(\"\"qQ\\\\\\n[\"\")),( divInt(abs(mod(int(1.0),( mod(i1,int(5.0)) * int(6.0) ))),mod(( ( i0 * ( ( int(6.0) - saveOrd(saveChr(mod(( int(9.0) + ( int(5.0) * ( i2 - int(0.0) ) ) ),i0))) ) * saveOrd(in2) ) ) - int(4.0) ),saveOrd(saveChr(divInt(int(0.0),saveOrd(saveChr(int(6.0))[min(( int(7.0) * mod(divInt(int(5.0),int(6.0)),i1) ), i0):])))))) + ( int(47.0) * mod(saveOrd(saveChr(mod(i2,i1))),i1) ) )) * ( divInt(divInt(( abs(( ( i0 * i1 ) - i1 )) - int(009.0) ),i1),max(int(17537.0), i0)) - mod(int(3.0),int(0.0)) ) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [2], [4], [2], [0], [1], [], [], [], [], [1, 1, 1, 1, 1], [1, 0, 0, 4, 8], [0, 2], [0], [0, 3, 2, 1, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0], [0, 0, 1, 1], [2, 2, 2], [0, 1], [0, 1], [], [0, 1], [], [2, 4, 1], [1], [], [2], [3, 0], [17], [], [], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 7, 2, 1, 2, 0, 0, 2, 0, 3, 1, 0, 1, 2, 1, 0, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveChr(i0)[abs(( int(1.0) + ( int(0.0) - i2 ) )):] not in \"\"%R\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [3, 6, 7], [0, 1, 0, 0, 1], [1], [2, 3, 1, 0, 1, 0, 3, 2, 3, 0, 0, 2, 2, 1, 0, 1], [0, 1, 1, 0], [0, 3, 2, 2, 3], [1, 1], [1, 0, 1], [0], [1, 1], [], [2, 4, 2, 1, 4, 1], [0, 2], [], [1, 2, 2], [2, 1], [], [10], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 1, 11, 2, 3, 2, 1, 1, 2, 0, 6, 2, 0, 2, 2, 0, 1, 1, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(\"\"9\"\"[( min(int(3.0), i0) - int(6.0) ):], i1)[:len(\"\"k\"\".capitalize())]\\ni0 -= mod(abs(i0),i1)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 4, 4, 0, 2, 8, 1, 1, 6], [2, 2, 1, 2, 0, 2, 0, 0, 1, 1, 1, 1], [], [2, 1, 3, 2, 0, 3, 1, 2, 3, 3, 2, 2, 2, 0, 3, 0, 1, 2, 1, 3, 0, 2, 1, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 3, 3, 1, 2, 0, 2, 1, 3, 0, 0, 3, 1, 1, 0], [1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 1, 2, 2, 1, 2, 2, 2, 4, 1], [0, 0, 1, 2], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 5], [0, 1], [], [4, 1, 2, 0], [0, 1], [], [0], [3, 2], [], [], [3], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 12, 0, 47, 16, 10, 4, 12, 2, 2, 0, 4, 1, 0, 1, 2, 0, 0, 1, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(\"\"[3\"\", mod(int(8.0),abs(divInt(i2,max(int(4.0), divInt(abs(abs(divInt(( divInt(i2,max(i1, int(4.0))) + divInt(int(0.0),abs(i2)) ),( int(2.0) + divInt(( mod(divInt(mod(i0,i2),mod(i0,i0)),abs(abs(int(8.0)))) - ( i1 * mod(int(1.0),saveOrd(in2[i1:i1])) ) ),max(int(1.0), int(6.0))) )))),i1))))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1], [3, 7, 2, 3, 7, 5, 1, 1, 3, 9], [2, 2, 2, 1, 1, 0, 2, 2, 1, 2, 0], [0, 0], [3, 0, 2, 1, 3, 0, 3, 2, 1, 2, 0, 0, 2, 0, 1, 3, 3, 0, 2, 3, 1, 2, 1, 0, 0, 3, 0, 1], [0, 1, 1, 1, 0, 1], [0, 0, 0, 3, 1, 3, 4], [1, 2], [1, 1, 0, 1], [5, 2], [0, 1, 1, 1], [], [2, 3, 2, 1, 1, 0, 3, 4, 4, 4, 4, 3, 0, 1], [3, 1, 3, 0], [1, 2], [0, 0], [1, 3, 3, 3], [], [3], [], [1, 5, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 11, 2, 28, 6, 7, 2, 4, 2, 4, 0, 14, 4, 2, 2, 4, 0, 1, 0, 3], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = min(i2, ( int(3.0) - min(i2, min(mod(int(7.0),mod(i1,i1)), divInt(i0,int(2.0)))) ))\\ni2 = len((\"\"d\\\\\\n\"\"[max(i2, ( len(\"\"\"\"\") * int(3.0) )):mod(int(75.0),i1)] + in2)[i2:saveOrd((saveChr(i0).rstrip() + getCharFromString((s2 + \"\"/\"\"), int(1139.0)).strip()))])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [], [1, 0, 2], [], [0, 0], [], [], [0], [0], [1], [0], [], [1], [], [0], [], [0, 0, 1, 0, 0, 1, 1], [4, 4, 4, 4, 2, 8, 5], [1, 1, 1], [0], [0, 1, 3, 3, 3, 1, 1, 0], [], [0, 2, 4], [], [], [0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [], [1, 2, 1], [], [], [0], [3, 1, 1, 2, 2, 2, 3, 1, 3, 1], [], [13, 9, 23, 9], [5, 7, 5], [26, 25, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 3, 1, 8, 0, 3, 0, 0, 1, 10, 0, 3, 0, 0, 1, 10, 0, 4, 3, 3], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\nb0 = int(444.0) \\l min(abs(saveOrd(\"\"[nj575@x\"\")), int(428.0))\\ns0 = \"\"%j\"\"[int(5.0):i1]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [], [2], [], [1], [], [], [], [], [0, 0, 1, 1], [2, 1, 8, 2], [2, 1], [0], [3, 1, 3, 0, 2, 3, 1, 3, 0], [0], [3, 4, 1, 3], [1], [], [2, 5, 5, 5, 3], [1, 1, 1, 1, 1], [], [4, 0, 3, 3, 1, 2, 0, 0, 4, 4, 0, 2, 2, 4, 0, 1, 3, 4, 1, 4, 1, 1], [3, 3, 3, 3, 2, 0], [2, 2, 4, 4], [0, 1, 2], [1, 3, 1, 1, 3], [], [21, 1, 22], [], [2, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 9, 1, 4, 1, 0, 5, 5, 0, 22, 6, 4, 3, 5, 0, 3, 0, 2], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2.strip() not in ((\"\"v\"\" + in2[len(in2):int(218.0)]) + in2.rstrip(in0.rstrip(\"\"\\\\\\t\"\")[saveOrd((\"\"b\"\".capitalize() + getCharFromString(\"\"w\"\", i2))):][:( max(int(2.0), len(\"\"_\"\")) - i1 )]).strip())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0, 1], [4, 6, 7, 4, 8], [0, 2, 2, 2, 0], [0], [1, 0, 1, 2, 1, 0, 0, 1], [1], [], [], [0], [1, 5], [0, 0, 0, 0, 0, 0, 0, 0, 1], [], [3, 1, 4, 2, 4], [1, 1], [], [0, 1], [3, 3, 2, 2, 3, 0, 0, 0, 3], [17, 23, 23], [], [3, 5], [11, 19, 16, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 1, 9, 0, 3, 1, 0, 0, 9, 3, 0, 2, 4], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(4.0)\\ns1 = (\"\"(:35-RXX\"\\\\\"\"\" + saveChr(i2))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 9, 2, 9, 9], [1, 2, 2], [0], [3, 3, 2, 2, 3, 3, 1, 2, 0, 2, 1, 0, 0, 2, 1, 2, 1, 1], [1, 0, 1, 0, 1, 0], [3, 4, 3, 4], [0, 0, 0], [1, 0, 0], [4, 0, 1], [1], [], [0, 2, 3, 0, 4, 2, 1, 0], [1], [], [1, 0], [3], [], [], [], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 18, 6, 4, 3, 3, 3, 1, 0, 8, 1, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = len(in1) == saveOrd((s0 + saveChr(mod(( len(\"\"\\\\\\t\"\"[saveOrd(s1):int(0.0)]) + divInt(i1,( int(9.0) + i2 )) ),i2)))[:divInt(int(2.0),( int(9.0) + int(9.0) ))])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 2], [], [], [], [], [3, 3], [], [2], [], [3], [0], [], [], [], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [7, 8, 1, 0, 4, 9, 8, 4, 5, 0], [1, 0, 2, 2, 2, 0, 1, 2, 1, 0, 0, 2], [], [0, 2, 3, 3, 0, 2, 0, 1, 0, 2, 3, 3, 1, 0, 1, 2, 3, 2, 0, 2, 2, 2, 1, 2, 2, 0, 2, 1, 1, 0, 0, 0, 0, 2, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [3, 1, 2, 1, 0], [2, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1], [3, 2], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [], [0, 1, 2, 3, 1, 4, 2, 1, 4, 4, 2, 1], [3, 2, 2], [2], [0, 0, 0], [1, 3, 0, 3, 0, 0, 3, 3, 3, 1, 3, 0, 1, 1], [7, 21, 3, 21], [7, 6, 20, 12], [], [11, 19, 31, 21, 17, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 12, 0, 37, 12, 5, 4, 8, 2, 14, 0, 12, 3, 1, 3, 14, 4, 4, 0, 6], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0 != \"\"h(H\"\"\\ns2 = (\"\":VD`\"\" + \"\"<.g.Vu\"\"[i1:mod(len(\"\"m\"\"[max(i0, ( i2 * int(7.0) )):i2].capitalize().capitalize()),( abs(max(int(8.0), i2)) - int(10.0) ))].strip())[( min(divInt(i0,( divInt(divInt(int(4.0),divInt(divInt(i1,divInt(int(9.0),int(8.0))),i2)),i1) - i0 )), i0) + mod(int(45.0),i2) ):int(0.0)]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 6], [1], [1], [3], [], [4], [0], [], [3, 4], [0, 1], [], [3, 4, 3, 0, 1, 0], [2], [], [], [0, 1], [11], [8], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 2, 2, 0, 6, 1, 0, 0, 2, 1, 1, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += saveOrd(((in0 + \"\"Li\"\").capitalize() + in1))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [], [], [], [], [1], [5], [1, 2], [0], [4], [], [], [], [0], [1, 1, 1, 1, 1, 0, 1], [5, 8, 3, 4, 0, 2, 6], [0, 1, 0], [], [2, 2, 1, 3, 1, 0, 2, 1, 2, 3, 2, 2, 3, 1, 0, 3, 1, 3, 1], [1, 0, 0, 0, 1, 0], [1, 3, 2, 0, 3], [1, 2, 2, 1], [1, 1], [1, 0], [1, 0, 0, 1], [], [0, 1, 1, 0], [], [], [], [2, 0, 1, 0], [4, 24], [3], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 7, 7, 2, 0, 19, 6, 5, 4, 2, 2, 4, 0, 4, 0, 0, 0, 4, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(( int(5.0) - max(int(8.0), i0) ),( int(3.0) * ( len(s1) * mod(( abs(int(4.0)) - i1 ),min(int(0.0), len(\"\"1\"\"))) ) )) != int(26.0):{:\\nb1 = \"\"EdY\"\".startswith(s0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [1, 2, 1, 2, 0, 0, 2, 2, 0, 0, 2, 1, 2, 1, 2, 2, 0, 1, 1, 1, 1, 2, 1, 1, 0, 1, 0], [2, 0, 1, 2, 2, 0, 1, 1, 0], [0, 1, 1, 1, 2, 1, 1, 0, 0, 0, 1, 0, 2, 2, 0, 2, 2, 0], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [3, 3, 1, 3, 2, 2, 1, 1, 3, 1, 2], [0, 3, 1, 0, 3], [2, 1, 1, 2, 1, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 1, 1], [0, 0, 0, 0, 0], [4, 5, 2, 2, 0, 2], [2, 3, 1, 0, 0, 3, 0, 3, 0, 2], [1, 0, 1], [0], [0, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [3, 7, 8, 6, 6, 3, 7, 4, 9, 8, 8, 3, 0, 0, 3, 4, 9, 5, 3, 9, 5, 5, 3, 5, 0, 4, 1, 0, 1, 2, 5, 6, 8, 7, 8, 2, 0, 0, 9, 9, 0, 9, 9, 7, 8, 0, 5, 9, 6, 5, 5, 5, 4, 1, 4, 4, 6, 6, 4, 6, 1, 2, 0, 5, 7, 7, 0, 7, 6, 1, 8], [2, 0, 2, 2, 2, 1, 0, 2, 0, 0, 1, 2, 1, 2, 1, 0, 0, 1, 2, 1, 2, 1, 1, 1, 0, 2, 2, 1, 1, 2, 0, 0, 2, 2, 2, 2, 2, 1, 0, 1, 2, 1, 2, 2, 1, 1, 0, 1, 2, 0, 0, 2, 0, 0, 2, 1, 2, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 2, 1, 2, 1, 1, 1, 1, 3, 3, 2, 3, 2, 0, 2, 3, 3, 2, 0, 0, 3, 2, 1, 1, 0, 3, 1, 3, 3, 1, 2, 0, 0, 3, 2, 3, 2, 2, 0, 3, 0, 1, 0, 1, 1, 2, 2, 1, 2, 2, 0, 2, 1, 3, 2, 1, 1, 1, 2, 2, 3, 1, 2, 1, 3, 1, 1, 1, 3, 2, 0, 3, 0, 0, 3, 2, 2, 1, 3, 0, 0, 2, 1, 1, 2, 3, 2, 1, 3, 0, 3, 2, 3, 0, 3, 3, 2, 3, 1, 1, 2, 0, 3, 3, 2, 0, 2, 1, 2, 1, 1, 3, 2, 2, 3, 1, 3, 2, 2, 3, 3, 1, 0, 2, 2, 3, 0, 3, 1, 1, 0, 0, 3, 1, 1, 1, 0, 2, 0, 1, 0, 1, 1, 2, 0, 1, 3, 3, 0, 0, 1, 1, 2, 0, 3, 0, 3, 1, 2, 0, 1, 3, 1, 1, 0, 2, 1, 0, 3, 3, 0, 2, 3, 1, 2, 2, 3, 0, 1, 0, 3, 2, 1, 0, 0, 3, 1, 2, 0, 0, 0, 2, 3, 0, 1, 3, 2, 2, 3, 0, 3, 0, 3, 2, 0, 2, 0, 3, 0, 0, 2, 2, 3, 1, 0, 0, 3, 3, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 1, 1, 1, 2, 4, 1, 1, 3, 4, 0, 4, 0, 4, 0, 3, 1, 3, 3, 4, 4, 2, 2, 3, 4, 2, 2, 3, 4, 4, 0, 3, 0, 1, 4, 2, 1, 2, 3, 3, 2, 0, 3, 4, 0, 0, 2, 1, 4, 4, 3, 2, 1, 4, 2], [2, 1, 0, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 0, 1, 0, 1, 1, 2, 0, 2, 0, 1, 1, 1, 2], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [2, 4, 2, 5, 2, 5, 5, 5, 3, 0, 1, 3, 2, 4, 4, 2, 0, 2, 1, 3, 1, 3, 3, 3, 2, 3, 2, 1, 4, 1, 3, 1, 2, 1, 4], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0], [0, 3, 0, 0, 1, 1, 3, 1, 2, 4, 1, 1, 0, 4, 0, 2, 1, 1, 3, 4, 1, 3, 2, 1, 4, 4, 4, 2, 4, 1, 1, 1, 1, 0, 0, 3, 3, 4, 4, 0, 0, 2, 4, 4, 2, 2, 0, 4, 0, 0, 0, 1, 2, 4, 2, 2, 2, 1, 2, 0, 4, 0, 4, 2, 1, 0, 0, 0, 2, 2, 4, 4, 3, 4, 4, 2, 3, 2, 2, 2, 4, 4, 2, 4, 0, 4, 4, 1, 2, 2, 0, 4, 0, 4, 0, 0, 3, 2, 0, 2, 0, 2, 0, 0], [2, 3, 1, 3, 1, 0, 2, 3, 1, 1, 3, 1, 1, 1, 3, 1, 1, 2, 1, 1, 2, 3, 2, 0, 1, 2], [4, 2, 0, 1, 1, 5], [0, 0, 2, 2, 2, 1, 2, 2, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2, 2, 0, 0, 2, 0, 0, 2], [0, 2, 1, 3, 1, 2, 2, 2, 1, 3, 1, 2, 2, 1, 1, 2, 1, 2, 3], [3], [9, 21, 19, 20, 24, 6, 8], [1, 7, 1, 3, 5, 2, 4, 9], [0, 19, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 27, 27, 9, 18, 3, 7, 0, 0, 11, 5, 21, 5, 6, 10, 3, 1, 3, 71, 71, 61, 6, 223, 55, 56, 26, 31, 35, 19, 3, 104, 26, 6, 25, 19, 1, 7, 8, 3], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2.startswith((in1 + s2))\\nloopBreak% = 0\\nwhile i2 \\l i0:{:\\ni2 *= int(37.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in \"\"D\"\":{:\\ni2 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = divInt(int(8.0),( int(663.0) - int(7.0) ))\\nif int(4988.0) \\ge int(3.0):{:\\nloopBreak% = 0\\nwhile \"\"1\"\".endswith((\"\"j\"\" + \"\"v\"\".capitalize()[min(abs(mod(max(mod(i0,( max(max(divInt(i2,i0), abs(( int(0.0) + int(0.0) ))), i0) * saveOrd(\"\"7\"\") )), int(3.0)),max(max(int(4.0), ( i1 * i2 )), len(s2)))), ( saveOrd(in2.rstrip(\"\"1\"\"[divInt(( i1 * min(i2, int(9.0)) ),i1):int(5.0)])) * int(3.0) )):divInt(divInt(int(95.0),divInt(divInt(i0,( int(5.0) * saveOrd(\"\"3\"\") )),( int(3.0) - int(5.0) ))),int(0.0))])):{:\\nin2 = (saveChr(( ( min(int(4.0), ( int(1.0) * saveOrd(\"\"t\"\") )) - int(0.0) ) - int(1.0) )) + (\"\":\"\"[int(2.0):] + saveChr(min(( i0 * len(getCharFromString(\"\"u\"\".capitalize()[i1:], i2)) ), max(divInt(mod(int(5.0),len(\"\"5\"\")),i1), i2))).strip()))\\ni1 = divInt(int(68.0),int(782.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( len(\"\"2y\"\") + ( int(0.0) - saveOrd(\"\"g\"\") ) ) \\g i1:{:\\ni1 = saveOrd(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nfor in0 in s0:{:\\nres0 = not ( True or ((saveChr(( abs(i0) + abs(len(s1)) )).lstrip() + in0) + saveChr(divInt(saveOrd(s2[int(0.0):][:int(9.0)].rstrip()),( i2 - abs(abs(divInt(i2,mod(int(9.0),( int(0.0) - int(9.0) ))))) )))[len(saveChr(( divInt(saveOrd(in1),int(9.0)) * saveOrd(in1) ))):]) == s2 )\\nif b1:{:\\nif res0:{:\\nb2 = \"\"4\"\" == saveChr(( divInt(min(len(\"\"i\"\"[:int(7.0)][i1:mod(( min(i1, max(int(8.0), int(0.0))) + i2 ),i0)][:saveOrd(s0[int(5.0):])]), int(9.0)),int(6.0)) * i0 ))[divInt(i2,int(5.0)):]\\nb2 = saveChr(i2) in s2\\ni2 += int(5.0)\\nb1 = ( b1 and ( res0 or \"\"9\"\"[:int(5.0)].rstrip() == s1 ) )\\nin0 = s1\\n:}else:{:\\nloopBreak% = 0\\nfor in0 in in0:{:\\nin0 = saveChr(divInt(i2,int(4.0)))[abs(max(i2, i1)):int(1.0)][int(4.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not mod(i0,abs(i1)) \\l len(saveChr(int(4.0)))\\n:}\\ns2 = (saveChr(( i2 - int(6.0) )).capitalize() + (saveChr(len(in0.strip(getCharFromString(\"\".\"\", int(6.0)).capitalize())[int(4.0):i1].capitalize()))[( int(6.0) - i2 ):][abs(min(i2, divInt(len(s2[int(1.0):][mod(divInt(saveOrd(saveChr(i1)),int(2.0)),i1):min(divInt(int(0.0),i0), i1)]),min(int(5.0), divInt(i2,i0))))):][i0:] + s1)[( abs(i2) - int(7.0) ):])\\nin1 = s1.capitalize()\\n:}\\nb2 = max(divInt(divInt(saveOrd(in0),i0),saveOrd((s1[i0:len(s2[mod(i2,( i1 * abs(i2) )):i1])] + s1[divInt(mod(max(int(7.0), i1),i1),saveOrd(in1)):]))), abs(i1)) \\ge int(07618.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [0], [2], [0], [], [], [], [], [5], [1], [0], [], [], [], [], [0], [1, 0], [5, 8], [0], [], [0, 1], [1], [], [], [0], [5, 4, 1], [1], [0], [0, 1], [], [], [], [3], [9], [], [], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in1:{:\\ns1 = \"\"^\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1], [0, 2, 2, 0, 1, 1, 1], [2, 1], [2, 2, 2, 0, 2], [], [0, 0], [], [], [2], [1, 1, 0], [1, 1, 1], [0, 0, 0], [], [], [], [], [0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [3, 4, 1, 6, 7, 0, 6, 1, 5, 4], [1, 1, 2, 1, 1, 1], [], [3, 3, 2, 1, 1, 1, 0, 2, 0, 0, 1, 2, 0, 1, 2, 3, 0, 0], [0, 0, 0, 0], [2, 2, 2], [2, 0, 2, 2], [], [1, 5, 0, 2, 1, 0], [1, 0, 0, 0, 0, 0, 1], [], [0, 4, 4, 1, 4, 0, 1], [2, 2, 0], [], [], [1, 2, 1, 0, 1, 1, 2], [15], [2, 1, 7, 17], [5, 4], []], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 0, 2, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 1, 10, 10, 6, 0, 18, 4, 3, 4, 0, 6, 7, 0, 7, 3, 0, 0, 7, 1, 4, 2, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\nloopBreak% = 0\\nwhile abs(abs(( int(341670.0) * int(6.0) ))) \\g int(1.0):{:\\nif i1 \\g ( i1 + i2 ):{:\\ns0 = \"\"c\"\".capitalize().capitalize()\\ns2 = getCharFromString(s1, int(5.0))\\nb2 = ( i1 * int(4.0) ) \\l ( abs(i1) * i1 )\\ns0 = \"\"5bPhr4\"\"\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 2, 0, 0, 1], [0], [0, 2, 1, 2, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [4], [1, 0, 0], [0], [], [1, 0], [], [0], [], [1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [5, 8, 9, 0, 0, 2, 4, 5, 9, 0, 1, 6, 8, 0, 8, 8, 6, 6, 5, 7, 6, 3, 8, 2, 3, 8, 2, 6, 3, 6, 7, 5, 3, 4, 3, 2, 1, 9, 3, 0, 9, 2, 0, 8, 2, 4, 1, 4, 8, 1, 2, 4, 8, 8, 1, 5, 4, 6, 2, 0, 8, 3, 0, 0], [0, 0, 2, 1, 0, 0, 2, 1, 0, 2, 0, 2, 0, 1, 1, 1, 0, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 0], [1], [2, 1, 3, 2, 1, 2, 2, 3, 3, 0, 0, 3, 2, 0, 0, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 3, 1, 3, 2, 0, 3, 3, 1, 2, 0, 2, 3, 2, 3, 3, 2, 1, 2, 0, 3, 3, 2, 3, 2, 3, 3, 2, 0, 0, 3, 0, 3, 3, 0, 1, 1, 1, 3, 3, 1, 1, 0, 3, 1, 2, 2, 0, 1, 2, 1, 1, 3, 3, 3, 2, 1, 2, 0, 2, 1, 2, 2, 0, 3, 1, 2, 3, 3, 3, 2, 1, 1, 1, 1, 2, 2, 0, 2, 3, 3, 0, 0, 1, 1, 2, 3, 2, 0, 1, 2, 3, 2, 1, 0, 1, 3, 3, 2, 3, 1, 3, 2, 1, 1, 0, 1, 0, 1, 2, 2, 2, 1, 2, 1, 3, 1, 1, 3, 3, 2, 3, 0, 0, 0, 0, 3, 3, 1, 3, 2, 1, 2, 0, 3, 0, 3, 3, 1, 2, 0, 1, 1, 3, 3, 1, 3, 3, 1, 1, 2, 1, 1, 1, 0], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 3, 4, 1, 1, 3, 0, 1, 0, 0, 2, 3, 4, 3, 4, 1, 0, 3, 4, 4, 4, 1, 0, 3, 3, 0, 2, 1, 4, 0, 0, 0, 3, 1, 1, 0, 4, 2, 2, 1, 0, 0, 0, 4, 3, 0, 1, 2, 2, 2, 3], [0, 1, 2, 0, 2, 2, 1, 2, 1, 2, 0, 2, 1, 1, 0, 2, 2, 2, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [2, 2, 3, 0, 0, 5, 5], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [3, 2, 0, 2, 2, 4, 0, 4, 1, 2, 2, 1, 3, 2, 1, 1, 0, 4, 4, 2, 2, 4, 2, 4, 4, 2, 2, 1, 4, 1, 1, 2, 2, 1, 2, 2, 1, 4, 2, 1, 4, 0, 4, 0, 2, 0, 1, 4, 1], [0, 0, 0, 0, 1, 1, 1, 3, 2, 2, 1, 3], [0, 1], [2, 1, 2, 0, 1, 0, 1, 0, 1, 1, 2, 1, 0, 2, 0, 0, 1], [3, 0, 3, 0, 1, 3, 2, 3, 1, 0, 1, 0, 1, 2, 1], [4, 1, 22, 8], [2, 6, 7, 10, 24], [4, 4], [26, 22, 13, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 64, 64, 30, 0, 180, 45, 51, 22, 23, 7, 15, 0, 49, 12, 2, 17, 15, 4, 5, 2, 4], "tree_depth": 72, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( int(5.0) + min(divInt(int(890.0),( divInt(len((s2[saveOrd(getCharFromString(s2, i0)[i0:][:max(mod(i2,i1), int(0.0))]):] + getCharFromString(\"\"[\"\", int(2.0)))),int(4.0)) - int(59.0) )), divInt(int(0.0),int(1.0))) ) \\le mod(int(6808.0),int(86.0))\\nin0 = \"\"E\"\"[:divInt(max(int(657.0), len((\"\"=Bc*\"\"[( i0 * min(max(int(6.0), divInt(i0,mod(min(divInt(min(abs(mod(int(3.0),( i2 + len(\"\"4\"\") ))), saveOrd(s0)),( len(getCharFromString(getCharFromString(saveChr(divInt(saveOrd(saveChr(max(( i1 * i0 ), min(i2, len(saveChr(saveOrd(\"\"\"\\\\\"\"\"[i0:][:int(8.0)]))))))[:int(2.0)]),int(3.0)))[saveOrd(\"\"g\"\".lstrip()):saveOrd(\"\"W\"\")][:int(8.0)], int(2.0)), i2)) * max(int(6.0), mod(mod(i0,int(3.0)),( int(6.0) - int(7.0) ))) )), min(len(\"\"h\"\"[len(\"\"I\"\"[( int(5.0) * ( i1 - divInt(int(3.0),mod(mod(i1,min(int(4.0), mod(abs(max(saveOrd(\"\"k\"\"[( int(3.0) * int(2.0) ):int(1.0)].capitalize()), int(9.0))),( divInt(i1,divInt(min(min(i0, i2), int(3.0)),int(0.0))) + ( min(mod(i1,int(9.0)), ( len(s0.capitalize()) * ( int(2.0) - i0 ) )) - int(0.0) ) )))),max(max(mod(min(int(8.0), saveOrd(saveChr(( int(2.0) + int(4.0) )))),i2), int(1.0)), i0))) ) ):int(4.0)][( divInt(( int(8.0) * mod(int(1.0),abs(int(2.0))) ),int(4.0)) * abs(max(( min(i1, i2) * i1 ), i1)) ):]):min(min(int(8.0), saveOrd(in2)), ( int(8.0) + ( i0 - len(in2[:i0]) ) ))][:min(max(int(1.0), ( i2 - int(5.0) )), int(4.0))]), abs(abs(int(6.0))))),abs(len(\"\"4\"\"))))), int(2.0)) ):int(0.0)] + \"\"y\"\".rstrip()))),( int(8.0) - int(30.0) ))][int(0.0):i0]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 2, 2, 2, 1, 1, 0, 0, 2, 0, 1, 2, 1, 1, 0], [0, 2, 1, 0, 2, 1], [1, 2, 1, 1, 1, 0, 1, 1, 0, 0], [0, 0], [0, 0, 0, 0, 0], [], [], [2, 2, 2, 3], [1, 5, 1], [2, 0, 1, 1, 2, 2, 1], [0, 0, 0], [2, 2, 5], [0], [], [], [1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 5, 9, 5, 2, 0, 5, 8, 1, 9, 2, 6, 4, 3, 5, 8, 1, 1, 6, 6, 0, 5, 6, 0, 6, 5, 6, 3, 9, 4, 5, 5, 7, 6, 4, 8, 9, 1, 4], [0, 0, 2, 0, 2, 2, 1, 1, 1, 1, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 2, 2, 0, 2, 0], [1, 0, 1, 1, 0, 0], [2, 0, 1, 3, 2, 1, 0, 3, 3, 3, 1, 1, 0, 1, 3, 1, 1, 1, 1, 1, 3, 0, 3, 1, 3, 0, 3, 0, 3, 0, 0, 1, 2, 0, 0, 2, 2, 2, 0, 0, 3, 1, 0, 1, 0, 2, 0, 1, 1, 1, 1, 2, 0, 2, 3, 3, 0, 3, 2, 0, 1, 2, 0, 2, 3, 1, 3, 0, 1, 0, 3, 0, 3, 0, 3, 2, 3, 1, 1, 1, 3, 3, 1, 1, 0, 3, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 1, 4, 2, 2, 4, 0, 2, 2, 2, 0, 2, 3, 3, 0, 2, 0, 0, 0, 0, 2, 3], [1, 0, 1, 2, 1, 2, 2, 1, 0, 2, 0], [0, 0, 0, 1, 1], [3, 0, 2, 4, 4, 4, 2, 4, 1, 5, 5, 3, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0], [2, 2, 4, 2, 2, 4, 0, 3, 3, 2, 2, 1, 0, 1, 2, 2, 3, 4, 3, 3, 0, 4, 0, 1, 4, 2, 0, 0, 1, 2, 2, 0, 0, 4, 1, 4, 4, 3, 1, 3, 2, 0, 0, 1], [0, 1, 1, 1, 0, 1, 1, 3], [3], [2, 0, 2, 0, 2, 0, 1, 2, 2, 1, 1, 2], [1, 0, 2, 0, 3, 1, 3, 0, 3], [13, 16, 8], [8, 14], [9], [20, 31, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 6, 10, 2, 5, 0, 0, 4, 3, 7, 3, 3, 1, 0, 0, 2, 39, 39, 31, 6, 88, 13, 23, 11, 5, 13, 9, 2, 44, 8, 1, 12, 9, 3, 2, 1, 3], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( i0 + int(2595205.0) )\\nloopBreak% = 0\\nfor in0 in getCharFromString(saveChr(max(divInt(int(8.0),i2), min(max(saveOrd(s0), int(1.0)), int(9.0))))[i0:int(264.0)][abs(int(35.0)):], int(8.0))[int(1.0):int(16.0)][int(6.0):]:{:\\nloopBreak% = 0\\nwhile ((\"\"iN9\"\"[abs(i2):saveOrd(s2)][int(0.0):] + \"\"Q\"\") + (saveChr(min(i2, abs(i1))) + ((in1 + saveChr(abs(i1))) + in1))[i1:][:int(5.0)]) == \"\";\"\":{:\\nif b2:{:\\nloopBreak% = 0\\nfor in1 in getCharFromString(s2[( i1 - i0 ):], ( ( ( i1 * i1 ) - abs(int(6.0)) ) * i1 )):{:\\nin1 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(0.0)\\n:}else:{:\\ni0 *= i1\\n:}\\ni0 -= divInt(i0,int(6.0))\\nloopBreak% = 0\\nwhile int(5.0) \\g int(639.0):{:\\nb2 = int(4.0) != divInt(i2,mod(min(abs(i0), len(\"\"o\"\")),( i2 + int(5.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = ( i1 * mod(len(in2[:int(5.0)][:min(i1, int(7.0))]),i0) )\\nif in2 == saveChr(abs(i2)):{:\\ni2 = min(i0, min(( min(int(6.0), int(4.0)) + int(8.0) ), min(abs(int(9.0)), int(1.0))))\\n:}\\nb2 = \"\"`\"\".endswith(saveChr(i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = len((\"\"I\"\" + (in0[int(4.0):] + s0)).lstrip(\"\"&\"\")) \\g i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [1, 2, 1, 1, 2, 2, 0, 2, 1, 1, 0], [0, 0, 2, 1], [1, 0, 2, 1, 1, 0, 1], [0, 0], [0, 0, 0], [], [], [3, 1], [3, 0], [1, 2, 0, 2, 1], [0, 0], [5, 5], [2], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [3, 1, 7, 8, 3, 8, 0, 7, 4, 7, 1, 0, 0, 3, 3, 3, 2, 8, 3, 8, 2, 9, 5, 7, 3, 4, 2, 7, 9, 4, 4, 5, 9, 7, 6, 8, 1, 8, 1, 6, 6, 6, 9, 2, 2, 6, 4, 5, 0, 1, 8, 2, 9, 4, 6, 5], [1, 2, 1, 1, 2, 0, 0, 1, 2, 0, 1, 1, 1, 2, 0, 1, 1, 0, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 1, 0, 2, 2, 2, 0, 0, 1, 0, 2, 2, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1], [2, 0, 1, 2, 0, 3, 3, 3, 3, 2, 0, 2, 1, 0, 3, 3, 1, 1, 3, 2, 2, 0, 1, 0, 1, 3, 3, 0, 0, 0, 1, 2, 3, 2, 2, 3, 3, 1, 0, 3, 1, 0, 2, 1, 1, 1, 3, 1, 0, 0, 1, 2, 1, 0, 3, 3, 1, 0, 3, 3, 2, 3, 3, 2, 3, 0, 0, 0, 0, 1, 2, 1, 3, 2, 2, 3, 1, 0, 1, 3, 2, 3, 1, 1, 3, 0, 0, 0, 1, 0, 3, 2, 3, 3, 0, 3, 3, 1, 0, 2, 1, 3, 3, 1, 0, 1, 1, 0, 2, 1, 2, 3, 3, 0, 2, 2, 3, 3, 3, 3, 0, 1, 3, 2, 1, 0, 2, 0, 1, 3, 0, 1, 3, 3, 3, 1, 0, 0, 3, 0, 0, 2, 3, 0, 3, 3, 0, 0, 2, 2, 3, 0, 0, 3, 1, 3, 3, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 3, 0, 1, 1, 1, 2, 3, 0, 1, 3, 0, 1, 3, 0, 0, 3, 0, 3, 2, 1, 0, 1, 0, 0, 1, 1, 2, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0], [1, 3, 3, 0, 1, 1, 3, 1, 3, 4, 0, 3, 2, 1, 3, 1, 2, 2, 4, 1, 0, 2, 0, 3, 0, 4, 0, 4, 2, 3, 3, 3, 2, 4, 4, 0, 3, 2, 0, 2, 4, 3, 0, 1, 3, 1, 0, 3, 1, 0, 3, 4, 3, 4, 0, 0, 3, 2], [0, 0, 0, 1, 2, 0, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 1, 2, 2, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [4, 2, 1, 2, 5, 1, 3, 5, 0, 0, 5, 4, 1, 2, 4, 5, 4, 1, 3, 5, 2, 1, 1, 1, 2, 5, 4], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0], [3, 1, 1, 1, 2, 2, 2, 2, 0, 1, 2, 0, 4, 1, 4, 1, 2, 1, 4, 3, 3, 3, 3, 4, 0, 4, 0, 2, 2, 4, 1, 2, 0, 4, 4, 4, 1, 0, 0, 1, 3, 3, 3, 2, 4, 1, 3, 2, 1, 3, 3, 0, 3, 1, 1, 4, 4, 3, 4, 1, 2, 0, 0, 2, 4, 4, 4, 1, 1, 3, 4, 2, 3, 3, 2, 4, 2, 1, 2, 0, 4, 4, 2, 0, 2, 0, 3, 1, 4, 1, 0, 2, 2, 1, 4, 2, 4, 1, 4, 0, 4, 2, 0, 1, 4, 1, 0, 2, 4, 2, 0, 0, 0, 3, 4, 3, 1, 0, 1, 4, 2, 4, 1, 0, 0, 3, 4, 0, 2, 1, 4], [0, 0, 3, 0, 1, 0, 3, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 3, 3, 1, 0, 3, 2, 3, 3, 0, 0, 3, 1, 3, 0, 1], [3, 1, 2, 0, 0, 5, 1, 4, 5], [0, 0, 1, 0, 1, 2, 2, 0, 0, 0, 1, 1, 0, 1, 1, 0, 2, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [3, 0, 2, 1, 1, 2, 3, 1, 3, 3, 1, 1, 0, 1, 3, 2, 0, 2, 0, 3, 2, 2, 0, 1, 2, 3, 0, 3, 0, 0, 1, 0, 1, 2, 1, 0, 1, 3, 0, 0, 0, 0, 0, 3, 1, 3, 2, 3, 3, 0, 1], [8, 7, 2, 2, 13, 21, 24, 19, 23, 10, 6, 11, 20, 22, 14, 14], [18, 19, 18, 0, 16, 9, 20, 20, 7, 8, 13, 2, 24], [2, 2, 1, 0, 8, 3, 8, 4, 0], [18, 0, 19, 0, 16, 1, 6, 25, 23, 27, 20, 9, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 4, 7, 2, 2, 0, 0, 2, 2, 5, 2, 2, 1, 0, 0, 1, 56, 56, 62, 4, 197, 36, 58, 24, 16, 27, 51, 2, 131, 32, 9, 27, 51, 16, 13, 9, 13], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += mod(i2,int(3.0))\\nloopBreak% = 0\\nfor in1 in (\"\"/I2s\"\" + \"\"t\"\"):{:\\nres0 = ( i1 + max(len(\"\"2\"\"), len(s2[min(( i1 + ( int(1.0) - i2 ) ), max(max(int(7.0), int(8.0)), len(\"\"s\"\"))):( mod(i0,int(3.0)) * i0 )][:int(8.0)][max(len(s1[:i1]), i2):i0][int(0.0):( saveOrd(getCharFromString(\"\":\"\", mod(divInt(min(len(getCharFromString(\"\"\"\", int(7.0))), i1),abs(int(4.0))),i1))) + divInt(int(7.0),int(1.0)) )])) ) \\ge int(003.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = \"\"a\"\"[max(int(332.0), i1):]\\nloopBreak% = 0\\nfor in2 in ((((getCharFromString(s1, i2) + saveChr(int(83.0))) + in0) + getCharFromString(\"\"qHj\"\", ( int(8.0) - i0 ))[len(in2[max(int(2.0), i1):abs(abs(( saveOrd(getCharFromString(getCharFromString(\"\"-\"\", max(divInt(min(i1, i0),i1), i2)), int(9.0)).rstrip()) * mod(int(5.0),abs(( ( min(int(7.0), i1) + int(3.0) ) - len(s0) ))) )))]):mod(min(int(4.0), int(2.0)),saveOrd(s0))][i2:]) + \"\"1\"\").lstrip((((\"\"C0C\\\\\\n\"\".capitalize()[i2:i0] + (\"\"83\"\"[:int(7.0)] + ((in2 + (\"\"Nu8#\"\" + \"\"V@\"\")) + getCharFromString(getCharFromString((getCharFromString(\"\"Y\"\", i1) + in1[:min(mod(saveOrd(s1),abs(i0)), len(getCharFromString(saveChr(len(getCharFromString(\"\"T\"\", int(9.0)))), i1)[( int(4.0) + len(\"\"u\"\") ):abs(int(4.0))]))]), i2), int(5976.0))))) + (getCharFromString(((\"\"X\"\"[int(8.0):i1].strip()[:( int(1.0) + mod(saveOrd(s2[saveOrd(saveChr(i1).lstrip()):]),mod(( min(len(in1[abs(min(i2, int(8.0))):abs(mod(int(1.0),i1))]), mod(i2,int(6.0))) + saveOrd(in2[:i2]) ),int(6.0))) )] + (\"\"h4\"\" + getCharFromString(\"\"i\"\", len(in1)))) + \"\"K\"\"[:min(max(int(6.0), i2), i1)][len(\"\"n\"\".capitalize()[i0:i1].lstrip()):( max(i0, min(len(s1.strip(in0[:i2].rstrip())), i1)) + ( ( max(i0, i1) * min(int(9.0), len(\"\">\"\")) ) - saveOrd(getCharFromString(\"\"G\"\", ( ( ( divInt(int(2.0),i2) - divInt(i1,i0) ) - i2 ) * len(in2) ))) ) )])[:i2], int(26.0)) + getCharFromString(s2[int(45.0):int(01.0)], ( saveOrd(s1) * i2 ))[:int(8.0)])) + s1)):{:\\nloopBreak% = 0\\nwhile ((\"\"LUWO\"\" + s1).rstrip(\"\"\\\\\\\\c;0&)\"\") + saveChr(min(i0, int(2.0)))).endswith(\"\"O\"\".strip(s2)[min(i0, i1):len(in2)]):{:\\ni0 -= i2\\nif not (getCharFromString(in1, abs(divInt(int(9.0),i2))) + \"\"y\"\"[int(4.0):i1]).endswith(saveChr(i0)):{:\\ni0 -= int(6.0)\\nb1 = int(5.0) \\l ( i0 + i0 )\\n:}\\ni0 -= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [], [0], [], [], [0], [2], [1], [0], [], [], [], [], [], [0, 1, 1], [4, 8, 1], [2, 1, 1, 2], [0], [3, 0, 0, 3, 1, 1], [], [0, 3], [], [], [], [1], [], [2, 1], [], [], [1], [1], [], [18], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 6, 0, 2, 0, 0, 0, 1, 0, 2, 0, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = min(i2, i1) == len(\"\"s\"\"[:int(48.0)])\\ni1 = int(1.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 0, 0, 0, 1], [3, 5, 5, 9, 9, 2, 5, 7], [0, 0, 2, 1, 1, 0], [1], [3, 2, 3, 2, 3, 1, 0, 2, 0, 1, 3, 0, 3, 2, 1, 0, 2, 0, 1, 3], [1, 0, 0, 0, 1], [0, 4, 0, 4, 4, 3], [2, 2, 0, 1], [0, 1], [2], [1, 1, 0, 0, 1], [], [2, 4, 2, 2, 2, 0, 1, 4, 1, 1], [3, 2], [1], [1, 2, 0, 1], [0, 1, 3, 3, 1], [4], [12, 5], [], [28, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 6, 1, 20, 5, 6, 4, 2, 1, 5, 0, 10, 2, 1, 4, 5, 1, 2, 0, 2], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= min(divInt(saveOrd(s2[:( min(int(3.0), i0) * ( i2 + int(5.0) ) )][saveOrd(\"\"E\"\"):i1][saveOrd(\"\"m\"\".capitalize()):].rstrip()[:( int(59.0) - i1 )]),mod(i0,int(9257.0))), len(\"\"]`f\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [2], [0, 1], [], [], [], [], [0], [4, 4], [1, 2], [0, 0], [3], [1], [], [0], [], [1, 1, 1, 0, 1, 1], [0, 8, 2, 3, 6, 8], [1, 0, 2], [1], [1, 2, 0, 3, 3, 1, 3, 1, 3, 1, 3, 0, 1, 3], [0], [4, 1, 2, 4, 3, 4], [0, 0], [], [5, 1, 0, 1, 4, 5, 2, 1, 3, 5], [1, 0, 0, 0, 0, 0, 1, 1], [], [0, 0, 3, 4, 4, 0, 3, 2, 3, 2, 4, 0, 0, 0, 2, 3, 3, 1, 3, 4, 0, 3, 2, 1, 1, 0, 3, 0, 0], [3, 2, 1, 1], [3], [2, 2, 1, 1], [2, 1, 0, 2, 2, 1, 1, 2], [9], [1, 0, 13], [6, 5, 1, 3], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 6, 6, 3, 1, 14, 1, 6, 2, 0, 10, 8, 0, 29, 4, 1, 4, 8, 1, 3, 4, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\le ( i1 + saveOrd(in2) )\\nloopBreak% = 0\\nwhile s1 != (s0.capitalize().lstrip(((saveChr(max(int(8.0), abs(int(2.0))))[saveOrd(s1):] + in1)[int(36.0):] + in2)) + ((\"\"6\"\" + (saveChr(len(s2)) + (\"\"bJ51an\"\"[:i0] + \"\"3\"\"))) + s1)[:int(8.0)]):{:\\ni2 += saveOrd((in0 + in2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [], [], [], [3, 0], [3, 3], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 8, 3, 0, 0, 6, 4, 3, 4, 8, 1, 1, 2, 2, 0, 6, 7, 8, 3, 0, 5, 9, 7, 3, 0, 4, 0, 0, 8, 6], [2, 0, 2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 2, 0, 1, 0, 2, 0, 2, 2, 1, 1, 1, 0, 1, 1, 2, 0, 2, 2, 1, 0, 1, 1], [], [0, 1, 2, 3, 2, 2, 3, 2, 3, 0, 1, 0, 1, 2, 0, 0, 2, 2, 3, 3, 0, 1, 0, 3, 3, 2, 2, 1, 3, 0, 2, 3, 1, 2, 2, 1, 3, 0, 2, 1, 0, 3, 3, 1, 0, 1, 2, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 2, 0, 3, 0, 0, 2, 3, 1, 2, 3, 2, 0, 2, 3, 0, 2, 2, 1, 1, 1, 0, 2, 1, 0, 3, 3, 3, 2, 1, 3, 0, 3, 2, 2, 1, 0, 0, 2, 2, 1, 0, 1, 2, 0, 3, 1, 2, 3, 2, 3, 2, 2, 1, 2, 0, 1, 0, 3, 1, 0, 3, 0, 0, 2, 3, 3, 1, 1, 2, 1, 3, 2, 1, 3, 1, 3], [1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1], [3, 1, 0, 2, 1, 4, 1, 4, 2, 0, 4, 0, 4, 3, 2, 0, 1, 1, 4, 0, 4, 4, 0, 2, 3, 1, 2, 4, 3, 0, 3, 1, 3, 4], [1, 2, 2, 2, 0, 2, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 2, 2, 2, 2], [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [0, 4, 4, 4, 1, 3, 0], [1, 1, 1, 1, 1], [], [3, 4, 4, 4, 4, 1, 2, 4, 2, 2, 0, 4, 4, 2, 3, 4, 4, 2, 4, 1, 0, 2, 4, 2, 2, 1, 0, 0, 2, 4, 2, 4, 4, 1, 0, 2, 4, 0, 4, 1, 0], [2, 1, 0, 1, 1, 2, 1, 2, 3, 3, 1, 0, 3, 2, 1, 1], [4, 0, 5], [2, 1, 0, 0, 2, 2, 1, 0, 1, 2, 0], [2, 2, 2, 0, 1], [14], [12], [6, 9, 2], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 30, 30, 34, 0, 133, 36, 34, 22, 14, 7, 5, 0, 41, 16, 3, 11, 5, 1, 1, 3, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i2 \\ge int(98.0)\\nb0 = divInt(len((saveChr(mod(( max(( min(i0, int(3.0)) - i2 ), int(0.0)) * divInt(i0,i0) ),( ( abs(max(i2, int(0.0))) * i0 ) * saveOrd(getCharFromString(saveChr(max(mod(mod(int(6.0),saveOrd(\"\"6\"\")),i0), ( abs(int(4.0)) + divInt(( int(3.0) * min(i2, ( int(4.0) + i2 )) ),saveOrd(saveChr(min(int(8.0), i2))[int(1.0):])) ))), mod(i0,int(1.0)))) ))).capitalize() + s0[i2:i0][:i1])),i0) \\ge saveOrd(saveChr(len((\"\"9\"\".lstrip()[abs(i2):].rstrip(in1).capitalize() + saveChr(( i0 + min(i2, i2) ))[( max(int(2.0), ( max(mod(i1,( saveOrd(\"\"2\"\"[i1:( ( int(2.0) - int(0.0) ) + int(6.0) )][:i1]) + divInt(int(7.0),i0) )), min(saveOrd(in1), saveOrd(in1))) - ( int(8.0) - min(i1, abs(( ( int(3.0) + i1 ) - i2 ))) ) )) + divInt(( int(0.0) - i0 ),int(5.0)) ):])[mod(i2,len(getCharFromString(\"\"O\"\".capitalize().strip(s1)[int(9.0):], ( max(mod(abs(( mod(int(7.0),( i2 + int(3.0) )) - i1 )),saveOrd(saveChr(int(0.0))[i0:len(in0)])), i1) * i1 ))[:( min(len(saveChr(int(4.0))), int(0.0)) * ( int(0.0) * max(divInt(int(8.0),len(\"\"m\"\")), int(6.0)) ) )])):saveOrd(s0)])).capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 2], [], [], [3, 1, 1], [], [2], [], [], [1, 2], [1], [], [3, 4, 3, 4, 1, 0], [0, 1], [], [], [1], [], [12], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 1, 0, 0, 2, 1, 0, 6, 2, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = (getCharFromString((saveChr(abs(int(2.0))) + \"\"m\"\"), int(2.0)) + s2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 0, 1], [4, 4, 6, 5, 4, 5], [0, 0, 1, 0, 2, 0, 2, 0, 1], [], [2, 3, 0, 2, 2, 0, 2, 3, 0, 0, 3, 2, 0, 1, 3, 2, 0, 1, 0, 2, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1, 0], [4, 0, 3, 1], [2, 1, 1], [0, 0, 1, 1], [2, 5, 1, 1], [1, 0, 0, 0, 1, 1], [], [4, 1, 4, 2, 3, 2, 0, 3, 1, 3, 0, 4, 4, 1, 4, 2, 0], [3, 1, 2, 3, 1], [4, 3], [2, 1, 0], [0, 1, 1, 2, 2, 1], [5], [7, 6, 25], [8, 1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 9, 0, 24, 7, 4, 3, 4, 4, 6, 0, 17, 5, 2, 3, 6, 1, 3, 2, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"F\"\".rstrip(saveChr(divInt(saveOrd((in2[:i0] + (\"\"hg81\"\" + (s1 + \"\"z\"\".lstrip(saveChr(( divInt(i0,mod(min(i1, i0),len(s1[( i2 * int(4.0) ):max(mod(i0,int(4.0)), i2)]))) - ( i0 - i1 ) ))).capitalize())))[int(65.0):]),int(45.0))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [5, 1, 2, 6, 5, 2, 2, 5, 7, 5, 4, 1, 2, 5, 0, 0, 2, 4, 2, 4, 2], [2, 0, 2, 1, 2], [], [2, 3, 2, 0, 1, 3, 0, 1, 2, 0, 1, 2, 1, 0, 1, 3, 3, 1, 1, 3, 3, 1, 1, 3, 3], [1, 1, 1, 1, 1], [4, 1, 4, 3, 2], [1], [0, 1, 1, 0], [3, 4], [0, 0, 0, 1, 0, 1, 1], [], [4, 2, 2, 2, 4, 0, 4, 2, 4, 3, 1, 1, 1], [2, 2, 2, 1], [], [0, 0, 2, 0], [2, 1, 3, 3, 0, 1, 2], [14], [20, 24], [0, 6], [12, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 4, 0, 18, 4, 4, 0, 4, 2, 7, 0, 13, 4, 0, 4, 7, 1, 2, 2, 2], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in1.capitalize()[divInt(saveOrd(saveChr(mod(i2,int(5.0)))[max(i0, int(1.0)):mod(i2,int(265.0))].capitalize()),divInt(int(22.0),i1)):][int(5.0):saveOrd((\"\"0u)?\"\" + \"\"Oy\"\"))][len(\"\"6\"\"):int(7.0)].capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 0, 2, 1, 2, 1, 2, 0, 2, 0, 1], [2, 0, 0, 1], [1, 2, 2, 1, 2, 0, 2], [0, 0], [0, 0, 0, 0], [], [], [2], [3, 2], [2, 1, 1], [0, 0], [0], [], [], [], [0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [8, 4, 2, 6, 3, 6, 7, 0, 0, 1, 9, 5, 8, 8, 3, 5, 8, 1, 7, 4, 0, 4, 3, 8, 2, 3, 7, 1, 9, 4, 2, 8, 1, 9, 3, 0], [2, 2, 0, 0, 1, 2, 2, 1, 0, 2, 0, 1, 1, 2, 0, 1, 0, 1, 2, 1, 0, 0, 2, 0, 0, 1, 1, 2, 0, 2, 1, 2], [1, 0], [2, 1, 3, 3, 0, 3, 2, 1, 0, 0, 3, 1, 2, 0, 2, 0, 2, 3, 0, 3, 1, 1, 2, 0, 2, 1, 1, 2, 0, 1, 3, 0, 0, 2, 2, 0, 1, 1, 3, 2, 2, 3, 2, 0, 0, 0, 2, 2, 3, 0, 1, 2, 0, 0, 0, 0, 3, 2, 0, 0, 0, 2, 2, 1, 3, 3, 0, 0, 1, 1, 1, 3, 3, 0, 1, 3, 2, 0, 2, 0, 0, 1, 1, 3, 3, 0, 1, 1, 2, 0, 2, 1, 3, 1], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [2, 1, 0, 2, 3, 3, 1, 4, 3, 2, 1, 3, 4, 3, 3, 4, 0, 3, 2], [1, 1, 0, 1, 2, 0, 1, 0, 1, 0, 2, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 3, 0, 3, 4, 2, 4, 2, 3, 2, 2, 4, 2, 5, 3, 3], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1], [0, 0], [4, 0, 3, 4, 2, 3, 1, 0, 1, 2, 4, 0, 2, 3, 1, 4, 2, 1, 4, 3, 0, 3, 0, 4, 1, 4, 4, 4, 1, 2, 2, 4, 0, 0, 2, 2, 3, 2, 1, 2, 0, 4, 1, 3, 4, 2, 2, 2, 4, 2, 1, 0, 2, 0, 4, 1, 1], [0, 2, 0, 1, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1], [4, 5], [2, 1, 0, 0, 1, 1, 1, 2, 1, 2, 2, 2, 1, 0, 1], [0, 1, 3, 3, 0, 1, 1, 2, 1, 3, 1, 3, 0, 0, 3, 3, 1, 1, 0], [2, 12, 16, 7, 24], [22, 14, 23, 23, 9, 5, 21], [3], [21, 2, 10, 11, 3, 2]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 4, 7, 2, 4, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 36, 36, 32, 2, 94, 23, 19, 12, 12, 16, 19, 2, 57, 14, 2, 15, 19, 5, 7, 1, 6], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= divInt(int(8.0),abs(max(i2, min(( int(4.0) - i0 ), i0))))\\ns2 = getCharFromString(in0, abs(int(2.0)))\\nloopBreak% = 0\\nwhile ((\"\"C\"\" + s0)[mod(i1,mod(i2,mod(len(\"\"w\"\"),i2))):].capitalize() + getCharFromString(in0, len((\"\"<\\\\\\t\"\" + saveChr(int(6.0)))[int(36700.0):( i1 + mod(int(1.0),int(9.0)) )]))[:mod(i0,int(588.0))]) in \"\"M\"\"[max(i2, i0):mod(( i1 - int(358174.0) ),int(04.0))]:{:\\nin1 = getCharFromString((s2 + (in1 + \"\"ox3\"\".rstrip(saveChr(saveOrd(\"\"x\"\")).capitalize().strip(saveChr(mod(( len(s2) * ( i1 + i2 ) ),i0))[:( ( abs(i1) - int(3.0) ) + mod(i0,i1) )][:i2])))), i1)\\nloopBreak% = 0\\nfor in0 in s2:{:\\ni0 = max(mod(i0,i2), i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s2 in (\"\"\"\\\\\"j\"\"[:( mod(int(8.0),len(in1[saveOrd(saveChr(i0)):])) - i1 )] + \"\"(QH\"\")[int(23.0):][:int(7.0)]:{:\\ns2 = (saveChr(int(1.0)) + getCharFromString(\"\"\"\"[len(in2):len(in0[:i1])], int(9.0))[:saveOrd(saveChr(( i2 + ( i0 * i2 ) )))][int(4.0):][int(2.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif min(len(\"\"\\\\\\t\"\"), i1) \\ge int(8.0):{:\\nb2 = int(19.0) == mod(i2,( int(3.0) - abs(int(0.0)) ))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = \"\"fvY\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}]