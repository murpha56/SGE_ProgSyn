[{"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(int(5.0),min(i2, ( divInt(( int(7.0) + i0 ),divInt(len(saveChr(( i1 + ( min(divInt(int(2.0),i2), ( max(int(1.0), i1) * int(7.0) )) - int(7.0) ) ))),i2)) + i0 ))):divInt(int(9.0),abs(int(8.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 38, 11, 8, 5, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(( i2 * min(max(( int(7.0) - i1 ), divInt(abs(int(7.0)),i2)), int(1.0)) ))),int(7.0))) + i0 )) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 9, 8, 5, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[max(i0, int(0.0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 11, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 13, 0, 50, 16, 8, 8, 8, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(getCharFromString(saveChr(i0)[int(0.0):max(mod(i2,int(7.0)), mod(int(5.0),min(i2, ( mod(( int(7.0) + i0 ),divInt(len(in0[( i0 + ( i1 * divInt(int(2.0),i1) ) ):( min(i2, i0) - divInt(int(1.0),i0) )]),i2)) + mod(int(7.0),max(int(7.0), abs(i2))) ))))], ( ( ( int(9.0) * int(8.0) ) - divInt(int(5.0),i1) ) - int(0.0) )))] not in (\"\"R\"\" + s0.rstrip())[:int(4.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 241}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 10, 1, 3, 0, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i1,int(7.0))))[i2:int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [3], [], [], [], [23]], "fitness": 31, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (in2 + \"\">\"\")\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 4], [2, 0, 0, 0], [1], [2, 1, 3, 3, 0, 3, 2, 1, 0, 0], [1, 0], [2, 1, 0], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(8.0),abs(max(i0, min(( int(4.0) * i0 ), i0))))\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 10, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 1], [1, 2], [2, 1], [], [], [], [], [], [0], [0, 1, 0], [0], [], [2, 1], [], [1], [1], [1, 1, 1, 1, 1], [1, 5, 4, 1, 8], [0, 2, 0, 2], [0], [1, 1, 0, 2, 0, 2, 2, 1, 2, 3, 1, 3, 2, 1, 0, 3], [0, 0, 0, 0, 1], [2, 2, 4], [1, 2, 1, 2], [1], [1, 2], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not int(1.0) \\l int(5.0):{:\\nloopBreak% = 0\\nwhile False:{:\\ns1 = saveChr(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 = ( i0 - ( ( int(4.0) * ( abs(int(1.0)) - abs(mod(int(8.0),i2)) ) ) * saveOrd(s2) ) )\\n:}\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 0, 1, 3, 1, 0, 2, 0, 1, 1, 5, 5, 4, 1, 16, 5, 3, 4, 1, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 2, 0, 1, 2, 2, 1, 0], [1, 2, 2, 2], [1, 2, 1, 0, 1], [], [0, 0, 0], [], [], [], [5], [2, 1, 0, 2, 1], [0], [4, 3, 3], [2], [], [], [1, 1], [1, 1, 1], [0, 1, 4], [1, 1, 2, 0, 2, 2, 1, 2, 1], [1, 1, 0], [1, 1, 2, 2, 0, 2, 0, 3, 2, 2, 1, 3, 3, 1, 0, 0, 0, 3], [1, 1, 1, 1, 0], [4, 3, 0, 4], [2, 0, 1], [1, 1, 1, 1], [0, 2, 2, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [], [0, 2, 0, 0, 1, 4, 1, 1, 1, 1, 1, 2, 0, 1, 1], [3], [0], [2, 0], [3, 1, 0, 0, 2, 3, 3, 0], [7, 2, 8], [0], [4], [25, 14, 27]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1], [3], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(3.0) \\ge i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 0], [5], [0, 1], [0], [], [2], [], [], [], [1, 0, 1, 1], [9, 3, 4, 0], [], [], [1, 3, 1, 1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 4, 4, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not int(9.0) != max(int(34.0), int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [3], [1], [0], [], [], [], [], [], [1], [9], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(9.0) \\ge i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0, 0], [], [], [0], [1], [1], [0], [], [], [], [], [], [], [], [0, 0], [], [3, 0, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = abs(i0) \\g i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [], [0], [], [], [], [], [2, 0], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0[i2:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [], [], [0, 2], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 1, 0], [2, 0], [1, 1], [0], [0], [], [], [], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 8, 7, 5, 4, 6, 1, 2], [2, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0], [2, 0, 2, 1, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0, 2, 0, 1, 2, 1, 2, 3, 2, 0, 3, 1, 3, 1, 2, 0, 3, 2, 2, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [2, 3, 3, 2], [0, 2, 2, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1], [3, 1, 3, 5, 3, 4], [], [0], [0, 4, 2, 2, 4, 0, 0, 2, 0], [3, 0, 1], [5], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 6, 1, 11, 4, 0, 1, 3, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(i2,mod(int(2.0),i0)) == ( i0 + i1 ):{:\\nloopBreak% = 0\\nfor in0 in s1:{:\\ni1 = mod(i0,int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [5], [1], [0], [], [], [], [], [], [], [], [1, 1], [1], [0, 3], [], [3], [2], [], [2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = i1 != len(s2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1], [], [], [], [], [], [1, 2], [0, 1, 0, 2], [0, 0], [5], [3, 2], [1], [], [], [1, 1, 1, 1, 1, 1], [2, 9, 8, 4, 9, 2], [0, 0, 1, 2, 1, 1, 2], [1], [1, 0, 1, 2, 3, 2, 1, 3, 3, 2, 2, 2, 3, 1, 0, 0, 3, 0, 1, 2, 0, 0, 0, 3, 1], [0, 1, 1, 0, 0, 0, 1], [3, 1, 2, 0, 3, 2], [2, 2, 0, 2, 2], [0, 1, 0], [3, 1], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 4, 1, 1, 2, 1, 0, 0, 2, 2, 2, 1, 3, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( int(2.0) \\g i0 or not in0.endswith(s1) ):{:\\ni0 *= int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0], [2, 0, 1], [2], [2, 1], [], [0], [], [], [], [3], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [2, 0, 8, 2, 9, 3], [1, 1, 1, 1], [0], [3, 1, 0, 2, 2, 3, 1, 1, 3, 3, 0, 1, 0, 0, 0, 1], [1, 0, 0], [0, 3, 4, 1], [0, 1, 0], [0], [1, 5, 0], [], [], [4, 0, 4, 2, 0], [1, 0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 13, 2, 4, 1, 1, 3, 0, 0, 5, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(int(2.0), i1) \\ge divInt(( len(saveChr(int(0.0))) + int(8.0) ),saveOrd(s1)):{:\\nin2 = getCharFromString(s0[:max(i1, int(2.0))], i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [3, 0], [], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [1, 1, 1, 2], [1], [1, 2, 0, 3, 1, 0, 0], [0, 0], [0], [1, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [0, 0, 2, 1], [0], [3, 0, 2, 0, 3, 3, 0, 1], [1], [1, 2, 1], [], [0], [4], [1], [], [1], [], [], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 8, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = max(i0, divInt(i2,abs(max(i1, int(5.0)))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [7, 0, 3, 2, 7, 8], [0, 0], [], [1, 2, 0, 2, 3, 3, 1, 1, 1, 3, 1, 1, 0], [1, 1], [1, 3, 4, 4], [], [0, 1], [0, 1], [0, 1], [], [4, 4, 0, 4, 2, 2, 4, 1], [3, 1, 1, 1], [3], [2, 2], [3, 3], [], [], [], [4, 22]], "fitness": 31, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(7.0) \\l divInt(i0,mod(max(len(saveChr(int(0.0)).lstrip(s0)), int(3.0)),int(2.0)))\\ns1 = saveChr(saveOrd(saveChr(int(7.0))[int(8.0):][i0:]))\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 2, 0, 13, 2, 3, 0, 2, 2, 0, 0, 7, 4, 1, 2, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 4], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in1.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [8], [2], [1], [2, 1, 3], [1], [4], [0], [0], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(8.0),saveOrd(s0.capitalize()))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [1, 0, 2], [], [0, 0], [], [], [1], [], [2], [], [5], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [3], [2, 0], [0], [0, 1], [], [], [], [], [3, 1, 5, 1], [], [], [0, 4, 0, 4, 0], [3, 1], [5], [0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 4, 0, 0, 5, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\nb1 = in0.endswith(s1.strip(saveChr(int(3.0))))\\nin2 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [8, 5], [1], [0], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(85.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1], [4], [0], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(4.0) \\ge i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [2, 0, 0, 2], [0], [0, 2, 2, 1, 0, 0], [0, 0], [3], [2, 0], [], [2, 3, 4], [], [], [3, 0, 4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 6, 2, 0, 2, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (in0 + saveChr(i2))\\ni0 = ( ( int(1.0) * i0 ) + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [], [2], [], [4], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 4], [], [], [0, 3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s0.startswith((s0 + in1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1], [2, 1, 1, 1], [2, 0, 1, 1, 0, 0, 2], [], [0, 0, 0], [], [], [1, 2, 2], [3, 1, 1], [1, 2, 1, 1, 0, 0, 2], [0, 0, 0], [2, 4], [2, 0], [], [], [1, 0, 1], [1, 1, 1, 1], [0, 8, 0, 5], [1, 0, 1, 2, 1, 1, 0, 2, 0, 1, 0, 1, 1], [0, 0], [0, 0, 1, 2, 0, 2, 0, 1, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0], [1, 0, 0, 0], [], [1, 1, 1], [1], [1, 0, 5, 0, 2, 0, 5], [1, 1], [], [0, 0, 4, 2, 0, 4, 0, 1, 2, 4, 1], [1, 3, 2], [0], [0, 1], [3, 0], [15], [], [], [18]], "fitness": 31, "mapping_values": [1, 7, 7, 2, 5, 0, 2, 0, 0, 2, 3, 4, 3, 1, 0, 0, 0, 1, 4, 4, 11, 2, 17, 4, 0, 3, 1, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s0\\nloopBreak% = 0\\nwhile i1 \\ge i0:{:\\nif in2 == saveChr(int(0.0)):{:\\nb1 = mod(i1,( i2 - int(8.0) )) \\g i1\\n:}else:{:\\ni1 = int(0.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i2\\nb2 = ( i0 - i1 ) \\g ( i0 - int(5.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [9, 4], [2], [0], [2, 1, 1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(int(9.0),int(4.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [4], [2], [0], [2], [], [], [], [], [1], [5], [0], [], [1, 0], [], [], [], [], [4], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveChr(int(5.0)) == in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 6], [2], [], [1, 0], [], [], [], [], [4], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = getCharFromString(saveChr(int(06.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [0], [], [], [1, 2, 2], [4], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [1, 5, 2], [0, 2], [], [2, 3, 1, 0, 3, 1, 0, 1], [1], [0, 0], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 2, 0, 8, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = divInt(min(int(1.0), i0),min(int(5.0), i2)) \\le int(2.0)\\nb2 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 2, 2], [0, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(5.0)\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [9, 5], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(9.0) \\g int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in0\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [3, 8], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(38.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [6, 1], [1], [1], [3, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [1, 4], [0], [], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 0, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += max(int(61.0), saveOrd(in1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [], [], [], [], [], [3], [1], [0], [], [], [], [], [0], [1, 0, 0, 1], [4, 0, 4, 5], [1, 2, 0, 2, 1, 2], [1], [2, 3, 0, 0, 0, 1, 1, 1, 0], [1], [1, 0], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 4, 4, 4, 1, 7, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(max(i1, i2),i0) \\ge int(4.0):{:\\ni2 *= int(045.0)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [2], [0, 1], [0], [], [2], [], [], [], [], [], [2, 0, 0], [], [0, 2, 0, 0], [1], [], [], [0], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 3, 0, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not i2 == divInt(i0,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [4], [], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [1], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1], [], [2, 2], [], [3, 0], [], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [1, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveChr(i1) != s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 0, 0, 1, 1], [4, 9, 2, 6, 9, 5, 4, 8, 9], [0], [1], [1, 2, 1, 3, 1, 1], [1], [0], [1], [0], [2, 0], [], [], [3, 0, 2, 4], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 0, 0, 6, 1, 1, 0, 1, 2, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (s0 + saveChr(int(4.0))[divInt(int(9.0),min(int(269548.0), int(9.0))):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 0, 0, 0, 0, 1], [8, 9, 4, 5, 7, 6, 0, 3, 1], [2, 2], [1], [2, 2, 3, 1, 1, 2, 1, 0, 1], [1, 0, 1], [0], [0, 0, 1], [0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 2, 1, 9, 3, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(( min(int(8.0), int(9.0)) + divInt(int(45.0),i2) ),int(76031.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [2], [], [0], [], [], [2], [], [1], [], [1], [2], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [1], [3, 0, 1, 1], [], [2], [2], [], [2, 3], [], [], [2, 0], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 1, 1, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i1)\\ns2 = in0[int(4.0):int(1.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 1, 2, 1], [0, 1], [3, 0, 2, 1, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 2, 5, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i1)\\ni2 += ( int(3.0) * i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2], [], [0, 1], [], [], [], [], [2, 3], [], [], [4, 2, 0], [2], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[i2:int(5.0)].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 5], [1, 0], [], [0, 1, 2, 1, 0], [0], [], [1], [], [5, 0, 2], [1], [], [3, 4, 4, 2, 0, 3, 1, 2, 0], [3, 0], [1], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 5, 1, 0, 1, 0, 3, 1, 0, 9, 2, 1, 2, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (getCharFromString(s0[i1:], int(4.0)).rstrip() + (\"\"R\"\" + s2[:( int(5.0) - i0 )]))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [6, 2], [1, 1, 0, 0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(62.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1, 1], [2, 0, 2], [1], [2, 1, 2, 0, 3, 1, 0], [1, 1], [1], [1], [0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 7, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= divInt(int(1.0),mod(i0,max(int(1.0), i2)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [0], [], [], [1, 2, 2], [4], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [1, 5, 2], [0, 1], [], [2, 3, 1, 0, 2, 1, 0, 1], [1, 1], [0, 0], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 2, 0, 8, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = divInt(min(int(1.0), i0),mod(int(5.0),i1)) \\le int(2.0)\\nb2 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [1], [0], [0], [], [0], [], [], [], [1, 1, 1], [1], [], [], [3, 3, 1], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [0], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [1, 1], [6, 0], [1, 1, 1, 1, 2], [0], [2, 3, 2, 2, 1, 0, 3, 2, 0, 1, 3, 0, 0], [0, 1, 0, 1], [1, 2, 2], [1, 1], [1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 1, 13, 4, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = ( max(mod(( int(6.0) - i1 ),abs(mod(i1,int(0.0)))), abs(i1)) - i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 5, 1], [], [], [4, 0, 0], [3], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2.rstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [1], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1, 9], [1, 2], [0], [1, 0], [], [], [], [], [2, 1], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1[:int(19.0)]\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [5, 1, 2, 6, 5, 8, 2, 5, 0, 6, 4, 1, 8, 5, 0, 0, 2, 4, 2, 4, 2], [2, 0, 2, 1, 2], [], [2, 3, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 0, 1, 3, 3, 1, 1, 3, 3, 1, 1, 1, 0], [1, 0, 1, 1, 1], [4, 1, 0, 3, 2], [2], [0, 1, 1, 0], [3, 4], [], [], [4, 2, 2, 2, 4, 0, 4, 2, 4], [2, 0, 1, 1], [], [0, 0, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 21, 5, 0, 25, 5, 5, 1, 4, 2, 0, 0, 9, 4, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = getCharFromString(in1, divInt(saveOrd(saveChr(( i2 * int(5.0) ))),mod(i0,int(1.0))))[mod(i2,int(265.0)):][divInt(int(825.0),i1):int(0.0)][max(min(int(6.0), int(4.0)), len(saveChr(abs(int(18.0)))[int(50.0):int(024242.0)])):i2].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [8], [1], [0], [2, 1, 3], [1], [4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 0, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = mod(int(8.0),saveOrd(s0.capitalize()))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1, 3], [], [0], [], [], [0], [], [], [], [], [], [0, 1, 0], [1], [3, 0, 0], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [1], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(9.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 3, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 8, 8, 11, 0, 34, 8, 7, 4, 4, 5, 0, 0, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1[saveOrd(in2):] not in in1[i0:]:{:\\nres0 = ( i1 != int(0.0) or ( in1.endswith(getCharFromString(in0[abs(mod(i2,int(7.0))):mod(int(5.0),abs(i0))], i1)[( divInt(int(7.0),i2) + min(len(saveChr(( i1 + divInt(min(( int(2.0) * i2 ), ( max(int(1.0), i0) - int(7.0) )),int(7.0)) ))), i0) ):i0]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [3], [], [], [2], [], [], [4, 0], [3], [2], [], [], [], [], [], []], "fitness": 31, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(s2.strip())\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1], [1, 0, 2], [2], [2, 2], [], [0], [], [], [], [], [0, 2], [], [2], [2], [], [], [0], [], [], [], [], [], [], [], [], [], [3, 4, 1, 4, 3], [0, 0, 0, 1], [], [0, 0, 3, 0], [], [], [], [3, 3, 0, 3], [], [], [], [5, 24, 8, 23]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in1\\ns1 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 8, 0, 7, 5, 4, 4, 7, 1, 6, 1, 4, 9, 2, 8, 7, 8, 7], [0, 1, 0, 2, 1, 2, 1, 2], [], [3, 3, 0, 1, 2, 1, 1, 2, 1, 0, 0, 1, 2, 2, 3, 1, 2, 2, 1, 2, 0, 2, 1, 0, 0, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 1], [1, 2, 2, 0, 2], [0, 0, 1, 0], [5, 0, 4], [], [], [4, 2, 2, 0], [1], [], [0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 8, 0, 29, 9, 3, 5, 4, 3, 0, 0, 4, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(min(max(i0, int(0.0)), divInt(int(8.0),int(075447.0))))\\ns0 = in1[divInt(int(161.0),i1):i0][int(4.0):mod(( max(int(92.0), ( ( int(87.0) - divInt(i2,( int(8.0) * i1 )) ) * i2 )) + ( i1 * i2 ) ),int(7.0))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [], [], [], [0], [2], [1], [0], [], [], [], [], [], [], [], [2, 1, 1, 2], [0], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i2 == i1\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [2, 1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [6, 4, 1], [0, 2, 1], [0], [1, 3, 0, 0], [], [1], [], [], [5, 5, 4], [0, 1], [], [4, 0, 1, 4], [3, 1], [4], [], [3, 0], [1], [], [], [8]], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 4, 0, 1, 0, 0, 3, 2, 0, 4, 2, 1, 0, 2, 1, 0, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2.rstrip(\"\"%B\"\")\\ni0 = int(641.0)\\nin1 = saveChr(max(i2, i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [2, 5], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2[:i0].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 6], [0, 0], [1], [2, 0, 1], [0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( i0 * int(26.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 1, 0], [], [0], [], [], [0, 2, 1], [5], [0, 1], [0], [], [0], [], [], [], [1, 1, 1, 1, 0, 0, 0, 1], [7, 0, 6, 8, 3, 0, 1, 8], [2, 0, 2, 0, 1, 1, 0], [0], [0, 1, 3, 2, 2, 2, 2, 2, 1, 1, 0, 1, 3, 0, 3, 0, 1], [1, 0, 1, 1, 1], [2, 0, 2], [2, 0], [1, 0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 8, 8, 5, 1, 17, 5, 3, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\ni2 = i0\\nb1 = int(7.0) != abs(mod(( divInt(mod(divInt(int(0.0),int(6.0)),i2),int(8.0)) * min(i0, abs(i1)) ),int(3018.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [4], [0], [0], [], [1], [], [0], [], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [5, 4, 7, 0, 3, 0, 4, 8, 9, 6], [1, 1, 0, 1, 1, 0], [], [2, 3, 3, 0, 0, 2, 2, 1, 3, 0, 3, 0, 2, 3, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 0], [1, 0, 1, 1, 1, 0], [3, 0, 3, 3, 4, 1], [2, 1], [1, 1, 0, 0], [3, 0, 1, 4], [1, 1, 1], [], [2, 0, 0, 2, 3, 3, 3, 3, 0, 1, 2, 4, 4, 0, 2, 1], [3, 1], [1, 3], [0, 0, 2], [0, 3, 0], [10, 4], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1, 0, 0, 1], [6, 6, 4, 3, 8, 0, 4], [1, 2], [1], [2, 1, 1], [1], [], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 1, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += divInt(int(6643.0),int(804.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [3], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (in2 + \"\">\"\")\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 3, 2, 1, 0, 4, 0, 1, 0, 1, 4, 4, 2, 0, 2, 2, 2, 0, 4], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 1], [], [0, 0, 0], [], [], [2, 2, 0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not not b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [1], [1], [0], [], [], [], [], [], [1], [1], [2], [], [3, 3, 1, 0], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 1, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s1) \\g saveOrd(getCharFromString(saveChr(int(1.0)), i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0], [1], [0, 2, 1], [0], [1], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 3, 0, 1, 7, 8, 3], [2, 0, 2, 1, 2], [0], [3, 2, 1, 0, 2, 3, 3, 2, 1, 0, 1, 1, 3, 2, 3, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0], [4, 1, 0, 2, 0, 0], [1, 2, 0], [0, 1, 0], [4, 4, 5], [], [], [2, 4, 0, 0, 0], [0], [], [1], [], [], [], [], []], "fitness": 31, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(getCharFromString(in1, ( int(3.0) - i0 ))[:divInt(max(min(mod(int(6.0),i2), int(3.0)), int(0.0)),abs(( min(i1, int(1.0)) * int(7.0) )))])\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 4, 1, 18, 4, 5, 2, 2, 1, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [0], [], [], [], [], [4, 5], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2[:i1]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [], [0, 0], [], [], [1], [5], [0, 1, 0, 2], [0], [2], [3, 2], [0], [], [], [1, 1, 1], [5, 6, 2], [2, 0, 2, 1, 1, 1, 2], [1], [1, 3, 0, 0, 3, 0, 1, 2, 0, 0, 0], [1], [0, 0], [2], [1], [2], [1], [], [4, 2, 1, 0], [0], [], [2], [3], [], [], [], [21]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 4, 1, 1, 2, 1, 0, 0, 2, 2, 7, 1, 11, 1, 2, 1, 1, 1, 1, 0, 4, 1, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(5.0)\\nb1 = ( min(i0, i2) != min(i1, int(6.0)) and not getCharFromString(\"\"<\"\"[mod(i1,i1):], i2) == s2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\l int(3.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [6, 9], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(69.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [2, 2, 0, 1, 0, 0], [1, 2], [1, 1, 1, 0], [0], [0, 0, 0], [], [], [2, 3], [], [0, 2, 0], [], [0], [1, 0], [], [0], [1], [1, 1, 1, 1, 0, 0, 1, 1], [6, 7, 8, 3, 0, 2, 6, 7], [1, 0, 0, 0, 2, 1, 0, 1, 2, 1, 0, 1, 0], [1, 1, 0], [2, 3, 2, 2, 2, 0, 2, 2, 2, 3, 1, 3, 3, 0, 2, 2, 1, 0, 1, 0, 1, 3, 3, 1, 3, 3, 3, 2, 3, 3, 0, 0, 3, 0, 2, 0, 2, 2, 1, 2, 0, 0, 3], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [2, 2, 3, 2, 0, 4, 2, 1, 3, 2, 0, 2, 4], [1, 2, 0, 2, 2, 2, 0, 2, 1], [0, 0, 0, 0, 1, 1, 1], [4, 1, 0, 4, 0, 5], [], [0], [0, 0, 0, 4, 0, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif True:{:\\nloopBreak% = 0\\nwhile in1 in s1:{:\\ni1 -= ( abs(divInt(divInt(divInt(i0,( ( divInt(abs(int(6.0)),len(s0)) * abs(i0) ) + ( ( int(7.0) * i0 ) * int(8.0) ) )),i2),int(3.0))) * min(saveOrd(in1.capitalize()), int(026.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += abs(max(len(s0), mod(abs(min(i0, i1)),abs(i2))))\\n:}else:{:\\ni1 = ( i0 * mod(mod(int(7.0),( i1 - i0 )),saveOrd(in2)) )\\nb2 = res0\\n:}\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 6, 6, 2, 4, 0, 3, 0, 0, 2, 0, 3, 0, 1, 2, 0, 1, 1, 8, 8, 13, 3, 43, 14, 13, 9, 7, 6, 0, 0, 7, 1, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [0], [1], [0], [], [], [], [], [], [1, 1, 0, 0, 1], [0, 5, 4, 9, 5], [1, 1], [], [3, 1, 2, 0, 1, 2, 3, 0, 1], [0, 1], [1, 4, 4], [0], [0], [0, 1], [], [], [4, 4, 0, 0], [1, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 9, 2, 2, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(int(0.0), ( i1 + int(5.0) )) \\l divInt(saveOrd(saveChr(i1)),int(495.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 4], [2, 0, 0, 0, 2], [1], [2, 0, 3, 3, 0, 3, 2, 1, 0, 0], [1, 0], [2, 1, 0], [0, 0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 1, 10, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(i0,abs(max(i0, min(( int(8.0) + i0 ), i2))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [4], [], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 2, 0, 0, 1], [0], [0, 0, 1, 2, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [4], [1, 0, 0], [0], [], [1, 0], [], [0], [], [1, 0, 0, 1], [5, 8, 9, 0], [0, 0, 2, 1], [1], [2, 1, 3, 0, 1, 2, 2, 3, 3, 0, 0], [0, 1, 1], [0, 3, 4], [0], [0, 0], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 4, 4, 3, 0, 11, 3, 3, 1, 2, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( int(5.0) + min(i0, int(890.0)) ) \\le divInt(divInt(len(s2),saveOrd(s2[i0:])),i2)\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0, 8], [0, 1, 2, 1], [1], [2, 3, 0, 0, 2, 1, 1], [0, 1], [0], [1, 0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 7, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( min(i1, i2) + divInt(int(0.0),int(8.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [2, 1], [1], [3, 1], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= abs(int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [1, 2, 2], [0, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(5.0)\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [2], [0, 1], [], [0, 0], [], [], [2], [4], [1, 0], [0], [], [1], [], [0], [], [1, 1, 1, 1, 1, 1], [4, 2, 8, 7, 3, 3], [0, 2, 1, 1, 0, 1, 1], [1], [3, 0, 3, 3, 1, 2, 1, 2, 2, 0, 3, 3, 1, 0, 3, 2, 1, 2, 0, 0, 3, 1, 2, 1, 0, 3, 3], [0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 2, 1, 3, 2, 4], [0, 2, 2, 1, 0], [1, 0], [2], [1], [], [0, 1], [], [], [], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 6, 6, 7, 1, 27, 6, 9, 5, 2, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(i0, max(min(int(4.0), ( int(2.0) + mod(( i2 * min(abs(int(8.0)), i1) ),max(divInt(int(7.0),( i1 * i0 )), len(s2))) )), int(3.0))) \\le ( int(3.0) - i1 ):{:\\nb2 = True\\ni1 += abs(saveOrd(\"\"U\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 4, 2], [], [], [4, 3, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in1 + s2).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [], [3, 0, 0], [], [0], [], [], [4, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(min(i2, i1)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [2], [1], [0], [], [], [], [], [], [1, 1], [3, 1], [0], [1], [1, 1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(3.0) == int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0, 1], [4, 6, 7, 4, 8], [0, 2, 2, 2, 0], [0], [1, 0, 1, 2, 1, 0, 0, 0], [1], [], [], [0], [1, 5], [], [], [3, 2, 4, 2, 4], [1, 1], [], [0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 1, 8, 1, 0, 0, 1, 1, 0, 0, 5, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(4.0)\\ns1 = (saveChr(i2)[int(67.0):divInt(int(48.0),i2)] + saveChr(i2)[:i0])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [3], [0, 0, 1], [0], [], [3, 0], [0], [], [], [1], [1], [0, 0], [], [3, 1, 0, 0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( b2 and max(int(1.0), i0) \\ge i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [2], [], [4], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2, 4], [], [], [0, 3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s0.startswith((s2 + in1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [1, 0, 2, 1, 2, 1, 1, 1, 0], [1], [0, 2, 0, 2, 1, 3, 0, 0, 0, 0, 2, 0, 0], [0, 1, 1], [1, 0], [0, 1, 1], [0], [3], [], [0], [2, 4], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 6, 1, 9, 2, 1, 2, 1, 1, 0, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in saveChr(i1)[:( i0 + divInt(int(0.0),max(i2, i1)) )]:{:\\ni2 -= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [0], [1], [0], [], [], [], [], [], [1], [3], [0, 2], [], [1, 0, 1, 0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(3.0) \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [0], [1], [0], [], [], [], [], [], [1, 1], [6, 4], [], [], [1, 1], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(6.0) \\l int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [1, 1], [], [0], [], [], [], [1], [1], [0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 5, 1, 1, 9, 6, 6, 1, 2, 2, 0, 4, 7, 9, 7, 0, 0], [0, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 0], [0, 1], [1, 3, 3, 2, 1, 3, 1, 1, 1, 3, 3, 3, 0, 3, 1, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 1, 0, 2, 2, 2, 3, 3, 1, 1, 2, 3, 2, 0, 0, 3, 1, 2, 1, 0, 3, 1, 3, 0, 2, 1, 0, 3, 2, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0], [1, 3, 4, 0, 4, 1, 4, 1, 0, 2, 2, 0, 3, 1, 1], [2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0], [1, 1, 1, 1, 0, 1, 1], [3, 1], [1], [], [2, 0, 4, 1, 4, 2, 2, 4, 1, 0, 4, 4], [2, 0, 1, 3, 3, 1], [0, 2], [1, 1, 1], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 5, 5, 2, 2, 9, 1, 3, 2, 0, 1, 1, 0, 4, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) \\g max(len(in0[:( int(9.0) * saveOrd(\"\"r\"\".capitalize()) )]), int(5.0)):{:\\ni0 = int(1.0)\\n:}\\ni1 += int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [0], [], [], [], [], [3], [3, 0], [1, 1], [0, 0], [0], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 1, 6, 2, 5, 0, 2, 1, 1, 5, 5, 3], [0, 2, 0, 0, 2, 0], [], [0, 2, 1, 1, 1, 0, 1, 0, 3, 0, 3, 1, 0, 1, 3, 1, 3, 0, 2, 3, 1, 1, 2, 0, 1, 3, 1, 1, 1], [0, 1], [1, 1, 0, 1, 4, 0, 1, 2, 3], [2], [1], [3], [1, 1, 1, 1], [], [4, 2, 4, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 4, 4], [3, 2, 2], [4], [1, 2, 0, 2, 2, 1, 2, 0], [2, 3, 2, 2], [], [], [0, 3, 9], [31]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 2, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i0 \\ge ( int(9.0) * int(1.0) ):{:\\nres0 = int(6.0) \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 5], [0, 0], [1], [2, 0, 1], [0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( i0 * int(25.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [2], [1, 2], [], [], [], [], [0], [], [0], [], [], [0], [], [], [], [1], [9], [1], [1], [3, 1], [], [2], [1], [], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b0:{:\\ni1 -= abs(int(9.0))\\nin1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [2], [0], [], [], [], [], [5], [1], [0], [], [], [], [], [0], [1, 0], [5, 8], [0], [], [2, 1, 1, 0], [1], [], [], [0], [5, 0, 1], [1], [0], [0, 1], [], [], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\ns1 = \"\"F\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [9, 8], [2, 0, 1, 2, 1], [1], [3, 2, 2, 3, 2, 3, 2, 1, 2, 0, 3, 1, 0, 0, 0], [1, 1, 0, 0, 0], [4, 3, 2, 2], [1, 2, 1, 1], [0, 1], [4, 3], [], [], [4, 0, 2, 0], [0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 1, 15, 5, 4, 4, 2, 2, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= saveOrd(getCharFromString(in1, divInt(mod(len(in0[:( abs(( int(9.0) * ( i0 - abs(int(8.0)) ) )) - i1 )]),i2),i1)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 2, 0, 1, 1, 1, 0], [1], [0, 2, 0, 2, 0, 3, 0, 0, 0, 0, 2, 0, 0], [0, 1, 0], [1, 0], [0, 1, 1], [0], [3], [], [0], [2, 4], [1], [], [1], [], [], [], [], []], "fitness": 31, "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in saveChr(i1)[:( i0 + divInt(i1,max(i2, i0)) )]:{:\\ni1 -= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 9, 2, 1, 2, 1, 1, 0, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 1], [1], [2, 0, 1], [1], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += mod(i1,int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1], [2, 0, 1, 1], [0], [2, 2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [0, 1, 0], [0], [3, 3, 0, 3, 1, 0, 3, 1], [1], [4, 0, 2, 4], [], [0], [3, 0, 1, 0, 3, 2, 2], [], [0], [0, 4, 0, 2, 0, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s0:{:\\ns1 = saveChr(saveOrd(s0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = s2[:min(i0, abs(int(0.0)))]\\ni1 = i0\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 6, 0, 3, 0, 0, 6, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [8], [2], [0], [1, 1, 3], [1], [4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 1, 0], [1, 1], [0, 1], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [], [], [1], [], [], [], [], [2], [1], [], [4, 1, 4], [3, 1], [4], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 3, 2, 1, 0, 1, 1, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"F\"\".rstrip(saveChr(int(4.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [2], [1, 2], [], [], [], [], [0], [], [0], [], [], [0], [], [], [], [1, 1], [9, 5], [0], [0], [3, 1, 1], [], [0], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 2, 2, 1, 1, 3, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b0:{:\\ni0 = min(int(9.0), int(5.0))\\nin0 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1, 1], [3, 9, 1], [2], [], [3, 3, 3, 3, 3, 2, 0, 1, 1, 1], [1], [0, 4, 0, 1, 4], [], [1], [4, 0], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [], [0], [], [], [], [], [1], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = saveChr(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 3], [5], [0, 1, 0], [0], [], [3, 0], [1], [], [], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [9, 7, 2, 8, 2, 9, 0, 1, 8, 1], [1], [], [2, 1, 1, 2, 2, 1, 3, 2, 1, 3, 2, 0, 3, 1], [0, 1, 1, 0, 1], [3, 4, 3], [0, 2], [1, 0, 1], [1, 4, 1, 2], [], [], [2, 0, 2, 4, 4, 0, 0, 0], [3, 3], [5, 0], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 10, 10, 1, 0, 14, 5, 3, 2, 3, 4, 0, 0, 8, 2, 2, 2, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( ( int(9.0) + int(7.0) ) != mod(divInt(int(2.0),len(s1[( int(8.0) * saveOrd(in1.lstrip().strip(s1)[:mod(i1,len(s2))]) ):])),int(290181.0)) or res0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [1], [3, 0], [], [3], [0], [], [3], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += len(in0[i0:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [2, 2, 0, 1, 0, 0], [1, 0], [1, 1, 1, 0], [0], [0, 0, 0], [], [], [2, 0], [], [0, 2], [], [0], [0], [], [0], [1], [1, 1, 1, 1], [6, 7, 8, 1], [1, 0, 2, 0, 2, 1, 0, 1], [1, 1, 0], [2, 3, 0, 2, 2, 2, 2, 2, 2, 3, 1, 3, 1, 0, 1, 2, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0], [2, 4, 3, 2], [1, 2, 0, 2, 2, 2], [0, 0, 0, 0], [4, 4, 0, 4, 0, 4], [], [0], [0, 0, 0, 4, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif b2:{:\\nloopBreak% = 0\\nfor in1 in in1:{:\\ni1 -= ( abs(i0) * divInt(divInt(divInt(( ( divInt(saveOrd(s0),int(6.0)) + len(in1) ) * int(7.0) ),i2),int(8.0)),( i0 * i2 )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= int(1.0)\\n:}else:{:\\ni0 = i1\\nb0 = s0.capitalize() in in1\\n:}\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 6, 6, 2, 4, 1, 3, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 1, 4, 4, 8, 3, 20, 8, 3, 6, 4, 6, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [0, 1], [1], [0, 3, 2], [1], [], [3, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (in0 + s2)\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [0, 1], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i1\\nres0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 2], [], [0, 1], [], [], [], [], [2], [1], [1], [0], [], [], [], [], [], [], [], [0, 2, 2], [1], [0, 0, 3], [], [3], [2], [], [3], [], [], [3], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 \\g i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1, 0, 0], [], [1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0, 4], [1, 0, 1], [0], [3, 2, 1, 0, 1, 0], [1], [3], [], [1], [3], [], [], [2, 2, 0], [], [], [1, 2], [], [1], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 5, 1, 1, 0, 1, 1, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(in0[mod(int(0.0),i0):][:int(4.0)])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [3, 1], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(31.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0, 0], [0], [3, 0, 1], [0], [3], [2, 2], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [1, 1], [], [0], [], [], [], [1], [1], [0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 5, 1, 1, 2, 6, 6, 1, 2, 2, 0, 4, 7, 9, 1, 0, 0], [0, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 0], [0, 1], [0, 2, 3, 2, 1, 3, 0, 1, 0, 3, 3, 0, 0, 3, 1, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 2, 0, 2, 2, 2, 3, 3, 1, 1, 3, 3, 2, 0, 0, 3, 1, 2, 1, 0, 2, 1, 1, 3, 2, 1, 0, 2, 2, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0], [0, 3, 4, 2, 4, 1, 4, 1, 0, 2, 2, 0, 3, 1, 1], [2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0], [1, 1, 0, 1, 1, 1, 0], [3, 1], [1], [], [2, 4, 4, 1, 4, 2, 2, 4, 4, 0, 4, 4], [2, 0, 1, 3, 3, 1], [2, 2], [1, 1, 1], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 3, 3, 8, 2, 16, 2, 5, 3, 0, 1, 1, 0, 10, 5, 2, 3, 1, 0, 1, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i0 \\g ( min(( int(4.0) * len(getCharFromString(\"\"r\"\", i1).capitalize()[:int(9.0)]) ), i2) + saveOrd(saveChr(abs(i2))) ):{:\\ni1 = i1\\n:}\\ni1 *= saveOrd(in0.strip().strip()[:int(5.0)][:i1])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 8, 6], [1, 1], [1], [3, 3, 0, 3, 1, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [2, 0, 0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 6, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(min(i1, min(int(1.0), int(8.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [2, 1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [0, 2, 1], [0], [1, 3, 0, 0], [], [1], [], [], [5, 3, 4], [0, 1], [], [4, 0, 1], [0], [], [], [3, 0], [1], [], [], [8]], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 4, 0, 1, 0, 0, 3, 2, 0, 3, 1, 0, 0, 2, 1, 0, 0, 1], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(in0, int(6.0))\\ni0 = max(i2, i1)\\nin1 = \"\"%B\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [0, 0], [1], [2, 1, 0], [1], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= divInt(int(1.0),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [0], [], [2], [], [5], [], [], [], [], [], [], [1], [], [0], [], [], [], [], [4, 1, 5], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in saveChr(i1):{:\\nb0 = s1.endswith(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [3, 5, 5], [1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [], [], [], [], [], [3], [1], [0], [], [], [], [], [0], [0, 0, 0, 1], [4, 8, 4, 4], [1, 2, 1, 2, 1, 2], [1], [2, 3, 0, 0, 0, 1, 3, 0, 0], [1], [1, 0], [1], [1], [], [], [], [1], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 4, 4, 6, 1, 9, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(max(i1, i2),i1) \\ge int(4844.0):{:\\ni2 -= min(i1, i2)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 9, 6, 6, 4, 1, 6, 5, 3], [2, 1, 1, 0, 1, 0, 1, 2, 0, 0], [], [1, 2, 2, 2, 3, 1, 3, 1, 2, 2, 3, 2, 2, 1, 2, 0, 2, 2, 1, 3, 0, 0, 2, 2, 0, 3, 0, 1, 2, 2, 0, 2, 3, 0, 0, 3, 1, 0, 2, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 4, 0, 0, 4, 3], [1, 2, 1, 2, 1, 0, 1, 2, 1, 0, 1], [0, 0, 1, 1, 1], [3, 0, 1, 5, 3], [1], [], [4, 2, 0, 0, 0, 0], [2], [], [0], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 10, 0, 42, 16, 7, 11, 5, 5, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s0[int(5.0):( ( divInt(min(int(9.0), min(int(6.0), ( ( saveOrd(s1) - divInt(( int(6.0) * mod(i2,( ( int(4.0) - min(i1, i1) ) * ( ( i0 - min(i1, int(1.0)) ) + mod(( i0 - mod(saveOrd(in2),i1) ),i2) ) )) ),len(in0)) ) * int(6.0) ))),i0) - ( int(5.0) + int(3.0) ) ) - i0 )].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [8], [1], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [], [], [1], [], [], [], [], [5], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(2.0))\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [0], [1], [0], [], [], [], [], [], [0, 0, 1, 0, 0, 1], [8, 9, 7, 4, 1, 5], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(897.0) \\l int(415.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 0], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(00.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [], [2], [], [5], [0], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s2.endswith(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1, 1, 0, 0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [1, 1, 1], [4, 5, 4], [0, 2, 0], [0], [1, 1, 0, 2, 3, 1, 1, 0], [0, 1], [1], [2, 0], [], [5, 2], [1], [], [1, 0, 4], [1], [], [], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\",\"\".endswith(in2)\\ni0 = int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 0], [2, 2], [1], [], [0], [], [], [3, 3], [], [0, 0], [], [], [0, 0], [], [], [], [1], [5], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0, 5], [0, 2, 2, 1, 2], [1, 1], [0, 2, 0, 2, 1, 0, 0], [1, 1], [4], [1, 1, 0], [0, 1], [0, 5, 4, 4, 3, 0, 4], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 2, 6, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\ni2 -= divInt(i1,mod(int(0.0),i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [2], [], [], [], [], [], [5], [1], [0], [], [], [], [], [0], [1, 1], [5, 8], [0, 1, 0], [], [2, 2, 1, 0, 0, 0], [1, 0], [], [1], [1], [1, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(( int(5.0) - i0 ),i1) != i0:{:\\ns1 = s0\\n:}\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 3, 0, 6, 2, 0, 1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [7, 3, 2], [0, 0], [], [1, 2, 1, 3, 3, 1, 3, 0, 0], [0], [1, 2, 3], [2], [], [1, 5, 2, 3], [], [], [2, 3, 2, 0, 2, 0, 0, 0], [], [], [1, 2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 8, 1, 3, 1, 0, 4, 0, 0, 7, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = (in2[int(7.0):] + s2[( int(3.0) * max(abs(int(2.0)), len(in0)) ):])[:i0]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [3], [1], [0], [], [], [], [], [], [1, 1], [7, 2], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(7.0) \\ge int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1], [2], [1], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\ge int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [2, 0], [], [], [], [], [1, 3], [4], [0, 1, 0], [0], [], [3, 0], [1], [], [], [], [], [1, 1, 2], [], [2, 0, 1, 0], [1], [], [], [1], [4, 3, 3], [], [], [3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (in0 + in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [2], [], [], [], [], [], [2], [1], [0], [], [], [], [], [0], [1, 1], [5, 6], [1, 1, 0, 2], [], [0, 2, 0, 3, 1, 1, 0, 0], [1], [2, 0], [], [1], [2], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 2, 2, 0, 6, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i1 == mod(i1,abs(int(5.0))):{:\\ns2 = saveChr(int(6.0))\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [], [0, 1], [3, 1], [2, 1, 0], [1, 1], [3, 1, 0], [], [4], [0, 2], [], [1, 5, 2], [], [], [4, 0, 0, 4], [3, 1], [2], [], [], [], [], [], []], "fitness": 31, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += saveOrd(s1.strip())\\ni1 *= int(31.0)\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 1, 2, 0, 3, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], [0, 4, 2, 6, 5, 7, 4, 0, 9, 2, 4], [1, 0, 2, 1, 1, 1], [0], [3, 2, 1, 0, 1, 0, 2, 1, 2, 1, 3, 0, 3, 3, 1, 1, 2, 2, 0, 0, 1], [1, 1, 0, 0, 0], [3, 0, 2, 1], [2, 2, 1], [1, 1], [3, 4], [], [], [2, 2, 2, 3, 0, 3, 0, 4], [1], [], [0, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 6, 1, 21, 5, 4, 3, 2, 2, 0, 0, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len((in0 + (in1 + saveChr(mod(int(0.0),i0))))[int(4.0):][:i2][mod(int(2.0),( int(6.0) * min(i1, abs(max(int(57.0), int(40.0)))) )):( ( i1 * i1 ) - int(924.0) )])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [1], [5], [1, 2], [1], [1, 0, 0, 1], [], [2], [0], [], [1, 4, 1], [1], [0], [0, 4, 1], [0], [], [], [0], [9], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in1:{:\\ni1 += int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [], [], [], [0], [5], [0, 1], [0], [], [2], [], [], [], [1, 1, 0, 0, 1], [9, 8, 5, 0, 6], [0, 0], [0], [1, 1, 0, 1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not int(9.0) != int(8.0)\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 2, 0], [0, 0], [0, 1], [], [], [], [], [2], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\ns2 = saveChr(int(4.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1], [2, 0, 0, 0, 2, 0, 0, 2, 0, 2], [1], [1, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 2, 2, 2, 0, 0, 3, 2, 2, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0, 3, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 2, 4, 0, 2, 1], [2, 0, 2, 1, 2, 1, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 10, 1, 43, 16, 6, 6, 11, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(40.0)\\ns1 = saveChr(divInt(i0,int(0.0)))[:divInt(i0,mod(divInt(int(7.0),divInt(max(divInt(divInt(divInt(i0,i2),abs(divInt(( saveOrd(s1) + int(3.0) ),( int(6.0) * min(int(1.0), int(4.0)) )))),divInt(( int(3.0) - i0 ),abs(( ( int(0.0) * mod(i0,i2) ) - int(4.0) )))), int(8.0)),i0)),max(i2, int(1.0))))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 2], [0], [2, 0, 1], [0], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( i2 * int(5.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 1], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [2, 2, 0, 1, 0, 0], [1, 0], [1, 1, 1, 0], [0], [0, 0, 0], [], [], [0], [], [0, 2], [], [0], [1], [], [0], [1], [1, 1, 1, 1], [6, 7, 8, 3], [1, 0, 2, 0, 2, 1, 0, 1], [1, 1, 0], [2, 3, 0, 2, 2, 1, 2, 2, 0, 3, 1, 3, 3, 0, 1, 2, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0], [2, 4, 3, 2], [1, 2, 0, 2, 2, 2], [0, 0, 0, 0], [4, 3, 0, 4, 0, 5], [], [0], [0, 0, 0, 4, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 6, 6, 2, 4, 1, 3, 0, 0, 1, 0, 2, 0, 1, 1, 0, 1, 1, 3, 3, 6, 3, 15, 5, 4, 4, 3, 6, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif True:{:\\nloopBreak% = 0\\nfor in1 in in0:{:\\ni1 -= ( abs(i0) * divInt(divInt(int(6.0),divInt(( i2 + saveOrd(s0) ),int(7.0))),len(in1)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= abs(i2)\\n:}else:{:\\ni1 = int(8.0)\\nb0 = s0.capitalize() in in2\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 1, 0], [], [0], [], [], [0, 1, 1], [5], [0, 0], [0], [], [0, 1], [], [0], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 2], [0], [0, 0, 3, 2, 2, 0, 2, 0, 1, 1, 3, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [2, 0], [1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 3, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b1\\ni2 = i0\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1], [0, 8, 1, 7, 2], [0, 2, 1, 0, 0, 2, 2], [1], [1, 0, 1], [0, 1, 0, 1, 0, 1, 1], [1, 3, 0, 0, 2, 3], [0, 2, 0, 1], [1, 0, 0, 0], [1], [], [], [4, 0, 4, 4], [0, 2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(08.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [0, 1, 2, 0, 0, 1], [0], [0, 0, 1, 2, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [2], [0, 0, 0, 2], [0], [3], [1, 0, 2], [], [1], [], [1], [5], [0, 0, 2, 2], [1], [0, 1, 0, 0], [], [], [1], [], [2, 2, 3, 0, 5], [1], [0], [0, 2, 0, 0, 1], [], [], [2], [3], [], [], [], [10]], "fitness": 31, "mapping_values": [1, 6, 6, 1, 5, 1, 3, 0, 0, 4, 0, 4, 0, 1, 3, 0, 1, 0, 1, 1, 2, 1, 2, 0, 0, 1, 0, 5, 1, 1, 5, 0, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\nb2 = res0\\nloopBreak% = 0\\nfor s2 in s2:{:\\ni0 -= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = s0[int(5.0):]\\nres0 = not in2 != \"\"\"\\\\\"\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(2.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 5, 8, 1], [2, 0, 0, 0, 2, 1, 0, 2, 0], [1], [1, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 2, 2, 2, 0, 0, 1, 2, 2, 1, 2, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 2, 4, 0], [2, 0, 2, 1, 2, 0, 2, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(4.0)\\ns1 = saveChr(divInt(i0,int(0.0)))[:( i0 + divInt(mod(int(0.0),divInt(max(divInt(divInt(divInt(i0,i2),int(7.0)),divInt(( int(3.0) * ( divInt(int(6.0),abs(int(1.0))) - int(4.0) ) ),( ( int(3.0) * i1 ) + saveOrd(s1) ))), ( ( int(0.0) * ( int(5.0) - i0 ) ) - int(8.0) )),int(1.0))),i2) )]\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 8, 1, 40, 17, 3, 9, 9, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 1, 6, 5, 3, 9, 8, 9, 8, 7, 7], [2, 2, 2, 2, 0, 0, 2], [], [1, 2, 1, 2, 0, 0, 2, 2, 3, 2, 3, 1, 2, 1, 3, 2, 0, 1, 0, 2, 1, 2, 0, 1, 2, 2, 1, 0, 3, 1, 1, 3, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 4, 2, 1, 1], [2, 2, 1, 0, 2, 2, 0], [1, 0, 1, 1], [3, 0, 2, 1, 4, 2, 3], [], [], [3, 0, 0, 4, 2, 2, 2, 0, 2, 0, 4, 4, 2, 0, 0], [3, 0, 2], [1], [2, 2, 1, 1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 6, 0, 31, 11, 4, 7, 4, 6, 0, 0, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (s0 + s2)\\ns1 = in1[:int(5.0)][mod(int(5.0),( i2 * i2 )):][( ( min(divInt(saveOrd(s2[:int(1.0)]),mod(int(6.0),abs(( i2 * int(5.0) )))), i2) - ( int(3.0) + mod(i0,int(9.0)) ) ) * ( ( int(8.0) * i0 ) + max(int(9.0), int(8.0)) ) ):].rstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [2], [], [], [], [], [], [5], [1], [0], [], [], [], [], [0], [1, 1], [5, 8], [0], [], [2, 1, 1, 0], [1], [], [], [0], [5, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 2, 1, 0, 4, 1, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif divInt(int(5.0),int(8.0)) != i0:{:\\nin2 = s0\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 2], [0], [2, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( i2 - int(5.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [9, 2], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(92.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [8], [0], [0], [2, 1, 3], [1], [4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 0, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(int(8.0),saveOrd(s0.capitalize()))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [1, 0, 3], [5], [0, 0, 0], [0], [], [0, 2, 0], [], [], [], [1], [0], [2], [], [3, 1, 3, 0], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 3, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b1:{:\\nb0 = not res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [], [], [1, 0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i1 \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 0], [2, 0, 0, 0, 2, 1, 0, 2, 0], [1], [1, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 2, 2, 2, 0, 0, 1, 2, 3, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 2, 4, 2], [0, 0, 2, 1, 2, 1, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 2], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 4, 1, 0, 0, 1, 3, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = saveChr(int(00.0))[:divInt(i2,int(0.0))]\\ns1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [2], [1], [0], [], [], [0], [], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [0], [1], [0], [], [], [], [], [], [0, 0, 0, 1, 0, 1, 1, 1], [9, 5, 8, 0, 9, 3, 4, 3], [2, 2, 2, 0, 0, 0, 2, 0, 0, 1], [], [2, 0, 3, 0, 2, 2, 0, 1, 3, 1, 2, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 4], [2, 0, 0, 0, 2], [0], [2, 3], [1], [], [4, 2, 4, 4, 4, 2, 1, 4, 0], [2, 0, 3, 2, 0], [4], [1, 0], [3], [], [], [], [21]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 10, 0, 23, 6, 3, 5, 1, 1, 1, 0, 9, 5, 1, 2, 1, 0, 0, 0, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( i2 * min(i2, ( ( i2 + int(9580.0) ) + min(int(93.0), divInt(i0,( saveOrd(getCharFromString(\"\"<\"\"[int(4.0):i0].capitalize().rstrip(getCharFromString(s2, int(3.0))), i0)[:i2].capitalize()) + i0 ))) )) ) \\l ( i0 * i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [0, 0, 1], [2, 2, 1], [1], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\ge int(221.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 2], [], [], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 4], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in1.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 0], [1, 2], [0, 1], [], [0, 0], [], [], [2], [5, 3], [1, 2, 1], [0, 0], [1], [], [], [], [0], [1, 1, 1], [2, 4, 7], [2, 0], [1], [0, 1, 1, 1], [], [], [0], [], [1, 2], [], [], [4, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i2 != int(2.0)\\ni0 += int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 2], [0], [0], [2, 1, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = divInt(int(8.0),int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0], [0, 0], [2], [1], [], [0], [], [], [], [], [0], [], [], [1], [], [0], [], [1], [5], [1], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [0], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(1.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [2], [0, 1], [], [], [], [], [0], [4, 4], [1, 0], [0, 0], [], [1], [], [0], [], [1, 1, 1, 0, 1, 1], [0, 8, 2, 3, 6, 8], [1, 0], [1], [1, 2, 0, 1, 3, 1, 3, 1, 3, 1], [0], [4, 1, 2], [1, 1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 2, 2, 2, 1, 5, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\le ( i1 - int(8.0) )\\nloopBreak% = 0\\nwhile True:{:\\ni0 -= saveOrd(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [9, 0, 2], [1, 2, 1], [1, 0], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i2\\ni1 = int(902.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [1], [6], [2, 0, 2, 0, 0], [], [3, 2, 1, 0, 0, 2, 3, 0, 0, 0], [0, 1], [1, 1], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 5, 0, 10, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(( int(6.0) * i2 ), i0) == mod(max(i2, i0),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [], [0], [], [], [], [], [4, 5], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2[:i2]\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [1], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 3, 3, 7, 5, 1, 4, 5, 5, 2, 9, 4, 2, 5, 7], [0, 0, 1], [], [3, 3, 1, 2, 2, 1, 2, 3, 2, 2, 1, 1, 3, 3, 2, 0, 2, 1, 2, 0, 2, 2, 1, 3, 0, 1, 1, 2, 1, 1, 3], [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [4, 1, 2, 1, 2, 3, 3], [2, 0, 0, 0, 0, 0, 1], [1, 0, 1, 0], [1, 4, 2], [], [], [0, 4, 0, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 16, 16, 3, 0, 31, 11, 7, 7, 4, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s1) \\g max(int(1.0), mod(( int(0337514.0) * ( abs(( ( int(5.0) + int(5.0) ) + max(abs(divInt(i0,mod(int(2.0),divInt(i0,( ( int(9.0) + len(getCharFromString(in1, i1)) ) + int(4.0) ))))), int(2.0)) )) + ( int(5.0) - int(7.0) ) ) ),len(s2)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 1, 2, 1, 1], [0, 1, 1, 1], [2, 2, 1], [0], [], [], [], [], [], [2, 2, 2], [], [4, 0, 3], [], [], [], [1, 1, 1], [1, 1, 1, 1], [6, 9, 1, 4], [1, 2, 0, 0, 0, 1, 2, 2], [0], [0, 1, 0, 2, 1, 3, 0, 0, 1, 0, 2, 3, 2, 1, 0, 3, 1], [1, 0, 0], [4, 2, 2], [0, 2], [0], [4, 0, 2, 4, 0, 3, 0, 3, 3, 2], [1, 1, 1], [0], [3, 3, 0, 2, 0, 4, 2, 0, 4, 4, 2, 4, 1, 0, 1, 4, 0, 4, 4, 0, 2, 0, 4], [0, 2, 0, 1, 2, 2, 1], [], [1, 2, 1, 2], [3, 3, 2], [], [], [4], [17, 30]], "fitness": 31, "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = ((s0 + s2[:i1]) + getCharFromString(in1[int(6.0):], i2))\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 3, 0, 0, 0, 0, 4, 0, 0, 8, 1, 0, 2, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [2, 0], [0], [0], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1], [3], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(3.0) \\ge i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [8], [2], [0], [2, 1, 3], [1], [4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 0, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(int(8.0),saveOrd(s0.capitalize()))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 9], [2, 0, 1, 0, 1], [0, 1], [2, 1, 3, 0, 1, 3, 2, 0, 0], [0, 1], [1, 2], [1, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 2, 9, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( int(4.0) - max(i0, int(9.0)) )\\ni1 -= abs(mod(i0,i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3], [], [4], [], [], [4, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(saveOrd(s2)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [], [0, 2, 0], [], [4], [3, 0], [1], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [], [], [], [4, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 3, 0, 1, 2, 1, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( saveChr(int(0.0)).startswith(saveChr(i2)) or res0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [3], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0], [2, 2], [1], [], [0], [], [], [3, 3], [], [0, 0], [], [], [0, 0], [], [], [], [1], [5], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nloopBreak% = 0\\nwhile res0:{:\\ni0 *= int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1], [1, 0, 2, 0], [2], [1, 0, 1], [], [0, 0], [], [], [0, 3], [], [0, 0], [], [], [1, 0], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 9, 3, 9, 3, 6, 1], [2, 2, 2, 1, 2], [0, 0], [3, 3, 1, 2, 3, 0, 1, 0, 1, 2, 1, 1, 1, 0, 2, 2, 0, 1, 1], [0, 0, 0, 1, 0], [0, 4, 4], [1, 0, 0, 2], [1], [5, 5], [], [], [2, 2, 2, 2, 0, 4, 2, 0], [2], [], [1, 2, 1, 2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 1, 0, 6, 6, 4, 2, 13, 2, 3, 2, 0, 2, 0, 0, 8, 1, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = min(saveOrd(in2[int(0.0):][:( saveOrd(in2[:i2].capitalize()) - int(7.0) )][i2:][:int(9.0)]), ( int(3.0) + int(9.0) ))\\nb0 = False\\nloopBreak% = 0\\nwhile res0:{:\\ni1 = int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [0], [5], [0, 0], [0], [], [2], [], [], [], [1, 1, 0, 0, 1], [9, 8, 5, 0, 6], [0, 0, 1, 1, 2], [0, 1], [2, 3, 0, 1, 1, 3, 0, 3, 3, 1, 0], [0], [0, 0, 0, 2], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 11, 1, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( min(i0, int(9.0)) * int(8.0) )\\ni1 *= min(i1, min(abs(int(506.0)), i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 2], [1], [2, 0, 1], [1], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += mod(i2,int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [9, 5], [0], [0], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [2], [0, 1], [0], [], [2], [], [], [], [1, 0, 1], [8, 9, 7], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not int(8.0) == int(97.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [2, 1], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [3], [1], [0], [], [], [], [], [], [0, 1], [9, 8], [2], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i2 \\ge int(98.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [1, 1, 2, 1], [1], [2, 2, 0, 3, 1, 0, 0], [0, 0], [0], [1, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 7, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= ( ( i1 * min(int(2.0), i2) ) + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [7, 6, 7, 4, 2, 6, 5, 9, 9, 8], [2, 2, 2], [1], [1, 0, 1, 2, 1, 1], [1], [], [1], [0], [1, 5], [], [], [3, 2, 4, 0], [1], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 2, 1, 6, 1, 0, 1, 1, 2, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(7.0)\\ns1 = (saveChr(i2)[int(6.0):divInt(int(7.0),int(4265998.0))] + in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [5, 1], [1], [0], [1], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(51.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2], [1], [3, 1], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= abs(int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [8, 9, 1], [1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(891.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0, 0], [1], [2, 0, 1], [0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( i0 * int(2.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 5], [1], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1], [7, 9, 7, 0, 6, 5, 8, 2, 3], [0, 0, 0], [], [1, 2, 1, 3, 3, 1, 3, 0, 3, 0, 2, 0, 1], [0, 0], [1, 2, 3, 0], [2, 0], [], [1, 5, 2, 3], [], [], [2, 3, 2, 0, 2, 2, 0, 0], [], [], [1, 2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 3, 0, 13, 2, 4, 2, 0, 4, 0, 0, 8, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = (in2[int(7.0):] + s2[( int(9.0) * max(abs(int(7.0)), len(in0)) ):][i0:])[:min(i0, ( i0 + int(065823.0) ))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [1], [], [], [0, 1], [6, 7], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(67.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [], [2], [], [0], [], [], [], [], [1], [2], [0], [0], [1], [], [], [], [], [3, 4], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = in0 in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [5, 0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s0.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [], [], [1, 2, 3, 1], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\g ( len(s1) - int(8.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [1], [1], [3, 1, 3], [], [1, 4], [1], [], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 0, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= max(int(6.0), saveOrd(in1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1], [1, 0, 0, 4, 8], [0, 2], [0], [0, 3, 2, 1, 2, 1, 3, 2, 3, 1, 2, 1, 1, 0], [0, 0, 1, 1], [3, 2, 2], [0, 1], [0, 1], [], [], [], [2, 4], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 14, 4, 3, 2, 2, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 \\le len(saveChr(( int(1.0) + ( int(0.0) - abs(divInt(abs(int(0.0)),mod(int(4.0),int(8.0)))) ) ))[i2:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1], [3, 8, 5, 1], [1, 2, 2, 2, 0], [0, 1], [3, 1, 2, 0, 2, 3, 1, 3, 2, 0, 1, 0, 3], [1, 1, 0], [0, 2, 1, 4], [2, 0, 1], [1, 1], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 2, 13, 3, 4, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = min(int(3.0), mod(i2,mod(abs(int(8.0)),max(( i2 * int(51.0) ), i2))))\\ni0 += saveOrd(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [1], [6], [2, 0, 0, 1, 0], [1], [3, 2, 1, 0, 0, 2, 3, 0, 0, 0], [0, 1], [1, 1], [2, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 5, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= max(( int(6.0) - i0 ), i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 1, 0], [], [0], [], [], [0, 2, 1], [5], [0, 1], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0, 0], [0], [0, 0, 3, 2, 2, 2, 2, 2, 1, 1, 0, 1, 3, 0, 0, 2, 0, 0], [1, 0, 1, 0, 1, 0], [2, 0], [2, 0, 2], [1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\ni2 = i0\\nb1 = i2 != abs(mod(( divInt(( mod(int(7.0),int(0.0)) * i0 ),int(6.0)) + min(i1, i1) ),( i0 * i0 )))\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 8, 1, 18, 6, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [5, 1], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(51.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [0], [3], [], [3], [], [], [2], [], [], [4, 0], [3], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = len(s2.strip())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1], [0, 3, 1, 2, 7], [2, 0, 2, 2], [1, 1], [2, 0, 2, 1, 1, 1], [0, 0], [], [0, 0, 1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 3, 2, 6, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += ( i0 + ( int(0.0) - int(3.0) ) )\\ni2 *= int(127.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 2, 2, 0, 1, 1, 2, 0, 2, 0, 1], [2, 1, 1, 1], [2, 1, 2, 1, 0, 0, 2], [], [0, 0, 0], [], [], [1, 2, 2], [3, 1, 1], [1, 2, 1, 0, 0, 0, 2], [0, 0, 0], [0, 4], [2, 0], [], [], [0, 0, 1], [1, 1, 1, 1], [0, 8, 5, 5], [2, 0, 1, 0, 1, 1, 0, 2, 0, 1, 0, 1, 1], [0, 0], [0, 0, 1, 2, 0, 2, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1], [], [1, 0, 1], [1], [2, 0, 4, 0, 2, 2, 5], [1, 1], [], [0, 0, 4, 2, 0, 4, 0, 1, 2, 4, 1], [1, 3, 2], [1], [0, 0], [3, 0], [5], [], [], [18]], "fitness": 31, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0\\nloopBreak% = 0\\nwhile i2 \\ge i0:{:\\nif in1 in saveChr(int(0.0)):{:\\ni1 = ( i0 - ( i1 + int(8.0) ) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = s2[i1:( i0 - mod(i2,i0) )]\\ni1 = i0\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 6, 6, 2, 4, 0, 1, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 1, 2, 2, 11, 2, 15, 4, 0, 3, 1, 5, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 8], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(08.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0], [9, 9, 0, 3], [1, 2, 2], [1], [2, 0, 1, 2, 1, 1, 3, 3, 0, 0, 0], [1, 0], [1, 2], [0], [1], [1, 4], [], [], [2, 2, 0], [], [], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 10, 2, 2, 1, 1, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1[mod(i1,int(9.0)):( int(9.0) + int(0.0) )][max(abs(i2), i2):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [5, 9, 4], [2, 1, 2, 2, 2], [1, 1], [1, 3, 3, 0, 1, 2, 3, 0, 3, 1, 0], [1], [2, 1, 2, 0], [1, 1], [1], [], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 5, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(59.0)\\ni1 -= abs(max(i2, int(4.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [5], [1], [0], [2], [], [], [], [], [1], [0], [2, 0, 0], [], [2, 2, 0, 1, 0, 0], [0, 1], [], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 6, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( divInt(i2,int(0.0)) - i0 ) != i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [1], [0], [], [], [], [], [2, 0], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0[i2:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 0, 3, 1], [], [0], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\nin0 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [1], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i1\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 0, 8], [2, 1], [0], [3, 1, 2, 3, 1, 1, 1, 0], [0], [2, 0, 0], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(int(1.0))\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 1, 0], [], [0], [], [], [0, 2, 1], [5], [0, 1], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0], [0], [0, 0, 3, 2, 2, 2, 2, 2, 1, 1, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [1, 0], [0, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 7, 1, 16, 5, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\ni2 = i0\\nb1 = i2 != abs(divInt(( divInt(( mod(int(7.0),int(0.0)) - i0 ),int(6.0)) + min(i1, i1) ),i0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [4], [1], [0], [], [], [], [], [], [1], [5], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(5.0) \\le i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [1, 0], [3], [1, 0], [0], [], [0], [], [], [], [1], [0], [1], [], [3, 1, 3, 0], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(int(0.0)) \\ge abs(i1):{:\\nb1 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [3, 0], [], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0, 1, 0], [], [0, 0, 1], [], [0, 0], [], [], [1, 0, 1], [], [0, 0], [], [], [1, 0], [], [1], [], [], [], [2, 1], [0], [3, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [2, 1], [], [0], [], [], [0], [], [], [], [], [], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b1\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [], [0], [1, 2, 3, 1], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\g ( len(s1) - int(8.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [0], [], [], [1], [0], [1, 0], [0], [], [1], [], [1], [0], [1, 1, 1, 1, 1], [7, 7, 0, 9, 6], [1, 2, 1, 2, 1], [], [1, 2, 0, 2, 0, 2, 3, 0, 2, 2, 1, 2, 1, 2, 1, 3, 0, 3, 1, 0], [1, 0, 1, 0, 0, 1, 0], [2, 1, 2], [1, 2, 2, 2], [1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 5, 5, 5, 0, 20, 7, 3, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l mod(i1,( i2 - mod(abs(i1),( ( int(7.0) * mod(int(0.0),( int(9.0) * max(i2, abs(int(6.0))) )) ) * i1 )) )):{:\\nb1 = False\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 5], [1, 2, 1, 1], [1, 1], [1, 2, 3, 2, 1, 0, 0], [1, 0], [4], [1, 1, 0], [1], [4], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 2, 7, 2, 1, 3, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(2.0)\\ni2 -= mod(saveOrd(in1[( int(5.0) + i1 ):]),i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [], [], [0, 0], [], [3, 0, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = abs(i0) \\g i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 2, 2, 0, 1, 1, 2, 0, 2, 0, 1], [2, 1, 0, 1], [2, 1, 2, 1, 0, 0, 2], [0], [0, 0, 0], [], [], [1, 2, 2], [3, 1, 1], [1, 2, 1, 1, 0, 0, 2], [0, 0, 0], [2, 4], [2, 0], [], [], [1, 0, 1], [1, 1, 1, 1, 0, 1], [0, 2, 0, 5, 1, 8], [2, 0, 1, 0, 2, 1, 0, 2, 0, 1, 0, 1, 1], [0, 0], [0, 0, 1, 2, 0, 2, 2, 1, 0, 1, 0, 2, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0], [], [1, 0, 1], [1], [2, 0, 4, 0, 2, 0, 5], [1, 1], [0], [0, 0, 4, 2, 0, 4, 0, 1, 2, 4, 1], [1, 3, 2], [0], [0, 1], [0, 0], [5], [], [], [18]], "fitness": 31, "mapping_values": [1, 10, 10, 4, 6, 1, 3, 0, 0, 3, 3, 6, 3, 1, 2, 0, 0, 2, 6, 6, 12, 2, 19, 4, 0, 3, 1, 7, 0, 1, 7, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0\\nloopBreak% = 0\\nwhile i2 \\ge i0:{:\\nif in1 == saveChr(int(0.0)):{:\\ni1 = mod(i0,( ( int(2.0) - i2 ) + int(0.0) ))\\n:}else:{:\\ns0 = s2[i1:( i0 - i2 )]\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i1\\nloopBreak% = 0\\nfor s0 in in2.lstrip():{:\\nb1 = i0 \\g int(5.0)\\nif i1 \\g int(18.0):{:\\nb2 = not b2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [2], [], [5], [], [], [], [], [1], [2], [0], [0], [1], [], [], [], [], [2, 5], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s2.endswith(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [2], [1, 2], [], [0], [], [], [0], [], [0], [], [], [0], [], [], [], [1], [9], [0], [0], [3, 1], [], [2], [], [], [5, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b0:{:\\ni0 = abs(int(9.0))\\nin2 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [0], [], [], [], [1], [3], [1], [0], [], [], [], [], [], [], [], [1, 2], [0], [0, 0], [], [4], [], [], [4, 2], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in s2:{:\\nb1 = i1 \\ge i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [8, 9, 1], [1], [1], [1], [], [3], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(891.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [4], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = getCharFromString(saveChr(int(0.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [], [3, 2, 0, 3, 0], [0], [2, 4], [2], [], [5, 5, 3, 4, 5], [], [], [0, 4, 2, 0, 4, 0], [3, 0], [2], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 1, 2, 1, 0, 5, 0, 0, 6, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\nin0 = in1[:abs(( i1 * saveOrd(getCharFromString(in2, i2)) ))].strip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 2, 1, 1], [2], [1, 1, 2], [], [], [], [], [], [4], [1], [0], [], [], [], [], [], [], [], [0, 0, 2, 1, 0, 2], [1, 0], [0, 0, 0, 0], [], [], [1], [], [4, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 6, 2, 4, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i0\\nloopBreak% = 0\\nwhile i2 \\le i1:{:\\ni0 = i2\\nin1 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [], [], [], [0, 1], [3], [0, 1], [0], [], [1], [], [1], [], [0, 0, 1], [4, 1, 2], [0, 1], [1], [0, 1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\nb1 = i0 \\ge int(412.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [0], [0], [], [], [], [], [4, 0, 0], [], [], [4, 3, 0, 0], [3], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [4], [], [], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(in1)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i0\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [3, 1, 7], [], [], [2, 1, 1], [0], [], [0], [], [4, 0, 0], [], [], [4, 2, 0, 0], [3], [1], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 1, 0, 1, 0, 2, 0, 0, 3, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0[( int(3.0) + int(17.0) ):].rstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [2, 3], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:i0].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 0], [1], [2, 0, 1], [1], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += mod(i0,int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [2], [0, 2], [], [], [], [], [0], [4, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 0, 1, 1], [0, 9, 2, 9, 6, 8], [1, 1], [1], [1, 2, 1, 1, 3, 1, 3, 0, 3, 2], [0], [4, 2, 2], [1, 1], [], [1, 2, 5], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 5, 5, 0, 0, 6, 1, 1, 1, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\le ( int(9.0) - int(2.0) )\\nloopBreak% = 0\\nwhile saveOrd(s1) \\le int(96.0):{:\\ns2 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1], [8, 9, 4, 5], [2, 2], [1], [2, 2, 3, 1, 1, 2, 1, 0, 1], [0, 0, 1], [3], [0, 0, 1], [0], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 5, 2, 1, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += ( ( len(s1) + int(89.0) ) - int(45.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [2], [0], [], [0], [], [], [1, 0], [3], [1, 0], [0], [], [0], [], [], [], [1], [0], [2], [], [3, 1, 3, 0], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = abs(int(0.0)) \\ge abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [4], [], [], [2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(s2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [0], [0], [0], [0], [], [], [0], [4], [1], [0], [5], [], [], [], [], [1], [3], [0], [], [0, 3, 1], [], [2], [], [], [4, 1, 5], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\le abs(int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [9, 5, 2], [2, 1, 0, 2], [0, 0], [0, 2, 0, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\ni0 = divInt(i2,int(952.0))\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 2, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [0], [], [2], [], [5], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [4, 4, 5], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in saveChr(i0):{:\\nb0 = in1.endswith(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [2], [], [2], [], [], [], [], [1], [2], [2, 0], [], [2, 2, 0, 0, 0], [0, 0], [], [1, 1], [], [5, 3], [], [], [4, 0, 0, 4, 0], [3, 3], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in2.lstrip() == in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2, 1], [0], [0, 1], [], [4], [0], [], [5], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [9, 5], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(9.0) \\g int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [1, 1], [8, 4], [2], [], [2, 1, 3, 1, 0], [1], [0], [], [1], [0], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1], [0, 5], [1, 1], [], [3, 1, 2, 0, 1, 2, 3, 0, 3], [0, 1], [1, 4, 4], [0], [0], [0, 1], [], [], [4, 4, 0, 0], [2, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 1, 1, 2, 0, 0, 4, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(int(0.0), ( i1 + int(5.0) )) == divInt(saveOrd(s0.lstrip(s1).capitalize()),i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [1], [], [2, 2, 1, 1, 0, 3], [0, 0], [3], [1, 0], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 6, 2, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( ( int(0.0) - int(8.0) ) + i1 ) \\g len(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [0, 1, 6], [0, 2, 0], [], [0, 0, 3, 2, 0, 1, 2, 1, 1], [0, 0], [3], [1, 2], [], [2, 1, 4, 2], [1], [], [4, 2, 2, 3, 4, 1, 3, 0, 0, 3, 4, 0], [2, 0, 1], [], [1, 0], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 9, 2, 1, 2, 0, 4, 1, 0, 12, 3, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (getCharFromString(\"\"R\"\", i0) + (s1 + in1))[i2:len((saveChr(( i0 - int(0.0) )) + s2))][:( int(1.0) * int(6.0) )].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [0, 0], [], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [6, 0, 7, 9, 6, 6, 3, 4, 0, 6, 8, 0, 8, 1, 3, 1, 7, 3, 4, 6, 3, 0, 3, 3, 3, 5, 1, 9, 9, 5, 2, 2, 7, 9, 3, 7, 8, 5, 2, 3, 6, 4, 5, 8, 5, 3, 4, 0, 2, 2, 0, 0, 2, 5, 6, 2, 8, 1, 8, 2, 6, 8, 7, 3, 9, 3, 0, 9, 3, 2, 7, 8, 6, 6, 9, 0, 4, 8, 5, 2, 9, 0, 7, 1], [1, 1, 0], [], [3, 0, 2, 0, 1, 2, 3, 0, 3], [0, 1], [1, 4, 4], [0], [0], [0, 1], [], [], [4, 4, 0, 0], [1, 3], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 9, 2, 3, 1, 1, 1, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = max(i1, ( i1 + int(6.0) )) \\l divInt(saveOrd(saveChr(i0)),saveOrd(s0.rstrip()))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [0], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0], [0, 2], [1], [0], [0], [], [], [3, 3], [], [0, 0], [], [], [0, 0], [], [], [], [0, 1], [5, 4], [0], [1], [1], [], [], [2], [], [0, 2], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2:{:\\nloopBreak% = 0\\nwhile res0:{:\\ni0 *= int(54.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [], [0], [], [], [], [], [0, 0], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0[i2:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [0, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [0], [1, 2], [], [], [], [], [4], [], [], [0, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [2], [1], [1], [0], [], [], [], [], [], [1, 1], [3, 7], [0], [], [0, 1, 0, 0], [], [0], [], [], [2, 0], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\nb2 = i0 \\g int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [0, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [0, 1, 1], [4, 5, 4], [0, 2, 0], [0], [2, 1, 0, 2, 3, 2, 1, 0], [0, 0], [4], [2, 1], [], [4, 2], [1], [], [1, 0, 4], [2], [], [], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 3, 1, 0, 1, 0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\",\"\".endswith(in1)\\ni0 = ( int(45.0) * i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1], [], [], [], [], [], [1, 2], [0, 1, 1], [0, 0], [], [3], [1], [], [], [1, 1, 1, 1, 1, 1], [2, 9, 8, 4, 9, 2], [0, 0, 1, 0, 1, 0, 2], [1], [1, 0, 1, 2, 3, 1, 1, 3, 3, 2, 2, 2, 2, 1, 0, 0, 3, 0, 1, 1, 3, 0, 0, 3, 1], [0, 1, 1, 0, 0, 0, 1], [3, 1, 3, 1, 3, 2], [2, 2, 0, 2, 1], [0, 1, 0], [3, 1], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 2, 1, 7, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( int(2.0) \\g i0 or int(9.0) == ( len(in0) * int(8.0) ) ):{:\\ni0 *= int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [2, 1, 0, 1], [], [], [], [3, 2], [], [], [], [], [0, 1], [9, 8], [2, 1, 0], [0, 1], [1, 0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(98.0)\\ni1 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 2], [], [0, 0], [], [], [2, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not b2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [3, 8, 5], [1, 2, 2, 2, 0], [0, 1], [2, 1, 2, 0, 2, 3, 1, 0, 2, 0, 1], [1, 0, 0, 0], [0, 2], [2, 0, 2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 1, 11, 4, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = mod(int(3.0),( i2 * ( min(int(8.0), i2) + ( i2 * int(5.0) ) ) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2, 2], [1], [2, 0, 0], [0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i2 + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1], [0, 3, 5, 8], [2, 0, 1, 1], [1, 1], [2, 0, 2, 1, 1, 1], [0, 0], [], [0, 0, 1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += ( i0 + ( int(0.0) - int(3.0) ) )\\ni1 *= int(58.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 2, 6, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 1], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 4], [2], [], [2, 1, 3, 1, 0], [1], [2], [], [1], [0], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(saveChr(mod(int(8.0),abs(int(4.0)))), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [5, 0, 4], [2, 1, 2, 1], [1], [1, 3, 0, 0, 0], [0], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(504.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 2], [], [0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [3, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\nin0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [1, 2, 1, 2, 1, 0, 1, 2, 1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [1, 0], [3], [1, 0], [0], [], [0], [], [], [], [1], [0], [2], [], [3, 1, 3, 0], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(int(0.0)) \\ge abs(i2):{:\\nb1 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [0], [1], [0], [2], [], [], [], [], [1, 1, 0, 1], [5, 0, 6, 5], [1, 0, 0, 1, 2, 0], [], [3, 3, 2, 0, 3, 2, 2, 1, 0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0], [2, 3, 1], [2, 2, 1, 2, 0], [1, 1], [1, 3], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 6, 0, 19, 7, 3, 5, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = abs(len(s1)) \\l ( i1 * max(( ( int(5.0) * i0 ) - ( mod(mod(i0,( i1 * int(0.0) )),i2) + i0 ) ), int(65.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [2, 0], [1], [3, 0], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [6, 7], [1, 2, 0], [1], [2, 3, 1, 0, 0], [1], [3, 2], [1], [1], [0], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 1, 1, 1, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= mod(len(s0[int(67.0):]),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [1, 2, 2], [2, 2, 2, 2], [], [2, 0, 2, 0, 2, 1, 3, 2, 3, 1, 0, 0, 1], [1, 0, 0, 0], [0, 0], [0, 2, 1], [0], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 13, 4, 2, 3, 1, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:divInt(i2,( i2 + ( int(1.0) * min(( min(int(2.0), i2) - i2 ), int(2.0)) ) ))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [0], [2], [0], [4], [], [], [], [], [0, 1, 0, 1], [0, 5, 5, 7], [1, 1], [], [3, 1, 2, 0, 2, 2, 3, 0, 3], [0, 1], [2, 4, 4], [0], [0], [0, 1], [], [], [4, 4, 0, 0], [1, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 4, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveChr(abs(int(05.0))).startswith(s0.lstrip(s1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [0], [], [], [0], [0], [1, 0], [0], [], [1], [], [0], [0], [1, 1], [7, 7], [1], [], [1, 2, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 2, 2, 1, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l ( i1 - int(7.0) ):{:\\nb0 = True\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [4], [1], [], [1], [], [], [], [3], [], [], [], [21]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"<\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 2, 2], [], [0, 0], [], [], [0], [], [2], [], [1], [], [], [], [], [1, 1, 1, 1], [6, 3, 7, 6], [1, 0, 0, 0, 0, 1], [], [0, 3, 3, 0, 0, 2, 1, 0, 2, 1, 2, 0, 1, 2, 3, 0, 1], [1, 0, 0, 0], [3, 4, 2, 3], [0, 1, 0], [0], [1, 0, 3, 1, 1, 5], [1], [], [2, 0, 0, 4, 2, 4, 4, 4, 1, 0, 1, 0], [1, 1, 1, 0], [], [0, 0, 2], [3], [], [], [], [10]], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 6, 0, 17, 4, 3, 3, 1, 4, 1, 0, 9, 4, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s1[i1:len(s0)] not in saveChr(saveOrd(saveChr(i0)[i0:divInt(int(6.0),i0)]))\\nin0 = saveChr(( int(3.0) + ( i0 - int(7.0) ) ))\\ns1 = getCharFromString(\"\"\"\\\\\"\"\", ( abs(i1) + int(6.0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 2], [], [], [3, 1, 1], [], [2], [], [], [1], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = getCharFromString(saveChr(abs(int(2.0))), int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0], [0, 1], [0], [0], [], [], [2], [4], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [9, 1, 2, 4, 8, 0], [1, 0, 2, 1, 1, 0, 1], [0], [0, 3, 3, 3, 0, 0, 1, 3, 3, 2, 3, 1, 0, 1, 2, 3, 3, 2, 3, 0, 1, 2, 0, 1, 3, 1], [1, 1, 0, 0], [2, 4, 1, 0, 3, 3, 0, 2, 4, 2], [0, 2], [1, 1], [1, 2, 3, 0], [], [0], [2, 0, 4, 2, 2, 0, 4, 0], [1, 1], [], [2, 1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 7, 1, 26, 4, 10, 2, 2, 4, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\le abs(saveOrd(s1[max(i0, i2):]))\\nloopBreak% = 0\\nfor s2 in saveChr(int(9.0)):{:\\ni1 = min(len(in0[mod(len(saveChr(int(1.0))),i1):int(2.0)][:mod(min(abs(( saveOrd(s0) + i0 )), int(4.0)),( i1 * int(8.0) ))]), abs(int(0.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1], [1, 2, 0, 1, 0, 0, 0], [2], [1, 0, 2, 2, 2, 2], [], [0, 0, 0, 0], [], [], [0], [2], [0, 0], [0], [], [1], [], [1], [], [1, 1, 1], [6, 2, 6], [0, 0, 1, 2, 0, 1, 1, 1], [0, 1, 0], [1, 2, 0, 0, 1, 1, 2, 0, 1, 0, 0], [0, 0], [4], [2, 1, 1], [], [0, 0, 1, 0, 3], [], [], [4, 0, 0, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(6.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [3, 6], [1], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(36.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 5], [1], [], [0, 1, 1], [], [], [], [], [5, 0, 2], [1], [], [3, 4, 4, 0, 0, 3, 0, 2, 0], [3, 0], [0], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 0, 5, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (getCharFromString(s0, i1).lstrip() + s2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [3], [1], [0], [], [], [], [], [], [1, 1], [7, 2], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(7.0) \\ge int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [2], [], [5], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 3], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s1.endswith(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 2, 1, 1], [2], [1, 1, 2], [], [], [], [], [], [4], [1], [0], [], [], [], [], [], [1], [3], [1, 0, 2, 1, 0, 2], [1, 0], [0, 0, 1, 0], [], [], [1], [], [4, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 5, 2, 4, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i0\\nloopBreak% = 0\\nwhile i2 \\le int(3.0):{:\\ni1 = i0\\nin1 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [], [0, 0], [], [], [2], [], [0], [], [], [1], [], [0], [], [], [], [1, 0], [1], [0], [], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [2], [], [], [], [], [], [5], [1], [0], [], [], [], [], [0], [1, 0, 1], [5, 8, 5], [0], [], [2, 1, 1, 0], [1], [], [], [0], [2, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 3, 3, 1, 0, 4, 1, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif divInt(int(5.0),int(85.0)) != i0:{:\\ns2 = s0\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1, 1], [1, 2, 0, 1, 1], [0], [1, 0, 1, 1], [0], [0], [], [], [1, 0], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [2, 3, 5, 2, 9, 1, 9, 0], [0, 1, 1, 2, 2, 0, 2, 1, 1], [0, 1], [0, 2, 1, 1, 1, 1, 1, 2, 0, 3, 3, 1, 3, 0, 2, 1, 1, 0, 1, 1, 0, 3, 1, 0, 1], [0, 0, 0, 1, 1, 1], [2, 1, 1, 2], [1, 1, 0, 2], [0, 0, 1], [1, 4], [], [0], [0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 2, 6, 1, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i1\\nloopBreak% = 0\\nfor s1 in in1:{:\\nb1 = ( int(2.0) - int(3.0) ) \\l int(5.0)\\ni1 -= int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 1, 0], [1, 1], [0, 1], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\ni0 -= int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [1], [0, 2], [], [0], [], [], [2], [1], [1, 2, 1], [0], [0], [2], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [5, 0, 8, 2, 9, 6, 7, 8, 3, 3, 2, 8], [1, 2, 1, 2, 0], [], [3, 0, 3, 0, 3, 2, 2, 2, 2, 1, 3, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 1, 1, 0], [1, 2, 2, 2], [1, 1, 0, 0], [1, 1, 4, 5, 3, 2], [], [], [2, 2, 0, 0, 0, 0, 0], [], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 12, 12, 5, 0, 28, 8, 5, 4, 4, 5, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(s1[:i1][:max(i2, max(( mod(mod(( int(5.0) - max(min(int(0.0), int(8.0)), int(2.0)) ),int(9.0)),int(6.0)) * ( ( int(7.0) * int(8.0) ) * int(33.0) ) ), divInt(int(28.0),divInt(i1,i2))))]) \\g i0:{:\\nb2 = s1 in in1\\n:}else:{:\\nin2 = in0\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1], [0, 8, 1, 7, 2], [2, 2, 1, 0, 0, 2, 2], [1], [1], [0, 1, 0, 1, 0, 1, 1], [1, 3, 0, 0, 2, 3], [0, 2, 0, 1], [1, 0, 0, 0], [1], [], [], [4, 0, 4, 4], [0, 2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(08.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [3], [1], [0], [], [], [], [], [], [0, 0, 1], [9, 8, 9], [2], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i2 \\ge int(989.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 1, 1], [], [], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [], [0], [0, 0], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 1], [1], [0, 2], [], [0], [], [], [2], [1], [0, 2, 1], [0], [0], [2], [], [], [0], [], [], [1, 2], [], [3, 0, 3, 0], [], [3, 4], [], [], [1, 1, 4, 5, 3, 2], [], [], [2, 2, 0, 0, 0, 0, 1], [], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not s1[:len(s1)][:i1] in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [0], [1], [0], [], [], [], [], [], [1], [0], [0, 2], [], [2, 0, 1, 0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = mod(i0,int(0.0)) \\l i2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1], [6, 8, 5, 9], [2, 1, 2, 2, 2, 2], [0], [0, 2, 0, 2, 0, 3, 2, 3, 1, 0, 2, 1, 0, 1], [1, 1, 0, 1], [2, 1], [2], [1, 0, 0], [5, 0], [], [], [0, 4, 2, 0, 4], [3, 0], [2], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s0\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [], [], [1], [], [], [], [], [5], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 2, 1], [0], [0, 0, 1, 0, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [2, 5], [1, 1, 0], [0, 0], [], [1, 0], [], [0], [], [1], [5], [0, 0, 2, 2], [1], [0, 1, 0, 0], [], [], [0], [], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 == int(5.0)\\nb2 = i0 != i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [8], [0, 0], [1], [3, 0, 1], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= max(i0, int(8.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [0, 2], [1], [3, 0], [], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [], [0, 0], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [0, 1], [], [0, 2, 3, 3, 1, 0], [0], [3, 0], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 6, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\g ( len(s1) - min(int(0.0), i1) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [1, 0], [], [0], [], [], [1], [1, 1], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 5, 1, 1, 9, 6, 6, 1, 2, 2, 0, 4, 7, 9, 2, 0, 0], [0, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 0], [0, 1], [1, 2, 1, 2, 1, 3, 1, 2, 2, 3, 3, 0, 0, 3, 1, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 1, 0, 2, 2, 2, 3, 3, 1, 1, 3, 3, 2, 0, 0, 3, 1, 2, 1, 0, 2, 1, 3, 3, 0, 1, 0, 3, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0], [0, 3, 4, 2, 0, 1, 3, 1, 0, 2, 2, 0, 3, 1, 1], [2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0], [1, 1, 1, 1, 0, 1, 1], [3, 1], [1], [], [2, 0, 4, 1, 4, 2, 2, 4, 4, 0, 4, 4], [2, 0, 1, 3, 3, 1], [0, 2], [1, 1, 1], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 6, 6, 5, 1, 19, 5, 4, 4, 1, 1, 1, 0, 4, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) \\g ( int(9.0) * ( int(5.0) + min(int(1.0), ( mod(len(in0[:saveOrd(\"\"r\"\".capitalize())]),i0) * i1 )) ) ):{:\\ni2 = abs(int(1.0))\\n:}\\nb1 = i2 \\g ( int(9.0) + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [2], [1], [1, 0], [], [], [2], [], [3, 3], [], [], [2, 2, 0], [], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(6.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [2, 5], [], [], [4, 0, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [2, 9, 1], [1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(291.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0], [1], [2, 0, 0], [1], [], [1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= mod(i1,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [2], [1], [0], [], [], [], [], [], [1], [3], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(3.0) == i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [2, 0], [2], [1], [], [0], [], [], [], [1, 2], [0, 1, 1], [0, 0], [], [3], [1], [], [], [1, 1, 1, 1, 1, 1], [2, 9, 8, 4, 3, 2], [0, 0, 1, 0, 1, 0, 0], [1], [1, 0, 1, 2, 3, 2, 1, 3, 3, 3, 3, 2, 2, 1, 1, 0, 3, 0, 1, 2, 3, 0, 2, 3, 1], [0, 1, 1, 0, 0, 0, 1], [3, 1, 2, 1, 3, 2], [2, 2, 0, 2, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 1], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 2, 3, 2, 0, 1, 1, 0, 0, 6, 6, 4, 1, 19, 4, 6, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( int(2.0) \\g i0 or int(9.0) == ( len(in0) * divInt(int(8.0),max(abs(max(len(s1), divInt(( int(4.0) * int(3.0) ),i0))), abs(i1))) ) ):{:\\ni0 += int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 2], [], [], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [3, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\nin0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [2, 0, 1, 0], [1], [1, 0, 1], [], [0, 0], [], [], [1], [3, 4, 1], [0, 1, 0, 1, 1], [0, 0, 0], [3], [3, 2], [0], [], [0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [7, 6, 2, 0, 6, 9, 2, 0, 6, 7], [0, 2, 2, 1, 1, 1, 0, 1], [1, 1], [1, 1, 0, 0, 3, 0, 0, 1, 2, 3, 2, 3, 3, 3, 0, 3, 1, 2, 1, 0, 1], [0, 1, 0], [0, 4, 4, 2, 3, 1], [2, 1, 2, 1], [0], [2, 1, 5, 3], [1], [], [4, 2, 4, 0, 0, 4, 4, 0, 0], [2, 3, 0, 3], [5, 2], [2], [3], [], [], [], [21]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 1, 3, 5, 3, 0, 2, 1, 0, 1, 10, 10, 8, 2, 21, 3, 6, 4, 1, 4, 0, 0, 9, 4, 2, 1, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( int(7.0) \\ge int(62.0) and not i0 \\le i2 ):{:\\ni2 *= min(i1, i1)\\nb1 = int(0.0) \\g ( saveOrd(s2.strip(s1)[divInt(saveOrd(getCharFromString(in2.strip(), abs(len(in0)))),i1):].capitalize()) - max(int(6.0), ( int(9206.0) * i0 )) )\\n:}\\ni1 -= int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [0, 7, 7], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(077.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [], [], [], [], [], [3], [1], [0], [], [], [], [], [0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [4, 4, 5, 4, 7, 6, 2, 3, 6, 6, 5], [2, 2, 1, 2, 1, 2], [1], [2, 3, 0, 0, 3, 1, 3, 0, 0, 3, 3, 3, 1, 1], [1], [1, 0, 2, 1, 0, 3], [1], [1], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(max(i2, i2),min(int(4.0), abs(i1))) \\ge i2:{:\\ni1 -= max(min(len(s1), int(45.0)), int(47623665.0))\\n:}\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 11, 11, 5, 1, 14, 1, 6, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 4, 2], [], [], [4, 3, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in1 + s2).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [], [], [], [], [], [], [0, 0], [], [], [2, 1], [], [1], [0], [1], [3], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not False:{:\\ni0 = int(3.0)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [2], [1, 1], [], [0, 0], [], [], [], [3], [0, 1], [0], [], [2], [], [], [], [1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 6, 0, 1, 1, 9, 1, 6, 6], [2, 0, 1, 0, 1], [1, 0], [2, 1, 3, 2, 1, 3, 2, 0, 0, 1, 2, 2, 3, 1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1], [1, 2, 1], [1, 1], [1, 0, 1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 9, 9, 5, 2, 19, 5, 3, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= mod(int(4.0),max(divInt(int(6.0),abs(mod(i0,i1))), int(0.0)))\\nloopBreak% = 0\\nwhile not divInt(mod(max(int(11.0), int(9.0)),int(1.0)),int(6.0)) \\ge i0:{:\\ni1 = int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1, 1], [1], [0, 0, 3], [1], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 0, 0], [], [1, 0, 2], [], [0, 0, 0], [], [], [1], [], [2], [], [5], [], [], [], [], [1], [3], [2, 0], [1], [0, 1], [], [], [1], [], [3, 1, 5, 1], [], [], [0, 4, 0, 4, 0], [3, 1], [5], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 1, 0, 4, 0, 0, 5, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i0\\nb1 = in0.endswith(s1.strip(saveChr(int(3.0))))\\nin2 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [1], [0, 1], [0], [], [2], [], [], [], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [9, 1, 4, 8, 2, 7, 1, 8, 3, 0, 9, 6, 1, 0, 6, 5, 6, 2, 9, 3, 7, 4, 4], [1, 1, 2, 1, 0, 0, 1, 2, 1, 1, 2, 0, 2, 0, 1, 2, 2, 0, 2, 2, 1], [0], [2, 1, 2, 2, 0, 3, 0, 3, 1, 2, 3, 2, 3, 0, 2, 3, 0, 1, 0, 0, 2, 3, 1, 0, 0, 1, 3, 0, 3, 3, 2, 3, 3, 2, 1, 3, 2, 0, 0, 2, 2, 2, 2, 0, 3, 0, 2, 1, 0, 2, 2, 0, 0, 2, 3, 1, 3, 0, 2, 1, 1, 1, 2, 0, 3, 2, 1, 1, 3, 2, 1, 0, 1, 2, 1, 1, 0, 1], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 1, 0, 3, 1, 1, 1, 0, 1, 1, 0, 4, 4, 1, 1, 2, 2], [1, 1, 1, 1, 1, 2, 2, 0, 0, 1, 2], [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [2, 3], [1], [], [2, 4, 0, 4, 1], [0, 1], [], [2], [3], [], [], [], [10]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 23, 23, 21, 1, 78, 23, 17, 11, 12, 1, 1, 0, 5, 2, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = ( int(9.0) - mod(mod(i1,min(i2, max(int(1.0), ( min(mod(len(getCharFromString(s2, i1)[divInt(max(i0, int(4.0)),i0):]),i1), ( max(int(8.0), i2) - i1 )) - int(27.0) )))),max(i1, min(max(divInt(max(min(mod(int(1.0),saveOrd(saveChr(( i2 - i0 )))), mod(mod(mod(divInt(i2,saveOrd(\"\"\"\\\\\"\"\")),i0),( int(8.0) - i1 )),( ( i2 * i2 ) * ( max(int(3.0), max(i0, mod(int(0.0),int(9.0)))) + int(6.0) ) ))), ( i2 + abs(( int(1.0) - int(0.0) )) )),abs(( int(6.0) * i2 ))), int(562.0)), mod(int(9.0),int(374.0))))) )\\nres0 = not i1 \\g int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [0], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [3], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = getCharFromString(saveChr(int(0.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [3], [1], [0], [], [], [], [], [], [1, 1], [1, 2], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\ge int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 1], [], [0, 0], [], [], [2, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [], [], [1, 0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i1 \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [5, 1], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(51.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0, 1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [0], [0], [0], [0], [], [], [0], [2], [2], [], [5], [], [], [], [], [], [], [2, 0, 2, 1, 0], [], [0], [], [], [], [], [4, 1, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveChr(i2).endswith(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1], [2, 0, 0, 0, 2, 1, 2, 2, 0], [1], [1, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 2, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [1, 2, 4, 2], [2, 0, 2, 1, 1, 1, 2, 2], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [1, 1], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 8, 1, 39, 16, 4, 8, 9, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(40.0)\\ns1 = saveChr(divInt(i0,int(0.0)))[:divInt(i0,mod(divInt(int(7.0),divInt(max(( mod(divInt(i0,i2),int(3.0)) + divInt(int(6.0),abs(( ( int(1.0) * saveOrd(s1) ) - int(4.0) ))) ), int(3.0)),divInt(( int(0.0) - i1 ),abs(( ( int(4.0) - ( i2 * i2 ) ) * int(8.0) ))))),int(1.0)))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [], [0, 0], [], [], [2, 3, 3, 2], [], [0, 0], [], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 4, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [0], [], [1, 0], [], [], [], [], [3, 3], [], [], [2, 2, 0], [], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0[:int(6.0)][i0:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [0, 0, 0, 1], [5, 9, 1, 2], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(5912.0) \\l i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 3], [2, 0, 0, 0], [1], [2, 1, 3, 3, 0, 0, 2, 1, 0, 0], [1, 0], [2, 1, 1], [0, 2, 1], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 6, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(8.0),abs(max(i0, i0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [], [0, 0, 2], [], [2], [1, 1], [1], [1], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [], [1, 1], [], [], [], [3, 3], [], [], [], [9, 30]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [], [1, 3, 2, 0, 2, 3, 3, 1, 2, 1, 0], [0, 0, 1], [1, 3, 2], [0, 0, 2], [1], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 0, 0, 0], [1, 0, 3], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 0, 11, 3, 3, 2, 1, 4, 0, 0, 7, 3, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (saveChr(int(5.0)) + getCharFromString(s2.rstrip(s2), max(( i1 + ( len(in2) + abs(int(7.0)) ) ), mod(int(5.0),i2))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 4], [2], [], [2, 1, 0, 1, 0], [1], [2], [], [0], [0], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(saveChr(divInt(int(8.0),i2)), int(4.0))\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 1, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2, 2], [1], [2, 0, 0], [0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i2 + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [3, 3], [], [1], [], [], [0], [], [], [], [], [], [1], [1], [3], [], [3], [1], [], [3, 2, 1], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in0)\\ns2 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 2], [0], [2, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( i2 - int(5.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [1], [3, 0, 1, 1], [], [2], [0], [], [2, 3], [], [], [2, 0], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1], [8, 5, 2, 9], [0, 2], [0], [2, 1, 3, 2, 1, 1], [1, 1], [4], [], [1, 0], [1], [], [], [2, 0], [2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 6, 2, 1, 0, 2, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(int(8.0),saveOrd(s1[divInt(int(52.0),int(9.0)):]))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1], [8], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0, 4], [1, 0], [0], [1, 2, 1, 0, 3], [1], [3], [], [1], [3], [], [], [2, 2, 0], [], [], [2, 1], [], [], [], [], []], "fitness": 31, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(0.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1, 1], [2, 0, 1, 1], [0], [2, 2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [1, 1, 0], [0], [3, 3, 0, 3, 2, 0, 3, 1], [1], [4, 0, 2, 4], [], [0], [3, 0, 0, 0, 3, 2, 2], [], [0], [0, 4, 0, 2, 0, 0], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 8, 1, 4, 0, 1, 7, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s0:{:\\ns0 = saveChr(saveOrd(s0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = s2[min(i1, abs(divInt(i1,saveOrd(s2)))):]\\ni0 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2, 1, 2], [1, 0], [0, 0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i2\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [2], [1], [1], [0], [], [], [], [], [], [1, 1], [3, 7], [0], [], [3, 1, 1, 0], [], [0], [], [], [2, 0], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\nb2 = min(int(3.0), int(7.0)) \\g i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [5, 7], [1], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(57.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 1, 0], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 2, 5, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i0)\\ni2 = ( int(3.0) + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [1], [0], [], [], [0], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [3], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 0, 1], [], [0, 0], [], [], [1, 0, 1], [], [0, 0], [], [], [1, 0], [], [1], [], [], [], [2, 1], [0], [3, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\nb0 = b1\\ni2 = abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [0], [], [], [1], [0], [1, 0], [0], [], [1], [], [1], [0], [1, 0], [7, 7], [1], [], [1, 0, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l i1:{:\\nb1 = False\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 6], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(26.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [8, 4], [2, 2, 0, 0], [1], [0, 2, 3, 3, 0, 3, 2, 1, 0, 0], [1, 0], [2, 1, 0], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 4, 2], [], [], [4, 3, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in1 + s2).capitalize()\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 0], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(20.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [2], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 3], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s1 == in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [0, 2, 0, 1, 0, 0], [1, 0], [1, 1, 1, 0], [0], [0, 0, 0], [], [], [2], [], [0, 2], [], [0], [1], [], [0], [1], [1, 1, 1, 1], [6, 7, 8, 3], [1, 0, 0, 0, 2, 1, 0, 1], [1, 1, 0], [0, 3, 0, 2, 2, 2, 0, 2, 2, 3, 1, 3, 3, 0, 1, 2, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0], [2, 4, 3, 2], [1, 2, 0, 2, 2, 2], [0, 0, 0, 1], [1, 3, 0, 4, 0, 5], [], [0], [0, 0, 0, 2, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [1, 1], [], [0], [], [], [], [1], [1], [0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 5, 1, 1, 9, 6, 6, 1, 2, 2, 0, 4, 7, 9, 2, 0, 0], [0, 1, 2, 2, 0, 1, 1, 0, 2, 1, 2, 2, 0], [0, 1], [1, 2, 3, 2, 1, 3, 1, 2, 1, 3, 3, 0, 0, 3, 1, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 1, 0, 2, 2, 2, 3, 3, 1, 1, 3, 3, 2, 0, 0, 3, 1, 2, 1, 0, 0, 1, 3, 3, 2, 1, 0, 3, 2, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0], [0, 3, 4, 2, 4, 1, 4, 1, 0, 2, 2, 0, 3, 1, 1], [2, 0, 2, 0, 2, 2, 1, 1, 0, 2, 0], [1, 1, 1, 1, 0, 1, 1], [3, 1], [1], [], [2, 0, 4, 1, 0, 2, 2, 4, 4, 0, 4, 4], [2, 0, 1, 3, 3, 1], [0, 2], [1, 1, 0], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 4, 4, 4, 2, 14, 3, 5, 4, 0, 2, 1, 0, 5, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) \\g ( min(( int(9.0) * len(in0[:int(5.0)]) ), ( int(1.0) + saveOrd(\"\"r\"\".capitalize()) )) * abs(i0) ):{:\\ni1 = i2\\n:}\\ni2 += saveOrd(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 2, 2, 1, 1, 1, 2, 0, 2, 0, 1], [2, 1, 1, 1], [2, 1, 2, 1, 0, 0, 2], [], [0, 0, 0], [], [], [1, 2, 2], [3, 1, 3], [1, 2, 1, 1, 0, 0, 2], [0, 0, 0], [2, 4], [1, 0], [], [1], [1, 0, 1], [1, 1, 1, 1], [0, 8, 0, 5], [2, 0, 1, 0, 1, 1, 0, 2, 0, 1, 0, 1, 1], [0, 0], [0, 0, 1, 2, 0, 2, 0, 1, 0, 3, 0, 2, 0, 0, 0, 0, 1, 0, 3], [1, 0, 0], [0, 4], [1, 0], [1], [2, 0, 2, 0, 2, 0, 5], [1, 1], [], [0, 0, 4, 2, 0, 4, 0, 1, 2, 4, 1], [1, 3, 3], [0], [0, 1], [3, 0], [5], [], [], [18]], "fitness": 31, "mapping_values": [1, 11, 11, 4, 7, 0, 2, 0, 0, 3, 3, 6, 3, 1, 2, 0, 1, 3, 3, 3, 13, 2, 19, 3, 2, 2, 1, 7, 1, 0, 8, 2, 1, 1, 1, 0, 0, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0\\nloopBreak% = 0\\nwhile i2 \\ge i0:{:\\nif s2 == saveChr(int(0.0)):{:\\ni1 = mod(i0,( i1 - int(8.0) ))\\n:}else:{:\\ns0 = s2[i1:min(i0, ( i2 + i0 ))]\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = i0\\nif i1 \\g int(0.0):{:\\nb1 = i1 \\ge saveOrd(s0.lstrip())\\nif False:{:\\nb2 = b2\\n:}else:{:\\nin2 = \"\"/\"\"\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [0, 1], [], [], [], [], [2], [1], [1], [0], [], [], [], [], [], [], [], [0, 2, 2], [1], [0, 0, 3], [], [3], [1], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 \\g i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [1, 0, 2], [], [0, 0], [], [], [1], [4], [1], [0], [5], [], [], [], [], [1, 1], [3, 6], [2, 0, 1], [0], [0, 1, 2, 0, 1], [1], [], [], [1], [3, 1, 5, 1], [], [], [0, 4, 0, 4, 0], [3, 1], [5], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 5, 1, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\nb1 = int(3.0) \\le mod(i1,int(6.0))\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(6.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 1], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [3, 0], [], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 0, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 1, 1, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [3, 8, 8], [2, 1], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(388.0) \\le i2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 0, 0, 1, 1], [0, 1, 2, 0, 0, 1], [0], [0, 0, 1, 0, 0], [0], [0, 0, 0], [], [], [0, 2, 3, 3], [2], [1, 0, 0], [0], [], [1, 0], [], [0], [], [1], [5], [0, 0, 2, 2], [1], [0, 1, 0, 0], [], [], [0], [], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 == int(5.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [2, 0], [2], [1], [], [0], [], [], [], [3], [0, 1], [0], [], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 2, 7, 4, 8, 2, 4, 4], [2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [1], [3, 0, 2, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [4, 1, 1, 1, 4, 2, 4, 4, 3, 4, 4, 0, 1, 4], [2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [3, 1, 3, 4], [1], [], [0, 2, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0], [3, 2, 2, 3, 0, 0, 2, 1], [0, 2], [1, 1, 1], [1], [], [24], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 4, 1, 7, 2, 1, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not saveOrd(in0) \\ge i2:{:\\ni0 *= divInt(( int(7.0) + i2 ),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 1], [7, 2], [], [0], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(7.0) \\ge int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 2, 3], [2, 1, 1], [], [3, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0], [1], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 3, 0, 16, 6, 1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(mod(i2,divInt(int(1.0),( int(3.0) + mod(i1,int(9.0)) ))), mod(( i1 + int(4.0) ),int(2.0))) == int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [2], [1], [1], [0], [], [], [], [], [], [1, 1], [3, 7], [0], [], [3, 1, 1, 0], [], [0], [], [], [2, 0], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\nb2 = min(int(3.0), int(7.0)) \\g i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 2, 2, 1], [0, 1, 1, 2], [0, 1, 1], [0], [0, 0], [], [], [1], [0, 2, 4], [1, 1, 0, 0, 1], [0, 0, 0], [], [1, 2], [], [1], [1, 0], [1, 1, 1, 1, 1], [3, 1, 3, 7, 5], [1, 2, 1, 1, 2, 1, 1, 0, 0], [1, 0], [1, 0, 0, 0, 0, 3, 1, 0, 2, 2, 2, 2, 1, 1, 0, 1, 1], [0, 1, 1], [4, 0], [2, 0], [0, 1], [3, 4], [1], [0], [2, 1, 0], [], [], [2], [0], [11], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(3.0) \\l i1\\ni2 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 0], [2], [0, 2], [], [0, 0], [], [], [0, 3, 3], [3], [0, 0, 1], [0], [], [1, 0], [], [1], [], [], [], [1, 0], [], [0, 0], [], [], [], [], [0], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\ns0 = saveChr(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [0], [1, 3, 2, 0, 2, 3, 3, 1, 2, 1, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 0, 11, 3, 3, 3, 0, 2, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (saveChr(int(5.0)) + saveChr(max(( i1 - ( len(s2.capitalize()) + abs(int(7.0)) ) ), ( int(5.0) * i2 ))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 0], [1], [3, 2, 3, 1, 3, 0], [0], [2, 2, 2], [1, 0], [], [0, 4, 0, 1], [], [0], [4, 4, 0, 0], [3, 2], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 6, 1, 3, 2, 0, 4, 0, 1, 4, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1.capitalize().rstrip():{:\\ns0 = s1\\ni0 -= abs(( abs(int(4.0)) + abs(i0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 0], [], [2, 1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6], [0, 2, 1], [0], [3, 3, 0, 0, 0], [], [1, 0], [], [], [5, 5, 4], [0, 1], [], [4, 0, 1], [0], [], [], [3, 0], [1], [], [], [8]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 2, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(in2, max(min(i0, i2), i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [4, 6, 7], [0, 2, 2], [0], [1, 0, 1, 3, 1, 0], [1], [], [], [0], [1, 5, 1], [], [], [3, 3, 4, 0, 4, 0], [1, 2], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 3, 0, 0, 6, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(4.0)\\ns1 = ((saveChr(i2) + in2) + s1.capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 9], [], [], [3, 1, 1], [], [2], [], [], [5], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(saveChr(abs(int(2.0))), int(9.0))\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0], [1, 2], [0], [], [0], [], [], [2], [5, 3], [1, 2, 1], [0, 0], [1], [], [], [], [0], [0, 1, 1, 0, 1], [2, 4, 7, 1, 6], [2], [], [0, 1, 1, 1], [], [], [], [], [2, 0, 2, 4], [], [], [4, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 1, 5, 5, 1, 0, 4, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i2 != int(24.0):{:\\nloopBreak% = 0\\nwhile s2.capitalize() not in s0:{:\\nb2 = int(7.0) \\ge int(16.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1], [1], [1], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\ge int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [1], [0, 2], [], [0], [], [], [2], [1], [0, 2, 1], [0], [0], [2], [], [], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [6, 8, 7, 3, 5, 1, 6, 7, 0, 0, 7, 4, 5, 5, 1], [1, 2, 0, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1], [], [2, 0, 3, 0, 1, 2, 1, 2, 3, 3, 3, 1, 0, 3, 2, 2, 3, 0, 3, 2, 0, 1, 0, 2, 3, 1, 0, 0, 0, 2, 0, 1, 0, 2, 3, 0, 2, 3, 0, 0, 3, 3, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 2, 2, 2, 1, 1, 0, 0, 0, 2, 0], [0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 1, 5, 5, 3, 2], [], [], [2, 2, 4, 0, 0, 0, 0], [3], [1], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 1, 8, 8, 11, 0, 33, 8, 8, 4, 4, 4, 0, 0, 6, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not s1.rstrip()[:( i1 + min(i2, int(6.0)) )][:divInt(int(87.0),( max(min(max(int(35.0), i0), abs(( ( abs(i1) + abs(mod(i1,int(1.0))) ) - i2 ))), divInt(max(int(6.0), i1),i0)) + i0 ))] in s1:{:\\nb2 = divInt(i0,int(7.0)) \\g i2\\n:}else:{:\\nin2 = in2\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [5, 4], [1, 1], [0], [2, 1, 0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = mod(int(5.0),i1)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [0, 1], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i1\\nres0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [9, 0, 3], [1, 2, 1], [1, 1], [0, 1], [], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i2\\ni1 -= int(903.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [1, 1, 1, 2], [0], [2, 3, 0, 3, 1, 0, 0], [0, 0], [0, 4], [1, 2, 0], [], [5, 3], [], [], [4, 0, 0], [3], [5], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 5, 1, 2, 1, 0, 2, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = ( min(i1, saveOrd(in2.strip(in0))) - int(2.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 2], [0], [0], [2, 1, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = divInt(int(4.0),int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 2], [0], [2, 0, 1], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( i2 - int(5.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [1, 1, 1, 0], [1], [2, 2, 0, 3, 1, 0, 0], [0, 0], [0], [1, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 7, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= ( ( i1 * min(int(9.0), i1) ) + i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 4, 2], [], [], [3, 4, 0, 0], [3], [2], [], [], [], [], [], []], "fitness": 31, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in1.strip() + s2)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 1, 1, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [4], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = getCharFromString(saveChr(int(0.0)), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [4, 6, 7], [0, 2, 2], [0], [1, 0, 1, 2, 1, 0], [1], [], [], [0], [1, 5], [], [], [0, 2, 2, 0], [1], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(4.0)\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [5, 9, 9], [2, 1, 2], [1, 1], [1, 3, 3, 0, 1], [], [3, 1], [1, 1], [], [], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 5, 0, 2, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(59.0)\\ni1 -= len(saveChr(max(i2, int(9.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 2], [0], [0], [2, 1, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = divInt(int(4.0),int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\l int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 0, 1], [], [1, 2, 1, 1], [], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [9, 9], [1, 0, 2, 0, 1, 1, 1], [0, 1, 0], [0, 2, 0, 0, 2, 1, 3, 0], [0, 0], [4], [2, 1, 1], [], [0, 4], [], [], [4, 4, 4, 0, 0], [2, 2, 1, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 7, 3, 8, 2, 1, 3, 0, 2, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\ns0 = saveChr(( i2 * i0 )).capitalize().capitalize()\\ni1 -= ( int(9.0) - saveOrd(in1) )\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1], [1], [3, 1, 3], [], [1, 4], [1], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 0, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= max(int(3.0), saveOrd(in2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4], [1], [], [1], [], [], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"F\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [6, 7], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(67.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [1, 0, 1], [8, 9, 7], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(8.0) \\le int(97.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [0, 2, 1], [0], [1], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 3, 0, 1, 7, 8, 3], [2, 0, 2, 1, 2], [], [2, 2, 1, 0, 2, 3, 3, 2, 1, 0, 1, 1, 3, 2, 3, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0], [1, 1, 1, 0, 0, 0], [4, 0, 0, 2, 0, 0], [1, 2, 2], [0, 1, 0], [2, 3, 4], [], [], [2, 4, 0, 0, 0], [0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 8, 8, 5, 0, 25, 6, 6, 3, 3, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( getCharFromString(s2, divInt(mod(int(3.0),i2),divInt(saveOrd(in0),min(( int(6.0) - i0 ), int(3.0)))))[:int(0.0)] not in in1 and min(( abs(i2) * int(1.0) ), int(7.0)) \\l min(min(( i1 * int(8.0) ), int(3.0)), i2) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s0.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1], [3, 2, 3, 5], [2], [0], [3, 3, 1, 2, 1, 1], [1], [1, 2], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 6, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(abs(int(3.0)), mod(int(2.0),int(35.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [2], [4], [1, 0], [0], [], [1], [], [0], [], [], [], [0], [], [3, 0], [], [4], [], [], [2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveOrd(s2) \\le i0:{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [8, 9, 1], [1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [3, 0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(891.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [0], [0], [], [1], [], [1], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0], [0, 0], [0], [1], [0], [0], [], [], [0, 1], [], [0], [], [], [0], [], [], [], [], [], [1, 0], [1], [0], [], [], [2], [], [0, 0], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [2], [0, 1], [0], [], [2], [], [0], [], [0, 1], [2, 3], [], [], [3, 1], [], [4], [], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not saveOrd(s0) == int(23.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [3], [1], [0], [], [], [], [], [], [0, 1], [9, 8], [2], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i2 \\ge int(98.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 2], [], [0], [], [], [0], [], [], [], [], [], [0, 1], [0], [3, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 3], [2], [0], [1], [], [], [], [], [2], [1], [], [1], [], [], [], [3], [], [], [], [24]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(03.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 1], [1], [3, 3, 0, 0, 0], [0], [0, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= min(min(i1, i2), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [1], [0], [3, 1], [], [2], [0], [], [0, 4, 0, 1], [], [0], [4, 4, 0, 0], [3, 2], [2], [], [], [], [], [], []], "fitness": 31, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1.capitalize().strip():{:\\ns0 = s1\\ni1 = abs(int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 4, 0, 1, 4, 2, 1, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [5, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [3, 5, 7], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2, 0], [1], [2, 3, 3, 0, 0], [1], [3, 2], [1], [1], [5], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 1, 2, 1, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= mod(len(in2[abs(i2):]),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [3], [0], [2], [0], [], [], [], [], [], [1], [8], [2, 2, 0, 0, 1], [1, 0], [0, 2, 0, 0, 1], [0], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i2\\ni0 = ( i0 + i1 )\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 4, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [0], [], [], [1, 2, 2], [4], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [1, 5, 8], [0, 2, 1, 2], [], [2, 2, 1, 0, 3, 3, 0, 1, 0, 0], [1, 0], [0, 0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 4, 0, 10, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = mod(( int(1.0) + i0 ),min(min(i2, int(5.0)), i1)) \\le i2\\nb2 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [0], [], [], [], [], [4, 5], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2[:i1]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [0], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [4, 8, 1], [0, 0, 0, 2], [1, 0], [3, 3, 1, 0, 3, 0, 1], [], [2, 0, 0], [1], [], [0, 4, 0, 4], [], [0], [4, 4, 0, 0], [3, 2], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 2, 7, 0, 3, 1, 0, 2, 0, 1, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1.capitalize().rstrip():{:\\ni0 -= abs(min(int(4.0), i0))\\ni0 = min(i2, int(81.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [3, 6, 7], [0, 1, 0, 0], [], [2, 3, 1, 0, 1, 0, 3, 2, 3, 0, 0, 2, 2, 1, 0, 1], [0, 1, 1, 0], [0, 3, 2, 2, 3], [1], [1, 0, 1], [0], [1, 1], [], [2, 4, 2, 1, 4, 1], [1], [], [1, 2, 2], [2, 1], [], [10], [9], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 1, 1, 1, 0, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = saveChr(( min(int(3.0), i0) - int(6.0) ))[:i1]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [1], [], [1, 2, 3, 0], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\g ( len(s1) - i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [3, 8], [0], [1], [1], [], [], [1], [1, 0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= int(38.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [], [0, 2], [], [0], [2], [], [], [], [0], [2], [2], [], [0, 0], [], [], [], [], [5], [], [], [0, 4, 2, 0], [1, 2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not in2 in saveChr(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [], [], [1], [], [], [], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:int(1.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [1], [6], [2, 0, 2, 1, 0], [], [3, 2, 1, 0, 0, 2, 3, 0, 0, 0], [0, 1], [1, 1], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 5, 0, 10, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(( int(6.0) * i2 ), i0) == mod(max(i2, i1),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1], [5], [0, 2], [0], [2, 0, 1], [0], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( i2 + int(5.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [], [2], [], [2], [], [], [], [], [1], [0], [2, 0], [], [2, 2, 0, 1, 0], [0, 0], [], [2, 1], [], [5, 3], [], [], [4, 3, 0, 4, 0], [1, 3], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 2, 0, 2, 0, 2, 0, 0, 5, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveChr(( ( i2 * int(0.0) ) - i0 )) == (in2 + in0.lstrip())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 2, 0], [0, 0], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\ni0 = int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1, 1], [2, 0, 0, 2, 1, 0, 0], [1], [2, 2, 2, 0, 3, 1, 0, 2, 2, 3, 2, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0], [1, 3], [1, 2, 2], [0, 1, 1, 1], [2, 4], [], [], [4, 4, 0, 4, 0], [3, 3, 0], [5, 2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 7, 1, 16, 6, 2, 3, 4, 2, 0, 0, 5, 3, 2, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= divInt(mod(mod(i0,max(int(1.0), i0)),mod(( len(s2.strip().strip(getCharFromString(in1, ( i2 * i1 )))) * int(1.0) ),i0)),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [3, 8, 5], [1, 2, 2, 2, 0], [0, 0], [3, 1, 2, 0, 2, 3, 1, 0, 2, 0, 1], [0, 0, 0], [0, 2], [2, 0, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 5, 2, 11, 3, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = min(int(3.0), ( i2 * ( abs(int(8.0)) + i2 ) ))\\ni2 = ( i0 - int(5.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 4], [0, 0, 2, 1], [1], [3, 1, 2, 3, 3, 0, 1, 1, 0], [1], [3, 1, 1, 3], [1], [1], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= len(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 1], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni1 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 1, 1], [], [1, 1, 2, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 1], [0, 3, 2, 8, 5], [0, 0, 1, 1, 1, 0, 2, 1], [1, 1], [2, 0, 2, 0, 1, 1, 0, 3, 2, 2, 0, 0, 3, 1, 0, 1], [0, 1, 1, 0], [0, 1], [0, 0, 1, 2], [0, 0], [0, 3, 2], [1], [], [2, 0, 1], [], [], [0], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 8, 2, 16, 4, 2, 4, 2, 3, 1, 0, 3, 0, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i0 + divInt(i1,int(0.0)) )\\ni1 -= int(32.0)\\ns0 = in0[i1:min(divInt(( i0 * i2 ),max(int(8.0), i1)), int(5.0))]\\ns2 = \"\",\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [2], [], [0], [], [], [1], [], [1], [], [], [], [0, 1], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i1\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 0, 1], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0], [4, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1, 3], [0], [], [1, 2, 3, 1, 0, 1, 3], [1], [1, 1, 4], [], [0], [4, 4], [0, 1], [], [4, 1, 0], [1], [], [], [3, 1], [], [7], [], [7]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(int(1.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [1], [1], [0], [], [], [], [], [], [1, 1], [6, 2], [2, 0, 2, 1, 0, 0, 2], [], [3, 2, 0, 0, 2, 2, 3, 0, 0, 0, 1, 2, 3, 0, 0, 1], [0, 1, 0, 0], [1, 1, 1], [2, 2, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 7, 0, 16, 4, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(( i2 * i0 ), mod(( max(i2, i1) * i0 ),int(6.0))) \\g ( max(i0, i2) - int(2.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 1], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(21.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 1], [1], [2, 3, 0, 0, 0], [0], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( min(i1, i2) + i1 )\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [0], [], [], [1, 2, 2], [4], [1, 0], [0], [], [0], [], [], [0], [1, 1, 1], [1, 5, 5], [0, 2], [], [2, 3, 1, 0, 0, 1, 0, 1], [1], [0, 0], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 2, 0, 6, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = mod(min(int(1.0), i0),i2) \\le int(5.0)\\nb2 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [1], [], [1, 1], [4, 5], [1], [], [0, 1, 1], [], [], [], [], [3, 0, 2], [1], [], [2, 4, 2, 2, 0, 3, 1, 2, 0], [2, 0], [0], [2, 1, 2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 0, 0, 0, 2, 0, 0, 5, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s0[i1:][:int(4.0)].capitalize()[int(5.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 4], [2, 0, 0, 0], [1], [2, 1, 0, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(8.0),i0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3], [0], [4], [], [], [4, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(saveOrd(s2)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [1, 5], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 1, 0], [2], [0, 0, 2], [], [0], [], [], [1, 2], [2, 1], [1, 0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1], [0, 8, 9, 8, 5], [1, 2, 1, 0, 2, 1, 1, 2], [], [0, 0, 3, 1, 2, 1, 2, 2, 3, 3, 0, 3, 0, 3, 0, 0, 1, 3, 0, 2, 2, 0, 1, 1], [0, 1, 0, 0, 0, 1], [0, 1, 4, 0, 1, 2], [2, 0, 2, 1], [1, 1], [1, 1], [1], [], [0, 1], [], [], [], [0], [16], [], [], []], "fitness": 31, "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 == i2:{:\\nb1 = False\\nb2 = min(int(0.0), ( int(8.0) * mod(( max(saveOrd(s1), i1) + min(i0, max(i2, i1)) ),int(9.0)) )) \\g abs(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 2, 2, 3, 2, 0, 1, 0, 1, 0, 3, 3, 7, 0, 19, 3, 6, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [0], [1], [1], [], [], [1], [], [], [], [], [], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0], [3, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 0], [], [0], [], [], [0], [3], [0, 1], [0], [], [2], [], [], [], [0, 1, 1], [0, 9, 1], [2, 1], [], [2, 1, 1, 0], [1], [], [], [0], [2, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 3, 3, 1, 0, 4, 1, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1\\nb0 = not divInt(int(09.0),int(1.0)) \\ge i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [0], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [4], [], [], [4, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [0], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(9.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1, 1], [1, 1, 0], [], [0, 1, 0], [], [0], [], [], [0, 2, 1], [5], [0, 2], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0], [0], [0, 0, 3, 2, 2, 2, 2, 2, 1, 0, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [0, 0], [1, 0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [3, 8], [2, 1, 0], [0, 1], [1, 0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(38.0)\\ni1 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [5], [0, 0, 2], [0], [0], [2, 2], [], [], [], [1, 1, 1, 1], [6, 4, 3, 4], [1, 2, 2, 1], [], [2, 0, 1, 2, 3, 2, 0, 1, 2, 2, 2, 0, 0, 3, 2, 3, 3, 1], [1, 1, 1, 0, 1, 0], [4, 1, 4, 3], [0, 1, 1], [0, 0, 1], [0, 0], [], [], [4, 0, 2, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not not saveChr(divInt(i1,int(6.0))) in s0\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 3, 0, 1, 2, 0, 0, 0, 1, 1, 1, 0, 3, 1, 0, 0, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [], [], [], [0], [2], [1], [0], [], [], [], [], [], [], [], [1, 1, 1, 2], [0], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i1 == i1\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [8, 5], [1], [0], [1], [], [], [2], [1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(85.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 4, 2], [], [], [3, 4, 0, 0], [3], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in1.strip() + s2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0], [1], [2, 0, 0], [1], [], [1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= mod(i1,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [], [0], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [1, 1], [6, 0], [1, 1, 1, 1], [0], [2, 3, 2, 0, 1, 0, 3, 2, 0, 1], [0, 1, 0], [1, 2], [1, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 2, 2, 4, 1, 10, 3, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = ( max(mod(i1,int(6.0)), i1) - abs(( i1 - int(0.0) )) )\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [4], [1], [0], [], [], [], [], [], [1, 1, 1, 1], [6, 0, 1, 7], [1, 1, 0, 0], [], [3, 2, 2, 1, 0, 1, 0, 2, 1, 2, 1, 2, 0, 0], [1, 1, 1, 1, 1], [1], [], [0, 1, 0, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 0, 14, 5, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(divInt(mod(int(6.0),i1),int(0.0)), i1) \\le divInt(int(1.0),divInt(int(7.0),mod(i0,i0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [2], [1], [0], [], [], [], [], [], [0, 0, 1], [6, 8, 2], [2, 0, 2, 1, 0], [], [3, 2, 1, 0, 0, 2, 3, 0, 0, 0], [0, 1], [1, 1], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 5, 0, 10, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(( int(682.0) * i2 ), i0) == mod(max(i2, i1),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1, 0, 0, 1], [4, 8, 9, 3, 4, 9, 5], [0, 2, 0], [0, 0], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\ni0 = int(4893.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [], [], [1, 0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i1 \\l i0\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2, 2], [1], [2, 0, 0], [0], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( i2 + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 3, 9, 7, 1, 7, 3, 7, 5, 0, 4, 4, 1, 3, 6, 8, 5, 9, 4, 4, 0, 1], [2, 2, 1, 0, 2, 1, 2, 0, 0, 2, 0, 2, 2, 0, 1, 0, 2, 0], [0], [0, 2, 2, 3, 2, 2, 2, 3, 3, 2, 3, 3, 2, 3, 2, 0, 3, 0, 1, 3, 0, 1, 2, 3, 0, 0, 2, 2, 0, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 1, 3, 0, 1, 0, 0, 3, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 3, 1, 3, 3, 1, 2, 1, 3, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 3, 1, 3, 4, 1, 4, 3, 4, 0, 1, 2, 4, 3, 4, 4, 2, 1, 3, 1, 3, 2, 2], [2, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 5, 2, 0, 4, 5, 3, 1, 4], [1, 0, 0, 1, 1, 1, 1, 1], [], [1, 1, 2, 2, 1, 4, 2, 0, 0, 4, 0, 2, 1, 2, 4, 2, 1, 0, 0, 2, 1, 4, 0, 1, 0, 1], [3, 0, 0, 2, 1], [5, 3], [0, 2, 0, 0, 1, 0, 1], [3, 3, 0, 2, 0, 3, 2, 2], [20], [10], [5, 6, 4], [6, 24, 11]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i2\\ns0 = \"\"#\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [8], [1], [0], [2, 1, 3], [1], [4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 0, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = mod(int(8.0),saveOrd(s0.capitalize()))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [0, 2, 2], [0], [2, 0, 0], [0], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( i2 * i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0], [0], [0, 1], [0], [0], [], [], [1], [], [2, 2], [0], [1, 0], [], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 0], [1, 0, 0], [0], [0, 1, 3, 2, 1, 2, 3, 3, 2, 1, 3, 3, 1], [1, 0], [2, 2, 3, 2, 2], [0, 1], [1], [1, 2, 5, 1], [], [0], [4, 0, 0, 2, 4, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 3, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in saveChr(i1):{:\\nb1 = s2 not in in2\\ni0 = int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1], [6, 1], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(6.0) \\l int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 9, 6, 6, 4, 1, 6, 5, 3, 0, 5], [2, 1, 1, 2, 1, 2, 1, 2, 0, 1, 1, 2, 1, 1], [], [1, 2, 2, 2, 3, 1, 3, 1, 2, 2, 3, 2, 2, 1, 2, 0, 2, 0, 1, 3, 0, 2, 2, 2, 0, 3, 0, 1, 2, 2, 0, 2, 3, 0, 0, 3, 1, 0, 2, 1, 1, 0, 2, 2, 0, 3, 2, 2, 3, 0, 3, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 0, 4, 0, 0, 4, 2, 0, 2, 4], [1, 2, 1, 2, 1, 0, 1, 2, 1, 0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 0], [3, 0, 1, 5], [1], [], [4, 2, 0, 1, 0, 2, 0], [2], [], [0, 2], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 14, 0, 55, 20, 10, 12, 8, 4, 1, 0, 7, 1, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s0[int(5.0):( ( divInt(min(int(9.0), min(int(6.0), ( ( saveOrd(\"\"u\"\") - mod(( int(6.0) * mod(i2,mod(i1,int(4.0))) ),min(i1, ( ( ( i2 - min(i1, int(1.0)) ) * mod(( i2 - mod(saveOrd(s1),i1) ),i2) ) + abs(int(6.0)) ))) ) - i0 ))),( int(5.0) * int(3.0) )) - i1 ) + ( mod(i1,min(( divInt(abs(i2),saveOrd(in2[int(0.0):])) - int(5.0) ), i1)) - i1 ) )].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [0], [0, 2, 1], [0], [4], [3, 0], [1], [], [], [1, 1, 0, 1, 1], [9, 4, 9, 8, 8], [2, 1, 0], [], [1, 0, 0, 3, 2, 1, 3, 0, 3, 2, 1, 1], [1, 0], [0, 1, 3], [1], [1], [5], [], [], [4, 4, 0], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 5, 5, 3, 0, 12, 2, 3, 1, 1, 1, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( saveChr(int(9.0)).startswith(saveChr(i2)) or i1 \\l min(mod(int(4.0),max(i0, len(in2))), ( int(98.0) - int(8.0) )) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [3], [], [3], [], [], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [0, 1, 1], [], [0, 0], [], [], [1], [], [2], [], [1], [], [], [], [], [1, 1, 1, 1], [6, 3, 9, 6], [1, 0, 0, 0, 0, 1, 0, 0], [0, 0], [0, 3, 3, 1, 0, 2, 0, 0, 2, 1, 2, 0, 1, 3, 3, 0, 1], [0, 0, 0], [3, 4, 3, 3], [0, 1, 0], [], [1, 0, 3, 1, 1, 5], [1], [], [2, 0, 0, 4, 2, 4, 4, 4, 2, 0, 1, 0], [1, 1, 1, 0], [], [0, 0, 2], [3], [], [], [], [10]], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 8, 2, 17, 3, 4, 3, 0, 3, 0, 0, 10, 4, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s1[i1:len(s0)] not in saveChr(saveOrd(saveChr(int(6.0))[i0:( i0 + i0 )]))\\ni0 = ( int(3.0) - ( i1 + int(9.0) ) )\\ni0 = len(saveChr(len(getCharFromString(in0[i0:], int(6.0)))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [], [], [1], [], [], [], [], [5], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(2.0))\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [], [], [1, 2], [0], [0, 3], [], [3], [], [], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 == len(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [7, 9, 2], [0, 0, 2], [], [1, 2, 1, 0, 3, 1, 3, 0, 0], [0], [1, 2, 3], [2], [], [1, 5, 2, 3], [], [], [2, 3, 2, 0, 2, 2, 0, 0], [], [], [1, 2, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 9, 1, 2, 1, 0, 3, 0, 0, 7, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = (in2[int(7.0):] + s2[( int(9.0) * i0 ):][max(int(2.0), abs(i0)):])[:i2]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 2], [1], [0, 0], [], [], [0], [], [5], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 2, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i2\\nin2 = saveChr(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 0, 1], [8, 8, 3, 8, 1], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(88381.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [6, 0], [0, 1, 1, 0], [0], [2, 1, 3, 3, 0, 2, 1, 2, 0, 0], [1, 1, 1], [2, 1], [0], [1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 10, 3, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(int(6.0),abs(max(i1, mod(int(0.0),mod(i1,i0)))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [0, 9, 6, 9, 5, 6], [2, 2, 0, 0, 2, 0, 1, 2, 1, 1], [], [2, 3, 2, 1, 1, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 3, 2, 2, 3, 0, 2, 2, 3, 0, 0, 1, 3, 2, 3, 1, 0, 0, 0, 3, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 3, 2, 1, 3, 2, 3, 4, 2, 1, 0, 1], [2, 0, 0, 0, 0], [0, 1, 0, 1], [5, 5, 1, 2], [1, 1], [], [3, 0, 0, 4, 4, 1, 2, 0, 4, 2, 0, 2, 4, 1], [0, 3, 0, 2, 1], [0], [2, 0, 1], [1, 1], [], [17, 0], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (in2 + s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 2], [0], [0, 0, 2], [0], [5], [3, 0], [0], [], [], [1, 1], [9, 5], [1, 0], [], [2, 1, 2, 0, 1, 2, 3, 0, 3], [0, 1], [1, 1, 4], [0], [0], [0, 1], [], [], [4, 4, 0, 0], [1, 3], [3], [], [], [], [], [], []], "fitness": 31, "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( b2 and saveChr(( int(9.0) + divInt(i1,int(5.0)) )).endswith(s0.lstrip(s1)) )\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 3, 0, 1, 2, 1, 0, 0, 2, 2, 1, 0, 5, 2, 0, 1, 1, 2, 0, 0, 4, 2, 1, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [8, 2], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(82.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [0, 4, 0], [0, 1, 0, 2, 0], [], [3, 3, 0, 3, 2, 0, 1, 2, 1, 0, 0], [1, 1], [0, 0, 1], [], [0, 0], [5, 0, 4], [], [], [4, 2, 2, 0], [1], [], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 0, 11, 2, 3, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(min(min(i0, max(divInt(i1,int(0.0)), divInt(int(4.0),i0))), i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [1, 0, 1], [8, 9, 7], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(8.0) \\le i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i1\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1], [0, 0], [], [0, 0], [], [0], [], [], [1, 2, 2], [4], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [1, 5, 2], [0, 2], [], [2, 3, 1, 0, 3, 1, 0, 1], [0], [0, 0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( min(int(1.0), i0) + min(int(5.0), i2) ) \\le int(2.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 8, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [2], [], [], [], [], [], [], [], [], [1, 1], [9, 4], [1, 0], [0], [0, 1, 1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0, 0], [], [2], [1], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 6, 6, 4, 1, 6, 5, 4], [2, 1, 0, 2, 0, 0, 1, 2, 0, 0], [], [1, 2, 2, 2, 3, 1, 3, 1, 2, 1, 3, 2, 2, 1, 2, 0, 2, 2, 1, 3, 0, 0, 2, 2, 0, 3, 0, 1, 2, 2, 0, 2, 3, 0, 0, 3, 1, 0, 2, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], [3, 0, 4, 0, 0, 4, 1], [1, 2, 1, 2, 1, 0, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1], [5, 3, 5, 4], [1], [], [4, 2, 0, 1, 0, 0], [2], [], [0], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 9, 0, 38, 14, 7, 10, 4, 4, 1, 0, 6, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in0[int(8.0):( ( divInt(len(\"\"u\"\"),int(9.0)) - min(int(6.0), ( int(6.0) * saveOrd(in2) )) ) - ( mod(int(4.0),( i2 * mod(( int(1.0) - min(i1, i0) ),( ( i2 + min(i0, int(6.0)) ) - ( mod(i0,( saveOrd(in1) * i1 )) - i2 ) )) )) + max(int(5.0), i0) ) )].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [6, 2, 8], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(628.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [], [], [0, 0, 2], [], [3, 0, 2, 0, 0], [1], [2], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = abs(i0) \\g mod(i0,i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [1, 1, 1, 2], [1], [2, 3, 0, 3, 1, 0, 0], [0, 0], [0, 1], [1, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 7, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= ( min(i1, max(int(2.0), i1)) * i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [5, 7], [1], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(57.0)\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [5, 9], [2, 1, 2], [1, 1], [1, 3, 3, 0, 1], [], [3, 1], [1, 1], [], [], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 5, 0, 2, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(5.0)\\ni1 -= len(saveChr(max(i2, int(9.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [2, 2, 0, 1, 0, 0], [1, 0], [2, 2, 1, 1], [0], [0, 0, 0], [], [], [2], [], [0, 2], [], [0], [1], [], [0], [1], [1, 1, 1, 1], [6, 7, 8, 3], [1, 0, 2, 0, 2, 1, 0, 1], [1, 1, 0], [3, 3, 0, 2, 2, 2, 2, 2, 2, 3, 1, 3, 3, 0, 1, 2, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0], [2, 4, 3, 2], [1, 2, 0, 2, 2, 2], [0, 0, 0, 0], [4, 3, 0, 4, 0, 5, 4, 4], [], [0], [0, 0, 0, 4, 0, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 6, 6, 2, 4, 1, 3, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 3, 2, 3, 0, 2, 2, 0, 7, 0, 1, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif True:{:\\nloopBreak% = 0\\nfor in1 in in0:{:\\ns0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = in2\\n:}else:{:\\ni1 -= abs(saveOrd(in1.capitalize()))\\ni0 *= i2\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [], [3, 2, 0, 3, 0], [0], [2, 4], [1], [], [5, 5, 3, 4, 5], [], [], [4, 0, 0], [3, 0], [2], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2.strip()\\nin0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0, 0], [], [1, 0], [], [0, 0], [], [], [1], [3], [0, 1, 0, 2], [0], [3], [3, 2], [0], [], [], [1, 1, 1], [7, 6, 2], [0, 0, 2, 1], [1], [1, 1, 0, 0, 3, 0, 1], [], [0], [2], [], [2], [1], [], [4, 2, 1, 0], [0], [], [2], [3], [], [], [], [21]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [2, 3], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:i0].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [0, 0, 1, 1], [6, 7, 8, 8], [2, 0, 2, 1, 0], [], [3, 2, 1, 0, 2, 2, 3, 0, 0, 0, 1, 0], [0, 1, 0], [1, 1], [1, 2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 12, 3, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(( int(678.0) - i2 ), mod(( max(i0, i2) * i1 ),int(8.0))) == i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 6, 2, 0, 0, 4, 3, 0, 8, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [1], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 2, 0, 3, 2, 2, 3, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 1], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 8, 1, 24, 9, 2, 6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\nb0 = ( ( mod(int(0.0),( ( int(62.0) - int(00.0) ) * int(430.0) )) - i0 ) * i1 ) != ( i0 + divInt(i0,abs(mod(mod(max(int(8.0), i0),i2),int(44.0)))) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s0.capitalize()\\n", "other_info": {}, "test_fitness": 317, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [], [0, 0], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [2, 2], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\l int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0], [0], [2, 0, 0], [1], [], [1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(i1,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 0, 1], [1, 2], [0, 1], [], [0], [], [], [2], [5, 3, 5], [1, 1, 1], [0, 0, 0], [1], [], [], [], [0], [1, 1, 1, 0, 1, 0, 1], [2, 4, 7, 9, 7, 4, 3], [2, 1, 1, 1], [1], [0, 1, 1, 1, 2, 3, 1, 3, 3, 0, 0, 1], [0], [1, 4, 3], [1, 1], [], [1, 2], [], [], [4, 0, 4, 2, 0], [2, 2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 1, 7, 7, 4, 1, 12, 1, 3, 2, 0, 2, 0, 0, 5, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i2 != int(2.0):{:\\nloopBreak% = 0\\nwhile int(4.0) \\ge int(7.0):{:\\nb2 = ( max(int(97.0), saveOrd(s1.capitalize())) - len(s2[:i1].capitalize()) ) != i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 -= int(43.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(6.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [], [], [1], [], [], [], [], [2], [1], [], [4, 1, 4], [3, 1], [4], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 3, 2, 1, 0, 1, 1, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"F\"\".rstrip(saveChr(int(4.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0], [], [0, 0, 1], [], [0, 0], [], [], [1, 0, 1], [], [0, 0], [], [], [1, 0], [], [1], [], [], [], [2, 1], [0], [3, 0], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\nb0 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 0, 2, 0], [2, 1], [0, 2], [], [0, 0], [], [], [3], [4], [2, 0, 1], [0], [4], [1], [], [0], [0], [1, 1], [6, 7], [1, 0, 2, 2, 0], [], [0, 3, 0, 1, 3, 1, 0, 0, 0], [], [1, 3, 2], [], [], [5, 4, 0, 4, 5, 5], [], [], [2, 2, 0, 4, 4, 4, 4, 0, 0, 3, 2, 0, 0], [3, 2, 1, 1], [4], [0, 1, 0], [], [], [], [], []], "fitness": 43, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 0, 0, 1, 1, 3, 1, 1, 1, 0, 1, 1, 2, 2, 5, 0, 9, 0, 2, 0, 0, 4, 0, 0, 9, 4, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[:i1][max(i0, int(6.0)):len(saveChr(int(7.0)).capitalize().rstrip(saveChr(i2)))].startswith(in1):{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif i2 \\le i0:{:\\ns0 = in1\\n:}\\n", "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [0, 0], [], [0], [], [], [3, 2], [0], [1, 2, 2], [0], [0, 0], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 5, 1, 1, 9, 6, 6, 1, 2, 2, 0, 4, 7, 9, 2, 0, 0], [0, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 0], [0, 1], [1, 2, 3, 2, 1, 0, 1, 2, 1, 3, 3, 0, 0, 3, 1, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 1, 0, 2, 2, 2, 3, 3, 1, 1, 3, 3, 2, 0, 0, 3, 1, 2, 1, 0, 2, 1, 3, 3, 2, 1, 0, 3, 2, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0], [0, 3, 4, 2, 4, 1, 4, 1, 0, 2, 2, 0, 3, 1, 1], [2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0], [1, 1, 1, 1, 0, 1, 1], [3, 1, 4, 5, 2], [1], [], [2, 0, 4, 1, 4, 2, 2, 4, 4, 0, 4, 4, 0, 0, 2, 2, 0], [2, 0, 1, 3, 1, 1], [0, 2], [1, 1, 1, 2, 0], [1], [], [17], [], []], "fitness": 60, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 1, 3, 1, 2, 0, 0, 0, 1, 18, 18, 12, 0, 61, 17, 14, 10, 7, 5, 1, 0, 17, 6, 1, 5, 1, 0, 1, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) \\l ( min(( int(9.0) * i0 ), int(5.0)) + ( int(1.0) * len(in0[:saveOrd(\"\"r\"\".capitalize())]) ) ):{:\\nres0 = getCharFromString(saveChr(i1)[:i2][:abs(int(1.0))], i2) in s1.lstrip()\\n:}\\nb2 = saveChr(mod(int(9.0),i2)) in saveChr(( ( saveOrd(in1) + ( int(6.0) * max(mod(mod(int(6.0),int(1.0)),i1), ( mod(( saveOrd(in2) * max(int(2.0), int(2.0)) ),min(abs(divInt(i1,i2)), abs(int(0.0)))) * mod(int(4.0),i2) )) ) ) * mod(int(7.0),min(len(s2[( int(9.0) + i1 ):max(( int(2.0) * i2 ), int(0.0))][i2:]), int(0.0))) ))\\n", "other_info": {}, "test_fitness": 732}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1], [4, 7], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(4.0) \\l int(7.0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [2], [0, 0], [], [0, 0], [], [], [0, 3, 1], [3], [0, 0, 0, 2], [0], [0], [1, 2, 1], [], [1, 0], [], [], [], [2, 0], [], [0, 0], [], [], [], [], [4, 4], [], [], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 2, 0, 4, 0, 1, 3, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile False:{:\\nb0 = not True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = in1 in in1[i2:]\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3], [], [0, 2], [], [0], [2], [], [], [], [1], [2], [0], [], [1, 0], [], [], [], [], [5], [], [], [4, 4, 2, 0], [1, 2], [], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 4, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not saveChr(int(2.0)) in in2[i0:].capitalize()\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 0], [1], [0], [], [0], [], [], [3], [4], [1], [0], [], [], [], [], [0], [1, 1, 0, 1], [5, 0, 8, 7], [1, 2], [], [3, 3, 0, 1, 3, 0, 1, 1], [], [0, 1, 1], [], [], [1, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 8, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(max(i1, int(5.0)), max(i2, int(0.0))) \\le int(87.0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [], [0], [], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 2, 3], [4], [1], [0], [], [], [], [], [], [1, 1, 1, 1], [6, 4, 1, 7], [1, 1, 0, 0], [], [3, 2, 2, 1, 0, 1, 0, 2, 1, 2, 1, 2, 0, 3], [1, 1, 1, 1, 1], [1, 4], [], [0, 1, 1, 0, 1], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 14, 5, 2, 0, 5, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(divInt(mod(int(6.0),i1),int(4.0)), i1) \\le mod(int(1.0),divInt(int(7.0),mod(i0,saveOrd(in1))))\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [0], [1], [0], [], [], [], [], [], [1], [8], [2, 2, 0, 0], [1], [0, 2, 0, 0, 1], [1], [], [0, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 4, 1, 5, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i2\\nres0 = mod(i0,i0) \\l int(8.0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1, 0, 1], [0, 2, 1, 1], [2], [2, 0, 0], [], [0], [], [], [3, 1], [4], [1, 2, 0], [0], [4], [1], [], [0], [], [1], [8], [1, 0, 2, 1, 0, 2], [1, 0], [0, 1, 0, 0], [], [], [1], [], [4, 1, 0], [], [], [0, 4, 0], [1], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 4, 4, 1, 3, 0, 1, 0, 0, 2, 1, 3, 1, 1, 1, 0, 1, 0, 1, 1, 2, 0, 3, 0, 0, 0, 0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s1\\nloopBreak% = 0\\nwhile i1 \\le int(8.0):{:\\nres0 = saveChr(i0).startswith(s0)\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [], [0], [], [], [3], [], [2], [], [5], [], [], [], [], [1], [2], [2, 1], [1], [1, 0], [], [], [0], [], [2, 5], [], [], [0, 2, 0], [], [], [1], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(2.0)\\nres0 = s2.endswith(in2[:i1])\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [5], [1], [0], [], [], [], [], [], [1, 1, 1], [3, 9, 7], [2], [], [3, 3, 3, 3, 3, 2, 0, 1, 1, 1], [1], [0, 3, 0, 1, 3], [], [1], [4, 0], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 10, 1, 5, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(len(in1), min(max(len(s0), mod(i2,int(3.0))), int(9.0))) != int(7.0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [1], [0], [0], [], [1], [], [0], [], [1], [5], [], [], [3, 3, 1], [], [4, 4], [], [], [1, 4], [], [0], [2, 4, 0], [0], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = True\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [4], [1], [0], [], [], [], [], [], [1, 0, 1, 1], [6, 3, 1, 0], [1, 0, 2, 0, 2], [], [3, 0, 2, 2, 0, 1, 0, 2, 1, 2, 1, 2, 0, 0], [1, 1, 1, 1, 1], [4], [], [0, 1, 0, 0, 1], [], [], [], [2, 4], [1], [], [2], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 5, 0, 14, 5, 1, 0, 5, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = saveOrd(saveChr(i1)[divInt(mod(i0,int(6.0)),i2):]) \\le divInt(int(31.0),divInt(int(0.0),mod(i0,i2)))\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [5], [1], [0], [], [], [], [], [], [0, 1, 1], [6, 5, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(65.0) != int(3.0)\\n", "other_info": {}, "test_fitness": 683, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [2], [1, 0], [], [0, 0], [], [], [3], [2], [0, 0, 2, 1], [0], [5], [1, 3], [0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 4, 9, 5, 1, 8, 6, 7, 7, 7, 6, 5, 2, 8, 5, 8, 8, 0, 2, 8, 9], [1, 1, 1, 0, 1, 0, 0, 2, 1, 0, 0, 2, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0, 2], [1], [1, 3, 2, 0, 0, 1, 2, 3, 3, 2, 1, 3, 2, 2, 3, 2, 1, 2, 2, 0, 2, 1, 3, 3, 2, 1, 1, 0, 1, 3, 0, 1, 1, 2, 2, 1, 0, 1, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 3, 3, 1, 2, 3, 0, 3, 2, 1, 3, 3, 2, 2, 1, 1, 2, 2, 2, 0, 2, 3, 2, 0, 0, 0, 0, 3, 0, 1, 0, 1, 2, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], [3, 4, 1, 1, 1, 4, 4, 2, 3, 3, 1, 2, 4, 0, 0, 1, 2, 0], [0, 1, 0, 1, 0, 0, 0, 2, 2, 1, 2, 1, 2], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 2, 1, 2, 4, 4], [1, 1, 1, 1, 1], [], [3, 2, 0, 0, 0, 4, 1, 3, 4, 2, 0, 4, 4, 2, 2, 1, 4, 1, 4, 4, 2, 1, 4, 4, 4, 4, 4, 4, 4, 4, 1, 2, 0, 0], [0, 0, 1, 3, 2, 3, 1, 2, 0, 2, 2, 1, 0, 2, 3], [5, 4, 5], [2, 2, 1, 1, 0, 2, 1], [3, 3, 0, 0, 3], [15, 0], [], [], [6, 31, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 4, 1, 1, 2, 1, 1, 0, 21, 21, 21, 1, 82, 23, 18, 13, 11, 6, 5, 0, 34, 15, 3, 6, 5, 2, 0, 0, 3], "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile True:{:\\ni1 += int(5.0)\\nres0 = ( (s0[len(s2):] + s1).endswith(getCharFromString(\"\"#\"\", ( i1 - i1 ))) and int(4.0) == mod(saveOrd((getCharFromString(s2[max(( int(9.0) + max(( ( max(divInt(int(5.0),mod(( i0 - divInt(int(1.0),saveOrd(saveChr(saveOrd(\"\"`\"\"[:divInt(int(8.0),int(6.0))][:i1].strip(\"\"P\"\".capitalize()))))) ),int(7.0))), abs(i0)) + int(7.0) ) + int(7.0) ), ( mod(int(6.0),i0) + int(5.0) )) ), i2):], int(2.0)) + saveChr(len(\"\"A\"\"[i1:i0])).rstrip(getCharFromString(saveChr(int(8.0)).capitalize().capitalize(), ( int(5.0) * len(getCharFromString(\"\"\\\\\\\\\"\".strip(in1[i0:]).capitalize(), max(abs(int(8.0)), mod(saveOrd(in1),i2)))) )).capitalize()))),min(divInt(int(8.0),min(max(divInt(mod(int(0.0),int(2.0)),( ( mod(i2,( abs(( i0 * i2 )) - i1 )) * i2 ) - min(i0, int(8.0)) )), i2), int(9.0))), ( i1 * i2 ))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [2], [0, 2, 2], [0], [4, 2], [3], [1], [], [], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [1, 3, 3, 3, 6, 9, 4, 5, 7, 8, 2, 0, 8, 0, 8, 5, 3, 6, 0, 5], [1, 1, 1, 0, 0], [], [0, 0, 2, 1, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, 1, 0, 2, 1, 1], [0, 1, 1], [2], [1], [0, 0], [5, 5, 4, 1, 4, 5, 2, 1, 0], [1, 1, 0, 0, 1], [], [3, 0, 2, 0, 3, 2, 2, 2, 3, 3, 1, 3, 0, 0, 4, 0, 0, 4, 0, 2, 0, 3, 0, 2, 4, 4, 4, 2, 0, 0], [3, 0, 0, 1], [4], [1, 1, 1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 2], [], [8, 0, 20], [2, 1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 3, 0, 2, 1, 1, 0, 0, 13, 13, 4, 0, 14, 2, 1, 1, 1, 9, 1, 0, 26, 4, 1, 6, 1, 0, 1, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( (in2 + in2[:i1]).startswith((((\"\"i\"\" + (in1 + s1)) + in1.rstrip(in2))[:i1][:( int(133.0) - divInt(i1,i0) )][:int(369.0)] + getCharFromString(s2, int(4.0)))) or s1[:int(5.0)] == (s0 + getCharFromString(saveChr(abs(int(78.0))), int(2.0))[:int(08.0)]) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [0], [], [], [], [2], [], [0, 0, 2, 2], [], [1, 2], [2, 3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [9, 5, 3, 0, 4, 5, 8, 0], [1, 0, 1, 2, 1, 0, 1], [], [3, 2, 3, 3, 0, 2, 0, 3, 2, 2, 2, 2, 2, 1, 2, 0, 3, 0, 2, 3, 3, 1, 3, 1, 2, 1, 0, 1, 0, 2, 3, 2, 1, 2, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0], [4, 1, 4, 3, 4, 3, 2, 3, 3], [1, 0, 2, 2, 0], [1, 0, 1, 1, 1, 1, 0, 1], [1, 0, 2, 4, 4, 0, 2], [1, 1, 1, 1, 1, 0, 0, 1], [0], [0, 0, 0, 0, 3, 4, 3, 3, 4, 1, 4, 2, 1, 0, 1, 2, 2, 1, 4, 4, 1, 0, 4, 1], [2, 1, 2, 3, 1, 1], [0], [1, 0, 0], [3, 3, 2, 2, 0, 0, 3, 2], [0, 22], [], [2, 8, 7], [23, 23, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 4, 0, 2, 2, 1, 0, 0, 8, 8, 7, 0, 37, 13, 9, 5, 8, 7, 8, 1, 24, 6, 1, 3, 8, 2, 0, 3, 3], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s0:{:\\nb2 = not ( s2 not in in1 and in1 == (((saveChr(saveOrd(\"\">\"\")) + \"\">\"\"[:mod(max(saveOrd(s0), i1),divInt(i0,len(\"\"2\"\")))].capitalize()) + \"\"8\"\"[( ( ( mod(mod(int(9.0),mod(i1,saveOrd(saveChr(i2).lstrip()))),mod(len(\"\"A\"\"),abs(int(5.0)))) - len(s2) ) + int(3.0) ) * divInt(int(0.0),i1) ):int(4.0)][i0:( len(saveChr(mod(int(5.0),( i1 * int(8.0) )))) + int(0.0) )]).capitalize() + \"\"W&7\"\") )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 2], [], [], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [3, 2, 0], [1], [], [0, 1], [], [], [], [0], [2], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s2\\ns0 = \"\"C\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [3], [0], [0, 0, 2, 1], [0], [1], [2, 3], [1], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 1, 1, 2, 2, 0, 5, 5, 5, 7, 6, 9, 3, 9, 0, 8, 8, 8, 2, 0, 8, 5, 5, 2, 3, 3, 7, 2, 4], [1, 1, 1, 1, 0, 1, 2, 0, 2, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 2, 1, 2, 1, 1, 0, 2, 1], [], [1, 1, 3, 2, 0, 3, 0, 3, 2, 1, 2, 2, 2, 2, 2, 2, 0, 3, 2, 1, 2, 0, 3, 0, 2, 2, 0, 3, 1, 0, 2, 3, 1, 2, 3, 2, 3, 1, 3, 2, 2, 3, 0, 2, 0, 2, 2, 2, 1, 2, 0, 1, 3, 2, 0, 3, 1, 0, 2, 0, 2, 3, 3, 3, 2, 3, 3, 2, 1, 1, 0, 2, 1, 1, 2, 3, 0, 3, 1, 2, 0, 3, 3, 0, 1, 2, 3, 3, 1, 3, 3, 2, 2, 1, 0, 1, 1, 3, 1, 0, 3, 2, 2, 2, 1, 0, 3, 3, 0, 1, 3, 0, 3, 0, 3, 1, 2, 2, 0, 3, 3, 2, 3, 3, 1, 3, 0, 1, 0, 1, 1, 3, 3, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 3, 2, 0, 2, 4, 3, 2, 4, 4, 2, 1, 0, 1, 1, 2, 2, 2, 0, 0, 2, 4, 0, 3, 3, 4, 0, 1, 0, 3, 1, 1, 4, 2, 3, 0, 4, 1, 4, 0], [2, 2, 0, 0, 0, 0, 1, 0, 1, 1, 2, 2, 1, 2, 2, 1, 0, 2, 2, 0, 2, 2], [1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0], [4, 2, 4, 4, 5, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [], [2, 1, 1, 2, 4, 3, 4, 0, 4, 1, 1, 1, 1, 0, 0, 2, 0, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 0, 3, 0, 3, 4, 1, 2, 2, 3, 1, 1], [0, 2, 3, 2], [2], [1, 2, 1, 1, 1, 2, 0, 1, 1, 2, 2], [0, 2, 1, 2, 0, 2, 1, 2, 3, 1, 1, 3, 3, 2, 1, 2], [20, 14], [9, 13, 18, 16, 7], [4, 7, 1, 2, 6, 2], [26, 28, 19]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 1, 1, 2, 1, 0, 0, 29, 29, 28, 0, 136, 39, 40, 22, 17, 6, 16, 0, 39, 4, 1, 11, 16, 2, 5, 6, 3], "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not ( \"\"U\"\"[:int(6.0)] not in \"\"4j\"\" or int(1.0) \\l min(mod(i1,len(getCharFromString((in1.capitalize() + \"\"7\"\".strip()), i1)[abs(( int(1.0) * ( ( ( mod(( divInt(i1,min(mod(int(2.0),mod(i1,abs(i0))), ( divInt(i1,saveOrd(\"\"O\"\")) * int(2.0) ))) + i2 ),( len(\"\"1\"\") + int(0.0) )) + mod(abs(( saveOrd(\"\"n\"\") + int(5.0) )),saveOrd(s2)) ) - divInt(( abs(i0) + ( i2 - mod(mod(divInt(int(5.0),( i2 - int(5.0) )),max(mod(i0,min(int(7.0), i2)), ( i2 * ( max(max(abs(( abs(abs(( int(6.0) * int(9.0) ))) - i1 )), ( int(3.0) * int(9.0) )), mod(min(i1, min(int(0.0), mod(i0,abs(saveOrd(in1))))),i0)) * int(8.0) ) ))),mod(min(len(in1[:int(8.0)]), len(\"\"2\"\"[:saveOrd(\"\"[\"\"[:( ( int(8.0) - i0 ) + int(2.0) )])])),int(0.0))) ) ),min(int(8.0), i2)) ) * max(divInt(( divInt(int(5.0),i1) * min(len(\"\"s\"\"[i2:]), int(5.0)) ),max(i1, max(i2, saveOrd(\"\"q\"\"[:int(2.0)][:( ( i1 + abs(len(\"\"]\"\")) ) * ( min(saveOrd(in2), int(3.0)) * max(i1, int(3.0)) ) )][i0:int(7.0)])))), int(2.0)) ) )):])), saveOrd((s1 + (\"\":6\"\".capitalize() + (\"\"h\"\" + \"\"2\"\")[min(i2, i1):][int(4.0):])))) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [], [], [1], [], [], [], [], [3], [1], [], [4, 1, 4], [3, 1], [4], [], [2], [5], [], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 3, 2, 1, 0, 1, 0, 0, 1, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"4\"\".rstrip(saveChr(int(4.0)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [8, 1, 5, 5, 8, 7, 4, 6, 7, 5, 0, 5, 5, 4, 4, 8, 3, 0, 2, 8, 3, 9, 7, 5, 8], [0, 2, 2, 2, 0, 2, 1, 1, 0, 2, 0, 0, 0, 1, 2, 2], [1, 1], [3, 0, 1, 3, 2, 2, 3, 0, 1, 3, 3, 0, 3, 3, 3, 2, 3, 1, 0, 3, 3, 3, 3, 3, 0, 3, 2, 3, 2, 3, 2, 2, 0, 1, 3, 1, 2, 2, 1, 1, 1, 3, 1, 0, 2, 2, 0, 1, 3, 3, 1, 2, 2, 0, 0, 0, 0, 1, 0, 1, 2, 1, 3, 3, 1, 1, 1, 3, 3, 1, 3, 0, 2, 3, 3, 1], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0], [3, 2, 1, 0, 3, 4, 0, 1, 2, 2, 1, 1, 2, 4, 0, 3, 3, 2, 0, 2, 2, 0, 1, 1, 3, 1, 3, 4], [0, 0, 1, 0, 2, 1, 0, 2], [1, 0, 1, 1, 0, 1, 0, 1, 1], [1, 0, 0, 2, 5, 4], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [], [3, 1, 3, 3, 3, 2, 4, 1, 2, 3, 4, 4, 4, 2, 4, 0, 1, 4, 2, 1, 0, 2, 1, 1, 4, 1, 4, 1, 4, 3, 3, 0, 4, 3, 0, 1, 2, 0, 0], [3, 1, 1, 1, 0, 3, 2, 3, 1, 3], [3, 5, 1, 0], [1, 2, 0, 0, 1, 1], [2, 3, 2, 1, 0, 3, 1, 0, 1, 1, 2, 1, 1, 0, 0, 3], [19, 22, 14, 5], [16, 25, 21, 19, 9, 18], [7, 9, 3], [3, 18, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 16, 2, 76, 15, 28, 8, 9, 6, 16, 0, 39, 10, 4, 6, 16, 4, 6, 3, 3], "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += len((\"\"7\"\" + (((\"\"\"\".lstrip((saveChr(i2) + saveChr(int(8.0)))[abs(mod(( max(i2, int(1.0)) + min(len(saveChr(i2)), saveOrd(getCharFromString(s1, min(max(divInt(abs(int(5.0)),i0), abs(max(max(abs(saveOrd(\"\"9\"\")), i2), min(mod(len(\"\"q\"\"[mod(len(s0),( divInt(i1,int(5.0)) - abs(int(8.0)) )):mod(divInt(int(7.0),int(4.0)),int(6.0))].strip(\"\"T\"\"[:min(int(7.0), i1)])),( mod(i0,int(5.0)) + abs(abs(int(0.0))) )), mod(( i2 * i0 ),i0))))), i0))[int(5.0):i1])) ),int(5.0))):])[:( int(4.0) - min(max(int(4.0), int(8.0)), int(3.0)) )] + \"\"/zWvt3js\"\") + \"\"O\"\".capitalize()) + \"\"F\"\".rstrip())))\\ni2 += max(len(saveChr(int(0283975.0))), max(i2, ( len(((s0 + (s2 + \"\"`\"\").lstrip()) + in2[:saveOrd(in1)])) * int(8.0) )))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 2, 1, 1, 0, 0, 1], [0], [0, 0, 1, 0, 2, 2, 0, 0], [0], [0, 0, 0], [], [], [0, 3, 3, 2, 3], [0, 1], [1, 1, 0, 2, 2], [0, 0], [1, 4], [1], [], [1], [], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 3, 3, 0, 9, 6, 7, 2, 5, 1, 1, 2, 5, 7, 9, 6, 7, 3, 3, 4, 7, 5, 6, 0], [2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 2, 0, 2, 0, 1, 0], [1], [1, 1, 0, 0, 1, 3, 3, 3, 0, 2, 2, 0, 1, 2, 1, 1, 2, 2, 0, 2, 3, 3, 3, 3, 1, 1, 2, 3, 0, 2, 0, 1, 3, 3, 1, 3, 0, 0, 3, 1, 0, 2, 1, 0, 1, 1, 2, 0, 3, 1, 0, 2, 1, 2, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 3, 3, 1, 0, 1, 2, 4, 0, 4, 4, 3, 1], [1, 1, 1, 1, 2, 0, 2], [1, 1, 0, 1, 1, 0], [4, 0, 4, 3, 2, 5, 5, 3, 3, 4, 4, 2, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [0], [3, 0, 2, 1, 0, 3, 1, 2, 4, 0, 4, 0, 0, 0, 4, 1, 3, 2, 4, 2, 0, 3, 2, 4, 0, 0, 2, 4, 0, 1, 1], [0, 0, 0, 1, 3, 1], [1], [2, 1, 1, 0, 0, 0], [2, 2, 2, 2, 1, 1, 1, 2, 1, 3, 0, 3], [21], [15, 25, 8, 13], [5, 3, 8, 2, 8], [15, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 1, 8, 1, 3, 0, 0, 5, 2, 5, 2, 2, 1, 0, 1, 0, 24, 24, 16, 1, 56, 12, 13, 7, 6, 13, 12, 1, 31, 6, 1, 6, 12, 1, 4, 5, 2], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\l int(3.0)\\nres0 = i2 \\g i0\\ni1 -= int(30.0)\\nloopBreak% = 0\\nfor in1 in (s0 + \"\"538\"\"[min(len(in1), len((\"\"2\"\" + getCharFromString(in0, i0)[:( ( i0 - int(9.0) ) - ( int(6.0) - int(7.0) ) )]))):]):{:\\nres0 = False\\ns2 = getCharFromString(in2, mod(mod(i2,divInt(max(min(max(abs(int(2.0)), int(5.0)), mod(saveOrd(in2),i1)), mod(i2,int(1.0))),min(saveOrd(in0), int(1.0)))),saveOrd(getCharFromString(\"\"p\"\", i1))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = (saveChr(i0)[:len(in1[int(2579.0):i2])] + (in1.rstrip()[divInt(int(67.0),i0):int(33.0)] + s2))\\nb2 = saveChr(int(4.0))[( i2 * max(int(756.0), i0) ):( int(0.0) + ( i1 * i0 ) )] not in s0\\nres0 = \"\"zi\"\".startswith(\"\"8n,V+\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 2, 0, 0], [1, 1], [3, 2, 0, 3, 3, 0], [1], [2, 2, 4], [2, 2], [0], [], [0, 0, 1], [], [1], [], [], [], [1, 3, 1], [], [17, 18], [], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 6, 1, 3, 2, 1, 0, 3, 0, 1, 0, 0, 0, 3, 0, 2, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(divInt(i2,abs(saveOrd(\"\"r*s\"\"))))\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [0], [0], [1], [], [], [], [], [3], [0, 1], [], [1], [], [], [], [0, 2], [8], [], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"I3\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [1, 0, 2, 0], [2], [1, 0, 1], [], [0, 0], [], [], [0, 3], [], [0, 0], [], [], [1, 0], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [9, 7, 9, 3, 9, 3, 6, 4, 7, 1], [2, 2, 2, 1, 2], [0, 1], [3, 1, 1, 2, 3, 2, 1, 0, 2, 2, 1, 1, 1, 0, 3, 2, 0, 1, 1, 1], [0, 0, 0, 1, 0], [0, 4, 2], [1, 0, 0, 2, 2], [1], [5], [1], [], [2, 2, 2, 2, 2, 1], [], [], [1, 2, 1, 2, 2], [2], [], [], [1], []], "fitness": 9223372036854775807, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = min(int(9.0), int(7.0))\\nb0 = False\\nloopBreak% = 0\\nwhile res0:{:\\ni2 -= ( saveOrd(\"\"1\"\"[( int(9.0) + i2 ):][( mod(int(3.0),int(9.0)) + int(3.0) ):][:i1][abs(( i2 * int(6.0) )):][:int(4.0)]) * int(71.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 1, 0, 10, 10, 5, 2, 20, 5, 3, 5, 1, 0, 1, 0, 6, 0, 0, 5, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1, 1, 0, 1, 1], [2, 1, 0, 2, 1], [0, 1], [2, 1, 0], [0], [0], [], [], [1, 1], [2, 1], [0, 1, 1, 0, 0, 2], [0, 0], [1], [3, 3, 0], [0, 0], [], [0], [1, 1, 1, 1, 1], [1, 3, 9, 4, 5], [2, 2, 1, 1, 1, 1, 1], [1], [3, 2, 1, 0, 3, 0, 1, 2, 0, 1, 0, 3, 0, 1, 1, 3, 0, 2, 3, 3, 3], [0, 0, 0], [2, 4, 4, 4, 4, 2, 3], [1, 1, 0], [1], [3, 3, 2, 5, 4, 1, 1], [1, 1], [0], [2, 2, 2, 2, 0, 4, 1, 0, 0, 0, 4, 0, 4, 2, 4, 1, 4], [2, 2, 2, 3, 1, 1], [], [1, 0, 1, 2], [1, 3], [], [9], [], [9, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 10, 2, 2, 2, 0, 4, 1, 1, 8, 1, 0, 4, 1, 0, 1, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in0[abs(( int(1.0) - i2 )):][:saveOrd(\"\"j\"\".capitalize())][i2:int(3.0)][:( i1 - int(9.0) )]:{:\\ns2 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 2], [5], [0, 1, 0], [0], [], [3, 0], [1], [], [], [1, 1, 1], [9, 1, 2], [1, 2, 1, 2, 2], [], [2, 3, 1, 2, 2, 1, 3, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 0], [0, 1, 1, 0, 0, 1], [3, 4, 3, 3, 1], [0, 1, 2], [1, 1, 1], [1, 2, 1, 2, 3], [1], [], [2, 0, 2, 4, 4, 0, 0, 0, 3, 0, 1], [3, 3], [5, 0], [2, 1], [1], [], [13], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 2, 2, 5, 0, 18, 6, 5, 3, 3, 5, 1, 0, 11, 2, 2, 2, 1, 0, 1, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( ( len(s1[int(9.0):]) + mod(mod(int(1.0),saveOrd(s2.lstrip().strip(s1)[:i1])),( len(s2) - ( i2 * len((in0 + \"\"n\"\")) ) )) ) != max(mod(i1,i2), i2) or b2 )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 2, 1, 1, 2, 1, 0, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 2, 2, 0, 2, 1, 0, 2, 1, 2, 0, 0, 1, 1, 2, 1, 2, 1, 0, 2, 2, 1, 0, 0, 1, 2, 2, 1, 1, 1], [1, 2, 1, 0, 1, 1, 0, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 2, 2, 0, 2, 1, 0, 2, 2, 0, 1, 0, 2, 2, 2, 0, 1, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 1, 2, 0, 1, 1, 2], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 0, 2, 1, 2, 1, 0, 3, 0, 0, 0, 3, 0, 1, 1, 2, 0, 2, 2, 3, 1, 3, 0], [5, 2, 0, 5, 2, 1, 0, 1, 5, 1, 3, 1, 1, 1, 4], [0, 2, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 2, 1, 0, 0, 0, 1, 0, 2, 0, 1, 2, 2, 0, 0, 2, 2, 1, 0, 2, 0, 0, 1, 2, 2, 1, 0, 2, 0, 2, 1, 0, 0, 2, 0, 0, 0, 0, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 5, 2, 0, 5, 0, 0, 0, 3, 5, 1, 5, 5, 1, 3, 1, 4], [0, 3, 3, 0, 0, 1, 0, 0, 2, 1, 0, 0, 1, 1, 0, 3, 0, 3, 1, 1, 1, 2, 2, 2, 2, 2, 3, 0, 1], [0, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 7, 8, 3, 4, 3, 1, 6, 4, 5, 5, 6, 8, 6, 6, 4, 3, 4, 5, 0, 8, 3, 6, 1, 7, 3, 1, 6, 8, 0, 5, 9, 5, 7, 3, 7, 0, 6, 4, 2, 8, 1, 8, 4, 7, 6, 3, 9, 8, 7, 1, 4, 1, 4, 4, 9, 7, 7, 6, 0, 4, 2, 4, 5, 0, 6, 8, 6, 3, 5, 9, 0, 6, 2, 8, 7, 1, 1, 2, 7, 4, 6, 0, 2, 8, 1, 2, 2, 1, 6, 3, 4, 0, 7, 7, 6, 5, 0, 9, 5, 7, 1, 5, 9, 5, 0, 2, 1, 6, 6, 1, 8, 3, 3, 8, 3, 2, 0, 4, 0, 9, 2, 5, 7, 3, 3, 7, 5, 1, 0, 0, 1, 8, 6, 0, 7, 4, 3, 5, 7, 6, 4, 9, 3, 0, 5, 0, 3, 3, 9, 2, 2, 7, 0, 7, 1, 7, 8, 9, 5, 3, 2, 8, 4, 6, 6, 4, 1, 2, 4, 3, 7, 1, 5, 3, 3, 5, 4, 5, 8, 3, 1, 4, 7, 6, 5, 7, 4, 1, 7, 1, 4, 2, 6, 2, 2, 1, 8, 4, 6, 8, 7, 8, 0, 0, 8, 9], [2, 1, 1, 1, 0, 0, 2, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 2, 1, 1, 1, 2, 0, 2, 0, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 2, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 2, 1, 0, 2, 1, 0, 1, 2, 1, 2, 1, 2, 2, 0, 0, 2, 0, 1, 0, 0, 1, 2, 0, 0, 1, 0, 2, 1, 0, 1, 0, 0, 2, 0, 1, 2, 0, 1, 1, 0, 0, 1, 0, 0, 2, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 2, 2, 1, 2, 0, 0, 1, 2, 0, 1, 1, 1, 0, 0, 1, 2, 2, 1, 0, 1, 1, 2, 2, 2, 0, 0, 1, 1, 0, 2, 0, 0, 1, 1, 2, 1, 2, 1, 2, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [3, 3, 3, 3, 3, 2, 0, 1, 1, 1, 0, 2, 2, 1, 0, 3, 1, 0, 0, 2, 3, 2, 2, 2, 1, 0, 3, 2, 3, 2, 3, 1, 2, 0, 0, 3, 2, 3, 3, 0, 2, 0, 2, 2, 1, 2, 1, 2, 2, 3, 3, 0, 3, 3, 2, 3, 3, 0, 2, 1, 2, 3, 2, 3, 2, 3, 0, 1, 1, 0, 0, 2, 2, 3, 1, 3, 2, 0, 3, 0, 2, 1, 2, 2, 0, 0, 3, 1, 2, 3, 2, 2, 2, 3, 1, 1, 0, 1, 2, 0, 0, 1, 2, 1, 2, 3, 2, 2, 1, 1, 1, 0, 1, 0, 2, 3, 2, 3, 2, 2, 1, 2, 3, 1, 3, 1, 1, 0, 3, 3, 0, 0, 0, 3, 2, 0, 3, 0, 3, 0, 2, 3, 2, 3, 3, 0, 2, 3, 0, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0, 0, 2, 0, 1, 2, 2, 1, 0, 3, 2, 1, 0, 1, 0, 2, 1, 0, 1, 1, 2, 2, 3, 1, 1, 1, 3, 3, 1, 2, 0, 2, 1, 2, 2, 1, 3, 1, 1, 3, 3, 3, 3, 1, 1, 1, 0, 1, 2, 3, 1, 1, 0, 2, 3, 2, 1, 1, 0, 1, 2, 1, 3, 1, 3, 2, 1, 2, 3, 0, 0, 1, 2, 1, 0, 3, 1, 3, 0, 2, 3, 2, 3, 3, 3, 2, 0, 0, 3, 1, 2, 2, 1, 3, 2, 0, 3, 2, 3, 1, 2, 0, 2, 0, 1, 1, 2, 2, 1, 0, 3, 1, 2, 3, 3, 3, 0, 3, 1, 1, 1, 3, 0, 2, 3, 2, 1, 1, 1, 0, 1, 1, 0, 3, 0, 3, 1, 1, 2, 0, 1, 0, 2, 0, 1, 1, 1, 1, 2, 3, 0, 3, 0, 2, 0, 3, 1, 1, 3, 1, 2, 0, 1, 0, 3, 3, 2, 1, 0, 0, 1, 0, 3, 3, 2, 2, 1, 3, 1, 0, 0, 1, 1, 3, 2, 3, 1, 2, 0, 3, 2, 0, 0, 0, 1, 2, 0, 1, 1, 3, 0, 3, 2, 3, 2, 1, 3, 2, 3, 3, 3, 1, 2, 2, 3, 3, 1, 2, 2, 0, 3, 3, 2, 1, 2, 2, 2, 3, 1, 0, 1, 1, 2, 0, 3, 1, 0, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 0, 3, 0, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, 0, 3, 2, 3, 3, 2, 0, 1, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 1, 1, 0, 1, 1, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 3, 1, 0, 0, 2, 2, 0, 3, 1, 2, 3, 2, 1, 2, 3, 1, 3, 3, 3, 3, 0, 1, 3, 2, 1, 1, 1, 2, 3, 1, 0, 2, 3, 3, 2, 1, 2, 1, 3, 2, 1, 2, 0, 0, 2, 2, 2, 2, 0, 2, 1, 1, 1, 3, 0, 2, 2, 2, 0, 1, 2, 0, 1, 1, 1, 2, 3, 2, 2, 2, 3, 3, 3, 2, 3, 0, 3, 1, 1, 2, 2, 2, 1, 1, 2, 0, 0, 1, 0, 2, 3, 1, 3, 2, 1, 1, 0, 2, 0, 3, 3, 2, 3, 3, 2, 2, 3, 2, 2, 0, 1, 0, 3, 2, 0, 3, 0, 3, 3, 3, 2, 1, 0, 0, 3, 1, 1, 3, 3, 2, 0, 0, 0, 1, 2, 3, 3, 0, 1, 2, 3, 0, 0, 0, 3, 2, 1, 3, 3, 2, 0, 2, 3, 3, 1, 2, 2, 3, 2, 0, 0, 2, 1, 1, 2, 2, 3, 3, 3, 0, 1, 3, 1, 2, 1, 1, 2, 2, 0, 3, 0, 1, 3, 0, 1, 1, 1, 2, 1, 2, 1, 3, 1, 1, 2, 0, 3, 1, 2, 1, 0, 0, 2, 3, 3, 2, 0, 1, 3, 1, 0, 3, 3, 2, 3, 3, 0, 0, 2, 1, 3, 1, 1, 1, 2, 3, 0, 2, 2, 0, 3, 3, 3, 3, 0, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 3, 3, 2, 0, 3, 1, 3, 3, 1, 1, 3, 0, 0, 2, 1, 2, 0, 0, 0, 2, 1, 3, 1, 3, 2, 1, 2, 2, 2, 3, 2, 2, 0, 1, 2, 1, 3, 2, 2, 0, 3, 0, 0, 2, 0, 2, 1, 3, 0, 3, 2, 0, 1, 0, 3, 3, 3, 3, 3, 1, 3, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 2, 3, 1, 1, 1, 1, 3, 2, 0, 2, 3, 2, 1, 3, 3, 0, 3, 2, 3, 3, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0], [2, 0, 2, 2, 2, 4, 3, 2, 2, 0, 1, 1, 4, 4, 0, 2, 0, 3, 0, 1, 1, 4, 0, 4, 0, 0, 2, 2, 2, 2, 3, 0, 4, 4, 2, 4, 1, 1, 0, 3, 4, 0, 1, 1, 0, 3, 1, 4, 2, 3, 0, 3, 1, 1, 2, 3, 0, 3, 0, 2, 0, 1, 1, 3, 4, 3, 3, 0, 0, 0, 3, 0, 0, 4, 3, 2, 4, 2, 1, 2, 1, 2, 4, 0, 0, 1, 1, 1, 2, 3, 3, 3, 4, 2, 2, 4, 2, 0, 3, 2, 0, 3, 0, 2, 4, 1, 1, 2, 2, 2, 0, 0, 4, 0, 4, 0, 1, 4, 2, 4, 2, 3, 0, 0, 0, 3, 0, 2, 0, 4, 2, 2, 3, 3, 1, 2, 2, 2, 1, 3, 4, 3, 4, 2, 4, 1, 4, 3, 0, 3, 1, 3, 3, 2, 4, 1, 2, 4, 2, 3, 3, 0, 4, 2, 0, 2, 4, 2, 2, 4, 1, 2, 2, 2, 4, 1, 1, 4, 3, 2, 1, 4, 0, 2, 1, 0, 3, 2, 4, 2, 1, 3, 3, 4, 3, 2, 0, 1, 2], [2, 0, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0, 1, 1, 2, 0, 0, 1, 1, 2, 0, 1, 2, 2, 2, 0, 2, 2, 1, 0, 2, 1, 2, 0, 0, 1, 1, 2, 2, 0, 1, 0, 2, 0, 0, 0, 1, 2, 1, 2, 2, 0, 2, 2, 2, 2, 0, 1, 2, 1, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 2, 2, 0, 2, 1, 2, 2, 0, 2, 0, 2, 0, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 0, 1, 1, 2, 2, 1, 2, 0, 1, 2], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [1, 1, 2, 1, 3, 0, 3, 4, 4, 5, 1, 3, 3, 3, 3, 3, 1, 0, 1, 1, 2, 5, 1, 4, 3, 2, 2, 3, 3, 1, 3, 3, 4, 5, 0, 3, 0, 4, 5, 3, 1, 0, 3, 5, 5, 3, 5, 1, 2, 2, 0, 3, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0], [4, 2, 1, 4, 2, 2, 1, 1, 1, 0, 1, 4, 4, 1, 2, 1, 2, 0, 0, 2, 0, 1, 1, 2, 4, 0, 4, 1, 4, 2, 4, 2, 1, 0, 0, 4, 1, 0, 4, 0, 4, 4, 1, 3, 1, 2, 1, 4, 2, 4, 2, 0, 1, 4, 2, 0, 1, 4, 1, 2, 2, 1, 2, 4, 1, 2, 0, 1, 0, 1, 1, 0, 0, 2, 0, 4, 1, 2, 2, 1, 0, 2, 2, 2, 1, 1, 4, 1, 2, 1, 2, 1, 2, 1, 1, 2, 0, 1, 2, 4, 1, 4, 4, 1, 1, 1, 4, 1, 0, 1, 4, 0, 2, 1, 0, 4, 2, 0, 1, 2, 2, 1, 1, 1, 4, 4, 0, 1, 4, 4, 1, 2, 0, 2, 4, 0, 0, 2, 0, 2, 4, 2, 2, 0, 4, 4, 1, 1, 0, 2, 1, 4, 4, 4, 1, 4, 2, 2, 4, 2, 4, 2, 1, 0, 1, 1, 4, 2, 2, 4, 1, 4, 4, 0, 2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 3, 2, 0, 1, 0, 1, 1, 2, 1, 0, 0, 2, 2, 4, 3, 1, 1, 1, 1, 2, 3, 0, 4, 1, 4, 2, 0, 1, 2, 4, 0, 2, 4, 2, 2, 2, 0, 4, 4, 2, 2, 4, 2, 1, 0], [3, 0, 2, 3, 1, 2, 0, 2, 3, 3, 3, 1, 1, 1, 1, 3, 1, 2, 2, 3, 1, 2, 3, 3, 3, 0, 2, 0, 2, 3, 0, 1, 0, 1, 2, 3, 2, 2, 2, 3, 1, 2, 3, 1, 1, 2, 3], [3, 5, 2, 2, 4, 4, 2, 5, 5, 5, 1, 4, 1, 0], [2, 0, 2, 2, 2, 2, 1, 2, 1, 0, 2, 2, 1, 0, 2, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 2, 2, 2, 0, 2, 0, 0, 2, 1, 2, 2, 2, 1], [2, 3, 2, 3, 0, 0, 1, 0, 2, 1, 1, 0, 2, 2, 0, 0, 2, 0, 2, 1, 1, 1, 2, 0, 3, 1, 3, 3, 0, 1, 2, 3, 2, 0, 3, 1, 0, 0, 2, 1, 1, 0, 2, 3, 1, 2, 0, 2, 1, 3, 3, 3, 0, 0, 3, 0, 2, 2, 2, 0, 1, 3, 0, 2, 3, 1, 2, 3, 3, 3, 0, 3, 3, 1, 2, 0, 1, 1], [8, 2, 17, 22, 9, 2, 18, 19, 23, 7, 15, 0, 2, 15, 25, 25, 17, 15, 23, 22, 9], [13, 13, 13, 0, 18, 16, 12, 5, 25, 12, 10, 15, 20, 11, 0, 19, 20, 7], [0, 7, 6, 8, 4, 8, 5, 8, 4, 8, 2, 0, 1, 9, 6, 9, 3, 3, 3, 6], [22, 27, 7, 28, 21, 0, 9, 29, 17, 19, 3, 29, 30, 2, 5, 0, 4, 8, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 44, 44, 26, 18, 2, 12, 0, 0, 16, 11, 38, 11, 10, 17, 3, 4, 12, 95, 95, 77, 3, 341, 87, 86, 33, 54, 29, 42, 2, 109, 23, 8, 28, 42, 13, 11, 11, 7], "tree_depth": 96, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif res0:{:\\nloopBreak% = 0\\nwhile \"\"0\"\"[abs(min(abs(abs(abs(( i2 * int(4.0) )))), int(0.0))):].lstrip(getCharFromString(\"\"=\"\"[int(7.0):][i1:divInt(( int(8.0) + i1 ),saveOrd(\"\"7\"\"))], int(34.0))) == \"\"\\\\\\\\\"\":{:\\nb2 = ( ( b0 and b2 ) and i1 != i0 )\\nif divInt(len(s1),( mod(( int(3.0) + i0 ),abs(divInt(abs(( min(int(1.0), mod(i2,i0)) - max(divInt(max(saveOrd(\"\"I\"\"), i1),( i1 + ( ( int(6.0) - mod(int(4.0),( ( saveOrd(\"\"C\"\".strip(\"\"n\"\"[min(i1, abs(min(mod(len(s1[min(i0, divInt(int(5.0),mod(max(( max(mod(saveOrd(s2),i0), int(5.0)) + int(6.0) ), i0),i0))):]),divInt(divInt(min(int(8.0), saveOrd(s1[( i2 + min(i1, divInt(int(6.0),divInt(divInt(i2,i1),min(int(6.0), divInt(abs(mod(mod(( abs(int(4.0)) * int(3.0) ),i0),int(4.0))),divInt(i1,i2)))))) ):])),int(5.0)),mod(int(0.0),divInt(abs(divInt(mod(int(8.0),int(3.0)),int(6.0))),i1)))), int(1.0)))):]).capitalize()) + i1 ) - ( abs(( len(\"\"R\"\") + divInt(mod(int(7.0),( min(int(3.0), saveOrd(\"\"6\"\")) - int(1.0) )),int(6.0)) )) + i1 ) )) ) - saveOrd(saveChr(abs(i2))[:i0]) ) )), i2) )),saveOrd(in0)))) - mod(i0,max(i2, max(i1, mod(min(mod(len(\"\"n\"\".capitalize()),saveOrd(getCharFromString(\"\"n\"\"[:i2].capitalize()[( min(i2, i2) * int(8.0) ):], int(0.0)))), max(max(divInt(i1,int(5.0)), int(9.0)), i1)),i1)))) )) == ( i1 + int(5.0) ):{:\\nloopBreak% = 0\\nfor s0 in in0:{:\\nif mod(( int(7.0) + i2 ),min(( int(3.0) - i2 ), int(7.0))) \\l i2:{:\\nif False:{:\\nb1 = mod(int(0.0),i0) != int(6.0)\\n:}else:{:\\nloopBreak% = 0\\nfor in1 in in1:{:\\nif int(4.0) == ( ( len(\"\"W\"\".strip()) - int(2.0) ) * int(8.0) ):{:\\nif in2.endswith(s1.strip()):{:\\nin0 = saveChr(int(1.0)).rstrip(\"\"8\"\")\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin0 = (\"\"4J\"\" + \"\"C8S\"\"[max(saveOrd(saveChr(int(8.0))), ( i0 + ( int(4.0) - mod(( int(7.0) * abs(int(6.0)) ),int(3.0)) ) )):len(saveChr(min(len(in0[max(int(9.0), int(8.0)):]), int(7.0)))[i1:])])\\n:}else:{:\\nloopBreak% = 0\\nwhile int(1.0) \\g divInt(max(int(4.0), int(1.0)),i1):{:\\nloopBreak% = 0\\nwhile b2:{:\\nb1 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin0 = \"\"5a\"\"\\nloopBreak% = 0\\nwhile not mod(abs(( int(4.0) * int(4.0) )),i1) \\l int(9.0):{:\\ni0 = divInt(int(7.0),len(saveChr(int(7.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = True\\nif in0[:min(divInt(int(6.0),mod(len(\"\"s\"\"),i0)), i1)] == \"\"q\"\".rstrip(\"\"8\"\"[int(0.0):][divInt(int(4.0),i0):min(int(2.0), abs(i1))]):{:\\ns1 = saveChr(mod(min(( max(max(len(\"\"T\"\"), ( i0 * i0 )), saveOrd(s0[int(4.0):])) + divInt(divInt(int(5.0),len(\"\"$\"\")),divInt(i0,len(s1))) ), mod(min(int(0.0), mod(i2,( i2 * int(6.0) ))),int(8.0))),divInt(divInt(int(6.0),i0),min(int(3.0), mod(min(len(\"\"m\"\"), min(i1, min(int(5.0), int(9.0)))),int(0.0))))))[:saveOrd(\"\"]\"\")]\\n:}else:{:\\nloopBreak% = 0\\nwhile b0:{:\\nif i2 \\g ( len(s1) * ( int(6.0) - int(2.0) ) ):{:\\nloopBreak% = 0\\nwhile s2 in in2[:int(8.0)]:{:\\nloopBreak% = 0\\nwhile \"\"<\"\".capitalize().endswith(\"\"X\"\"[i2:int(7.0)][int(1.0):i2]):{:\\nif b0:{:\\nif False:{:\\ns1 = in1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = \"\"f\"\"[abs(i0):saveOrd(\"\"4\"\")][:int(1.0)][int(2.0):divInt(i0,int(7.0))] in \"\"\"\".capitalize()\\n:}else:{:\\ni0 = i1\\n:}\\nif \"\"8\"\"[:( i1 + int(4.0) )] in \"\"H\"\"[int(6.0):int(0.0)]:{:\\nloopBreak% = 0\\nwhile int(2.0) != mod(abs(i0),max(i0, divInt(i1,abs(int(8.0))))):{:\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin0 = \"\"&\"\"[int(1.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile \"\"z\"\" in s2[:max(int(2.0), mod(i0,int(2.0)))]:{:\\nloopBreak% = 0\\nwhile b0:{:\\ns2 = \"\"P\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile ( i1 \\g abs(saveOrd(\"\"A\"\".strip()[mod(int(1.0),i0):])) or saveChr(i0) != \"\"2\"\".capitalize() ):{:\\nloopBreak% = 0\\nwhile \"\"m\"\".endswith(\"\"k\"\"):{:\\nin0 = \"\"C\"\".strip(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(6.0) \\ge i1:{:\\nb1 = b1\\n:}\\ni1 = min(min(( mod(int(3.0),max(int(4.0), i0)) * i1 ), int(0.0)), int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [0], [], [0], [], [], [1], [], [2, 0, 0, 2], [], [0, 5], [3, 1], [1], [1], [0], [1, 1, 1], [4, 1, 7], [2, 2], [], [2, 1, 0, 3, 1, 0], [0], [3], [0], [], [0, 0], [1, 1], [], [2, 1, 2, 4, 4, 4, 0, 0, 3, 4, 1], [1, 2, 2, 1], [], [1, 2], [0, 1], [12], [15], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 4, 0, 2, 2, 1, 1, 1, 2, 2, 2, 0, 6, 1, 1, 1, 0, 2, 2, 0, 11, 4, 0, 2, 2, 1, 1, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif \"\"M\"\"[:( int(4.0) + i2 )] in saveChr(len(s0.capitalize().capitalize()))[int(1.0):]:{:\\nb1 = ( False or s0.endswith((saveChr(i2) + \"\"p\"\")) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1], [2, 1, 2, 2, 0, 0, 2, 0, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 0, 0, 1, 2, 2, 1, 0, 2, 2, 0, 1, 0, 2, 2, 1, 1, 0, 2, 0, 0, 2, 2, 1, 1, 0, 2, 1, 1, 2, 0, 1], [1, 2, 0, 0, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 2, 0], [0, 2, 1, 2, 2, 2, 1, 1, 0, 2, 1, 2, 2, 1, 0, 1, 1, 2, 2, 0, 0, 0, 0, 1, 2, 0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 3, 3, 3, 3, 0, 2, 3, 3, 2, 3, 1, 1], [3, 1, 2, 2, 0, 1, 0, 0, 1, 2], [2, 2, 2, 2, 2, 1, 0, 2, 2, 0, 1, 1, 2, 1, 0, 2, 2, 1, 1, 0, 1, 2, 2, 2, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 3, 3, 2, 2, 2, 0, 1, 1, 2, 2, 5], [0, 0, 2, 0, 3, 0], [0], [], [0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [6, 5, 8, 5, 3, 0, 4, 2, 4, 2, 0, 8, 0, 8, 5, 0, 2, 0, 0, 6, 4, 6, 5, 2, 0, 5, 2, 4, 0, 0, 7, 1, 4, 6, 7, 8, 6, 1, 5, 4, 5, 6, 9, 3, 7, 1, 8, 4, 0, 7, 4, 2, 2, 1, 8, 8, 7, 2, 4, 5, 8, 8, 6, 3, 2, 4, 0, 2, 0, 9, 4, 8, 6, 3, 0, 3, 2, 4, 8, 3, 1, 5, 2, 7, 1, 6, 6, 1, 9, 8, 0, 3, 1, 2, 5, 6, 6, 2, 6, 3, 0, 0, 7, 6, 9, 9, 2, 1, 1, 3, 2, 0, 6, 8, 5, 9, 2, 6, 8, 4, 3, 6, 5, 7, 6, 4, 0, 7, 5, 9, 9, 7, 7, 3, 9, 8, 6, 6, 3, 5, 9, 1, 3, 9, 4, 8, 9, 9, 0, 5, 5, 2, 0, 7, 8, 3, 1, 6], [2, 1, 0, 0, 1, 0, 2, 2, 1, 2, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 1, 2, 2, 1, 0, 2, 0, 2, 0, 2, 0, 1, 2, 1, 1, 0, 2, 2, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 1, 1, 2, 2, 0, 1, 2, 1, 1, 2, 1, 1, 2, 2, 0, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 2, 0, 1, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 2, 1, 1, 0, 0, 0, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 1, 2, 1, 0, 1, 0, 2, 0, 2, 0, 1, 2, 2, 1, 2, 1], [1, 1, 1, 1, 1, 0, 0, 0, 0], [3, 0, 0, 3, 1, 0, 0, 0, 0, 3, 3, 3, 2, 1, 2, 2, 1, 3, 3, 2, 1, 1, 1, 0, 1, 1, 0, 1, 3, 3, 1, 2, 2, 1, 0, 0, 3, 0, 1, 0, 0, 2, 3, 0, 0, 1, 3, 3, 3, 2, 0, 0, 3, 3, 1, 1, 1, 3, 2, 0, 3, 0, 3, 3, 1, 2, 3, 1, 0, 1, 0, 2, 0, 1, 0, 2, 2, 1, 3, 2, 0, 0, 3, 0, 2, 1, 0, 2, 3, 2, 2, 1, 1, 3, 2, 3, 3, 3, 1, 2, 0, 3, 3, 2, 3, 3, 0, 0, 3, 2, 1, 3, 0, 1, 3, 0, 1, 1, 2, 1, 2, 1, 2, 1, 1, 0, 2, 0, 3, 3, 2, 3, 2, 0, 0, 2, 1, 1, 0, 1, 0, 3, 3, 2, 0, 3, 2, 0, 3, 1, 1, 2, 3, 3, 0, 3, 0, 0, 2, 0, 2, 1, 1, 1, 1, 1, 2, 2, 3, 0, 1, 1, 2, 2, 2, 1, 3, 0, 3, 0, 1, 0, 3, 1, 0, 3, 2, 2, 3, 1, 0, 2, 1, 0, 3, 0, 2, 2, 3, 2, 3, 0, 3, 0, 3, 3, 1, 1, 1, 2, 0, 1, 3, 2, 0, 0, 3, 3, 2, 3, 3, 0, 2, 0, 3, 2, 2, 1, 2, 2, 0, 0, 3, 1, 0, 3, 1, 2, 3, 3, 1, 1, 2, 0, 1, 1, 3, 2, 1, 2, 2, 3, 1, 0, 1, 0, 2, 2, 3, 2, 1, 2, 0, 0, 2, 1, 3, 2, 3, 2, 1, 0, 3, 2, 2, 2, 1, 1, 1, 3, 3, 0, 3, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 3, 3, 0, 3, 3, 2, 0, 1, 3, 2, 3, 1, 3, 3, 2, 0, 2, 1, 3, 2, 3, 3, 2, 1, 1, 3, 3, 3, 1, 0, 0, 2, 3, 2, 3, 1, 3, 3, 3, 2, 0, 1, 0, 1, 2, 1, 2, 0, 1, 1, 0, 0, 3, 0, 1, 0, 2, 1, 0, 0, 3, 2, 1, 1, 3, 3, 2, 3, 1, 0, 2, 3, 3, 0, 3, 0, 0, 2, 0, 3, 1, 3, 2, 1, 2, 3, 2, 2, 3, 2, 1, 0, 1, 3, 2, 2, 1, 1, 1, 0, 1, 2, 3, 2, 3, 1, 3, 0, 2, 0, 3, 3, 2, 1, 2, 0, 1, 3, 3, 1, 3, 2, 3, 3, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 0, 2, 0, 2, 0, 1, 1, 2, 1, 0, 0, 3, 0, 2, 1, 1, 3, 0, 3, 2, 0, 2, 2, 3, 2, 2, 2, 0, 2, 2, 2, 2, 1, 2, 1, 2, 3, 1, 2, 0, 1, 0, 3, 2, 2, 3, 3, 3, 0, 1, 3, 3, 1, 2, 2, 0, 3, 0, 0, 1, 1, 3, 1, 2, 0, 1, 0, 3, 2, 3, 1, 2, 0, 3, 3, 2, 3, 1, 3, 0, 2, 3, 1, 3, 2, 3, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 3, 2, 2, 3, 3, 0, 3, 0, 2, 2, 1, 1, 0, 3, 2, 3, 2, 3, 1, 3, 3, 2, 2, 3, 0, 2, 3, 1, 3, 1, 2, 1, 1, 3, 0, 2, 1, 1, 3, 0, 3, 2, 1, 1, 1, 0, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1], [2, 2, 1, 3, 3, 2, 1, 0, 0, 0, 4, 1, 3, 0, 4, 0, 4, 1, 0, 2, 2, 2, 2, 0, 0, 2, 0, 3, 2, 4, 0, 4, 3, 4, 2, 4, 0, 3, 2, 3, 1, 2, 2, 4, 1, 3, 2, 1, 3, 4, 4, 1, 2, 4, 2, 4, 2, 4, 1, 0, 2, 0, 2, 4, 4, 2, 0, 4, 0, 3, 1, 1, 3, 2, 2, 3, 4, 0, 3, 1, 0, 3, 3, 4, 4, 4, 0, 4, 0, 1, 2, 4, 1, 4, 2, 0, 1, 1, 1, 4, 4, 0, 1, 3, 0, 4, 1, 4, 0, 3, 3, 2, 0, 4, 2, 1, 4, 4, 3, 1, 3, 4, 2, 4, 0, 3, 4, 2, 4, 3, 1, 1, 2, 0, 2, 0, 0, 4, 2, 2, 1, 0, 2, 4, 4, 0, 1, 0, 4, 4, 3, 2, 3, 4, 2, 1], [2, 2, 0, 1, 2, 0, 2, 2, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 1, 0, 1, 1, 2, 0, 1, 0, 2, 0, 0, 2, 1, 2, 2, 0, 2, 2, 1, 0, 1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 2, 0, 1, 0, 1, 1, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 0, 0, 0, 1, 2], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [5, 3, 2, 1, 5, 1, 4, 5, 0, 1, 1, 4, 5, 4, 0, 1, 2, 2, 1, 0, 5, 4, 2, 4, 3, 1, 4, 0, 5, 5, 0, 5, 2, 2, 0, 2, 1, 5, 1, 0, 0, 2, 5, 2, 4, 0, 0, 2, 1, 2, 2, 2, 2, 3, 3, 2, 5, 5, 1, 4, 3, 3, 5, 1, 4, 4, 0, 3, 2, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0], [1, 0, 0, 3, 0, 4, 2, 0, 4, 1, 3, 1, 3, 4, 3, 4, 2, 0, 2, 2, 2, 0, 0, 0, 1, 3, 4, 4, 0, 0, 1, 1, 1, 4, 4, 0, 1, 3, 2, 0, 0, 4, 3, 2, 0, 2, 4, 0, 2, 2, 4, 1, 2, 1, 4, 4, 1, 0, 4, 2, 1, 1, 4, 1, 1, 4, 1, 4, 1, 1, 2, 4, 2, 2, 4, 1, 2, 1, 1, 1, 4, 4, 2, 0, 0, 1, 1, 1, 0, 1, 2, 0, 1, 4, 4, 2, 1, 2, 0, 2, 1, 4, 1, 0, 3, 1, 0, 2, 4, 1, 4, 2, 0, 3, 1, 2, 1, 4, 1, 4, 4, 4, 1, 2, 0, 0, 1, 0, 4, 2, 1, 4, 1, 2, 4, 4, 1, 0, 2, 0, 4, 1, 4, 4, 2, 2, 4, 0, 0, 1, 2, 4, 1, 2, 1, 0, 1, 4, 4, 0, 4, 2, 4, 2, 2, 2, 4, 4, 0, 2, 1, 0, 0, 2, 0, 1, 4, 4, 0, 2, 1, 1, 0, 1, 0, 0, 2, 4, 3, 4, 1, 1, 4, 0, 1, 2, 2, 0, 4, 4, 1, 1, 1, 2, 3, 1, 0, 3, 2, 4, 3, 2, 3, 0, 2, 4, 2, 0, 1, 0, 4, 2, 4, 4, 0, 1, 3, 3, 2, 0, 4, 1, 3, 2, 1, 4, 1, 2, 4, 4, 2, 4, 4, 1, 0, 2, 0, 0, 2, 2, 0, 2, 2, 1, 1, 1, 0, 0, 1, 4, 2, 0, 1, 2, 1, 2, 2, 0], [3, 0, 0, 0, 1, 1, 2, 0, 3, 2, 3, 0, 2, 0, 2, 0, 2, 3, 0, 0, 3, 3, 3, 3, 3, 1, 1, 3, 0, 3, 3, 3, 0, 0, 2, 3, 3, 2, 0, 3, 0, 2, 1, 2, 1, 2, 3, 0, 2, 2, 0, 0, 2, 0, 3, 2, 0, 1, 0, 0, 1, 0, 2, 3], [0, 0, 4, 3, 5, 5, 5, 3, 2, 4, 5, 5, 4, 4, 0, 2, 2, 5, 3], [1, 1, 0, 0, 1, 1, 0, 1, 2, 1, 2, 0, 2, 2, 1, 2, 2, 2, 1, 0, 1, 0, 1, 0, 1, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 0, 0, 1, 2, 2, 1, 2, 2, 2, 1, 0, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 0, 1, 1], [3, 2, 3, 3, 3, 3, 0, 3, 3, 2, 3, 3, 0, 3, 3, 2, 0, 0, 1, 2, 2, 2, 2, 2, 0, 1, 1, 3, 0, 0, 0, 2, 2, 3, 3, 3, 3, 3, 2, 2, 1, 3, 2, 2, 3, 2, 3, 0, 2, 0, 1, 0, 3, 1, 0, 0, 0, 2, 0, 1, 3, 3, 0, 3, 1, 3, 1, 2, 2, 1, 0, 1, 0, 2, 3, 0, 2, 3], [9, 12, 16, 17, 22, 23, 9, 5, 7, 11, 21, 2, 20, 5, 5, 7, 23, 5, 24], [13, 24, 19, 18, 6, 18, 19, 6, 21, 18, 24], [5, 4, 8, 7, 8, 2, 2, 2, 4, 7, 0, 3, 5, 4, 0, 9, 0, 2, 6, 0, 7], [25, 12, 22, 17, 5, 29, 28, 7, 5, 6, 18, 2, 18, 29, 6, 7, 19, 8, 11, 6, 17, 29, 23, 11, 16, 3, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 49, 49, 20, 29, 4, 13, 0, 0, 14, 10, 29, 10, 13, 6, 1, 0, 5, 158, 158, 141, 9, 575, 145, 156, 73, 77, 71, 78, 4, 268, 64, 19, 61, 78, 19, 11, 21, 27], "tree_depth": 73, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif \"\"@\"\" not in in2:{:\\nres0 = in0 not in (s2 + s1[:abs(i2)].lstrip())\\nloopBreak% = 0\\nwhile getCharFromString(\"\"5\"\", i1) != (\"\")\"\" + (getCharFromString((getCharFromString(in2[:abs(int(6.0))], i0) + s1[:i0][i1:i0][max(len(in1), len(in2)):divInt(int(5.0),divInt(( int(8.0) * abs(max(( int(5.0) * int(3.0) ), int(0.0))) ),i2))]), int(42.0)) + \"\"=\"\")):{:\\nloopBreak% = 0\\nfor s0 in (saveChr(int(4.0)) + saveChr(i2)):{:\\ns1 = s1\\ni1 += int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in in2:{:\\nin1 = \"\".\"\"\\ns0 = \"\"\"\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = \"\"J^\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= min(min(int(0.0), ( ( int(8.0) * i2 ) + i0 )), min(i2, int(0.0)))\\n:}\\nif getCharFromString(s2, i0).capitalize() != \"\"]4$\"\"\":{:\\nif (s2[:i0] + s1) == (s0[divInt(saveOrd(in2.capitalize()[:i0]),i1):int(8.0)] + \"\"M\"\".rstrip(\"\"#\"\"[max(len(getCharFromString(\"\"/\"\".capitalize(), min(mod(i1,i1), saveOrd(in1)))), min(int(5.0), int(0.0))):])[:int(2.0)][saveOrd(getCharFromString(\"\"8\"\"[( i0 * max(i2, min(abs(int(0.0)), ( abs(int(0.0)) * i2 ))) ):int(6.0)], i2)):]).lstrip():{:\\ni1 -= divInt(i2,int(4.0))\\nif i2 \\ge mod(( int(6.0) + abs(( i1 - i0 )) ),abs(i2)):{:\\nloopBreak% = 0\\nwhile b2:{:\\nres0 = \"\"Q\"\" == \"\"R\"\".capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile \"\"n\"\" == getCharFromString(\"\"7\"\", ( int(5.0) + i0 )):{:\\ns2 = \"\"8\"\".capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni2 += divInt(min(( mod(int(2.0),int(0.0)) + min(mod(abs(min(len(\"\"2\"\"), int(5.0))),mod(i0,abs(saveOrd(getCharFromString(\"\"2\"\", mod(min(saveOrd(\"\"2\"\"[i2:]), i0),len(\"\"W\"\")))[:divInt(int(2.0),saveOrd(\"\"y\"\"))][i1:].lstrip(getCharFromString(in1[int(4.0):].strip(in0), abs(i2)))[int(0.0):])))), int(0.0)) ), mod(int(7.0),( int(1.0) + mod(int(4.0),int(6.0)) ))),i1)\\n:}\\ns1 = \"\"t\\\\\\t\"\"\\n:}else:{:\\nloopBreak% = 0\\nwhile res0:{:\\nif mod(i1,saveOrd(\"\"X\"\")) \\g min(( len(\"\"J\"\") + divInt(i0,i2) ), ( int(7.0) - int(8.0) )):{:\\nin1 = s0\\ni2 -= i1\\n:}else:{:\\nloopBreak% = 0\\nwhile int(6.0) == i0:{:\\nloopBreak% = 0\\nwhile \"\"F\"\" in in2[abs(len(\"\"4\"\")):]:{:\\nres0 = ( i0 * max(( i2 + abs(int(1.0)) ), int(5.0)) ) == divInt(abs(saveOrd(\"\"7\"\"[:i2].strip(in2[max(i2, i2):( i2 - ( int(4.0) + int(5.0) ) )]).strip(\"\"/\"\"[:int(6.0)]))),int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(3.0)\\n:}\\ni2 = ( divInt(len(\"\"^\"\".lstrip(s0)),i0) - int(7.0) )\\nloopBreak% = 0\\nwhile not (\"\"#\"\" + in2) not in \"\"$\"\".strip()[int(1.0):( mod(mod(int(8.0),abs(i1)),max(i1, int(4.0))) - i2 )]:{:\\nloopBreak% = 0\\nwhile saveChr(len(s2[:int(0.0)])) not in (\"\":\"\" + \"\"0\"\"[i2:saveOrd(saveChr(( ( saveOrd(\"\"3\"\") * int(7.0) ) + i0 )))]):{:\\ns2 = getCharFromString(\"\"s\"\".strip(s0[:mod(int(4.0),i1)]), max(i2, ( ( abs(divInt(saveOrd(s2),i1)) - abs(i1) ) + saveOrd(\"\"%\"\") ))).rstrip(s1)\\nin2 = \"\"5\"\"[abs(int(2.0)):].strip(\"\"4\"\".rstrip(getCharFromString(getCharFromString(\"\"(\"\", int(2.0)), int(1.0))[:mod(i2,int(8.0))]))\\nres0 = saveOrd(s1) \\l mod(i1,i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in s0[max(min(( abs(min(i2, ( i2 * abs(divInt(( int(8.0) + divInt(divInt(i0,i1),saveOrd(\"\"0\"\".capitalize())) ),int(7.0))) ))) + i2 ), saveOrd(s2.capitalize()[int(2.0):][divInt(abs(min(int(4.0), int(5.0))),( i2 * int(8.0) )):int(8.0)].lstrip().rstrip(in2))), saveOrd(\"\"#H\"\")):( int(6324.0) - mod(( min(int(0.0), i1) * int(2.0) ),i2) )]:{:\\nb0 = ( ( len(getCharFromString(\"\"9\"\", divInt(int(0.0),mod(i2,i1)))[:mod(int(9.0),max(( max(( int(4.0) * i1 ), len(\"\"L\"\"[:divInt(( mod(int(8.0),int(6.0)) + int(3.0) ),abs(abs(i1)))])) * len(s2) ), int(0.0)))]) * ( mod(mod(divInt(( ( int(3.0) - int(2.0) ) + int(4.0) ),int(8.0)),saveOrd(\"\"g\"\")),min(i1, len(getCharFromString(in1, max(mod(i2,int(3.0)), min(( len(saveChr(int(1.0))[len(saveChr(saveOrd(s0)).capitalize()[( i1 - ( int(5.0) - saveOrd(\"\"V\"\"[( saveOrd(s0) - min(divInt(int(2.0),int(7.0)), saveOrd(s2)) ):min(max(int(1.0), i2), i2)]) ) ):][( abs(divInt(saveOrd(s1[int(6.0):max(saveOrd(\"\".\"\"), abs(( i2 + int(6.0) )))]),i2)) - int(1.0) ):mod(int(9.0),mod(i0,int(8.0)))][int(0.0):i0]):i0].capitalize()) - min(i0, int(3.0)) ), i1))).strip()))) * ( int(1.0) * i1 ) ) ) - i1 ) \\g max(divInt(int(2.0),int(5.0)), max(max(( saveOrd(s2.strip().capitalize()) - int(6.0) ), i0), ( saveOrd(\"\"s\"\"[:min(i0, max(i0, i2))]) + ( i0 - len(\"\"C\"\") ) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = res0\\nloopBreak% = 0\\nwhile int(62630.0) \\l min(( int(0.0) * divInt(saveOrd(s2),( ( max(( int(7.0) + i1 ), int(69.0)) - saveOrd(\"\"UF\"\") ) + mod(mod(int(9.0),int(21.0)),int(1.0)) )) ), i2):{:\\nloopBreak% = 0\\nwhile s2 == s2:{:\\nres0 = getCharFromString((\"\"0\"\".capitalize() + \"\"F\"\"), int(3.0))[( min(mod(len(in0.capitalize()),int(2.0)), len(\"\"t\"\")) - i1 ):] == in0[:divInt(i0,abs(min(divInt(int(0.0),( i1 - int(6.0) )), saveOrd(getCharFromString(getCharFromString(\"\"^\"\", abs(int(8.0))), max(mod(saveOrd(\"\">\"\"),saveOrd(\"\"H\"\")), int(5.0)))))))][i1:]\\ni0 = int(9.0)\\ns2 = (\"\"(\"\" + in2)[i1:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile (((in2 + getCharFromString(s1[int(2.0):i0], int(6.0))[:divInt(len(\"\"g\"\"),( i2 * ( i2 * mod(i2,int(8.0)) ) ))])[int(436.0):] + in1).capitalize()[mod(int(576.0),i1):] + getCharFromString(in0, i1).capitalize()[max(i0, ( int(4.0) * int(0.0) )):].strip(\"\"-v\"\")).endswith(((in0[:len(saveChr(i0))] + \"\"2\"\") + (\"\"6s\"\"[:saveOrd(getCharFromString(\"\"X\"\", ( i0 + divInt(mod(abs(( mod(divInt(i2,divInt(( mod(( int(7.0) * mod(int(5.0),mod(saveOrd(getCharFromString(saveChr(int(9.0)), divInt(i1,int(9.0)))[i2:]),min(( mod(len(getCharFromString(\"\"y\"\".capitalize(), saveOrd(in2))[:abs(i1)]),int(7.0)) + saveOrd(s1[:len(in1)]) ), int(7.0)))) ),divInt(( i1 + max(i2, i2) ),int(3.0))) * int(9.0) ),max(int(8.0), ( i2 * int(6.0) )))),i1) - abs(( min(int(6.0), divInt(i2,abs(min(mod(min(int(3.0), saveOrd(in1[i1:][:divInt(abs(int(5.0)),abs(mod(max(divInt(i0,int(9.0)), int(1.0)),i0)))])),i1), int(3.0))))) + i2 )) )),i1),i0) )))] + \"\"F\"\"[i1:][:min(divInt(mod(abs(saveOrd(\"\"0\"\")),i0),saveOrd(\"\"\"\")), i2)]))):{:\\nb2 = ( res0 and divInt(( int(9.0) + int(4.0) ),i0) \\l min(divInt(max(divInt(min(int(8.0), saveOrd(s0)),saveOrd(in0)), divInt(( len(\"\"Y\"\") + i2 ),divInt(abs(int(9.0)),len(s2[int(9.0):].lstrip(\"\"7\"\"))))),( int(0.0) - int(5.0) )), saveOrd(\"\"&\"\"[i0:( int(5.0) * int(2.0) )])) )\\nb1 = abs(i1) \\g max(mod(int(078.0),int(3.0)), int(1.0))\\nloopBreak% = 0\\nfor s0 in s0[:i2][:i2]:{:\\nb1 = i1 == int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 5], [1], [], [0, 1, 1], [], [], [], [], [5, 0, 2], [0, 0, 0, 0, 0, 0, 0, 1], [], [3, 4, 4, 2, 0, 2, 1, 2, 0], [3, 0], [0], [2, 1], [2, 0, 1, 2, 0, 0, 3, 1], [17, 3, 6], [8, 9], [2, 9], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 0, 0, 0, 2, 8, 0, 7, 2, 1, 2, 8, 3, 2, 2, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (getCharFromString(s0[i1:], int(4.0)).lstrip() + \"\"2Ri9DG%j\"\"[:int(5.0)])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1], [2, 0, 0, 2, 0, 0, 0], [1, 2], [0, 1, 0, 2, 0], [], [0, 0, 0, 0, 0], [], [], [0, 0, 2], [0], [2, 2, 0, 0, 2, 2, 0, 0, 0, 2, 1, 0, 2], [0], [2, 4, 5, 5, 0, 2], [3, 2, 3, 2, 2, 2], [1, 1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 4, 1, 3, 8, 2, 1, 8, 8, 3, 3, 6, 3, 5, 9, 1, 3, 7, 9, 4], [1, 0, 1, 1, 2, 2, 0, 2, 1, 0, 1], [0], [1, 1, 3, 2, 2, 3, 3, 2, 2, 2, 1, 1, 2, 3, 3, 3, 1, 1, 0, 1, 3, 3, 3, 2, 1, 1, 1, 2, 3, 3, 3, 0, 0, 3, 2, 1, 1, 3, 2, 0, 1, 0, 3, 0, 0, 2, 3, 2, 0, 1, 0, 3, 2, 1, 1, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 2, 2, 1, 4, 2, 0, 2, 0, 4, 1, 4, 4, 2, 2, 3, 4], [1, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 1, 1, 2, 2, 0, 3, 5, 0, 5, 5], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [], [2, 0, 0, 1, 1, 2, 1, 2, 4, 1, 2, 0, 4, 2, 1, 2, 1, 1, 0, 0, 2, 0, 2, 2, 0, 1, 2, 0, 1, 0, 1, 1, 0], [3, 0, 1, 0], [5], [2, 1, 1, 2, 0, 0, 0, 2, 1, 0], [2, 2, 0, 0, 2, 1, 2, 3, 2, 3], [23, 8], [24], [7, 7, 7, 2, 5], [11, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 0, 4, 0, 0, 2, 1, 11, 1, 5, 5, 2, 0, 1, 19, 19, 11, 1, 59, 13, 17, 5, 8, 10, 10, 0, 30, 2, 1, 10, 10, 2, 1, 5, 2], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[int(2.0):] == in0:{:\\nb0 = \"\"7\"\".startswith(\"\"7\"\")\\ni1 = int(9.0)\\nloopBreak% = 0\\nwhile ( not \"\"X\"\"[:abs(divInt(divInt(abs(abs(( ( ( int(4.0) - int(1.0) ) + divInt(max(saveOrd(\"\"I\"\".strip(s1[abs(int(3.0)):])[:int(8.0)]), i0),int(2.0)) ) * min(abs(min(( int(1.0) * int(8.0) ), int(8.0))), divInt(saveOrd(getCharFromString(\"\"7\"\"[max(saveOrd(\"\"y\"\"[i1:i1]), saveOrd(\"\"2(\"\")):( int(3.0) + int(3.0) )], abs(divInt(i2,int(6.0))))),i2)) ))),abs(i0)),i2))].endswith(s1) or s2.endswith(s2[divInt(len(s0[:divInt(i1,int(3.0))][i0:]),saveOrd(\"\"5\"\")):divInt(int(5.0),int(9.0))]) ):{:\\nb0 = ( not not in0[int(1.0):i1] in \"\"/\"\" or int(3.0) \\l int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin2 = s0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1], [1, 0, 0, 0], [], [1, 1, 0, 1], [], [0, 0, 0], [], [], [2], [], [2], [], [2], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [9, 3, 0, 9, 1, 1, 3, 1, 3, 2, 2, 4, 2, 9, 3, 4, 6, 6, 8, 2, 4, 8, 0, 5], [0, 0, 0, 1, 2, 1, 2, 2, 2, 0, 1, 0, 2, 2, 1, 2, 0, 2, 0, 0], [1, 0, 1], [1, 3, 3, 2, 2, 3, 1, 2, 1, 1, 0, 1, 1, 3, 0, 2, 1, 0, 2, 2, 3, 2, 3, 3, 1, 0, 2, 3, 1, 1, 0, 1, 0, 0, 0, 2, 1, 0, 0, 3, 2, 1, 0, 3, 1, 3, 0, 1, 0, 2, 1, 2, 2, 3, 3, 3, 2, 0, 1, 2, 1, 1, 3, 3, 3, 0, 2, 0, 1, 0, 3], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 2, 4, 2, 3, 2, 4, 0, 1, 0, 1, 2, 4, 3, 4, 0, 2, 3], [0, 2, 2, 2, 1, 2, 2, 2, 2], [1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 3, 1, 4, 0, 1, 2, 0, 5, 5], [1, 1, 1, 1, 1, 1], [], [2, 4, 4, 4, 2, 0, 3, 2, 3, 2, 0, 1, 2, 2, 1, 2, 2, 1, 3, 2, 0, 3, 3, 0, 4, 0, 4, 1, 2, 4, 4, 2, 0, 0, 4, 2, 4, 3, 4, 4, 2, 0, 1, 4, 1, 0, 0], [2, 2, 2, 3, 0, 2, 2, 3, 1, 0, 3, 2], [5, 0, 5], [0, 1, 0, 0, 2, 1, 1, 2, 1, 1, 1, 1, 1], [1, 3, 1, 0, 2, 1], [24], [23, 13, 13], [6], [16]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 0, 4, 0, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 24, 24, 20, 3, 71, 16, 18, 9, 9, 10, 6, 0, 47, 12, 3, 13, 6, 1, 3, 1, 1], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(9.0)\\ni0 = max(abs(mod(( saveOrd(s2[:int(3.0)].capitalize().capitalize().capitalize()[mod(int(0.0),int(9.0)):i0]) * int(1.0) ),int(1.0))), abs(i1))\\nb2 = ((in0[divInt(int(3.0),i2):divInt(mod(len(\"\"x\"\"),( abs(saveOrd(\"\"-\"\"[:int(1.0)][i1:])) * ( min(int(3.0), int(2.0)) * i2 ) )),int(24.0))] + \"\"n\"\"[i2:][:i2])[i0:( int(2.0) - i1 )] + (s1[:i0] + ((in1 + s0.strip(getCharFromString(\"\"Y\"\", max(( int(9.0) * i2 ), min(int(3.0), max(i2, int(4.0))))))) + s1[:i1].capitalize().capitalize()[:divInt(int(6682.0),( ( abs(saveOrd(s2)) * len(saveChr(mod(i2,int(4.0)))[:mod(int(8.0),int(0.0))].lstrip()) ) * saveOrd((getCharFromString(s0[:min(abs(i0), mod(i2,int(5.0)))].strip(\"\"6\"\"), i0) + \"\"n\"\".capitalize())) ))]))) == in2\\ni0 *= len(in2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0, 0, 0], [], [2, 0, 1], [], [0], [], [], [3], [5], [1], [0], [], [], [], [], [], [1, 0, 1], [9, 0, 2], [2, 1, 1, 0, 2], [0], [2, 3, 2, 0, 2, 0, 0, 1, 2, 0, 3, 1], [], [2, 3], [0, 0, 1, 0], [], [2, 5], [1], [], [1, 4, 0], [3], [0], [], [0], [19], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"T\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [1, 2, 1], [], [0, 0, 3, 1, 0], [], [0], [], [], [2, 1], [1], [], [2, 3, 4, 0, 1], [0], [], [0], [2], [], [], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 5, 0, 1, 0, 0, 2, 1, 0, 5, 1, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (getCharFromString(s1, i1) + \"\"3\"\")[i2:min(int(0.0), i1)]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1], [1, 1, 2, 1, 1], [1], [0, 1, 1, 2], [], [], [], [], [2], [], [0, 0], [], [], [1, 1], [], [0, 1], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 2, 1, 7, 7, 0, 1, 8, 5, 4, 7, 4, 3, 6, 1, 6, 4, 9, 7], [2, 2, 1, 1, 0, 0, 0, 2, 0, 2, 1, 1, 2], [1, 1], [2, 1, 1, 3, 3, 2, 1, 3, 1, 2, 2, 2, 3, 1, 2, 2, 0, 3, 2, 0, 3, 2, 0, 0, 3, 1, 0, 2, 0, 2, 0, 2, 1, 3, 2, 2, 1, 1, 0, 2, 1, 1, 1, 3, 0, 1, 1, 2, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [3, 1, 3, 2, 2, 3, 2, 1, 0], [2, 0, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [4, 0, 1], [1, 1, 0, 1, 1], [], [4, 4, 3, 0, 2, 2, 2, 1, 2, 2, 4, 0, 2, 1, 2, 4, 3, 1, 1], [3, 0, 2, 0], [0], [1, 2, 0, 1, 2, 1, 0], [3, 1, 2, 0, 3], [21], [9], [5], [27, 2]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 0, 2, 1, 20, 20, 13, 2, 54, 16, 9, 8, 10, 3, 5, 0, 19, 4, 1, 7, 5, 1, 1, 1, 2], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\ni2 *= ( int(1.0) + int(4.0) )\\nif False:{:\\ni2 -= len(getCharFromString((in1 + \"\"\\\\\\\\\"\"[max(( int(2.0) - len(s0.capitalize()[int(1.0):][:divInt(( ( abs(int(7.0)) - mod(( i1 - abs(divInt(i1,len(\"\"j\"\"[:( i0 - i0 )]))) ),abs(int(7.0))) ) - i0 ),divInt(i2,mod(i0,mod(int(0.0),max(divInt(mod(int(1.0),int(8.0)),i2), divInt(int(5.0),int(4.0)))))))]) ), int(7.0)):min(i1, int(4.0))][int(3.0):][:mod(i1,int(6.0))]), i2).lstrip())\\n:}\\ns1 = getCharFromString((\"\"5V\"\" + \"\"\\\\\\t\"\"), int(16.0))[int(4.0):int(97.0)]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 1, 6, 5, 3, 9, 2, 9, 8, 7, 7, 4, 6], [2, 0, 2, 2, 1, 0, 2], [], [1, 2, 1, 2, 0, 0, 2, 2, 3, 2, 3, 1, 2, 1, 3, 2, 0, 1, 0, 2, 1, 1, 0, 1, 2, 2, 1, 0, 3, 1, 1, 3, 3, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 4, 4, 1, 1, 0], [2, 2, 2, 0, 2, 2, 0], [1, 0, 1, 1], [3, 0, 2, 4, 4, 2, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [], [3, 0, 3, 4, 2, 2, 2, 0, 2, 0, 4, 4, 2, 0, 0, 3, 4, 2, 1, 1], [3, 0, 2, 2], [1], [2, 0, 1, 1, 2, 1], [3, 3, 0, 0, 2, 1, 3, 2, 1, 3], [5, 6], [2, 0], [4, 8], [25, 15, 11, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 6, 0, 36, 10, 6, 6, 4, 7, 10, 0, 20, 4, 1, 6, 10, 2, 2, 2, 4], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (s0 + (s2[:int(5.0)][mod(int(5.0),( i2 * i0 )):( ( min(divInt(saveOrd(in1[:int(1.0)]),mod(int(6.0),saveOrd(getCharFromString(in1[( i2 * int(5.0) ):].capitalize(), i2)))), ( int(3.0) * int(9.0) )) + i1 ) * int(2.0) )][mod(( int(9.0) * i0 ),max(int(8.0), int(7.0))):].rstrip() + s2))\\ns2 = (\"\"@,F\"\"[:max(min(int(7.0), int(4.0)), int(6.0))].capitalize() + \"\"G4c(8a]\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [0], [3], [], [4], [], [], [3], [0, 1, 0, 1], [], [3, 3, 0, 1, 1], [], [], [], [3, 1, 1, 1], [], [4, 13, 23], [], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 4, 0, 5, 0, 0, 0, 4, 0, 3, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(((in0 + \"\"e\"\") + \"\"nx\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0], [], [], [2], [0], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 0, 3, 7, 5, 8, 4, 2, 1, 8, 4, 7, 8, 9, 9, 5], [0, 2, 2, 0, 1], [0], [3, 2, 3, 2, 3, 2, 1, 1, 1, 3, 1, 1, 0, 2, 2, 2, 3, 3, 2, 0, 3, 3, 2, 3, 1, 1, 0, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 1, 3, 1, 2, 1, 3, 1, 3], [1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0], [1, 3, 4, 4, 0, 0, 3, 2, 1, 2, 1, 3], [0, 1, 2, 2], [0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 1], [0, 1, 0, 1], [], [2, 4, 0, 4, 2, 0, 4, 1, 1], [3, 1, 1, 1], [3], [2, 2], [3, 3, 0, 1], [17], [10], [], [4, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 16, 16, 5, 1, 45, 13, 12, 4, 9, 2, 4, 0, 9, 3, 1, 2, 4, 1, 1, 0, 2], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(divInt(len(s0.lstrip(saveChr(mod(saveOrd(s1[mod(int(7.0),int(0.0)):]),int(3.0))))[saveOrd(saveChr(int(7.0))):]),int(5.0)), i0) \\l ( mod(mod(min(min(( i2 + len(\"\"!=\"\") ), abs(( max(int(8.0), int(4.0)) - i2 ))), mod(mod(int(2.0),int(1.0)),divInt(int(8.0),i0))),int(4.0)),divInt(int(7.0),int(8.0))) * abs(int(9.0)) )\\ni1 = ( int(9.0) * max(int(5.0), len(\"\"Rk\"\")) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 1, 2, 2, 2, 2, 1, 2, 0, 2, 1, 0, 0, 1, 2, 2, 2, 0, 2, 2, 1, 0, 1, 0, 0, 0, 1, 2, 1, 2, 0, 0, 1, 2, 0, 1, 1, 2, 2, 0], [1, 1, 2, 2, 0, 2, 2, 2, 0, 2, 0, 1, 1, 0, 2, 2], [1, 1, 1, 0, 2, 0, 2, 0, 0, 0, 2, 1, 1, 1, 2, 2, 1, 0, 2, 2, 1, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [2, 0, 3, 2, 0, 0, 0, 3, 0], [4, 5, 3, 5, 5, 2, 4, 1, 3, 1], [1, 0, 0, 2, 1, 1, 2, 2, 1, 1, 2, 2, 0, 1, 1, 2, 2, 1, 0, 1, 1, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 4, 0, 2, 3, 1], [1, 1, 0, 3], [0], [1, 1], [1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 5, 4, 3, 2, 2, 7, 6, 3, 0, 0, 1, 6, 3, 7, 8, 6, 4, 6, 3, 2, 4, 2, 9, 5, 4, 9, 5, 9, 9, 6, 6, 5, 8, 5, 2, 9, 4, 2, 9, 0, 4, 2, 1, 5, 7, 5, 5, 4, 4, 1, 5, 5, 1, 1, 6, 6, 0, 9, 3, 6, 0, 3, 2, 0, 2, 7, 1, 2, 2, 2, 8, 6, 6, 6, 2, 8, 3, 2, 4, 5, 5, 2, 9, 8, 5, 2, 5, 2, 1, 2, 3, 4, 0, 4, 6, 5, 5, 0, 7, 5, 6, 1, 7, 4, 3, 5, 6, 2, 8, 5, 5, 1, 1, 4, 4, 3, 8, 0, 7, 6, 8, 0, 5, 4, 8], [0, 2, 0, 1, 2, 1, 0, 1, 2, 2, 1, 0, 0, 2, 1, 1, 2, 2, 2, 2, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 2, 0, 1, 0, 0, 2, 0, 0, 1, 2, 1, 1, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 0, 2, 2, 0, 1, 1, 1, 0, 2, 0, 1, 0, 1, 2, 2, 0, 0, 1, 0, 2, 2, 0, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 0, 0, 2, 0, 0, 1, 0, 1, 0, 2, 2, 2, 1, 1, 0, 0, 2, 0, 2, 0, 1, 2, 2, 2], [1, 0, 1, 1, 1, 0, 0, 1, 0], [3, 1, 0, 0, 0, 3, 1, 0, 3, 2, 2, 3, 3, 1, 2, 0, 3, 3, 1, 2, 1, 3, 1, 0, 3, 0, 2, 0, 2, 2, 3, 1, 2, 1, 0, 1, 1, 0, 2, 1, 2, 1, 1, 0, 0, 1, 0, 1, 3, 0, 3, 1, 2, 1, 2, 0, 3, 1, 1, 3, 2, 0, 3, 1, 0, 1, 2, 0, 2, 3, 2, 1, 3, 1, 2, 2, 2, 3, 3, 0, 1, 0, 3, 2, 3, 1, 1, 3, 0, 0, 1, 2, 0, 1, 1, 2, 2, 0, 1, 2, 3, 2, 1, 1, 2, 0, 2, 3, 1, 1, 2, 0, 2, 2, 1, 0, 2, 3, 0, 3, 0, 1, 0, 3, 1, 1, 3, 0, 2, 3, 0, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 3, 0, 0, 0, 3, 0, 0, 3, 2, 3, 2, 2, 0, 1, 2, 1, 0, 3, 2, 3, 2, 2, 1, 3, 1, 0, 1, 3, 0, 0, 2, 3, 3, 0, 3, 3, 1, 0, 0, 0, 0, 3, 3, 0, 1, 3, 3, 2, 1, 2, 2, 3, 0, 3, 2, 2, 1, 2, 3, 1, 3, 1, 1, 0, 2, 2, 2, 3, 3, 3, 2, 0, 3, 2, 2, 3, 3, 2, 3, 1, 3, 2, 1, 1, 0, 1, 0, 2, 3, 1, 3, 1, 1, 2, 1, 2, 1, 0, 2, 1, 2, 2, 3, 1, 3, 0, 3, 3, 3, 2, 3, 3, 2, 1, 2, 1, 2, 0, 1, 2, 2, 1, 0, 3, 2, 2, 3, 0, 1, 0, 1, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 3, 0, 1, 1, 3, 0, 2, 1, 0, 1, 0, 3, 1, 2, 2, 1, 3, 0, 1, 1, 2, 1, 3, 3, 1, 0, 1, 1, 1, 2, 0, 3, 0, 1, 3, 0, 3, 1, 0, 3, 3, 1, 3, 1, 0, 1, 0, 3, 1, 3, 3, 0, 0, 0, 2, 1, 1, 0, 0, 1, 2, 1, 3, 1, 0, 0, 2, 3, 0, 2, 3, 3, 2, 2, 3, 2, 3, 0, 1, 2, 3, 0, 3, 2, 1, 2, 2, 3, 2, 1, 3, 3, 2, 0, 0, 1, 3, 3, 0, 0, 3, 1, 2, 2, 2, 1, 2, 3, 2, 0, 3, 2, 0, 2, 1, 1, 0, 1, 1, 0, 1, 1, 3, 1, 0, 0, 1, 2, 0, 3, 2, 3, 0, 2, 3, 2, 0, 1, 3, 3, 0, 2, 0, 1, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0], [4, 4, 0, 0, 0, 4, 0, 1, 0, 1, 0, 1, 0, 3, 3, 2, 1, 4, 1, 3, 4, 2, 0, 3, 2, 4, 1, 4, 0, 1, 3, 2, 0, 2, 3, 4, 0, 1, 2, 2, 0, 4, 4, 4, 2, 4, 4, 1, 4, 0, 2, 0, 4, 3, 2, 3, 1, 2, 4, 0, 0, 0, 4, 3, 1, 1, 2, 1, 1, 2, 2, 0, 1, 3, 3, 0, 1, 2, 4, 1, 0, 3, 3, 2, 2, 4, 0, 0, 3, 3, 2, 1, 2, 2, 3, 1, 1, 1, 4, 0, 4, 2, 2, 0, 1], [0, 2, 1, 2, 0, 0, 1, 2, 0, 2, 1, 0, 1, 0, 2, 0, 0, 1, 1, 0, 2, 0, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 0, 1, 2, 1, 0, 1, 0, 1, 2, 2, 1, 2, 1, 1, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1], [5, 2, 5, 2, 1, 2, 4, 5, 3, 1, 1, 5, 3, 0, 1, 5, 1, 2, 5, 0, 4, 2, 4, 4, 4, 1, 0, 2, 5, 1, 0, 5, 3, 1, 2, 3, 5, 4, 4, 1, 4, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0], [2, 0, 1, 1, 1, 0, 0, 0, 3, 3, 3, 2, 1, 1, 3, 2, 4, 1, 4, 4, 4, 0, 3, 3, 0, 3, 1, 0, 3, 2, 1, 2, 4, 1, 1, 4, 4, 4, 0, 4, 4, 1, 0, 4, 2, 3, 2, 4, 2, 4, 2, 0, 2, 2, 0, 4, 4, 2, 2, 4, 0, 2, 0, 2, 1, 1, 1, 4, 3, 3, 2, 4, 1, 0, 1, 2, 4, 4, 1, 2, 0, 2, 2, 2, 4, 2, 0, 1, 2, 4, 4, 4, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 4, 2, 4, 4, 4, 1, 2, 0, 2, 0, 4, 0, 1, 2, 2, 4, 4, 1, 1, 4, 1, 3, 2, 2, 4, 2, 4, 0, 2, 4, 4, 4, 0, 4, 1, 2, 2, 1, 0, 1, 4, 1, 4, 1, 1, 2, 1, 4, 4, 2, 1, 4, 2, 4, 4, 4, 1, 0, 0, 4, 2, 1, 4, 2, 2, 2, 1, 0, 2, 0, 2, 2, 1, 0], [2, 2, 2, 2, 1, 3, 3, 3, 3, 1, 2, 1, 3, 1, 0, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 2, 0, 2, 1, 0, 3, 1, 2, 3, 3, 3, 2, 1, 0, 3, 2, 1, 2, 2, 0, 0, 0, 2], [4, 1, 5, 5, 4, 2, 0, 0, 2, 1, 1, 5], [2, 0, 2, 0, 1, 1, 2, 2, 1, 1, 1, 0, 0, 2, 1, 1, 0, 1, 1, 1, 0, 0, 2, 2, 1, 0, 1, 0, 1, 0, 0, 2, 0, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 0, 0], [3, 1, 3, 0, 0, 1, 3, 3, 1, 0, 2, 1, 2, 3, 2, 3, 3, 0, 2, 1, 1, 3, 1, 3, 3, 0, 2, 0, 0, 3, 3, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 3, 1, 3, 1, 1, 3, 3, 1], [16, 0, 14, 16, 7, 4, 0, 5, 1, 10, 6, 20, 15, 17], [17, 12, 0, 20, 17, 5, 9, 17, 19, 11, 7, 15, 0], [7, 2, 6, 4, 5], [11, 1, 21, 28, 8, 24, 31, 16, 19, 28, 16, 23, 3, 7, 22, 0, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 40, 40, 16, 24, 4, 13, 0, 0, 9, 10, 22, 10, 8, 4, 1, 2, 4, 126, 126, 112, 9, 432, 105, 105, 53, 57, 42, 49, 4, 177, 48, 12, 45, 49, 14, 13, 5, 17], "tree_depth": 67, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += saveOrd(in2[int(0.0):])\\ni2 = i0\\nif i1 \\le i2:{:\\nif False:{:\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nwhile \"\"(\"\" == \"\"r\"\":{:\\ni1 *= saveOrd(\"\"\\\\\\n\"\")\\nloopBreak% = 0\\nfor s2 in in2:{:\\nb2 = int(5.0) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile min(mod(( min(min(int(4.0), divInt(i1,saveOrd(s2))), min(int(3.0), ( int(2.0) - max(int(2.0), i2) ))) * min(i2, ( i1 + ( ( max(int(7.0), mod(int(6.0),i0)) + int(3.0) ) - int(0.0) ) )) ),i0), ( int(0.0) * mod(int(1.0),int(6.0)) )) \\ge i2:{:\\ns1 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = (((\"\"Q\"\"[i1:int(3.0)] + \"\"A\"\") + (\"\"m\"\".capitalize()[i1:] + in1.capitalize().capitalize().capitalize())) + ((in2 + (\"\"<\"\" + in0)) + (\"\"]\"\"[int(7.0):min(i2, max(int(8.0), divInt(int(6.0),mod(i2,min(int(4.0), int(6.0))))))] + saveChr(len(\"\"a\"\"))[:divInt(i2,len(\"\"O\"\"))]))) == s1.strip(saveChr(int(3.0)).strip(\"\"7\"\")).rstrip().rstrip(s1)\\n:}else:{:\\nin2 = (saveChr(i2)[int(2.0):] + in0[:divInt(i0,( abs(( int(4.0) + max(int(2.0), mod(mod(( saveOrd(s0[:max(i0, int(9.0))][:i1]) * len(saveChr(( saveOrd(getCharFromString(s1.capitalize()[int(5.0):int(4.0)][abs(i1):i1], int(9.0))) - ( i1 + int(5.0) ) ))) ),int(9.0)),divInt(mod(i0,int(9.0)),( min(divInt(int(6.0),int(6.0)), ( i1 - divInt(len(in2[int(5.0):]),int(8.0)) )) + divInt(i0,divInt(( int(5.0) * i1 ),( abs(i2) + saveOrd(\"\"u\"\"[:i0]) ))) )))) )) + int(2.0) ))].rstrip(\"\"2\"\")[i1:])[:max(int(9.0), int(4.0))].capitalize()\\nres0 = \"\"%6?`\"\" in ((getCharFromString(\"\"Q\"\", saveOrd(s1))[:i0] + \"\"4r\"\") + getCharFromString(\"\"f\"\", ( min(i0, mod(int(2.0),i2)) - int(9.0) )).strip()[int(0.0):int(4.0)]).capitalize()\\n:}\\nloopBreak% = 0\\nwhile divInt(int(2.0),i0) != int(157.0):{:\\nloopBreak% = 0\\nwhile i0 != max(i1, i2):{:\\nloopBreak% = 0\\nfor s2 in in2[:i1]:{:\\nb2 = s0[len(\"\"-\"\"):i1].lstrip()[i0:abs(( min(( ( i2 - int(5.0) ) + ( int(5.0) * i0 ) ), abs(divInt(len(saveChr(( divInt(int(4.0),saveOrd(getCharFromString(\"\"j\"\"[int(4.0):], i2).capitalize())) + int(1.0) ))[min(i2, i1):]),( max(abs(i1), abs(min(int(5.0), i0))) * i0 )))) * i0 ))][:i1][:saveOrd(\"\":\"\")].startswith(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile \"\"]\"\" in s2:{:\\nloopBreak% = 0\\nfor in1 in in1:{:\\nb0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= saveOrd(\"\"H\"\")\\ni1 -= i0\\ni2 = int(51.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = \"\"5\"\"\\ns2 = \"\"E\"\"\\nif saveOrd(getCharFromString(getCharFromString(\"\"A\"\".capitalize(), abs(( int(1.0) * ( ( saveOrd(in2[i2:saveOrd(s1[:mod(mod(int(6.0),divInt(max(int(6.0), saveOrd(saveChr(int(0.0)))),int(9.0))),i0)])]) * mod(( divInt(min(abs(min(divInt(i1,saveOrd(s0)), ( mod(len(\"\"-\"\"),abs(mod(len(getCharFromString(\"\">\"\".lstrip(), int(3.0))[:max(( int(6.0) - int(0.0) ), i1)][int(3.0):i1]),mod(abs(int(2.0)),saveOrd(\"\"F\"\"))))) * int(0.0) ))), int(2.0)),( int(7.0) * mod(int(1.0),i0) )) * ( int(2.0) * divInt(mod(min(int(2.0), min(i2, min(saveOrd(saveChr(len(\"\"r\"\"))), ( max(max(( int(2.0) - ( int(8.0) - ( i0 + int(6.0) ) ) ), mod(mod(int(6.0),i1),abs(mod(divInt(max(i0, int(6.0)),i1),int(2.0))))), i2) - int(8.0) )))),( int(3.0) * ( i2 - mod(divInt(divInt(int(2.0),max(i0, int(4.0))),int(5.0)),abs(i0)) ) )),mod(int(5.0),i1)) ) ),int(2.0)) ) + i0 ) ))).capitalize()[:abs(int(9.0))], mod(mod(int(8.0),min(i2, int(5.0))),int(2.0)))) == mod(int(52.0),max(len((in2.strip()[int(1.0):].capitalize()[i2:int(2.0)][int(3.0):int(4.0)] + in0.capitalize().rstrip().rstrip()[( i0 - len(saveChr(i2)) ):int(0.0)])), min(i2, max(int(4.0), i1)))):{:\\ni1 = abs(saveOrd(\"\"B\"\"))\\nif int(6.0) \\le max(int(5.0), i2):{:\\nb0 = \"\"K\"\"[int(5.0):][i1:] == s1\\n:}\\ns2 = \"\"t\"\"\\nin0 = getCharFromString(\"\"GUP\"\", min(int(0.0), len(\"\"R\"\".strip(\"\"$\"\"))))\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in \"\"l=\"\"[:len(saveChr(i1).capitalize())]:{:\\ni1 += i2\\ni2 = i1\\nres0 = \"\"h\"\"[mod(int(7.0),int(5.0)):] != getCharFromString(getCharFromString(\"\"p\"\", i0), i0).capitalize()[int(6.0):].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile ( int(17.0) - abs(int(4.0)) ) \\g i2:{:\\nloopBreak% = 0\\nwhile ( i0 \\ge mod(abs(i0),( saveOrd(in1) * min(mod(( min(divInt(len(in1),i1), int(3.0)) * mod(len(getCharFromString(\"\"\"\"[i0:], abs(divInt(int(5.0),mod(divInt(max(mod(int(6.0),abs(abs(( i1 - i0 )))), int(2.0)),len(\"\">\"\"[:max(i2, i2)][:max(int(8.0), ( mod(divInt(int(5.0),divInt(max(( i2 * saveOrd(s1) ), ( i1 - mod(int(5.0),int(1.0)) )),i1)),int(1.0)) - int(4.0) ))][i0:].capitalize())),int(4.0)))))),int(3.0)) ),min(int(8.0), i0)), i2) )) and int(07.0) \\g ( i0 - saveOrd(in1[( abs(i2) - mod(abs(( i0 + int(6.0) )),min(max(i1, ( i2 - int(8.0) )), i2)) ):]) ) ):{:\\nb0 = \"\"a\"\"[int(0.0):int(5.0)][i2:int(48.0)] not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [0, 1], [], [1], [], [], [], [3, 3], [], [], [], [31, 8]], "fitness": 9223372036854775807, "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"`%\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2]}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 3, 7, 7, 2, 3, 7, 1, 0, 6, 8, 6, 4, 6, 9], [2, 0, 1, 1, 2, 1, 1, 0, 0, 0], [], [3, 0, 3, 1, 3, 2, 3, 0, 1, 3, 3, 3, 0, 0, 1, 0, 1, 1, 3, 3, 3, 1, 2, 2, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 3, 1], [1, 1, 1, 1], [3, 3, 4, 3, 3, 2, 1, 2, 4, 1, 3], [], [1, 1, 0, 1], [4, 0, 1, 3, 4, 4, 3, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [], [3, 4, 1, 2, 0, 0, 2, 2, 4, 0, 3, 3, 3, 4, 0, 4, 2, 2, 0, 4, 1, 2, 2, 4, 2, 4, 4, 0, 4, 4, 4, 3, 1, 1, 2, 4, 1, 3, 3, 4, 4, 2, 1, 2, 0, 4, 0, 0], [0, 2, 3, 0, 0, 0, 2, 2, 1, 3, 0, 0, 2, 0, 3], [2, 5, 1], [0, 1, 0, 0, 2, 2, 1, 2, 1, 2, 1], [2, 3, 3, 1, 1, 3, 2, 2, 2, 3, 0, 1], [19], [3, 13, 6], [1, 2, 2, 8], [28, 28, 6, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 10, 0, 36, 4, 11, 0, 4, 10, 12, 0, 48, 15, 3, 11, 12, 1, 3, 4, 4], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (getCharFromString(\"\"1]]dn\"\", len(s0[i2:len(s1)])) + in0.capitalize()[int(137.0):saveOrd((((in1.strip() + getCharFromString(in1[mod(len(getCharFromString(\"\"#\"\", i0)),int(7.0)):][len(getCharFromString(in0.capitalize().capitalize()[abs(max(i1, i1)):], int(2.0))[:i2][int(3.0):]):int(710.0)], abs(saveOrd(saveChr(max(int(6.0), mod(divInt(i1,int(8.0)),i1))))))) + getCharFromString((\"\"22\"\" + \"\"8\\\\\\\\\"\"), i0).strip(getCharFromString(\"\"T\"\", i0)[:int(6.0)])) + ((getCharFromString(\"\"g\"\"[mod(int(4.0),i0):], int(6.0)).capitalize() + s1[:len(s1.rstrip())]) + s1)))][:int(9.0)])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 1, 1], [2, 9, 1, 4, 8], [1, 2, 1], [1], [3, 1, 2, 1, 2, 2, 0, 1, 0], [1, 1, 0], [3], [1, 1], [1, 1], [], [1], [], [4, 2, 2, 1], [2], [], [2, 2], [1], [], [11], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 3, 1, 9, 3, 1, 2, 2, 0, 1, 0, 4, 1, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(\"\"l\"\"[int(2.0):][mod(int(914.0),mod(( i2 - int(8.0) ),i1)):].capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 0], [], [0], [], [], [1], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1], [5, 4, 8, 1, 1, 3, 5, 3, 1, 2], [0, 1, 1, 2, 2], [], [0, 2, 1, 2, 0, 2, 0, 3, 2, 2, 0, 0, 3, 1, 1, 2, 3, 3, 3, 2, 1, 2, 1, 2, 1, 1, 2, 3, 1], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 2, 2, 2, 4], [2, 2, 0, 1, 2], [0, 0, 1, 1, 1], [0, 5], [1], [], [0, 1], [], [], [], [2], [], [], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 5, 0, 29, 10, 6, 5, 5, 2, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2\\nb1 = i0 != ( int(5.0) * ( i1 * divInt(i1,max(( divInt(i2,i2) + min(int(48.0), int(11.0)) ), mod(abs(abs(abs(( int(3.0) - ( int(5.0) * mod(int(3.0),int(1.0)) ) )))),mod(saveOrd(\"\"0\"\"),int(2.0))))) ) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 0, 0, 0, 0], [0], [1, 2, 1, 2], [0], [0, 0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 7, 1, 5, 1, 3, 7, 0, 1, 0, 6, 9, 7, 8, 4, 3, 6, 9, 0, 6, 6, 3, 6, 5, 9, 6, 0, 3, 8], [1, 2, 2, 0, 2, 0, 0, 2, 1, 2, 0, 1, 1, 1, 2, 0, 2, 0, 0, 1, 2, 1, 0, 2, 2, 0, 1, 0, 1, 1, 0, 1, 1, 0], [1, 0], [2, 0, 0, 1, 3, 0, 2, 3, 3, 3, 1, 3, 2, 3, 2, 2, 1, 3, 3, 1, 2, 0, 1, 0, 2, 0, 1, 3, 1, 1, 0, 2, 2, 0, 2, 0, 1, 2, 0, 3, 3, 1, 2, 2, 2, 0, 1, 1, 2, 1, 0, 3, 3, 1, 3, 2, 0, 0, 3, 0, 0, 3, 3, 0, 0, 3, 2, 3, 3, 2, 2, 1, 2, 2, 0, 3, 3, 3, 3, 2, 3, 2, 3, 0, 0, 0, 2, 0, 1, 1, 1, 2, 3, 1, 2, 1, 3, 1, 1, 0, 3, 0, 1, 2, 3, 2, 1, 0, 0, 2, 0, 3, 1, 3, 3, 3, 1, 1, 2, 3, 1, 3, 0, 1, 1, 3, 2, 3, 0, 0, 3, 0, 3], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0], [4, 0, 1, 0, 2, 1, 0, 2, 1, 0, 1, 1, 4, 4, 0, 4, 4, 3, 0, 1, 3, 1, 1, 0, 3, 3, 0, 1, 4, 2, 0, 2, 2, 0, 0, 3, 3, 1, 4, 4], [0, 0, 2, 0, 2, 2, 1, 2, 2, 0, 0, 1, 2, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0], [2, 2, 0, 3, 3, 2, 3, 1, 2, 5, 4, 5, 2, 2], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0], [1, 0, 2, 3, 0, 1, 2, 2, 4, 2, 4, 0, 4, 2, 0, 2, 2, 2, 1, 2, 4, 4, 0, 2, 4, 1, 2, 2, 2, 1, 0, 1, 1, 0, 2, 0, 0, 0, 2, 4, 0, 1], [3, 1, 0, 2, 3, 0, 2], [5, 3], [1, 1, 0, 1, 2, 1, 0, 1, 1, 0, 0, 1, 1, 2, 2], [2, 1, 2, 0, 2, 1, 1, 2, 3, 1], [3], [23, 8, 9, 10], [3, 8, 4, 9], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 30, 34, 2, 133, 31, 40, 17, 15, 14, 10, 1, 42, 7, 2, 15, 10, 1, 4, 4, 1], "tree_depth": 70, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in \"\"3\"\":{:\\ni1 += ( i2 + i2 )\\ns2 = s0\\ni0 = int(5.0)\\nin0 = (in0 + \"\"x\"\")[:saveOrd(saveChr(i2)[:( min(max(min(int(7.0), abs(( max(( mod(int(7.0),min(abs(int(1.0)), mod(i0,int(5.0)))) * i0 ), mod(i2,int(1.0))) + max(int(3.0), int(7.0)) ))), i1), ( mod(i2,divInt(i0,int(0.0))) * mod(i1,min(max(int(1.0), ( ( ( i1 * int(0.0) ) - int(6.0) ) * divInt(int(9.0),i1) )), max(saveOrd(s2), int(7.0)))) )) * saveOrd(getCharFromString(in0[divInt(i2,i0):], min(i2, i0))) )].strip(\"\"8\"\"[:saveOrd(s1.lstrip(getCharFromString(\"\"D\"\", saveOrd(\"\"4\"\"[:i0][:i1][len(s2):( min(max(divInt(( int(8.0) + mod(( i2 + len(\"\"i\"\") ),max(max(min(( len(\"\"j\"\") - mod(len(in2),i1) ), i0), i2), mod(i2,int(4.0)))) ),int(3.0)), int(6.0)), ( min(int(9.0), ( int(0.0) * max(int(6.0), int(6.0)) )) + i0 )) + saveOrd(in1[i1:]) )]))[int(3.0):mod(abs(divInt(int(6.0),i0)),i1)]).capitalize()[:( i1 + min(int(5.0), abs(abs(min(int(9.0), int(6.0))))) )])][divInt(min(int(0.0), len(in2)),i0):int(3.0)][:int(8.0)])[len(s2):( max(i1, i1) + saveOrd(s2.capitalize()[i0:]) )][:saveOrd(\"\"9>k\"\")])]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 2], [2], [2], [], [0], [], [], [2], [], [0], [], [], [0], [], [], [], [1], [5], [2, 1], [], [0, 3, 0, 3, 2, 3, 3, 3, 0], [1, 0], [1, 2, 4, 2], [0], [0], [2, 3, 5, 5], [0, 0, 0, 0, 0, 0, 1], [0], [1, 0, 4, 0, 4], [3, 0], [5], [], [2, 2, 3, 2, 1, 1, 1], [], [8, 1, 9], [7, 8, 7], [31]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 0, 1, 0, 0, 0, 7, 0, 3, 3, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"78`7ibj\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [1], [1], [0], [], [], [], [], [], [1, 0, 1], [6, 6, 5], [1, 1, 0, 0], [], [3, 3, 2, 0, 3, 0, 3, 2, 0, 1, 3, 0, 1], [0, 0], [0, 0, 3, 1, 2], [1, 0], [], [], [1], [], [4, 1], [2], [], [], [3], [], [], [], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 13, 2, 5, 2, 0, 0, 1, 0, 2, 1, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = min(min(( i1 - len(\"\"]\"\".capitalize()) ), i1), max(( i0 + int(6.0) ), abs(i0))) \\g int(65.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [0, 1, 2, 1], [2], [1, 0, 0], [], [0], [], [], [0, 3], [2], [0, 0, 0, 0, 1, 2, 2, 0], [0], [3, 0], [1, 3, 3, 2, 1], [1, 0], [0, 1], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 9, 8, 0, 9, 8, 3, 5, 1, 6], [1, 2, 2, 2, 2, 1], [0], [2, 3, 1, 2, 1, 2, 2, 3, 3, 0, 2, 2, 1, 2, 1, 1, 1, 0, 1, 0, 1, 3, 0, 3, 1, 0, 1], [1, 0, 0, 0, 0, 1, 1], [1, 0, 2, 3, 1], [1, 2, 0, 0], [1, 0, 1], [2, 5], [0, 0, 1], [], [0, 0, 4, 2, 1, 4], [1, 1], [], [1], [2, 3, 0], [16], [], [0], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 1, 0, 0, 2, 1, 8, 1, 2, 5, 2, 2, 0, 11, 11, 6, 1, 27, 7, 5, 4, 3, 2, 3, 0, 6, 2, 0, 1, 3, 1, 0, 1, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = mod(max(int(42.0), ( int(9.0) - ( ( min(abs(i2), ( divInt(int(8.0),mod(int(0.0),int(9.0))) * int(8.0) )) + i2 ) + int(3.0) ) )),i2)\\nb0 = True\\nloopBreak% = 0\\nwhile ( ( not int(5.0) == len(s2) or in2 != saveChr(i2) ) and \"\"0\\\\\\tQ\"\"[:max(int(1.0), i1)] in saveChr(int(6.0)) ):{:\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0, 0, 1], [], [1], [], [], [], [0, 0, 1], [7, 9], [4], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 1, 0, 0, 0, 3, 2, 1, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"HJe\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1], [1, 2, 1, 2, 0, 2, 0, 1], [2, 2, 1], [0, 2, 2, 1, 2], [], [0, 0], [], [], [1, 3], [3], [0, 0, 2, 1, 2], [0], [3, 4], [0, 2], [], [], [0], [1, 1, 1, 1, 0, 1, 1], [2, 5, 8, 9, 3, 0, 8], [0, 0, 2, 2, 1, 0, 2, 1, 0, 1], [1], [0, 1, 0, 0, 0, 1, 2, 1, 0, 2, 3, 0, 3, 1, 1, 2, 0, 2, 2, 0, 0, 3, 1], [1, 0, 1, 1, 1], [1, 4, 4], [2, 0], [1, 0, 1, 1], [5, 4, 2, 5, 5, 0, 3], [1, 1, 1, 1, 0, 0, 1], [], [1, 4, 4, 2, 0, 0, 4, 2, 1, 1, 2, 2, 0, 4, 4, 1, 0, 1], [3, 3, 0, 2, 0], [1, 2], [2, 2, 0, 0], [1, 2, 1, 3, 2, 0, 2], [3], [17, 12], [2, 8, 8], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 0, 2, 0, 0, 2, 1, 5, 1, 2, 2, 0, 0, 1, 7, 7, 10, 1, 23, 5, 3, 2, 4, 7, 7, 0, 18, 5, 2, 4, 7, 1, 2, 3, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = res0\\nloopBreak% = 0\\nwhile not \"\"r\"\" != in2[i0:].strip().rstrip():{:\\nin1 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(2.0) \\ge i0:{:\\nin2 = getCharFromString(\"\"2\"\"[i2:], i2)\\nif \"\"m\"\".startswith(in2[int(5.0):mod(int(8.0),i1)][( max(i0, saveOrd(getCharFromString(\"\"\\\\\\t\"\", int(9.0)).capitalize())) * int(30.0) ):divInt(i2,mod(mod(i1,i0),saveOrd(s0)))]):{:\\ni1 += int(8.0)\\n:}\\nin0 = \"\"8D8\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [], [0, 0, 0, 2, 2, 2], [], [0, 4, 2], [2, 3, 3], [1, 0], [], [], [1, 1, 0, 0, 1, 1], [0, 5, 2, 3, 4, 9], [0, 2, 1, 2], [], [0, 2, 1, 3, 1, 0, 3, 1, 0, 0, 1], [0], [4, 2], [2], [], [0, 5, 1, 0, 4, 3, 0], [1, 0, 1, 1, 1], [], [0, 4, 4, 1, 3, 1, 0, 4, 2, 3, 2, 1, 1, 4, 0, 2, 3, 4, 4, 0, 3, 2, 0, 3, 0, 0], [1, 0, 2, 0, 2, 2], [], [1, 2, 0, 1], [0, 0, 2, 0, 0], [25, 16, 25, 1], [], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 6, 0, 3, 3, 2, 0, 0, 6, 6, 4, 0, 11, 1, 2, 1, 0, 7, 5, 0, 26, 6, 0, 4, 5, 4, 0, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = not ( ( s0 in saveChr(i0) or getCharFromString(\"\"Z\"\", ( int(0.0) * saveOrd((\"\"Q4\"\" + in2)) )).startswith((\"\"Z\"\"[int(5.0):] + \"\"B\"\")[:i2].capitalize()) ) and getCharFromString(s1, abs(int(234.0))) == (s0.capitalize().capitalize() + (in1[:i1] + (in0 + s0)))[i2:int(9.0)] )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2, 0], [], [0, 0, 0], [], [], [], [], [3], [1], [], [2, 2, 1], [], [], [1, 0], [1], [], [19], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 1, 1, 0, 3, 0, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"t\"\"[i2:i2][:i0]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 2, 1], [2, 1], [2, 2], [], [0], [], [], [], [5], [1, 2], [0], [5], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1], [1, 2, 6, 5, 2, 6, 4, 5, 9, 6, 2, 2, 2, 1, 3], [2, 1, 2, 1, 0, 2, 0, 2, 0, 0, 1], [], [2, 3, 3, 3, 2, 3, 2, 0, 2, 0, 0, 1, 2, 3, 2, 2, 2, 1, 0, 3, 1, 1, 2, 3, 3, 3, 1, 2, 3, 0, 0, 1, 2, 3, 1, 0, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 3], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [3, 4, 1, 3, 2, 4, 3, 3, 0, 4, 4, 4], [1, 0, 0, 2, 0, 2], [1, 0, 0, 0, 0, 1, 0], [3, 5, 0, 2, 2, 1, 0, 3, 4, 0, 4, 2], [0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [], [0, 1, 4, 4, 3, 4, 2, 4, 0, 3, 4, 1, 4, 2, 0, 1, 2, 0, 1, 1, 4, 2, 4, 0, 1, 4, 0, 2, 0, 3, 4, 1, 0, 2, 2, 4, 3, 1, 3, 0, 1, 1, 0], [3, 3, 3, 3, 3, 0, 3, 2, 0, 3, 1], [4, 4, 2, 2, 3, 1, 2], [2, 1, 0, 0, 0, 1, 0], [1, 3, 3, 3, 3, 0, 3, 0, 2, 3, 3, 3, 1, 2, 3, 2, 2, 0], [9, 2, 5], [17, 10], [9, 4, 5, 1], [7, 9, 1, 11, 25, 20, 11, 4, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 0, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 1, 15, 15, 11, 0, 47, 13, 12, 6, 7, 12, 18, 0, 43, 11, 7, 7, 18, 3, 2, 4, 9], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( len(in0) - saveOrd(\"\"r$\"\") ) != max(mod(len((in2.strip()[divInt(i2,( i1 + i2 )):].strip() + (\"\"&\"\".lstrip(getCharFromString(s0[:int(1.0)], divInt(abs(divInt(( ( int(2.0) + i1 ) * saveOrd(\"\"\\\\\\n\"\") ),int(6.0))),int(5.0)))) + s2[divInt(len(\"\"(\"\"),len(\"\"J\"\")):min(int(2.0), mod(saveOrd(s2.capitalize()[i0:i2].rstrip()),int(6.0)))])).rstrip(\"\"@C\"\").rstrip(getCharFromString(s1, divInt(saveOrd(s0[int(4.0):i0]),int(59.0))))),int(6.0)), int(222.0)):{:\\nin0 = (\"\"9;(!k\"\".strip() + in1)\\nif saveChr(int(13.0))[i2:( i0 + i0 )][:( i1 * saveOrd((\"\"4\"\"\" + (s0 + \"\"5\"\"))) )].endswith(\"\"1F\"\"):{:\\nin1 = s2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1], [4, 0, 7, 1, 2, 1], [0, 1, 0, 0, 1, 2, 0], [0], [3, 1, 3, 3, 3, 1, 2, 0, 0, 3, 1, 2, 2, 0, 1, 1, 0, 0, 0], [1, 1, 0], [2, 0, 0, 0, 3], [0], [0, 1], [0, 4, 0, 3], [1, 1], [0], [4, 4, 0, 4, 3, 4, 4, 4, 1, 2, 4, 2, 1], [3, 2, 2, 2, 2, 1, 2], [1], [0, 0], [2, 2], [], [], [8, 0], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 7, 1, 19, 3, 5, 1, 2, 3, 2, 1, 13, 7, 1, 2, 2, 0, 0, 2, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1.capitalize().rstrip():{:\\ns0 = (saveChr(abs(int(40.0))).capitalize().capitalize() + \"\"8\"\").capitalize()\\ni0 = min(min(min(int(7.0), divInt(i1,i0)), len(\"\"0\"\"[int(1.0):mod(( i0 + int(2.0) ),int(1.0))].capitalize()[i1:i2])), i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1], [1, 1, 0, 2, 1], [0], [1, 1, 1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [6, 5, 1, 0, 7, 4, 7, 8, 2, 7, 2, 4, 0, 8, 0, 4, 3, 5, 2, 9, 9, 2], [2, 1, 0, 1, 1, 0, 0, 1, 1, 2, 1, 2, 1, 2, 2, 1, 0, 0], [0, 0, 0], [3, 0, 0, 2, 3, 1, 1, 0, 1, 0, 2, 2, 2, 3, 0, 3, 3, 0, 2, 2, 1, 2, 3, 1, 3, 1, 0, 0, 3, 1, 3, 3, 0, 1, 3, 2, 0, 1, 3, 3, 1, 2, 3, 1, 0, 0, 3, 3, 3, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 0, 2, 1, 2, 0, 2, 2, 1, 1, 1, 0, 2, 3, 2, 1, 2], [1, 0, 0], [1, 0, 0, 0, 0, 0], [0, 3, 5, 0, 3], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0], [3, 3, 3, 0, 1, 3, 4, 2, 1, 2, 3, 2, 0, 2, 2, 1, 4, 1, 3, 1, 2, 0, 1], [3, 1], [5], [2, 1, 2, 0, 2, 2], [0, 2, 2, 3, 1, 2, 0, 3, 2, 3, 2, 3, 3, 1], [3, 14], [3, 20], [9, 3, 4, 8, 9], [30, 22, 28, 29, 7]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 22, 18, 3, 54, 9, 17, 3, 6, 5, 14, 1, 23, 2, 1, 6, 14, 2, 2, 5, 5], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(i1, i0)\\ni1 = ( min(int(6.0), int(51074.0)) - i1 )\\ni0 = int(7.0)\\nloopBreak% = 0\\nfor s0 in (((in0 + \"\"D9\"\") + (\"\"3\"\"[i0:].strip((in2[( mod(divInt(abs(i1),max(abs(i1), divInt(divInt(int(8.0),( min(int(2.0), abs(int(7.0))) + i2 )),i1))),abs(int(2.0))) + max(max(i2, int(4.0)), max(divInt(i1,int(0.0)), min(abs(int(8.0)), divInt(len(\"\"_\"\"[int(0.0):][i2:i2]),abs(max(abs(i1), i0)))))) ):] + saveChr(i0))[:int(435.0)]) + \"\"d4O\"\")) + (\"\"=8]9^\"\" + s0[int(2992.0):])):{:\\nin0 = \"\"$u\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 2, 0, 0, 0, 1, 1, 1, 2, 0, 0, 0, 2, 2, 1, 2, 1, 1, 0, 1, 2, 0, 0, 0, 2, 1, 2, 1, 2, 1, 1], [1, 0, 0, 2, 2, 0, 1, 0, 0, 0], [2, 1, 0, 0, 2, 2, 2, 1, 0, 0, 2, 0, 1, 0, 0, 2, 2, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [1, 2, 3, 0, 0, 2, 2, 0, 2, 2], [5, 3, 3, 4, 3, 4, 4, 3], [0, 1, 0, 2, 2, 1, 0, 1, 0, 0, 1, 0, 1, 1, 2, 0, 2, 1, 0, 2, 1], [0, 0, 0, 0, 0, 0, 0, 0], [2, 5, 3, 5, 3], [2, 0, 3, 3, 1, 3, 2, 1], [0, 1, 0], [1, 1], [1, 1], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 3, 0, 4, 2, 4, 3, 6, 4, 9, 1, 1, 4, 6, 9, 0, 3, 1, 5, 6, 1, 8, 8, 3, 0, 5, 3, 0, 2, 4, 0, 4, 0, 8, 7, 6, 8, 2, 4, 2, 6, 8, 9, 0, 7, 2], [1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 1, 2, 0, 2, 0, 0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 1, 0, 1, 2, 0, 0, 1, 1, 1, 0, 2, 2, 0, 1, 2, 1, 2], [0, 0, 1, 0, 0], [0, 1, 1, 2, 3, 0, 1, 2, 3, 2, 2, 2, 3, 0, 2, 2, 2, 1, 0, 0, 0, 1, 0, 2, 0, 2, 2, 2, 0, 0, 2, 2, 3, 2, 0, 0, 0, 0, 3, 1, 1, 2, 1, 1, 0, 0, 0, 2, 0, 2, 0, 3, 0, 1, 1, 1, 2, 0, 1, 0, 1, 1, 0, 3, 0, 0, 2, 0, 0, 2, 1, 3, 3, 3, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 0, 3, 1, 0, 3, 1, 1, 3, 2, 0, 2, 2, 3, 0, 1, 3, 1, 3, 3, 0, 2, 2, 2, 0, 2, 2, 1, 0, 2, 1, 2, 3, 2, 0, 1, 0, 3, 1, 2, 3, 3, 1, 1, 0, 1, 0, 0, 2, 0, 0, 0, 3, 1, 2, 3, 2, 1, 0, 2, 3, 2, 1, 1, 2, 1, 0, 3, 0, 0, 2, 1, 3, 1, 3, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0], [2, 1, 0, 2, 0, 2, 0, 2, 2, 1, 0, 0, 0, 0, 3, 0, 3, 2, 3, 1, 0, 0, 4, 0, 2, 3, 2], [2, 0, 0, 0, 0, 1, 1, 2, 0, 0, 1, 0, 0, 2, 1, 1, 0, 2, 2, 1, 1, 2], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [4, 5, 3, 3, 4, 3, 2, 2, 3, 0, 2, 4, 4, 1, 2, 4, 5, 0, 3, 3, 5, 5, 4, 0, 0, 3, 0, 2, 4], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0], [2, 0, 1, 1, 3, 1, 0, 0, 4, 0, 2, 2, 1, 0, 0, 2, 1, 4, 0, 2, 0, 0, 4, 1, 4, 1, 2, 1, 3, 4, 4, 3, 4, 1, 4, 4, 2, 2, 4, 2, 1, 3, 3, 1, 1, 4, 2, 2, 4, 4, 0, 4, 1, 0, 4, 0, 0, 0, 0, 2, 1, 0, 1, 4, 1, 2, 4], [3, 2, 2, 3, 1, 2, 3, 2, 2, 2, 3, 1, 2, 0, 2, 1, 1], [2, 3, 4, 3], [1, 0, 2, 2, 1, 0, 1, 2, 2, 0, 1, 0, 2], [1, 3, 2, 0, 1, 0, 3, 0, 1, 1, 3, 1, 0, 2, 1, 1, 2, 0, 3, 1, 3, 0, 3, 2], [10, 18, 16, 0, 12, 3], [9, 5, 18, 6, 11, 4, 18, 17], [9, 7, 0, 5], [7, 6, 24, 3, 26, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 31, 31, 10, 21, 6, 10, 0, 0, 10, 8, 21, 8, 5, 8, 3, 2, 2, 46, 46, 59, 5, 163, 42, 27, 22, 21, 29, 24, 6, 67, 17, 4, 13, 24, 6, 8, 4, 6], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not i1 != int(930.0):{:\\nloopBreak% = 0\\nfor in1 in in2[:int(42.0)]:{:\\nin0 = \"\"j$\"\"\\ni2 = ( abs(i2) * int(4.0) )\\nb1 = b2\\nres0 = \"\"9K\"\" == (\"\"fS\"\" + in0)\\nin1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = s2.strip()\\n:}else:{:\\nloopBreak% = 0\\nfor in0 in \"\"#\"\"[( max(divInt(( ( min(i1, ( ( divInt(int(3.0),i1) + i1 ) + i2 )) + int(6.0) ) + i1 ),( i1 - ( ( ( i2 - i0 ) * ( divInt(abs(mod(i0,i0)),i0) + i1 ) ) + min(int(4.0), int(9.0)) ) )), mod(int(1.0),int(1.0))) - i2 ):][i0:i0]:{:\\ns0 = s2\\ni0 = ( i0 + mod(i0,abs(i2)) )\\nb0 = in1.endswith(\"\"Q\"\"[int(4.0):])\\nloopBreak% = 0\\nwhile int(6.0) \\ge int(9.0):{:\\nloopBreak% = 0\\nwhile ( mod(i2,int(0.0)) \\ge i0 and ( False or int(3.0) \\le int(1.0) ) ):{:\\nb0 = ( i0 \\ge min(i1, i0) and ( i1 + i2 ) \\le mod(int(5.0),abs(abs(max(mod(i0,i2), int(6.0))))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in s1.capitalize():{:\\ns2 = in1[:int(1.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = in2 != \"\"sg\"\".capitalize()\\ni0 *= i0\\nb2 = not \"\"?l\"\".lstrip(\"\"A7\"\"[i1:i2]).endswith((saveChr(i0) + (\"\"e\"\".rstrip(\"\"s\"\"[i0:].capitalize()[int(8.0):][:int(8.0)].capitalize().capitalize()) + ((\"\"0\"\" + \"\"M\"\") + saveChr(divInt(int(3.0),i1))[:min(int(0.0), i1)][min(int(5.0), int(3.0)):min(mod(i1,( divInt(min(i2, int(0.0)),len(s0.capitalize())) - int(2.0) )), min(len(getCharFromString(\"\"\"\", i2)), divInt(( ( i1 - mod(( int(4.0) + i0 ),( int(0.0) * divInt(abs(mod(i1,int(4.0))),i2) )) ) * len(in0) ),int(0.0))))].lstrip(in0.capitalize()))).capitalize()))\\nif ( max(min(int(876.0), int(82.0)), i0) - int(4.0) ) \\le i0:{:\\nb0 = False\\n:}else:{:\\nin2 = in2\\nin1 = s0\\n:}\\nloopBreak% = 0\\nfor s0 in in0:{:\\ni1 = i1\\nloopBreak% = 0\\nfor s0 in \"\"r[D\"\"[mod(i1,i0):i2]:{:\\ni2 = min(int(2.0), divInt(saveOrd(s2),mod(int(6.0),i0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in \"\"\"\":{:\\nb2 = saveChr(mod(min(mod(int(8.0),int(9.0)), ( int(0.0) - i1 )),abs(i2))) != \"\"5\"\"\\nb2 = i1 \\ge ( int(7.0) * len(saveChr(int(2.0))[abs(i2):]) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1], [1, 2, 0, 2, 2, 1, 1], [1, 2, 2], [1, 1, 1, 1], [], [0], [], [], [], [2, 3], [2, 0, 2, 0, 0, 1, 1], [0, 0], [2, 2], [3, 1, 3], [0, 1], [1], [1], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [2, 8, 3, 0, 0, 2, 4, 1, 9, 7, 2, 7, 5], [2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 0, 0], [1, 1, 1, 1], [2, 2, 0, 3, 1, 0, 2, 2, 3, 0, 0, 3, 2, 3, 1, 1, 0, 3, 0, 2, 2, 1, 0, 0, 1, 3, 1, 1], [0, 1, 1, 1, 1, 1, 0], [2, 4, 3, 1, 0, 3], [1, 2, 0, 1, 1, 0], [1, 1, 0, 0, 0], [1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1], [], [0, 1, 4, 1, 1, 4, 0, 1, 0], [2, 0], [], [], [3, 3, 1, 0, 2, 1, 1, 3, 0, 0, 1], [4, 1, 17], [13, 11, 15, 15], [6], [0, 5, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 0, 1, 0, 0, 0, 2, 7, 2, 2, 3, 2, 1, 1, 13, 13, 12, 4, 28, 7, 6, 6, 5, 3, 11, 0, 9, 2, 0, 0, 11, 3, 4, 1, 3], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= ( mod(i1,abs(int(2.0))) * i1 )\\nif s1 == \"\"\"\"\":{:\\ni2 += mod(divInt(saveOrd(\"\"nE6\"\".capitalize()),i1),i1)\\n:}else:{:\\nloopBreak% = 0\\nwhile ( \"\"lp]BR\"\" == getCharFromString(s0, len(\"\"p\"\")) and False ):{:\\nloopBreak% = 0\\nwhile ( divInt(max(int(83.0), int(00.0)),i1) == min(i2, divInt(( int(2.0) - i1 ),i2)) or int(4.0) \\ge len(s1) ):{:\\ni0 -= int(19727.0)\\ni0 += int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [9, 5, 2, 6, 0, 2, 1, 7, 3, 4, 5, 4, 1], [0, 1, 0, 1, 2, 2, 2, 0, 0, 2, 0], [], [1, 3, 3, 2, 2, 2, 0, 2, 1, 0, 1, 3, 3, 3, 0, 1, 3, 0, 0, 1, 3, 2, 3, 0, 3, 2, 0, 3, 1, 3, 3, 3, 3, 1, 0, 1, 1, 1, 3, 2, 1, 2, 0, 0, 3, 0, 3], [1, 1, 1, 0, 1, 1, 0, 0], [2, 4, 3, 0, 0, 2, 2, 1, 1, 4, 1, 4, 0, 2, 1, 1, 3], [2, 1, 2], [1, 1, 0, 0, 0], [4, 1, 4, 0, 1, 4, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1], [], [3, 3, 4, 4, 3, 0, 0, 1, 3, 2, 3, 1, 2, 4, 1, 0, 4, 3, 0, 2, 4, 1, 4, 2, 1, 4, 2, 4, 2, 4, 0, 4, 0], [3, 0, 0, 3, 3, 1, 2, 3, 1, 1], [4, 1, 5, 1], [1, 1, 1, 1, 1, 1], [1, 0, 3, 0, 0, 0, 2, 1, 0], [23, 21, 12, 5, 8], [12, 14], [2], [9]], "fitness": 9223372036854775807, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = ((getCharFromString((s1 + in1), int(9.0)).rstrip(\"\"mX\"\") + ((\"\"&VMF\"\" + getCharFromString(\"\"2\"\", abs(saveOrd(s0)))[:mod(mod(divInt(i0,( int(5.0) * i1 )),int(2.0)),len((s1 + \"\"o\"\".strip(saveChr(min(min(i0, int(6.0)), abs(i1))))[:i2]).rstrip()))])[:int(02.0)] + \"\"I\"\"[:abs(divInt(max(i2, max(divInt(i2,saveOrd(saveChr(int(1.0))[:max(saveOrd(in1), min(abs(int(7.0)), i0))].rstrip()[:int(3.0)].capitalize())), int(45.0))),int(4.0)))])) + saveChr(max(( int(1.0) - ( i0 * i2 ) ), max(i0, len(s0)))))\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 11, 0, 47, 8, 17, 3, 5, 7, 9, 0, 33, 10, 4, 6, 9, 5, 2, 1, 1]}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 2, 0, 0, 1, 0, 2, 2, 2, 1, 2, 2, 2, 2, 0, 2, 1, 1, 2, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 2], [0, 1, 0, 0, 0, 2, 1, 2, 2, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [], [], [2, 3, 2, 1, 2, 1, 3], [3, 0, 1, 4, 0], [1, 2, 0, 1, 1, 1, 1, 2, 2, 2, 2], [0, 0, 0, 0, 0], [3, 1, 1, 0, 1], [0], [], [], [0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 1, 8, 6, 5, 4, 4, 4, 0, 7, 1, 0, 1, 8, 7, 9, 0, 2, 0, 5, 3, 7, 9, 8, 2, 6, 9, 9, 2, 2, 3, 1, 5, 2, 9, 9, 3, 1, 3, 4, 4, 3, 5, 3, 0, 0, 2, 9, 9, 6, 4, 8, 6, 0, 2, 8, 9, 2, 2, 6, 1, 7, 5, 0, 0, 0, 8, 0, 5, 5, 8, 9, 9, 5, 5, 9, 9, 8, 1, 9, 3, 5], [1, 0, 0, 1, 0, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 2, 0, 0, 1, 0, 1, 0, 0, 2, 1, 1, 0, 1, 1, 2, 1, 1, 2, 2, 0, 1, 1, 0, 0, 0, 0, 2, 0, 2, 1, 1, 0, 2, 1, 0, 1, 1, 2, 0, 0, 1, 2, 1, 2, 0, 0, 2, 1], [0, 0, 0], [1, 0, 0, 3, 1, 0, 1, 1, 2, 2, 3, 2, 3, 1, 1, 3, 1, 1, 1, 3, 3, 1, 0, 1, 0, 3, 2, 0, 3, 0, 0, 0, 0, 1, 0, 0, 3, 0, 2, 2, 1, 0, 0, 0, 0, 1, 2, 2, 3, 1, 1, 3, 3, 2, 0, 1, 2, 3, 1, 3, 2, 1, 1, 1, 3, 2, 0, 2, 2, 2, 1, 0, 1, 3, 0, 0, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 3, 2, 0, 2, 2, 0, 1, 2, 2, 2, 3, 2, 1, 0, 2, 3, 0, 3, 1, 2, 2, 1, 2, 0, 2, 0, 1, 2, 0, 0, 3, 3, 1, 3, 1, 1, 1, 0, 2, 0, 0, 1, 3, 1, 1, 2, 1, 0, 0, 1, 2, 0, 2, 3, 1, 1, 3, 3, 2, 1, 1, 3, 0, 0, 0, 2, 3, 0, 1, 2, 2, 2, 2, 3, 3, 1, 3, 1, 0, 3, 3, 3, 1, 3, 2, 1, 3, 0, 1, 0, 3, 1, 2, 3, 3, 0, 0, 1, 2, 3, 3, 2, 2, 3, 3, 3, 0, 1, 0, 2, 0, 1, 3, 0, 2, 2, 1, 0, 0, 0, 0, 1, 3, 2, 3, 1, 3, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 4, 0, 1, 1, 2, 2, 3, 1, 1, 3, 4, 1, 0, 0, 3, 1, 2, 1, 4, 4, 2, 4, 4, 4, 1, 2, 0, 1, 0, 4, 3, 1, 2, 3, 0, 4, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 3, 3], [0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 2, 2, 0, 2, 0, 2, 1, 2], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0], [3, 5, 3, 3, 1, 4, 1, 0, 4, 4, 1, 0, 4, 1, 2, 5, 5, 0, 3, 4, 4, 1, 2, 0, 1, 4, 4, 3, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0], [4, 4, 2, 3, 1, 0, 1, 1, 4, 0, 3, 2, 4, 4, 4, 2, 4, 4, 4, 1, 4, 4, 2, 2, 4, 2, 2, 2, 2, 1, 2, 4, 1, 4, 0, 4, 1, 3, 4, 4, 2, 4, 0, 1, 2, 0, 2, 0, 1, 4, 0, 0, 4, 4, 2, 4, 0, 2, 0, 1, 4, 1, 1, 3, 2, 4, 1, 4, 1, 3, 3, 1, 4, 1, 4, 0, 2, 3, 0, 2, 3, 4, 0, 2, 0, 1, 0, 2, 2, 2, 0, 4, 1, 2, 0, 0, 2, 0, 2, 4, 2, 2, 2, 2, 0, 1, 2, 0], [1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 3, 3, 3, 2, 0, 0, 1, 0, 3, 3, 0, 3, 3, 2, 1], [1, 1, 3, 2, 1, 2, 5, 0], [1, 1, 1, 2, 1, 0, 2, 1, 2, 2, 1, 1, 0, 2, 1, 1, 2, 0, 1, 0, 2, 2, 1, 2, 0, 1, 1, 2, 2, 2], [1, 3, 0, 3, 0, 0, 3, 0, 1, 0, 2, 2, 3, 1, 1, 2, 2, 3, 2, 3, 0, 1, 3, 2], [18, 9, 22, 6, 5, 23], [23, 23, 11, 9, 9], [1, 8, 5, 6, 8, 1], [8, 16, 15, 20, 16, 25, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 22, 22, 10, 12, 5, 6, 0, 0, 7, 5, 11, 5, 5, 1, 0, 0, 4, 83, 83, 63, 3, 217, 47, 50, 18, 29, 29, 24, 5, 108, 30, 8, 30, 24, 6, 5, 6, 7], "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(381.0) \\ge i1\\ni0 = i0\\nres0 = saveChr(min(int(8.0), i1)) != (\"\"x%\"\" + in0)[:int(654.0)].capitalize()\\nif b2:{:\\nb1 = int(440710.0) \\l mod(mod(abs(mod(saveOrd(\"\"S\"\"),int(1.0))),int(87.0)),min(int(90.0), int(20.0)))\\nb2 = int(53.0) \\g max(max(int(7.0), i0), int(9.0))\\nin2 = \"\"-\"\"\\ni2 = i1\\n:}\\nif abs(mod(i1,abs(i1))) \\le i0:{:\\nif i0 \\l i0:{:\\nif saveChr(int(826.0)) not in in0:{:\\nin0 = (saveChr(i0)[:i1] + getCharFromString(getCharFromString(getCharFromString(getCharFromString(getCharFromString(\"\"J\"\", len(getCharFromString(\"\"W\"\"[i1:][:( divInt(int(9.0),i2) + i0 )][i0:][i1:int(9.0)].capitalize()[:( mod(max(int(2.0), int(2.0)),max(len(getCharFromString(\"\",\"\", mod(i0,int(3.0)))[( saveOrd(getCharFromString(s1, int(1.0))) * max(mod(int(5.0),int(2.0)), int(9.0)) ):]), min(( i1 - ( divInt(( int(9.0) * i0 ),int(3.0)) * min(i0, i2) ) ), int(1.0)))) - len(\"\"G\"\".rstrip()) )][int(3.0):].capitalize(), i1))), int(4.0)), int(4.0))[:i1], i0), i1))\\n:}else:{:\\nloopBreak% = 0\\nfor in1 in (s1.strip()[:i1].lstrip(\"\"x\"\").rstrip() + s0[:i2]):{:\\nloopBreak% = 0\\nfor in1 in in1[max(( i1 - mod(divInt(i1,int(3.0)),mod(( divInt(abs(( int(5.0) * i2 )),( max(i2, saveOrd(\"\"F\"\")) + int(3.0) )) + mod(mod(int(0.0),divInt(i0,mod(i1,int(0.0)))),mod(i1,i0)) ),saveOrd(s1.capitalize()))) ), abs(int(2.0))):saveOrd(s0)]:{:\\nloopBreak% = 0\\nfor in1 in getCharFromString(getCharFromString(saveChr(int(9.0))[int(9.0):], int(6.0)), i0):{:\\nloopBreak% = 0\\nfor s1 in s2:{:\\nin2 = in2[:( i0 * i0 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in \"\"1\"\":{:\\nb1 = getCharFromString(\"\"8\"\", int(4.0)) not in \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nres0 = (\"\"l\"\".rstrip()[:saveOrd(\"\"j5\"\".strip())] + ((\"\"6\"\" + getCharFromString(\"\"-8\"\", int(8602.0))) + in0.strip((in1 + (in1.lstrip() + s1[:int(8.0)])[mod(int(9.0),i2):i0])[int(2261.0):]))) in \"\"@Xj\"\"\\n:}else:{:\\nloopBreak% = 0\\nwhile s2 not in s0[( i2 * ( saveOrd(\"\"=\"\".capitalize()) + int(7.0) ) ):][int(5.0):][max(abs(mod(int(0.0),int(008.0))), min(i1, i1)):i0]:{:\\ni2 = ( max(i1, int(0.0)) * divInt(divInt(( divInt(min(saveOrd(s1[:int(5.0)]), len(in1)),int(5.0)) + i0 ),max(abs(len(in1[int(8.0):])), min(mod(int(9.0),saveOrd(saveChr(i1)[int(9.0):i1])), max(int(5.0), ( min(abs(i2), i0) * int(5.0) ))))),divInt(len(in0[max(( ( min(max(min(i0, int(9.0)), i1), mod(i2,int(9.0))) - min(i1, divInt(mod(int(8.0),i2),i0)) ) * i0 ), i2):][int(1.0):][:min(divInt(len(\"\"1\"\"),int(9.0)), len(s1[int(3.0):]))][:i1]),int(5.0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0], [], [2, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1], [6, 2, 4, 9, 3], [2, 0, 0, 2, 2, 2], [1], [0, 2, 3, 2, 0, 2, 2, 3, 1, 3, 2, 1, 0, 1, 3, 2, 0, 1, 0], [1, 1, 0, 1, 1, 0], [2, 1, 1, 4], [2, 1], [1, 0, 0, 0], [5, 0], [1], [], [3, 4, 2, 0, 4, 4, 1], [3, 1, 2], [2], [1], [0, 1, 0, 2, 1, 2, 2, 2, 0, 0, 0, 2, 3], [3], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 19, 6, 4, 2, 4, 2, 1, 0, 7, 3, 1, 1, 1, 1, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (s0[:i2].strip() + saveChr(mod(abs(divInt(i0,( divInt(max(int(6.0), max(divInt(int(2.0),i0), int(49.0))),saveOrd(\"\"D\"\".capitalize())) * ( i2 - int(3.0) ) ))),i2)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 1], [2, 2, 1, 2, 1, 0, 1, 0], [2, 1, 2], [1, 0, 0, 0, 0], [], [0, 0], [], [], [3, 3, 0, 3, 3], [0, 2], [0, 0, 2, 0, 2, 1, 2, 1], [0, 0], [0, 1, 2], [0, 1, 2], [], [1], [0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1], [8, 9, 6, 7, 1, 6, 8, 5, 8, 9, 6, 9, 1, 9, 8, 6, 7, 1, 8, 4, 4, 3, 9, 2, 6, 7, 6, 5, 4, 3, 9, 7, 1, 6, 1, 2, 2, 8, 9, 5, 5, 8, 8, 9, 6, 6, 4, 6, 5, 6], [0, 0, 0, 1, 2, 0, 0, 0, 1, 2, 2, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 2, 2, 2, 1, 0, 0, 2, 2, 0, 0, 1, 0, 2], [0], [3, 2, 1, 0, 3, 2, 0, 2, 1, 0, 3, 2, 2, 1, 1, 3, 1, 3, 3, 2, 0, 0, 3, 2, 1, 1, 1, 1, 3, 0, 0, 2, 1, 2, 0, 2, 2, 3, 2, 3, 1, 0, 1, 0, 0, 1, 0, 2, 1, 2, 2, 0, 1, 1, 2, 2, 2, 2, 3, 1, 0, 3, 2, 1, 3, 2, 2, 3, 1, 0, 2, 2, 0, 2, 2, 0, 3, 3, 3, 3, 1, 1, 2, 0, 0, 0, 2, 2, 2, 1, 0, 0, 3, 2, 1, 3, 3, 3, 3, 2, 2, 3, 1, 1, 0, 2, 3, 3, 0, 1, 2, 0, 0, 1, 0, 0, 3, 0, 3, 1, 1, 1, 1, 0, 2, 2, 2, 2, 3, 3, 0, 1, 2, 1, 3, 2, 1, 1, 0, 1, 2, 1, 0, 1, 3, 3, 0, 3, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 0, 2, 1, 1, 3, 3, 0, 0, 3], [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1], [1, 1, 1, 2, 4, 1, 1, 3, 1, 3, 1, 3, 0, 3, 0, 4, 1, 1, 1, 1, 4, 1, 0, 2, 0, 1, 1, 1, 2, 0, 1, 4, 3, 2, 1, 0, 3], [0, 2, 2, 0, 2, 0, 2, 0, 1, 1, 2, 2, 1, 0, 2, 0, 0, 2, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 2, 0, 2, 5, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1], [], [4, 0, 2, 3, 1, 2, 1, 2, 3, 4, 0, 4, 4, 0, 2, 4, 1, 1, 4, 2, 4, 0, 4, 2, 2, 4, 1, 1, 1, 0, 0, 4, 3, 1, 2, 0, 1], [1, 2, 2, 1, 0, 0, 3, 2, 1, 1], [5], [0, 1, 0, 2, 2, 1, 1, 2], [3, 2, 2, 0, 1, 1, 0, 1, 1], [6, 24], [24, 21, 9, 3], [5, 9], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 0, 2, 0, 0, 5, 2, 8, 2, 3, 3, 0, 1, 1, 50, 50, 38, 1, 167, 48, 37, 21, 27, 7, 9, 0, 37, 10, 1, 8, 9, 2, 4, 2, 1], "tree_depth": 71, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nif False:{:\\ni0 = max(( int(8.0) + i0 ), max(divInt(i0,divInt(int(96.0),i1)), max(( divInt(int(7.0),int(1.0)) * abs(int(6.0)) ), saveOrd(saveChr(max(mod(i2,i0), max(( int(8.0) * int(5.0) ), int(8.0))))))))\\nloopBreak% = 0\\nwhile s0 in (\"\"&\"\" + \"\"5\"\"[:int(9.0)])[len((s2.capitalize() + saveChr(i0).capitalize())[i0:mod(int(6.0),divInt(i1,divInt(( max(( len(s0) + int(9.0) ), i2) * int(1.0) ),i2)))]):i1]:{:\\nres0 = not getCharFromString(\"\"9\"\", int(9.0))[i0:] not in \"\"G\"\"\\nb0 = mod(int(8.0),divInt(( i0 + int(6.0) ),int(7.0))) \\l mod(mod(divInt(( max(int(1.0), i1) * len(getCharFromString(s2.strip(saveChr(( int(8.0) + min(mod(( len(\"\"y\"\") - int(4.0) ),i1), divInt(divInt(i0,( mod(i0,min(saveOrd(\"\"v\"\"), max(max(int(4.0), int(3.0)), ( i1 - i1 )))) * i0 )),mod(( ( int(9.0) * i1 ) - i0 ),max(divInt(int(2.0),max(saveOrd(\"\"Y\"\"), max(min(( divInt(abs(int(6.0)),int(7.0)) + i0 ), mod(min(max(i0, int(6.0)), ( i2 * i2 )),int(5.0))), i2))), i1)))) ))[:max(i0, max(int(4.0), int(3.0)))][:int(9.0)].capitalize())[int(7.0):], i0)) ),( mod(( divInt(abs(min(i2, int(1.0))),mod(int(6.0),max(divInt(int(1.0),int(2.0)), i2))) + int(2.0) ),( int(8.0) + i0 )) * int(9.0) )),saveOrd(in2)),len(in0))\\nres0 = saveChr(i0) == (\"\"j\"\" + in0[abs(( int(5.0) - divInt(int(5.0),int(8.0)) )):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = ( int(8.0) + int(9.0) ) == divInt(( i1 + divInt(int(66.0),int(4656.0)) ),max(min(i0, i2), len(\"\"d\"\")))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [4, 1, 3], [1, 0, 2, 0, 1, 2, 1, 1], [0], [2, 2, 3, 0, 0, 0, 3, 2, 1, 2, 0, 0, 0, 3, 2, 3, 2, 0, 3, 2, 3, 3, 1], [1, 1, 0, 0, 1, 0, 1], [1, 1, 4, 3, 1, 3, 4], [2, 2, 1], [1, 0, 1, 0], [5, 5, 5], [0, 1, 1], [], [3, 1, 4, 4, 0, 0, 1], [1, 1], [], [], [3, 0, 3], [8], [], [], [0, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 8, 1, 23, 7, 7, 3, 4, 3, 3, 0, 7, 2, 0, 0, 3, 1, 0, 0, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (\"\"I\"\" + saveChr(mod(divInt(max(i1, i0),i2),max(( int(4.0) * ( i0 * i1 ) ), i2))))\\ni1 = saveOrd(saveChr(mod(len(in2),( i1 - max(divInt(len(in2),saveOrd(\"\"@\"\")), int(13.0)) ))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [5, 2, 3, 0, 9, 9], [2], [], [3, 0, 2, 1, 2, 2, 3, 3, 3, 3, 1, 2, 1, 1, 1, 1], [1, 0, 0, 0], [0, 2, 3, 2, 1, 1], [1, 0, 0], [1], [5, 2, 1], [0, 1], [], [3, 1, 2, 0, 0], [], [], [0], [2, 2], [], [], [9, 7], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 1, 0, 16, 4, 5, 3, 1, 3, 2, 0, 5, 0, 0, 1, 2, 0, 0, 2, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (\"\"97\"\" + s2[min(i2, mod(int(5.0),( ( abs(len(s1)) - abs(max(int(2.0), ( int(3.0) + int(0.0) ))) ) + int(9.0) ))):int(9.0)])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [7, 0, 3, 2, 7, 8, 8], [0], [], [1, 2, 3, 2, 3, 3, 1, 1, 1, 3, 1, 1, 0, 1], [1, 1], [4, 3, 4, 3], [], [1, 0], [0, 5, 1], [0, 1], [], [4, 4, 0, 4, 2, 2, 4, 1, 3, 0, 2, 2, 4], [3, 1, 1, 1, 1], [3], [2, 2, 2, 2], [3, 3], [], [], [], [4, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 1, 0, 14, 2, 4, 0, 2, 3, 2, 0, 13, 5, 1, 4, 2, 0, 0, 0, 2], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(7.0) \\l mod(saveOrd(saveChr(divInt(len(s0),saveOrd(saveChr(int(0.0))))).lstrip(saveChr(int(3.0))[int(2.0):][len(\"\"!=\"\"):])),int(7.0))\\nin2 = (s1 + saveChr(int(8.0))[i0:][int(8.0):])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [0], [2, 0], [0], [], [], [], [1], [], [2], [], [2], [], [], [], [], [1, 1, 1], [3, 4, 5], [], [], [1, 1, 3, 2, 3, 1], [1], [4, 4], [], [0], [2, 5, 5, 2, 1, 0], [1, 1], [0], [0, 4, 1, 0, 4, 4, 0, 1, 4, 4, 4], [2, 2, 2], [], [0, 0], [0, 1], [18], [5], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 7, 3, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\nloopBreak% = 0\\nfor in2 in \"\"S\"\".capitalize():{:\\nb1 = s2 == s1.capitalize().capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1], [1, 1, 0, 0, 1], [], [0, 1, 0, 2, 0], [0], [0, 0], [], [], [2, 0, 2], [], [2, 0, 2], [], [4, 5], [1], [], [1], [], [1, 1, 1, 0, 1], [4, 5, 2, 1, 0], [0, 2, 0, 1], [0], [2, 1, 0, 2, 3, 1, 1, 0, 2, 3, 2, 1, 3, 0], [0, 0, 1, 0], [1, 4, 3], [2, 0, 0], [1], [5, 2, 2, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [], [1, 0, 4, 3, 0, 4, 0, 4, 2, 4, 1, 4, 1, 4, 1], [3, 3, 1, 2, 3, 0], [1, 0, 1], [1], [3, 1, 1, 0, 3, 2, 2, 1, 2, 2, 1, 0], [12, 9], [9, 18, 16, 18], [0, 7, 1, 1], [26, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 0, 5, 0, 2, 0, 0, 3, 0, 3, 0, 2, 1, 0, 1, 0, 5, 5, 4, 1, 14, 4, 3, 3, 1, 4, 12, 0, 15, 6, 3, 1, 12, 2, 4, 4, 2], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\"[\"\".startswith(in2)\\ni0 = ( int(4.0) * i2 )\\nb0 = False\\ns2 = (s2 + s0.lstrip()).rstrip()\\nb2 = saveChr(( max(int(5.0), int(2.0)) + i0 )).endswith(\"\"jsM/0\"\".capitalize()[:mod(saveOrd(\"\"7q\"\".rstrip()),( int(10.0) + len(getCharFromString(\"\"11sJ\"\", i1)) ))])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [6, 7, 9], [], [], [3, 2, 1, 1], [0], [3], [1], [], [2, 4, 5], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [], [3, 3, 1, 2, 0, 0, 3, 1, 1], [], [], [0], [2, 0, 1, 2, 2, 1, 2, 0, 2, 2, 1, 2], [20, 19], [12, 4, 3], [4, 4, 7, 7, 6, 4, 8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 4, 1, 1, 1, 0, 3, 12, 0, 9, 0, 0, 1, 12, 2, 3, 7, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = ((\"\"4\"\" + in1[len(in2):( int(67.0) - int(9.0) )]) + (\"\"Um\"\" + \"\"47e7T64d8\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [], [], [], [], [], [], [0, 2], [], [1], [2, 1], [], [1], [0], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [3, 2, 0, 1, 7, 3, 9, 2, 7, 8, 2, 0, 5, 7, 1, 0, 2, 8, 7, 6, 5, 2], [0, 1, 2, 1, 2, 2, 2, 0, 0, 2, 0, 1, 1, 0, 1], [0], [0, 2, 3, 3, 1, 1, 3, 1, 0, 0, 0, 0, 0, 3, 3, 2, 2, 1, 1, 3, 3, 3, 2, 0, 0, 0, 2, 0, 1, 1, 3, 3, 1, 0, 1, 0, 3, 1, 2, 1, 1, 2, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 4, 0, 1, 1, 0, 4, 4, 0], [1], [0, 1, 0, 1, 1, 0], [3, 1, 0, 2], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [], [3, 3, 3, 3, 4, 1, 4, 0, 1, 1, 3, 2, 0, 4, 3, 2, 2, 2, 0, 4, 1, 2, 2, 1, 2, 4, 0, 1, 2, 4, 3, 1, 2, 1], [0, 2, 0, 0, 3, 1], [5], [2, 2, 2, 2, 1, 0, 1, 1, 0], [3, 2, 1, 0, 1, 3, 0, 1, 0, 0, 1, 1], [9, 11, 24, 3], [14, 15, 19, 22, 16], [1], [7, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 1, 22, 22, 15, 1, 46, 7, 11, 1, 6, 4, 12, 0, 34, 6, 1, 9, 12, 4, 5, 1, 2], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not ((((getCharFromString(\"\"$1\"\", i0) + in0.capitalize()) + \"\"oJ\"\") + \"\"p,\"\") + (s1[divInt(min(max(int(3.0), int(20.0)), min(int(17.0), i1)),i2):] + getCharFromString((s0[i1:][i2:][i2:] + getCharFromString(\"\"Lt\"\", saveOrd(\"\"Y\"\"[min(mod(divInt(int(3.0),int(9.0)),max(max(min(mod(i2,i0), i0), mod(i2,int(2.0))), int(7.0))), saveOrd(s2.strip(\"\"D\"\")[:saveOrd(saveChr(int(8.0))[:i0])])):int(2.0)][:i1]))), min(int(05710.0), divInt(int(2.0),int(87.0)))))) not in (\"\"w\"\" + \"\"q\"\"[( i1 - int(6.0) ):i0]):{:\\ni1 = int(52.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 2, 0, 0, 1, 0, 2, 0, 1, 1, 1, 1, 0, 1, 2, 0, 0, 0, 2, 1, 0, 0], [1, 2, 2, 1, 2, 1, 1, 2, 0, 1], [2, 2, 2, 2, 0, 0, 2, 2, 0, 1, 2, 0, 1, 1, 1, 0, 2, 0, 2, 2, 2, 0, 2], [0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 3, 2, 0, 2, 3, 2, 1], [5, 1, 1, 2, 3, 2, 5], [2, 0, 2, 2, 2, 1, 0, 1, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0], [2, 0, 1, 3, 4, 1], [0, 2, 3, 2, 0, 0], [0], [], [1, 1, 0, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [8, 6, 0, 3, 4, 4, 2, 9, 4, 1, 4, 5, 1, 4, 6, 4, 7, 9, 8, 3, 9, 1, 0, 4, 4, 2, 8, 5, 3, 5, 1, 1, 7, 1, 9, 3, 5, 0, 1, 5, 3, 0, 0, 5, 9, 6, 2, 6, 5, 5, 9, 5, 7, 7, 0, 2, 8, 9, 0, 3, 8, 4, 1, 9, 3, 4, 2, 3, 7, 5, 6, 2, 8, 5, 0, 2, 9, 2, 4, 9, 4, 1, 8, 7, 6, 5, 2, 4, 3, 2, 3, 4, 6, 0, 0], [2, 1, 2, 1, 2, 0, 1, 2, 1, 1, 0, 1, 0, 2, 0, 1, 0, 1, 1, 1, 1, 2, 1, 2, 0, 0, 2, 0, 1, 1, 0, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 2, 0, 2, 1, 2, 0, 1, 0, 2, 0, 2, 0, 0, 2, 0, 1, 2, 1, 1, 2, 2, 1, 0, 0, 2, 0, 0, 1, 0, 1, 0, 1, 2, 1, 2, 2, 2], [1, 0, 1, 1, 1], [0, 3, 3, 2, 1, 3, 3, 3, 0, 0, 1, 1, 1, 1, 0, 3, 1, 0, 3, 1, 3, 1, 2, 1, 1, 3, 1, 2, 3, 3, 3, 0, 0, 3, 2, 0, 2, 3, 0, 1, 0, 1, 3, 3, 2, 0, 1, 2, 3, 0, 3, 1, 1, 1, 2, 3, 0, 3, 1, 0, 3, 3, 0, 3, 2, 1, 1, 2, 2, 0, 2, 0, 3, 0, 0, 3, 2, 0, 3, 2, 0, 3, 1, 3, 0, 0, 2, 2, 2, 2, 3, 1, 1, 0, 2, 3, 0, 1, 3, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 3, 1, 2, 2, 2, 3, 3, 2, 2, 0, 3, 0, 3, 3, 2, 3, 1, 3, 0, 0, 0, 1, 0, 1, 1, 2, 2, 2, 1, 1, 0, 3, 3, 2, 2, 3, 0, 3, 1, 1, 2, 2, 1, 0, 2, 2, 2, 2, 1, 2, 2, 2, 0, 0, 1, 1, 3, 0, 2, 0, 1, 2, 0, 2, 1, 0, 2, 2, 0, 3, 3, 1, 0, 0, 2, 3, 3, 3, 0, 1, 3, 1, 1, 0, 3, 2, 1, 0, 1, 0, 3, 3, 0, 0, 3, 1, 0, 2, 3, 3, 1, 1, 2, 2, 1, 2, 3, 2, 2, 0, 3, 1, 3, 3, 1, 3, 0, 1, 0, 0, 3, 0, 2, 0, 0, 3, 0, 1, 1, 2, 3, 0, 2, 3, 2, 3, 1, 0, 0, 2, 1, 3, 1, 0, 2, 3, 1, 1, 2, 1, 1, 0, 1, 3, 1, 2, 1, 2, 1, 3, 0, 1, 1, 2, 3, 3, 1, 1, 0, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 1, 0, 2, 0, 0, 1, 3, 1, 3, 3, 2, 2, 0, 2, 0, 3], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [3, 4, 0, 1, 1, 1, 0, 4, 2, 2, 2, 4, 4, 3, 1, 1, 1, 2, 4, 1, 1, 0, 3, 0, 1, 2, 4, 0, 0, 0, 2, 2, 3, 1, 0, 4, 4, 0, 4, 4, 3, 3, 3, 1, 1, 3, 2, 1, 3, 2, 3, 3, 4, 0, 1, 1, 0, 2, 0, 0, 4, 4, 1, 2, 1, 0, 1, 2, 2, 2, 1, 4, 2, 0, 0, 1, 4, 4], [0, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 0, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 0, 1, 0, 1, 0, 2, 0, 1, 2, 1, 1, 0, 2, 0, 2], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0], [4, 0, 0, 2, 3, 3, 2, 1, 0, 4, 4, 5, 0, 3, 2, 3, 5, 5, 5, 0, 3, 2, 0, 0, 4, 3, 0, 4, 5, 4, 1, 1, 1, 1, 2, 3, 3, 4, 0, 3, 2, 0, 2, 1, 1, 3, 2, 5, 2], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0], [4, 3, 0, 0, 2, 4, 3, 0, 3, 4, 4, 2, 0, 0, 4, 3, 0, 1, 2, 3, 4, 1, 1, 3, 3, 1, 3, 4, 4, 1, 3, 2, 0, 2, 0, 1, 0, 0, 2, 4, 1, 1, 0, 1, 0, 4, 0, 4, 2, 4, 4, 1, 0, 4, 1, 4, 2, 4, 1, 4, 0, 2, 1, 1, 2, 2, 0, 4, 2, 2, 1, 0, 2, 4, 0, 1, 0, 0, 4, 4, 0, 4, 2, 0, 1, 1, 0, 0, 3, 2, 1, 0, 3, 0, 3, 2, 4, 2, 4, 4, 3, 3, 4, 2, 2, 0, 0, 1, 1, 1, 1, 0, 2, 1, 3, 1, 1, 1, 1, 0, 3, 1, 0, 2, 4, 1, 3, 1, 1, 0, 2, 1, 3, 3, 4, 4, 4, 4, 4, 2, 4, 1, 0, 1, 1, 4, 4, 2, 0, 2, 0, 0, 1], [3, 1, 0, 1, 3, 1, 1, 2, 2, 2, 2, 3, 3, 0, 3, 2, 1, 0, 1, 0, 2, 1, 1, 1, 0, 2, 3, 1, 3, 2, 0, 3, 0, 0], [1, 5, 4, 5, 5, 5, 3, 4], [0, 0, 1, 0, 2, 1, 0, 2, 2, 2, 0, 2, 1, 1, 1, 1, 2, 0, 0, 1, 1, 1, 0, 2, 2, 2, 0], [1, 0, 3, 1, 0, 3, 3, 0, 2, 0, 0, 1, 3, 0, 0, 1, 2, 0, 0, 0, 3, 1, 0, 3, 0, 3, 0, 1, 2, 1, 0, 3, 0, 2, 0, 3, 3, 3, 2, 3, 3], [22, 3, 11, 16, 24, 24, 20, 14, 9, 11, 17, 11, 14], [4, 6, 20, 13, 14, 8, 11, 12], [5, 1, 5, 8, 1, 4], [4, 21, 24, 11, 29, 25, 19, 7, 3, 4, 13, 13, 27, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 19, 19, 9, 10, 1, 7, 0, 0, 4, 6, 15, 6, 5, 4, 1, 0, 4, 51, 51, 53, 1, 189, 46, 50, 23, 24, 31, 20, 1, 88, 22, 5, 15, 20, 10, 4, 2, 4], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (s0 + s0).rstrip()\\nif saveChr(i2)[len((s2 + (getCharFromString(saveChr(saveOrd(in0[( int(8.0) + min(max(max(i1, i2), int(6.0)), int(0.0)) ):int(3.0)])), int(44.0)) + in0))):i1] == (s2 + \"\"e\"\").strip((saveChr(max(int(29.0), i2)) + \"\"W!g\"\")[:min(int(414.0), saveOrd(\"\"D\"\"))]):{:\\nloopBreak% = 0\\nwhile res0:{:\\ns1 = ((\"\"<\"\" + (saveChr(int(5.0)) + \"\"?\"\".capitalize())) + (s0[( int(146.0) + int(4.0) ):abs(int(79839.0))] + in1[( abs(abs(saveOrd(\"\"L\"\"))) + i0 ):]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile in1 in in2:{:\\nif \"\"5\"\".capitalize()[:i1] not in \"\"Q\"\":{:\\ns0 = in0\\ns2 = \"\"Y\"\"\\nloopBreak% = 0\\nwhile in0 != in2.capitalize():{:\\nif saveOrd(\"\"u\"\".strip(in2).rstrip(getCharFromString(\"\"(\"\", divInt(i2,mod(len(\"\"Y\"\".capitalize()[i1:].strip(saveChr(int(1.0)))),i1))))[int(0.0):max(max(( i0 * int(4.0) ), ( max(i1, abs(int(4.0))) + int(2.0) )), int(8.0))].capitalize()) != mod(saveOrd(in2),i0):{:\\nb2 = not max(int(5.0), i2) \\g max(min(i0, len(\"\"U\"\"[mod(int(3.0),int(5.0)):])), divInt(divInt(i1,divInt(i0,min(i1, i1))),max(divInt(i1,abs(( i1 - saveOrd(\"\"n\"\") ))), int(1.0))))\\n:}\\nif ( not s0[min(i2, i1):( mod(( ( min(int(1.0), int(7.0)) + i2 ) - ( min(i0, int(1.0)) + abs(i0) ) ),i2) * i0 )][i1:].startswith(getCharFromString(\"\"1\"\"[:i1][abs(i0):], ( i1 + i1 ))) and len(in0) \\g int(9.0) ):{:\\nloopBreak% = 0\\nwhile divInt(divInt(( max(min(mod(mod(i2,saveOrd(saveChr(i1)[:saveOrd(s2)])),min(mod(saveOrd(\"\"O\"\"),int(3.0)), saveOrd(s0))), i1), i2) + i2 ),int(5.0)),i2) == int(0.0):{:\\nres0 = int(1.0) \\ge ( divInt(mod(int(5.0),int(3.0)),i1) * len(s0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = getCharFromString(in0.capitalize(), len(saveChr(mod(( len(s0[:i1]) - max(int(0.0), int(0.0)) ),( ( int(5.0) - i0 ) * divInt(mod(mod(( int(9.0) * ( ( divInt(i2,i1) - int(6.0) ) - int(2.0) ) ),max(i1, ( i0 * int(6.0) ))),( i0 * ( int(5.0) * i2 ) )),mod(mod(i0,len(\"\"J\"\")),abs(int(5.0)))) )))))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = \"\"L\"\"\\nb2 = i2 == i1\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in in1:{:\\ni2 *= divInt(max(len(s1), abs(i0)),int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 0, 0, 2, 2, 0, 2, 2, 2, 0, 1, 2, 1, 0], [1, 2, 1, 1, 2, 2, 0], [2, 1, 0, 2, 1, 0, 0, 2], [0], [0, 0, 0, 0, 0], [], [], [1, 3, 3], [2, 4, 4, 2, 3, 1, 1], [1, 1, 2, 0, 1, 2, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [4, 1], [2, 3, 1], [1], [1], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [9, 6, 6, 3, 7, 4, 3, 7, 0, 1, 4, 4, 6, 9, 1, 2, 4, 3, 5], [2, 1, 0, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 2], [0, 0], [0, 0, 3, 1, 1, 3, 1, 2, 2, 3, 1, 1, 1, 1, 3, 1, 1, 3, 3, 1, 1, 3, 2, 2, 1, 3, 0, 0, 2, 3, 2, 1, 3, 0, 0, 0, 1, 3, 3, 3, 0, 0, 0, 0, 0, 3, 2, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0], [2, 3, 2, 0, 1, 2, 3, 0, 3, 4, 3, 4, 2, 2, 4], [0, 2, 1, 0, 1], [0, 0, 0], [5, 3, 5, 0, 3, 2, 3, 4, 1, 3, 5, 4, 4, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [1, 0, 4, 4, 4, 2, 0, 1, 2, 2, 0, 2, 4, 0, 0, 4, 2, 4, 1, 4, 1, 0, 0, 1, 1, 4, 4, 4, 4, 2, 1, 2, 2, 1, 4, 2, 1], [2, 0, 2, 0, 0, 3, 3, 0, 1, 2, 0, 2], [2, 0], [2, 2, 1, 2, 0, 1, 0, 2], [1, 1, 0, 1, 3, 3, 0, 0, 1], [12, 2], [14, 7, 22, 5, 18], [], [8, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 15, 15, 7, 8, 1, 5, 0, 0, 3, 7, 12, 7, 2, 3, 1, 1, 3, 19, 19, 15, 2, 52, 7, 14, 4, 3, 11, 6, 1, 27, 9, 2, 5, 6, 1, 3, 0, 2], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = \"\"o\"\"\\nif i2 == i1:{:\\ni0 = abs(int(9.0))\\nb1 = int(6.0) \\le len(in0)\\n:}else:{:\\nloopBreak% = 0\\nwhile getCharFromString(in2[int(6.0):].capitalize(), divInt(( abs(int(3.0)) + int(7.0) ),int(4.0))).capitalize().startswith(\"\"h\"\"):{:\\nif not int(3.0) \\le min(int(7.0), int(0.0)):{:\\ns0 = in0[:max(abs(int(1.0)), int(4.0))][len(getCharFromString(s2, ( ( int(4.0) * min(i2, i2) ) - divInt(len(in0),divInt(int(6.0),saveOrd(getCharFromString(\"\"M\"\".strip()[i2:i2], i1)))) ))[int(9.0):]):]\\n:}else:{:\\nif \"\"w\"\".lstrip() not in in1:{:\\nloopBreak% = 0\\nwhile len(s1) == saveOrd(\"\"%\"\"):{:\\nloopBreak% = 0\\nwhile abs(i2) \\ge i1:{:\\ni2 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = i1 \\g i1\\nloopBreak% = 0\\nfor in0 in \"\"(\"\":{:\\nres0 = ( abs(( int(1.0) + int(2.0) )) \\g i2 or False )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = getCharFromString(saveChr(int(43.0)), int(5.0))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [1, 0, 2], [], [0, 0], [], [], [1], [], [2], [], [5], [], [], [], [], [1, 0, 1, 0, 1, 0, 0, 1, 1], [3, 6, 8, 3, 7, 5, 9, 2, 4], [2, 1, 2, 1, 2], [0], [0, 1, 3, 1, 1, 2, 0, 1, 2, 1, 0, 0], [1, 0], [2], [0], [0], [3, 1, 5, 1, 1, 4], [1], [], [0, 4, 2, 4, 0, 3, 3, 2, 1, 3, 0, 4, 0, 4, 4, 0], [3, 1, 3, 0, 1], [5, 3], [0, 2], [2], [], [], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 5, 1, 12, 2, 1, 1, 1, 6, 1, 0, 16, 5, 2, 2, 1, 0, 0, 1, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\nb1 = in0.endswith(saveChr(int(3.0))[abs(int(68.0)):int(37.0)].strip(s1))\\nin2 = ((\"\"0\"\"[divInt(i2,int(592.0)):] + (s1 + s1.lstrip(getCharFromString(saveChr(( int(4.0) + i1 )), i2)))) + in1)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 2, 0, 2, 0, 2, 1, 1, 0, 0, 2, 2, 1, 2, 0, 1], [2, 2, 2, 0, 2, 1, 2], [1, 2, 1, 1, 2, 2, 1, 1, 0], [0], [0, 0, 0, 0, 0], [], [], [3, 3, 0], [3], [0, 0, 2, 0, 2, 2, 1], [0], [0, 5, 1], [0, 0, 1], [], [0], [1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [5, 8, 0, 4, 6, 7, 1, 4, 8, 8, 8, 0, 3, 9, 6, 4, 4, 4, 3, 5, 9, 1, 0, 8], [0, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 0], [1, 1, 1, 0, 0], [1, 3, 3, 1, 0, 1, 2, 2, 2, 0, 1, 3, 0, 1, 0, 0, 1, 2, 1, 1, 2, 1, 1, 3, 1, 3, 3, 1, 1, 1, 0, 3, 1, 1, 2, 3, 1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0], [0, 2, 0, 0, 4, 4, 2, 3], [1, 0, 0, 0, 2, 2, 1], [0, 0], [4, 3, 2, 1, 2, 1, 3, 3, 0, 4, 1, 5, 0, 3], [0, 1, 1, 1, 1, 1, 1], [0], [1, 2, 0, 2, 0, 0, 0, 2, 1, 1, 3, 3, 4, 2, 1, 4, 4, 4, 0, 2, 1, 4, 4, 4, 4, 4, 0, 0, 2, 2, 0, 0, 4, 1, 0], [3, 2, 0, 0, 0, 3, 0, 0, 2, 1], [3, 4], [1, 2, 1, 1, 2, 0, 0], [2, 2, 1, 1, 0, 2, 0], [9, 24], [3, 1], [3, 2, 6], []], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 7, 9, 1, 5, 0, 0, 3, 1, 7, 1, 3, 3, 0, 1, 1, 24, 24, 14, 5, 42, 6, 8, 7, 2, 14, 7, 1, 35, 10, 2, 7, 7, 2, 2, 3, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\nloopBreak% = 0\\nwhile res0:{:\\ni0 -= int(58.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile \"\"32\"\" in in1[:min(abs(int(04.0)), i2)]:{:\\nin0 = s2[int(67.0):]\\nloopBreak% = 0\\nfor s1 in s2:{:\\ni2 += ( divInt(divInt(i1,int(1.0)),min(i1, int(4.0))) + i1 )\\ni2 += i1\\ns1 = in0\\nin0 = \"\"d\"\"[:int(88.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile True:{:\\nif \"\"b\"\".endswith(((\"\"J\"\"[:( int(8.0) * int(0.0) )].lstrip(getCharFromString(getCharFromString(s0, ( int(3.0) * int(9.0) )), min(int(6.0), saveOrd(\"\"6\"\"[saveOrd(getCharFromString(getCharFromString(getCharFromString(in1.capitalize(), int(4.0)), int(4.0)).rstrip(s1), int(4.0))):]))).capitalize()) + in2[i2:abs(int(3.0))][int(5.0):( len(s0) - int(9.0) )]) + saveChr(int(1.0)))):{:\\ni1 = int(08.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile \"\"Y\"\" not in in0:{:\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb0 = i2 \\ge i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0], [], [], [1], [], [0], [0], [], [1], [], [1], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [7, 7, 2, 3, 4, 9, 5, 3, 8, 8, 1, 7, 7, 2, 7, 0, 5, 8, 8, 3, 3, 2], [2, 1, 0, 2, 0, 0, 2, 0, 0, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1], [], [3, 3, 3, 3, 1, 2, 2, 0, 3, 1, 2, 2, 2, 3, 2, 2, 0, 0, 1, 1, 2, 3, 2, 3, 0, 0, 2, 2, 2, 2, 2, 0, 1, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 2, 1, 3, 0, 1, 3, 2, 2, 2, 2, 1, 0, 1, 3, 3, 0, 1, 2, 1, 3, 3, 1, 3, 0, 2, 3, 1, 3, 1, 1, 1, 1, 1, 1, 2, 0, 0, 2, 1, 3, 2, 0, 0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [4, 4, 3, 0, 2, 1, 0, 1, 2, 4, 0, 2, 0, 1, 2, 1, 1, 0, 4], [2, 0, 1, 1, 2, 0, 0, 1, 2, 0, 1, 0, 1, 2, 1, 1, 0], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1], [4, 5, 5, 3, 0], [1, 1], [], [4, 4, 2, 0, 0, 1, 2, 2, 4, 1, 4, 0, 0], [0, 0, 3, 1], [3], [2, 1, 2], [2, 3], [], [], [9], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 22, 22, 19, 0, 86, 28, 19, 17, 11, 5, 2, 0, 13, 4, 1, 3, 2, 0, 0, 1, 1], "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\nin1 = getCharFromString(getCharFromString(in2[saveOrd(in2):], saveOrd(\"\"9\"\")), len(\"\"\"\".lstrip(saveChr(min(int(77.0), mod(( i2 * abs(int(2.0)) ),( mod(( max(divInt(divInt(i1,i0),int(3.0)), int(4.0)) + ( min(( max(i2, i0) - ( ( ( divInt(( i0 - int(9.0) ),mod(( abs(divInt(( i2 * i0 ),i0)) + i2 ),i2)) + divInt(int(5.0),saveOrd(in0)) ) - i1 ) * int(3.0) ) ), min(divInt(( ( mod(int(8.0),i0) + int(8.0) ) - abs(min(i2, int(1.0))) ),mod(int(7.0),max(abs(int(7.0)), max(i1, ( max(int(2.0), min(int(7.0), int(0.0))) + int(5.0) ))))), int(8.0))) - int(8.0) ) ),int(3.0)) * ( i1 - i1 ) )))))[( int(32.0) - saveOrd(s0) ):][:( i1 + i1 )]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 2, 0, 1, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 1, 0, 0, 2, 1, 1, 2, 0, 0, 2, 0, 1, 1, 1, 1], [2, 0, 1, 1, 1, 2, 0, 2, 0, 0], [1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 2, 0, 2, 0, 1, 2, 2, 1, 2, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 1, 3, 3, 1, 3, 2], [3, 2, 2, 2, 4, 3, 5], [1, 1, 1, 0, 2, 2, 2, 2, 2, 1, 1, 1, 0, 2, 0, 0, 1, 2], [0, 0, 0, 0, 0, 0, 0], [2, 4, 5, 1, 1, 4, 1], [1, 3, 3, 2], [0, 1], [1], [1, 1, 1], [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [6, 0, 6, 7, 7, 0, 2, 8, 8, 2, 9, 0, 1, 4, 0, 3, 8, 8, 7, 6, 2, 7, 0, 2, 4, 3, 4, 3, 1, 6, 5, 7, 2, 4, 8, 1, 2, 9, 1, 0, 6, 8, 8, 2, 5, 4, 3, 3, 9, 3, 3, 6, 4, 2, 6, 0, 4, 5, 3, 9, 9, 1, 4, 3, 9, 6, 6, 8, 0, 7, 6, 4, 1, 7, 7], [0, 0, 1, 2, 0, 0, 1, 1, 0, 2, 1, 0, 1, 2, 1, 0, 0, 1, 0, 1, 2, 1, 2, 2, 0, 2, 0, 2, 2, 2, 2, 1, 1, 1, 2, 1, 0, 2, 2, 0, 1, 0, 2, 0, 2, 1, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 2, 2, 1, 2, 2, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 0, 2, 0, 0, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0], [1, 2, 0, 0, 1, 1, 2, 2, 3, 0, 0, 2, 1, 2, 3, 0, 3, 2, 2, 0, 3, 0, 1, 1, 2, 3, 0, 2, 1, 0, 2, 0, 1, 3, 3, 0, 2, 1, 0, 3, 2, 1, 2, 0, 1, 2, 0, 1, 1, 0, 0, 3, 2, 2, 0, 0, 2, 0, 0, 3, 0, 2, 0, 2, 0, 1, 0, 3, 2, 1, 2, 2, 0, 1, 1, 1, 3, 2, 3, 3, 1, 2, 0, 0, 0, 3, 3, 2, 3, 3, 1, 1, 3, 1, 3, 0, 3, 3, 3, 0, 2, 0, 1, 1, 3, 1, 2, 1, 3, 3, 0, 0, 0, 0, 1, 1, 3, 1, 0, 1, 2, 3, 2, 1, 0, 2, 3, 2, 2, 0, 3, 0, 2, 0, 2, 0, 3, 3, 3, 2, 3, 1, 3, 2, 0, 0, 0, 1, 2, 3, 2, 2, 0, 3, 3, 1, 2, 1, 1, 1, 2, 3, 0, 3, 0, 1, 3, 3, 1, 1, 0, 2, 1, 3, 2, 1, 3, 0, 3, 1, 2, 1, 3, 1, 3, 0, 0, 0, 0, 2, 2, 2, 1, 3, 2, 1, 3, 3, 3, 2, 0, 0, 3, 1, 3, 3, 0, 2, 0, 3, 1, 3, 3, 2, 3, 3, 1, 1, 3, 1, 3, 1, 0, 2, 1, 1, 2, 0, 3, 2, 2, 2, 0, 0, 2, 3, 1, 2, 0, 2, 3, 1, 0, 2, 1, 1, 2, 2, 1, 3, 3, 2, 2, 0, 3, 3, 0, 3, 1, 0, 0, 1, 1, 3, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0], [4, 1, 1, 3, 1, 4, 0, 1, 2, 3, 4, 4, 0, 3, 3, 2, 4, 1, 0, 0, 2, 0, 1, 3, 4, 3, 1, 0, 1, 3, 2, 2, 3, 1, 1, 4, 1, 2, 3, 0, 2, 0, 4, 2, 1, 3, 4, 2, 1, 4, 4, 4, 1, 3, 2, 0, 2, 1, 4, 1, 2, 1, 3, 3, 3, 3, 4, 2, 0, 4], [2, 1, 1, 2, 1, 1, 1, 2, 1, 0, 0, 0, 1, 0, 0, 1, 2, 2, 2, 2, 1, 0, 1, 2, 2, 0, 0, 0, 1, 2, 1, 2, 0, 2], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0], [0, 0, 1, 2, 3, 2, 3, 2, 0, 3, 2, 2, 3, 3, 0, 1, 1, 0, 2, 5, 2, 0, 4, 5, 5, 0, 4, 2, 2, 1, 3, 5, 1], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0], [4, 0, 0, 0, 0, 3, 1, 1, 3, 3, 4, 4, 0, 4, 1, 2, 4, 1, 1, 4, 3, 1, 4, 2, 1, 0, 1, 2, 2, 3, 2, 0, 4, 0, 2, 4, 2, 1, 0, 1, 2, 1, 1, 4, 1, 1, 0, 4, 2, 2, 2, 0, 2, 2, 1, 0, 4, 2, 2, 4, 2, 1, 0, 2, 0, 2, 4, 4, 0, 1, 2, 4, 4, 1, 2, 0, 4, 2, 4, 1, 1, 1, 1, 3, 1, 4, 0, 0, 1, 1, 4, 1, 4, 4, 1, 4, 1, 2, 2, 4, 4, 1, 4, 4, 4, 1, 1, 1, 4, 2, 2, 1, 1, 2, 3, 0, 0, 2, 0, 3, 4, 1, 0, 0, 1], [2, 3, 3, 0, 0, 1, 0, 2, 0, 3, 2, 3, 1, 2, 0, 2, 3, 2, 1, 0, 3, 1, 3, 3, 2, 0, 0, 3, 1, 2, 3], [5, 3, 0, 0, 1, 1, 0, 0, 1, 2], [0, 2, 0, 0, 2, 0, 1, 0, 2, 2, 1, 2, 0, 1, 1, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2], [3, 2, 2, 2, 3, 2, 3, 3, 1, 3, 1, 0, 0, 0, 3, 3, 2, 1, 0, 0, 3, 2, 0, 1, 3, 3, 0, 2, 2, 2, 3, 2, 2, 1, 3, 1, 0, 2, 0, 3, 0, 2, 2, 2], [3, 13, 2, 5, 17, 19, 19, 1, 17, 0], [25, 1, 6, 5, 17, 12], [5, 5, 0, 6, 2, 0, 0, 8, 6, 0, 5, 3, 4, 9, 3], [24, 12, 15, 7, 25, 17, 25, 26, 31, 27, 7, 17, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 31, 31, 10, 21, 4, 13, 0, 0, 7, 7, 18, 7, 7, 4, 2, 1, 3, 75, 75, 77, 8, 266, 64, 70, 34, 35, 33, 44, 4, 125, 31, 10, 27, 44, 10, 6, 15, 13], "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(6.0)\\nloopBreak% = 0\\nwhile ( i0 * i1 ) \\ge int(0.0):{:\\nb0 = int(6.0) == ( ( saveOrd(s0.capitalize()) - i2 ) - i0 )\\nb1 = mod(int(770.0),mod(max(i0, max(mod(mod(i1,len(s0)),i1), int(2.0))),int(8829.0))) == ( max(i0, mod(int(014.0),i2)) * ( i1 - int(0.0) ) )\\nloopBreak% = 0\\nfor s1 in s2:{:\\nif False:{:\\ni0 -= saveOrd(in0)\\n:}else:{:\\ni1 -= min(i2, mod(int(3.0),i1))\\ns2 = (\"\"?\"\" + \"\"5\"\")\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ((in0.lstrip(getCharFromString(\"\"5\"\", max(( int(8.0) * divInt(i0,int(8.0)) ), ( i0 - int(7.0) )))).strip(getCharFromString(\"\"0\"\", int(6.0))[i1:i0]) + \"\")6\"\") + saveChr(abs(( mod(i1,i2) + mod(i1,i2) )))) == (\"\",$z\"\" + getCharFromString(\"\"@b\"\"[len(s2):], i2)):{:\\nif \"\"DNC\"\".startswith((s0[divInt(i0,divInt(i2,int(2.0))):] + in0.capitalize())[i0:saveOrd(getCharFromString(\"\".\"\"[:divInt(int(7.0),divInt(divInt(i2,int(0.0)),int(2.0)))], int(4.0))[saveOrd(s2):( min(len(\"\"@\"\"), int(3.0)) + ( i2 + i2 ) )])][i2:len(\"\"2\"\"[abs(mod(saveOrd(\"\"g\"\"),max(int(4.0), int(3.0)))):min(int(1.0), min(i1, abs(min(max(i1, ( i1 - int(6.0) )), int(5.0)))))])]):{:\\ni2 = len(\"\"F\"\".lstrip())\\n:}else:{:\\ni1 += int(7.0)\\nres0 = \"\"R\"\".endswith(s2)\\nloopBreak% = 0\\nwhile in0[:mod(int(2.0),saveOrd(\"\"[\"\"[len(in0):i0][i2:]))][i2:][i0:].capitalize() not in saveChr(int(4.0))[:int(8.0)][:max(int(1.0), i1)].lstrip():{:\\nloopBreak% = 0\\nfor s0 in \"\"0\"\"[int(2.0):]:{:\\nres0 = s1 not in s1[( min(mod(int(9.0),i0), ( max(( mod(i2,len(getCharFromString(s0, i0).capitalize()[divInt(i2,( i1 + abs(abs(len(\"\"T\"\"))) )):])) - ( max(int(1.0), max(( i0 * i2 ), i0)) * int(0.0) ) ), divInt(saveOrd(\"\"f\"\".rstrip().capitalize()[mod(mod(i0,max(abs(int(6.0)), ( int(8.0) * int(8.0) ))),int(2.0)):]),( len(s2[i1:]) * min(i0, int(5.0)) ))) - abs(min(int(4.0), int(3.0))) )) + i2 ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = saveChr(( int(3.0) - saveOrd(\"\"`\"\") ))[divInt(int(9.0),abs(i2)):].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = max(int(3.0), ( int(3.0) * len(\"\"\\\\\\\\\"\") )) == int(6.0)\\nloopBreak% = 0\\nwhile saveOrd(\"\"T\"\") \\le i0:{:\\ns2 = \"\"0\"\"\\nres0 = i2 \\ge i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nfor s0 in (\"\"86\"\" + getCharFromString(in1, i2)):{:\\ni1 *= ( divInt(mod(int(4.0),abs(( int(2.0) + max(saveOrd(in2), saveOrd(\"\"$\"\")) ))),( i2 + i2 )) + saveOrd(\"\"0\"\") )\\nin2 = \"\"5\"\".rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nfor s0 in saveChr(int(6.0)):{:\\nin1 = \"\"r\"\".lstrip()\\ni1 -= max(len(\"\".\"\".lstrip()), i0)\\ns2 = getCharFromString(\"\"m\"\", divInt(i1,abs(int(0.0)))).capitalize()[min(abs(( max(saveOrd(getCharFromString(saveChr(int(4.0)).rstrip(), int(5.0))), max(int(3.0), abs(int(9.0)))) * i1 )), mod(int(9.0),int(1.0))):][divInt(i1,max(mod(( divInt(i0,i1) - ( len(\"\"B\"\") * int(4.0) ) ),divInt(i1,mod(len(\"\"3\"\"),int(3.0)))), i2)):( int(9.0) + int(6.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = divInt(mod(int(6807.0),len(\"\"R\"\")),len(\"\"-\"\"[divInt(( i0 * saveOrd(\"\"A\"\") ),abs(i2)):][min(int(6.0), i0):i0].capitalize()))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( (s2 + s1)[int(417.0):int(7.0)].startswith(in0[saveOrd((\"\"4\"\".strip() + in2)):]) and ( not i0 != i0 or s1 not in \"\"93\"\" ) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 1, 2, 0, 0], [2, 1], [1, 1, 2], [], [0, 0], [], [], [], [5, 2], [1, 1], [0, 0], [1], [], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 0, 3, 4, 0, 1, 8, 1, 8, 1], [0, 0, 1, 0, 0, 1, 1, 1, 2, 1, 0, 1, 1, 0, 1], [0, 1], [3, 0, 2, 3, 0, 3, 1, 1, 3, 3, 0, 1, 1, 3, 3, 3, 2, 3, 1, 1, 2, 0, 3, 2, 3, 0, 1, 1, 3, 3, 3, 1, 0, 2, 3, 2, 2, 0, 3, 3, 0, 3, 0, 3, 0, 2, 0, 1, 0, 2, 0, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 3, 2, 1, 0, 4, 0, 1, 0, 1, 4, 4, 2, 0, 2, 2, 2, 0, 4], [2, 2, 1, 2, 1, 0], [1, 0, 0, 0, 1, 1], [0, 1, 1, 0, 0], [1], [], [2, 4, 0, 2, 0, 2, 0, 0, 1, 4, 0], [1, 3], [2], [1, 1, 2], [3], [], [], [], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 2, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 10, 10, 14, 2, 49, 8, 19, 6, 3, 5, 1, 0, 9, 1, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(i0, ( len(saveChr(i0)[:abs(int(1.0))]) * int(5.0) )) != max(min(i1, int(2.0)), int(0.0)):{:\\ni0 = saveOrd(s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif min(max(mod(min(int(3.0), int(4.0)),( i0 * max(divInt(saveOrd(s1[:i1]),int(0.0)), int(1.0)) )), saveOrd(s1[abs(min(int(8.0), i1)):])), ( abs(( ( i1 - abs(abs(i2)) ) * min(i1, saveOrd(s0)) )) - i0 )) == divInt(i1,int(1.0)):{:\\ni1 += i0\\n:}else:{:\\ns0 = \"\"*\"\"\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 9, 0, 3, 3], [1, 2, 2, 0], [], [2, 3, 1, 2, 1, 1, 3, 3, 0, 0, 0, 3, 1, 3, 0, 1], [1, 0], [1, 1, 4, 4, 4], [1], [1], [1, 4, 3, 1, 1, 3], [1, 1, 1], [], [2, 2, 0, 3, 3, 4, 3, 2, 2, 0, 2, 0, 2, 1, 1, 4, 4, 1, 0, 0], [3, 3, 3], [0, 2, 5], [2, 0, 0, 1, 1, 2], [1, 0, 2], [24], [4], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 4, 0, 16, 2, 5, 1, 1, 6, 3, 0, 20, 3, 3, 6, 3, 1, 1, 1, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1[mod(max(int(0.0), ( int(9.0) - int(0.0) )),max(saveOrd((((in0[:i1][i2:i2] + s1[:saveOrd(\"\"e\"\"[int(3.0):])]).lstrip() + \"\"Y\"\") + \"\"7\"\".strip(s1).strip())), saveOrd(in0))):i0][int(3.0):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [2, 1, 2, 2, 0, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 0, 2, 0, 0, 2, 1, 2, 1, 1, 1], [1, 1, 2, 2, 0, 2, 1, 1, 0, 2, 1, 1, 0], [1, 0, 0, 2, 2, 1, 1, 1, 2, 0, 2, 0], [0, 0, 0], [0, 0, 0, 0], [], [], [0, 2, 1, 0, 0, 0], [4, 0, 0, 5], [1, 1, 2, 2, 0, 0, 1, 2, 2, 0, 0, 1, 0, 2, 0, 2], [0, 0, 0, 0], [3, 5, 1, 2, 1, 2], [0, 1, 0, 2, 2, 1], [], [1, 0], [1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 1, 5, 8, 5, 3, 7, 1, 5, 3, 8, 9, 1, 9, 4, 1, 0, 3, 4, 6, 2, 2, 8, 8, 8, 3, 1, 7, 2, 7, 4, 1, 6], [2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 0, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 1, 2, 1, 1, 0, 2, 1, 1], [0, 1, 0, 1], [0, 2, 3, 3, 2, 0, 2, 3, 1, 1, 2, 2, 0, 0, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 2, 1, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 1, 2, 0, 2, 2, 0, 0, 2, 3, 0, 0, 2, 2, 0, 0, 1, 3, 2, 2, 2, 2, 3, 0, 1, 1, 1, 0, 3, 3, 3, 1, 1, 2, 2, 1, 1, 2, 2, 0, 0, 2, 1, 1, 3, 0, 0, 2, 0, 2, 0, 0, 1, 1, 2, 0, 0, 0, 2, 2, 2, 2, 1, 2, 1, 0, 0, 1, 1, 3, 0, 1, 2, 3, 2, 2, 2, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0], [3, 4, 3, 1, 4, 4, 1, 0, 3, 4, 3, 3, 1, 0, 4], [0, 0, 1, 0, 1, 2, 0, 1, 0, 0, 1, 0, 1, 2, 0, 0, 2, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0], [2, 5, 5, 3, 5, 4, 0, 0, 2, 5, 0, 2, 2, 4, 4, 1, 4, 0, 2], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0], [0, 4, 1, 2, 1, 3, 3, 4, 0, 2, 0, 4, 4, 1, 1, 4, 3, 0, 4, 1, 1, 2, 1, 3, 1, 2, 2, 1, 0, 2, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 4, 4, 2, 1, 0, 4, 1, 3, 1, 2, 1, 4], [1, 2, 0, 3, 0, 0, 2, 1, 0, 1], [2], [2, 1, 0, 0, 2, 0, 1, 0], [3, 2, 3, 1, 2, 2, 3, 3, 3, 3, 1, 1, 3, 2, 2, 3, 3, 0, 0, 3, 0, 0, 3, 0], [4, 21, 19, 4, 2], [11, 21, 4], [4, 8, 5, 0, 3], [14, 5, 14, 15, 27, 28, 20, 11, 20, 29, 1]], "fitness": 9223372036854775807, "mapping_values": [1, 25, 25, 13, 12, 3, 4, 0, 0, 6, 4, 16, 4, 6, 6, 0, 2, 6, 33, 33, 41, 4, 117, 38, 15, 23, 17, 19, 24, 3, 54, 10, 1, 8, 24, 5, 3, 5, 11], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i2 \\le ( len(s2) + saveOrd(saveChr(( i2 + ( len(\"\"+4\"\") - int(31.0) ) ))) ):{:\\ni2 = int(5.0)\\nif ( divInt(i2,i2) + max(i1, i2) ) \\l ( int(85.0) - i2 ):{:\\nloopBreak% = 0\\nwhile \"\"\"l\"\"[i2:] != ((in2.capitalize() + in2[:divInt(i1,saveOrd(getCharFromString(\"\"8\"\".strip(), divInt(int(3.0),saveOrd(\"\"5\"\")))))]) + getCharFromString((in0 + getCharFromString(\"\"+\"\", ( divInt(divInt(int(7.0),int(1.0)),int(5.0)) * i1 ))), i2)):{:\\nb0 = \"\",\"\".endswith(\"\"\\\\\\\\\"\"[i1:int(3.0)])\\nb2 = b1\\nloopBreak% = 0\\nwhile False:{:\\nin2 = (\"\"]v\"\" + \"\"e\"\"[( i0 + mod(mod(i2,i2),( max(i2, i1) - mod(( i0 + i2 ),int(8.0)) )) ):][min(divInt(mod(( ( len(in1) + i2 ) - int(9.0) ),int(1.0)),int(9.0)), i2):saveOrd(s0[len(\"\";\"\"):len(s0)])])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nfor s2 in \"\"0\"\":{:\\nloopBreak% = 0\\nwhile int(41.0) \\l int(03.0):{:\\nif in2 not in s0:{:\\nif \"\"3\"\" == \"\"(\"\":{:\\nloopBreak% = 0\\nfor s2 in \"\";\"\":{:\\ns2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile b0:{:\\ni2 += ( divInt(int(4.0),int(62.0)) - ( divInt(i1,i2) * ( int(2.0) + int(8.0) ) ) )\\nif not max(i2, i1) != ( i1 + mod(i0,i2) ):{:\\ni2 = int(8.0)\\ni1 *= int(8.0)\\nif not \"\"E\"\" not in in1:{:\\ns1 = saveChr(( i1 * i1 )).capitalize()\\nloopBreak% = 0\\nfor in1 in \"\"V\"\"[:i2]:{:\\nb0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = s2\\n:}\\n:}\\nb0 = getCharFromString(\"\"^T\"\", ( mod(( mod(int(3.0),divInt(int(1.0),i1)) + i1 ),int(72.0)) + int(7.0) )) == (\"\"E\"\" + \"\"\\\\\\nC\"\"[min(i0, int(4.0)):( saveOrd(saveChr(( divInt(( int(1.0) + i2 ),i1) + int(6.0) ))) * i1 )])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 2, 2, 1, 0, 0, 0, 1, 2, 1, 2, 2, 1, 1, 2, 0, 2, 2, 2, 0, 1, 1], [2, 0, 2, 0, 1, 1, 2, 1, 2], [1, 0, 2, 1, 1, 2, 0, 1, 1, 2, 1, 1, 0], [0, 0], [0, 0, 0, 0, 0], [], [], [0, 3, 1], [0, 0, 1, 0], [1, 0, 2, 1, 0, 0, 2, 1, 2, 0, 1], [0, 0, 0, 0], [3, 5, 5], [1, 1, 1, 2], [], [1, 1, 1], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 6, 6, 6, 2, 0, 9, 8, 7, 6, 6, 6, 4, 0, 5, 9, 7, 4, 5, 2, 4, 2, 7, 1, 1, 5, 4, 6], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2, 1, 2, 0, 2, 1, 2, 0, 1, 2, 0, 2, 0, 1, 0, 2, 2, 0, 0, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0], [0, 1, 0, 0, 1, 0, 1], [0, 2, 0, 0, 0, 1, 2, 0, 3, 0, 0, 1, 3, 2, 0, 3, 3, 1, 2, 2, 0, 1, 1, 0, 2, 2, 0, 3, 3, 1, 2, 3, 1, 3, 2, 3, 1, 0, 0, 0, 0, 2, 3, 2, 0, 2, 2, 0, 3, 1, 1, 2, 3, 0, 1, 0, 0, 0, 3, 1, 2, 0, 0, 3, 1, 0, 1, 0, 2, 3, 2, 2, 0, 3, 1, 1, 3, 2, 0, 0, 3, 2, 1, 0, 2, 0, 0, 2, 0, 2, 3, 3, 0, 3, 2, 0, 1, 2, 3, 0, 0, 2, 3, 0, 2, 3, 1, 3, 1, 0, 1, 0, 1, 0, 2, 0, 0, 1, 0, 2, 1, 1, 1], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [4, 1, 3, 1, 0, 1, 4, 3, 0, 1, 3, 2, 1, 1, 4, 4, 1, 2, 1, 0, 2, 1, 4, 3, 4], [2, 1, 1, 0, 2, 1, 2, 1, 1, 1, 2, 0, 1, 0, 0, 2, 1], [1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 3, 2, 0, 2, 3, 5, 5, 2, 1, 2, 5, 4, 3, 1, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [2, 0, 0, 0, 3, 3, 4, 2, 3, 4, 2, 4, 1, 3, 4, 1, 0, 4, 2, 2, 4, 4, 1, 0, 0, 0, 1, 0, 4, 4, 0, 0, 1, 2, 2, 2, 4, 1, 0, 2, 1, 1, 4, 0, 2, 2, 1, 2, 2, 0, 4, 4, 0, 0], [3, 2, 1, 3, 1, 3, 3, 3, 0, 2, 1, 1, 2], [5, 1, 5, 2, 3], [0, 1, 0, 1, 1, 2, 0, 2, 2, 2, 0, 2, 0], [0, 0, 2, 3, 1, 1, 1, 1, 2], [9, 19], [3, 16, 12, 3], [9, 9], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 22, 22, 9, 13, 2, 5, 0, 0, 3, 4, 11, 4, 3, 4, 0, 3, 3, 28, 28, 50, 7, 123, 29, 25, 17, 15, 20, 9, 2, 54, 13, 5, 13, 9, 2, 4, 2, 1], "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\nloopBreak% = 0\\nwhile ( i0 * i1 ) \\l i0:{:\\nloopBreak% = 0\\nfor s0 in s0[int(6.0):( i1 - saveOrd(s1) )]:{:\\nb0 = False\\ns0 = in0\\ni1 -= i1\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = (((saveChr(int(6.0))[max(mod(i1,len(\"\"J\"\")), max(int(6.0), ( divInt(i0,int(6.0)) + int(2.0) ))):i0].capitalize() + (\"\"T\"\".rstrip() + s0))[:mod(divInt(i1,min(max(int(0.0), mod(saveOrd(saveChr(int(9.0))),len(\"\"9\"\".strip().strip(s2)[:mod(min(int(8.0), i2),i1)][:i2]))), i0)),( max(( i2 * divInt(divInt(i1,len(in0)),int(7.0)) ), int(6.0)) - divInt(abs(i2),int(6.0)) ))].strip(in2) + \"\"\\\\\\n\"\") + in2)\\nloopBreak% = 0\\nwhile getCharFromString(s2, i0).lstrip(s1) != \"\"d\"\":{:\\nres0 = i1 \\l i2\\nloopBreak% = 0\\nfor s2 in \"\"q\"\".capitalize()[max(int(6.0), ( i0 * i2 )):][max(int(4.0), i0):int(0.0)][i1:]:{:\\nif False:{:\\ni0 = ( saveOrd(in2) - divInt(mod(i2,saveOrd(\"\"m\"\"[int(5.0):])),int(9.0)) )\\ni2 -= max(( i0 - i0 ), abs(( int(7.0) * i0 )))\\nif False:{:\\nin1 = \"\"d\"\"\\n:}\\nloopBreak% = 0\\nwhile saveChr(( i1 + i0 )).endswith(in0):{:\\nif mod(i0,mod(max(min(i0, abs(( i1 - int(4.0) ))), ( max(i2, i1) + ( saveOrd(\"\"9\"\"[i0:mod(len(s1[int(5.0):saveOrd(saveChr(int(2.0)))][i1:]),int(4.0))][i0:]) + int(2.0) ) )),i0)) \\g divInt(i1,i1):{:\\nloopBreak% = 0\\nwhile in0.capitalize().endswith(in1):{:\\ni2 = int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not ( int(1.0) - int(1.0) ) \\l int(546.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 0, 1], [1], [0, 2, 1], [], [0], [], [], [0], [], [2, 2], [], [4, 2], [], [], [], [1], [], [], [0, 2, 2], [1], [3, 0, 0], [], [1], [1], [], [1, 1, 2], [1, 0, 1], [], [4, 1, 1, 0, 0], [1], [], [], [2, 2, 3], [], [], [9, 8], [24]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 1, 0, 0, 2, 0, 3, 0, 1, 0, 0, 3, 3, 0, 5, 1, 0, 0, 3, 0, 0, 2, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveChr(max(i0, i2)).startswith(\"\"9\"\"):{:\\nb0 = \"\"8?\"\" == s1\\n:}else:{:\\ns1 = s2\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 0, 0], [1, 0], [2, 2, 1, 0, 0, 2], [0], [0, 0, 0, 0, 0], [], [], [1, 3, 0, 2, 2], [0], [0, 1, 0, 0], [0], [], [0, 0, 1], [], [1], [1], [1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 4, 8, 4, 5, 4, 9], [0, 0, 0, 1, 0, 2, 0, 2, 2], [0], [2, 1, 3, 0, 2, 2, 2, 1, 3, 2, 3, 3, 2, 0, 2, 1, 3, 3, 0, 0, 1, 1, 0, 1, 0, 3, 0, 0], [0, 1, 1, 1, 0, 1, 0], [4, 4, 0, 3, 4, 3, 2, 2], [1, 2, 1], [1, 1, 0, 0], [5, 2, 1, 4, 2, 3, 5, 2, 4, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0], [2, 3, 1, 4, 0, 0, 0, 1, 1, 2, 2, 0, 3, 3, 2, 1, 3, 1, 4, 2, 1, 4, 3, 0, 0, 3, 0, 2, 1, 0, 0], [0, 3, 2], [4], [0, 1, 1, 1, 1, 2], [2, 2, 2, 3, 0, 1, 1], [22], [24, 17], [7, 7, 6], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 2, 6, 1, 5, 0, 0, 4, 1, 3, 1, 0, 2, 0, 0, 1, 8, 8, 9, 1, 28, 7, 7, 3, 4, 13, 7, 1, 31, 3, 1, 6, 7, 1, 2, 3, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (\"\"7\"\" + getCharFromString(s2, ( int(3.0) - saveOrd(s1) )))[i0:mod(mod(divInt(int(3.0),saveOrd(in1)),( min(len(\"\"7\"\"), divInt(i0,( int(4.0) * saveOrd(\"\"6\"\") ))) - len(s2[:i0][:i1]) )),int(8.0))]\\nin0 = ((\"\"@\"\"[:int(454.0)] + (\"\"W\"\" + \"\"y\"\"[:i0].rstrip((in2 + s2).capitalize()))) + (in1 + \"\"r\"\"[int(9.0):]))\\nif b1:{:\\ni2 = i0\\n:}else:{:\\nres0 = abs(i2) \\l i2\\nloopBreak% = 0\\nfor s1 in s1:{:\\nb0 = b2\\ns1 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 7, 3, 3, 5, 5, 1, 8, 5, 7, 8, 2, 8, 2, 4, 4, 6, 4, 7, 3, 3, 1, 9, 6], [1, 2, 1, 0, 2, 0, 2, 0, 1, 1, 1, 2, 1, 1, 1, 0, 2, 1, 0, 2, 2, 0, 1, 1, 2, 2, 0, 0, 1, 1, 1, 2, 1, 2, 0], [0, 1], [3, 3, 1, 3, 2, 2, 0, 3, 3, 3, 1, 1, 2, 2, 1, 1, 2, 0, 0, 2, 0, 2, 2, 3, 2, 1, 3, 2, 0, 2, 2, 3, 2, 0, 0, 2, 1, 1, 0, 2, 1, 1, 3, 0, 1, 3, 3, 3, 1, 3, 0, 2, 1, 1, 3, 0, 0, 1, 3, 2, 3, 3, 0, 0, 3, 2, 2, 3, 3, 3, 1, 2, 2, 3, 1, 1, 2, 0, 3, 3, 1, 3, 2, 2, 1, 2, 3, 2, 3, 0, 0, 3, 0, 0, 2, 2, 3, 0, 0, 2, 0, 2, 2, 2, 1, 0, 3, 0, 2, 0, 3, 3, 0, 3, 2, 3, 0, 3, 3, 1, 2, 0, 0, 3, 3, 3, 0, 0, 2, 0, 3, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [0, 0, 2, 1, 4, 2, 3, 1, 0, 4, 0, 1, 0, 1, 3, 3, 1, 4, 1, 2, 2, 3, 3, 1, 2, 4, 1, 3, 4, 4, 0, 4, 0, 4, 1, 3, 1, 3, 4, 4, 3], [1, 2, 2, 2, 1, 1, 0, 2, 0, 2, 1, 1, 2, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [2, 1, 3, 2, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [], [4, 0, 4, 2, 4, 2, 2, 4, 4, 1, 4, 1, 3, 0, 1, 2, 2, 0, 0, 2, 2, 1, 0, 1, 4, 2, 4, 2, 1, 1, 1, 4, 1, 2, 4, 2, 1, 1, 4, 1, 3, 4, 4, 0, 1], [3, 2, 0, 3, 0, 1, 2, 2, 0, 2, 1, 2, 0], [2, 1], [1, 1, 0, 2, 0, 1, 1, 1, 1, 0, 2], [2, 1, 2, 1, 3, 2, 0, 2, 3, 1, 1, 1, 1, 3], [11], [24, 18, 10, 17, 6, 18], [7, 9, 0, 9], [14, 20, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 35, 2, 133, 36, 41, 16, 21, 6, 14, 0, 45, 13, 2, 11, 14, 1, 6, 4, 3], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = min(min(int(5.0), abs(divInt(divInt(i2,max(saveOrd(s2.strip()), abs(int(1.0)))),int(7.0)))), divInt(mod(int(3.0),int(355.0)),( i1 - i0 )))\\ni2 *= ( i0 * ( mod(len(getCharFromString(getCharFromString(\"\"7\"\", mod(int(1.0),max(mod(i2,divInt(divInt(min(divInt(i0,i1), ( int(8.0) * int(5.0) )),i1),( int(7.0) - int(8.0) ))), saveOrd(saveChr(i1))))).rstrip()[int(2.0):min(max(min(int(8.0), max(i2, mod(int(2.0),int(4.0)))), len(\"\"y\"\")), i1)][:i1], int(4.0))[:len((s1 + \"\"9\"\"))].capitalize()),( max(saveOrd(in0[i1:i0][max(( ( abs(abs(len(s2))) - int(6.0) ) + ( ( len(\"\"s\"\"[:int(4.0)][:int(7.0)]) * ( i2 + max(abs(int(3.0)), saveOrd(s0)) ) ) * divInt(divInt(int(3.0),divInt(max(( len(\"\"+\"\") - i1 ), i0),saveOrd(\"\"0\"\"[:i2].capitalize()[:i2].capitalize()))),mod(mod(saveOrd(\"\"L\"\"),i0),i1)) ) ), mod(i1,( ( ( int(1.0) - i2 ) * min(i2, mod(i0,saveOrd(\"\"9\"\"))) ) - min(i0, saveOrd(getCharFromString(\"\";\"\", divInt(max(i1, len(\"\"k\"\"[max(int(9.0), mod(i1,i1)):].capitalize()[len(\"\"r\"\"):saveOrd(saveChr(saveOrd(\"\"g\"\")))])),i2)))) ))):]), i1) - mod(i2,len((getCharFromString(s0, i0).capitalize() + \"\"s`\"\"))) )) + int(6.0) ) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 2, 1, 2, 1, 2, 2, 2, 2, 0, 0, 1, 1, 1, 0, 2, 0, 1], [0, 0, 1, 1, 0, 2, 1], [1, 2, 2, 1, 0, 1, 0, 1, 2, 2, 1], [0, 0, 0], [0, 0, 0, 0, 0], [], [], [3, 1], [0, 5], [0, 2, 2, 0, 1, 0, 2, 1, 0], [0, 0], [1, 0, 1], [3, 2, 1, 1], [1], [1, 1], [0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 4, 6, 3, 3, 8, 2, 7, 3, 7, 9, 1, 0, 7, 3, 0, 5, 2, 0, 0, 3, 3, 7, 5, 7, 9, 8, 5, 8, 2, 5, 0, 1, 4, 6, 1, 2, 2, 6, 0, 6, 9, 0, 3, 1, 8, 1, 5, 3, 2, 6, 8, 0, 7, 2, 8, 7, 2, 8, 2, 3, 4, 3, 1, 6, 5, 1, 0, 2, 2, 8, 7, 8, 4, 8, 5], [2, 1, 1, 2, 2, 0, 0, 0, 2, 0, 2, 0, 2, 2, 0, 1, 1, 0, 2, 1, 0, 2, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 2, 1, 2, 0, 2, 2, 2, 0, 0, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 1], [1, 0, 0, 1, 1], [3, 1, 2, 2, 1, 0, 2, 1, 3, 2, 2, 0, 2, 1, 1, 2, 3, 0, 3, 0, 3, 3, 3, 0, 3, 1, 3, 1, 3, 3, 1, 2, 1, 0, 3, 0, 3, 3, 0, 1, 2, 3, 3, 3, 3, 2, 3, 0, 2, 2, 2, 1, 0, 0, 3, 1, 1, 1, 2, 1, 1, 2, 1, 3, 3, 2, 0, 0, 1, 3, 2, 3, 1, 0, 3, 3, 2, 3, 2, 3, 3, 1, 1, 2, 1, 3, 3, 1, 1, 0, 0, 3, 0, 3, 3, 0, 3, 0, 3, 0, 0, 3, 3, 0, 0, 3, 3, 1, 3, 3, 3, 2, 0, 1, 3, 2, 3, 2, 2, 3, 3, 2, 1, 0, 0, 1, 3, 3, 3, 3, 0, 2, 2, 3, 0, 0, 3, 1, 3, 2, 0, 2, 1, 1, 1, 3, 1, 1, 3, 3, 0, 3, 0, 1, 1, 0, 3, 0, 2, 0, 1, 0, 2, 2, 3, 0, 0, 1, 0, 1, 2, 0, 2, 3, 0, 1, 3, 3, 1, 1, 0, 0, 3, 1, 2, 2, 2, 2, 1, 3, 0, 2, 0, 2, 0, 2, 3, 0, 2, 0, 1, 2, 0, 0, 2, 0, 2, 2, 0, 3, 2, 3, 1, 0, 1, 2, 3, 1, 2, 1, 0, 1, 1, 0, 2, 1, 3, 3, 3, 3, 3, 1, 1, 2, 1, 3, 2, 0, 0, 3, 0, 3, 2, 1, 1, 0, 3, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0], [2, 0, 2, 4, 0, 4, 0, 1, 4, 4, 0, 2, 4, 3, 2, 1, 4, 1, 0, 1, 1, 3, 2, 1, 2, 2, 1, 1, 2, 4, 1, 4, 2, 2, 2, 4, 2, 2, 4, 3, 2, 0, 0, 0, 4, 1, 0, 2, 2, 4, 3, 2, 1, 1, 4, 4, 1, 0, 0, 1, 0, 4, 3, 3, 1, 0, 4, 1, 0, 2, 3, 3, 3, 3, 2, 0, 2, 2], [2, 1, 0, 1, 0, 1, 0, 1, 1, 2, 1, 1, 2, 0, 0, 2, 0, 2, 0, 0, 1, 0, 2, 0, 0, 2, 0, 1, 2, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [3, 3, 2, 5, 4, 4, 2, 5, 3, 4, 3, 2, 5, 3, 4, 4, 2, 1, 0, 3, 4, 5, 0, 0, 2, 2, 1, 3, 2, 0, 3, 4, 0, 5, 2, 2], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0], [0, 0, 0, 1, 0, 1, 4, 4, 4, 2, 4, 2, 1, 4, 0, 1, 2, 2, 2, 1, 1, 4, 2, 0, 1, 3, 3, 0, 2, 4, 0, 0, 3, 2, 0, 4, 1, 2, 4, 0, 4, 2, 2, 1, 0, 1, 0, 2, 1, 4, 1, 1, 2, 2, 4, 3, 0, 1, 3, 3, 0, 4, 4, 2, 2, 2, 2, 0, 0, 4, 2, 0, 4, 1, 0, 3, 2, 3, 1, 2, 3, 4, 2, 0, 4, 3, 2, 3, 4, 1, 2, 4, 2, 2, 4, 1, 1, 1, 1, 0, 3, 1, 0, 0, 4, 0, 4, 2, 3, 0, 3, 1, 4, 0, 3, 0, 3, 2, 0, 1, 2, 2, 4, 0], [2, 1, 2, 1, 1, 1, 0, 3, 1, 0, 1, 3, 3, 2, 3, 3, 3, 2, 3, 3, 1, 1, 2, 3, 3], [4, 4, 2, 3, 0, 1, 5, 5, 4, 0], [0, 2, 0, 1, 2, 1, 0, 0, 2, 0, 2, 1, 0, 1, 2, 1, 2, 1, 1, 0, 2, 2, 0, 0, 2, 0, 2, 1, 1, 0], [1, 0, 3, 2, 0, 3, 2, 1, 3, 1, 1, 3, 2, 0, 0, 3, 3, 1, 1, 3, 2, 0, 2, 0, 1, 2, 1, 1], [7, 18, 24, 3, 20, 25], [21, 7, 7, 5, 1, 16, 23, 14, 8], [8, 5, 8, 9, 2, 9], [31, 17, 29, 28, 7, 9, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 18, 18, 7, 11, 3, 5, 0, 0, 2, 2, 9, 2, 3, 4, 1, 2, 3, 76, 76, 65, 5, 249, 53, 78, 30, 26, 36, 28, 3, 124, 25, 10, 30, 28, 6, 9, 6, 7], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= abs(int(14.0))\\nloopBreak% = 0\\nfor in0 in in0:{:\\ns2 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in in1:{:\\ns2 = \"\"vH\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( in2 not in \"\"`\"\" or saveChr(( ( int(6.0) - i1 ) + divInt(int(3.0),min(divInt(( i1 - ( int(3.0) + int(8.0) ) ),mod(abs(i2),saveOrd(saveChr(i2)[min(saveOrd(\"\"8\"\"[min(i0, max(int(2.0), saveOrd(saveChr(int(7.0))))):]), saveOrd(in0)):min(int(3.0), ( int(7.0) - i0 ))].capitalize()))), abs(i0))) )).capitalize() in \"\"S\"\" ):{:\\nif not saveOrd(\"\".\"\"[len(\"\"5\"\"):][:i2][int(9.0):divInt(abs(max(saveOrd(saveChr(max(divInt(min(i0, ( mod(( int(1.0) + i2 ),i0) - max(int(0.0), int(7.0)) )),int(3.0)), ( int(0.0) - int(5.0) )))), mod(int(2.0),max(len(in1[:( i2 * i2 )]), int(0.0))))),abs(mod(max(int(0.0), i0),abs(abs(mod(max(divInt(max(abs(int(3.0)), int(3.0)),mod(int(7.0),saveOrd(\"\"h\"\"))), max(int(5.0), int(7.0))),i1))))))]) \\l i1:{:\\nloopBreak% = 0\\nfor in0 in ((s2 + getCharFromString(in2, saveOrd(in0))[i0:abs(abs(i2))]) + (in1[abs(i1):saveOrd(\"\"^\"\".rstrip(saveChr(i0)[i2:]))] + in1)):{:\\nloopBreak% = 0\\nwhile False:{:\\ni1 = abs(abs(i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = getCharFromString(\"\"h\"\"[i1:][saveOrd(s2):len(\"\"f\"\")], int(9.0)) not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\ni2 = abs(min(min(mod(i1,int(858.0)), min(mod(saveOrd(\"\"]\"\"[:( ( max(min(divInt(int(2.0),i1), i0), int(5.0)) - abs(abs(saveOrd(saveChr(len(\"\"8\"\"))))) ) - i1 )]),( mod(abs(i1),i1) * max(int(0.0), max(( i2 + ( int(1.0) + int(4.0) ) ), int(6.0))) )), saveOrd(\"\"Y\"\"))), int(122606.0)))\\nb1 = int(90.0) != saveOrd((s0 + \"\"D\"\").rstrip(((in0 + in1[:max(i1, min(i2, int(3.0)))][int(1.0):][:i0][min(i2, divInt(i2,int(8.0))):].capitalize().strip()) + in2))[:i2][( divInt(max(i0, i0),int(15.0)) * i2 ):int(32680.0)])\\ni0 += divInt(i0,( min(i1, int(7287.0)) * saveOrd(s0[:len(\"\"$\"\".lstrip())].lstrip(s0)) ))\\ns2 = ((\"\"&b\"\" + (s2[int(2.0):].rstrip() + ((\"\"q\"\".strip(saveChr(int(8.0))[i1:i2][len(\"\"\\\\\\\\\"\"):].strip(\"\"9\"\")[int(2.0):mod(divInt(divInt(( int(3.0) + max(i2, divInt(i2,( i1 + ( min(i1, ( i1 - int(4.0) )) + ( i0 * i1 ) ) ))) ),( i0 + divInt(( i0 + saveOrd(\"\"U\"\") ),mod(max(int(3.0), i2),int(1.0))) )),divInt(min(int(6.0), ( int(5.0) * i2 )),int(1.0))),int(0.0))]) + \"\"2\"\")[i2:( int(2.0) + abs(len(s1)) )] + (\"\"Zx9\"\" + in0)).capitalize())[len(s2):])[len(saveChr(len(s0))):int(2.0)] + (in0 + (\"\"o\"\" + in1.rstrip((s0 + (in2[:int(8.0)] + \"\"i\"\")))))[mod(int(78.0),abs(( i2 - i2 ))):].capitalize())\\nif False:{:\\ns2 = s2.lstrip()[min(i2, abs(( int(4.0) * int(8.0) ))):i2][:abs(i0)]\\ni1 -= int(5.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0], [1, 0, 0], [0], [0], [], [], [1, 1], [3], [1, 2], [0], [2], [], [], [], [], [1, 1, 0, 0, 1], [0, 9, 9, 5, 2], [0, 2, 2, 1], [1, 1], [1, 2, 3, 2, 1, 0, 0, 1], [1, 0], [4], [1, 0, 0], [1], [2, 0, 2, 0, 3], [0, 1, 1], [0], [3, 0, 1, 3, 0, 2, 0, 1, 0], [], [], [2], [3, 1, 3], [], [15], [], [31, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 3, 1, 8, 2, 1, 2, 1, 5, 3, 1, 9, 0, 0, 1, 3, 0, 1, 0, 2], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= int(0.0)\\nb1 = mod(saveOrd((s2 + \"\"`p\"\")),( int(9.0) + i2 )) \\ge i2\\nloopBreak% = 0\\nfor s0 in (s2 + s0[int(952.0):]):{:\\nb1 = \"\"^\"\" == in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [0, 4, 0], [0, 1, 0, 2, 0], [], [1, 0, 0, 1, 2, 0, 1, 2, 1, 0, 0], [1, 1], [0], [], [0, 0], [5, 0, 4], [0, 0, 0, 0, 1], [], [4, 2, 2, 1], [1], [], [0, 0], [1, 0, 0, 0, 1], [15, 24, 20], [3, 0], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 7, 1, 0, 0, 1, 2, 5, 0, 4, 1, 0, 2, 5, 3, 2, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(0.0))\\ns0 = \"\"dPYUa\"\"[i0:i1][int(4.0):divInt(i0,int(0.0))]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [4], [2], [0], [0], [], [], [], [], [1, 1, 1, 1], [6, 3, 1, 7], [1, 1, 0, 1], [], [3, 2, 0, 1, 0, 1, 0, 2, 1, 2, 1, 2, 0, 0], [1, 0, 1, 1, 1], [1], [], [0, 1, 0, 0, 1], [2], [0, 1], [], [4, 1, 4, 4, 0], [0, 2, 2], [], [], [2, 3], [], [], [5], [10]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 1, 1, 0, 1, 1, 2, 0, 5, 3, 0, 0, 2, 0, 0, 1, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = getCharFromString(\"\"5\"\\\\\"\"\", max(divInt(i1,int(6.0)), i1)) in s2.capitalize().capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 2, 2, 0, 2, 2, 0, 1, 1], [2, 0, 2, 1, 1], [1, 1, 2, 1], [0], [0, 0], [], [], [], [2], [1, 0, 0, 0], [0], [], [1, 1, 1], [], [1, 1, 1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 8, 7, 5, 4, 6, 1, 2, 1, 3, 6, 6, 5], [2, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2], [0, 1, 1], [2, 0, 2, 1, 0, 2, 2, 0, 2, 0, 1, 0, 2, 0, 3, 1, 1, 2, 1, 2, 2, 2, 0, 3, 1, 3, 1, 2, 0, 3, 2, 2, 1, 1, 0, 1, 1, 0, 3, 2, 2, 3, 2, 0, 3, 3, 1, 1, 0, 2, 0, 3, 2, 1, 2, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1], [2, 3, 3, 2, 1, 3, 4, 1, 2], [0, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 0], [1, 1, 1, 0, 1, 0, 1], [3, 5, 3, 5, 3, 4], [1, 1], [0], [0, 4, 2, 2, 4, 2, 0, 4, 0, 4, 2, 1, 4, 1], [3, 3, 1, 1, 1], [5, 3], [0, 2, 2, 2], [3, 0], [0], [], [], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 5, 4, 1, 2, 0, 0, 0, 1, 4, 1, 0, 3, 0, 3, 2, 14, 14, 19, 3, 58, 19, 9, 14, 7, 5, 2, 1, 14, 5, 2, 4, 2, 1, 0, 0, 1], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( i2 + mod(int(2.0),i1) ) == ( mod(i0,( i1 * int(6.0) )) * i1 ):{:\\nloopBreak% = 0\\nfor in0 in in2:{:\\nloopBreak% = 0\\nwhile False:{:\\ni0 = ( i0 - abs(int(8.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif False:{:\\nif False:{:\\ni0 -= int(7.0)\\nin0 = in2[( int(5.0) - ( ( mod(i0,len(saveChr(int(4.0)))) * len(in0) ) * int(6.0) ) ):].lstrip(saveChr(( i1 * abs(divInt(( int(1.0) * int(2.0) ),i1)) )))[int(1.0):][int(3.0):i1].strip(\"\"#\"\"[max(( mod(len(saveChr(divInt(i2,saveOrd(\"\"A\"\")))),max(int(6.0), int(6.0))) - i1 ), ( i1 * abs(( int(5.0) - mod(i1,i2) )) )):])\\n:}\\n:}else:{:\\ni1 += i2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], [2, 2, 2, 0, 1, 2, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0], [1, 1, 2, 2, 2, 2], [2, 0, 2, 0, 0, 2, 1, 1, 0, 1, 2], [], [0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 1, 0, 3], [5, 5, 0, 5], [2, 0, 1, 1, 1, 0, 2, 2, 2, 2, 1, 0], [0, 0, 0, 0], [3, 1, 2, 4, 1], [3, 0, 1], [0], [1], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 1, 2, 5, 6, 9, 9, 6, 2, 1, 2, 8, 7, 9, 4, 7, 9, 8, 6, 0, 9, 2, 8, 7, 8, 4, 2, 2, 8, 1, 0, 4, 6, 2, 7, 5, 7, 8, 5, 3, 0, 3, 9, 6, 2, 5, 0, 8, 0, 1, 9, 1, 8, 4, 4, 1, 1, 5, 5, 0, 1, 7, 8, 2, 3, 8, 0, 6, 5, 9, 0, 2, 5], [0, 1, 2, 1, 1, 0, 2, 2, 1, 2, 0, 2, 0, 0, 1, 0, 1, 2, 0, 2, 1, 0, 1, 0, 1, 1, 2, 0, 0, 1, 0, 0, 1, 2, 0, 0, 2, 2, 2, 0, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 2, 2, 0, 2, 2, 1, 1, 2, 1, 0, 2, 0, 0, 2, 1, 0, 1, 1, 0, 2, 2, 0, 2, 0, 2, 2], [0, 0, 0, 0, 1], [3, 0, 0, 0, 1, 2, 1, 1, 3, 0, 3, 0, 2, 2, 1, 3, 1, 1, 1, 1, 2, 1, 1, 0, 0, 0, 2, 1, 0, 1, 3, 3, 2, 2, 2, 0, 1, 0, 0, 2, 2, 3, 2, 2, 2, 2, 2, 0, 2, 3, 3, 2, 0, 2, 2, 3, 2, 3, 1, 0, 1, 2, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 2, 0, 1, 2, 1, 2, 2, 0, 0, 1, 1, 0, 3, 3, 2, 0, 0, 2, 3, 1, 2, 2, 0, 3, 1, 1, 0, 1, 3, 3, 0, 0, 0, 1, 2, 0, 2, 3, 2, 3, 2, 1, 2, 0, 2, 2, 2, 3, 1, 2, 2, 1, 3, 1, 2, 2, 3, 1, 0, 0, 3, 0, 3, 2, 1, 0, 2, 1, 0, 1, 2, 0, 0, 3, 2, 2, 2, 3, 1, 0, 3, 3, 2, 1, 1, 0, 3, 1, 1, 1, 2, 2, 3, 1, 1, 0, 2, 3, 0, 3, 0, 3, 1, 1, 2, 0, 3, 3, 1, 2, 2, 2, 2, 0, 2, 1, 1, 0, 1, 1, 3, 2, 2, 0, 2, 2, 2, 2, 2, 2, 3, 2, 1, 1, 0, 3, 0, 2, 3, 2, 2, 3, 1, 0, 0, 2, 2, 3, 1, 1, 2, 2, 3, 0, 1, 3, 2, 2, 3, 0, 3, 0, 1, 0, 3, 0, 0, 0, 1, 0, 2, 0, 3, 3, 1, 2, 0, 3, 2, 1, 2, 2, 3, 3, 2, 0, 3, 2, 2, 1, 1, 0, 2, 0, 0, 1, 3, 1, 0, 1, 2, 2, 0, 0, 1, 1, 3, 1, 1, 1, 0, 3, 0, 0, 3, 0, 0, 3, 2, 2, 2, 1, 3, 0, 3, 3, 0, 3, 1, 0, 3, 3, 0, 0, 1, 2, 1, 3, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 4, 3, 1, 1, 4, 0, 0, 2, 1, 2, 4, 3, 2, 4, 4, 4, 3, 1, 4, 3, 4, 3, 3, 1, 1, 1, 4, 3, 3, 0, 4, 1, 1, 1, 4, 0, 0, 1, 1, 3, 0, 0, 0, 2, 2, 3, 3, 0, 2, 1, 0, 4, 4, 3, 3, 2, 1, 4, 0, 3, 0, 0, 4], [2, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 1, 2, 0, 0, 0, 1, 2, 2, 0, 1, 0, 2, 0, 2, 1, 0, 1, 0, 0, 1, 2, 0, 0, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], [2, 0, 3, 2, 2, 5, 3, 3, 0, 2, 4, 4, 3, 2, 4, 4, 0, 0, 0, 2, 2, 3, 5, 0, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [], [4, 2, 4, 0, 0, 4, 2, 2, 4, 0, 2, 2, 2, 1, 0, 4, 0, 1, 1, 0, 1, 2, 0, 1, 2, 1, 0, 2, 2, 4, 2, 2, 0, 4, 0, 4, 2, 0, 1, 0, 2, 1, 4, 2, 0, 2, 2, 1, 0, 1, 4, 1, 4, 2, 4, 4, 0, 2, 2, 0, 0, 2, 4, 2, 1, 1, 2, 4, 4, 0, 4, 0, 4, 4, 1, 1, 3, 1, 1, 0, 4, 2, 4, 4, 2, 4, 0, 1, 1, 2, 1, 4, 4, 0], [3, 3, 3, 2, 1, 1, 0, 1, 3, 1, 0, 0, 1, 2, 3, 3, 2, 3, 2, 3, 3, 1, 3, 1, 2], [3, 1, 4, 4, 4, 4, 0, 0, 3, 2], [0, 1, 1, 1, 2, 0, 0, 0, 0, 1, 1, 2, 0, 2, 2, 2, 1, 2, 1, 0, 0, 0, 0, 1, 0, 2], [3, 2, 2, 1, 0, 0, 2, 3, 2, 2, 0, 3, 2, 0, 2, 0, 2, 0, 1, 3, 1, 0, 0, 3], [15, 17, 15, 1, 1, 21, 4, 12], [5, 5, 11], [2, 7, 1, 9, 7, 7, 7, 4], [27, 9, 31, 31, 7]], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 6, 10, 0, 7, 0, 0, 5, 4, 12, 4, 5, 3, 1, 1, 2, 73, 73, 83, 3, 311, 95, 64, 45, 50, 25, 24, 0, 94, 25, 10, 26, 24, 8, 3, 8, 5], "tree_depth": 66, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s2.rstrip()[min(i0, i1):i2].lstrip(s0) != in0.capitalize()[:int(3.0)][:( int(1.0) * int(2.0) )].rstrip(\"\"\\\\\\\\\"\"[saveOrd(s2):i1][len(saveChr(i1)):][:divInt(mod(int(5.0),max(int(6.0), int(9.0))),int(9.0))]):{:\\nif ( int(6.0) != mod(int(2.0),int(1.0)) and i0 != i2 ):{:\\nloopBreak% = 0\\nwhile i2 \\l mod(int(2.0),i1):{:\\ns2 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nres0 = b2\\n:}\\nloopBreak% = 0\\nwhile \"\"2\"\" not in \"\"7\"\":{:\\nin0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = \"\"f\"\" == s0[int(8.0):max(saveOrd(\"\"P\"\"), ( mod(( i2 + int(7.0) ),i0) + i2 ))]\\nb0 = \"\"R\"\"[( ( min(mod(( mod(( divInt(i0,mod(min(abs(( i0 + divInt(mod(max(mod(abs(int(9.0)),i1), int(4.0)),mod(i0,divInt(i1,i2))),( divInt(mod(( i0 - i2 ),( i1 + int(7.0) )),divInt(int(9.0),divInt(( i0 - i1 ),int(8.0)))) - int(6.0) )) )), i0),saveOrd(s2))) - len(saveChr(divInt(i1,i1))[:mod(abs(int(0.0)),( divInt(i2,saveOrd(in1[int(9.0):][:int(2.0)])) - i0 ))][int(8.0):saveOrd(getCharFromString(in1, saveOrd(saveChr(i0))))]) ),i1) + i0 ),int(7.0)), ( i0 - ( len(in0[( max(( int(8.0) + divInt(i1,( mod(divInt(saveOrd(\"\"1\"\"),int(4.0)),divInt(mod(int(2.0),len(s2)),int(2.0))) - ( ( saveOrd(\"\"&\"\"[int(8.0):]) + i2 ) * i0 ) )) ), len(in1[i0:].rstrip(\"\"9\"\"[:len(in1)][( int(1.0) + i2 ):]))) * ( int(0.0) + i2 ) ):int(4.0)]) - divInt(i2,i0) ) )) * max(( ( ( max(int(6.0), i2) + max(saveOrd(\"\"7\"\"), mod(int(2.0),int(7.0))) ) + i2 ) + len(saveChr(int(5.0))) ), int(7.0)) ) - int(8.0) ):divInt(( len(\"\"P\"\") * int(5.0) ),int(3.0))].startswith(getCharFromString(getCharFromString(saveChr(i0), ( min(i0, saveOrd(s0)) * i1 ))[max(int(0.0), int(3.0)):], ( i2 + max(max(int(9.0), divInt(( divInt(mod(i2,( int(6.0) - int(2.0) )),i1) + int(5.0) ),int(0.0))), saveOrd(s0[( divInt(i0,( divInt(( divInt(divInt(( min(( int(8.0) * int(0.0) ), i1) + min(i1, mod(max(mod(( max(int(1.0), i0) * i1 ),mod(mod(len(s0),int(9.0)),int(1.0))), ( mod(min(i1, int(8.0)),min(mod(( min(i1, abs(i0)) - int(4.0) ),i0), abs(i2))) + i2 )),i0)) ),int(4.0)),i2) - divInt(i2,len(\"\"`\"\"[len(\"\"7\"\"):int(1.0)].capitalize()[divInt(i1,min(divInt(int(1.0),( mod(abs(max(divInt(i1,min(divInt(( int(5.0) + int(5.0) ),i2), divInt(i1,i0))), int(0.0))),saveOrd(s2.rstrip(s2.capitalize()).rstrip(\"\"B\"\".capitalize().lstrip())[int(1.0):i2])) + int(7.0) )), mod(( i0 - i0 ),int(8.0)))):int(2.0)])) ),saveOrd(\"\"7\"\")) * int(3.0) )) + int(8.0) ):int(0.0)][:i2])) )))\\n:}\\nloopBreak% = 0\\nwhile (\"\"B4V\"\" + \"\"f`l\"\") not in in0:{:\\nloopBreak% = 0\\nwhile len(saveChr(i1).lstrip(in2.strip()[i0:len(\"\"E\"\")])[:i1].lstrip()) != i1:{:\\ns0 = \"\"M\"\"\\ni0 = abs(( ( ( int(6.0) + max(i2, saveOrd(\"\"$\"\"[min(i2, len(saveChr(int(5.0)))):])) ) - i0 ) + min(min(i2, i0), int(9.0)) ))\\ni2 = ( int(02.0) - saveOrd(in2.capitalize()) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(5.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [0], [1, 0], [0], [0, 0], [], [], [1], [3, 2], [0, 1, 0, 1], [0, 0], [3], [3, 2], [0], [], [], [1, 1, 1, 0, 1], [7, 4, 2, 7, 7], [2, 0, 2, 1, 2], [1], [1, 1, 0, 0, 3, 0, 1, 2, 2, 1, 3, 0, 3], [1, 0], [0, 3, 3], [2, 1], [1], [2, 2], [1, 0, 0, 0, 0, 1], [0], [4, 2, 1, 0, 1], [0], [], [2], [3, 0, 0, 3, 1, 3], [7, 5], [25], [], [21, 19, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 2, 4, 2, 0, 2, 1, 0, 0, 5, 5, 5, 1, 13, 2, 3, 2, 1, 2, 6, 1, 5, 1, 0, 1, 6, 2, 1, 0, 3], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in getCharFromString(\"\"<\"\"[int(7.0):], int(4.0)):{:\\ni2 *= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = ( i2 \\ge min(i1, int(2.0)) and not mod(( int(77.0) - len(s2) ),i2) == len(\"\"HF:z+\"\") )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [1], [], [2], [], [1], [], [], [], [], [1, 1, 1, 1], [3, 3, 3, 9], [1, 2, 0, 1, 1, 1, 1, 1, 2], [1], [2, 3, 3, 0, 0, 0, 3, 1, 0, 1, 1, 0, 3, 0, 2, 0, 0, 1], [1, 0], [3, 2, 4, 2], [1, 0], [0], [2, 2, 3, 5], [0, 0, 1, 1], [], [2, 0, 0, 3, 3, 4, 4, 3, 2, 2, 3, 1, 4, 4, 4, 0, 2, 1, 2, 0], [0, 1, 1, 2, 0], [], [2, 0, 0, 1, 1], [3, 1, 2, 0], [0], [15], [3], [24]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 9, 1, 18, 2, 4, 2, 1, 4, 4, 0, 20, 5, 0, 5, 4, 1, 1, 1, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= divInt(len(s2[abs(i2):]),i0)\\nb1 = s2 not in ((getCharFromString(saveChr(i1), saveOrd(((\"\"?p3\"\" + saveChr(int(3.0)))[i1:int(3.0)][int(3.0):i1] + getCharFromString(in0, abs(i1)).capitalize()))) + \"\"A\"\"[:( i1 + i2 )]) + in2[:int(9.0)])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2], [], [1, 0], [], [], [], [], [5], [0, 1], [0], [4, 1, 2], [2, 1], [], [2], [3, 2], [], [], [1], [22]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 2, 1, 0, 0, 2, 0, 0, 1, 1], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = \"\"=1\"\".capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1], [2, 0, 0, 1, 0, 1, 0], [1], [2, 0, 2, 2, 0, 1], [], [0, 0, 0, 0], [], [], [1, 1], [0], [0, 0, 1], [0], [], [1, 1], [], [1, 0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 7, 1, 1, 6, 7, 4, 2], [0, 2, 2, 2, 0, 2, 2], [0], [3, 1, 0, 2, 2, 1, 2, 2, 3, 2, 3, 0, 0, 3, 3, 2, 0, 2, 2, 1, 1, 0, 1, 2, 2, 0, 0, 1, 3, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [4, 2, 2, 3, 2], [2, 1, 0, 0], [1, 0, 1, 0, 0, 1], [1, 0, 5, 1, 4, 1], [1, 1], [], [4, 2, 0, 4, 1, 2, 1, 0, 0], [0, 0], [], [1, 2], [0, 3], [5], [], [], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 3, 0, 0, 1, 0, 2, 0, 0, 2, 0, 2, 1, 5, 5, 5, 0, 23, 8, 5, 4, 4, 6, 2, 0, 9, 2, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif False:{:\\ns1 = getCharFromString(s0[:saveOrd(getCharFromString(\"\"F\"\", int(9.0)))], i0)\\nb1 = True\\n:}else:{:\\nin2 = \"\"%\"\"[( mod(int(2.0),divInt(( abs(( abs(i2) * i2 )) - len(s1) ),abs(mod(i2,( divInt(int(7.0),int(1.0)) + i0 ))))) + int(1.0) ):]\\nin1 = s1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [1, 1, 2, 2, 1, 2, 0, 1, 0, 0, 2, 2, 1, 2, 2, 1, 0, 2, 1, 1, 1, 0], [1, 0, 1, 1, 1, 0, 2, 0], [1, 1, 1, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2], [0, 0, 0], [0, 0, 0, 0, 0], [], [], [1, 0, 0, 2, 0], [3, 4], [0, 2, 2, 0, 0, 0, 2, 2, 1, 0, 0, 0, 1, 0, 0], [0, 0], [5, 3, 3, 5], [1, 2, 1, 3, 1, 2, 2, 2, 0], [1], [0, 0, 1], [0, 0, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 3, 3, 5, 4, 8, 3, 5, 5, 8, 4, 6, 0, 2, 1, 4, 4, 5, 7, 4, 8, 5, 0, 5, 2, 1, 9, 5, 1, 7, 6, 4, 1, 2, 5, 2, 1, 2, 9], [2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 0, 2, 2, 2, 0, 2, 0, 1, 2, 1, 2, 0, 1, 1, 0, 1, 1, 2, 0, 1, 1, 0], [1, 1, 1], [2, 0, 2, 0, 1, 0, 3, 1, 3, 1, 3, 1, 3, 1, 2, 3, 1, 2, 0, 3, 1, 1, 1, 3, 3, 2, 2, 0, 0, 1, 0, 3, 1, 2, 1, 1, 1, 3, 0, 1, 0, 0, 1, 0, 0, 3, 2, 1, 2, 3, 2, 1, 0, 0, 1, 1, 1, 0, 2, 3, 0, 2, 3, 3, 1, 1, 0, 3, 0, 1, 3, 0, 0, 0, 0, 2, 0, 2, 1, 3, 3, 3, 3, 2, 1, 3, 1, 0, 1, 1, 2, 1, 3, 1, 3, 2, 3, 1, 1, 1, 0, 0, 2, 2, 3, 3, 0, 1, 0, 3, 1, 2, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0], [2, 1, 4, 0, 4, 0, 1, 3, 0, 0, 1, 1, 4, 2, 1, 0, 4, 2, 1, 0, 2, 4, 2, 0, 0, 4, 0, 2], [2, 0, 1, 2, 2, 1, 2, 2, 0, 1, 2, 0, 1, 0, 2], [1, 0, 0, 1, 1, 0, 1, 0], [4, 1, 0, 4, 1, 5, 5, 4, 3, 1, 5, 3, 0, 3, 4, 5, 3, 2, 4, 3, 3, 2, 5, 4, 0, 5, 5, 0, 4, 5], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 0, 0], [3, 0, 4, 4, 3, 3, 4, 3, 2, 2, 0, 0, 1, 0, 1, 1, 1, 3, 4, 3, 1, 2, 2, 2, 2, 1, 4, 4, 4, 4, 4, 0, 4, 4, 1, 4, 0, 0, 1, 3, 4, 4, 2, 4, 2, 2, 0, 0, 3, 4, 0, 1, 1, 3, 4, 2, 4, 4, 2, 4, 0, 0, 1, 0, 4, 4, 0, 4, 4, 4, 4, 2, 4, 4, 2, 0, 0, 0, 0, 0, 1, 3, 1, 2, 4, 0], [0, 2, 2, 1, 1, 2, 3, 3, 2, 0, 2, 0, 0, 3, 3, 3, 1, 2, 2, 1, 1, 0, 3, 3, 2, 0, 0, 1, 2], [3, 1, 5, 1, 4, 2, 3], [2, 0, 1, 1, 2, 2, 2, 0, 2, 2, 0, 0, 2, 1], [0, 2, 2, 3, 3, 1, 3, 2, 1, 0, 1, 1, 1, 3, 3, 0, 3, 3, 3, 0], [2, 13, 14, 11], [18, 22, 16, 7, 15], [8, 9, 8], [8, 17, 13, 18, 6, 1, 28, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 22, 22, 8, 14, 3, 5, 0, 0, 5, 2, 15, 2, 4, 9, 1, 3, 4, 39, 39, 32, 3, 114, 20, 28, 15, 8, 30, 20, 3, 86, 29, 7, 14, 20, 4, 5, 3, 8], "tree_depth": 68, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= ( i2 + ( i0 - int(0.0) ) )\\ni1 *= i2\\nif True:{:\\nloopBreak% = 0\\nfor in1 in (s1 + getCharFromString((((s0[abs(int(3.0)):max(int(3.0), saveOrd(in1))][int(5.0):] + \"\"C\"\").capitalize() + s1) + \"\"89\"\").capitalize(), min(int(48.0), ( saveOrd(\"\"%.\"\") * int(3.0) )))):{:\\ni0 -= mod(i0,min(int(5.0), int(5.0)))\\nif \"\"s*\"\".endswith((saveChr(int(8.0)) + (\"\"8\"\" + \"\"w\"\"[max(len(saveChr(( divInt(i0,i2) * int(4.0) ))), i1):][min(int(6.0), divInt(int(0.0),int(2.0))):][:int(1.0)][:min(i0, int(4.0))]))):{:\\nin2 = in2.capitalize().rstrip().lstrip(getCharFromString(\"\"N\"\".capitalize(), i2)).capitalize()\\nb1 = getCharFromString(in1, i2) != in0\\nb0 = not True\\n:}\\ns1 = \"\"qh\"\"\\nif ( (getCharFromString(in2[int(4.0):][i2:i0].rstrip()[max(mod(int(5.0),( max(( int(7.0) * i2 ), i0) + int(4.0) )), int(8.0)):].strip(in0), int(5.0)) + (s0.rstrip(\"\"p\"\") + \"\"/\"\")) != (saveChr(i1) + saveChr(mod(saveOrd(in0),i2))[divInt(abs(max(int(0.0), int(5.0))),i1):min(i2, int(2.0))].capitalize().capitalize()[saveOrd(in1):]) or \"\"#O\"\".endswith(in2) ):{:\\nif i0 \\ge i1:{:\\nin0 = saveChr(i1)\\nloopBreak% = 0\\nfor s2 in getCharFromString(in1, i0):{:\\nloopBreak% = 0\\nwhile False:{:\\nin0 = getCharFromString(getCharFromString(saveChr(( i1 - ( int(1.0) * abs(max(min(abs(mod(int(9.0),saveOrd(in0[int(5.0):]))), i1), int(1.0))) ) )), int(7.0))[( int(6.0) + abs(int(4.0)) ):min(( min(int(1.0), int(2.0)) - int(5.0) ), i2)], i0).capitalize().lstrip(s2).strip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = not not ( divInt(saveOrd(in2),min(i1, int(2.0))) + i1 ) \\le abs(int(1.0))\\nloopBreak% = 0\\nfor in1 in s0:{:\\nb2 = not b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nin2 = in2\\n:}else:{:\\ns0 = \"\"\\\\\\n]\"\"\"\\n:}\\nin1 = (\"\"L\"\" + in2.capitalize()[:( i0 * int(29.0) )])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 1, 2, 0, 0], [2, 1], [1, 1, 2], [], [0, 0], [], [], [], [5, 2], [2, 1], [0, 0], [2], [], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 5, 2, 0, 3, 4, 0, 1, 8, 1, 8, 1, 0, 4, 2], [2, 0, 1, 0, 0, 1, 1, 1, 2, 1, 0, 1, 0, 0, 1], [0, 1], [3, 0, 2, 3, 0, 3, 1, 1, 3, 3, 0, 1, 1, 2, 3, 3, 2, 3, 1, 3, 2, 0, 3, 2, 3, 2, 3, 1, 3, 3, 0, 1, 0, 2, 3, 2, 2, 3, 3, 3, 0, 3, 1, 3, 2, 2, 0, 1, 0, 2, 0, 1, 1, 0, 1, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 2, 0, 2, 3, 0, 1, 0, 1, 4, 4, 2, 0, 2, 2, 2, 0, 4, 1], [2, 2, 1, 2, 1, 0], [1, 0, 0, 0, 1, 1, 1], [0, 1, 3, 0, 1], [1, 1], [], [2, 4, 0, 2, 0, 2, 0, 0, 1, 1], [1], [], [1, 1, 2], [2, 0], [18], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 2, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 1, 15, 15, 14, 2, 58, 12, 20, 6, 7, 5, 2, 0, 10, 1, 0, 3, 2, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveChr(max(i2, ( min(i0, abs(int(1.0))) * int(5.0) )))[:min(abs(i1), int(2.0))] == s0:{:\\ni0 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif mod(len(s1[:min(( max(int(3.0), min(divInt(i0,max(( saveOrd(in0[divInt(saveOrd(s0),int(4.0)):]) * abs(min(i1, int(0.0))) ), i1)), ( abs(divInt(mod(abs(abs(min(i1, saveOrd(\"\"1\"\")))),int(1.0)),max(mod(mod(i2,int(8.0)),i1), ( i0 - int(1.0) )))) * int(8.0) ))) - i1 ), int(1.0))]),int(04.0)) != int(2.0):{:\\ni0 += i0\\n:}else:{:\\ns1 = \"\"S\"\"\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [], [0], [], [], [2, 3, 3], [], [0, 2], [], [3], [0], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 5, 4, 9, 7, 8, 1, 3, 1, 8, 4, 3, 2, 2, 6, 1, 6, 2, 5], [1, 2, 0, 0, 0, 2, 0, 2, 1, 1, 0, 0, 0, 1, 0, 2, 0, 2], [0], [2, 3, 2, 0, 1, 0, 3, 2, 0, 1, 1, 0, 2, 1, 1, 3, 2, 1, 3, 2, 2, 3, 1, 0, 0, 1, 1, 2, 1, 1, 2, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 3, 0, 2, 1, 2, 3, 3, 0, 1, 1, 3, 2, 2, 2, 0, 1, 1, 3, 0, 0, 1, 0, 0, 3, 1, 0, 3], [0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [1, 2, 3, 3, 4, 4, 1, 0, 4, 4, 4, 3], [1, 1, 1, 2, 0, 0, 2, 1], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 4, 1, 1, 3, 2, 1, 0, 4], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [], [3, 2, 3, 3, 1, 4, 3, 0, 3, 0, 4, 3, 0, 4, 2, 1, 3, 0, 4, 2, 3, 2, 3, 4, 4, 1, 2, 4, 1, 4, 2, 2, 4, 1, 4, 2, 2, 4, 1, 0, 0, 0, 1, 2, 3, 4, 4, 4, 0, 4, 1, 1, 4, 0], [1, 0, 2, 1, 0, 3, 0, 3, 1, 0, 0, 1, 2, 0, 0, 3], [3, 4, 0], [2, 2, 1, 2, 1, 0, 0, 1, 0, 0], [2, 0, 1, 1, 0, 0, 0, 1, 2, 2], [1, 5, 12, 4], [22, 17, 16], [3, 2, 5], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 0, 2, 0, 1, 1, 0, 0, 0, 20, 20, 18, 0, 68, 18, 12, 8, 10, 9, 10, 0, 54, 16, 3, 10, 10, 4, 3, 3, 0], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\nres0 = (((\"\"3\"\" + saveChr(( max(mod(i1,int(6.0)), i2) - abs(divInt(i0,int(0.0))) ))) + (s1 + (in1 + getCharFromString((s1 + \"\"B\"\"[int(5.0):].capitalize()), i0))))[( int(4.0) - int(9.0) ):] + (s1 + saveChr(len(((getCharFromString(\"\"w\"\".lstrip(getCharFromString(\"\"r\"\", ( int(7.0) - len(saveChr(mod(mod(saveOrd(\"\"F\"\"),int(8.0)),i0))[i2:int(1.0)][int(3.0):mod(int(1.0),int(8.0))].rstrip(getCharFromString(getCharFromString(\"\"M\"\", divInt(int(4.0),int(3.0)))[i0:( mod(i2,i1) * ( ( i1 + saveOrd(in0) ) + i0 ) )][:divInt(int(2.0),( max(min(i0, int(2.0)), int(6.0)) * saveOrd(s2) ))], mod(mod(( i0 - int(1.0) ),int(6.0)),saveOrd(s1))))) ))[:i1]), i0) + \"\"Eq\"\")[int(2.0):] + (saveChr(i2) + getCharFromString(s0, i0).capitalize())[saveOrd(getCharFromString(\"\"2\"\", int(5.0))):i2])[:len(\"\"5\"\")])))) != in1.lstrip()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 1, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [0], [], [1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 5, 4, 7, 0, 2, 8, 5, 2], [0, 2, 1, 0], [0], [0, 1, 0, 2, 3, 1, 1, 0, 2, 1, 0, 1, 1, 1], [0, 0, 1], [1, 1], [0, 0], [0], [5, 5, 0, 4], [1, 1, 0, 0, 0, 1, 1], [], [1, 0, 4, 3, 3, 1, 2, 4, 1, 0, 3, 1, 0], [3, 0], [3], [0], [3, 3, 1, 1, 2, 1, 1], [], [20, 25, 18, 2], [0], [15, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 0, 4, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 1, 0, 3, 3, 4, 1, 8, 1, 1, 1, 0, 4, 7, 0, 13, 2, 1, 1, 7, 0, 4, 1, 2], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\",\"\".endswith(in2)\\ni0 = i2\\nb1 = True\\nin2 = ((\"\";\"\" + getCharFromString(\"\"uz0s\"\", int(4.0))[i1:( max(int(5.0), int(4.0)) + i0 )]) + s0).lstrip((\"\"c\"\" + in1))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [2], [], [0], [], [], [1, 0], [3], [1, 0], [0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 7, 8, 9, 1, 1, 1, 4, 5, 4, 4, 4, 1, 3, 7, 7, 7, 5, 3], [2, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2], [], [3, 1, 3, 0, 1, 3, 1, 3, 0, 3, 3, 2, 2, 2, 0, 0, 3, 2, 3, 2, 0, 2, 3, 3, 3, 0, 0, 1, 1, 0, 3, 3, 1, 2, 2, 2, 1, 1, 3, 0, 2, 3, 3, 1, 3, 3, 2, 0, 2, 2, 3, 1, 3, 3, 2, 3, 0, 0, 0, 2, 1, 3, 0, 2, 1, 2, 3, 1, 0, 3, 2, 0, 3, 3, 1, 3, 1, 1, 1, 1], [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 2, 2, 1, 1, 4, 2, 4, 3, 2, 4, 4, 0, 1, 4, 1, 3, 2, 1, 4, 0, 3, 2, 0, 1, 2, 3, 0], [0, 0, 0, 1, 2, 1, 2, 1, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 3, 5], [1, 1, 1, 1, 1], [], [2, 3, 3, 1, 4, 3, 0, 2, 4, 2, 4, 1, 1, 2, 2, 4, 0, 4, 0, 2, 4, 0, 0, 1, 0, 4, 2, 1, 4, 0], [2, 3, 0, 3, 1, 2, 1, 2], [0, 2], [0, 1, 0, 2, 0, 0, 2], [3, 3, 1, 1, 1], [], [3, 24, 2], [], [31, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 20, 20, 16, 0, 80, 18, 28, 9, 9, 8, 5, 0, 30, 8, 2, 7, 5, 0, 3, 0, 2], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile abs(int(0.0)) \\ge abs(i2):{:\\ns0 = ((\"\"`\"\" + (s1 + getCharFromString(\"\"+\"\", int(0.0))[abs(int(7.0)):max(i0, max(saveOrd(\"\"d\"\"), divInt(divInt(mod(i0,i0),abs(( saveOrd(s0.strip()[( i0 + mod(len(saveChr(abs(saveOrd(s0)))),i2) ):i2][int(8.0):]) + int(9.0) ))),i2)))].lstrip()[:saveOrd(s0.capitalize()[min(int(1.0), ( mod(( int(1.0) + int(1.0) ),max(i0, ( saveOrd(s0) - max(int(4.0), len(\"\"y\"\")) ))) * abs(divInt(i2,mod(( max(int(5.0), saveOrd(in0)) - min(( len(saveChr(i0)) * i0 ), i0) ),( int(4.0) - abs(i0) )))) )):( int(4.0) + divInt(min(int(4.0), i0),max(divInt(i2,abs(len(\"\"c\"\"[int(1.0):]))), min(int(3.0), int(7.0)))) )])]).capitalize()) + in2.capitalize())[int(775.0):int(3.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 1, 2, 2, 2, 2, 0, 2, 2, 0, 0], [0, 1, 2, 1, 0, 1, 2], [1, 1, 1, 1, 2], [0, 0], [0, 0, 0, 0], [], [], [], [4, 2, 0, 5], [2, 0, 0, 1, 2, 1, 1, 1, 2], [0, 0, 0, 0], [0, 5, 1], [3, 3], [0, 0], [], [0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 7, 3, 1, 0, 3, 1, 6, 1, 3, 2, 7, 3, 4, 7, 5, 1, 5, 6, 1, 9, 4, 5, 2, 8, 8, 7, 2, 6, 5, 9, 5, 8, 4, 7, 9, 7, 5], [1, 0, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 2, 1], [0, 0, 0, 1], [0, 1, 0, 2, 3, 3, 1, 1, 1, 0, 0, 2, 1, 3, 2, 1, 3, 1, 3, 3, 0, 2, 1, 3, 0, 2, 2, 2, 0, 1, 1, 1, 0, 2, 2, 3, 1, 3, 3, 1, 2, 1, 2, 2, 2, 0, 1, 3, 2, 2, 0, 2, 1, 1, 0, 2, 3, 1, 3, 0, 3, 3, 3, 3, 0, 3, 3, 3, 1, 0, 1, 0, 1, 1, 2, 0, 2, 2, 3, 1, 0, 1, 2, 2, 0, 2, 3, 2, 3, 1, 3, 2, 0, 0, 2, 1, 0, 0, 0, 1, 2, 2, 2, 2, 0, 1, 2, 0, 3, 1, 3, 1, 1, 0, 0, 3, 1, 0, 2, 3, 1, 3, 3, 3], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [2, 4, 0, 1, 1, 0, 2, 2, 3, 0, 4, 4, 0, 4, 1, 4, 3, 2, 4, 1, 3, 0, 2, 1, 0, 3, 2, 2, 2, 2, 4], [1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [5, 1, 4, 2, 2, 1, 5, 0, 0, 3, 2, 4, 1, 4, 2, 2, 1], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0], [3, 2, 0, 3, 0, 2, 0, 2, 3, 1, 2, 0, 1, 0, 0, 4, 1, 2, 2, 1, 1, 2, 0, 1, 1, 4, 4, 0, 3, 2, 1, 2, 0, 0, 0, 4, 1, 2, 0, 2, 4, 4, 0, 1, 4, 2, 3, 2, 0, 1, 1], [3, 2, 3, 2, 2, 2, 2], [5, 1], [1, 0, 0, 0, 2, 1, 1, 0, 1, 2, 2, 2, 1], [2, 3, 2, 2, 2, 2, 3, 2, 1, 0, 3, 3, 3, 2, 1, 1, 3], [4], [11, 23, 12], [3, 2, 3, 4, 4, 0, 2], [12, 5, 3, 3, 15, 13]], "fitness": 9223372036854775807, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\nloopBreak% = 0\\nfor in2 in (s1[:int(27.0)] + (in1 + s2[i1:divInt(abs(saveOrd((\"\"3)\"\" + s2[int(3.0):int(1.0)])[int(031.0):i1])),i1)])):{:\\ni1 = ( int(6.0) - min(( int(1.0) * max(int(3.0), max(min(i2, divInt(int(2.0),abs(i2))), ( mod(mod(i1,int(7.0)),int(3.0)) * int(4.0) ))) ), i2) )\\nif \"\"234\"\" in s1:{:\\nloopBreak% = 0\\nwhile ( ( ( ( abs(int(7.0)) - len(in2) ) - min(int(5.0), ( int(1.0) * divInt(mod(mod(i1,int(5.0)),saveOrd(\"\"4\"\".strip(\"\"\"\"\"[:( mod(i2,( int(6.0) - int(1.0) )) - i1 )][divInt(saveOrd(\"\"0\"\"),int(9.0)):]))),min(i0, saveOrd(s0[:max(saveOrd(\"\"l\"\"), len(\"\"E\"\"))]))) )) ) \\le i0 and s0.rstrip().capitalize().endswith((\"\"\"\"[abs(saveOrd(in0[:max(int(4.0), i0)])):int(5.0)] + s2)) ) and i1 == int(288.0) ):{:\\nif int(7.0) \\l mod(i1,( divInt(len(in1),int(2.0)) * i1 )):{:\\nloopBreak% = 0\\nfor s1 in \"\"\"\".capitalize():{:\\ni0 = int(6.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif divInt(( i1 * ( min(divInt(abs(int(5.0)),max(( i1 - i1 ), divInt(int(9.0),i0))), i2) * i1 ) ),int(5.0)) != mod(( mod(( i1 - int(8.0) ),mod(i0,min(int(4.0), len(in1[int(7.0):])))) - int(9.0) ),i1):{:\\nloopBreak% = 0\\nwhile s2.capitalize().capitalize()[i0:] not in \"\",\"\":{:\\ni2 += abs(int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ns2 = (s1[:i1] + \"\"2xm\"\")[mod(abs(int(5.0)),abs(abs(saveOrd(\"\"*\"\")))):].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 12, 12, 7, 5, 2, 4, 0, 0, 0, 4, 9, 4, 3, 2, 2, 0, 3, 38, 38, 32, 4, 124, 32, 31, 15, 18, 17, 17, 2, 51, 7, 2, 13, 17, 1, 3, 7, 6]}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 1, 0, 2, 1, 1, 2, 2, 0], [1, 1, 0, 1], [1, 0, 1, 0, 1], [0], [0, 0], [], [], [2, 2], [1, 4, 3], [0, 1, 1, 2, 0, 1, 2], [0, 0, 0], [3, 1], [2, 2], [], [], [1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [4, 1, 8, 9, 4, 9, 1, 1, 3, 9, 8, 4, 0, 6, 1], [1, 1, 2, 0, 2, 2, 0, 2, 2, 1, 2, 1, 1, 1, 2, 0, 0, 1], [0, 0, 1], [0, 1, 0, 1, 0, 3, 1, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 3, 1, 1, 1, 3, 0, 3, 0, 2, 3, 1, 3, 1, 2, 2, 3, 3, 1, 2, 3, 1, 3, 0, 0, 0, 3, 1, 1, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0], [1, 3, 4, 1, 0, 4, 0, 3, 2, 1, 1, 3, 0, 1, 3, 0], [1, 0, 0, 2, 0], [0], [3, 5, 5, 0, 1, 5, 2, 5, 4], [0, 1, 1, 1, 1, 1, 1], [0], [0, 1, 3, 1, 3, 2, 2, 1, 4, 0, 0, 0, 3, 4, 2, 3, 1, 3, 4, 4, 0, 4, 0, 4, 0, 2, 0, 2, 1, 4, 2, 1], [1, 2, 1, 0, 0, 3, 0], [0], [2, 2, 2, 1, 1, 0], [2, 2, 1, 1, 2, 3, 0], [1], [18, 5], [5, 1, 7], [7]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 4, 5, 1, 2, 0, 0, 2, 3, 7, 3, 2, 2, 0, 0, 3, 15, 15, 18, 3, 50, 5, 16, 5, 1, 9, 7, 1, 32, 7, 1, 6, 7, 1, 2, 3, 1], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not i1 \\g int(4.0):{:\\ni1 = i2\\nb2 = int(1.0) \\le i0\\nif in0 != \"\"51\"\":{:\\ni2 = max(int(8.0), len((\"\"s\"\" + (\"\"f\"\"[saveOrd(saveChr(max(min(saveOrd(in2), i2), i0))):][i2:] + in2))))\\n:}\\n:}else:{:\\nb2 = not i2 \\ge ( min(int(9.0), int(4.0)) - int(9.0) )\\n:}\\nloopBreak% = 0\\nfor s0 in s1:{:\\nif ((\"\"7\"\" + (saveChr(len(getCharFromString(in2, i1))) + getCharFromString(s2, abs(i2))))[divInt(max(int(1.0), max(int(1.0), ( ( len(in2.lstrip()) + min(int(3.0), ( max(int(9.0), len(in1[:i1])) + i1 )) ) * i1 ))),min(int(8.0), int(4.0))):].capitalize() + \"\"$\"\"[:i2]) not in getCharFromString(\"\"B\"\"[int(06.0):int(1.0)], i0):{:\\ni0 += i1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 1, 1], [1], [2, 3, 0, 0, 0, 3, 2, 0, 0], [0, 1], [0, 3], [1, 0], [1], [5, 4], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [], [2, 3, 2, 3, 4, 1, 1, 3, 1, 1, 2, 0], [2], [], [2, 2, 1], [0, 2, 0, 3, 0, 3, 0, 2, 1, 0, 3, 0], [19, 19, 5, 2, 10, 24], [23], [8, 0], [6, 22, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9, 2, 2, 1, 1, 2, 12, 0, 12, 1, 0, 3, 12, 6, 1, 2, 3], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = ((\"\"T8T#\"\".capitalize() + \"\"F=C0\"\")[( min(i0, i1) - i2 ):] + (\"\"x\"\" + \"\"K#Y\"\"))[len(in1[:mod(i1,i1)]):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [1], [0, 0], [], [0], [], [], [2, 0], [1, 0], [0, 2, 1, 1], [0, 0], [0], [2], [], [], [1], [1], [8], [1, 1, 1, 1, 2], [], [3, 0, 3, 0, 3, 0, 3, 2, 0, 3, 3, 2, 3, 3, 3, 1, 0], [1, 0], [3, 4, 0, 3, 2, 0, 2, 4, 4], [2], [0], [1, 1, 4, 5, 3, 2], [1], [], [2, 2, 0, 0, 0, 0, 0, 1, 4], [1], [], [1, 1], [3], [], [], [], [16]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 2, 4, 2, 1, 1, 0, 0, 1, 1, 1, 5, 0, 17, 2, 9, 1, 1, 5, 1, 0, 9, 1, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not s1[:len(s1)][:i1] in in1:{:\\nb2 = saveOrd(in2) \\g i1\\n:}else:{:\\nb0 = min(i1, len(in0)) \\l divInt(i1,abs(min(( abs(saveOrd(\"\"-\"\")) * saveOrd(saveChr(int(8.0))) ), i2)))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 0, 0], [], [0, 2, 2], [], [0, 0, 0], [], [], [0], [], [2], [], [2], [], [], [], [], [1, 1, 1], [4, 7, 7], [0, 2, 2], [0], [1, 2, 1, 0, 1, 0], [1], [], [], [0], [1, 4, 5], [0, 1, 1, 0, 0, 1], [], [3, 2, 4, 0, 1, 1, 2, 1], [1], [], [0, 2], [0, 0, 0, 0, 3, 2], [3, 0, 4, 14], [], [8], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 6, 1, 0, 0, 1, 3, 6, 0, 8, 1, 0, 2, 6, 4, 0, 1, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = (saveChr(int(4.0))[divInt(int(7.0),i0):int(7.0)] + s1) == \"\"DA\"\"\\nin1 = \"\"E\"\"\\nin2 = \"\"O[8\"\"[i2:]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1], [1, 2, 1, 1, 1], [0], [2, 0, 1, 2], [0], [], [], [], [3], [], [0, 0, 0], [], [], [2, 2, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 4, 2, 8, 4, 4, 9, 7, 5], [0, 2, 0, 0, 0, 0, 2, 2, 1, 0], [1, 0], [1, 1, 0, 1, 3, 2, 3, 0, 2, 0, 0, 1, 3, 2, 0, 2, 2, 1, 0, 1, 3, 2, 3, 3, 0, 0, 1, 3, 1], [0, 1, 0, 0, 1, 1], [3, 2, 2, 4, 1, 4], [2, 2, 0, 2], [1, 1, 1], [2, 4, 5, 0, 5, 3, 5, 5, 2], [1, 1], [0], [3, 3, 2, 0, 0, 3, 0, 2, 4, 2, 2, 2, 1, 4, 0, 0, 0, 2, 1], [1, 0], [], [0, 0, 2, 0, 2, 2], [0, 3], [24], [], [], [31]], "fitness": 9223372036854775807, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = ((in1[int(6.0):int(4.0)] + in2) + (s0 + saveChr(i0)[int(2.0):len(\"\"Y\"\"[( abs(i2) * mod(i0,i0) ):][int(8.0):abs(( i0 * ( mod(int(4.0),i0) + int(4.0) ) ))][saveOrd(getCharFromString(in2, mod(max(saveOrd(in0), i2),i2))):])]))\\nloopBreak% = 0\\nfor in2 in in2:{:\\nres0 = not not True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 3, 0, 0, 3, 0, 1, 0, 6, 6, 8, 0, 26, 6, 6, 3, 3, 8, 1, 1, 17, 2, 0, 5, 1, 1, 0, 0, 0]}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 2, 0, 2, 2, 2, 0, 0], [1, 2, 1, 2], [0, 2, 0, 1, 1, 2], [], [0, 0, 0, 0], [], [], [1, 2, 3, 0, 2, 0], [1, 5, 1, 5, 3], [0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0], [], [0, 0, 3, 0], [1], [], [0, 1], [1, 1, 1, 1, 1, 1, 1], [0, 9, 7, 5, 2, 5, 9], [1, 0, 1, 2, 0, 0, 1, 0, 2, 1, 2, 2, 2], [0, 1], [2, 1, 0, 0, 0, 1, 1, 0, 1, 0, 2, 3, 2, 3, 1, 1, 0, 2, 3, 2, 0, 1, 0, 0, 3, 2, 0, 1, 3], [1, 1, 1, 0, 0, 0, 0], [2, 3, 2, 3], [0, 2, 0, 1, 2], [1, 0, 1], [5, 5, 2], [1], [], [4, 0, 4, 1], [1, 2], [], [], [3], [], [], [], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 4, 6, 0, 4, 0, 0, 5, 4, 8, 4, 0, 4, 1, 0, 2, 7, 7, 10, 2, 23, 5, 3, 3, 3, 3, 1, 0, 4, 2, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b2\\nin2 = saveChr(mod(int(0.0),i1))\\nres0 = i0 \\g i1\\nif b0:{:\\ni2 = int(9.0)\\n:}\\nloopBreak% = 0\\nwhile ( int(7.0) != i0 or b2 ):{:\\nif int(5.0) \\g i0:{:\\nloopBreak% = 0\\nwhile divInt(abs(mod(len(in2),int(2.0))),int(5.0)) != i1:{:\\ni0 += ( abs(( i2 * int(9.0) )) + i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ns2 = \"\"]\"\".capitalize()\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [1], [1, 1], [], [0, 0], [], [], [], [], [2], [], [3], [], [], [], [0], [1, 1], [4, 7], [0, 2, 0, 0], [0, 0], [0, 1, 0, 1], [], [], [], [], [0], [1, 1], [], [4, 2, 3, 4, 1, 0, 4, 4, 4, 1], [2, 3, 3, 0, 3], [0, 2, 0], [1], [0, 1], [14], [17], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 2, 2, 4, 2, 4, 0, 0, 0, 0, 1, 2, 0, 10, 5, 3, 1, 2, 1, 1, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\nif (\"\"O\"\".lstrip() + s0)[:int(4.0)].capitalize() != getCharFromString(\"\"r\"\".lstrip(), i0).strip():{:\\ni0 = int(7.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1], [0, 0, 1, 0, 1], [], [1, 2, 0, 1, 0], [], [0, 0, 0], [], [], [2, 1, 0, 1], [], [2, 0, 2], [], [3, 2], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 7, 8, 5, 8, 1, 0, 5, 8, 9, 0, 0, 6, 1, 0, 6, 4, 2, 5, 9, 5, 5, 6, 0, 1, 5, 0, 7, 7, 4, 0, 6, 6, 7, 1, 0, 0, 5, 5, 9, 1, 3, 1, 7, 9, 4, 4, 2, 2, 6, 3, 3, 0, 8], [1, 2, 2, 0, 0, 1, 2, 0, 0, 2, 0, 1, 2, 1, 1, 0, 0, 0, 0, 2, 0, 2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 1, 2, 1, 2, 0, 1, 1, 0, 2, 1, 1, 2, 2, 0, 0, 2, 0, 2, 0, 1, 0, 0, 0, 2, 2, 0, 2, 2, 2, 2, 0, 1, 0], [0, 0], [3, 3, 2, 1, 1, 1, 3, 3, 1, 2, 0, 0, 2, 2, 3, 3, 3, 3, 2, 3, 1, 2, 1, 1, 3, 1, 2, 3, 1, 2, 3, 0, 0, 3, 3, 2, 0, 1, 0, 2, 3, 3, 0, 3, 1, 1, 2, 2, 2, 3, 0, 3, 0, 3, 0, 1, 3, 2, 3, 3, 2, 2, 0, 2, 0, 0, 3, 1, 1, 2, 3, 2, 3, 1, 2, 3, 2, 0, 2, 3, 2, 0, 1, 0, 1, 1, 1, 0, 2, 0, 2, 1, 2, 0, 1, 2, 0, 3, 0, 2, 2, 2, 2, 3, 0, 0, 0, 2, 3, 3, 3, 3, 0, 1, 0, 2, 1, 3, 2, 2, 1, 2, 0, 3, 1, 0, 2, 3, 1, 2, 1, 1, 0, 3, 0, 3, 1, 2, 2, 2, 3, 0, 2, 0, 3, 0, 0, 3, 3, 0, 2, 3, 1, 1, 2, 1, 3, 1, 3, 2, 0, 3, 1, 1, 3, 0, 0, 0, 2, 3, 3, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 0, 2, 0, 2, 0, 1, 2, 1, 0, 1, 3, 3, 2, 3, 2, 2, 2, 1, 1, 0, 2, 2, 3, 1, 1, 2, 3, 3, 1, 3, 1, 1, 2, 2, 2, 2, 0, 2, 2, 2, 2, 3, 3, 1, 1, 0, 1, 1, 1, 1, 0, 2, 0, 3, 3, 2, 2, 3, 0, 0, 2, 0, 2, 0, 1, 3, 0, 0, 2, 1, 0, 1, 0, 2, 3, 0, 0], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 2, 1, 2, 4, 0, 4, 1, 4, 3, 1, 4, 2, 2, 0, 3, 3, 2, 1, 2, 2, 0, 3, 2, 4, 0, 3, 2, 1, 4, 3, 2, 1, 3, 4, 3, 3, 4, 0, 1, 2, 0, 4, 0, 3, 4, 2, 1, 0, 1, 4, 0, 3, 4, 2, 2, 1, 0, 0, 4, 4, 0, 1, 3, 0, 1, 2, 3], [2, 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 2, 2, 2, 1, 2, 1, 0, 0, 1, 2, 0, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0], [4, 1, 1, 1, 1, 5, 4, 1, 0, 3, 1, 1, 4, 2, 4, 2, 2, 3, 5, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [2, 2, 1, 0, 2, 2, 2, 1, 2, 4, 4, 0, 1, 2, 0, 0, 2, 2, 4, 2, 1, 4, 1, 2, 0, 4, 4, 2, 2, 0, 4, 0, 4, 4, 4, 4, 2, 2, 2, 1, 0, 2, 1, 0, 4, 4, 4, 0, 0, 2, 4, 4, 4, 2, 4, 1, 1, 4, 2, 2, 2, 0, 4, 2, 0, 0, 4, 0, 0, 0, 4, 1, 2, 4, 0, 1, 2, 0], [2, 3, 2, 2, 1, 2, 1, 3, 1, 2, 2, 0, 1, 1, 3, 2, 1, 3, 0, 3, 2, 2, 3], [4, 3, 3, 5, 4, 0], [0, 2, 2, 0, 0, 0, 1, 0, 2, 2, 0, 1, 2, 0, 1, 1, 2, 0, 0, 1, 0, 1, 2, 0, 1], [0, 2, 0, 0, 0, 1, 0, 3, 2, 3], [16, 18, 17, 22, 9], [12], [0, 4], [16, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 0, 5, 0, 3, 0, 0, 3, 0, 2, 0, 1, 1, 0, 0, 0, 54, 54, 60, 2, 245, 72, 61, 38, 34, 18, 10, 0, 72, 22, 5, 23, 10, 5, 1, 2, 2], "tree_depth": 65, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = min(abs(divInt(int(7.0),int(2.0))), int(7.0))\\nin1 = \"\"Q\"\"[max(abs(int(8.0)), divInt(i2,i2)):][( ( saveOrd(s1) * min(saveOrd(\"\"0\"\"[max(( saveOrd(s1.rstrip(\"\"S\"\").capitalize()[int(5.0):divInt(int(8.0),int(1.0))]) + len(s1[:int(0.0)]) ), ( max(int(5.0), ( saveOrd(s1) - i0 )) * i0 )):abs(abs(( i1 - int(8.0) )))][i2:mod(min(len(\"\"R\"\"[i0:].capitalize()[len(\"\"W\"\".capitalize()):][int(9.0):int(0.0)]), ( ( divInt(abs(i0),max(i2, abs(i0))) * int(0.0) ) - abs(mod(min(len(in2[mod(( i1 * divInt(i2,i1) ),abs(int(6.0))):int(1.0)]), ( saveOrd(saveChr(( min(int(0.0), ( len(in1[mod(i1,divInt(abs(( i0 - int(6.0) )),i0)):][:int(4.0)].capitalize()) * int(2.0) )) - int(5.0) ))) + i0 )),( i0 - mod(int(9.0),( i2 + int(5.0) )) ))) )),( i0 * max(i2, mod(mod(mod(( saveOrd(saveChr(i0)) * i0 ),i1),( len(s1) * abs(max(len(saveChr(i0).lstrip(\"\"m\"\"[:int(5.0)][:i0][( int(6.0) * saveOrd(s0) ):( divInt(int(0.0),mod(i2,len(\"\"J\"\"[int(1.0):]))) - i0 )].capitalize().capitalize())), mod(len(in0),int(5.0)))) )),( int(0.0) * int(7.0) ))) ))][i2:]), saveOrd(getCharFromString(saveChr(i0), min(int(7.0), ( ( divInt(max(i2, ( i0 - abs(i2) )),i2) + min(saveOrd(saveChr(i2)), divInt(min(int(4.0), int(0.0)),( int(6.0) + len(s1) ))) ) - int(6.0) ))))) ) * saveOrd(s1) ):( i2 + abs(int(7.0)) )]\\nb2 = saveChr(int(1.0)).capitalize().lstrip(\"\"-\"\".strip(\"\"4\"\")[max(i1, i2):i1])[( min(max(i2, saveOrd(getCharFromString(in1[:i0][mod(i1,divInt(i1,mod(i0,mod(( i2 * i1 ),int(0.0))))):divInt(int(0.0),divInt(i1,i2))][:i2], i0))), ( i0 - ( i2 * int(5.0) ) )) - ( int(5.0) * i0 ) ):int(9.0)] != s2[min(len(in1), ( saveOrd(s2.capitalize()) * ( ( mod(int(1.0),int(3.0)) * i2 ) - mod(divInt(abs(int(1.0)),int(7.0)),mod(abs(max(int(9.0), min(int(4.0), int(4.0)))),mod(mod(mod(( i0 - ( mod(divInt(( min(saveOrd(s2), int(2.0)) * int(2.0) ),i1),int(6.0)) * int(3.0) ) ),int(3.0)),int(0.0)),i0))) ) )):].rstrip(in0)\\ni0 = ( i0 * saveOrd(\"\"<\"\".capitalize()) )\\nb1 = b0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 2, 1, 0, 1, 2, 1, 2, 0, 1, 2, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 0, 2, 0, 2, 2, 1, 2, 1, 0, 0], [1, 2, 2, 0, 0, 2, 1, 0, 0, 1, 0, 0], [1, 0, 1, 2, 2, 1, 2, 2, 0, 2, 1, 1, 1, 2, 0, 1, 2, 1, 2], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [2, 1, 2], [5, 5, 4, 1], [0, 2, 0, 1, 0, 1, 1, 0, 2, 2, 1], [0, 0, 0, 0], [2, 0, 2], [3, 1, 1, 1], [1], [0, 1, 1], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 5, 2, 1, 9, 5, 3, 5, 3, 7, 5, 0, 3, 9, 5, 5, 2, 5, 6, 8, 8, 8, 5, 2, 2, 3, 9, 0, 7, 2, 0, 9, 7, 8, 7, 3, 3, 3, 3, 3, 8, 5, 3, 6, 3, 1, 7, 4, 8, 2, 6, 0], [2, 0, 2, 1, 1, 1, 2, 2, 0, 2, 2, 1, 2, 0, 2, 2, 0, 1, 1, 0, 1, 0, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 0, 2, 2, 1, 2, 2, 0, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 2, 1, 0, 0], [1, 1, 1, 0, 0, 1, 0, 1], [1, 2, 2, 3, 3, 3, 2, 0, 1, 0, 0, 0, 3, 2, 3, 1, 1, 0, 3, 1, 1, 3, 3, 0, 1, 0, 2, 2, 1, 0, 1, 1, 3, 1, 1, 0, 2, 2, 3, 3, 0, 3, 0, 0, 0, 0, 3, 1, 1, 2, 3, 1, 3, 2, 3, 3, 2, 3, 2, 3, 0, 1, 1, 0, 3, 3, 2, 1, 1, 0, 3, 3, 0, 2, 1, 1, 3, 2, 1, 3, 3, 0, 1, 2, 1, 0, 2, 2, 1, 3, 3, 3, 3, 1, 2, 2, 3, 3, 3, 3, 1, 2, 1, 1, 1, 3, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 0, 2, 2, 2, 1, 2, 0, 0, 2, 2, 3, 3, 3, 1, 3, 3, 0, 2, 1, 0, 3, 2, 1, 3, 0, 1, 2, 0, 2, 0, 2, 2, 3, 0, 0, 0, 0, 3, 0, 1, 0, 2, 0, 2, 0, 3, 0, 2, 3, 3, 0, 2, 1, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 4, 1, 0, 1, 1, 2, 1, 2, 2, 3, 3, 3, 2, 1, 3, 1, 1, 2, 0, 2, 3, 3, 2, 4, 1, 0, 4, 3, 4, 1, 0, 2, 0, 0, 0, 1, 1, 2, 4, 0, 4, 1, 0, 0, 0, 2, 4, 4, 4], [0, 1, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 0, 2, 1, 2], [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0], [2, 3, 5, 1, 4, 4, 3, 1, 3, 2, 1, 2, 4, 2, 2, 1, 4, 5, 0, 3, 2, 1, 3, 2, 3, 0, 5, 4, 2, 0, 4, 2, 1, 4, 2, 3], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [1, 3, 3, 4, 0, 4, 2, 0, 2, 0, 3, 0, 2, 1, 0, 3, 2, 3, 0, 2, 4, 1, 3, 4, 3, 1, 4, 4, 4, 3, 3, 1, 4, 0, 3, 1, 4, 1, 1, 1, 0, 4, 4, 0, 4, 1, 4, 0, 4, 4, 0, 2, 4, 2, 0, 2, 1, 4, 0, 1, 0, 1, 4, 4, 1, 2, 0, 1, 1, 0, 1, 2, 0, 4, 0, 2, 0, 4, 1, 2, 0, 1, 1, 0, 0], [2, 3, 2, 3, 1, 2, 1, 0, 0, 3, 2, 1, 1, 1, 2, 3, 3, 2, 2, 1, 2], [1, 3, 4, 0, 0], [0, 0, 0, 1, 2, 2, 2, 0, 1, 0, 2, 1], [2, 1, 0, 0, 1, 0, 2, 1, 2, 0, 2, 2, 1, 2, 2, 0, 3, 2, 0, 0, 2, 3], [12, 10, 0, 21, 7, 21, 24], [9, 1, 7, 14], [4, 8, 9, 8, 2, 2, 4, 3, 1], [9, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 31, 31, 12, 19, 6, 9, 0, 0, 3, 4, 11, 4, 3, 4, 1, 3, 3, 52, 52, 54, 8, 185, 42, 51, 23, 24, 36, 22, 6, 85, 21, 5, 12, 22, 7, 4, 9, 2], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(6.0)\\nif ( \"\"4j\"\" == ((s2.capitalize() + in0[mod(( max(min(saveOrd(in2[mod(i0,int(5.0)):i2]), i1), i1) - max(( min(int(2.0), int(1.0)) + i1 ), max(int(9.0), int(5.0))) ),max(abs(i2), int(3.0))):i2].rstrip()) + (s1 + \"\"M\"\"[( divInt(int(5.0),i0) * int(37.0) ):int(5039.0)])) or True ):{:\\nb2 = max(int(55.0), int(2.0)) != i2\\ni2 += ( mod(abs(abs(i1)),len(in1)) + i2 )\\nin1 = ((in0 + \"\"K\"\".capitalize()[i0:])[:i2] + ((\"\"b\"\" + saveChr(i2)).lstrip(saveChr(len(((\"\"A\"\" + getCharFromString(s1, int(5.0))) + (\"\"8\"\" + getCharFromString(\"\"h\"\", int(6.0)))))).capitalize()) + \"\"9\"\"))\\n:}else:{:\\nloopBreak% = 0\\nwhile False:{:\\nin0 = \"\"V\"\"\\nloopBreak% = 0\\nwhile mod(len(s2),int(8.0)) != abs(divInt(max(len(s1.capitalize().rstrip(saveChr(mod(max(mod(max(i0, int(8.0)),int(8.0)), i1),abs(min(( int(5.0) + int(2.0) ), i1)))))), abs(len(\"\"8\"\"))),i0)):{:\\ni1 += divInt(int(2.0),int(3.0))\\ns2 = saveChr(len(in1))\\nloopBreak% = 0\\nfor s2 in saveChr(( int(9.0) * abs(saveOrd(s2.capitalize())) )):{:\\ns1 = in1[i0:].lstrip()[int(0.0):]\\nb1 = ( int(7.0) * i1 ) \\le ( divInt(int(2.0),max(min(saveOrd(\"\"2\"\"[len(in2.lstrip()):int(0.0)]), ( mod(saveOrd(\"\"o\"\"),max(min(abs(int(9.0)), divInt(int(7.0),int(8.0))), int(7.0))) * min(int(3.0), ( i2 * i2 )) )), int(3.0))) - int(3.0) )\\ns0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(33.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s2 in \"\"24\"\":{:\\ni1 = min(mod(min(int(8.0), i1),mod(( mod(int(5.0),( i1 - i2 )) - divInt(divInt(max(max(abs(int(3.0)), saveOrd(\"\"H\"\".capitalize().capitalize())), min(i1, mod(int(6.0),i1))),saveOrd(s1[:mod(int(3.0),max(i1, int(1.0)))])),divInt(i0,divInt(i2,( mod(min(i2, i1),i2) * i2 )))) ),min(i0, int(7.0)))), i1)\\nloopBreak% = 0\\nwhile False:{:\\nif \"\"&\"\" in \"\"3\"\":{:\\nloopBreak% = 0\\nfor in0 in s2:{:\\ni2 *= ( i2 * ( i2 * min(i2, ( abs(saveOrd(\"\"V\"\")) + i0 )) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin0 = s0[( int(4.0) * saveOrd(saveChr(i0)) ):int(8.0)]\\n:}\\nloopBreak% = 0\\nfor in2 in in1:{:\\nb2 = s2[divInt(( divInt(i2,int(2.0)) - int(6.0) ),int(0.0)):] == \"\"Y\"\".capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif saveOrd(s0[:i0]) \\g i0:{:\\nloopBreak% = 0\\nfor in1 in \"\"1\"\":{:\\ni2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s2 in \"\"+\"\":{:\\ns1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni0 *= i0\\ns2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 3, 9, 7, 4, 7, 3, 7, 5, 0, 4, 4, 1, 3, 7, 8, 5, 9, 4, 4, 0, 1], [2, 2, 1, 0, 1, 1, 2, 0, 0, 2, 0, 2, 2, 0, 1, 0, 2, 0, 2], [0, 1], [0, 2, 2, 3, 2, 2, 2, 3, 3, 2, 3, 3, 2, 3, 2, 0, 3, 0, 1, 3, 0, 1, 2, 3, 0, 0, 2, 2, 0, 2, 2, 2, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 3, 2, 1, 2, 0, 0, 1, 1, 3, 1, 1, 0, 2, 2, 1, 1, 2, 1, 3, 0, 1, 0, 0, 3, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 3, 1, 1, 0, 1, 2, 3, 3, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 3, 1, 3, 4, 1, 4, 3, 4, 0, 1, 2, 4, 3, 4, 4, 0, 1, 3, 1, 0, 2, 2], [2, 0, 2, 1, 2, 2, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 5, 2, 0, 4, 5, 3, 1, 4], [1, 1, 1, 1, 1, 1], [], [4, 1, 4, 2, 1, 4, 2, 0, 0, 0, 0, 2, 1, 2, 4, 2, 1, 0, 0, 2, 0, 4, 4, 1, 0, 1], [3, 3, 0, 2, 1, 0], [5, 3], [0, 2, 0, 0, 2, 0, 1], [3, 3, 0, 2, 1, 3], [20], [10], [5], [6, 24, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 21, 19, 2, 86, 29, 19, 13, 17, 8, 5, 0, 25, 6, 2, 6, 5, 1, 1, 1, 2], "tree_depth": 69, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i2\\ni1 *= ( mod(len(\"\"#\"\".strip(\"\"?\"\"[( mod(divInt(len(getCharFromString(s0[max(mod(len(in2),saveOrd(s2)), ( max(( i0 + saveOrd(s0) ), i1) * int(7.0) )):], len(\"\"U\"\"[i1:int(7.0)]))),divInt(saveOrd(\"\"5\"\"[i2:].capitalize()[i0:divInt(( i0 - mod(( divInt(int(3.0),min(( mod(( divInt(divInt(mod(divInt(( mod(max(abs(saveOrd(in1)), len(in2)),int(9.0)) * int(7.0) ),saveOrd(in0[( int(4.0) * divInt(i2,i0) ):int(7.0)])),int(3.0)),saveOrd(saveChr(int(7.0)))),int(5.0)) + i2 ),( mod(int(0.0),int(4.0)) + ( int(4.0) + min(i2, int(1.0)) ) )) + i0 ), i1)) - max(i0, int(3.0)) ),int(7.0)) ),i2)]),int(8.0))),mod(int(5.0),i0)) + i2 ):int(9.0)].lstrip(getCharFromString(\"\"k\"\", len(s1))))),int(4.0)) - int(4.0) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 1, 2, 2, 1, 1, 1, 1, 0, 1], [2, 2, 1], [1, 0, 2, 1, 0, 1, 0, 2], [], [0, 0], [], [], [0, 3, 3, 2], [5, 3], [0, 0, 2, 2, 0, 1, 1], [0, 0], [0, 1], [0, 1, 2], [], [1], [1], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 4, 6, 3, 0, 8, 0, 4, 9, 8, 7, 7, 9, 5, 3, 8, 2, 7, 5, 4, 4, 7, 7, 7, 8, 3, 2, 9, 4, 2, 9, 3, 0], [0, 0, 0, 1, 1, 0, 2, 2, 2, 1, 2, 1, 0, 1, 0, 0, 1, 2, 0, 0, 1, 1, 0, 2, 1, 2, 2, 2, 0, 0, 1, 1, 0], [0, 1, 1], [3, 2, 1, 0, 3, 2, 0, 0, 1, 3, 2, 1, 2, 2, 2, 3, 0, 3, 1, 2, 0, 0, 1, 2, 0, 3, 0, 1, 3, 3, 2, 1, 0, 1, 0, 3, 1, 0, 2, 1, 1, 2, 1, 0, 2, 3, 2, 1, 1, 1, 2, 0, 1, 3, 0, 1, 2, 1, 1, 3, 0, 2, 2, 3, 0, 1, 0, 1, 2, 3, 1, 3, 2, 0, 2, 2, 2, 0, 3, 2, 1, 2, 1, 2, 3, 1, 2, 0, 2, 2, 0, 1, 3, 3, 0, 0, 0, 2, 1, 0, 0, 1, 3, 1, 0, 0, 3, 0, 2, 0, 3], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 1, 2, 1, 1, 1, 1, 2, 3, 2, 0, 1, 2, 3, 4, 2, 1, 1, 1, 4], [0, 2, 1, 0, 2, 1, 2, 1, 1, 2, 1], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [4, 0, 4, 3, 1, 5], [0, 1, 1, 1, 1, 1, 1, 0, 1], [], [1, 2, 0, 2, 2, 1, 4, 0, 2, 1, 0, 4, 4, 3, 4, 1, 4, 2, 4, 2, 4, 0, 1, 2, 1, 1], [2, 0, 2, 1, 0, 3, 0], [4], [0, 2, 2, 2, 2, 0, 1], [0, 0, 2, 2, 1, 0, 3, 0, 3], [16, 25, 4, 12], [8], [6, 9], [24, 22]], "fitness": 9223372036854775807, "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = max(( int(8.0) + i0 ), min(divInt(i0,i1), int(9.0)))\\nloopBreak% = 0\\nwhile b0:{:\\nres0 = False\\nloopBreak% = 0\\nwhile \"\"QZ\"\" in in1[min(mod(int(46.0),divInt(divInt(mod(max(i1, abs(int(3.0))),divInt(i0,i2)),int(0.0)),mod(i2,max(i2, int(8.0))))), max(max(divInt(int(0.0),i1), int(498.0)), i2)):max(int(7.0), i1)]:{:\\nif \"\"6\"\"[mod(int(7.0),int(9.0)):][divInt(int(5.0),i0):] not in s0.capitalize():{:\\nin1 = \"\"9\"\"[divInt(abs(divInt(int(3.0),int(8.0))),int(2.0)):]\\n:}else:{:\\ni1 *= ( i0 - int(7.0) )\\nres0 = not len(in0) != i0\\ni1 += int(54.0)\\nb2 = ( int(4.0) * int(7.0) ) \\ge abs(i2)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = getCharFromString((saveChr(( ( min(i0, int(7.0)) - i0 ) * int(7.0) )) + \"\"i\"\").capitalize(), ( max(int(83.0), abs(( i1 - mod(( ( i1 - len(getCharFromString(getCharFromString(in2, mod(int(2.0),divInt(int(9.0),divInt(saveOrd(\"\"E\"\"),int(4.0)))))[mod(i0,divInt(mod(i2,int(2.0)),abs(max(i1, i2)))):i2].rstrip(\"\"?\"\"[:mod(int(9.0),i2)])[i0:], int(3.0))) ) * max(int(0.0), i0) ),i1) ))) - max(i1, divInt(i0,saveOrd(\"\"M=\"\"))) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 3, 8, 0, 2, 0, 0, 4, 2, 7, 2, 2, 3, 0, 1, 1, 34, 34, 33, 3, 111, 30, 22, 11, 21, 6, 9, 0, 26, 7, 1, 7, 9, 4, 1, 2, 2]}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 2], [], [], [], [], [0], [5], [0, 1], [0], [], [2], [], [], [], [1, 1, 0, 0, 1], [9, 8, 5, 0, 6], [0, 0], [0], [1, 3, 0, 1, 1], [], [0], [], [], [2], [1], [], [2, 1], [], [], [2], [3], [], [], [], [19]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 5, 5, 1, 0, 5, 0, 1, 0, 0, 1, 1, 0, 2, 0, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not int(9.0) != min(i0, int(8.0))\\ns2 = \"\":\"\"[int(506.0):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [1], [1, 0], [], [0], [], [], [2, 3], [], [2, 0], [], [0], [0], [], [], [0], [1, 1, 0, 1, 0, 0, 1, 0, 1], [0, 6, 0, 5, 8, 0, 4, 3, 5], [0], [1], [1, 1, 3, 2, 1, 1, 1], [0], [4], [0, 1], [], [5], [0, 1, 1, 1], [], [2, 0, 2, 4, 3, 3, 4, 1, 1, 1], [3, 1], [2], [2, 0], [0, 1, 2, 0], [7, 10], [16], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 1, 9, 9, 1, 1, 7, 1, 1, 2, 0, 1, 4, 0, 10, 2, 1, 2, 4, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(0.0)\\nif in2[int(6.0):] in ((saveChr(saveOrd(\"\"Hq\"\")) + \"\"2\"\") + \"\"K\"\").strip()[( int(05.0) - int(804.0) ):int(35.0)]:{:\\nb2 = res0\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [], [], [], [2, 1], [3, 2], [1, 1], [0, 0], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 5, 1, 2, 7, 3, 9, 2, 8, 6, 8, 2, 3], [1, 0, 1, 1, 1, 1, 0, 2, 2, 1, 2, 1, 2, 1], [], [1, 0, 1, 2, 3, 2, 3, 3, 0, 2, 1, 1, 0, 0, 2, 3, 1, 3, 2, 2, 3, 3, 0, 1, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 1, 2, 1, 0], [0, 0, 0, 0, 1, 1, 1, 1], [4, 0, 1, 2, 0, 4, 3], [2, 1, 0, 2], [1, 1, 0, 1], [2, 2, 1, 2], [1, 1, 1, 1], [], [4, 2, 3, 2, 2, 3, 3, 1, 2, 4, 0, 1, 1, 3, 2, 4, 0, 2, 4, 4, 2, 4, 1, 3, 0, 0], [0, 0, 3, 3, 1, 2], [4, 2], [2, 1, 1, 2, 0, 0, 1], [2, 1, 0, 0], [2, 6], [19], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 13, 13, 14, 0, 39, 8, 7, 4, 4, 4, 4, 0, 26, 6, 2, 7, 4, 2, 1, 1, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(05.0) \\ge i1\\nb1 = int(12.0) == ( saveOrd(getCharFromString((((\"\"7\"\" + getCharFromString(s2, ( min(max(i0, ( int(7.0) * int(3.0) )), i1) - i1 ))[( abs(int(9.0)) + min(mod(mod(saveOrd(\"\"t\"\"),len(\"\"C\"\")),i1), int(2.0)) ):]) + (s2.rstrip(saveChr(i1).strip()[i0:int(8.0)])[i2:int(6.0)] + \"\"G\"\".capitalize()[:divInt(i2,i1)]))[:i2][:i1] + (s1 + s2))[i2:], int(82.0))) * mod(int(3.0),i1) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [2], [], [2], [], [], [], [], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [2, 6, 8, 9, 8, 5, 6, 8, 4, 9, 7, 9, 3, 8], [2, 2, 2, 0, 2, 0], [], [3, 1, 0, 2, 0, 2, 1, 1, 0, 1, 3, 1, 0, 0, 1, 1, 0, 1], [1, 0], [3, 2], [1], [1], [1, 3], [1, 1, 1, 1, 1], [], [2, 2, 0, 2, 3, 1, 2, 0, 3, 3, 2, 4, 4, 2, 4, 4, 2, 2, 1, 1, 2, 3, 0, 1], [1, 2, 1, 1], [4], [0, 0, 0, 1, 1, 1, 2, 1], [2, 1, 1, 0, 2], [17], [1, 6], [3, 9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 6, 0, 17, 2, 2, 1, 1, 2, 1, 0, 16, 4, 0, 6, 1, 0, 0, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s1[len((\"\"3\"\" + in0[:int(2.0)])[i2:mod(i2,( int(6.0) - int(8.0) ))]):i2][int(9.0):abs(int(8.0))] == ((saveChr(i0)[:i2] + saveChr(int(568.0))[:int(49.0)].capitalize()) + saveChr(i0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [], [0, 0], [], [], [2, 0], [5], [1, 2], [0], [0], [], [], [], [], [1, 1], [4, 1], [0, 1], [1], [3, 0, 1, 1], [], [2], [2], [], [2, 3], [0, 1], [], [2, 0, 1], [], [], [2], [2, 0], [7], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 1, 0, 0, 1, 2, 0, 3, 0, 0, 1, 2, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = abs(i0) != int(4.0)\\nb0 = s2[int(1.0):] in \"\"8H\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0], [1], [1], [], [], [2], [], [4], [1], [], [1], [], [], [], [0], [13], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"N\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [2, 2, 0, 1, 0, 0], [1, 0], [1, 1, 1, 0], [0], [0, 0, 0], [], [], [3], [], [2, 2], [], [0, 2], [1], [], [0], [1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [6, 7, 8, 3, 7, 4, 3, 5, 0, 3, 4, 7, 0, 7, 6, 6, 4, 3, 7, 3, 8, 4, 8, 2, 8, 8], [2, 0, 2, 0, 2, 1, 0, 1, 0, 0, 2, 2, 1, 2, 1, 2, 0, 2, 0, 0, 2, 1, 2, 2, 1, 2, 2, 2], [1, 1, 0], [2, 3, 0, 2, 2, 2, 2, 2, 2, 3, 1, 3, 3, 0, 1, 2, 0, 0, 1, 0, 1, 3, 2, 0, 2, 2, 0, 0, 1, 0, 1, 0, 0, 2, 1, 1, 2, 2, 2, 1, 2, 3, 3, 0, 1, 0, 0, 3, 2, 0, 1, 3, 1, 2, 2, 2, 0, 2, 3, 2, 2, 2, 0, 2, 2, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0, 0, 0, 3, 1, 3, 0, 1, 2, 1, 2, 1, 0, 2, 1, 2, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [2, 4, 3, 2, 0, 0, 4, 1, 4, 4, 3, 2, 1], [1, 2, 0, 2, 2, 2, 0, 1, 1, 0, 0, 1, 1, 2, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [4, 3, 0, 4, 0, 5, 1, 2, 0, 5], [1, 0, 0, 1, 1, 1, 1, 0, 1], [0], [0, 0, 0, 4, 0, 0, 2, 3, 2, 4, 2, 3, 4, 1, 4, 2, 0, 1, 4, 4, 3, 2, 3, 0, 4, 4, 4, 4, 4, 1, 1, 1, 4, 0, 2, 0, 1], [2, 2, 0, 2, 0, 3, 3, 1, 0, 0, 0, 2], [5, 1], [2, 1, 1, 2, 0, 0], [3, 2, 1, 2, 0, 3, 1, 3, 2], [13], [14, 19], [9, 3, 9], [4, 28, 28]], "fitness": 9223372036854775807, "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in1 in in0:{:\\nloopBreak% = 0\\nfor s0 in in1:{:\\ni2 -= ( abs(i0) * divInt(divInt(divInt(( ( divInt(saveOrd(s0.capitalize()),int(6.0)) + len(in2) ) * abs(i2) ),int(7.0)),( i0 * i2 )),int(8.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= i0\\n:}else:{:\\ni1 = int(3.0)\\nres0 = ((getCharFromString(\"\"!\"\", min(divInt(i0,mod(( i0 + i2 ),int(7.0))), i2)) + s1[int(4.0):].capitalize())[:i1].capitalize()[:i2] + \"\"9o3\"\")[mod(int(3.0),int(50.0)):] == getCharFromString(((s2 + saveChr(( ( mod(int(3.0),mod(min(saveOrd(getCharFromString(getCharFromString(getCharFromString(\"\"N\"\", i1), int(4.0)), i2)), i0),max(( i2 - int(7.0) ), saveOrd(\"\"]\"\")))) - int(0.0) ) + ( mod(( i0 + mod(saveOrd(\"\"t\"\"),( mod(mod(i0,( mod(int(7.0),mod(( int(6.0) - int(6.0) ),i2)) - int(4.0) )),len(s0.capitalize())) * i1 )) ),i2) - i2 ) )).rstrip())[i1:abs(int(3.0))] + in2[max(i2, int(7.0)):mod(int(3.0),divInt(int(8.0),i2))]).strip(\"\"]9\"\"), ( int(4.0) - divInt(int(8288.0),i2) ))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 3, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 1, 26, 26, 28, 3, 92, 32, 13, 16, 18, 10, 9, 1, 37, 12, 2, 6, 9, 1, 2, 3, 3]}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 3, 2, 4, 5, 1, 8, 3, 4], [0, 2, 0, 2, 1, 1, 2, 2, 1, 1, 1, 0, 1, 0], [0], [2, 1, 3, 2, 3, 2, 3, 2, 0, 2, 3, 3, 0, 0, 0, 3, 3, 0, 1, 3, 2, 2, 3, 2, 0, 0, 3, 0, 1, 2, 2, 0, 3, 1, 0, 1, 2, 0, 0, 0, 1, 2, 1, 3, 0, 3, 3, 1], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0], [1, 1, 2, 0, 1, 1, 4, 1, 3, 4, 4, 0, 3, 2], [0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1], [5, 2, 2, 4], [1], [], [0, 4, 4, 4, 0, 4, 2, 1, 4, 0, 2, 4, 0, 0], [0, 0, 2, 1, 2, 0, 2, 2], [], [0, 0], [0], [8], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 14, 1, 41, 11, 11, 5, 6, 2, 1, 0, 8, 4, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(int(4.0),max(( max(mod(abs(mod(i2,( min(max(i0, i2), i1) + max(saveOrd(in2), i1) ))),int(3.0)), max(mod(divInt(len(getCharFromString(getCharFromString(s2.capitalize(), ( i2 - i2 )), saveOrd(saveChr(i1)))),int(2.0)),( mod(i1,saveOrd(\"\"I\"\"[int(4.0):i1])) - int(5.0) )), ( i0 - i1 ))) - i0 ), int(1.0)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 1, 2, 2, 2, 1, 2, 0, 1, 1, 1], [1, 0, 0, 1], [0, 1, 1, 2, 1, 1, 1], [0, 0], [0], [], [], [2], [1], [0, 0, 1], [0], [], [1, 1], [], [0, 1], [0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 2, 7, 0, 4, 8, 9, 7, 2], [2, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 2], [1, 1, 1, 1, 0], [2, 1, 1, 3, 3, 0, 1, 2, 0, 2, 0, 3, 2, 1, 3, 1, 2, 3, 3, 2, 3, 0, 2, 3, 3, 3, 0, 1, 0, 0, 0, 0, 0, 2, 3, 1, 1, 1, 1, 3, 3, 3, 0], [0, 0, 0, 1, 1, 0, 1, 0], [2, 1, 2, 1, 0, 2, 2, 0, 0, 4, 1, 1, 4, 2], [2, 0, 1, 1, 2, 2, 0, 0, 2], [1, 0, 1], [4, 4, 3, 2, 4, 2], [1], [0, 0], [4, 0, 0, 0, 1], [1], [], [], [0], [14], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 4, 7, 2, 1, 0, 0, 1, 1, 3, 1, 0, 2, 0, 2, 2, 10, 10, 16, 5, 43, 8, 14, 9, 3, 6, 1, 2, 5, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\ni2 *= ( int(1.0) + int(4.0) )\\nif False:{:\\nloopBreak% = 0\\nfor in1 in saveChr(abs(max(i2, int(2.0)))):{:\\nloopBreak% = 0\\nfor in1 in in0:{:\\ni1 -= ( i1 - ( i1 * abs(mod(int(7.0),max(int(0.0), divInt(min(abs(( abs(i0) * mod(min(min(saveOrd(s2), i0), int(4.0)),i0) )), i0),i1)))) ) )\\nif i1 \\g i2:{:\\nin1 = s2\\n:}else:{:\\ni0 += ( max(int(8.0), int(9.0)) + int(7.0) )\\n:}\\ni0 *= int(2.0)\\ni0 = max(saveOrd(\"\"O\"\"), abs(i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 2, 0, 9, 8, 8, 9, 9, 5, 2, 5, 2, 7, 2, 9, 9, 0, 1, 7, 5, 7, 7, 8, 4, 3, 7, 5, 3, 0, 9, 3, 0, 5, 8, 0, 7, 1, 7, 3, 0, 9], [2, 0, 2, 0, 0, 2, 1, 1, 0, 2, 1, 2, 0, 1, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 2, 0, 1, 0, 1, 0, 1, 2, 1, 1, 0, 1, 2, 0, 2, 0], [], [3, 2, 1, 2, 2, 0, 0, 2, 3, 2, 0, 1, 0, 2, 2, 0, 3, 1, 3, 1, 1, 1, 1, 3, 3, 2, 0, 2, 3, 3, 0, 1, 0, 0, 3, 3, 2, 3, 0, 3, 3, 2, 2, 1, 3, 2, 2, 2, 3, 3, 0, 3, 1, 1, 3, 3, 2, 2, 3, 2, 3, 1, 2, 1, 2, 2, 3, 0, 2, 1, 2, 3, 2, 0, 2, 0, 3, 0, 3, 1, 1, 1, 3, 2, 1, 1, 1, 2, 3, 3, 2, 0, 3, 3, 0, 0, 3, 2, 3, 1, 3, 3, 1, 2, 3, 0, 3, 1, 0, 2, 1, 2, 3, 2, 1, 0, 1, 0, 3, 0, 2, 2, 1, 3, 3, 0, 1, 1, 3, 3, 2, 3, 0, 0, 1, 3, 2, 2, 1, 1, 0, 0, 2, 2, 3, 2, 2, 3, 2, 1, 2, 0, 0, 2, 3, 0, 2, 3, 1, 3, 0, 0, 0, 1, 2, 1, 1, 2, 2, 0, 3, 3, 0, 0, 0, 2, 1, 1, 3, 1, 1, 0, 3, 1, 0, 0, 2, 3, 1, 1, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 4, 1, 3, 3, 4, 0, 4, 0, 3, 4, 2, 2, 4, 2, 1, 1, 0, 3, 2, 0, 1, 1, 3, 0, 3, 0, 2, 2, 3, 3, 1, 1, 2, 3, 2, 4, 2, 4, 4, 2, 0, 3, 2, 2, 1, 0, 1, 1, 2, 2, 2, 0, 1], [1, 1, 0, 1, 0, 0, 1, 2, 2, 0, 2, 2, 0, 1, 1, 1, 2, 0, 0, 2, 2, 0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0], [4, 4, 4, 3, 2, 5, 3, 2, 4, 4, 5], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [], [2, 0, 3, 0, 4, 2, 1, 2, 2, 0, 1, 3, 1, 4, 3, 1, 1, 4, 2, 2, 2, 4, 2, 2, 1, 0, 2, 4, 4, 0, 0, 2, 2, 2, 2, 2, 2, 4, 2, 0, 2, 4, 1, 4, 4, 1, 1, 0, 0, 1, 2, 2, 0], [0, 0, 0, 3, 3, 2, 3, 1, 1, 1], [3, 0, 2], [2, 0, 1, 0, 2, 2, 2, 0, 0, 2, 0, 1, 1, 1, 0, 2, 1, 2, 2, 2], [2, 0, 2, 3, 3, 1, 0, 3, 0, 1, 2, 2, 3, 1, 1, 0, 0], [11, 25, 4, 19, 8], [23, 17, 3, 10], [5, 8, 4, 9], [27, 0, 22, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 44, 42, 0, 191, 51, 54, 22, 29, 11, 17, 0, 53, 10, 3, 20, 17, 5, 4, 4, 4], "tree_depth": 107, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in1[min(mod(int(1.0),( divInt(i2,i0) - ( saveOrd((in1 + getCharFromString(\"\"5\"\"[( i2 - int(3.0) ):i0], divInt(mod(i0,max(int(9.0), len(in0[int(4.0):int(2.0)][:int(0.0)]))),int(9.0))))) + len(\"\"L\"\") ) )), saveOrd((\"\"8\"\" + getCharFromString((\"\"\\\\\\\\xZ=\"\" + \"\"Er49\"\"), ( i2 - ( min(saveOrd(getCharFromString(\"\">\"\"[i1:int(8.0)][i1:i0].lstrip(s2)[min(len(in2.capitalize().lstrip()[( saveOrd(in0) + i2 ):]), abs(abs(divInt(mod(int(8.0),saveOrd(s2[:mod(divInt(divInt(abs(max(i1, max(int(9.0), int(9.0)))),min(len(saveChr(mod(( abs(( min(int(5.0), mod(int(2.0),( ( max(i2, ( int(5.0) + ( max(mod(i0,( i1 - len(\"\"d\"\") )), i2) * min(int(2.0), int(7.0)) ) )) * int(2.0) ) + len(saveChr(( int(9.0) * int(9.0) ))) ))) * int(0.0) )) + divInt(min(abs(divInt(i0,abs(len(saveChr(i0))))), i0),len(\"\"k\"\")) ),( max(int(1.0), max(abs(int(7.0)), divInt(len(\"\"T\"\"),i0))) - abs(int(5.0)) )))[i0:]), ( int(7.0) - mod(saveOrd(in1),( int(7.0) - i1 )) ))),int(8.0)),i0)].strip()[abs(i0):][mod(( int(4.0) * saveOrd(in1) ),saveOrd(\"\"I\"\")):i0][:int(3.0)][:int(7.0)][:abs(min(( len(in2[i0:][i2:]) + int(5.0) ), abs(( divInt(int(3.0),int(0.0)) + i2 ))))][i0:mod(( abs(mod(mod(max(divInt(int(9.0),divInt(i1,i0)), mod(min(i1, mod(max(int(3.0), max(i0, i1)),i2)),int(0.0))),mod(int(5.0),int(8.0))),divInt(mod(i1,abs(abs(i1))),i0))) * i1 ),divInt(int(0.0),int(7.0)))])),abs(int(1.0)))))):][int(7.0):][i2:], min(int(3.0), i0))), i2) * ( max(int(0.0), int(9.0)) + i0 ) ) ))))):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [1, 2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 0], [0, 2, 2, 1, 0, 0, 0], [0, 1, 0, 1, 2], [0, 0, 0, 0], [0, 0, 0], [], [], [1, 3, 2], [1, 3], [1, 2, 0, 0, 1], [0, 0], [0], [1, 0], [], [0], [0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [7, 0, 9, 2, 0, 3, 3, 2, 2, 5, 6, 3, 5], [0, 2, 2, 1, 2, 2, 0, 0, 2, 1, 1, 2, 2, 2, 2], [1, 0], [0, 0, 3, 0, 2, 3, 2, 1, 0, 3, 1, 1, 1, 0, 0, 1, 0, 0, 3, 0, 3, 0, 3, 1, 1, 0, 2, 1, 1, 3, 0, 3, 0, 3, 1], [0, 0, 1], [3, 1, 2, 0, 4, 3, 1, 0, 4], [1, 1, 1], [0], [3, 1, 5, 3, 4, 0, 1, 3, 2, 5, 0, 3, 1], [1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0], [0, 2, 0, 3, 0, 4, 1, 2, 0, 1, 2, 4, 2, 1, 4, 4, 2, 0, 2, 2, 2, 0, 0, 0, 1, 4], [3, 2, 2, 0, 1], [3], [0, 2, 1, 1, 0, 0, 0, 1], [3, 2, 2, 0, 0, 0, 2], [0, 11, 18], [], [7, 2, 0], [19]], "fitness": 9223372036854775807, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = i0 \\g i2\\nloopBreak% = 0\\nfor in0 in s1:{:\\nloopBreak% = 0\\nwhile in2[len((in0 + \"\":\"\".lstrip(in1[i2:]))):( max(( int(7.0) - i1 ), abs(int(0.0))) - int(9203.0) )] in \"\"72AL\"\":{:\\nloopBreak% = 0\\nwhile True:{:\\nif res0:{:\\ni2 -= int(3.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in \"\"S\"\"[:i2].capitalize()[:i0]:{:\\nloopBreak% = 0\\nfor s1 in getCharFromString(in0[int(2.0):i0], i2).capitalize():{:\\nloopBreak% = 0\\nfor s2 in in2[:min(i1, saveOrd(s0))][i1:len(in0)][int(2.0):int(5.0)]:{:\\nb2 = i2 \\ge divInt(int(6.0),int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = max(i2, min(i2, saveOrd(\"\"0\"\")))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = saveChr(int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 12, 12, 7, 5, 4, 3, 0, 0, 3, 2, 5, 2, 1, 2, 0, 1, 1, 13, 13, 15, 2, 35, 3, 9, 3, 1, 13, 7, 4, 26, 5, 1, 8, 7, 3, 0, 3, 1]}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [2, 1, 1, 1, 2, 1, 0, 2, 2, 2, 0, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 2, 0], [0, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2], [0, 0], [0, 0, 0, 0], [], [], [0], [2], [1, 2, 2, 2, 2], [0], [0, 2, 1, 3], [], [], [], [1, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 3, 8, 9, 2, 8, 5, 0, 5, 3, 8, 9, 1, 2, 3, 4, 2, 4, 0, 9], [2, 1, 1, 2, 0, 1, 0, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 0, 0], [0, 1, 1, 1], [0, 0, 0, 1, 0, 2, 1, 2, 3, 1, 2, 3, 0, 1, 1, 0, 1, 0, 2, 2, 3, 0, 0, 1, 3, 0, 0, 3, 2, 0, 0, 3, 3, 0, 3, 1, 1, 1, 3, 0, 0, 1, 1, 3, 0, 1], [1, 1, 0, 0, 1, 0], [2, 0, 2, 0, 4, 2, 1, 3, 0, 0], [2, 1, 0, 2, 0, 0], [1, 1, 1], [5, 1, 0, 4, 5, 3, 5, 4, 4, 4, 5, 2, 4, 2, 3, 1], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0], [1, 1, 0, 0, 3, 3, 3, 2, 1, 1, 0, 1, 2, 4, 1, 0, 2, 2, 2, 4, 2, 1, 2, 0, 4, 1, 0, 0, 0, 2, 4, 1, 1, 4, 4], [1, 0, 2, 2, 1, 1], [], [2, 1, 0, 2, 1, 0, 0, 2], [2, 3, 0, 2, 0, 3, 2, 3, 1, 1, 1, 0, 2, 0], [25, 5, 20, 18], [12, 20, 6], [8, 8, 0, 7], [11, 9, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 17, 17, 6, 11, 2, 4, 0, 0, 1, 1, 5, 1, 4, 0, 0, 0, 3, 21, 21, 21, 4, 46, 6, 10, 6, 3, 16, 14, 2, 35, 6, 0, 8, 14, 4, 3, 4, 3], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i2 == i1:{:\\nb0 = \"\"8\"\" in \"\"(Z8\"\"\\n:}else:{:\\ni1 = i2\\nin2 = s1\\n:}\\nif s0 == (((\"\"F\"\"[int(44.0):] + \"\"&0\"\") + in1) + \"\"\"\\\\\"\"\"):{:\\ni0 *= i1\\ni0 -= mod(int(38.0),mod(abs(int(9.0)),( min(i1, int(2.0)) + int(850.0) )))\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in saveChr(i2)[:int(53891.0)]:{:\\nif \"\"mu\"\" not in in0:{:\\nloopBreak% = 0\\nwhile getCharFromString(\"\"g\"\"[i2:( mod(abs(i1),i1) * int(2.0) )], min(i1, i1))[:saveOrd(in2[( i2 + i2 ):abs(max(i2, len(\"\"U\"\".capitalize())))])][int(3.0):][int(4.0):int(2.0)] != in1:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += min(i2, i0)\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in s2:{:\\nin1 = \"\"7\"\".capitalize()[int(4.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ns2 = \"\"S\"\"\\nin0 = saveChr(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = saveChr(min(i0, int(9.0)))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 0, 0, 1], [1], [0, 2, 2], [], [0, 0], [], [], [2], [1], [0, 2, 2], [0], [0, 4], [2], [], [], [1], [1], [1], [2, 1], [], [2, 0, 3, 0, 1, 3], [1], [3, 4], [], [1], [1, 1, 4, 5, 3, 2, 4, 2, 0], [1], [], [2, 1, 0, 0, 0, 0, 0, 2, 2, 0, 4, 0], [2], [], [1, 1, 0], [3], [], [], [], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 1, 0, 3, 0, 2, 1, 0, 0, 1, 1, 1, 2, 0, 6, 1, 2, 0, 1, 9, 1, 0, 12, 1, 0, 3, 1, 0, 0, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not \"\"[\"\"[:mod(i2,len(s1))] in s1:{:\\nb2 = in1.startswith(in2)\\n:}else:{:\\nin0 = s2\\nin1 = s2[i1:int(1.0)][:saveOrd(s0.capitalize())]\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [2], [1], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 4, 8, 1, 0, 8, 7, 9, 7, 9, 7, 7, 4, 0, 2, 2, 0, 8, 8, 7, 0, 2, 8, 9, 9, 0, 3, 9, 7, 1, 6, 0, 5, 6, 3, 7, 4, 4, 9, 5, 2], [0, 0, 1, 1, 2, 2, 0, 1, 0, 0, 0, 0, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 1, 2, 1, 2, 1, 1, 0, 1, 2, 2, 0, 0, 2, 0, 0, 1, 1, 2, 1, 0], [], [3, 1, 1, 3, 2, 3, 3, 3, 2, 0, 0, 0, 0, 2, 0, 1, 0, 2, 3, 2, 1, 3, 1, 1, 2, 3, 3, 2, 2, 3, 1, 3, 2, 1, 2, 2, 3, 3, 0, 2, 3, 2, 2, 3, 0, 2, 1, 3, 1, 2, 1, 3, 2, 0, 1, 1, 0, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 2, 1, 1, 3, 2, 0, 3, 1, 3, 2, 1, 2, 1, 3, 1, 0, 3, 2, 3, 2, 1, 2, 0, 2, 3, 3, 1, 2, 3, 2, 1, 1, 1, 1, 0, 3, 3, 2, 3, 3, 3, 2, 2, 3, 0, 0, 0, 1, 0, 3, 3, 2, 3, 3, 2, 0, 2, 1, 2, 2, 2, 3, 1, 0, 2, 0, 2, 1, 3, 0, 1, 2, 3, 2, 3, 1, 0, 1, 3, 3, 0, 2, 0, 0, 0, 2, 2, 1, 0, 1, 2, 2, 2, 3, 2, 0, 3, 0, 1, 0, 2, 3, 1, 3, 1, 3, 0, 3, 0, 3, 1, 2, 3, 3, 0, 0, 0, 3, 3, 0, 0, 1, 2, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 2, 0, 3, 3, 2, 0, 2, 0, 4, 4, 1, 3, 1, 4, 1, 1, 2, 4, 3, 2, 3, 4, 1, 4, 3, 3, 2, 3, 1, 1, 3, 0, 1, 0, 2, 2, 1, 0, 0, 2, 0, 4, 0, 0, 0, 4, 3, 2, 3, 0, 1, 4, 0, 1, 0, 3, 2, 0, 4, 4], [2, 0, 2, 0, 1, 0, 2, 0, 1, 0, 2, 2, 0, 0, 1, 2, 0, 1, 0, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [2, 0, 0, 1, 4, 2, 2, 3, 0, 3, 5, 5, 3, 4, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [0, 4, 4, 4, 1, 2, 2, 4, 2, 0, 1, 0, 4, 0, 2, 1, 2, 0, 2, 0, 0, 0, 2, 4, 1, 4, 0, 2, 0, 2, 1, 2, 4, 1, 4, 2, 2, 1, 1, 2, 2, 4, 2, 0, 1, 0, 1, 2, 0, 4, 0, 4, 2, 1], [0, 0, 3, 0, 3, 2, 3, 3, 1, 3, 1, 2], [0, 5, 2, 5, 4], [2, 1, 2, 2, 0, 1, 1, 0, 2, 2, 1, 2, 2, 2, 2, 0, 2], [1, 0, 3, 1, 3, 1, 0, 1, 2, 1, 0], [21, 17, 17], [24, 20, 23, 18, 7], [0], [18, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 42, 42, 42, 0, 196, 52, 61, 25, 27, 15, 11, 1, 54, 12, 5, 17, 11, 3, 5, 1, 2], "tree_depth": 89, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\nb2 = min(int(3.0), int(74.0)) \\g abs(( min(len(getCharFromString(getCharFromString(\"\"y\"\".lstrip(), len(getCharFromString(s0[( i0 * i0 ):], i1)[:i1][( i2 + int(8.0) ):])), i2)), divInt(abs(( int(1.0) * min(int(0.0), int(8.0)) )),( abs(min(( ( saveOrd(\"\"V\"\") + int(7.0) ) - saveOrd(s1) ), mod(int(9.0),divInt(divInt(max(len(in1.strip(\"\"/\"\"[i0:])), mod(max(divInt(divInt(saveOrd(s2[i1:divInt(int(7.0),max(int(9.0), divInt(int(7.0),max(( i0 + int(7.0) ), int(4.0)))))]),i0),abs(int(0.0))), i0),saveOrd(s2[:len(in0)]))),abs(divInt(len(s0),( saveOrd(\"\"u\"\".capitalize()[:max(saveOrd(in0.strip()), mod(int(2.0),int(2.0)))]) * len(in2[( i0 + len(\"\")\"\"[int(0.0):]) ):abs(mod(int(8.0),( int(8.0) - len(\"\"x\"\".strip(saveChr(int(7.0)))[i2:]) )))]) )))),max(mod(max(divInt(int(0.0),divInt(i1,mod(len(\"\"R\"\"[min(int(2.0), divInt(max(( int(8.0) + int(9.0) ), int(9.0)),int(0.0))):][:i2]),min(abs(( abs(max(min(( ( min(i2, i2) * i2 ) * int(3.0) ), i0), abs(min(mod(saveOrd(\"\"s\"\"),min(( i0 + mod(int(9.0),( mod(divInt(min(int(7.0), i2),mod(i0,( int(1.0) + min(i1, int(6.0)) ))),( saveOrd(in2[mod(len(\"\"0\"\"),int(0.0)):].rstrip(in0)[i2:][int(5.0):]) - abs(len(\"\"h\"\")) )) * i1 )) ), ( i2 + i1 ))), i1)))) - ( mod(int(6.0),i0) + int(3.0) ) )), ( divInt(mod(min(mod(i1,max(i2, int(7.0))), i2),( saveOrd(in1[int(4.0):min(int(4.0), max(i0, min(i0, len(saveChr(int(9.0))))))]) - ( abs(min(i2, i0)) - i0 ) )),saveOrd(s1)) - saveOrd(\"\"R\"\"[i1:].capitalize()) ))))), i1),int(5.0)), ( i2 - int(2.0) )))))) + i1 ))) - i0 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1], [4, 7, 3, 6], [], [], [1], [], [], [], [], [5, 5], [1], [], [4, 3, 4, 1, 0], [0, 2], [], [], [2], [], [], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, 5, 2, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString((\"\"1\"\".capitalize() + in2), int(4736.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [0], [], [], [], [], [2, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1], [], [3, 4, 1, 1], [0], [], [], [3, 2, 1, 2, 0, 2, 3, 1, 2], [2], [25, 13], [6, 7, 5, 3], [8, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 9, 0, 4, 1, 0, 0, 9, 1, 2, 4, 2], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = (getCharFromString(\"\"%6z\"\", i0) + \"\"7C5=n3\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [1], [0], [3, 1], [], [4], [], [], [], [1], [], [2, 1], [], [], [1], [2], [], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(\"\"8\"\"[:int(4.0)])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 2, 3, 0, 1, 4, 6, 2, 5, 5, 5, 2], [1, 2, 0, 2, 2, 1, 2, 0, 1, 0, 0, 0], [1], [3, 1, 3, 1, 3, 3, 2, 1, 3, 1, 3, 1, 3, 3, 2, 0, 0, 2, 2, 0, 0, 3, 0, 1, 2, 0, 2, 0, 3, 3, 3, 2, 1, 0, 3, 3, 0, 1, 1, 3, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0], [1, 4, 2, 3, 0, 0, 4, 2, 1, 0, 1, 4, 3, 1, 1], [0, 2, 0, 2, 2, 1], [0, 1], [4, 4], [1, 1, 1, 1, 1], [], [4, 3, 4, 0, 0, 3, 2, 4, 1, 2, 4, 2, 1, 1, 4, 4, 2, 1, 1], [0, 0, 3, 0, 1, 2], [3], [2, 0, 2, 0], [1, 2, 0, 3, 0], [24, 25], [18], [6], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 12, 1, 43, 7, 15, 6, 2, 2, 5, 0, 19, 6, 1, 4, 5, 2, 1, 1, 1], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += max(int(6.0), saveOrd(getCharFromString((getCharFromString(in1, int(6230.0)) + in1), abs(len((\"\"s\"\".lstrip(getCharFromString(\"\"6\"\"[( int(1.0) * min(int(4.0), min(int(6.0), saveOrd(\"\"Y\"\"))) ):], abs(divInt(i2,i0)))[( ( i2 + i2 ) * max(i1, int(2.0)) ):( i2 * mod(i0,min(max(saveOrd(saveChr(( int(5.0) - i1 ))), len(\"\"@\"\"[max(i0, int(5.0)):int(5.0)].capitalize())), max(i0, int(2.0)))) )])[i0:] + \"\"Z\"\"))))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [0, 2, 1], [0], [1], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 8, 0, 1, 7, 8, 3, 5, 7, 8, 6, 7, 9, 1, 1, 3], [2, 0, 2, 1, 2, 0, 1, 2, 0, 1, 2, 2, 2, 1, 1, 0, 2], [], [2, 2, 1, 0, 3, 3, 3, 2, 2, 0, 1, 1, 3, 1, 3, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0, 2, 2, 2, 3, 0, 2, 3, 1, 3, 3, 0, 3, 0, 3, 2, 3, 1, 2, 0, 1, 0, 3, 0, 0, 1, 2, 3, 2, 3, 1, 2, 1, 2, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [4, 1, 0, 2, 0, 0, 4, 1, 0, 0, 2, 0, 3, 4, 0, 0, 1, 4], [1, 2, 0, 1, 0, 0, 2], [0, 1, 0, 1, 1, 1, 1, 0, 0], [4, 4, 5, 5], [1, 1], [], [2, 4, 1, 4, 0, 3, 4, 2, 3, 4, 4, 0, 0, 2, 2, 0, 4, 1], [0, 1, 1, 0, 0, 1], [], [1, 2, 1, 2], [3, 1], [], [16], [], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 17, 17, 17, 0, 68, 16, 18, 7, 9, 4, 2, 0, 18, 6, 0, 4, 2, 0, 1, 0, 1], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( getCharFromString(\"\"^\"\", divInt(mod(int(3.0),i2),saveOrd(saveChr(max(min(divInt(( i0 - int(6.0) ),int(8.0)), abs(int(0.0))), min(i2, int(1.0)))))))[:int(7.0)] not in in1 and min(saveOrd((saveChr(( i1 * int(8.0) )) + (getCharFromString(getCharFromString(in1, int(3.0)), i2) + in2)[( ( ( max(i0, mod(min(int(5.0), min(abs(i1), min(i2, len(in2[mod(saveOrd(saveChr(int(7.0))),mod(i0,int(8.0))):][:i1])))),min(i2, i2))) + int(6.0) ) - mod(min(( max(int(7.0), divInt(int(9.0),divInt(i2,int(1.0)))) + i1 ), ( i1 + int(1.0) )),i0) ) * saveOrd(\"\"q\"\") ):])), i2) \\l int(3.0) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [], [2], [], [0], [], [], [], [], [1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [9, 2, 1, 5, 9, 9, 0, 0, 2, 1, 6, 9, 0, 1, 9, 0, 4], [2, 2, 1, 2, 1, 2, 2, 0], [], [0, 2, 2, 0, 2, 0, 2, 2, 3, 2, 0, 3, 2, 2, 3, 3, 1, 1, 3, 1, 2, 1, 1, 1, 2, 2, 0, 0, 2, 1, 3, 2, 2, 1, 0, 3, 1, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [3, 3, 2, 4, 0, 2, 2], [2, 0, 1, 1, 0, 2, 1], [0, 1, 0, 0, 1, 1, 1], [2, 0, 1], [1, 1, 1, 1], [], [3, 4, 4, 0, 1, 0, 2, 3, 2, 1, 0, 1], [1, 0], [], [0, 2], [2, 1, 2, 3], [], [22], [6, 2], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 8, 0, 38, 14, 7, 7, 7, 3, 3, 0, 12, 2, 0, 2, 3, 0, 1, 2, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = (saveChr(i2) + getCharFromString(s2, divInt(( i2 * ( i1 + ( ( len(\"\"6\"\") - mod(i2,len(s0)) ) - ( divInt(abs(saveOrd((\"\"w\"\"[int(9.0):] + s1)[int(2.0):min(int(159.0), divInt(int(9.0),int(00.0)))])),int(2169.0)) + mod(mod(i1,i2),( int(019.0) * abs(( mod(int(0.0),i2) - abs(int(4.0)) )) )) ) ) ) ),i0))) in \"\"2\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 1, 1, 0, 2, 1, 1, 1, 0, 0, 2, 1, 0, 1, 2, 2, 0, 1, 1, 2, 0, 0], [1, 0, 2, 1, 0], [2, 1, 1, 1, 0, 0, 0, 0, 2, 0, 1, 2, 2, 0, 0, 2, 1], [0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [2, 3, 3, 1, 3, 1, 3], [2, 1, 1, 4, 4], [2, 2, 0, 2, 1, 0, 0, 1, 0, 2, 2, 0, 2, 1, 1, 1, 2], [0, 0, 0, 0, 0], [3, 2, 5, 0, 2, 5, 2], [3, 3, 1, 3, 2], [1, 0, 0], [0], [1, 1], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1], [6, 5, 8, 4, 6, 3, 0, 3, 4, 6, 7, 5, 2, 7, 5, 5, 4, 7, 7, 1, 8, 2, 3, 3, 3, 5, 3, 0, 7, 7, 4, 0, 7, 6, 3, 8, 3, 6, 0, 0, 8, 0, 0, 8, 6, 1, 3, 8, 2, 6, 5, 8, 5, 0, 2, 7, 5, 4, 0, 5, 0, 0, 9, 6, 3, 8, 8, 9, 2, 1, 0, 5, 8, 6, 3, 2, 7, 5, 1, 8, 3, 0, 4, 3, 6, 8, 3, 7, 8, 7, 5, 0, 6, 9, 9, 5, 9, 0, 3, 6, 6, 8, 1, 0, 7, 3, 6, 4], [1, 2, 2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 1, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 0, 2, 1, 0, 2, 1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 2, 1, 1, 2, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 1, 0, 2, 0, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0], [1, 0, 2, 1, 2, 1, 2, 2, 1, 3, 3, 2, 0, 3, 1, 0, 0, 2, 2, 0, 2, 2, 0, 2, 3, 0, 3, 2, 0, 0, 2, 2, 3, 0, 2, 3, 0, 1, 2, 2, 2, 2, 1, 1, 3, 2, 0, 1, 0, 1, 2, 1, 2, 2, 1, 0, 3, 1, 2, 2, 1, 0, 0, 2, 0, 2, 3, 1, 3, 2, 1, 0, 1, 1, 1, 1, 0, 2, 3, 2, 2, 2, 3, 3, 0, 1, 0, 3, 0, 3, 3, 1, 1, 0, 1, 0, 1, 2, 0, 3, 1, 3, 2, 0, 2, 2, 0, 3, 1, 0, 3, 1, 0, 0, 2, 1, 0, 3, 1, 2, 0, 3, 0, 3, 1, 0, 3, 0, 2, 0, 3, 2, 2, 3, 2, 2, 2, 3, 2, 1, 2, 0, 3, 0, 2, 0, 1, 3, 0, 3, 3, 0, 1, 0, 2, 1, 3, 1, 1, 3, 3, 0, 3, 2, 1, 0, 2, 2, 3, 3, 1, 3, 0, 3, 1, 2, 3, 0, 1, 2, 1, 2, 2, 3, 3, 0, 1, 2, 2, 2, 1, 0, 3, 1, 1, 3, 3, 2, 0, 0, 1, 2, 1, 2, 1, 1, 2, 0, 0, 3, 3, 0, 0, 0, 2, 2, 1, 3, 3, 1, 0, 2, 0, 0, 1, 2, 3, 3, 3, 0, 2, 0, 3, 2, 2, 1, 0, 3, 1, 3, 1, 0, 3, 1, 1, 1, 0, 3, 2, 1, 0, 2, 3, 1, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 0, 1, 0, 1, 3, 2, 3, 0, 3, 2, 0, 0, 3, 1, 1, 1, 2, 3, 1, 0, 2, 1, 2, 2, 2, 3, 3, 3, 1, 2, 0, 3, 2, 2, 0, 2, 0, 2, 1, 2, 3, 3, 1, 3, 0, 3, 1, 1, 0, 2, 3, 2, 0, 3, 0, 0, 3, 3, 1, 0, 2, 1, 3, 1, 2, 3, 2, 1, 0, 3, 1, 3, 1, 1, 2, 1, 2, 2, 0, 2, 0, 2, 1, 1, 3, 1, 1, 3, 2, 3, 2, 3, 1, 1, 2, 2, 0, 3, 1, 2, 1, 2, 2, 0, 0, 0, 1, 0, 3, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1], [2, 3, 0, 1, 0, 4, 0, 0, 4, 3, 1, 3, 0, 3, 4, 2, 2, 0, 4, 3, 1, 2, 4, 4, 4, 1, 0, 3, 4, 1, 1, 3, 0, 1, 3, 0, 3, 0, 2, 1, 2, 4, 2, 3, 0, 4, 0, 0, 2, 2, 1, 0, 3, 2, 2, 1, 3, 2, 2, 1, 2, 1, 4, 3, 4, 4, 4, 0, 0, 2, 2, 2, 3, 1, 2, 1, 3, 2, 0, 4, 4, 4, 1, 3, 2, 3, 0, 3, 0, 3, 3, 2], [1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2, 2, 0, 1, 1, 2, 0, 2, 0, 1, 1, 2, 1, 1, 2, 1, 0, 0, 2, 0, 2, 2, 1, 1, 2, 1, 1, 2, 2, 0, 0, 2], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0], [2, 3, 2, 5, 2, 4, 1, 5, 2, 2, 4, 4, 4, 3, 1, 4, 1, 0, 4, 2, 0, 1, 3, 3, 4, 0, 0, 1, 1, 4, 3, 5], [1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1], [0, 0], [2, 0, 4, 1, 2, 2, 3, 4, 1, 4, 2, 4, 0, 4, 0, 4, 2, 1, 2, 1, 1, 2, 1, 4, 0, 2, 3, 1, 2, 4, 2, 0, 1, 0, 0, 2, 0, 4, 3, 1, 4, 2, 1, 3, 3, 1, 4, 2, 2, 4, 1, 1, 1, 1, 4, 1, 0, 1, 4, 1, 2, 2, 1, 1, 0, 2, 0, 2, 3, 2, 0, 4, 2, 4, 2, 1, 4, 1, 1, 4, 0, 1, 2, 4, 4, 1, 2, 0, 1, 4, 1, 0, 4, 1, 2, 0, 1, 2, 1, 4, 2, 0, 0, 4, 1, 3, 2, 2, 4, 4, 1, 0, 2, 0, 4, 1, 2, 2, 1, 0, 0, 1, 0, 2, 2, 3, 1, 3, 4, 0, 0, 1, 1], [2, 3, 0, 1, 0, 1, 0, 1, 2, 2, 1, 1, 2, 0, 3, 3, 2, 0, 2, 0, 0, 0, 3, 1, 2, 3, 2, 3], [0, 2, 4, 0, 2, 3], [1, 2, 0, 0, 2, 0, 2, 0, 1, 2, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0], [3, 3, 1, 1, 2, 3, 1, 1, 0, 0, 3, 1, 1, 3, 1, 1, 0, 2, 3, 1, 3, 3, 2, 2, 1, 1, 1, 0, 0, 2, 2, 1, 1, 2, 1, 3, 0, 0, 2, 0, 0, 0, 3, 0, 0, 3, 1], [0, 3, 10, 14, 3, 15, 20, 22, 7, 8, 13, 5], [19, 2, 1, 12, 15, 8, 9, 14, 22, 0, 25, 16, 25, 24, 14, 9], [2, 9, 6, 7, 0, 3, 1, 6], [5, 13, 29, 15, 19, 15, 19, 23, 5, 11, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 22, 22, 5, 17, 2, 7, 0, 0, 7, 5, 17, 5, 7, 5, 3, 1, 2, 108, 108, 94, 5, 376, 104, 92, 47, 60, 32, 47, 2, 133, 28, 6, 33, 47, 12, 16, 8, 11], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:int(6.0)]\\ni1 -= i2\\ni2 = mod(int(5.0),divInt(int(8.0),mod(mod(int(463.0),abs(len(\"\"\"\"\".capitalize()))),mod(i0,min(int(0.0), i0)))))\\ni1 -= i0\\nif (\"\"*tc\"\".lstrip() + getCharFromString(saveChr(( divInt(i2,divInt(( i2 * ( max(i0, min(( i1 + i2 ), mod(( saveOrd(s2) + i2 ),( min(i1, int(3.0)) * ( ( ( mod(int(4.0),int(6.0)) + min(( i2 + int(7.0) ), i2) ) + int(5.0) ) + mod(int(2.0),divInt(( int(7.0) - i2 ),saveOrd(getCharFromString(in2, int(5.0))))) ) )))) + mod(( int(5.0) + i0 ),i0) ) ),mod(i2,( len(saveChr(int(4.0))) - max(mod(int(7.0),i2), int(7.0)) )))) - int(1.0) ))[int(8.0):int(23.0)], i2))[mod(len(\"\"2^b\"\"[divInt(( mod(min(len(\"\"m\"\"[i2:int(3.0)]), i2),saveOrd(\"\"A\"\")) * i0 ),abs(abs(int(3.0)))):]),int(530.0)):i0][int(77.0):] != \"\"D,\"\"[i2:]:{:\\nb2 = getCharFromString(s2, int(4.0)) == (\"\"p\"\" + saveChr(divInt(i1,min(int(0.0), saveOrd(in1[( i0 * divInt(( i2 + len(\"\"i\"\") ),int(7.0)) ):]))))[:i1])[max(int(6.0), i2):i0]\\nres0 = ( s1.endswith(in2) or divInt(int(3.0),i1) == abs(int(8.0)) )\\nres0 = ( True and divInt(i0,saveOrd(s2[:i2])) \\g saveOrd((\"\":\"\" + \"\"j\"\"[int(3.0):i2].capitalize()).capitalize()) )\\n:}else:{:\\nb1 = ( ((\"\"o\"\" + saveChr(saveOrd(saveChr(i1)[( i0 - max(( mod(min(mod(( divInt(len(\"\"K\"\"),( int(6.0) - ( i2 * saveOrd(\"\"9\"\") ) )) + i2 ),mod(i1,int(0.0))), max(i1, max(len(\"\",\"\"), i2))),int(0.0)) * i1 ), ( int(8.0) + min(int(0.0), int(0.0)) )) ):max(len(\"\"w\"\"), i0)][:min(( int(8.0) - i2 ), ( mod(len(\"\":\"\".capitalize()),min(int(6.0), abs(i2))) - max(int(1.0), mod(abs(i0),int(3.0))) ))]))) + s2) in \"\">\"\" and getCharFromString(\"\"6\"\", ( int(8.0) * mod(divInt(saveOrd(\"\"7\"\"[abs(i1):int(2.0)][mod(( ( int(6.0) - i1 ) - len(\"\"a\"\") ),int(5.0)):int(8.0)]),min(saveOrd(in1), divInt(i0,i1))),int(5.0)) )) == in1[mod(int(0.0),( int(2.0) * int(7.0) )):divInt(i1,i2)] )\\nin1 = (in0[:min(min(i0, i0), i0)] + \"\"z\"\"[:mod(( int(5.0) - abs(abs(int(4.0))) ),i0)].rstrip(\"\"q\"\".capitalize())[( i0 + i2 ):].strip())[:int(0.0)]\\nloopBreak% = 0\\nfor s1 in \"\"O\"\":{:\\nres0 = not getCharFromString(in1, ( max(min(len(\"\"D\"\"), i0), divInt(i0,abs(( ( int(5.0) + i0 ) * abs(int(0.0)) )))) + max(int(0.0), i0) )).endswith(getCharFromString(\"\"0\"\", len(s1[int(9.0):int(6.0)])).capitalize()[:int(3.0)])\\ni2 *= i1\\ns0 = \"\"3\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile abs(( int(88.0) * i0 )) \\g divInt(abs(int(9210.0)),mod(mod(max(abs(max(saveOrd(getCharFromString(\"\"z\"\", len(in1))), saveOrd(getCharFromString(\"\"y\"\", mod(( i2 - int(5.0) ),i0))))), int(8.0)),saveOrd(s2[mod(saveOrd(\"\"1\"\"),i2):min(mod(i2,i1), min(int(6.0), int(3.0)))])),int(2751.0))):{:\\nif divInt(abs(int(8.0)),i1) \\le mod(int(3.0),( divInt(divInt(abs(abs(len(\"\"o\"\"[:int(0.0)]))),divInt(i1,max(divInt(divInt(i1,divInt(i1,( int(4.0) - divInt(abs(max(int(3.0), len(s0[i1:].lstrip()))),abs(int(6.0))) ))),int(8.0)), i2))),( min(mod(i1,saveOrd(s1)), i2) * i0 )) - saveOrd(saveChr(saveOrd(\"\"\"\"\"))) )):{:\\nin0 = (\"\"P\"\".strip().capitalize()[int(3.0):i0][( int(7.0) - max(int(8.0), mod(len(in0),divInt(int(7.0),i1))) ):abs(int(5.0))] + in1[len(\"\"U\"\".capitalize()):])\\n:}else:{:\\nb1 = int(0.0) \\le int(6.0)\\nres0 = \"\"6\"\"[mod(int(9.0),divInt(mod(i1,( i0 * mod(int(9.0),int(5.0)) )),min(int(9.0), int(0.0)))):len(s0)][( min(( len(s0) * int(3.0) ), int(6.0)) + divInt(( i1 + len(\"\"W\"\") ),int(6.0)) ):mod(int(8.0),( divInt(i0,i0) * i1 ))] == s1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s1 in (\"\"HI\"\" + (in1.lstrip(in0) + \"\"(\"\"))[int(1073.0):i0][abs(int(64.0)):i1]:{:\\nin2 = \"\"NF@j\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 = i0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [1], [2, 2], [], [], [], [], [], [2], [1], [0], [], [], [], [], [0], [1], [5], [2, 1, 0, 2], [], [0, 2, 0, 3, 3, 1, 0, 0], [1], [2, 0], [], [1], [2, 2], [1], [], [4, 1], [1], [], [], [3], [], [], [], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 0, 2, 1, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(i2)\\ns2 = \"\"@\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 1, 0], [], [0], [], [], [0, 2], [2], [1, 0], [0], [], [1], [], [0], [], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 4, 5, 4, 1, 4, 5, 5, 4, 9, 0, 2, 8, 4, 6, 8, 7, 0, 7, 6, 9, 4, 8, 7], [2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 0, 1, 0, 2, 2, 2, 1], [0], [0, 3, 0, 2, 3, 2, 1, 1, 2, 3, 3, 3, 3, 0, 1, 1, 2, 3, 2, 2, 3, 1, 2, 1, 2, 3, 1, 0, 2, 2, 0, 1, 0, 3, 0, 3, 1, 1, 2, 3, 2, 2, 2, 1, 3, 1, 0, 2, 0, 2, 2, 0, 2, 0, 1, 2, 2, 2, 1, 0, 0, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 0, 1, 1, 0, 3, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [1, 3, 1, 0, 4, 3, 2, 4, 2, 4, 1, 2, 2, 1, 4, 4, 4, 4, 4, 3], [1, 1, 1, 0, 2, 1, 1, 1, 2, 1, 2, 2, 0, 0], [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [2, 4, 3, 1, 3, 1], [1, 1, 1, 1, 1], [], [0, 4, 4, 2, 1, 3, 0, 4, 2, 2, 0, 3, 2, 1, 0, 4, 4, 4, 2, 1, 2, 1, 1, 0, 2, 0], [1, 2, 2, 1, 0, 2], [], [2, 2, 0, 1, 1, 2, 1], [1, 3, 0, 0, 0], [21, 18, 4], [13], [], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 25, 25, 17, 1, 78, 25, 20, 14, 11, 6, 5, 0, 26, 6, 0, 7, 5, 3, 1, 0, 1], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i2 == max(i1, ( len(s2) - ( int(6.0) - int(2.0) ) ))\\ni1 = ( max(min(saveOrd(saveChr(len(\"\"n\"\"[i2:].capitalize()))), int(454145.0)), int(5490.0)) - mod(abs(( ( saveOrd((in1 + in0[int(2.0):mod(int(8.0),mod(abs(int(4.0)),i2))][( ( i2 + int(6.0) ) * i1 ):].capitalize())) - saveOrd((\"\"\\\\\\n\"\"[:i2] + s1)) ) - max(int(8.0), int(7.0)) )),( abs(divInt(mod(( int(0.0) - abs(int(7.0)) ),i1),( i2 * divInt(( i0 - divInt(i1,int(6.0)) ),divInt(( divInt(int(9.0),i0) * i2 ),divInt(( max(saveOrd(saveChr(saveOrd(getCharFromString(\"\"V\"\"[:saveOrd(\"\"S\"\"[divInt(( saveOrd(\"\"E\"\") * saveOrd(in0) ),i2):])].capitalize(), int(4.0))))), int(8.0)) + i2 ),len(s1[:i1])))) ))) + int(7.0) )) )\\nb2 = True\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1], [1, 2, 1, 1, 1, 0, 0], [2], [1, 1, 0, 1, 0, 1], [], [0, 0], [], [], [3, 3, 2], [1], [1, 0, 2], [0], [0], [0], [], [], [], [1, 1, 1, 1], [5, 0, 1, 3], [1, 0, 2, 1, 0, 2, 1, 0, 2, 2, 2, 2, 2, 2, 0, 1, 1, 0, 2], [1, 0, 0, 1], [0, 0, 0, 0, 2, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 2, 1, 3, 3, 1, 1, 0, 3, 0, 0, 2, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 1, 1, 1, 2], [1, 1, 2, 1, 2, 2], [1, 0, 1, 0, 1, 1, 0], [4, 4], [0, 0, 0, 1], [], [0, 0, 1], [], [], [], [1, 0, 1, 1], [24], [5, 7, 13], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 1, 6, 0, 2, 0, 0, 3, 1, 3, 1, 1, 1, 0, 0, 0, 4, 4, 19, 4, 35, 11, 5, 6, 7, 2, 4, 0, 3, 0, 0, 0, 4, 1, 3, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i0\\nloopBreak% = 0\\nwhile i2 \\g i1:{:\\ni0 = i2\\nres0 = res0\\ni1 = mod(saveOrd(in1),( divInt(( mod(i0,( divInt(i2,i2) - max(i2, ( i2 * i2 )) )) - mod(i2,mod(int(5.0),max(max(int(0.0), int(1.0)), i0))) ),abs(i1)) * i1 ))\\nb2 = in1 in \"\"fYhn\"\"\\ni0 *= divInt(int(3.0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [9, 8], [2, 0, 1, 1, 1], [1], [3, 3, 2, 3, 2, 3, 2, 1, 2, 0, 3, 1, 0, 0, 0], [1, 1, 0, 0, 0], [4, 2, 2, 2, 4], [1, 2, 1, 1], [0, 1], [4], [1, 1], [], [4, 0, 4, 1, 1], [0, 3], [3], [], [1, 3], [], [21], [], [10]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 13, 4, 5, 3, 2, 1, 2, 0, 5, 2, 1, 0, 2, 0, 1, 0, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= saveOrd(getCharFromString(in1, abs(divInt(abs(mod(abs(( int(9.0) * ( i0 - saveOrd(\"\"v\"\".lstrip(\"\"\"\\\\\"\"\")) ) )),int(8.0))),i1))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [1, 1, 2, 2, 1, 1, 2, 0, 0, 1, 0], [0, 1, 2], [0, 0, 2, 1, 0, 1, 2, 1], [0], [0, 0, 0], [], [], [0, 3, 0], [4], [2, 1, 2, 2, 0], [0], [4, 3, 4], [1], [], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 8, 3, 7, 1, 4, 5, 7, 9, 6, 8, 6, 0, 6], [1, 0, 1, 1, 2, 0, 0, 2, 1, 2, 2], [1, 0, 1], [3, 3, 2, 0, 0, 2, 3, 0, 3, 3, 0, 1, 1, 1, 3, 3, 0, 0, 1, 1, 3, 1, 2, 2, 2, 2, 1, 0, 3, 2, 1, 2, 3, 1, 3, 2, 1, 2, 1, 1, 3, 0, 3, 3, 3, 1], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 3, 3, 4, 0, 1, 4, 2, 2, 0, 4, 1, 4, 2], [2, 2, 2, 0, 2, 2], [1, 1, 1, 1, 0, 0], [5, 2, 0, 4, 2, 3, 0, 0], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1], [0], [2, 4, 0, 1, 4, 2, 4, 4, 0, 1, 1, 1, 0, 1, 4, 0, 4, 0, 1, 1, 1], [2, 0, 0, 1, 1, 1], [0, 1], [2, 0], [2, 1, 0, 1, 1, 1, 3, 3, 2, 0, 0, 3], [19, 7, 17], [15, 20, 14, 15], [1, 6], [8, 21, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 3, 8, 1, 3, 0, 0, 3, 1, 5, 1, 3, 1, 0, 1, 1, 14, 14, 11, 3, 46, 10, 15, 6, 6, 8, 12, 1, 21, 6, 0, 2, 12, 3, 4, 2, 3], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = in2.capitalize()[max(len(\"\"1\"\"), ( i1 * i0 )):].startswith(getCharFromString(getCharFromString(saveChr(mod(len(s2),i1)), len(\"\"p\"\"))[saveOrd(\"\"T\"\"):i1], int(9.0)))\\nres0 = int(8.0) \\le int(3.0)\\nloopBreak% = 0\\nfor s0 in \"\"u\"\":{:\\nif in1 != \"\"o\"\":{:\\ns2 = saveChr(min(max(i2, i0), int(7.0)))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= int(1.0)\\nloopBreak% = 0\\nwhile in0.startswith(saveChr(saveOrd(s0))):{:\\nb0 = True\\ni2 = int(4.0)\\ns0 = \"\"p%\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= mod(( mod(mod(int(5.0),i2),abs(( int(7.0) + divInt(abs(int(9.0)),min(( int(68.0) * divInt(int(6.0),int(0.0)) ), saveOrd(\"\"<\"\"))) ))) * i2 ),max(saveOrd(\"\"6HR&\"\"), abs(int(6.0))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [0], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 1, 6, 3, 6, 5, 7, 5, 1, 3, 6, 6, 5], [0, 0, 0, 0, 1, 2, 0, 0, 0, 1, 1, 0, 0], [], [1, 2, 2, 1, 3, 2, 1, 3, 3, 3, 0, 2, 0, 2, 3, 0, 2, 0, 2, 2, 2, 3, 0, 0, 0, 1, 3, 2, 3, 1, 2, 3, 0, 1, 1, 1, 0, 2, 2, 2, 1, 3, 2, 2, 1, 1, 0, 0, 0, 1, 3, 3, 3, 1, 0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [1, 1, 1, 0, 0, 1, 0, 2, 1, 4, 0, 0, 4], [0, 1, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1], [], [1, 1], [], [4, 1, 1], [2], [], [], [1, 2], [], [1], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 13, 0, 55, 16, 13, 7, 9, 0, 2, 0, 3, 1, 0, 0, 2, 0, 1, 1, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(0.0) \\l divInt(divInt(int(1.0),max(mod(int(1.0),max(max(min(i0, ( i0 + ( min(i0, mod(i0,divInt(mod(( max(i1, i2) - i0 ),int(6.0)),min(( abs(int(3.0)) - mod(max(i0, int(6.0)),int(5.0)) ), int(7.0))))) + i0 ) )), mod(mod(( int(5.0) + saveOrd(\"\"b\"\".capitalize()) ),( ( int(1.0) + int(3.0) ) - i1 )),i1)), i0)), int(6.0))),min(min(saveOrd(\"\"6\"\"), int(65.0)), i0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 0, 2, 2, 1, 1, 1, 0, 2, 1, 0, 0, 0], [0, 2, 0], [1, 0, 0, 2, 2, 2, 1, 1, 2, 2], [0, 0], [0, 0, 0, 0, 0, 0], [], [], [2, 1, 3], [1, 2], [1, 1, 0, 0], [0, 0], [], [2, 0], [], [0], [], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 8, 1, 7, 2, 1, 7, 6, 8, 5, 2, 2, 0, 1, 3, 4, 8, 5, 3, 1], [2, 2, 1, 1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 2, 1, 1, 1, 2, 1], [0, 1, 0], [0, 3, 0, 0, 2, 2, 1, 0, 1, 3, 1, 3, 1, 2, 2, 1, 2, 2, 2, 0, 0, 2, 3, 1, 0, 0, 2, 3, 1, 3, 1, 2, 3, 2, 1, 0, 3, 0, 0, 0, 0, 1, 2, 3, 2, 0, 0, 3, 2, 0, 2, 1, 1, 3, 1, 0, 0, 1, 1, 2, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [2, 2, 2, 1, 3, 2, 2, 1, 1, 1, 0], [2, 1, 1, 2, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [5, 2, 4, 5, 1, 1, 0, 3, 2, 4, 5, 4, 5, 5, 1, 5, 4], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0], [0, 2, 2, 3, 0, 0, 1, 0, 1, 3, 3, 2, 2, 0, 3, 0, 3, 4, 0, 1, 3, 3, 1, 1, 4, 2, 4, 0, 4, 2, 3, 2, 3, 0, 0, 1], [1, 3, 2, 1], [5], [1, 2, 0, 2, 2, 1, 1], [2, 0, 2, 3, 3, 0, 2, 0, 3, 2, 2], [4, 8, 12], [], [5, 1, 1, 5, 9], [18, 6, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 13, 13, 3, 10, 2, 6, 0, 0, 3, 2, 4, 2, 0, 2, 0, 0, 0, 20, 20, 25, 3, 64, 16, 11, 6, 11, 17, 11, 2, 36, 4, 1, 7, 11, 3, 0, 5, 3], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i2\\nb2 = abs(i1) \\g i1\\nloopBreak% = 0\\nfor in2 in s2:{:\\nloopBreak% = 0\\nwhile divInt(mod(int(1.0),i1),int(8.0)) == abs(int(1.0)):{:\\nb1 = not res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = (in2 + s1)[abs(int(721.0)):][:mod(mod(int(7.0),divInt(( ( i2 * i0 ) - divInt(max(int(6.0), i0),i1) ),( len(\"\"5\"\") - int(8.0) ))),abs(int(5.0)))]\\ns1 = s0\\nin0 = \"\"E1/\"\"\\nloopBreak% = 0\\nfor s2 in ((in1[mod(abs(( int(2.0) * i0 )),max(i0, i0)):][i0:i2] + (in2 + (saveChr(int(20.0)) + in1))) + \"\"#I\"\"):{:\\ni2 += ( max(divInt(i1,i1), max(mod(i2,mod(int(1.0),int(3.0))), min(int(4.0), i0))) - i2 )\\ni1 = int(853.0)\\nin2 = ((\"\"1M)\"\" + \"\"5\"\") + in2.capitalize()[int(1.0):].strip(saveChr(divInt(i1,i1))))\\ns1 = ((in2 + in1)[:i2] + \"\"9\"\")[:i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [1, 2, 1, 1], [0], [0, 0, 0], [0], [], [], [], [3, 3, 3, 1], [2], [1, 0, 2], [0], [4], [0], [], [], [], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [3, 9, 3, 2, 7, 6, 2, 9, 0, 0, 1, 4, 8, 3, 5, 1, 2, 0, 3, 1, 5, 9, 3], [1, 1, 1, 1, 1, 0, 0, 2], [], [1, 0, 2, 0, 2, 1, 1, 2, 3, 2, 0, 1, 2, 1, 1, 0, 3, 1, 0, 3, 2, 1, 3, 1, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0], [2, 0, 2, 0], [0, 1, 1], [1, 1, 0], [0, 3, 3, 1, 1, 3], [0, 0, 0, 1], [0], [3, 0, 2, 2, 4, 0, 2, 2, 0, 3, 3, 4, 4, 0, 3, 0, 4, 1], [3, 0, 0, 1], [0], [2, 0, 2, 1], [1, 0, 1, 3], [1], [18, 17], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 0, 0, 0, 4, 1, 3, 1, 1, 1, 0, 0, 0, 23, 23, 8, 0, 28, 6, 4, 3, 3, 6, 4, 1, 18, 4, 1, 4, 4, 1, 2, 0, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(393.0) == i1\\nloopBreak% = 0\\nfor s0 in (in0 + in0.lstrip()[mod(i1,( int(276.0) + int(2.0) )):mod(abs(divInt(i1,int(9.0))),( int(001.0) - int(4835.0) ))][i1:]):{:\\nres0 = res0\\nb1 = s1[:min(int(120.0), i1)][abs(( int(3.0) - min(int(15.0), i0) )):].startswith(((getCharFromString(getCharFromString(s1, i0), int(93.0)) + (in0 + saveChr(i2))) + \"\"sBr&\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 2, 0, 1, 0, 0, 0, 2, 1, 2, 1, 2, 2, 2, 1, 0, 2, 0, 1, 2, 2, 1, 1, 2, 1, 2, 0, 0, 1, 1, 1, 1], [1, 0, 1, 2, 1, 0, 0, 2, 1, 1, 2], [1, 0, 2, 1, 1, 2, 2, 2, 2, 2, 0, 1, 0, 0, 1, 1, 0, 2, 2, 0, 2], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 1, 1, 0, 1, 0, 1, 2], [2, 5, 4, 3, 2], [1, 0, 0, 1, 0, 2, 1, 1, 2, 0, 2, 2, 0, 2, 1, 2, 2], [0, 0, 0, 0, 0], [2, 5, 4, 1, 3, 5, 4], [1, 0, 0, 3, 2], [0], [1], [1, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [6, 6, 6, 7, 1, 0, 9, 9, 4, 5, 1, 5, 9, 7, 7, 5, 2, 4, 5, 8, 7, 7, 4, 1, 4, 6, 6, 6, 3, 9, 4, 0, 7, 1, 3, 8, 2, 2, 4, 3, 6, 4, 9, 5, 7, 2, 5, 3, 8, 8, 0, 1, 9, 3, 8, 3, 5, 1, 8, 7, 9, 0, 0, 6, 3, 1, 9, 2, 4, 7, 5, 8, 3, 9, 3, 9, 8, 8, 3, 4, 0], [0, 0, 1, 2, 0, 1, 1, 1, 1, 2, 0, 0, 1, 0, 1, 1, 2, 2, 0, 0, 2, 0, 2, 2, 0, 2, 1, 0, 2, 1, 0, 2, 1, 2, 2, 1, 1, 2, 0, 2, 2, 1, 0, 2, 1, 0, 2, 1, 1, 0, 2, 2, 1, 1, 0, 2, 1, 2, 2, 2, 2, 0, 1, 2, 0, 2, 2, 2, 0, 0], [0, 1, 0, 0, 0, 0], [1, 2, 0, 0, 1, 1, 2, 0, 3, 0, 0, 1, 3, 3, 1, 1, 2, 1, 0, 1, 0, 1, 0, 3, 1, 2, 1, 2, 3, 1, 0, 0, 3, 2, 1, 0, 1, 2, 1, 3, 0, 3, 2, 2, 3, 0, 2, 3, 2, 1, 2, 1, 3, 3, 2, 0, 0, 3, 0, 0, 3, 2, 2, 1, 3, 1, 2, 0, 2, 2, 1, 0, 0, 0, 3, 3, 1, 3, 0, 2, 1, 1, 2, 0, 0, 2, 0, 3, 0, 3, 0, 3, 2, 1, 3, 3, 2, 1, 3, 2, 0, 0, 0, 3, 1, 2, 1, 2, 3, 3, 0, 1, 3, 1, 1, 2, 3, 0, 0, 2, 0, 3, 1, 3, 1, 1, 3, 0, 0, 2, 2, 2, 2, 2, 0, 2, 3, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 2, 3, 3, 1, 3, 0, 1, 0, 1, 1, 2, 3, 0, 2, 0, 3, 1, 3, 2, 1, 3, 0, 3, 1, 0, 3, 0, 3, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 3, 0, 2, 1, 1, 2, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [4, 1, 4, 0, 3, 2, 4, 1, 1, 4, 0, 4, 1, 4, 3, 2, 1, 2, 4, 3, 3, 0, 0, 3, 0, 1, 2, 2, 3, 4, 0, 3, 1, 3, 4, 4, 4, 0, 1, 4, 1, 0, 4, 2, 3, 4, 3, 0, 3], [2, 1, 1, 1, 2, 1, 0, 0, 0, 2, 0, 2, 1, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0], [1, 0, 1, 0, 3, 5, 2, 3, 0, 1, 0, 0, 4, 5, 3, 2, 2, 2, 5, 3, 0, 4, 5, 5, 2, 4, 2, 4, 3, 5, 1, 2, 2, 2, 3, 0, 0, 5, 5, 4, 2], [1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0], [2, 0, 2, 0, 3, 0, 4, 3, 2, 3, 3, 4, 0, 4, 4, 0, 2, 4, 3, 1, 0, 2, 4, 1, 2, 2, 0, 1, 1, 2, 2, 0, 1, 0, 1, 4, 4, 4, 2, 2, 0, 2, 2, 0, 4, 0, 4, 2, 1, 2, 4, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 2, 0, 2, 4, 0, 0, 0, 4, 0, 4, 4, 1, 4, 1, 4, 4, 0, 4, 4, 0, 2, 0, 1, 4, 4, 1, 1, 4, 1, 0, 4, 4, 1, 4, 4, 1, 2, 0, 4, 0, 0, 0, 0, 3, 4, 0, 2, 2, 0, 3, 4, 1, 0], [0, 2, 0, 1, 0, 2, 1, 2, 3, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 3, 2, 1, 1, 0, 2, 2, 2, 2, 2, 3, 2, 1, 1], [1, 2, 1], [2, 0, 2, 0, 2, 0, 2, 1, 1, 1, 0, 2, 0, 2, 2, 2, 0, 2, 0, 1, 2, 2, 0, 1, 2, 1, 0, 0, 2, 0, 0], [0, 1, 3, 0, 0, 1, 0, 2, 3, 2, 3, 2, 0, 2, 1, 2, 1, 1, 1, 1], [21, 18, 15, 15, 6], [6, 3, 10, 2, 1, 8, 14], [5, 9, 2, 6, 2], [27, 29, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 32, 32, 11, 21, 3, 8, 0, 0, 8, 5, 17, 5, 7, 5, 1, 1, 5, 81, 81, 70, 6, 227, 53, 49, 27, 27, 41, 20, 3, 118, 33, 3, 31, 20, 5, 7, 5, 3], "tree_depth": 82, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(66.0)\\nif mod(i0,i1) == int(6710.0):{:\\nb0 = False\\ns1 = s0[int(9.0):]\\ni2 *= ( i0 - saveOrd(s1[i1:i1]) )\\n:}else:{:\\ni1 = int(9.0)\\n:}\\ns0 = (in0 + getCharFromString((((in2.capitalize() + getCharFromString(saveChr(max(saveOrd(s2), int(4.0))), int(5.0))) + getCharFromString((\"\"V\"\" + in0), ( int(1.0) - i1 ))[int(597.0):i2])[int(7.0):] + \"\"g\"\".capitalize()[i0:]), min(int(5.0), mod(int(2.0),mod(len(s0[int(4.0):][i0:i1]),abs(( int(5.0) - i0 )))))))\\nloopBreak% = 0\\nfor s1 in \"\"\\\\\\\\S\"\":{:\\ns0 = \"\"Pd\"\"\\nif b1:{:\\ns0 = in1[:int(8.0)][:( int(7.0) * saveOrd(\"\"P\"\") )]\\nloopBreak% = 0\\nwhile i1 != max(( ( max(i1, ( saveOrd(in2) - mod(int(7.0),( int(4.0) + min(saveOrd(\"\"5\"\"), mod(i2,i2)) )) )) + max(i0, i0) ) + saveOrd(saveChr(mod(( int(1.0) * len(in0[int(4.0):divInt(i2,( mod(int(6.0),i0) + i2 ))][:i2].rstrip().capitalize()) ),abs(max(int(6.0), abs(i0)))))) ), mod(int(6.0),int(3.0))):{:\\nif b1:{:\\nloopBreak% = 0\\nfor s2 in s2[( i2 * i1 ):( i0 - saveOrd(getCharFromString(s2, i2)) )][len(getCharFromString(\"\"^\"\"[i1:], len(saveChr(( int(9.0) + min(min(( int(4.0) + len(\"\"9\"\"[( i0 + i2 ):]) ), i1), min(int(0.0), divInt(int(7.0),( max(abs(i2), int(1.0)) * abs(int(3.0)) )))) ))[int(8.0):]))):]:{:\\nin2 = \"\"^\"\"[( len(saveChr(i2)[i1:divInt(i1,saveOrd(getCharFromString(in0[:int(2.0)][min(int(2.0), int(4.0)):][:len(saveChr(i2)[i0:( divInt(mod(mod(( i2 + mod(max(i2, mod(int(3.0),int(6.0))),i1) ),int(4.0)),i0),divInt(mod(i2,int(9.0)),int(5.0))) + i1 )])], i0)))][divInt(int(7.0),i2):][int(2.0):][:i1][( i1 * int(5.0) ):mod(( len(s0) + saveOrd(in1) ),int(3.0))][saveOrd(in2):]) * i0 ):int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = saveChr(i2)\\nloopBreak% = 0\\nfor s2 in in1:{:\\nb0 = getCharFromString(getCharFromString(\"\"2\"\", int(8.0)), int(0.0)) == saveChr(( saveOrd(\"\"G\"\") + i2 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = ( i1 + min(int(1.0), max(mod(int(9.0),saveOrd(s2.capitalize().strip())), i0)) )\\nloopBreak% = 0\\nwhile max(int(3.0), i2) \\le min(i1, saveOrd(saveChr(int(8.0)))):{:\\nif int(3.0) \\ge mod(abs(int(5.0)),len(saveChr(saveOrd(in1)))):{:\\nb1 = in0[i2:i2].endswith(\"\"6\"\")\\n:}\\nb0 = ( getCharFromString(\"\"k\"\".capitalize(), i2).startswith(\"\"2\"\") and \"\"c\"\".capitalize() not in in2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif not \"\"b\"\".capitalize().capitalize() != \"\"i\"\".rstrip().capitalize():{:\\ni2 = i0\\n:}else:{:\\nloopBreak% = 0\\nwhile i1 == i2:{:\\ni0 = divInt(i2,len(s1[min(divInt(int(1.0),int(8.0)), int(7.0)):]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = s2.capitalize().endswith(s2)\\n:}\\ns2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = s0\\nb2 = (saveChr(mod(int(90.0),( int(0631.0) + ( ( len(in2) + i2 ) + mod(int(9.0),int(247.0)) ) ))) + in2[divInt(int(5839.0),i2):i0][i0:int(39.0)]).startswith((saveChr(int(88340.0)) + \"\"o\"\"))\\nin1 = s2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1, 1], [0, 0, 2, 0, 1, 0], [1, 0], [0, 0, 0, 1], [0], [0, 0, 0], [], [], [3, 3, 2], [0], [1, 2, 2, 2], [0], [2, 2, 4], [], [], [], [1], [1, 1, 1, 1, 1, 1, 1], [6, 2, 2, 9, 7, 2, 8], [0, 2, 2], [1], [2, 1, 1, 2, 1, 2, 3, 0, 1, 1, 1, 3, 1, 0], [0, 1, 0, 1], [3, 0], [2, 2, 0], [1, 0], [1, 4, 3, 4, 0, 1, 5], [1, 1], [0], [2, 0, 4, 0, 2, 4, 0, 0, 1, 4, 4, 0, 1, 0], [2, 2, 2, 2], [], [0, 1], [3, 0], [20], [], [], [15]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 3, 0, 0, 3, 1, 4, 1, 3, 0, 0, 0, 1, 7, 7, 3, 1, 14, 3, 2, 3, 1, 5, 2, 0, 13, 4, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( int(6.0) * int(2.0) ) \\l mod(int(2.0),( len(s1[i0:int(9.0)]) * int(7.0) ))\\nres0 = in1.capitalize() == in0.capitalize()[:int(2.0)]\\nif in1 == \"\",\"\":{:\\nb2 = s0.capitalize().capitalize().startswith(\"\"U\"\")\\n:}else:{:\\ni2 += min(int(8.0), i2)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1], [0, 0, 0, 1], [], [1, 2, 1, 1], [], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 1, 4, 3, 2, 3, 4, 5, 8, 7, 3, 0, 0, 7, 2, 6], [1, 0, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 2, 1], [0, 1, 0], [2, 2, 0, 0, 3, 1, 3, 0, 0, 3, 2, 1, 1, 2, 2, 2, 3, 0, 1, 2, 2, 2, 1, 3, 0, 0, 1, 3, 0, 3, 1, 3, 1, 3, 2, 2, 3, 0, 3, 2, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 0, 1, 1, 0, 0, 2, 0, 2, 3, 0], [2, 2, 1, 0, 2, 1], [1, 0, 1, 1, 1, 1, 0], [0, 4], [1], [], [4, 4, 4, 4, 0, 1], [2, 2, 1, 2], [], [], [3], [], [], [], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 3, 44, 12, 11, 6, 7, 2, 1, 0, 6, 4, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = ( ( i0 * i2 ) * saveOrd(saveChr(int(11.0)).capitalize().capitalize()) )\\ns0 = in1.capitalize()\\ni1 -= min(i1, i1)\\ni1 = max(( int(43234.0) + int(58.0) ), mod(( divInt(max(i0, int(730.0)),mod(mod(mod(int(0.0),min(i1, i0)),int(7.0)),min(i1, abs(int(2.0))))) * min(int(6.0), abs(( mod(len(\"\"\"\"),i0) - min(divInt(i0,i0), i2) ))) ),i1))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [], [2], [], [0], [], [], [], [], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 9, 0, 6, 7, 8, 9, 6, 1, 7, 7, 8, 0, 9, 0, 9, 0, 2, 3, 9, 9, 7, 5, 3], [2, 2, 1, 0, 0, 2, 1, 0, 2, 0, 2], [], [1, 0, 1, 1, 3, 3, 2, 0, 3, 3, 0, 3, 2, 0, 3, 1, 2, 0, 1, 1, 0, 2, 3, 1, 3, 0, 2, 1, 1, 2, 3, 2, 0, 2, 1, 3, 1, 1, 3, 1, 1, 1, 2, 1, 3, 2, 1, 3, 1, 0, 2, 1, 0, 3, 0, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 2, 2, 2, 3, 0, 2, 2, 2, 1, 3], [1, 2, 2, 0, 0, 0, 2], [0, 1, 0, 1], [1, 3, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1], [], [3, 0, 4, 2, 3, 3, 2, 0, 1, 4, 2, 2, 1, 3, 0, 2, 3, 3, 2, 0, 2, 3, 4, 2, 4, 1, 1, 2, 2, 1], [1, 0, 0, 1], [], [2, 2, 1, 2, 1, 0, 2, 0, 0, 2], [0, 1, 1, 2, 0, 2, 0, 2], [5, 12, 16], [21, 2], [7, 2, 1], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 25, 25, 11, 0, 57, 11, 14, 7, 4, 4, 8, 0, 30, 4, 0, 10, 8, 3, 2, 3, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = (s1 + saveChr(int(72.0))) in ((in0[i2:] + \"\"F\"\") + getCharFromString(\"\"vc7M\"\"[int(906.0):][:int(7.0)], min(min(( i2 - max(min(i1, abs(divInt(i0,abs(int(8.0))))), ( i0 * int(9.0) )) ), int(6.0)), i2)))[mod(abs(int(17.0)),len((s0 + ((s1[i1:( int(7.0) * int(8.0) )] + (getCharFromString(saveChr(( min(( i0 + ( int(0.0) + abs(int(9.0)) ) ), int(0.0)) + abs(int(9.0)) ))[int(0.0):int(2.0)], divInt(int(3.0),abs(mod(int(9.0),max(int(9.0), i2))))) + \"\"2\"\")[( int(7.0) * i0 ):]) + \"\"Q\"\")[:len(\"\"1\"\"[i2:][int(5.0):int(3.0)])]))):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 0, 0, 2, 0, 2, 2, 1, 1, 0, 0, 2, 1, 2, 1], [1, 2, 1, 1, 1], [2, 1, 2, 1, 0, 0, 1, 1, 1, 0, 2, 1], [0], [0, 0, 0, 0, 0, 0], [], [], [3, 3, 0, 0], [], [2, 0, 0, 2, 2, 2, 2], [], [2, 3, 5, 0, 5], [2, 0], [], [], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 7, 5, 2, 2, 0, 6, 2, 1, 6], [2, 2, 1, 0, 1, 0, 0, 0, 1, 1, 1, 2, 0, 2, 0, 1, 0, 0, 2], [0, 0, 0, 0, 1, 0], [0, 3, 3, 3, 2, 2, 0, 2, 3, 3, 2, 0, 1, 2, 0, 2, 0, 3, 2, 1, 3, 3, 0, 1, 1, 3, 2, 0, 2, 1, 1, 0, 0, 0, 2, 3, 1, 2, 1, 0, 3, 1, 1, 0, 3, 3, 3, 1, 3, 1], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0], [4, 1, 3, 3, 2, 2, 0, 4, 1, 1, 3, 1, 2, 3], [1, 1, 0, 2, 2], [0, 1, 1, 1, 0, 1, 1, 1], [5, 1, 2, 4, 1, 1, 1, 5, 2, 5, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [4, 1, 4, 2, 1, 1, 1, 1, 2, 0, 4, 0, 1, 0, 4, 4, 2, 0, 4, 1, 4, 1, 0, 2, 0, 1, 1, 1, 1, 1, 0], [3, 3, 2, 1, 0, 3, 3], [5, 1, 1, 1], [2, 1, 0, 1], [0, 2, 0, 0, 1, 1, 2, 2, 2, 2, 3, 0, 3, 0, 0], [12, 22, 19, 23, 23], [25, 19, 20], [3, 8, 6, 6, 9], [1, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 13, 13, 3, 10, 0, 6, 0, 0, 4, 0, 7, 0, 5, 2, 0, 0, 2, 10, 10, 17, 5, 44, 11, 11, 4, 8, 8, 11, 0, 28, 7, 4, 4, 11, 3, 2, 5, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = \"\"M\"\".strip(\"\"3\"\"[i2:].rstrip())\\ni2 = saveOrd(\"\"W\"\")\\ns1 = \"\"T\"\"\\ni1 = max(len(\"\"z\"\"), divInt(mod(i0,mod(len(s2[:abs(( i1 - int(7.0) ))]),mod(i0,( i0 - abs(divInt(int(1.0),min(saveOrd(in1.capitalize()), i0))) )))),int(7.0)))\\nres0 = \"\"t\"\" == s1\\nif not res0:{:\\nb0 = saveChr(int(5.0)) != getCharFromString(s1[max(mod(i1,mod(int(2.0),int(2.0))), i1):i1], i2)\\n:}else:{:\\nloopBreak% = 0\\nwhile \"\"8\"\".rstrip().endswith(\"\"6\"\".rstrip()):{:\\nif s1 in in2[:( max(int(0.0), mod(int(6.0),i0)) + len(\"\"6\"\") )]:{:\\ni2 = int(2.0)\\n:}else:{:\\ni0 = int(1.0)\\n:}\\ni1 *= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = \"\"9\"\".endswith(\"\"\\\\\\n\"\")\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [0, 1, 1], [], [], [], [], [3], [2], [1], [0], [], [], [], [], [], [0, 1, 1, 1, 0, 1, 1], [6, 0, 6, 1, 1, 0, 2], [2, 1, 0, 2, 1, 1, 2], [0, 0], [2, 0, 0, 3, 1, 2, 3, 0, 3, 2, 2, 0, 1, 2, 3, 1, 3, 1, 0, 1], [1, 0, 1, 1, 0], [3, 3, 1, 3, 3], [1, 1], [1, 0, 1], [1], [1, 0, 0, 1], [], [3, 4, 2, 4, 4, 4, 4, 1, 0, 1], [2, 1, 2, 1, 0], [], [1], [2, 2, 3, 1], [], [10], [6, 0], [0]], "fitness": 9223372036854775807, "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = mod(i2,i1) == len((saveChr(int(60.0))[:( len(saveChr(i0).capitalize()) - max(divInt(mod(i2,int(6.0)),( len(getCharFromString(\"\"6\"\", int(1.0))) - len(s1) )), int(10.0)) )].capitalize() + \"\"0k\"\"))\\ni1 = i1\\ni2 = int(2.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 7, 2, 20, 5, 5, 2, 3, 1, 4, 0, 10, 5, 0, 1, 4, 0, 1, 2, 1]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [2], [0, 1, 0], [0], [], [3, 0, 1], [0], [0], [], [], [], [0], [], [0, 3], [], [3], [], [], [], [0, 1], [], [1], [], [], [], [0, 1], [23], [9], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( i0 == len(\"\"Xj\"\") and b2 )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [4, 3, 2, 4, 1, 1, 8, 3, 4, 4, 2, 8, 1], [0, 2, 0, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 0, 1, 2], [0], [2, 1, 3, 2, 3, 2, 3, 2, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 1, 3, 2, 2, 3, 2, 0, 0, 3, 0, 1, 2, 2, 0, 3, 1, 0, 1, 2, 0, 0, 1, 1, 2, 1, 3, 0, 3, 3, 1, 3, 2, 2, 0, 0, 0, 3, 1, 3, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 0, 2, 1, 4, 1, 3, 1, 4, 0, 3, 2, 3, 2, 4], [0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 2, 2, 4], [1], [], [4, 4, 4, 4, 0, 4, 2, 4, 4, 1, 2, 4, 0, 0, 0], [0, 0, 2, 1, 2, 0, 2, 2], [], [0, 0], [1], [], [18], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 16, 1, 58, 15, 17, 6, 9, 4, 1, 0, 15, 8, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(int(4.0),max(( max(mod(max(mod(i2,( min(abs(i0), mod(i1,max(saveOrd(getCharFromString(getCharFromString(saveChr(i1).capitalize(), int(3.0)), max(divInt(( len(in2) + mod(i1,i2) ),max(i2, int(2.0))), mod(( i1 + saveOrd(getCharFromString(\"\"s\"\".capitalize(), int(4.0))[i1:int(1.0)].capitalize()) ),( i1 - i2 ))))), int(1.0)))) - int(8.0) )), ( int(3.0) - min(i1, len(s2.capitalize()[abs(int(4.0)):len(s2)])) )),mod(mod(i0,i1),i2)), abs(int(42.0))) - saveOrd(in1) ), int(81.0)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [0, 1], [], [1], [], [], [], [2, 2], [], [], [3, 4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 0, 0, 2, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"34\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4], [1], [], [1], [], [], [], [2], [], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"8\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [], [2], [], [2], [1], [], [1], [], [1], [4], [], [], [1], [], [], [], [], [5, 5, 4], [1, 1], [], [3, 3, 3, 1, 1, 0, 0, 4, 0], [0], [], [], [3, 3], [], [], [], [0, 2]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 3, 2, 0, 9, 1, 0, 0, 2, 0, 0, 0, 2], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (((\"\"\"\" + \"\"\\\\\\t\"\") + in2) + in2) == getCharFromString(in1, int(4.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [2], [1], [3, 1], [], [2], [1], [], [0, 4, 0, 1], [1], [0], [4, 4, 0, 0, 1], [3, 3], [1, 5], [], [0], [4], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 5, 2, 2, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1.strip(s0).rstrip():{:\\ns1 = \"\"E\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [], [2], [], [0], [], [], [], [], [], [], [2], [], [0], [], [], [], [], [], [1, 1, 1, 1], [], [3, 3, 2, 1, 1, 1, 1], [], [], [2], [2, 3, 2, 2], [], [19], [4, 9, 4], [10]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 1, 4, 0, 0, 3, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ((\"\"4\"\"[i2:] + \"\"\"\\\\\"\"\") + \"\"9\"\") in \"\"4\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1], [2, 0, 2, 0, 1, 2, 1, 0], [1, 0, 0], [1, 2, 0, 2, 0], [0, 0], [0, 0, 0], [], [], [0, 2], [5], [1, 2, 2], [0], [3, 3], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 7, 5, 3, 5, 5, 7, 9, 1, 5, 4, 7, 8, 7, 2, 0, 3, 7, 3, 6, 7, 9, 9, 5, 4, 5], [0, 1, 2, 1, 2, 2, 2, 0, 1, 0, 1, 2, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 2, 0, 1, 0, 0], [1], [2, 3, 0, 0, 3, 1, 0, 0, 1, 0, 1, 3, 1, 1, 0, 3, 0, 1, 0, 3, 1, 2, 1, 1, 3, 1, 0, 3, 1, 2, 3, 3, 0, 1, 0, 1, 0, 0, 1, 2, 2, 3, 0, 2, 0, 3, 1, 2, 3, 1, 1, 2, 2, 0, 2, 3, 1, 0, 3, 3, 2, 0, 2, 2, 3, 1, 1, 0, 2, 0, 0, 2, 1, 3, 3, 0, 2, 3, 1, 0, 1, 3, 0, 3, 3, 0, 1, 3, 1, 2, 3, 2, 0, 3, 2, 3, 2, 3, 0, 0, 1, 1, 0, 2, 3, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 1, 2, 3, 1, 3, 4, 3, 4, 2, 0, 3, 3, 1, 1, 1, 0, 4, 1, 0, 4, 1, 2, 3, 3, 4, 0, 4], [0, 0, 0, 2, 2, 0, 0, 0, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0], [1, 5, 5, 4, 4, 4, 0, 2, 4, 5, 5, 5, 4, 3, 4, 2, 5, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0], [4, 4, 4, 2, 1, 4, 1, 2, 4, 1, 2, 1, 2, 2, 2, 4, 4, 2, 4, 2, 2, 1, 4, 0, 1, 4, 0, 4, 0, 0, 2, 4, 0, 2, 4, 2, 0, 1, 2, 2, 3, 3, 2, 2, 2, 4, 0, 2, 2, 4, 4, 0, 0, 0, 4, 4, 0, 0, 4, 2, 2, 0, 1, 0, 4, 4, 1, 4, 4, 3, 1, 3, 0, 1], [3, 2, 3, 3, 2, 0, 0, 0, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 2, 2, 0, 2, 1], [3, 1, 2, 3, 0, 3, 4], [2, 0, 0, 1, 0, 1, 0, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 1, 2, 1, 2], [3, 1, 2, 2, 1, 2, 2, 1, 3, 1, 3, 3], [], [5, 8, 12, 7], [9, 6, 6, 3], [11, 23, 7, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 2, 3, 0, 0, 2, 1, 3, 1, 2, 0, 0, 0, 1, 27, 27, 31, 1, 106, 21, 28, 10, 12, 19, 12, 2, 74, 23, 7, 21, 12, 0, 4, 4, 4], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( len(\"\"(\"\"[i0:].rstrip().capitalize().lstrip(\"\"f\"\".strip())) + i1 ) != max(int(1.0), i2):{:\\ni1 += i2\\n:}\\nloopBreak% = 0\\nfor s1 in \"\"9\"\".capitalize()[int(9.0):i2]:{:\\nin2 = \"\"6\"\"[int(7.0):abs(int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = getCharFromString(getCharFromString(getCharFromString(\"\"i\"\"[:int(3.0)][i2:], len(saveChr(i0)))[int(5.0):i1], max(int(5.0), mod(int(7.0),int(9.0)))), len(in2))[:int(1.0)][i0:saveOrd(\"\"6\"\")][:int(5.0)] != in1.lstrip(in1.capitalize())\\nloopBreak% = 0\\nfor in1 in s0:{:\\ns2 = saveChr(mod(len(in1),saveOrd(in2[i1:].lstrip()[:int(4.0)])))[i2:]\\nb2 = \"\"3\"\" != ((saveChr(int(7.0))[i2:i2][int(8.0):mod(( abs(i1) + divInt(i1,min(int(7.0), mod(len(in2),int(2.0)))) ),int(0.0))][( mod(i1,( len(in2.lstrip(in1).capitalize()[int(3.0):][:i1]) * max(max(( i0 * mod(( max(int(7.0), int(3.0)) + i0 ),( i1 + i1 )) ), divInt(int(6.0),min(saveOrd(in0), i1))), ( max(int(7.0), i0) + int(9.0) )) )) + min(i1, saveOrd(in1.capitalize().rstrip(s2))) ):max(i2, int(9.0))] + in2[abs(int(5.0)):][:( len(\"\"m\"\") + mod(i2,len(s1)) )].capitalize()) + getCharFromString(\"\">\"\", mod(saveOrd(saveChr(divInt(min(i0, i1),int(4.0))).capitalize()),int(5.0))).capitalize())[i0:][:divInt(saveOrd((\"\"h$\"\" + (s1 + \"\"#\"\"))),i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0, 1], [2, 2, 2, 0, 2, 0, 0, 1], [1, 1, 2, 0], [1, 1, 2, 1], [0], [0, 0, 0], [], [], [1, 3], [], [0, 2, 2, 0, 2, 0, 0], [], [1, 0, 2], [1, 3, 2, 0], [0], [1], [0, 0], [], [], [1, 1, 2, 1, 0, 1, 1], [1, 1], [0, 0, 0, 0, 0], [], [], [0, 1], [], [1, 3, 4, 0, 1], [1, 1, 1, 1, 1, 1, 1], [0], [2, 1, 1, 2, 0, 1, 3, 1, 3, 1, 1, 0, 2, 1, 0], [], [], [1, 1, 2], [2, 0, 0, 3, 0, 0, 1], [2, 23, 2, 17], [1], [2], [31]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 3, 1, 0, 1, 0, 0, 0, 0, 3, 0, 2, 1, 0, 1, 2, 0, 0, 4, 1, 3, 0, 0, 1, 0, 1, 3, 0, 6, 0, 0, 2, 3, 2, 0, 1, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif False:{:\\nif \"\"2\"\"[:i1] not in \"\"C\"\":{:\\nloopBreak% = 0\\nwhile s1[:i1] in \"\"X\"\":{:\\ni2 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [4], [2], [0], [1], [], [], [], [], [1, 1, 0, 0, 1, 0, 1], [5, 2, 8, 7, 5, 2, 1], [1, 1, 2, 2], [], [1, 0, 2, 2, 2, 0, 2, 3, 1, 0, 0, 1, 1], [0, 1, 0, 0], [2], [0, 1, 1], [1], [2, 5, 4], [0, 1, 0, 1], [], [4, 4, 1, 3, 3, 0, 4, 2, 1, 0, 4, 0], [0, 3, 0, 2], [3], [0], [2, 1, 2, 0], [12], [24], [0, 5], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 4, 0, 13, 4, 1, 3, 1, 3, 4, 0, 12, 4, 1, 1, 4, 1, 1, 2, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = getCharFromString(\"\"0y\"\".lstrip(((s2 + getCharFromString(\"\"5M\"\"[int(5.0):i1], ( mod(( i1 + ( abs(int(2.0)) - i2 ) ),i2) - int(875.0) ))) + in2)), int(21.0)) not in in1.capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 2, 1], [0, 1, 0], [0], [0, 0], [0], [], [], [2, 3], [], [0, 2], [], [5], [0], [], [], [0], [0, 1], [9, 9], [], [], [1], [1], [], [], [], [3, 0, 5, 1, 3], [1], [0, 0], [4, 1, 3, 0, 0, 0], [1], [], [], [3], [], [], [], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 3, 1, 2, 0, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 1, 2, 2, 0, 0, 1, 0, 0, 0, 0, 5, 1, 2, 6, 1, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in saveChr(int(99.0)):{:\\nif b2:{:\\nloopBreak% = 0\\nfor s0 in \"\".\"\":{:\\nres0 = (in2 + s1).endswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 1], [2, 0, 0, 1, 0, 1, 2, 2, 1], [1, 1, 0], [2, 0, 2, 2, 0, 1], [0], [0, 0, 0, 0], [], [], [3, 1], [0, 0], [0, 0, 1, 0, 1, 0], [0, 0], [], [1, 1, 3, 1], [0], [1, 1, 0], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [9, 2, 7, 1, 1, 6, 7, 1, 2, 5, 8, 6, 8, 4, 2, 0, 8, 3, 8], [0, 2, 2, 2, 0, 2, 0, 0, 1], [0], [2, 2, 2, 2, 0, 1, 2, 2, 1, 2, 3, 0, 0, 3, 3, 2, 0, 2, 2, 1, 1, 0, 1, 1, 2, 0, 0, 1, 3, 1, 2, 1, 3, 1, 3, 1, 1, 3, 0, 1, 3, 1], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0], [4, 2, 2, 3, 2, 0, 3, 4], [2, 1, 0, 2, 1, 0], [1, 1, 1, 1, 1, 0], [1, 0, 5, 2, 4, 1, 1, 1, 4], [1, 1, 1], [0], [4, 2, 0, 4, 1, 4, 4, 0, 0, 2, 2, 3, 0, 1, 1, 2, 0], [0, 0, 2, 1], [], [1, 2, 0, 2], [0, 3, 3], [6], [], [], [8, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 3, 6, 1, 3, 0, 0, 2, 2, 6, 2, 0, 4, 1, 3, 2, 19, 19, 9, 1, 42, 12, 8, 6, 6, 9, 3, 1, 17, 4, 0, 4, 3, 1, 0, 0, 2], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif False:{:\\ns1 = getCharFromString(s0[:mod(( mod(( i0 * int(9.0) ),( mod(int(2.0),( saveOrd(getCharFromString(\"\"G\"\", i2)) - i2 )) + abs(abs(mod(i2,mod(divInt(int(7.0),int(1.0)),i0)))) )) * int(1.0) ),int(6.0))], ( i2 - i0 ))\\nres0 = False\\nin2 = saveChr(int(7.0)).capitalize()\\ns2 = in1\\n:}else:{:\\nb1 = len(s1) \\l int(1.0)\\nif ( ( int(2.0) + abs(int(58.0)) ) \\l min(int(684.0), int(2.0)) and True ):{:\\nloopBreak% = 0\\nfor s1 in (s1 + \"\"%\"\")[len(\"\"(\"\"):i0][int(083.0):]:{:\\ni1 = saveOrd(in1[int(8.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0], [], [1, 0, 0, 1, 1, 1], [], [0, 0, 0, 0], [], [], [0, 3, 2], [5], [0, 1], [0], [], [0], [], [], [], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [8, 6, 4, 7, 0, 6, 1, 6, 8, 1, 1, 6, 4, 9], [0, 0, 2, 1, 2, 0, 1, 2, 2], [0, 0, 0, 0], [1, 3, 2, 0, 2, 3, 0, 3, 1, 3, 3, 1, 2, 2, 3, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0], [3, 2, 0, 4, 1, 1], [0, 0, 1, 2], [], [2, 3], [0, 0, 1], [], [0, 1], [], [], [], [0, 2, 0], [24, 16], [], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 0, 6, 0, 4, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 14, 14, 9, 4, 21, 4, 6, 4, 0, 1, 3, 0, 2, 0, 0, 0, 3, 2, 0, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(8.0)\\nb0 = res0\\nb2 = len(s2) != ( i0 + ( abs(i2) + min(int(6.0), saveOrd(\"\"Y4Q\"\")) ) )\\ni1 = max(int(4706.0), ( ( max(int(1681.0), int(1.0)) - i2 ) * i0 ))\\ni1 = i2\\ni2 = int(649.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 2, 2, 0, 0, 1], [0, 1], [1, 1, 1, 0], [0], [0, 0, 0], [], [], [3], [], [2, 2], [], [0, 0], [], [], [], [0], [1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 5, 7, 1, 7, 0, 9, 4, 4], [0, 2, 0, 2, 0, 1, 0, 1, 1, 2, 2], [0, 0, 0], [0, 1, 2, 1, 1, 2, 1, 3, 3, 0, 2, 0, 0, 2, 0, 3, 0, 1, 2, 2, 1, 3, 1, 0, 3, 3, 0], [1, 1, 0, 1, 1, 0], [0, 0, 4, 4, 4, 2], [0, 0], [0, 1, 1, 1], [4, 3, 3, 5, 5], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1], [0], [4, 4, 1, 4, 3, 1, 2, 2, 0, 0, 0, 2, 1, 4, 2, 0, 1], [2, 0, 1, 2], [], [0, 1, 2, 2], [0, 1, 3, 2, 1, 2, 1, 1, 2, 1], [2], [20, 9, 8, 7, 18], [1, 1, 7], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 3, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 1, 9, 9, 11, 3, 27, 6, 6, 2, 4, 5, 10, 1, 17, 4, 0, 4, 10, 1, 5, 3, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\nloopBreak% = 0\\nfor in1 in getCharFromString(\"\"Cu\"\", int(4.0)).capitalize():{:\\nif saveChr(divInt(int(5.0),int(717.0))) in (\"\"\"\"\" + in0[:mod(int(0.0),min(min(i0, ( i2 + i0 )), mod(i1,saveOrd(in0))))][i0:int(9.0)]):{:\\ni1 = mod(( int(4.0) + saveOrd(in2) ),int(4.0))\\n:}\\ni1 = i2\\nres0 = \"\"1j1i\"\"[saveOrd(in2[abs(i2):].capitalize()):] in \"\"h7s\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 0, 2, 1, 1, 0], [0, 1], [0, 0], [0], [0, 0], [], [], [1, 3, 2], [4, 0], [0, 0, 1, 2], [0, 0], [5], [0, 2], [], [], [0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [8, 3, 1, 7, 6, 4, 3, 5, 6, 9, 3, 5, 9, 3, 5, 1, 6], [0, 0, 1, 2, 1, 2, 1], [], [0, 2, 1, 2, 0, 2, 0, 1, 2, 1, 3, 3, 1, 3, 2, 1, 3, 2, 1, 0, 2, 2, 0, 2, 1, 1, 3, 3, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 4, 2, 2, 4, 4], [1, 0, 2], [1, 1, 0, 1, 1, 0, 0], [2, 5, 1, 0, 5, 0, 0], [1, 0, 1, 1], [0], [4, 0, 2, 0, 3, 1, 3, 4, 4, 2, 4, 4, 0, 0, 0, 3, 2, 0, 1, 1, 3, 2, 4, 1, 0], [3, 1, 2, 2, 2, 2], [4, 2], [0, 1, 0, 2, 2], [2, 0, 0, 0], [6, 10, 5], [], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 0, 0, 3, 1, 4, 1, 1, 2, 0, 0, 1, 15, 15, 6, 0, 30, 9, 6, 2, 7, 7, 4, 1, 20, 5, 1, 3, 4, 3, 0, 1, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2.rstrip(s1[i0:( int(8.0) - mod(i0,mod(i1,int(3176.0))) )]):{:\\nb1 = res0\\nif not divInt(int(4356.0),max(saveOrd((\"\"6\"\" + (saveChr(int(9.0)) + s0.capitalize().capitalize()[:abs(( int(3.0) + abs(mod(int(5.0),i2)) ))].capitalize()))), mod(divInt(i1,divInt(int(9.0),int(3.0))),saveOrd(in2)))) \\le saveOrd(s0):{:\\nb2 = (s0[i2:int(5.0)] + \"\"GK\"\").endswith(\"\"F\"\")\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 1], [2, 1, 2, 0, 2, 0, 0, 1], [2, 0, 2], [2, 1, 2, 1, 1], [0], [0, 0, 0], [], [], [2], [4], [0, 2, 2, 1], [0], [1, 4], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 9, 8, 4, 4, 7, 9, 2, 8, 7, 5, 3, 2, 5, 9, 5, 8, 3], [2, 0, 1, 1, 2, 0, 2, 0, 1, 0, 1, 1, 0, 1, 2, 0, 1, 1, 1, 1, 2, 2], [1, 1, 0], [0, 2, 2, 0, 2, 2, 3, 2, 0, 3, 1, 0, 1, 2, 1, 1, 2, 1, 0, 3, 3, 1, 3, 1, 1, 1, 3, 2, 3, 2, 2, 0, 3, 3, 0, 3, 0, 3, 2, 3, 3, 2, 3, 0, 2, 1, 0, 3, 1, 1, 3, 0, 0, 1, 1, 1, 3, 0, 2, 0, 3, 3, 0, 0, 2, 1, 3, 0, 3, 1, 3, 1, 0, 3, 3, 1, 2, 0, 2, 0, 3, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [2, 3, 2, 0, 2, 1, 3, 1, 4, 4, 1, 1, 1, 2, 3, 3, 3, 4, 2, 3, 3, 3, 0, 2, 0, 2, 3], [0, 0, 0, 2, 0, 1, 0, 2, 0, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0], [4, 1, 4, 0, 5, 3, 3, 2, 1, 2, 1, 0, 4], [1, 1, 1, 1, 1, 1, 1], [0], [2, 1, 1, 2, 4, 4, 1, 2, 4, 1, 1, 0, 4, 0, 4, 4, 2, 4, 4, 0, 2, 1, 2, 4, 4, 4, 1, 0, 0, 0, 4, 2, 2, 2, 0, 0, 4, 4, 4, 0, 0, 0], [1, 2, 3, 1, 2, 3, 1, 0, 2, 0, 3, 3, 3, 2, 2, 2], [1, 2, 5, 5, 4], [2, 1, 1, 1, 0, 2, 0, 1, 1, 0], [1, 2, 0, 2, 2, 2, 2], [9], [12], [3, 1, 6, 0, 0], []], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 1, 3, 0, 0, 0, 0, 3, 0, 2, 1, 0, 0, 0, 15, 15, 15, 3, 57, 13, 17, 7, 8, 8, 7, 1, 29, 11, 3, 6, 7, 1, 1, 5, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not \"\"m\"\"[i2:] not in \"\"3\"\":{:\\nin1 = saveChr(( divInt(i0,divInt(divInt(abs(( i1 + len(\"\"J\"\".capitalize()) )),int(7.0)),i1)) + int(9.0) ))[:( int(8.0) + int(4.0) )]\\nloopBreak% = 0\\nfor s1 in \"\"1\"\".rstrip()[:mod(int(4.0),i2)]:{:\\ni0 *= abs(min(int(7.0), abs(int(9.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile \"\"6\"\".startswith(in1):{:\\ns0 = saveChr(int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(8.0)\\ni0 = max(( len(in2) - mod(( i1 + max(saveOrd(saveChr(i0)[:saveOrd(getCharFromString(in0, i1))].strip().capitalize()), max(divInt(max(max(mod(abs(i1),mod(int(7.0),i0)), len(\"\"0\"\"[int(5.0):int(3.0)])), len(getCharFromString(\"\"0\"\".strip(in0), i1).capitalize()[i2:])),int(2.0)), int(5.0))) ),int(9.0)) ), len(s2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0], [], [0, 1, 0, 0, 0, 1], [], [0, 0], [], [], [0, 3, 1, 2], [1, 2, 0, 5, 2, 2], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [], [3, 3, 3, 1], [0, 0, 0], [1], [], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 6, 2, 5, 2, 4, 0, 5, 7, 0, 5, 9, 4, 7, 1, 5, 3, 4, 1, 5, 4, 6, 0, 9, 0, 2, 7, 4, 3, 3, 0, 3], [2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 0, 2, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1], [0, 1], [1, 1, 0, 2, 3, 2, 1, 0, 3, 0, 0, 3, 1, 1, 1, 3, 3, 1, 1, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 2, 2, 2, 0, 2, 1, 3, 2, 2, 0, 2, 2, 3, 2, 2, 1, 2, 2, 3, 2, 0, 3, 2, 2, 3, 3, 3, 2, 0, 2, 2, 0, 1, 3, 0, 3, 1, 2, 1, 2, 0, 0, 3, 1, 2, 0, 3, 2, 2, 2, 3, 1, 0, 1, 2, 3, 1, 1, 1, 2, 0, 1, 3, 3, 2, 0, 1, 0, 3, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 2, 4, 2, 0, 0, 4, 0, 3, 4, 0, 1, 3, 1, 3, 3], [2, 1, 0, 2, 0, 1, 2, 2, 2, 0, 0, 2, 0, 2, 2, 1, 2, 2, 2, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0], [3, 2, 3, 5, 4], [1], [], [1, 0, 0, 0, 4, 0, 4, 0], [1, 3], [1], [], [3], [], [], [], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 0, 6, 0, 2, 0, 0, 4, 6, 10, 6, 0, 4, 3, 1, 0, 32, 32, 31, 2, 107, 33, 21, 20, 14, 5, 1, 0, 8, 2, 1, 0, 1, 0, 0, 0, 1], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(9.0) \\g int(6.0)\\ni2 = i2\\nres0 = ( ( min(mod(int(25.0),i2), min(i2, i1)) * min(int(2405.0), int(705.0)) ) == int(9.0) and ( ( False and min(max(int(4.0), int(7.0)), ( i2 - ( i2 + i1 ) )) \\l i1 ) and ( i1 * int(15.0) ) != i2 ) )\\nb1 = i1 == mod(i1,i1)\\nb2 = ( mod(( i0 + divInt(int(34.0),max(divInt(( i2 - ( divInt(abs(( divInt(int(1.0),( divInt(saveOrd(\"\"\"\"),( i1 * abs(( mod(min(min(saveOrd(in0), ( i1 * ( divInt(i2,int(5.0)) * min(i2, len(s2)) ) )), int(4.0)),mod(int(6.0),( i2 + i0 ))) + saveOrd(in0) )) )) * int(0.0) )) + mod(i0,min(( ( ( max(int(9.0), i0) * int(0.0) ) * ( len(saveChr(int(2.0))) - int(7.0) ) ) * int(4.0) ), mod(i0,int(3.0)))) )),max(len(in2), divInt(i0,int(3.0)))) * i2 ) ),len(in1.rstrip())), int(0.0))) ),int(3.0)) * i0 ) == i1\\ni0 += i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [2], [0, 0], [], [0], [], [], [1, 0], [1], [1, 0, 2], [0], [1], [1], [], [1], [], [1], [1], [0, 0, 0], [], [3, 3, 1, 0, 0, 0], [], [4, 4], [], [], [1, 4, 2, 0, 1], [0, 1, 0, 1, 0, 1], [], [0, 4, 0, 3, 2, 0, 3, 4, 1, 0, 0, 3, 2, 2, 1, 1], [0, 3], [3], [1, 2, 2], [2, 3, 3, 3, 1, 3], [], [3], [1], [8, 6, 5, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 1, 3, 1, 1, 1, 0, 1, 0, 1, 1, 3, 0, 6, 0, 2, 0, 0, 5, 6, 0, 16, 2, 1, 3, 6, 0, 1, 1, 4], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s1) \\g saveOrd(getCharFromString(in1, int(1.0)))\\nloopBreak% = 0\\nwhile False:{:\\nb0 = (s2[:i0] + (\"\"1%\"\".lstrip(s0) + s1)) not in (\"\"#\"\"\"[i0:][i0:] + \"\"d_\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [], [2], [], [2], [], [], [], [], [1, 1, 1, 1, 1, 0, 1], [5, 7, 5, 3, 5, 2, 7], [1, 2, 1, 1, 0, 0, 0, 2, 0, 1], [], [1, 3, 2, 0, 2, 3, 3, 1, 2, 1, 0, 0, 3, 3, 0, 2, 2, 3, 3, 1, 2, 2, 0, 0, 2, 3, 0, 0, 0, 3, 3, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0], [2, 0, 2, 4, 0, 2, 3, 0, 3, 2], [2, 0, 2, 1, 0, 1], [1, 0], [3, 0, 2, 5, 3], [0, 1, 1, 1, 1, 0, 1, 1], [], [3, 4, 4, 4, 0, 0, 0, 4, 0, 4, 2, 1, 1, 3, 3, 4, 3, 2, 1, 2, 1, 1, 4, 3, 1, 0], [0, 0, 3, 0, 3, 2, 1], [4, 4], [2, 1, 0], [1, 0, 1, 0, 2, 2, 1, 1], [6, 7], [8, 8, 18, 16], [5, 3], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 8, 10, 6, 2, 5, 8, 0, 26, 7, 2, 3, 8, 2, 4, 2, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (getCharFromString(getCharFromString(in0.rstrip(s0), int(5.0)), abs(( i1 * ( min(abs(int(7.0)), ( int(5.0) + i2 )) * i1 ) ))) + s2) == getCharFromString(in2, saveOrd(\"\"iG\"\"[min(i1, mod(( abs(len(\"\"i\"\")) - int(3.0) ),divInt(( i0 + i0 ),( min(i0, i2) - i0 )))):].rstrip((((\"\"H\"\"[:len(\"\"5\"\"[abs(i1):int(5.0)])] + \"\"3s\"\").capitalize() + saveChr(int(27.0))) + (\"\"q\"\" + in0)))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 1, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 1], [2, 0, 2, 0, 2, 1, 0, 2, 2, 0, 2], [1, 2, 2, 2, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0], [], [], [], [0, 5, 0], [1, 0, 2, 1, 0, 1, 2, 2, 2, 1, 2, 0, 2], [0, 0, 0], [2, 3, 4, 1, 1, 1], [3, 2, 3, 2], [1, 1], [], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 9, 4, 8, 3, 0, 5, 6, 3, 7, 6, 4, 7, 9, 0, 9, 1, 5, 6, 2, 4, 3, 5, 8, 9, 2, 1, 6, 6, 0, 5, 8, 5, 2, 5, 1, 9], [0, 1, 0, 2, 1, 2, 0, 1, 2, 0, 1, 0, 0, 1, 2, 2, 1, 0], [1, 1], [0, 3, 3, 0, 3, 2, 2, 2, 0, 1, 2, 1, 1, 1, 3, 1, 2, 3, 2, 3, 0, 1, 2, 3, 2, 0, 1, 2, 0, 3, 2, 1, 1, 2, 3, 1, 2, 0, 3, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 3, 3, 0, 3, 3, 1, 3, 3, 1, 2, 3, 1, 1, 3, 2, 1, 3, 1, 2, 1, 3, 0, 1, 2, 1, 2, 3, 3, 1, 3, 0, 2, 3, 1, 3, 1, 3, 3, 2, 2, 1, 2, 1, 1, 3, 3, 1, 2, 0, 3, 2, 0, 3, 2, 3, 3, 2, 2, 0, 2, 3, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 3, 3, 4, 2, 1, 0, 4, 3, 3, 1, 4, 0, 0, 2, 1, 3, 2, 3, 4, 2, 0, 3, 0, 3, 3, 1, 3, 2, 2, 0, 3, 4, 4, 3, 4, 3], [0, 2, 0, 0, 1, 2, 2, 0, 1, 0, 1, 2, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [2, 3, 5, 1, 4, 5, 2, 2, 0, 5, 5, 3, 1, 2, 3, 4, 4, 0, 1, 5, 1, 3, 5, 3, 4, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0], [1, 1, 0, 0, 1, 1, 2, 4, 2, 4, 0, 2, 4, 4, 4, 0, 2, 1, 1, 2, 0, 0, 2, 4, 4, 1, 2, 4, 0, 0, 2, 0, 4, 0, 4, 4, 1, 1, 1, 4, 4, 1, 1, 1, 0, 4, 1, 1, 0, 1, 0, 2, 0, 4, 0, 2, 4, 4, 1, 1, 0, 4, 0, 2, 2, 2, 0, 2, 0, 1, 2, 1, 2, 1, 2, 2], [0, 2, 0, 1, 3, 3, 2, 2, 2, 0, 1, 0, 0, 3, 2, 3], [0, 3, 2, 4, 2], [0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 1, 2, 1, 2, 2, 0, 2], [3, 2, 1, 0, 2, 0, 0, 1, 3, 0, 2, 0, 3, 2, 0, 2, 3, 1, 2, 1, 1, 0, 1, 1, 1, 1, 2, 0], [13, 17, 0, 20, 18, 13, 17, 5], [17, 1, 5, 12, 2, 17, 13, 11, 22], [3, 0, 8, 4, 2, 9, 3], [14, 3, 2, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 0, 3, 1, 0, 2, 3, 0, 3, 0, 0, 0, 3, 0, 1, 1, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i0 \\l max(len(\"\"+\"\"), i1):{:\\ni0 += len(\"\"3r\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = in0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [2, 2, 1, 2, 2, 2, 2, 2, 0, 2, 2, 1, 2, 0], [1, 2, 0, 0, 1, 0, 2, 0, 2, 2], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0], [], [], [2, 1, 2, 3], [0, 5, 1, 3, 5, 2, 5], [0, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [2, 1], [2, 3, 0], [0], [1], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 4, 1, 8, 1, 9, 3, 4, 5, 6, 0, 6, 8, 1, 6, 4, 4, 2, 5, 2, 1, 9, 8, 9, 4], [0, 2, 0, 2, 0, 1, 0, 2, 0, 0, 1, 2, 0, 2, 2, 0, 2, 1, 0, 0], [0], [1, 1, 0, 2, 0, 2, 2, 1, 0, 3, 1, 3, 2, 1, 0, 3, 2, 3, 3, 2, 1, 0, 3, 2, 1, 3, 2, 1, 0, 0, 1, 2, 1, 3, 0, 2, 1, 3, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 1, 3, 2, 3, 0, 2, 3, 3, 2, 1, 3, 1, 0, 1, 3, 2, 1, 1, 0, 1, 1, 2, 3, 1, 1, 0, 0, 2, 1, 1, 0, 3, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 2, 4, 1, 3, 3, 4, 3, 2, 1, 0, 2, 3, 2, 2, 0, 4, 4], [1, 2, 1, 2, 0, 0, 2, 0, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 2, 5, 4, 5, 3, 1, 1, 0, 4, 0], [1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0], [4, 0, 1, 3, 4, 2, 1, 0, 4, 0, 0, 2, 2, 2, 4, 1, 0, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 0, 0], [1, 1, 0, 0], [], [1, 1, 2, 1, 2, 2, 0, 0, 2, 1], [0, 1, 0, 2, 2, 1, 2, 0], [1, 6, 0], [22, 11], [4, 4, 1], []], "fitness": 9223372036854775807, "mapping_values": [1, 14, 14, 10, 4, 4, 2, 0, 0, 4, 7, 12, 7, 2, 3, 1, 0, 2, 26, 26, 20, 1, 81, 18, 18, 9, 9, 11, 8, 4, 30, 4, 0, 10, 8, 3, 2, 3, 0], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not int(1.0) \\l int(5.0):{:\\nloopBreak% = 0\\nwhile i0 != ( i2 - ( ( int(4.0) * i0 ) - abs(int(1.0)) ) ):{:\\nb2 = ( abs(( int(8.0) * i2 )) \\g saveOrd(saveChr(mod(max(len(s1), ( int(1.0) + i0 )),len(\"\"B\"\")))) and divInt(int(9.0),saveOrd((saveChr(mod(int(3.0),i1)) + \"\"w\"\"[:i0]))) \\ge int(4.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nfor s2 in in2:{:\\nloopBreak% = 0\\nfor in1 in getCharFromString(in2, ( int(5.0) + len(in0) )):{:\\nif getCharFromString(\"\"G\"\", i2)[:( int(6.0) * abs(i0) )][i0:][:max(int(0.0), i1)] == s1:{:\\nloopBreak% = 0\\nfor s1 in \"\"4\"\":{:\\nloopBreak% = 0\\nwhile \"\"4\"\" not in \"\"l\"\":{:\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in \"\"1\"\"[i2:][( mod(int(6.0),int(8.0)) + min(mod(abs(i2),divInt(len(\"\"A\"\"),abs(( int(1.0) - abs(int(6.0)) )))), i0) ):int(4.0)][min(divInt(int(4.0),int(2.0)), i2):int(5.0)][int(2.0):][mod(saveOrd(in1[:int(1.0)]),int(9.0)):]:{:\\nloopBreak% = 0\\nwhile i1 != i0:{:\\nb1 = mod(int(8.0),int(9.0)) == i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile b2:{:\\nres0 = saveOrd(s0) != int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [0], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [0], [], [2, 0, 1], [0], [], [1], [], [2, 0, 2, 4], [0, 1], [0], [0, 2, 1], [], [], [2], [1, 3], [], [5], [], [14]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 1, 0, 1, 0, 3, 2, 1, 3, 0, 0, 1, 2, 0, 1, 0, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\ns2 = \"\"f+\"\"[( i0 - int(9.0) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1], [2, 1, 1, 2, 2, 1, 0], [1, 2, 1], [2, 2, 2, 2], [], [0], [], [], [1], [5, 4], [1, 0, 0, 2, 2, 0, 2, 2, 2, 1], [0, 0], [4, 5, 2, 0, 5], [3, 3, 3], [0, 1, 1], [], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 5, 4, 9, 0, 5, 3, 2, 0, 7, 2, 2, 6, 7, 5, 4, 9, 3, 4, 4, 8, 9, 6, 4, 3, 0, 0, 7, 1, 0, 8, 6, 0, 5, 7, 3, 6, 6, 9, 8, 1, 0, 6, 8, 3, 8, 3, 3, 3, 2, 5, 5, 4, 3, 3], [1, 0, 1, 1, 1, 1, 0, 0, 0, 2, 1, 1, 1, 2, 1, 1, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 0, 1, 1, 2, 2, 2, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 2, 1, 2, 0, 2, 2, 1, 0, 1], [], [2, 1, 0, 3, 3, 2, 2, 3, 1, 1, 2, 3, 3, 3, 3, 0, 3, 2, 1, 0, 0, 3, 3, 3, 0, 3, 2, 0, 0, 0, 1, 0, 1, 0, 3, 0, 1, 0, 3, 1, 1, 2, 0, 2, 0, 2, 2, 2, 1, 2, 2, 1, 3, 1, 1, 1, 2, 0, 1, 1, 3, 1, 0, 1, 1, 3, 1, 0, 1, 3, 2, 2, 2, 1, 2, 1, 1, 2, 3, 0, 3, 2, 1, 0, 3, 2, 0, 1, 2, 2, 2, 0, 0, 2, 0, 0, 2, 1, 2, 2, 0, 2, 1, 3, 3, 3, 0, 2, 3, 0, 1, 2, 0, 3, 3, 0, 3, 0, 1, 0, 1, 2, 3, 0, 3, 2, 3, 0, 2, 0, 2, 3, 2, 2, 1, 2, 2, 2, 2, 2, 0, 2, 0, 3, 3, 1, 0, 1, 2, 0, 3, 0, 1, 0, 2, 3, 3, 1, 3, 3, 1, 1, 0, 3, 1, 2, 1, 2, 1, 2, 0, 2, 2, 3, 0, 2, 2, 2, 3, 3, 1, 0, 2, 3, 2, 3, 3, 0, 1, 1, 2, 2, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 3, 3, 1, 2, 1, 0, 2, 1, 1, 2, 3, 1, 2, 1, 2, 1, 0, 2, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 4, 3, 1, 2, 4, 3, 0, 3, 3, 4, 4, 3, 0, 2, 4, 3, 3, 3, 2, 0, 4, 4, 0, 2, 1, 1, 2, 0, 2, 4, 4, 4, 1, 2, 0, 4, 3, 0, 1, 0, 2, 2, 0, 0, 4, 4, 4], [2, 0, 2, 1, 1, 2, 1, 0, 2, 1, 1, 0, 1, 0, 1, 2, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 2, 2, 2], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [1, 1, 2, 2, 1, 0, 4, 0, 5, 5, 5, 5, 5, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [4, 4, 1, 0, 2, 1, 4, 2, 2, 4, 1, 0, 1, 2, 1, 2, 4, 2, 1, 1, 0, 2, 4, 2, 2, 1, 2, 1, 1, 2, 2, 2, 4, 4, 1, 2, 2, 1, 2, 4, 2, 0, 4, 0, 2, 2, 2, 2, 0, 1, 4, 1, 1, 0, 0, 2, 2, 1, 0, 1, 1, 2, 4, 2, 0, 1, 4, 0, 1, 0, 1], [2, 2, 1, 0, 1, 0, 3, 2, 0, 3, 0, 2, 3], [2, 5, 1], [1, 0, 2, 1, 0, 2, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 0, 1, 2, 2, 2, 2, 0, 2, 2], [2, 3, 0, 0, 2, 3, 1, 1, 0, 2, 3, 3, 3, 2, 1, 3, 3, 1, 3, 3, 2, 1], [12, 21, 14], [2, 9, 24, 18, 11], [8, 1, 9, 3, 6, 3], [14, 12, 9, 1, 19, 9, 27, 25, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 0, 1, 0, 0, 0, 1, 9, 1, 5, 3, 3, 0, 2, 38, 38, 41, 0, 163, 45, 39, 21, 24, 16, 21, 0, 71, 13, 3, 25, 21, 3, 4, 5, 9], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( int(1.0) * i1 ) != min(saveOrd(\"\"8\"\".capitalize().capitalize()), ( ( len(s1) + int(6.0) ) * int(5.0) )):{:\\ns1 = \"\"+\"\"[:( max(abs(saveOrd(saveChr(len(getCharFromString(\"\"M\"\", i0)[min(mod(int(4.0),i1), i1):][len(s2):len(\"\"V\"\")])))), saveOrd(\"\"1\"\"[:i1])) - saveOrd(saveChr(( i1 - i0 ))[i0:int(9.0)]) )]\\ns2 = \"\")\"\"[i0:]\\n:}else:{:\\nloopBreak% = 0\\nwhile ( ( \"\"c\"\".startswith(s1) and getCharFromString(\"\"j\"\"[int(0.0):i2][len(\"\"O\"\"[:i1]):], int(5.0))[i1:min(int(3.0), int(2.0))].endswith(\"\"9\"\") ) or ( \"\"&\"\".capitalize().strip()[( i1 * divInt(i2,mod(mod(( int(0.0) - divInt(( int(7.0) + abs(int(2.0)) ),int(2.0)) ),int(6.0)),mod(i1,int(7.0)))) ):][int(5.0):][saveOrd(\"\"\\\\\\n\"\"[:int(4.0)][i1:int(9.0)]):int(3.0)] == getCharFromString(s0[len(in1.strip(s0[int(4.0):][i2:][:int(4.0)][len(\"\":\"\"):divInt(divInt(divInt(int(8.0),( int(9.0) * int(6.0) )),divInt(len(getCharFromString(\"\"3\"\", i1)),abs(( int(4.0) - i0 )))),min(( i2 - int(3.0) ), ( divInt(( i2 + i2 ),( i2 - i1 )) + ( int(0.0) - divInt(( i0 * mod(int(0.0),saveOrd(\"\"y\"\")) ),saveOrd(in2)) ) )))])):min(i0, ( abs(i0) - int(7.0) ))], ( i1 - max(max(i1, abs(i2)), int(1.0)) ))[:i2] or in2 in \"\"&\"\"[int(0.0):][( min(i2, abs(divInt(saveOrd(in2),i0))) - divInt(i0,divInt(saveOrd(\"\"\\\\\\\\\"\"),divInt(divInt(int(8.0),( divInt(divInt(divInt(divInt(i1,mod(i0,saveOrd(\"\"s\"\"))),max(int(6.0), i0)),int(0.0)),( i0 - abs(i1) )) + int(5.0) )),i1))) ):] ) ):{:\\nif in2[divInt(min(saveOrd(\"\"@\"\"), int(7.0)),len(in2.rstrip())):].capitalize()[min(int(3.0), int(6.0)):i0].endswith(\"\"\"\\\\\"\"\"):{:\\ns2 = in0\\n:}else:{:\\nin2 = \"\"6\"\"\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [2, 0, 1, 2, 2, 1, 2, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 0], [1, 2, 2, 1, 1, 1, 2, 0], [1, 0, 1, 2, 0, 2, 1, 1, 1, 2], [0], [0, 0, 0, 0, 0, 0], [], [], [1, 1, 3], [2, 5, 5, 2, 3, 3, 0], [1, 0, 1, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2], [0, 0, 0, 0, 0, 0, 0], [0, 2], [3, 1, 1, 0], [1, 0], [0, 1], [1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 5, 1, 4, 8, 3, 2, 1, 9, 3, 6, 5, 0, 6, 3, 9, 6, 3, 3], [0, 0, 1, 1, 0, 0, 2, 2, 2, 1, 0, 0, 2, 1, 1, 1, 0, 1, 2, 2, 2, 0, 2, 2, 1], [0, 0, 1, 1, 1], [2, 1, 1, 0, 3, 1, 2, 3, 3, 2, 0, 1, 1, 0, 1, 3, 0, 0, 2, 1, 2, 2, 0, 3, 1, 0, 0, 3, 2, 3, 0, 1, 1, 1, 3, 0, 1, 3, 3, 2, 3, 0, 0, 3, 3, 1, 2, 0, 0, 0, 0, 1, 2, 2, 0, 1, 2, 3, 3, 1, 3, 0, 2, 0, 0], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1], [3, 4, 2, 4, 2, 4, 0, 1, 3, 4, 2, 3, 4, 2, 0, 3], [1, 0, 0, 0, 0, 0, 1, 2, 0], [1, 0, 1, 0, 0, 0, 0, 0], [5, 1, 1, 2, 4, 2, 5, 3, 2, 5, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [1, 0, 4, 2, 1, 4, 1, 4, 3, 1, 0, 1, 4, 2, 1, 1, 2, 2, 0, 0, 0, 1, 1], [2, 3, 1, 0], [1], [0, 1, 0, 0], [1, 1, 0, 3, 2, 3, 1, 0, 3], [2, 13], [11, 2, 19], [4], [17, 26, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 7, 9, 0, 5, 0, 0, 3, 6, 11, 6, 1, 4, 1, 2, 4, 18, 18, 21, 5, 51, 9, 13, 7, 5, 7, 7, 0, 21, 4, 1, 4, 7, 1, 3, 1, 2], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif mod(int(4.0),int(2.0)) == i0:{:\\ni0 = len(\"\"l\"\")\\n:}else:{:\\nb1 = ( int(5.0) != divInt(saveOrd(in2),abs(mod(i1,int(1.0)))) or True )\\nloopBreak% = 0\\nwhile int(4.0) != i1:{:\\nloopBreak% = 0\\nwhile int(832.0) == saveOrd(\"\"c\"\"[i0:i0].capitalize()):{:\\ni2 = ( int(1936.0) - divInt(( i2 + abs(int(5.0)) ),i2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif False:{:\\nif \"\"C\"\".rstrip() in saveChr(i1):{:\\nif b1:{:\\nloopBreak% = 0\\nwhile saveOrd((\"\".\"\" + s1)) \\ge divInt(min(i0, int(0.0)),int(6.0)):{:\\ns1 = \"\"4\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = int(3.0) \\ge max(i0, int(9.0))\\ns2 = getCharFromString(\"\"[\"\"[:len(\"\"t\"\")], saveOrd(in1[( abs(i2) + i1 ):len(s2)][saveOrd(in2):int(6.0)]))\\ni1 += ( i1 + i0 )\\n:}\\ni1 += i2\\n:}\\n:}else:{:\\ni2 -= i2\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [1, 2, 2, 1, 1, 0], [0, 2], [0, 1, 0, 1], [0], [0], [], [], [2, 2], [0], [1, 2, 0], [0], [3], [1], [], [1], [], [1, 1, 1, 1], [0, 5, 7, 0], [1, 1, 1, 0, 0], [1, 1], [3, 1, 2, 0, 1, 2, 3, 0, 3, 1, 0, 1], [0, 1], [1, 4, 4], [0, 2, 2], [0], [0, 1, 4, 0, 0], [1], [0], [4, 4, 0, 0, 1, 0, 2, 0], [1, 3], [3], [2], [0], [19], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 1, 0, 0, 2, 1, 3, 1, 1, 1, 0, 1, 0, 4, 4, 5, 2, 12, 2, 3, 3, 1, 5, 1, 1, 8, 2, 1, 1, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(int(0.0), ( i1 + int(5.0) )) \\l divInt(saveOrd(saveChr(i1)),saveOrd(s0.lstrip(s1)))\\nloopBreak% = 0\\nfor in1 in \"\"T\"\":{:\\nloopBreak% = 0\\nwhile s0 != s0[int(7.0):]:{:\\ni1 *= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = False\\ni0 *= int(0.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [4, 3, 8, 6, 9, 8, 9, 9, 5, 7], [0, 2, 2, 1, 1, 0, 0, 2, 2], [0], [2, 2, 0, 3, 2, 2, 3, 3, 2, 3, 0, 0, 1, 2, 1, 2, 0, 3, 3, 1, 1, 3, 3, 0, 2, 2, 2, 2, 0, 1, 0, 1, 3, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 4, 0, 2, 2, 1, 1, 4, 0], [0, 2, 1, 2, 2], [1, 1, 0, 0, 0, 0], [], [1, 0, 0, 1], [], [1, 1], [], [], [], [2, 3, 2, 0], [17], [], [7, 2], [21]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 1, 35, 11, 9, 5, 6, 0, 4, 0, 2, 0, 0, 0, 4, 1, 0, 2, 1], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( ( i2 + min(( ( saveOrd(\"\"7\"\") * min(mod(abs(i2),i1), int(4.0)) ) - mod(int(38.0),divInt(i1,abs(max(int(6.0), int(98.0))))) ), max(saveOrd(\"\"<2R\"\"), i0)) ) * divInt(( divInt(divInt(i0,int(9.0)),i2) * int(9.0) ),min(i2, int(5.0))) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 0, 1], [], [2, 2, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [], [0], [], [], [], [], [1, 5, 3, 3], [1], [], [0, 1, 4, 4], [2, 1], [], [], [0], [23], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 1, 0, 4, 2, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\nin0 = \"\"X\"\"\\nin0 = saveChr(i2).capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [1, 0, 2, 0], [2], [1, 0, 1], [], [0, 0], [], [], [0, 3], [], [0, 0], [], [], [1, 0], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 9, 3, 9, 3, 6, 1], [2, 2, 2, 1, 2, 1], [0, 1], [3, 1, 1, 2, 3, 2, 1, 0, 2, 2, 0, 1, 1, 0, 3, 2, 0, 1, 3], [0, 0, 0, 1, 0], [4, 1, 4, 4], [1, 0, 0, 2, 0], [1], [5], [1], [], [2, 2, 2, 2, 0, 4, 1], [1], [], [1, 2, 1, 2], [1], [], [23], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 1, 0, 6, 6, 6, 2, 19, 5, 4, 5, 1, 1, 1, 0, 7, 1, 0, 4, 1, 0, 1, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = saveOrd(in2[int(9.0):][:int(7.0)][( max(( int(9.0) - i2 ), ( mod(i2,int(3.0)) + int(9.0) )) + i1 ):][:saveOrd(saveChr(( i2 * int(3.0) )))])\\nb0 = False\\nloopBreak% = 0\\nwhile res0:{:\\ni1 += saveOrd(\"\"x\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 2, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 1, 2, 2, 1, 0, 1], [1, 0, 1, 2, 0, 0, 1, 2, 2, 1, 0, 2], [0, 1, 0, 2, 0, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0], [], [], [3, 1, 3, 2, 3], [1, 4, 0, 1], [1, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 2], [0, 0, 0, 0], [5, 2, 0, 1], [1, 3, 3, 0], [1], [1], [1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 6, 8, 8, 7, 0, 6, 7, 3, 0, 1, 7, 4, 5, 4, 6, 0, 4, 6, 4, 0, 0, 5, 9, 6, 5, 9, 1, 5, 5, 6, 4, 6, 1, 5, 6, 3, 2, 1, 9], [1, 2, 1, 2, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 1, 0, 1, 2, 1, 0, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 1, 1, 2, 0, 1, 1, 2, 1, 1, 1], [1, 0, 0], [2, 3, 2, 1, 2, 1, 1, 2, 3, 2, 3, 3, 3, 2, 2, 1, 3, 0, 3, 2, 1, 2, 0, 3, 3, 0, 3, 2, 2, 1, 1, 1, 2, 1, 3, 0, 3, 1, 0, 0, 2, 2, 3, 3, 0, 0, 1, 0, 2, 2, 2, 3, 2, 1, 0, 1, 1, 3, 3, 0, 3, 3, 1, 0, 3, 0, 1, 2, 3, 1, 0, 2, 2, 3, 0, 1, 2, 1, 0, 3, 0, 1, 3, 2, 1, 3, 0, 0, 2, 3, 3, 2, 2, 3, 0, 3, 0, 1, 2, 1, 2, 0, 1, 0, 0, 2, 1, 1, 2, 1, 1, 3, 3, 2, 1, 3, 3, 2, 2, 0, 0, 1, 2, 2, 2, 2, 0, 2, 2, 1, 3, 2, 2, 3, 0, 3, 2, 2, 1, 1, 1, 1, 0, 2, 0, 3, 1, 0, 1, 1, 2, 0, 3, 0, 0, 1, 0, 3, 0, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0], [3, 0, 1, 1, 3, 2, 4, 4, 1, 1, 3, 4, 3, 1, 1, 3, 0, 2, 3, 1, 1, 2, 0, 1, 0, 2, 2, 3, 4, 0, 3, 0, 0, 3, 4, 4, 3, 2, 1], [0, 1, 0, 2, 2, 2, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 1, 1, 0, 0, 0, 2, 2], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [5, 5, 2, 0, 0, 5, 3, 1, 1, 4, 2, 1, 1, 4, 4, 4, 4, 4, 5, 0, 5, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 1, 4, 0, 2, 0, 4, 1, 4, 4, 2, 1, 2, 1, 1, 4, 0, 1, 1, 2, 0, 1, 1, 1, 0, 4, 4, 1, 0, 0, 4, 1, 0, 1, 3, 1, 4, 3, 2, 2, 0, 0, 2, 0, 2, 0, 1, 2, 2, 2, 4, 0, 2, 0, 2, 1, 0, 1, 4, 4, 1, 0], [3, 0, 0, 3, 3, 3, 3, 0, 1, 2, 1, 2], [3, 5, 3, 2, 4], [2, 0, 2, 0, 1, 1, 2, 2, 1, 2, 2, 0, 0, 0, 1], [2, 3, 1, 1, 0, 0, 0, 1, 1, 2, 3, 0, 1, 1, 1, 2, 2], [20, 1, 18, 18], [22, 2, 12, 11, 23, 24, 4], [1, 2, 4, 5], [18, 31, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 14, 14, 8, 6, 3, 3, 0, 0, 3, 4, 8, 4, 3, 1, 0, 1, 3, 41, 41, 38, 2, 161, 45, 39, 23, 23, 19, 16, 3, 56, 10, 5, 13, 16, 4, 7, 3, 2], "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( len(in2) + ( int(3.0) - ( int(6.0) + int(6.0) ) ) ) \\g ( min(mod(max(max(len(\"\"1\"\"), mod(( int(8.0) * abs(i1) ),saveOrd(in2.lstrip(s2[( int(8.0) * ( i2 * saveOrd(getCharFromString(\"\"/\"\", max(i1, max(divInt(( int(7.0) + int(0.0) ),int(6.0)), mod(int(7.0),len(getCharFromString(\"\"w\"\"[i2:saveOrd(\"\"c\"\"[int(3.0):])].strip(\"\"U\"\"), i2))))))) ) ):])))), i2),mod(divInt(len(s0.lstrip(\"\"B\"\")),max(i1, i0)),int(0.0))), i0) + divInt(divInt(( max(( int(1.0) - i2 ), int(7.0)) - int(4.0) ),len(\"\"S\"\")),min(i1, abs(len(s0[int(5.0):i1])))) ):{:\\nloopBreak% = 0\\nfor in2 in \"\"m\"\":{:\\nif \"\"l\"\".endswith(\"\"2\"\"):{:\\nloopBreak% = 0\\nwhile max(i0, int(4.0)) \\le ( max(int(6.0), i0) * mod(mod(abs(i1),int(0.0)),( int(4.0) + i0 )) ):{:\\nloopBreak% = 0\\nfor in0 in s1:{:\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni1 *= min(i2, int(6.0))\\n:}\\nloopBreak% = 0\\nfor s1 in \"\"`\"\".rstrip(in1).strip():{:\\nb1 = max(( int(4.0) + min(i1, i0) ), mod(abs(abs(mod(( len(s2) + i2 ),saveOrd(getCharFromString(\"\"S\"\", i2))))),int(0.0))) \\l mod(int(0.0),mod(i0,int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif s1 == \"\"x\"\":{:\\ns1 = (\"\"y\"\" + saveChr(i1))\\n:}else:{:\\nloopBreak% = 0\\nwhile i1 \\g divInt(int(9.0),int(6.0)):{:\\nres0 = (in1[:( int(5.0) * int(9.0) )][:min(len(in1), divInt(int(1.0),min(min(mod(divInt(i1,i0),int(5.0)), ( divInt(( mod(i2,( mod(int(5.0),len(in1[divInt(mod(saveOrd(in1[i2:]),saveOrd(\"\"e\"\")),( ( int(6.0) - int(4.0) ) - int(6.0) )):])) + int(1.0) )) + i0 ),( i1 + len(in1.capitalize()[int(5.0):][i1:][:int(6.0)]) )) * int(3.0) )), ( i2 * abs(i0) ))))] + in2[i1:int(2.0)]) in \"\"4\"\"[i1:max(i2, int(1.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 = int(9.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0], [0], [2, 1], [0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [3, 5, 1], [0, 1, 0], [0], [2, 2, 3, 2, 0, 1, 1, 1, 0], [1, 1, 1], [4], [], [1, 0, 1], [1, 1, 3], [0, 1, 1], [0], [1, 4, 1, 4, 4, 0], [2, 0, 2], [], [], [0, 0, 0], [7, 8, 12], [20], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 1, 3, 1, 0, 0, 3, 3, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in \"\"HI\"\":{:\\ns1 = \"\"M\"\".capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1], [2, 2, 1, 1, 1, 0, 1], [1, 1], [0, 2, 2, 1, 2], [], [0], [], [], [2], [1], [0, 2, 1, 2], [0], [0, 0], [2], [], [], [1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [8, 7, 8, 6, 2, 1, 8, 5, 4, 3, 9, 9], [1, 2, 1, 1, 0, 1, 1, 1, 2, 2], [1], [3, 2, 3, 0, 3, 1, 0, 1, 0, 2, 2, 2, 1, 3, 0, 0, 1, 0, 0, 1, 3, 3, 3, 0, 3, 0, 3, 1, 2, 1, 3, 1], [1, 0, 1, 0, 1], [3, 4, 3, 4, 4, 2, 2, 2, 4, 2], [0, 1, 1], [1, 0, 1], [1, 4, 4, 5, 3, 2, 2, 1, 5, 0, 2, 2, 0, 3, 1], [1, 1, 1], [], [2, 2, 0, 0, 0, 0, 0, 0, 1, 4, 2, 0, 2, 3, 2, 3, 1, 2, 2, 0, 4, 3, 4, 2, 0, 3, 0, 2, 4, 4, 1, 0, 4, 0], [3, 1, 0, 0, 2, 1], [0], [1, 1, 0, 1, 2, 2, 2, 0, 1], [3, 1, 0], [11], [5], [], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 0, 1, 0, 0, 1, 1, 4, 1, 2, 1, 0, 0, 2, 12, 12, 10, 1, 32, 5, 10, 3, 3, 15, 3, 0, 34, 6, 1, 9, 3, 1, 1, 0, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not s1[:len(in1)][:mod(saveOrd(in1),i1)] in in2:{:\\nif len(in0) \\g int(8.0):{:\\nb2 = s2 in \"\"\\\\\\t\"\"\\n:}\\n:}else:{:\\ns2 = s1[i2:int(78.0)].lstrip()\\nin2 = ((\"\"f\"\" + s0[i1:][( divInt(( int(6.0) + saveOrd(saveChr(i1)) ),i0) - int(2.0) ):])[i1:] + (getCharFromString(s2[i1:int(1.0)], saveOrd((s2 + getCharFromString(\"\"L\"\".capitalize(), abs(abs(i1)))[:abs(i2)]))) + s0))[:saveOrd(saveChr(int(8.0)))]\\ni2 -= mod(int(5.0),abs(int(4399.0)))\\nin0 = s1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [2], [0, 1, 2], [0], [2, 0], [3], [0], [], [], [1, 1, 1, 0, 0, 1], [5, 7, 5, 2, 7, 1], [2, 2, 1, 0, 1, 2, 1, 0], [], [2, 3, 0, 2, 3, 0, 3, 0, 2, 2, 2, 1, 0, 1, 1, 3, 2, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1], [2, 2, 2, 1], [0, 2, 1], [0, 0, 1], [], [1, 1, 1, 1, 1], [], [4, 1, 4, 2, 1, 2, 4, 2, 4, 0, 4, 1], [0, 0, 3, 2, 3], [4, 0], [2, 0], [0, 2, 1, 3, 0], [0, 11], [23], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 6, 6, 8, 0, 22, 6, 4, 3, 3, 0, 2, 0, 5, 2, 0, 1, 2, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( divInt(abs(i2),( abs(i2) + abs(i1) )) == divInt(( ( int(5.0) * i0 ) - int(7.0) ),int(5.0)) and getCharFromString(\"\"A\"\", max(mod(i1,i2), i1)) == getCharFromString(\"\"3\"\"[int(271.0):], i0) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [1], [0, 2], [], [0], [], [], [2], [1], [0, 2, 1], [0], [0], [2], [], [], [1], [], [], [1, 2], [], [3, 0, 3, 0], [], [3, 4], [], [], [1, 1, 1, 5, 3, 2], [1], [], [2, 1, 0, 0, 0, 0, 0], [], [], [1, 1], [3], [], [], [], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 1, 0, 6, 0, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not \"\"*\"\"[:len(s1)] in s1:{:\\nb2 = i1 \\g saveOrd(s1)\\n:}else:{:\\nin2 = in0\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [4], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1], [4, 3, 2, 4, 1, 1, 8, 3, 4, 0, 6, 3, 4, 8, 7, 2, 8, 4, 7, 6, 8, 9, 2, 7, 6, 2, 4, 5], [0, 2, 0, 2, 1, 1, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2], [0], [2, 1, 3, 2, 3, 2, 3, 2, 0, 2, 3, 3, 0, 0, 2, 3, 3, 0, 1, 3, 2, 2, 3, 2, 0, 0, 3, 0, 1, 2, 2, 0, 3, 1, 0, 1, 2, 0, 0, 1, 1, 2, 1, 3, 0, 2, 3, 1, 2, 0, 2, 2, 0, 0, 2, 1, 0, 2, 0, 0, 3, 3, 1, 2, 1, 1, 2, 3, 3, 3, 3, 0, 3, 1, 3, 0, 2, 1, 1], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0], [1, 1, 2, 0, 2, 1, 4, 1, 3, 4, 4, 0, 3, 2, 0, 1, 4, 4, 4, 0, 0], [0, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0], [5, 2, 2, 4, 1, 0, 5], [1], [], [4, 4, 4, 1, 0, 4, 2, 4, 4, 0, 2, 4, 0, 0, 4, 3, 4, 0, 0, 0], [0, 0, 2, 1, 0, 0, 2, 2, 0], [], [0, 0], [1], [], [10], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 28, 28, 20, 0, 79, 22, 21, 11, 11, 7, 1, 0, 20, 9, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = mod(int(4.0),max(( max(mod(abs(mod(i0,( min(abs(i2), i0) + mod(max(saveOrd(getCharFromString(getCharFromString(\"\"k\"\".capitalize(), i2), int(3.0))), max(divInt(( len(in2) - ( i1 * i1 ) ),saveOrd(saveChr(i2))), int(2.0))),mod(( i1 - saveOrd(getCharFromString(getCharFromString(s2, int(4.0)), i1)[int(1.0):( i1 - i1 )]) ),int(1.0))) ))),int(8.0)), ( int(3.0) - min(i0, divInt(len(s2.capitalize()[int(4.0):divInt(i1,( divInt(i0,i1) * mod(int(06.0),i0) ))]),( i0 * i1 ))) )) - abs(min(int(3487.0), ( int(28.0) - int(4.0) ))) ), divInt(max(saveOrd(in1), saveOrd((getCharFromString(s1, saveOrd(s0)) + in2).capitalize())),i0))) \\le min(int(76.0), min(i2, ( int(892.0) * int(76245.0) )))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [1], [1, 1], [], [0], [], [], [], [2], [1], [0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 5, 1, 1, 9, 6, 6, 1, 2, 2, 0, 4, 7, 3, 2, 0, 0], [0, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 0], [0, 1], [1, 2, 3, 2, 1, 3, 1, 2, 1, 3, 3, 0, 0, 3, 1, 0, 2, 1, 0, 2, 2, 3, 2, 1, 3, 2, 2, 1, 3, 0, 2, 2, 2, 3, 0, 1, 1, 3, 3, 2, 0, 0, 3, 1, 2, 1, 0, 2, 1, 3, 3, 2, 1, 0, 3, 2, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0], [0, 3, 4, 2, 4, 1, 4, 1, 0, 2, 2, 0, 3, 1, 1], [1, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0], [1, 1, 1, 1, 0, 1, 1], [3, 1], [1, 1], [], [2, 0, 4, 1, 4, 2, 2, 1, 4, 0, 4, 4], [2, 0, 1, 3, 3, 1], [0, 2], [1, 1, 1], [1, 3], [], [17], [], [5]], "fitness": 9223372036854775807, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(4.0) == ( min(( int(9.0) - len(in0[:int(5.0)]) ), ( int(1.0) + saveOrd(\"\"r\"\".capitalize()) )) * abs(i0) ):{:\\ni1 = i2\\n:}\\ni2 += saveOrd(getCharFromString(\"\"\"\"\"[:int(1.0)][:i2], mod(int(9.0),i1)))\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 6, 6, 6, 2, 19, 4, 5, 4, 1, 1, 2, 0, 8, 2, 0, 3, 2, 0, 1, 0, 1]}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4, 1], [1], [0], [1], [], [], [], [0], [18], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"S\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 1], [2, 2, 0, 1, 0, 0], [1, 0], [1, 0, 1, 0], [0], [0, 0, 0], [], [], [2, 1], [], [0, 2, 2], [], [0, 5], [1], [], [0], [1], [1, 1, 1, 1, 1, 1, 0, 0, 1], [6, 4, 8, 3, 9, 1, 7, 8, 6], [1, 0, 2, 0, 2, 1, 0, 1, 2], [1, 1, 0], [2, 3, 0, 2, 2, 2, 2, 2, 2, 3, 1, 3, 3, 0, 0, 2, 0, 0, 1, 0, 1, 0, 1, 2, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0], [2, 4, 3, 2], [1, 1, 0, 2, 1, 2, 2], [0, 0, 0, 0], [4, 3, 2, 4, 0, 5, 0, 1], [0, 1], [0], [0, 0, 0, 4, 0, 0, 4, 2, 0, 2, 4, 3, 0, 1], [0, 3, 1], [5], [0, 1], [2, 0], [9], [], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 3, 0, 0, 2, 0, 3, 0, 2, 1, 0, 1, 1, 9, 9, 9, 2, 27, 9, 4, 7, 4, 8, 2, 1, 14, 3, 1, 2, 2, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif True:{:\\nloopBreak% = 0\\nfor in1 in in0:{:\\ni1 -= ( abs(i0) - divInt(divInt(divInt(( ( divInt(saveOrd(s2),int(6.0)) + len(in1) ) * abs(i2) ),i0),( i2 - i1 )),int(4.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = getCharFromString(s0, i0) in in2\\n:}else:{:\\ni1 *= int(8.0)\\nb1 = s0[i2:int(3.0)].strip(saveChr(( int(9.0) * int(1.0) ))[:int(786.0)]).endswith((s1 + \"\"9J\"\"))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [1], [], [5, 5, 2], [0, 0, 0, 0, 1], [], [0, 1], [], [], [], [0, 1, 0, 2, 0], [23, 3, 21], [19], [2], []], "fitness": 9223372036854775807, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\ns2 = \"\"XtD2V\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 0, 2, 0, 0, 0, 5, 3, 1, 1, 0]}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 5], [1], [], [0, 1, 1], [], [], [], [], [5, 0, 2], [1, 1], [], [3, 4, 4, 2, 0, 3, 1, 2, 0, 1], [3, 0], [5], [2, 1], [0, 0], [17, 18], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 0, 0, 0, 3, 2, 0, 10, 2, 1, 2, 2, 2, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (getCharFromString(s0[i1:], int(4.0)).strip((\"\"R\"\" + s2[:int(5.0)])) + \"\"S\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 2, 1, 1, 2, 0, 0, 0, 2, 2, 0, 1, 1, 2, 1, 1, 0], [2, 0, 2, 0, 2], [2, 1, 2, 1, 0, 2, 2, 0, 2, 0, 1, 1], [0, 0], [0, 0, 0, 0, 0, 0], [], [], [1, 2, 1], [2, 4], [2, 1, 1, 2, 2, 0, 2], [0, 0], [0, 4, 3, 0], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 7, 5, 0, 2, 4, 8, 5, 0, 2, 3, 1, 4, 0, 8, 9, 1, 3, 5, 8, 9, 8, 5, 1, 5, 8, 0, 9, 9, 9, 8, 0, 0, 6, 8, 8, 0, 8, 7, 7, 0, 0, 3, 7, 0, 1, 9, 1, 8, 6, 2, 0, 3, 8, 9, 4, 9, 7, 6, 2, 9, 7, 4, 2, 8, 4, 0, 9, 2, 2, 2, 8, 7, 5, 7, 7, 6, 5, 5, 5, 3, 8, 7, 2, 3, 2, 7, 3, 6, 9, 8, 3, 4, 1, 1, 7, 0, 4, 3, 7, 4, 4, 9, 6, 5, 0, 4, 0, 2, 8, 2, 8, 1], [0, 0, 1, 1, 0, 1, 1, 1, 2, 0, 0, 2, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 2, 2, 0, 1, 2, 2, 1, 2, 1, 2, 0, 1, 2, 2, 2, 1, 0, 1, 0, 1, 2, 2, 1, 1, 0, 1, 2, 0, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0], [0, 0, 1, 0], [2, 2, 2, 3, 1, 1, 0, 2, 0, 1, 3, 2, 1, 2, 2, 1, 3, 2, 0, 0, 3, 0, 0, 2, 1, 0, 2, 2, 1, 0, 1, 3, 1, 0, 1, 0, 2, 2, 3, 2, 0, 2, 1, 2, 2, 2, 1, 3, 1, 3, 3, 1, 0, 1, 2, 0, 2, 3, 1, 3, 3, 3, 1, 3, 3, 3, 1, 2, 1, 2, 2, 0, 1, 0, 1, 0, 1, 2, 2, 1, 2, 3, 1, 3, 0, 1, 0, 1, 2, 2, 2, 3, 0, 0, 1, 3, 2, 1, 1, 2, 2, 2, 2, 2, 0, 3, 2, 1, 3, 3, 3, 1, 1, 0, 0, 1, 0, 1, 0, 2, 3, 1, 1, 1, 0, 3, 2, 0, 1, 0, 3, 0, 0, 2, 1, 2, 3, 2, 2, 2, 0, 3, 1, 1, 2, 1, 2, 2, 2, 3, 2, 2, 1, 1, 0, 3, 1, 2, 0, 0, 0, 3, 3, 1, 0, 1, 0, 1, 2, 0, 2, 3, 3, 3, 3, 3, 1, 3, 1, 0, 0, 0, 3, 0, 1, 3, 1, 2, 0, 1, 1, 3, 3, 0, 2, 1, 1, 2, 3, 1, 3, 3, 2, 3, 0, 2, 3, 3, 1, 2, 0, 2, 0, 2, 0, 0, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 2, 1, 0, 2, 1, 3, 3, 0, 2, 1, 1, 3, 3, 2, 3, 0, 2, 0, 1, 2, 3, 2, 0, 3, 0, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 3, 2, 3, 1, 1, 2, 0, 3, 0, 3, 3, 3, 2, 2, 1, 1, 2, 3, 2, 3, 2, 2, 1, 3, 3, 3, 3, 2, 1, 3, 2, 3, 2, 0, 3, 3, 3, 0, 0, 3, 0, 1, 0, 2, 3, 3, 3, 3, 2, 0, 0, 3, 3, 0, 3, 1, 0, 0, 2, 1, 1, 0, 2, 2, 3, 2, 2, 2, 1, 3, 1, 0, 2, 3, 1, 1, 0, 1, 2, 1, 1, 1, 2, 1, 2, 1, 3, 0, 1, 1, 1, 2, 3, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 1, 1, 0, 0, 3, 2, 2, 1, 1, 3, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [3, 1, 2, 3, 1, 3, 0, 3, 4, 1, 0, 2, 0, 2, 2, 2, 4, 2, 0, 2, 1, 1, 3, 2, 3, 1, 3, 2, 0, 0, 4, 0, 3, 1, 2, 3, 3, 2, 4, 4, 3, 0, 1, 2, 1, 3, 1, 1, 2, 0, 0, 1, 2, 2, 1, 4, 0, 4, 3, 3, 1, 1, 3, 4, 1, 3, 3, 1, 4, 2, 3, 3, 2, 0, 2, 4, 3, 1, 2, 4, 1, 2, 1, 0, 3, 4, 0, 2, 1, 0, 2, 3, 0, 4], [1, 2, 1, 1, 0, 2, 1, 1, 2, 0, 1, 1, 1, 0, 1, 0, 0, 2, 0, 0, 0, 2, 1, 2, 0, 1, 1, 2, 2, 0, 1, 1, 2, 0, 1, 2, 0, 0, 2, 1, 0, 2, 0, 0, 2, 0, 2, 2, 0, 0, 0], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0], [2, 3, 4, 1, 0, 3, 3, 0, 5, 4, 1, 3, 2, 0, 2, 2, 1, 4, 3, 4, 1, 3, 5, 1, 4, 0, 3, 5, 0, 0, 2, 2, 1, 2, 3, 1, 2], [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [4, 4, 2, 4, 2, 0, 4, 4, 0, 4, 0, 4, 1, 0, 4, 0, 4, 1, 3, 0, 3, 3, 0, 3, 2, 4, 0, 0, 1, 0, 1, 2, 0, 1, 0, 3, 2, 1, 2, 2, 0, 1, 2, 1, 0, 1, 2, 4, 2, 2, 0, 3, 2, 2, 2, 2, 2, 0, 0, 2, 1, 2, 1, 0, 2, 3, 4, 1, 0, 4, 4, 4, 0, 4, 4, 4, 2, 2, 4, 0, 1, 2, 2, 4, 0, 2, 0, 0, 1, 2, 2, 4, 0, 2, 1, 0, 4, 4, 2, 2, 2, 1, 2, 1, 2, 4, 4, 0, 2, 1, 1, 1, 4, 1, 0, 2, 2, 4, 2, 4, 1, 2, 0, 2, 2, 4, 1, 2, 0], [3, 0, 3, 3, 3, 0, 3, 1, 0, 3, 3, 2, 3, 1, 1, 2, 3, 1, 1, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0], [3, 4, 0, 2, 5, 4, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 2, 1, 1, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 2, 0, 2, 2, 1, 2, 1, 2, 0, 0, 0, 1, 2, 2, 2, 1, 0, 1, 0], [0, 3, 2, 0, 0, 3, 3, 3, 0, 2, 0, 2, 2, 1, 0, 0, 0, 0, 1, 1, 3, 2, 3, 3, 3, 2], [3, 10, 1, 17, 0, 7, 1, 24, 5], [2, 18, 12], [5, 3, 5, 3, 8, 2], [0, 24, 12, 24, 4, 29, 11, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 17, 17, 5, 12, 2, 6, 0, 0, 3, 2, 7, 2, 4, 1, 0, 0, 0, 113, 113, 86, 4, 381, 104, 94, 51, 54, 37, 26, 2, 129, 29, 9, 40, 26, 9, 3, 6, 8], "tree_depth": 102, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = getCharFromString(in0[:( ( mod(len(in1.strip().lstrip()),int(9.0)) - int(7.0) ) * i0 )].rstrip(getCharFromString(s1, divInt(i0,int(5.0))))[max(( int(0.0) - divInt(( int(2.0) - abs(mod(i1,i1)) ),len(\"\"D\"\".strip(s0))) ), i0):i1], divInt(int(4.0),i1)).lstrip(saveChr(mod(( int(8.0) + i1 ),int(5.0))))\\nloopBreak% = 0\\nwhile in0 in getCharFromString(\"\"\"\", max(int(0.0), i2)):{:\\ni0 = int(2.0)\\nin0 = (s0 + ((in2 + (in1.rstrip(s1)[:i0] + \"\"5\"\")) + in0))\\nloopBreak% = 0\\nfor s2 in \"\"KB?\"\":{:\\ni2 = ( mod(len(s0[mod(i0,divInt(int(3.0),mod(( ( int(1.0) * min(int(4.0), len(\"\")\"\")) ) - saveOrd(s2) ),int(0.0)))):i2]),int(8.0)) - mod(i2,( max(int(9.0), min(abs(min(int(1.0), abs(abs(abs(int(3.0)))))), divInt(int(5.0),( mod(i2,int(8.0)) * i1 )))) + int(9.0) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = i1 == int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = (\"\"?R\"\"[divInt(mod(int(5.0),( saveOrd(s1[int(1.0):abs(i2)][:int(5.0)]) - i1 )),int(809.0)):( divInt(divInt(min(i0, i1),int(99800.0)),abs(( int(6880.0) - int(87.0) ))) - mod(divInt(( ( ( i0 + max(mod(int(7.0),max(len(\"\"3\"\"), abs(int(0.0)))), int(0.0)) ) - i1 ) + i0 ),int(37.0)),i1) )] + \"\"A\"\"[int(01.0):])\\nloopBreak% = 0\\nwhile i0 \\le ( len(in1) + int(9.0) ):{:\\nloopBreak% = 0\\nfor in0 in \"\"5\"\":{:\\nin1 = s1[int(1.0):][:int(8.0)].lstrip()[:i1]\\nb2 = (in0[:max(mod(i1,int(6.0)), i0)][:len(in2)][i1:i2][:divInt(int(2.0),( abs(divInt(divInt(divInt(i2,min(int(0.0), int(3.0))),divInt(int(8.0),mod(( ( min(divInt(mod(int(9.0),int(4.0)),i0), saveOrd(\"\"3\"\"[:int(9.0)])) * ( i1 + i2 ) ) + i2 ),min(len(\"\"c\"\"[:int(7.0)]), i1)))),int(6.0))) + i2 ))][:int(2.0)] + s1).startswith((\"\"H\"\".capitalize() + in1)[divInt(i1,( max(abs(len(saveChr(len(saveChr(abs(int(9.0))))).rstrip())), saveOrd(s0)) * int(7.0) )):i2])\\nin0 = saveChr(i0).rstrip().capitalize()\\nloopBreak% = 0\\nwhile saveChr(i1)[:saveOrd(in2)][:i2] != \"\"B\"\":{:\\nb1 = not getCharFromString(s0, int(4.0))[len(s0[int(2.0):]):divInt(i2,int(8.0))][int(4.0):] in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= min(max(i1, mod(int(0.0),int(9.0))), ( abs(int(2.0)) * max(len(\"\"Y\"\"), ( max(i0, ( max(abs(int(2.0)), ( i1 + ( i0 - divInt(i1,i2) ) )) - int(2.0) )) * i2 )) ))\\ni1 = divInt(mod(mod(( i1 * min(min(max(divInt(int(8.0),i0), ( int(7.0) + abs(abs(i1)) )), ( int(5.0) - int(7.0) )), max(saveOrd(s2.capitalize()[:( min(i2, ( i0 - int(7.0) )) * ( saveOrd(\"\"F\"\"[divInt(i2,len(s1)):]) + i2 ) )][divInt(int(6.0),int(5.0)):]), ( int(5.0) - ( int(5.0) * ( ( ( len(getCharFromString(getCharFromString(\"\"s\"\"[( max(int(3.0), int(8.0)) + ( i0 + max(i0, len(\"\"m\"\"[saveOrd(getCharFromString(saveChr(max(divInt(( int(7.0) * int(2.0) ),divInt(len(s2),mod(len(\"\"!\"\"[:divInt(( int(3.0) - max(saveOrd(\"\"8\"\"), abs(len(\"\"^\"\"))) ),divInt(int(2.0),len(saveChr(( abs(( i1 + min(abs(saveOrd(\"\"(\"\")), i1) )) * i1 )))))]),len(in0)))), i1)), int(7.0))[i1:( max(abs(saveOrd(saveChr(max(mod(i1,i1), abs(max(i1, min(int(3.0), i2)))))[i2:][( int(6.0) + int(9.0) ):])), i0) + divInt(divInt(len(getCharFromString(\"\"\"\", divInt(( ( int(8.0) * saveOrd(s1[:int(3.0)]) ) + i0 ),divInt(min(int(4.0), int(1.0)),i1)))[int(1.0):]),mod(int(7.0),int(0.0))),int(4.0)) )]):( int(3.0) * ( int(7.0) * abs(i1) ) )])) ) ):int(4.0)][int(4.0):][:int(9.0)], divInt(max(min(int(6.0), i1), abs(int(5.0))),i1)), i0)) + mod(int(0.0),len(getCharFromString(\"\"2\"\", int(4.0))[:int(0.0)][int(2.0):i0])) ) + i0 ) + min(divInt(divInt(int(8.0),int(2.0)),saveOrd(s2[i0:int(8.0)])), i2) ) ) ))) ),i2),i0),int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [1, 0, 2, 0, 0, 2, 1, 0, 0, 0], [0, 1], [2, 0, 2, 0, 2, 1, 2, 1], [0], [0, 0, 0, 0, 0, 0], [], [], [1, 3], [], [2, 2, 0], [], [5, 1], [1], [], [0], [1], [1], [0], [0, 2, 1, 1, 1, 1, 2, 2, 2, 2, 0, 1], [0, 1], [3, 3, 0, 0, 0, 3, 0, 0, 0, 1, 0, 2, 3, 0, 0, 0], [0], [2, 3, 0, 4], [1, 1], [], [4, 0, 2, 4, 0, 5, 1, 0, 1, 0, 5, 5, 5], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0], [3, 0, 4, 2, 2, 0, 1, 4, 0, 1, 1, 3, 2, 3, 0, 0, 0, 1, 2, 0, 1, 2, 4, 1, 4, 3, 0, 1], [0, 3, 2, 2], [2], [0, 0, 1, 0, 2], [0, 2, 1, 0, 0, 3, 2, 0, 0, 1, 3, 3, 0, 2], [24, 13, 12, 23, 4, 10], [7, 23], [5, 9, 6], [21, 27, 2]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 2, 8, 1, 6, 0, 0, 2, 0, 3, 0, 2, 1, 0, 1, 1, 1, 1, 12, 2, 16, 1, 4, 2, 0, 13, 14, 1, 28, 4, 1, 5, 14, 6, 2, 3, 3], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (s0 + getCharFromString(s2[abs(len(\"\"Y\"\")):i0][i2:i1], min(i1, i1)))\\nb1 = in1.strip().endswith(\"\"5h\"\")\\nloopBreak% = 0\\nfor s0 in \"\"NM<9X\"\":{:\\nin2 = ((s1 + s0)[:i1] + s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = \"\"Ex\\\\\\\\\"\" not in s0[int(0.0):i2]\\nif True:{:\\nin2 = \"\"\\\\\\t\"\"\\n:}else:{:\\ni2 = ( saveOrd(\"\"K\"\".capitalize()[i2:]) - i2 )\\nin2 = (in2 + \"\"6\"\").capitalize()\\n:}\\ni0 -= i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [4, 6, 5], [0, 0, 1, 0], [], [3, 0, 2, 1, 2, 2, 2, 1, 0, 1, 3, 0, 3, 0], [1, 1, 1, 1], [0, 4, 2], [], [0, 0, 0, 0], [2, 4, 3, 1, 3], [0, 1], [], [4, 4, 4, 0, 4, 0, 3, 0, 1], [3, 2, 0, 0], [2], [], [1, 1], [], [24, 20], [], []], "fitness": 9223372036854775807, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = getCharFromString(in1, min(i0, divInt(int(4.0),divInt(divInt(divInt(int(6.0),i0),int(5.0)),saveOrd(getCharFromString(in0, i1)))))).capitalize().strip()\\ns1 = (in0 + \"\"yu\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 12, 4, 2, 0, 4, 5, 2, 0, 9, 4, 1, 0, 2, 0, 2, 0, 0]}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 2, 0], [2, 1], [1, 1], [], [0], [], [], [], [5, 2], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [1, 5, 2, 0, 3, 4, 0, 1, 8, 1, 8, 1, 7, 8, 5, 8, 3, 8, 4, 9, 2, 4], [2, 0, 1, 0, 2, 1, 1, 1, 2, 1, 0, 1, 1, 0, 1, 2, 1, 0], [0, 1], [3, 0, 2, 3, 0, 3, 1, 2, 3, 3, 3, 1, 3, 2, 3, 3, 2, 3, 1, 3, 2, 0, 3, 2, 3, 0, 1, 1, 3, 3, 3, 1, 0, 3, 3, 2, 2, 0, 3, 3, 0, 3, 1, 3, 0, 2, 0, 1, 0, 2, 0, 2, 1, 0, 1, 2, 3, 3, 2, 0, 3, 3, 3, 2, 1, 0, 1, 1, 0, 1, 1, 3, 3, 0, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [1, 3, 2, 0, 0, 4, 0, 1, 0, 1, 3, 4, 2, 0, 2, 2, 2, 0, 4, 4, 0, 2, 0, 0, 2, 0, 0, 4, 4], [2, 2, 1, 2, 2, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0], [0, 1, 3, 0, 5], [0, 0, 0, 1], [], [2, 4, 0, 2, 0, 2, 0, 0, 4, 4, 1, 2, 0], [1, 0, 1], [], [1, 1, 2, 2], [3, 0, 3, 1], [6], [11], [], [2, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 1, 22, 22, 18, 2, 76, 14, 29, 7, 8, 5, 4, 0, 13, 3, 0, 4, 4, 1, 1, 0, 2], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(i2, ( len(saveChr(i0)[:abs(int(1.0))]) * mod(min(min(saveOrd(s0), int(5.0)), min(( max(min(divInt(max(int(2.0), len(s1[:( i1 * saveOrd(in0[( abs(i0) - int(0.0) ):]) )])),int(3.0)), min(abs(abs(int(4.0))), i2)), abs(min(( divInt(i1,saveOrd(s0)) * saveOrd(getCharFromString(saveChr(i1), min(int(0.0), abs(i1)))) ), divInt(i2,int(1.0))))) * i1 ), mod(i0,mod(int(8.0),i1)))),int(1.0)) )) != divInt(min(min(( i1 + abs(min(min(divInt(int(8.0),i0), int(1.0)), int(78.0))) ), i1), int(58.0)),int(384.0)):{:\\ni2 = saveOrd(\"\"\\\\\\tG(l\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif saveOrd(in2[i1:]) == int(92.0):{:\\ni0 -= int(4.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [7], [0], [], [0, 1], [], [], [], [], [1], [1], [], [2, 1], [1], [], [0], [0], [0], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"A\"\"[i0:int(7.0)]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 2, 0, 1, 2, 0, 2, 1, 2, 2, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 1, 0, 2, 1, 1, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 2, 1, 2, 0, 1, 2], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [1, 0, 2, 3, 1], [3, 1, 2, 3, 4], [0, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 1, 2], [0, 0, 0, 0, 0], [1, 4, 1, 2], [3, 2, 3, 1, 0, 1], [1, 1], [1, 0], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 6, 6, 3, 2, 8, 1, 0, 3, 8, 0, 5, 3, 8, 9, 4, 5, 9, 8, 1, 4, 9, 4, 6, 9, 5, 7, 0, 3, 3, 0, 9, 7, 2, 1, 4, 6, 8, 2, 9, 9, 7, 9, 3, 7, 4, 9, 3, 0, 3, 4, 9, 5, 3, 6, 2, 0], [0, 2, 2, 0, 0, 1, 0, 2, 0, 0, 1, 2, 1, 1, 0, 0, 0, 1, 2, 1, 2, 2, 0, 0, 0, 1, 1, 2, 1, 0, 2, 0, 2, 2, 2, 1, 1, 0, 2, 1, 0, 0, 2, 0, 0, 1, 1, 1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 0, 1, 0, 2, 0], [1, 1, 1, 1, 1], [0, 2, 0, 1, 2, 0, 0, 2, 3, 0, 0, 0, 3, 1, 2, 3, 0, 2, 3, 2, 2, 2, 2, 0, 0, 2, 2, 1, 3, 3, 0, 2, 0, 0, 1, 2, 2, 3, 3, 2, 3, 1, 3, 3, 3, 3, 2, 1, 1, 1, 0, 1, 3, 0, 1, 0, 1, 2, 3, 2, 1, 1, 0, 2, 1, 1, 0, 2, 1, 3, 0, 1, 2, 0, 2, 1, 1, 1, 2, 0, 2, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 3, 2, 2, 0, 1, 3, 1, 2, 0, 3, 3, 0, 0, 2, 0, 2, 2, 1, 3, 3, 3, 1, 0, 3, 1, 1, 1, 0, 0, 3, 3, 1, 2, 1, 2, 0, 0, 0, 1, 1, 1, 3, 0, 3, 1, 0, 1, 2, 3, 3, 1, 3, 0, 3, 0, 2, 1, 2, 2, 2, 0, 1, 3, 0, 0, 1, 2, 0, 2, 0, 1, 3, 2, 2, 3, 1, 1, 2, 3, 2, 1, 2, 1, 1, 1, 3, 2, 0, 2, 2, 2, 1, 0, 0, 2, 2, 2, 3, 1, 0, 2, 3, 1, 2, 0, 2, 0, 3, 3, 1, 2, 2, 3, 2, 1, 3, 1, 0, 3, 3, 1, 3, 0, 1, 0, 3, 0, 2, 3, 1, 0, 2, 0, 3, 3, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], [0, 1, 3, 0, 1, 0, 0, 3, 0, 4, 2, 2, 2, 2, 0, 4, 1, 2, 0, 1, 1, 1, 1, 3, 0, 4, 1, 4, 4, 2, 1, 4, 1, 2, 0, 3, 1, 2, 3, 1, 2, 2, 1, 2, 0, 1, 4, 2, 1, 3], [2, 2, 1, 0, 1, 2, 2, 0, 2, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 1, 1, 2, 1, 2, 2, 0, 2, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [4, 5, 4, 4, 0, 3, 5, 3, 4, 0, 2, 1, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 4, 1, 1, 4, 1, 0, 4, 4, 2, 4, 1, 2, 4, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 4, 2, 1, 4, 2, 1, 2, 2, 4, 4, 0, 0, 1, 1, 1, 2, 4, 1, 0, 4, 0, 4, 1, 1, 1, 2, 2, 0, 0, 1], [0, 0, 2, 0, 3, 0, 2, 1, 0, 2, 2, 2, 0], [3], [2, 2, 1, 0, 1, 2, 2, 2, 0, 2, 1, 1, 2, 2, 1], [0, 0, 1, 3, 3, 0, 1, 1, 2, 1, 0, 0, 0, 1, 3, 0, 1, 0, 0, 0, 1], [5, 23, 13, 21, 23, 18, 16, 10, 7, 12], [24, 6, 7, 1, 12, 18, 10], [3, 7], [2, 11, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 22, 22, 10, 12, 4, 7, 0, 0, 5, 5, 15, 5, 4, 6, 2, 2, 5, 57, 57, 62, 5, 227, 63, 50, 36, 32, 14, 21, 4, 56, 13, 1, 15, 21, 10, 7, 1, 3], "tree_depth": 71, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( \"\"F\"\" not in \"\"X\"\" or not getCharFromString(\"\"y\"\", i0).startswith(\"\"\\\\\\t\"\") )\\nloopBreak% = 0\\nfor in1 in getCharFromString(\"\"(\"\", ( i2 * int(2.0) )):{:\\ni2 *= divInt(i0,i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( in2 not in getCharFromString(\"\"N\"\".lstrip(getCharFromString(\"\"g\"\", ( min(i1, i0) - i2 ))[max(int(6.0), ( len(\"\"h\"\"[:i0]) + ( min(divInt(mod(( mod(i0,i1) - ( ( int(6.0) * max(min(i2, divInt(i1,i1)), int(3.0)) ) * ( ( min(len(\"\"3\"\"[divInt(min(int(2.0), saveOrd(\"\"b\"\")),abs(abs(abs(divInt(int(8.0),int(1.0)))))):int(0.0)]), i0) + int(3.0) ) * abs(i0) ) ) ),int(8.0)),i0), int(0.0)) - ( min(( int(5.0) - int(3.0) ), i1) * mod(int(8.0),int(9.0)) ) ) )):])[i2:], ( int(4.0) * saveOrd(\"\"V\"\"[i1:][int(5.0):][:( i2 + ( int(9.0) + int(8.0) ) )]) )).capitalize() or False )\\nif b2:{:\\ni2 += int(1.0)\\nloopBreak% = 0\\nfor in1 in \"\"X\"\"[mod(i0,mod(( int(4.0) + i0 ),int(9.0))):( i0 + ( int(4.0) + i1 ) )].capitalize()[mod(max(divInt(mod(i1,int(6.0)),abs(int(9.0))), divInt(i2,min(max(i1, i0), ( i2 * mod(divInt(int(5.0),max(max(max(int(7.0), i0), len(saveChr(int(0.0)))), int(3.0))),int(3.0)) )))),i2):]:{:\\ni2 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile min(saveOrd(\"\"S\"\"[int(0.0):]), ( int(9.0) - mod(i1,i1) )) \\ge i0:{:\\nif int(7.0) \\g int(2.0):{:\\nres0 = int(1.0) == max(i2, saveOrd(getCharFromString(in1.capitalize(), int(4.0))[:i1][:int(6.0)]))\\ns0 = in0\\n:}else:{:\\ni0 -= ( saveOrd(\"\"m\"\") - abs(int(8.0)) )\\nif max(i0, saveOrd(\"\"\"\"\")) \\ge i2:{:\\nif True:{:\\nloopBreak% = 0\\nfor in2 in \"\"Q\"\":{:\\nloopBreak% = 0\\nfor in0 in \"\"s\"\".capitalize()[divInt(int(2.0),mod(( ( i0 + int(9.0) ) + max(i0, i1) ),int(9.0))):]:{:\\nif ( i1 + mod(i1,int(7.0)) ) \\le abs(( ( min(int(9.0), int(3.0)) - mod(len(in1),( int(7.0) - divInt(int(4.0),int(9.0)) )) ) * int(3.0) )):{:\\ns0 = s2.capitalize()\\n:}else:{:\\nb1 = getCharFromString(\"\"K\"\", max(divInt(i2,mod(( ( int(0.0) - i0 ) * i2 ),divInt(divInt(mod(abs(int(3.0)),i0),mod(len(\"\"H\"\"),int(4.0))),( i2 * divInt(i2,max(abs(int(9.0)), ( divInt(abs(divInt(int(5.0),max(int(3.0), i1))),abs(min(int(6.0), max(i2, int(2.0))))) + i1 ))) )))), saveOrd(\"\"M\"\"))) == s1[:i0][( abs(int(0.0)) * i1 ):]\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 -= mod(i2,max(len(s2), i0))\\nin2 = \"\"k\"\"\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 2, 1, 2, 0], [0, 2], [1, 2, 0], [0], [0, 0], [], [], [0], [1], [2, 1], [0], [0], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 8, 4, 6, 2, 9, 6, 3, 3, 6, 3, 5, 7, 2, 3, 7, 6, 1, 1, 6, 8, 0, 2, 3, 2, 6, 5, 5, 9, 0, 1, 7, 5, 6], [1, 1, 1, 1, 2, 0, 0, 2, 0, 1, 2, 1, 2, 0, 1, 0, 1, 0, 2, 2, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 2, 2], [0], [1, 3, 1, 1, 0, 2, 2, 1, 0, 3, 3, 1, 0, 3, 1, 3, 0, 2, 0, 3, 1, 1, 0, 3, 0, 1, 1, 2, 2, 2, 1, 3, 2, 1, 2, 2, 2, 3, 0, 2, 2, 0, 0, 0, 0, 0, 2, 3, 1, 1, 3, 0, 0, 2, 2, 2, 1, 0, 2, 0, 3, 2, 3, 3, 1, 1, 3, 1, 1, 2, 1, 1, 0, 3, 1, 2, 0, 1, 2, 3, 0, 0, 3, 3, 3, 1, 2, 3, 1, 0, 2, 3, 3, 0, 0, 3, 1, 2, 0, 2, 3, 2, 3, 1, 1, 3, 0, 2, 1, 3, 0, 3, 2, 0, 0, 3, 1, 3, 2, 2, 0, 2, 3, 0, 3, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [1, 0, 0, 0, 2, 2, 0, 4, 0, 3, 3, 0, 2, 3, 1, 4, 1, 1, 4, 0, 0, 3, 1, 2, 2, 1, 3, 3, 2, 1, 2, 3, 1], [0, 1, 0, 0, 0, 2, 0, 2, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 0, 4, 5, 3, 3, 5, 4, 3, 3, 5, 1, 3, 4, 0, 2, 1, 3], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0], [4, 3, 3, 3, 0, 1, 0, 3, 3, 2, 2, 1, 2, 0, 3, 2, 1, 3, 0, 2, 0, 3, 3, 0, 4, 2, 3, 0, 1, 3, 2, 2, 2, 2, 0, 0, 4, 4, 2, 1, 2, 1, 0, 3, 4, 0, 3, 3, 1, 4, 1, 1, 4, 2, 0, 1, 1, 0, 4, 1, 4, 2, 2, 4, 2, 0, 1, 0, 0], [3, 0, 2, 2, 2, 0, 2, 0, 3, 2], [1, 5], [1, 1, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 2, 0, 1, 0], [0, 0, 1, 1, 3, 1, 3, 1, 0, 1, 3, 0, 0, 3, 2, 2, 2], [6, 10, 7, 16, 21], [16, 12, 19, 8, 19], [2, 4, 3], [29, 6, 9, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 36, 36, 34, 1, 128, 31, 33, 15, 16, 18, 17, 1, 69, 10, 2, 16, 17, 5, 5, 3, 4], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(1.0)\\nloopBreak% = 0\\nfor in0 in (((s0 + \"\"GK\"\") + in1) + ((\"\"qm\"\"[:max(int(2.0), int(5.0))][:i1] + in2[( ( int(8.0) + i1 ) - min(min(int(4.0), i1), min(int(6.0), abs(i2))) ):]) + (\"\"^\"\"[( i0 + abs(int(29.0)) ):] + (in0 + in0[int(63.0):])))).rstrip():{:\\nin2 = ((in1 + getCharFromString((in0 + \"\"t#\"\")[i0:], min(i2, int(3.0)))) + (in0[int(6.0):( mod(( int(3.0) + saveOrd(in2) ),mod(int(5.0),divInt(divInt(divInt(min(i0, mod(mod(i1,i2),i1)),i2),i0),( len(\"\"i\"\"[int(7.0):int(2.0)].capitalize().capitalize()) + len(\"\"H\"\"[i1:i0]) )))) * ( divInt(mod(int(3.0),i1),( i0 + min(( abs(len(s1)) * int(7.0) ), int(6.0)) )) - max(int(1.0), int(1.0)) ) )][:( int(6.0) - int(8.0) )][i2:][saveOrd((in0.capitalize() + ((\"\"t\"\" + getCharFromString(\"\"&\"\", int(0.0))) + \"\"Q\"\"))):] + in1[( i2 - int(23.0) ):].capitalize()))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile \"\"V\"\" in \"\"/2\"\":{:\\nb0 = ( max(i1, i0) * max(saveOrd(s0), min(int(265.0), ( min(int(5.0), i0) + mod(len(getCharFromString(\"\"4\"\", max(i0, i0))),abs(int(9.0))) ))) ) \\g ( i1 + divInt(abs(divInt(max(int(0.0), int(1.0)),len(s2[i0:divInt(int(7.0),len(\"\"3\"\"))].capitalize()[:i0][abs(mod(i2,i2)):max(int(5.0), abs(mod(divInt(i0,( len(s1) - i0 )),max(i2, int(6.0)))))].strip(in0)))),i2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [], [0, 0], [], [], [1], [3, 4], [0, 1, 0, 1], [0, 0], [3], [3, 2], [0], [], [], [0, 1, 1, 0, 1], [7, 6, 2, 1, 5], [2, 0, 2, 1], [1], [1, 1, 0, 0, 3, 0, 1], [], [3], [2], [], [2], [1], [], [2, 2, 1, 0], [0], [], [2, 1], [3], [], [], [], [21]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 2, 4, 2, 0, 2, 1, 0, 0, 5, 5, 4, 1, 7, 0, 1, 1, 0, 0, 1, 0, 3, 0, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(76.0)\\nb1 = ( int(2.0) \\ge i0 and not i2 \\le len(\"\"<\"\"[:i1][int(15.0):]) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 1], [2, 1, 1, 0, 2, 0, 0, 0, 0], [1, 0], [0, 1, 1, 0, 2, 0, 0], [0], [0, 0, 0, 0, 0], [], [], [2, 3, 1, 2, 2], [1, 2, 3, 1], [0, 1, 1, 2, 0, 1, 0, 1, 0], [0, 0, 0, 0], [4], [0, 3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 0, 0, 1, 0, 1], [1, 7, 1, 1, 1, 5, 6, 1], [2, 1, 0, 0, 2, 0, 2, 1], [1, 0], [0, 3, 0, 1, 3, 1, 2, 3, 3, 0, 1, 0, 1, 2, 0, 0, 1], [1, 1], [4, 4, 4, 2], [1], [0, 0], [5, 2, 4, 4, 2, 5, 3], [1, 0, 1], [0], [2, 0, 0, 4, 0, 0, 1, 2, 4, 0, 1], [3, 2], [1], [1, 1], [3, 1, 2], [], [1], [3], [18]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 2, 7, 1, 5, 0, 0, 5, 4, 9, 4, 1, 4, 2, 1, 1, 8, 8, 8, 2, 17, 2, 4, 1, 2, 7, 3, 1, 11, 2, 1, 2, 3, 0, 1, 1, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif b2:{:\\nres0 = i2 \\g saveOrd(in2[:i1])\\n:}else:{:\\ni0 -= int(1.0)\\ni0 = saveOrd(s2)\\nloopBreak% = 0\\nfor in1 in in1.rstrip():{:\\nb1 = int(7.0) == divInt(saveOrd(s2),abs(i2))\\nin2 = \"\"/\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = in0.capitalize()[:int(1.0)].startswith(\"\"b3\"\")\\nb2 = ( i0 \\ge int(115.0) or ( divInt(i2,i1) \\g int(61.0) and True ) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 1, 1], [2, 2, 0, 0, 2, 0], [0, 2, 2], [1, 2, 0], [0], [0, 0, 0], [], [], [3, 2], [], [0, 2, 2], [], [4, 2], [0], [], [], [], [1, 1, 1, 1], [3, 6, 5, 5], [1, 1, 1], [1], [1, 1, 1, 3, 0, 1, 0], [], [1], [0], [], [0, 4, 3, 1, 1], [1, 1, 1], [0], [1, 4, 0, 4, 1, 1, 2, 2, 0, 0], [0, 0], [], [2, 2], [1, 0, 2], [4], [21], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 3, 3, 1, 3, 0, 0, 2, 0, 3, 0, 2, 1, 0, 0, 0, 4, 4, 3, 1, 7, 0, 1, 1, 0, 5, 3, 1, 10, 2, 0, 2, 3, 1, 1, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"v\"\":{:\\nloopBreak% = 0\\nwhile res0:{:\\ni1 += int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = getCharFromString(in0, int(6.0))\\nloopBreak% = 0\\nwhile getCharFromString(\"\"E\"\", int(5.0)).startswith(\"\"9\"\"):{:\\nb2 = s1[max(i1, int(5.0)):][i1:] == s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2], [], [0], [], [], [], [], [1], [1], [], [4, 1], [2], [], [], [0], [24], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"Y\"\".capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1], [2, 1, 0, 1, 1, 1, 0], [1], [2, 0, 2, 2, 0, 1], [], [0, 0, 0, 0], [], [], [1, 1], [0], [0, 0, 1], [0], [], [1, 1], [], [1, 0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 7, 1, 1, 6, 7, 1, 8], [0, 2, 2, 2, 0, 2, 0], [0], [3, 1, 2, 2, 2, 1, 2, 1, 1, 2, 3, 0, 0, 3, 3, 2, 0, 2, 2, 1, 1, 0, 1, 1, 2, 0, 0, 1, 2, 2], [0, 0, 1, 1, 0, 1, 0, 1, 0, 0], [4, 2, 2, 3, 2], [2, 1, 0, 0, 0, 2], [1, 1, 1, 1, 1, 0], [1, 0, 1, 2, 4, 1], [1, 1, 1], [], [1, 2, 0, 4, 1, 2, 1, 0, 0], [0, 0], [], [1, 2], [0, 3, 3], [5], [], [], [8, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 2, 1, 4, 4, 2, 0, 15, 5, 4, 3, 2, 5, 3, 0, 8, 1, 0, 2, 3, 1, 0, 0, 2], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif False:{:\\ns1 = \"\"F\"\"\\nb1 = True\\n:}else:{:\\ns0 = s1[:saveOrd(getCharFromString(\"\"%\"\", int(9.0)))]\\ns2 = \"\"\\\\\\\\\"\"[( ( mod(int(2.0),mod(int(7.0),int(1.0))) * ( abs(i0) - i2 ) ) + abs(len(in1)) ):]\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 2, 1, 7, 7, 8, 6, 1, 7, 4, 8, 2, 5], [2, 2, 1], [1], [1, 1, 2, 2, 1, 3, 2, 2, 0, 0, 1, 1], [1, 1, 0, 1], [2], [1, 2], [0, 0, 1], [1, 3, 5], [0, 0, 1], [], [3, 3, 4, 1, 2, 0, 0], [0], [], [2], [1, 2, 0], [14], [16], [1], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 3, 1, 12, 4, 1, 2, 3, 3, 3, 0, 7, 1, 0, 1, 3, 1, 1, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(3.0)\\ns1 = ((getCharFromString(\"\"q1O\"\", int(2177.0)) + in0[divInt(divInt(int(86.0),abs(( mod(i2,i1) * int(1748.0) ))),int(25.0)):]) + in2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 1, 1, 2, 1], [0, 2], [2, 0, 1], [0], [0], [], [], [2], [2], [1, 2], [0], [4], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 5, 9, 4, 7, 0, 5, 3, 5, 1, 0, 8, 3, 3, 7, 3, 3, 1, 6], [0, 2, 1, 2, 1, 2, 2, 0, 0, 2, 1, 0, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 0, 2, 1, 1, 1], [1], [3, 2, 2, 0, 2, 3, 3, 2, 2, 2, 1, 0, 3, 2, 1, 1, 1, 3, 3, 1, 1, 1, 0, 1, 1, 0, 2, 0, 1, 2, 0, 0, 0, 2, 1, 0, 0, 0, 3, 3, 3, 0, 3, 2, 3, 2, 0, 3, 3, 2, 0, 2, 0, 3, 3, 0, 2, 0, 3, 3, 1, 0, 2, 0, 0, 0, 1, 0, 2, 1, 3, 1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0], [1, 1, 1, 4, 3, 4, 4, 3, 0, 4, 3, 1, 4, 3, 4, 0, 2, 3, 2], [1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [3, 2, 5, 2, 2, 2, 4, 5, 5, 5, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1], [0], [2, 4, 4, 2, 4, 4, 2, 0, 0, 1, 2, 2, 4, 2, 2, 0, 0, 2, 1, 0, 0, 0, 4, 2, 0, 4, 2, 4, 4, 4, 1, 4, 1, 4, 2, 4, 2, 1, 0, 2, 1, 2, 2, 1, 4, 1, 0, 4], [3, 0, 0, 2, 1, 2, 3, 3, 3, 3, 3, 0, 2, 2, 1, 1], [3, 3, 4, 5, 1, 3], [0, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 0, 2, 0, 1], [1, 0, 0, 0, 3, 0, 2, 3], [19, 5, 7, 2], [11], [0], [26, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 16, 16, 27, 1, 81, 21, 18, 11, 11, 12, 8, 1, 48, 15, 6, 15, 8, 4, 1, 1, 2], "tree_depth": 74, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in getCharFromString(getCharFromString(s2[:max(mod(mod(i0,mod(max(max(( divInt(mod(int(1.0),i2),saveOrd(in2)) - mod(int(8.0),int(5.0)) ), int(9.0)), len(\"\"l\"\")),saveOrd(saveChr(int(4.0))[:int(7.0)][int(0.0):]))),i1), int(5.0))].capitalize(), int(3.0))[:i2], divInt(i1,int(5.0))).lstrip(s2[:( i2 * i2 )][i0:])[( int(1.0) - i0 ):i2]:{:\\ns2 = s2\\nb2 = i1 == saveOrd(\"\"T\"\"[len(in1):])\\nloopBreak% = 0\\nwhile in2.startswith(in2):{:\\ni0 -= min(i1, saveOrd(in2[:( len(\"\"F\"\".rstrip().strip(\"\"H\"\".lstrip(getCharFromString(\"\"[\"\"[( i2 - max(saveOrd(in1), ( i2 - mod(i2,len(\"\"C\"\"[saveOrd(\"\"0\"\"[i1:( i1 - min(abs(int(0.0)), i2) )][divInt(i1,i1):]):i2])) )) ):].capitalize()[int(8.0):], i0))).rstrip(\"\"\"\\\\\"\"\".capitalize())[mod(int(3.0),len(in1)):].lstrip(saveChr(int(3.0)))) - ( ( i2 - divInt(i1,( i1 + i1 )) ) + int(7.0) ) )].capitalize()))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 0, 1, 0, 1], [0], [2, 0, 2, 0], [0], [0, 0], [], [], [0, 3, 3], [], [2, 0], [], [5], [0], [], [], [], [1, 1, 1], [0, 8, 8], [0, 1, 0], [], [0, 3, 0, 1, 3, 2, 1, 2, 3, 1, 0, 3], [1, 1], [1, 2, 1, 3], [], [0, 0], [5, 1, 5, 0, 1, 0], [1, 0, 0, 1], [0], [4, 0, 0, 2, 1, 0, 1], [1], [], [0], [2, 1, 3, 1], [], [10, 16], [0], [21]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 1, 2, 0, 0, 3, 0, 2, 0, 1, 1, 0, 0, 0, 3, 3, 3, 0, 12, 2, 4, 0, 2, 6, 4, 1, 7, 1, 0, 1, 4, 0, 2, 1, 1], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in saveChr(i0):{:\\ns1 = in2\\nb0 = s0.endswith(\"\"0\"\"[max(i1, int(0.0)):abs(divInt(int(8.0),divInt(max(int(8.0), i0),len(s1))))])\\ns0 = \"\"k<q\"\"\\nres0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1], [2, 0, 2, 0, 1, 2, 0], [2, 1, 0], [2, 2, 0, 0], [0], [0, 0, 0], [], [], [3, 0], [0, 0], [2, 2, 1, 1], [0, 0], [2, 0], [], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [1, 2, 2, 3, 9, 9, 8, 0, 2, 5, 6, 4, 8, 3, 4, 0, 9, 2, 5, 8, 4, 0, 4, 7, 7, 6, 5, 8, 9, 8, 6, 6, 2, 0, 2, 2, 2, 9, 8, 2, 6, 1, 3, 4, 6, 1, 5, 5, 4, 3, 3, 1, 7, 9, 0, 3, 6, 6, 5, 9, 3, 5, 2, 2, 0, 2, 8, 0, 4, 3, 8, 4, 8, 8, 2, 6, 4, 6, 4, 2, 9, 6, 1, 2, 5, 7, 1, 6, 7, 9, 3, 9, 1, 2, 0, 6, 8, 7, 0, 9, 3], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 2, 2, 1, 1, 2, 0, 0, 1, 2, 2, 1, 0, 2, 2, 0, 0, 1, 2, 0, 2, 1, 0, 2, 2, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 2, 1, 0, 1, 1, 0, 2, 1, 1, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1, 2, 0, 2, 2, 1, 0, 2, 0, 2, 0, 2, 1, 0, 0, 2, 1, 2, 1, 0, 1, 1, 1, 1, 0, 2], [], [2, 3, 1, 2, 0, 1, 1, 0, 3, 1, 0, 2, 3, 0, 1, 2, 3, 2, 0, 3, 1, 3, 1, 0, 3, 0, 2, 0, 3, 2, 3, 3, 3, 2, 1, 0, 3, 1, 1, 1, 0, 1, 2, 2, 3, 1, 0, 3, 1, 1, 2, 3, 2, 3, 3, 3, 2, 2, 3, 1, 3, 1, 3, 3, 2, 2, 3, 3, 2, 3, 0, 2, 1, 0, 1, 0, 3, 2, 3, 2, 3, 2, 3, 0, 3, 0, 3, 0, 3, 3, 3, 0, 0, 2, 2, 0, 3, 3, 0, 1, 3, 2, 1, 3, 2, 3, 3, 1, 3, 0, 0, 3, 2, 1, 3, 2, 0, 0, 1, 3, 1, 0, 2, 2, 2, 1, 3, 3, 3, 0, 2, 2, 3, 0, 3, 0, 1, 3, 1, 1, 3, 2, 3, 1, 3, 3, 0, 3, 3, 0, 3, 0, 1, 3, 3, 2, 0, 2, 3, 2, 1, 2, 0, 3, 0, 2, 2, 3, 1, 3, 3, 1, 1, 1, 1, 2, 2, 1, 1, 0, 3, 1, 2, 1, 0, 1, 3, 2, 2, 0, 3, 1, 3, 3, 3, 2, 2, 3, 1, 2, 2, 2, 2, 2, 3, 2, 2, 1, 0, 1, 0, 0, 1, 0, 2, 2, 0, 3, 0, 3, 0, 0, 0, 3, 0, 2, 0, 3, 3, 3, 0, 3, 3, 3, 1, 2, 3, 3, 2, 3, 1, 3, 0, 2, 2, 0, 1, 3, 1, 2, 3, 3, 2, 1, 0, 0, 3, 0, 2, 0, 3, 3, 2, 3, 3, 3, 0, 1, 2, 2, 2, 0, 2, 2, 0, 0, 2, 3, 2, 3, 1, 3, 2, 0, 3, 1, 0, 2, 2, 3, 3, 1, 0, 2, 3, 3, 3, 0, 0, 2, 2, 0, 2, 3, 0, 0, 2, 2, 0, 2, 1, 1, 2, 3, 1, 2, 0, 1, 1, 0, 0, 3, 2, 1, 0, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 3, 2, 3, 0, 0, 1, 0, 2, 1, 3, 3, 0, 1, 3, 3, 3, 3, 2, 2, 0, 0, 2, 2, 0, 2, 2, 2, 2, 1, 0, 0, 1, 1, 1, 3, 3, 1, 1, 0, 2, 0, 0, 2, 1, 0, 3, 2, 0, 2, 1, 3, 1, 1, 1, 3, 0, 2, 2, 0, 0, 2, 3, 0, 2, 0, 0, 1, 2, 0, 2, 3, 3, 2, 0, 0, 1, 2, 0, 1, 1, 3, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0], [1, 3, 4, 0, 0, 2, 0, 4, 4, 1, 4, 2, 0, 3, 2, 0, 4, 4, 0, 4, 1, 0, 4, 4, 3, 3, 2, 2, 2, 3, 3, 4, 0, 0, 4, 4, 3, 0, 2, 4, 3, 4, 3, 0, 0, 4, 1, 0, 3, 0, 1, 2, 1, 3, 1, 1, 0, 3, 2, 2, 1, 3, 0, 0, 0, 1, 3, 1, 4, 2, 2, 0, 0, 2, 0, 3, 2, 1, 3, 0, 4, 2, 3, 1, 2, 4, 2, 3, 3, 4, 1, 0, 4, 4, 2, 2, 1, 2, 2, 4, 3, 0, 0, 4, 1, 1, 0, 1, 1, 1, 2, 3, 1, 2, 2, 2, 0, 3, 1, 0, 0, 4, 4], [0, 1, 2, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 2, 1, 1, 1, 2, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 0, 2, 2, 2, 1, 0, 2, 1, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1], [5, 4, 4, 1, 1, 1, 3, 3, 5, 2, 5, 2, 2, 0, 4, 5, 4, 2, 3, 0, 1, 5, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0], [2, 2, 2, 0, 4, 2, 2, 2, 1, 2, 1, 1, 4, 4, 1, 1, 2, 4, 2, 2, 1, 4, 0, 2, 2, 0, 2, 2, 2, 2, 1, 4, 4, 4, 1, 2, 2, 2, 1, 4, 4, 2, 2, 4, 1, 4, 0, 1, 1, 1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 4, 1, 3, 4, 4, 2, 2, 0, 1, 2, 4, 2, 4, 4, 0, 2, 4, 4, 4, 4, 2, 4, 0, 1, 2, 1, 4, 2, 2, 1, 0, 0, 2, 2, 4, 0, 0, 3, 4, 0, 3, 4, 1, 0, 3, 3, 0, 2, 0, 0, 4], [1, 1, 1, 1, 1, 3, 2, 2, 1, 2, 1, 1, 1, 2, 1, 3, 0, 2, 2, 3, 2, 2, 1, 1, 0, 1, 2, 1], [3, 2, 0], [1, 1, 0, 0, 0, 0, 0, 2, 1, 0, 0, 2, 2, 2, 2, 1, 1, 0, 0, 2, 1, 1, 1, 0, 0, 1, 2, 0, 2, 1, 0, 0, 2, 1, 0], [0, 0, 0, 3, 2, 3, 0, 0, 3, 1, 1, 2, 0, 1, 2, 1, 3, 1, 2, 3, 1, 3, 3, 0, 2, 3, 3], [21, 5, 10, 22, 16, 20, 3], [8, 4, 4, 19, 3, 20], [2, 7, 6, 8, 7], [17, 6, 31, 20, 20, 2, 28, 21, 19]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 1, 3, 0, 0, 2, 2, 4, 2, 2, 0, 0, 0, 1, 101, 101, 98, 0, 425, 114, 123, 53, 61, 23, 27, 1, 114, 28, 3, 35, 27, 7, 6, 5, 9], "tree_depth": 94, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[divInt(max(int(1.0), divInt(i0,int(2.0))),int(2.0)):i0][:len(saveChr(int(3.0)))][:i0] == \"\"V\"\"[mod(saveOrd(\"\"F\"\"[i0:int(9.0)]),mod(min(divInt(i0,min(int(9.0), abs(int(8.0)))), i0),min(i0, ( i0 + saveOrd(\"\"K\"\") )))):( saveOrd(saveChr(max(saveOrd(saveChr(divInt(int(0.0),i1))), abs(int(2.0))))) - int(5.0) )][int(6.0):i0][int(4.0):mod(divInt(min(int(8.0), i2),len(\"\".\"\")),int(3.0))]:{:\\nin1 = \"\"2\"\"\\nif saveChr(int(4.0))[( abs(( min(saveOrd(\"\"#\"\"[saveOrd(saveChr(mod(( min(int(0.0), saveOrd(in1)) * int(9.0) ),max(min(divInt(( saveOrd(s1[saveOrd(\"\"W\"\"[:mod(len(\"\"Q\"\".capitalize().capitalize().lstrip(\"\"`\"\"[i0:( int(2.0) + i1 )][int(5.0):i1][:len(saveChr(divInt(abs(( abs(divInt(abs(i0),len(saveChr(i2)[:len(\"\"i\"\")][i2:].capitalize()))) * saveOrd(saveChr(min(min(i1, i1), mod(divInt(i2,saveOrd(s1)),saveOrd(\"\"e\"\"))))) )),i0)))])),int(8.0))][len(\"\"7\"\"):][( int(4.0) + min(( abs(saveOrd(\"\"U\"\")) - int(0.0) ), len(\"\"e\"\"[:i0][:i1])) ):][saveOrd(\"\"6\"\"):]):][divInt(int(4.0),len(s1)):( i2 - i2 )]) + int(7.0) ),min(int(7.0), i1)), mod(divInt(( int(6.0) + min(saveOrd(\"\"t\"\"), max(i0, mod(( min(i2, len(\"\";\"\")) + i2 ),int(5.0)))) ),min(int(8.0), int(9.0))),max(( abs(int(8.0)) + max(len(\"\"d\"\"), i0) ), max(max(i0, min(i1, int(6.0))), len(in0))))), abs(( i2 + mod(abs(mod(int(6.0),( i0 * max(i2, mod(( len(in0) - int(2.0) ),min(min(int(0.0), int(2.0)), int(2.0)))) ))),int(2.0)) )))))):( ( int(9.0) - int(8.0) ) - i1 )][:min(int(2.0), divInt(int(6.0),i0))]), int(1.0)) * max(divInt(divInt(i2,len(\"\"8\"\")),int(3.0)), max(saveOrd(in2), abs(divInt(divInt(abs(int(4.0)),divInt(( mod(( ( min(mod(( int(6.0) - i2 ),int(1.0)), i1) + i0 ) - int(5.0) ),i0) - mod(( i1 - min(i1, abs(i1)) ),i0) ),i0)),min(i1, ( i1 + len(\"\";\"\") )))))) )) - abs(max(i0, len(saveChr(min(saveOrd(\"\"u\"\"), int(5.0)))))) ):] in (saveChr(( abs(len(s2[divInt(max(int(4.0), abs(i0)),mod(( i1 + int(3.0) ),saveOrd(\"\"\\\\\\t\"\"))):int(3.0)][( abs(len(getCharFromString(in2.capitalize(), mod(int(1.0),i0))[i1:].strip()[:len(saveChr(i2)[mod(i1,saveOrd(s2)):].capitalize().capitalize().lstrip().capitalize()[max(( min(saveOrd(\"\"]\"\"), saveOrd(\"\"D\"\"[:i0])) - int(7.0) ), mod(divInt(mod(i1,( divInt(i1,i0) + ( abs(( abs(int(9.0)) - max(divInt(i2,abs(int(0.0))), i1) )) + ( ( abs(saveOrd(saveChr(int(3.0)))) - i1 ) + mod(len(\"\"7\"\"[min(min(i2, i1), ( mod(i0,( saveOrd(s2) + i1 )) - i1 )):( ( i0 - mod(int(6.0),int(6.0)) ) * divInt(max(int(5.0), ( i2 + int(9.0) )),int(3.0)) )][i0:i0]),max(mod(int(5.0),i1), int(2.0))) ) ) )),int(2.0)),int(0.0))):int(2.0)])])) * divInt(( ( int(8.0) * mod(mod(int(0.0),divInt(( mod(min(( max(i2, i0) * int(4.0) ), i2),mod(int(3.0),max(max(i2, int(8.0)), abs(len(s0))))) - max(abs(mod(mod(i1,i0),mod(divInt(i2,divInt(divInt(mod(( int(4.0) + i0 ),i2),int(8.0)),int(8.0))),int(2.0)))), abs(abs(int(6.0)))) ),int(4.0))),i0) ) * ( i2 - i1 ) ),( int(6.0) * i0 )) ):min(( i0 + divInt(int(4.0),len(getCharFromString(in1, int(2.0))[:int(9.0)][int(6.0):])) ), max(i2, ( divInt(i1,i2) - ( min(i1, mod(i0,i1)) * int(1.0) ) )))])) - ( i1 * ( min(saveOrd(in2), ( i1 + i1 )) + int(2.0) ) ) )).capitalize() + (saveChr(( i0 - int(57.0) )) + in1)):{:\\ns2 = (\"\"<:\"\".capitalize() + in0)\\n:}else:{:\\nres0 = int(1679391.0) \\l saveOrd(((s0 + s1[int(2.0):int(0.0)]) + in2))\\n:}\\nloopBreak% = 0\\nfor in0 in saveChr(int(6870.0)):{:\\nb0 = int(93.0) \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 1], [2, 0, 2, 1, 0, 2, 0, 0], [2, 1, 2], [1, 2, 2, 0, 2], [], [0, 0, 0, 0], [], [], [2], [5, 3], [0, 1, 1, 2], [0, 0], [2], [1], [], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 8, 2, 1, 3, 5, 4, 5, 2, 8, 4, 5, 1, 1, 2, 8, 5, 7, 6, 9, 1, 6, 2, 9, 3, 9, 5, 1, 2, 2], [2, 2, 0, 2, 1, 2, 2, 0, 1, 1, 1, 2, 0, 2, 1, 0, 0, 2, 1, 2, 1, 2, 2, 2, 0, 1, 1], [1], [2, 1, 0, 3, 3, 0, 1, 3, 2, 3, 1, 2, 0, 0, 0, 2, 2, 0, 0, 1, 0, 2, 3, 0, 2, 3, 0, 2, 0, 0, 2, 1, 3, 3, 0, 1, 1, 0, 1, 3, 1, 3, 3, 1, 3, 1, 3, 1, 1, 3, 3, 2, 0, 3, 1, 1, 0, 1, 3, 0, 3, 2, 2, 2, 0, 3, 0, 1, 1, 3, 1, 2, 1, 1, 3, 1, 0, 3, 2, 3, 1, 3, 1, 0, 0, 1, 3, 2, 3, 0, 3, 0, 0, 0, 3, 2, 1, 2, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0], [2, 2, 2, 2, 3, 2, 0, 1, 1, 2, 4, 0, 4, 0, 0, 4, 2, 0, 2, 2, 1, 4, 4, 4, 3, 0, 3, 2], [0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 0, 0, 0], [1, 0, 1, 0, 1, 0], [0, 3, 3, 5, 4, 4, 2, 0, 5], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [], [2, 4, 4, 2, 0, 2, 4, 4, 1, 0, 1, 3, 2, 0, 2, 0, 2, 4, 4, 4, 1, 3, 2, 4, 2, 2, 2, 1, 2, 1, 0, 1, 2, 2, 4, 4, 2, 4, 4, 2, 1, 0, 1], [0, 1, 0, 0, 0, 0, 3, 0, 2, 2, 0, 1], [0], [0, 0, 2, 0, 0, 2, 0, 0, 1, 1, 1, 1, 1, 0, 0], [3, 1, 3, 1, 0, 2, 0, 2, 2, 0], [22, 21, 1], [16, 9], [4, 4, 9], [0, 27]], "fitness": 9223372036854775807, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile True:{:\\ni2 += ( int(1.0) + i2 )\\nif abs(abs(i0)) != int(4.0):{:\\ns0 = getCharFromString(saveChr(abs(( abs(int(8.0)) + mod(i2,i1) ))), i2)[( ( i2 + i0 ) + int(2.0) ):i1]\\n:}else:{:\\nin0 = in0[divInt(len(getCharFromString(getCharFromString(\"\"\"\", i1), ( abs(i1) + ( i2 * i0 ) ))[( int(1.0) * min(max(i2, int(3.0)), int(5.0)) ):]),i1):int(4.0)]\\nloopBreak% = 0\\nwhile max(int(5.0), abs(saveOrd(in2))) \\ge int(284.0):{:\\nb2 = \"\"q\\\\\\\\j\"\" == (in1[min(int(5.0), saveOrd(in1[int(1.0):int(1.0)])):min(min(mod(i0,saveOrd(getCharFromString(getCharFromString(\"\"W\"\".lstrip(), int(2.0)), int(8.0))[i0:])), int(5.0)), abs(i2))] + (getCharFromString(\"\"4\"\"[:min(divInt(( ( i1 - abs(i2) ) - int(7.0) ),int(6.0)), abs(int(9.0)))][:mod(int(1.0),int(6.0))][max(int(2.0), i1):saveOrd(\"\"V\"\"[:divInt(saveOrd(s2),int(9.0))])], saveOrd(\"\"4\"\"))[int(3.0):i2] + getCharFromString(saveChr(i2), int(9.0))[len(\"\"9\"\"[( min(i2, len(s0)) + i0 ):i1]):i1].capitalize().capitalize()[:abs(( int(5.0) + ( int(1.0) + int(2.0) ) ))][:int(2.0)]))\\nin2 = \"\"B\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 0, 4, 0, 0, 1, 2, 4, 2, 1, 1, 0, 1, 1, 31, 31, 27, 1, 101, 18, 28, 13, 6, 9, 10, 0, 43, 12, 1, 15, 10, 3, 2, 3, 2]}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 2, 2, 1, 2, 2, 1, 2, 0, 1, 1], [0, 2, 2, 0, 2], [2, 0, 0, 1, 0, 2], [0, 0], [0], [], [], [0, 0, 2], [0, 4, 2, 3], [2, 2, 1, 0, 1, 1, 1], [0, 0, 0, 0], [2, 2], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 4, 2, 8, 4, 4, 4, 3, 2, 5, 0, 4, 2, 5, 6, 9, 3, 0, 0, 2, 2, 0, 9, 4, 8, 6, 2, 7, 6, 8, 0, 2, 1, 4, 7, 5, 5, 1, 4, 0], [0, 0, 0, 2, 0, 2, 2, 0, 1, 2, 1, 2, 2, 0, 1, 1, 2, 2, 1, 0, 0, 1, 0, 1, 2, 0, 2, 1, 1, 2, 1, 1, 1, 2, 2, 0, 0, 0, 2, 1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 0], [1], [3, 1, 2, 2, 2, 0, 0, 0, 0, 0, 3, 0, 0, 1, 2, 0, 3, 0, 1, 3, 2, 3, 3, 2, 1, 0, 2, 1, 0, 3, 0, 2, 2, 1, 2, 2, 2, 1, 2, 0, 2, 3, 2, 1, 0, 0, 0, 2, 3, 3, 2, 0, 1, 0, 1, 0, 0, 0, 2, 0, 0, 1, 2, 3, 2, 2, 3, 2, 2, 1, 3, 1, 0, 3, 2, 2, 0, 3, 3, 1, 0, 1, 1, 3, 2, 2, 2, 0, 1, 3, 3, 1, 2, 1, 0, 1, 3, 2, 3, 0, 2, 0, 2, 0, 1, 2, 0, 3, 2, 2, 2, 1, 2, 1, 3, 0, 3, 1, 3, 1, 0, 2, 0, 0, 2, 3, 0, 2, 0, 1, 2, 3, 3, 0, 3, 2, 0, 1, 1, 0, 1, 3, 2, 0, 3, 3, 0, 0, 2, 1, 0, 1, 0, 2, 0, 1, 2, 1, 1, 3, 3, 2, 0, 1, 1, 1, 2, 0, 1, 0], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0], [4, 4, 1, 4, 3, 4, 4, 4, 4, 2, 3, 4, 3, 1, 2, 0, 1, 1, 4, 0, 1, 1, 4, 1, 0, 2, 2, 3, 2, 3, 2, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 0, 2, 1, 0, 0, 0, 2, 2, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [4, 0, 0, 0, 5, 1, 3, 1, 2, 2, 2, 4, 5, 2, 4, 3, 3], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0], [0, 3, 3, 2, 4, 1, 1, 2, 4, 0, 1, 4, 2, 1, 2, 2, 0, 3, 2, 1, 0, 1, 3, 2, 3, 2, 4, 0, 0, 2, 0, 2, 2, 4, 0, 4, 1, 2, 0, 1, 0, 2, 4, 1, 2, 4, 4, 2, 4, 0, 4, 2, 4, 0, 0, 4, 4, 1, 4, 1, 2, 2, 4, 1, 4, 1, 4, 4, 4, 2, 2, 1, 1], [0, 3, 3, 2, 3, 3, 0, 2, 3, 2, 0, 0, 2, 1, 3, 0, 3, 0, 2, 1], [2, 5, 4, 0, 1, 0, 0], [0, 2, 2, 0, 2, 2, 0, 1, 2, 2, 1, 1, 1, 0, 1, 2, 1, 2, 1, 0], [2, 3, 1, 0, 0, 0, 2, 0, 3, 1, 1, 2, 1, 0, 0, 0, 3, 0, 2, 2, 1, 2, 3], [24, 22, 9, 0, 15, 1, 8, 10], [21, 21, 8, 7, 7], [5, 2, 7, 8, 5, 0], [24, 12, 18, 12]], "fitness": 9223372036854775807, "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\nloopBreak% = 0\\nfor s0 in ((getCharFromString(\"\"5?v\"\", saveOrd(\"\"YWJ\"\"))[int(2.0):divInt(( ( i0 - i0 ) - i0 ),i2)] + s0.strip()[i0:]) + \"\"2\"\"):{:\\nloopBreak% = 0\\nwhile \"\"A)vi\"\"[saveOrd(in2[i2:][i2:int(0.0)]):].strip((\"\"7\"\"[divInt(i0,max(i1, int(4.0))):] + s1)) == \"\"h\"\":{:\\nb0 = ((in0.capitalize()[:saveOrd(s1)] + s2[( len(s2.rstrip(\"\"P\"\".lstrip())[:saveOrd(s2[:( int(2.0) + i2 )])][mod(int(8.0),i1):]) + saveOrd(\"\"B\"\") ):])[i2:divInt(divInt(int(4.0),divInt(( mod(int(4.0),( i2 - divInt(saveOrd(in1),mod(int(4.0),i0)) )) - i1 ),i1)),( saveOrd(getCharFromString(\"\"I\"\", abs(( i2 - int(3.0) )))[:i2]) + int(2.0) ))] + in2.capitalize()[:i1].rstrip().capitalize()[i0:i0]) == getCharFromString(getCharFromString(s2, ( i1 * i0 ))[int(5.0):], mod(len(in1),divInt(mod(saveOrd(saveChr(( ( int(0.0) - len(\"\"/\"\") ) + int(4.0) )).capitalize()),i1),max(( ( i2 + abs(min(int(2.0), i0)) ) + int(5.0) ), int(6.0)))))\\nloopBreak% = 0\\nwhile max(divInt(( divInt(i2,int(9.0)) * max(saveOrd(\"\"K\"\".lstrip()), int(3.0)) ),( int(0.0) * i1 )), int(022.0)) \\l min(( max(i1, divInt(i2,divInt(i1,int(0.0)))) + divInt(i1,max(divInt(( ( int(9.0) - divInt(int(4.0),saveOrd(getCharFromString(\"\"8\"\", i1)[max(int(8.0), min(int(6.0), i2)):][:mod(i2,i0)])) ) - divInt(abs(i0),mod(i0,int(2.0))) ),divInt(abs(len(\"\"5\"\".lstrip())),i2)), abs(divInt(i1,int(7.0))))) ), int(68.0)):{:\\nloopBreak% = 0\\nfor in0 in getCharFromString(saveChr(i0).capitalize(), int(0.0)):{:\\nb0 = not len(\"\"h\"\"[( i2 * abs(max(i1, i2)) ):( int(2.0) + i0 )][:int(1.0)]) \\le i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( i2 + int(4.0) ) == ( int(7.0) * int(5.0) ):{:\\ni0 -= min(max(mod(i0,int(5.0)), int(1.0)), int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( i0 - int(0.0) ) \\ge i0\\nin0 = \"\"0)\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 5, 6, 2, 1, 0, 0, 3, 4, 7, 4, 2, 1, 0, 0, 0, 41, 41, 51, 1, 170, 48, 34, 24, 25, 17, 23, 2, 73, 20, 7, 20, 23, 8, 5, 6, 4]}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [7, 9, 0, 5, 7, 9, 6, 4, 6, 5, 5, 2, 6], [1, 0, 0, 1, 1, 2], [], [1, 2, 2, 3, 0, 0, 1, 3, 2, 1, 0, 2, 1, 0, 3, 3, 0, 1, 0], [0, 1, 0, 1], [1, 0, 2, 1], [2, 2], [0, 0], [0, 1], [0, 0, 1], [], [3, 4, 2, 0, 2, 4, 1], [2, 0], [], [0, 1], [2, 1, 2], [], [8], [8, 2], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 6, 0, 19, 4, 4, 2, 2, 2, 3, 0, 7, 2, 0, 2, 3, 0, 1, 2, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (s1[int(79.0):( divInt(max(i1, i0),int(0.0)) * min(( int(57964.0) * i0 ), divInt(int(6.0),i1)) )].capitalize() + getCharFromString(\"\"8i2\"\", abs(max(i1, int(5.0))))[:i2])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1], [8, 8, 2, 7, 7], [2], [], [2, 1, 2, 1, 3, 0, 2, 2, 1, 3, 1], [0, 0, 1, 1], [0, 3], [2, 1], [0, 1], [1], [0, 1], [], [4, 1], [1], [], [], [3, 0], [2], [], [], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 1, 0, 11, 4, 2, 2, 2, 1, 2, 0, 2, 1, 0, 0, 2, 1, 0, 0, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = saveChr(( int(88.0) * ( int(2.0) - min(i2, divInt(mod(int(7.0),len(\"\"@C\"\")),int(7.0))) ) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 2, 1, 2, 2, 1, 0, 2, 2, 0, 1, 2, 0, 2, 2, 1, 2, 2, 0, 2, 1, 2, 2, 1, 0, 1, 1, 0, 1, 1, 1, 2, 2, 0, 2, 0], [1, 2, 2, 2, 2, 0, 1, 0, 1, 2, 1, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 0, 0, 2, 1, 1], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [1, 1, 0], [3, 0, 2, 4, 4, 4], [0, 0, 1, 1, 2, 2, 2, 2, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0], [3, 3, 4, 0], [2, 0, 2, 1, 1], [], [0, 1], [0, 1, 1, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 9, 3, 3, 6, 7, 7, 4, 7, 5, 9, 1, 8, 8, 5, 0, 2, 1, 6, 5, 3, 6, 8, 8, 1, 6, 6, 1, 7, 0, 5, 4, 8, 5, 0, 5, 9, 4, 9, 6, 3, 8, 9, 1, 9, 7, 6, 2, 9, 5, 9, 6, 3, 5, 4, 9, 3], [0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 1, 1, 2, 0, 2, 1, 0, 1, 1, 2, 1, 1, 0, 1, 0, 1, 2, 0, 2, 1, 2, 0, 2, 0, 1, 0, 0, 0, 0, 2, 1, 0, 2, 1, 0, 1, 1, 1, 0, 0, 0, 1, 2, 2, 0, 1, 0, 2, 0, 0, 1, 2, 1, 2, 0, 2, 2, 1, 2, 0, 0, 1, 1, 0, 2, 1, 2, 2, 2, 2, 2, 2, 2], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [2, 0, 0, 1, 0, 1, 0, 0, 0, 3, 1, 0, 3, 3, 1, 2, 2, 0, 2, 2, 1, 2, 3, 2, 1, 0, 3, 1, 2, 2, 0, 2, 2, 2, 3, 0, 2, 3, 3, 1, 3, 3, 2, 3, 1, 0, 2, 2, 2, 1, 1, 0, 3, 2, 1, 0, 0, 3, 0, 3, 3, 3, 1, 2, 3, 2, 3, 2, 2, 2, 0, 1, 2, 0, 1, 1, 2, 2, 3, 3, 3, 3, 0, 1, 0, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 3, 1, 0, 0, 2, 0, 2, 2, 0, 3, 2, 3, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 3, 0, 3, 1, 0, 3, 0, 0, 2, 3, 2, 1, 3, 2, 0, 2, 0, 1, 3, 3, 3, 3, 0, 3, 3, 1, 0, 2, 3, 0, 2, 1, 0, 0, 3, 0, 2, 3, 0, 3, 1, 0, 3, 1, 2, 1, 2, 0, 3, 2, 0, 2, 0, 1, 1, 0, 0, 2, 3, 0, 2, 0, 3, 1, 0, 2, 0, 1, 1, 0, 1, 0, 0, 2, 2, 3, 1, 2, 3, 2, 0, 1, 0, 2, 3, 3, 0, 1, 0, 3, 3, 2, 2, 0, 3, 0, 0, 3, 3, 0, 3, 1, 3, 0, 2, 0, 2, 3, 0, 3, 1, 1, 2, 2, 3, 1, 1, 1, 3, 1, 3, 2, 0, 3, 0, 3, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0], [0, 4, 0, 3, 2, 1, 4, 3, 0, 3, 0, 4, 3, 3, 1, 4, 4, 4, 1, 3, 0, 0, 2, 4, 2, 0, 3, 1, 2, 4, 0, 2, 2, 0, 4, 0, 1, 2, 1, 0, 4, 4, 3, 4, 1, 3, 2, 3, 0, 2, 2, 3, 4, 4, 3, 3, 0, 3, 4, 3, 0, 3], [0, 0, 2, 0, 0, 1, 2, 1, 2, 2, 0, 1, 1, 2, 2, 2, 2, 0, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0, 1, 2, 1, 1, 0, 1, 2, 2, 0, 2, 0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [4, 4, 1, 5, 4, 5, 0, 5, 4, 1, 3, 0, 0, 4, 1, 2, 4, 5, 0, 4, 5, 1, 2, 3, 1, 5, 1, 2, 5, 1, 1, 3, 1, 1, 0, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [1, 0, 1, 2, 1, 2, 1, 1, 1, 4, 1, 4, 4, 4, 4, 1, 0, 4, 0, 4, 4, 0, 2, 2, 0, 0, 2, 4, 0, 1, 4, 2, 4, 2, 2, 0, 0, 2, 1, 4, 2, 1, 4, 1, 0, 2, 2, 2, 0, 2, 2, 2, 0, 4, 4, 4, 1, 4, 1, 4, 1, 1, 4, 2, 0, 4, 1, 2, 0, 1, 0, 4, 4, 0, 4, 2, 1, 2, 1, 2, 0, 1, 1, 0, 4, 4, 4, 2, 0, 2, 0, 2, 0, 1, 4, 2, 2, 3, 1, 0, 1, 0, 1, 4, 1, 4], [1, 3, 3, 2, 1, 0, 3, 2, 2, 1, 0, 1, 0, 2, 2, 3, 3, 3, 1, 0, 3, 3, 0, 3, 1, 3, 0, 1, 1], [5, 1, 2, 5, 2, 3, 2, 3, 2, 5], [2, 2, 1, 0, 1, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 1, 0, 2, 1, 0, 0, 1, 2, 1, 1, 1], [1, 2, 1, 3, 2, 1, 0, 3, 0, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 3, 3, 2, 3, 2, 3, 0, 2, 1, 0, 1, 0, 3], [3, 12, 24, 14, 9, 25, 2, 14, 17, 10, 3, 16], [17, 11, 18, 16, 25, 10, 16], [5, 5, 4, 2, 6, 0], [1, 13, 15, 15, 2, 10, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 37, 37, 17, 20, 6, 9, 0, 0, 3, 6, 15, 6, 4, 5, 0, 2, 6, 57, 57, 84, 11, 246, 60, 62, 39, 27, 36, 32, 6, 106, 29, 10, 26, 32, 12, 7, 6, 7], "tree_depth": 75, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( i0 + i0 )\\nif not b1:{:\\nloopBreak% = 0\\nwhile int(093.0) \\ge i0:{:\\ni0 = int(3.0)\\nloopBreak% = 0\\nwhile i1 \\l i0:{:\\nloopBreak% = 0\\nwhile \"\"r\"\" != in1:{:\\ni0 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= min(int(6.0), i0)\\nloopBreak% = 0\\nwhile \"\"5\"\" != \"\"l\"\"[saveOrd(\"\"\\\\\\n\"\"[min(int(7.0), mod(divInt(i1,( mod(int(7.0),( len(\"\"5\"\") + ( int(4.0) + i1 ) )) - abs(int(7.0)) )),( ( i2 * ( ( mod(max(i0, ( saveOrd(\"\"s\"\") - len(saveChr(int(5.0))) )),min(len(\"\"D\"\"), mod(min(int(9.0), i2),divInt(( mod(int(1.0),int(8.0)) * i1 ),saveOrd(saveChr(( int(8.0) * i0 )).capitalize().rstrip().strip(\"\"*\"\")))))) + i1 ) - len(in1) ) ) - i1 ))):]):]:{:\\nloopBreak% = 0\\nfor s1 in getCharFromString(in2, len(in1.capitalize().strip())):{:\\ni2 = max(saveOrd(in2[int(5.0):divInt(saveOrd(s0),mod(saveOrd(in2.capitalize()[:divInt(divInt(mod(i1,int(0.0)),( i1 * int(2.0) )),int(1.0))]),mod(mod(max(len(\"\"M\"\"), min(min(i0, int(6.0)), i1)),int(5.0)),mod(int(3.0),i0))))][:i1]), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = saveChr(int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif getCharFromString(s1[i0:int(8.0)][i2:], abs(int(8.0)))[i1:i2].startswith(in0):{:\\ni0 *= divInt(i2,divInt(( i0 * saveOrd(\"\"Y\"\"[( abs(i1) * i0 ):i0]) ),int(1.0)))\\nloopBreak% = 0\\nfor s0 in saveChr(int(6.0)):{:\\nif \"\"O\"\"[int(6.0):i0] in getCharFromString(\"\"q\"\", ( ( divInt(min(i0, len(s0)),int(1.0)) + i2 ) + max(i1, i0) )):{:\\ni2 -= ( abs(( int(7.0) - saveOrd(in1[( i1 + ( i0 - int(0.0) ) ):min(abs(abs(min(i1, saveOrd(s1[:min(int(5.0), i1)][divInt(max(i1, ( int(4.0) + i0 )),i0):abs(i0)][mod(max(i1, min(int(8.0), i2)),saveOrd(\"\"J\"\".strip(\"\"z\"\".strip()).capitalize().capitalize())):int(5.0)])))), mod(int(0.0),divInt(i2,saveOrd(\"\"4\"\".lstrip(\"\"Z\"\")))))][mod(i0,( i1 * int(5.0) )):][int(9.0):]) )) - i0 )\\n:}else:{:\\nloopBreak% = 0\\nwhile i2 == mod(len(saveChr(i0)),( i0 - saveOrd(s2[int(4.0):i1]) )):{:\\nif ( i2 + int(9.0) ) \\le int(6.0):{:\\nin1 = getCharFromString(\"\"C\"\", i1)\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in s0[int(3.0):]:{:\\nin1 = \"\"O\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif not i2 \\le i0:{:\\nif ( ( max(int(8.0), ( len(in2) - ( i2 * int(9.0) ) )) - i2 ) - divInt(abs(len(s1.lstrip(getCharFromString(\"\"R\"\"[:i1], int(1.0))).strip())),i2) ) \\le min(abs(( ( i0 + abs(i0) ) - i1 )), len(\"\",\"\"[saveOrd(s2[i1:saveOrd(\"\",\"\")]):int(9.0)])):{:\\ni0 *= len(\"\"2\"\")\\n:}else:{:\\nin0 = s1\\n:}\\n:}else:{:\\nin2 = saveChr(i2).strip()\\n:}\\ns1 = s2[:divInt(i1,divInt(len(in2[i2:]),min(int(7.0), int(6.0))))].strip(s1[:( ( len(\"\"\\\\\\t\"\") * int(2.0) ) + int(9.0) )])\\n:}\\ni2 = int(59.0)\\nb1 = True\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = getCharFromString((\"\"6\"\\\\\"\"\" + in0)[:saveOrd(\"\"K0k\"\")][:int(63.0)], len(s1))\\nloopBreak% = 0\\nfor s1 in \"\"DqQ\"\":{:\\nloopBreak% = 0\\nfor s0 in saveChr(( i2 * min(i2, len(\"\"*\"\")) )):{:\\ni2 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in saveChr(int(54.0)):{:\\ni2 += int(93.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [2, 0, 0, 2, 0, 2, 0, 0, 1, 2, 2, 0, 0, 2, 1, 1, 1, 1, 2, 2, 1], [1, 0, 0, 1, 0, 0, 2, 0], [1, 0, 1, 2, 0, 0, 1, 2, 2, 2, 1, 0, 2], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [2, 3, 1, 0, 0], [5], [0, 2, 2, 2, 1, 0, 2, 0], [0], [4, 0, 1, 3], [0, 2, 1], [1, 0], [1], [1, 0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 5, 3, 4, 9, 0, 3, 7, 7, 8, 9, 3, 8, 9, 6, 9, 9, 8, 2, 1, 3, 8, 3, 8, 2, 3, 1, 8, 6, 7, 2, 4, 4, 2, 8, 7, 1, 5, 3, 1, 4, 6, 6, 2, 3, 7, 8, 9, 5, 3, 0, 7, 9, 7, 5, 3, 1, 2, 7, 2, 0, 8, 1, 4, 9, 8, 5, 6, 0, 7, 9, 0, 8, 2, 3, 1, 7, 8, 7, 2, 5, 3, 5, 2, 8, 3, 6, 6, 0, 6, 7, 8, 0, 9, 0, 3, 3, 2, 2, 6, 2, 4, 7, 3, 8, 6, 6, 5, 0, 2, 4, 0, 9, 0, 9, 2, 1, 4, 9, 0, 9, 8, 6, 5, 3, 3, 8], [1, 2, 1, 1, 2, 2, 2, 0, 1, 2, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 2, 1, 2, 1, 1, 2, 0, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 0, 2, 2, 1, 0, 2, 1, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 2, 2, 2], [0, 1, 0, 0], [2, 3, 2, 0, 1, 0, 3, 2, 0, 1, 3, 1, 1, 3, 1, 2, 0, 3, 0, 2, 1, 1, 3, 2, 0, 0, 1, 2, 0, 1, 1, 2, 3, 1, 2, 3, 1, 0, 1, 3, 2, 3, 3, 1, 3, 1, 1, 2, 3, 3, 1, 0, 2, 3, 3, 0, 3, 2, 2, 0, 3, 3, 1, 2, 3, 2, 1, 2, 1, 1, 1, 3, 2, 0, 2, 3, 0, 1, 2, 1, 2, 0, 1, 3, 2, 0, 2, 0, 0, 0, 2, 3, 2, 2, 0, 2, 2, 2, 3, 3, 0, 0, 0, 1, 3, 1, 3, 1, 3, 3, 2, 2, 1, 0, 2, 3, 1, 2, 1, 1, 3, 2, 3, 0, 2, 2, 1, 1, 1, 0, 1, 2, 3, 2, 0, 3, 1, 1, 3, 2, 2, 1, 1, 3, 0, 2, 1, 3, 3, 0, 3, 0, 1, 0, 1, 1, 3, 2, 3, 2, 3, 2, 3, 3, 0, 2, 0, 1, 1, 2, 1, 0, 2, 2, 3, 0, 1, 2, 1, 3, 2, 3, 1, 3, 1, 0, 0, 2, 1, 3, 3, 0, 1, 1, 2, 3, 3, 2, 3, 2, 1, 1, 2, 1, 1, 3, 3, 2, 3, 3, 2, 0, 2, 1, 3, 0, 1, 3, 0, 0, 0, 1, 1, 0, 1, 2, 1, 3, 0, 3, 0, 3, 2, 2, 3, 2, 1, 2, 3, 3, 3, 1, 1, 0, 3, 3, 1, 1, 1, 0, 0, 3, 3, 1, 2, 2, 0, 2, 2, 1, 2, 1, 1, 0, 3, 2, 0, 3, 1, 3, 1, 1, 2, 3, 3, 3, 1, 3, 3, 2, 3, 1, 2, 2, 0, 0, 2, 1, 2, 3, 1, 1, 3, 2, 2, 0, 0, 1, 0, 3, 1, 2, 3, 3, 0, 0, 2, 3, 3, 0, 3, 0, 2, 3, 3, 1, 0, 2, 1, 0, 0, 3, 3, 3, 0, 2, 1, 1, 1, 3, 1, 2, 3, 1, 0, 3, 1, 2, 1, 3, 3, 0, 1, 1, 1, 2, 0, 0, 1, 1, 0, 1, 0, 2, 3, 3, 1, 1, 2, 2, 3, 3, 0, 1, 3, 1, 2, 2, 1, 2, 1, 2, 3, 0, 0, 1, 0, 3, 1, 2, 1, 0, 2, 1, 1], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 2, 1, 4, 3, 2, 1, 0, 1, 0, 2, 0, 1, 3, 3, 2, 0, 0, 2, 0, 4, 4, 2, 2, 3, 3, 0, 4, 2, 0, 3, 2, 1, 3, 1, 3, 4, 4, 0, 4, 3, 0, 1, 2, 2, 0, 4, 4, 1, 2, 3, 1, 2, 1, 3, 4, 3, 4, 3, 4, 1, 0, 2, 0, 2, 0, 1, 3, 0, 4, 2, 1, 0, 0, 2, 4, 1, 3, 4, 2, 2, 0, 0, 3, 2, 1, 0, 3, 2, 1, 0, 1, 2, 1, 0, 2, 3, 1, 4, 2, 3, 0, 0, 3, 4], [1, 1, 2, 1, 0, 2, 0, 0, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 0, 2, 1, 2, 2, 2, 0, 0, 1, 1, 2, 2, 2, 1, 0, 1, 2, 1, 1, 2, 2, 1, 0, 2, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1], [3, 3, 5, 0, 5, 1, 1, 0, 4, 5, 3, 5, 4, 2, 4, 5, 5, 3, 4, 3, 0, 2, 1, 4, 5, 1, 5, 1, 4, 4, 0, 5, 5, 1, 1, 5, 2, 1, 1, 3, 2, 1, 1, 1, 1, 3, 0, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [2, 4, 1, 1, 0, 4, 2, 4, 3, 2, 2, 1, 2, 1, 1, 3, 0, 2, 4, 4, 1, 2, 2, 1, 0, 0, 2, 0, 2, 4, 4, 1, 4, 4, 0, 4, 4, 1, 0, 1, 2, 2, 1, 4, 0, 0, 4, 2, 2, 2, 0, 4, 0, 3, 3, 3, 3, 2, 3, 2, 3, 4, 2, 1, 4, 0, 2, 1, 4, 1, 0, 3, 3, 2, 2, 0, 1, 2, 0, 4, 3, 3, 4, 0, 0, 2, 2, 0, 1, 2, 1, 1, 4, 3, 3, 3, 3, 4, 4, 2, 4, 4, 0, 2, 0, 1, 2, 2, 4, 4, 1, 0, 0, 0, 1, 4, 3, 1, 3, 3, 4, 1, 2, 1, 4, 0, 4, 1, 0, 3, 3, 3, 2, 3, 2, 4, 0, 0, 1, 4, 4, 3, 1, 0, 1, 2, 2, 3, 1, 2, 4, 1, 4, 2, 2, 4, 1, 4, 3, 4, 4, 1, 2, 3, 0, 4, 4, 1, 0, 0, 0, 0, 3, 3, 0, 4, 2, 1, 2, 0, 4, 2, 4, 2, 0, 0, 1, 0, 2, 0], [2, 2, 3, 2, 1, 1, 3, 0, 0, 2, 0, 3, 3, 1, 2, 0, 1, 1, 1, 0, 1, 0, 1, 3, 2, 2, 2, 1, 2, 1, 1, 2, 3, 2, 3, 1, 2, 2, 0, 0, 3, 3, 1, 3], [4, 0, 1, 2, 4, 1, 1, 3, 1, 1], [0, 1, 0, 0, 0, 1, 0, 2, 2, 1, 0, 2, 2, 2, 1, 1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 0, 2, 2, 0, 0, 0, 2, 2, 2, 1, 0, 0, 2, 0, 2, 2, 0, 2], [2, 3, 3, 0, 2, 2, 0, 1, 2, 3, 2, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 3, 1, 3, 3, 1, 0, 2, 0, 1, 2, 0, 1, 2, 2, 1, 3, 3, 1, 0, 2, 3, 1, 3, 2, 3, 0, 2, 3, 2, 1, 0], [3, 11, 17, 1, 3, 10, 6, 8, 24, 22, 14, 7], [14, 23, 11, 9, 15, 13, 25, 5, 16, 21, 3, 0, 14, 25, 10, 14], [7, 2, 8, 0, 6, 7, 0, 8, 0, 2, 3, 6, 0], [3, 14, 15, 20, 29, 10, 29, 12, 20, 16, 28, 26, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 21, 21, 8, 13, 5, 7, 0, 0, 5, 1, 8, 1, 4, 3, 0, 1, 2, 128, 128, 80, 4, 385, 94, 105, 49, 46, 49, 54, 5, 190, 44, 10, 43, 54, 12, 16, 13, 13], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif b2:{:\\ni1 = ( max(mod(i2,int(6.0)), i1) - abs(( i1 - int(0.0) )) )\\nres0 = \"\"7\"\".capitalize()[max(int(534.0), int(9.0)):saveOrd(\"\"\"\")].startswith(in0)\\nloopBreak% = 0\\nfor in0 in (\"\"+\"\"[int(0.0):mod(i2,len(\"\"D\"\"[i2:( int(3.0) * int(7.0) )]))][abs(mod(i2,i0)):int(7.0)] + \"\"2\"\").rstrip((in2 + saveChr(mod(i1,int(8.0))).capitalize()[:int(9.0)]))[:mod(max(int(3.0), mod(min(int(8.0), i2),int(9.0))),max(( min(abs(int(6.0)), min(int(9.0), int(9.0))) - divInt(max(len(\"\"8\"\"), int(8.0)),i0) ), ( len(\"\"L\"\"[abs(i1):][min(( ( i1 + min(abs(int(2.0)), ( min(mod(int(1.0),( int(3.0) * int(8.0) )), int(3.0)) + saveOrd(s0) )) ) + mod(i0,( saveOrd(in2) - i1 )) ), int(8.0)):mod(int(2.0),( i0 - int(3.0) ))]) * abs(( i0 - mod(i1,i1) )) )))].capitalize():{:\\ni0 *= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s1 in s1[( abs(( mod(i0,divInt(( mod(len(saveChr(len(\"\"o\"\".lstrip()))[:i0]),i0) - i0 ),int(1.0))) * min(int(8.0), saveOrd(getCharFromString(getCharFromString(s0, int(6.0)), abs(min(( mod(int(7.0),i0) * ( len(getCharFromString(\"\"0\"\", int(2.0)).capitalize()) * mod(int(4.0),int(4.0)) ) ), abs(( max(i0, mod(mod(int(2.0),int(8.0)),int(7.0))) * i1 ))))))) )) * int(15314.0) ):]:{:\\nin1 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb1 = \"\",6R\"\" in \"\"xljp\"\"[( len(in0.rstrip()) - divInt(i0,max(int(6.0), int(6.0))) ):][len(in2):mod(( int(23.0) - int(7.0) ),saveOrd(in1[:i2][mod(int(8.0),saveOrd(saveChr(min(i0, saveOrd(s2))))):][i1:].strip()))]\\nb0 = ((((((\"\"B\"\"[int(9.0):i1].capitalize() + getCharFromString(in1, int(5.0)))[int(3.0):] + \"\"n\"\"[len(saveChr(divInt(min(divInt(max(( abs(abs(i2)) + divInt(i1,int(0.0)) ), int(7.0)),( int(9.0) * i2 )), mod(mod(min(i1, int(7.0)),mod(int(5.0),saveOrd(\"\"D\"\"))),( saveOrd(in2) - int(3.0) ))),max(int(1.0), i1)))):])[:i2] + ((in2[( int(2.0) * abs(len(\"\";\"\")) ):][:i0] + in0[int(7.0):]) + saveChr(int(20.0)))) + ((saveChr(( max(abs(divInt(max(( int(8.0) * int(1.0) ), ( int(4.0) * int(9.0) )),len(in1))), saveOrd(in0)) + ( len(s0[saveOrd(\"\"z\"\"):][:divInt(i1,( int(8.0) + len(\"\"f\"\"[:i2]) ))]) - int(5.0) ) )) + \"\"K^\"\") + getCharFromString(((((saveChr(saveOrd(getCharFromString(saveChr(i1)[i2:i2], int(6.0)))) + s2.rstrip(s1[int(0.0):])) + \"\"q\"\") + \"\"\"\\\\\"\"\".capitalize().capitalize()[i2:int(7.0)][divInt(int(9.0),max(i2, min(i1, abs(( divInt(min(( int(0.0) - ( abs(min(max(int(8.0), int(2.0)), i1)) * len(in1) ) ), min(int(3.0), int(1.0))),int(7.0)) * i2 ))))):]) + in2), i1))) + s1) + \"\"^vG\"\") not in (\"\"7Id\"\" + ((saveChr(saveOrd(\"\"0\"\")) + \"\"Y\"\"[abs(int(8.0)):( divInt(i2,divInt(( int(7.0) * mod(int(2.0),int(5.0)) ),i2)) - max(( i1 + min(int(3.0), min(int(5.0), int(2.0))) ), divInt(abs(saveOrd(in2.capitalize())),max(int(8.0), len(saveChr(saveOrd(\"\"a\"\")))))) )]) + s1)).capitalize()\\n:}\\nif ( abs(int(3.0)) - ( ( i2 * i2 ) - ( int(6.0) - ( abs(int(6067.0)) * int(8.0) ) ) ) ) != min(divInt(mod(i0,i2),int(09.0)), i2):{:\\nloopBreak% = 0\\nfor in1 in ((((saveChr(min(int(0.0), mod(len(in1),abs(i1))))[i0:] + s0)[( max(min(i2, len(\"\"8\"\")), i1) * divInt(abs(max(int(3.0), i2)),divInt(int(3.0),i0)) ):i0] + (\"\"0\"\" + in2).rstrip().capitalize()) + \"\"o);zW2-\"\") + (\"\"k\"\" + \"\"]\"\".capitalize()[:min(max(abs(i1), divInt(int(2.0),int(2.0))), int(6.0))])[max(int(24.0), ( min(int(7.0), i1) - abs(int(3.0)) )):][( int(8665.0) + len(saveChr(max(i1, int(0.0)))[int(2.0):int(4.0)][divInt(i1,i0):int(0.0)].rstrip()) ):]):{:\\ni0 = int(909.0)\\nin2 = \"\"3[O\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s1 in (getCharFromString(\"\"6)\"\", i0).capitalize() + (s1 + getCharFromString(\"\"0\"\".lstrip(in2), int(2.0)))[i1:]).capitalize():{:\\ns2 = s1\\ns1 = in0\\ni1 = divInt(saveOrd(s2),abs(int(1.0)))\\nb0 = not ((s1 + \"\"o\"\"[int(4.0):mod(( len(s1[min(i0, int(9.0)):]) * min(int(0.0), ( ( int(9.0) + ( int(8.0) - divInt(len(saveChr(i1)),i2) ) ) - int(6.0) )) ),i2)].rstrip()) + s1[saveOrd(s1):int(5.0)].rstrip()[mod(int(3.0),i2):]) != \"\"H\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nfor in0 in s0:{:\\ns1 = s2[( int(3.0) + int(8.0) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1, 1], [0, 2, 1, 2, 0, 0], [1, 0], [2, 0, 0, 1], [0], [0, 0, 0], [], [], [2, 2], [0], [2, 0, 0, 2, 0, 1], [0], [1, 1], [2, 2, 2], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1], [8, 5, 6, 2, 5, 4, 0, 7, 0, 2, 5, 8, 4, 1, 0, 6, 5, 3, 0], [2, 0, 2, 1, 0, 2, 0, 0, 2, 0, 0, 1], [0], [0, 0, 1, 1, 0, 3, 2, 2, 0, 2, 0, 2, 3, 1, 3, 1, 2, 2, 1, 2, 2, 0, 1, 2, 2, 1, 3, 1, 0, 1, 0, 0, 1, 2, 0, 3, 2, 2, 0, 2, 1, 1, 1, 1, 2, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 3, 1, 4, 3], [0, 1, 0, 1, 0, 2, 2], [1, 1, 0, 0, 0, 0, 1, 0], [2, 1, 5, 4], [1, 1, 1, 1, 1, 1, 1, 1], [0], [2, 2, 2, 2, 2, 0, 0, 2, 2, 1, 2, 4, 1, 1, 1, 1, 1, 1, 1], [2, 2], [], [1, 0, 2, 2, 2, 0, 2, 0], [1, 1, 1, 1, 1, 2, 0, 1], [3], [14, 24, 19, 11, 24], [7, 9], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 2, 1, 6, 1, 2, 3, 0, 0, 1, 19, 19, 12, 0, 47, 15, 5, 7, 8, 4, 7, 1, 18, 1, 0, 8, 7, 1, 5, 1, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1[i2:][i0:][int(8.0):][int(5.0):i2][:min(( mod(i1,mod(i0,( len(in2) + int(6.0) ))) - max(int(2.0), divInt(divInt(int(5.0),( ( i2 + int(4.0) ) - divInt(divInt(int(0.0),saveOrd(\"\"o\"\"[int(7.0):][i0:int(0.0)])),i0) )),i2)) ), int(2.0))]\\nif \"\"y\"\".capitalize()[( i0 + len(\"\"t\"\") ):( mod(i0,divInt(int(5.0),int(8.0))) * int(4.0) )] not in \"\"l\"\":{:\\nb2 = not not \"\"y\"\" not in \"\"7\"\"\\n:}\\nloopBreak% = 0\\nfor in1 in \"\"D\"\":{:\\nb2 = not int(10.0) \\l ( int(6530.0) * i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [2, 0, 2, 2, 1, 0, 1, 2, 0, 0, 1, 0, 0, 0], [2, 0, 1, 1], [1, 0, 2, 0, 1, 1, 0, 2, 1, 1], [0], [0, 0, 0, 0, 0, 0, 0], [], [], [2, 3, 1, 3], [3], [0, 2, 0, 2, 0, 1, 2, 0], [0], [2, 2, 5], [0, 1, 3, 1], [0], [1, 1], [1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [2, 0, 4, 3, 8, 9, 4, 5, 3, 5, 9, 1, 3, 1, 5, 3, 7, 8, 8, 5, 1, 5, 3, 3, 0, 2, 2, 7, 9, 7, 2], [0, 0, 1, 2, 2, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 0], [2, 0, 3, 2, 1, 1, 3, 2, 1, 1, 1, 2, 2, 0, 0, 1, 1, 3, 2, 2, 2, 3, 3, 2, 0, 2, 1, 2, 1, 2, 0, 3, 1, 2, 0, 2, 3, 0, 0, 1, 3, 0, 0, 0, 2, 2, 0, 0, 3, 1, 3, 0, 3, 3, 1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 3, 0, 1, 3, 2, 0, 2, 3, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 4, 1, 0, 1, 0, 3, 3, 4, 3, 3, 1, 4, 3, 2, 2, 1], [0, 0, 2, 1, 0, 2, 0, 2, 2, 2, 2, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1], [1, 5, 5, 1, 4, 2, 2, 3, 4, 4], [1, 1, 1, 1, 1, 1, 1], [0], [4, 2, 0, 0, 4, 4, 1, 1, 2, 2, 0, 4, 2, 0, 0, 0, 4, 1, 2, 4, 2, 4, 4, 4, 0, 1, 4, 1, 1, 1], [1, 1, 2, 0, 3, 1, 0, 3, 2, 0], [1, 0], [2, 0, 2, 0, 2, 2], [1, 0, 2, 2, 3, 0, 2], [1, 2], [24], [2, 1, 0], [15]], "fitness": 9223372036854775807, "mapping_values": [1, 14, 14, 4, 10, 1, 7, 0, 0, 4, 1, 8, 1, 3, 4, 1, 2, 2, 31, 31, 25, 5, 75, 19, 17, 14, 8, 10, 7, 1, 30, 10, 2, 6, 7, 2, 1, 3, 1], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b2:{:\\ni0 += ( i0 + min(( int(20.0) * int(43.0) ), saveOrd(saveChr(divInt(int(8.0),int(94535.0))))) )\\nloopBreak% = 0\\nfor s1 in in2[int(9.0):]:{:\\nif in2 == saveChr(divInt(divInt(i1,i2),int(1.0))):{:\\nres0 = False\\n:}else:{:\\ns1 = \"\"y\"\".capitalize()\\n:}\\nb1 = \"\"B\"\" == in1[int(3.0):][max(mod(( ( min(max(( i2 - ( int(1.0) + ( int(5.0) * ( i0 + min(int(3.0), ( i1 * divInt(len(getCharFromString(s2[i2:i0], int(7.0))),len(s2)) )) ) ) ) ), i2), i0) * i2 ) * divInt(mod(i0,i0),saveOrd(in0)) ),int(8.0)), len(\"\"2\"\".rstrip())):i2]\\nif ( len(saveChr(max(int(8.0), saveOrd(getCharFromString(in1.capitalize().lstrip(), len(\"\"1\"\"))[int(5.0):])))[( int(1.0) * i0 ):]) \\ge i0 and getCharFromString(\"\",\"\", i2).endswith(\"\"C\"\") ):{:\\ni0 -= int(5.0)\\n:}\\ni1 = abs(i1)\\nres0 = False\\nin1 = \"\"0\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(330.0)\\ni0 = abs(( i1 - mod(max(int(22.0), int(7972.0)),i1) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 0, 2, 2, 0, 2, 1, 0], [2, 2, 1, 0, 0, 0, 0], [1, 0, 1], [0, 0, 0], [0, 0], [], [], [3], [2], [2, 2, 2, 1, 0, 0, 0, 1], [0], [5, 4, 0, 4], [2, 2, 2], [], [], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 1, 9, 3, 1, 6, 3, 4, 0, 8, 0, 8, 3], [2, 1, 1, 1, 0, 1, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 2, 0, 0], [0, 1], [2, 2, 2, 1, 3, 0, 0, 2, 2, 0, 0, 1, 1, 2, 0, 1, 1, 3, 0, 3, 0, 0, 1, 0, 1, 1, 0, 2, 1, 0, 0, 3, 2, 0, 1, 3, 1, 1, 2, 0, 1, 0, 3, 1, 1, 2, 2, 0, 2, 3, 2, 0, 0, 1, 0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1], [1, 3, 0, 1, 0, 4, 0, 3], [2, 1, 0, 0, 1, 2, 0, 0], [0, 1, 1, 0, 1], [3, 2, 2, 5, 1, 1, 4, 0, 5], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0], [4, 0, 1, 4, 2, 4, 1, 1, 1, 0, 0, 2, 0, 2, 2, 4, 0, 2, 1, 4, 4, 1, 4, 2, 2, 2, 4, 0, 1, 2, 0], [1, 2, 3, 2, 1, 0, 3, 0], [1, 2], [1, 0, 1, 0, 0, 2, 1, 2, 1, 0], [3, 1, 0, 2, 3, 2, 3], [15], [10], [1, 5], [29, 30, 6]], "fitness": 9223372036854775807, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile saveChr(divInt(mod(( int(7.0) * max(i2, i1) ),( mod(i1,i1) - int(1.0) )),int(1.0))).endswith(in0):{:\\nloopBreak% = 0\\nwhile \"\"^\"\".startswith(\"\"k\"\".rstrip()[:divInt(i0,int(9.0))].capitalize()):{:\\nif \"\"P\"\" in \"\"1\"\":{:\\ni1 = int(3.0)\\n:}else:{:\\nloopBreak% = 0\\nfor s2 in s2:{:\\nloopBreak% = 0\\nfor in2 in s1:{:\\nres0 = len(s1[i0:min(i0, i2)]) == int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in s0.capitalize()[i0:int(6.0)][:int(3.0)]:{:\\ni0 += i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 6, 3, 3, 2, 0, 0, 1, 1, 4, 1, 3, 0, 0, 0, 1, 8, 8, 12, 2, 27, 6, 3, 3, 4, 8, 4, 3, 17, 4, 1, 4, 4, 1, 1, 1, 1]}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 1, 2, 2, 0], [0, 1, 0], [0, 1, 1], [0, 0], [0, 0], [], [], [0], [], [0, 0], [], [], [1, 1], [], [0, 0], [0], [], [], [2, 0, 2, 1], [0, 1], [0, 0], [], [], [1], [], [3, 2, 2], [1, 0, 1], [0, 0], [3, 0, 1, 1], [], [], [], [1, 1, 1], [], [19, 2, 1], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 3, 3, 2, 4, 0, 0, 0, 3, 0, 3, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in (s2 + \"\"t\"\"):{:\\nb0 = True\\nif True:{:\\nloopBreak% = 0\\nfor s2 in \"\"cb\"\":{:\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [1], [0, 2], [], [0, 0], [], [], [1], [0], [1, 0], [0], [], [1], [], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [7, 7, 5, 1, 1, 8, 7, 7, 1, 8, 8, 9, 4, 1], [2, 0, 2, 1, 0, 1, 2, 1, 2, 0, 1], [], [1, 2, 3, 2, 1, 1, 0, 0, 1, 3, 3, 2, 3, 3, 2, 0, 0, 2, 3, 1, 2, 1, 3, 3, 3, 1, 3, 2, 1, 1, 2, 1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 3, 0, 2, 2, 3, 3, 0, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [4, 3, 4, 2, 0, 1, 0, 2, 3, 1, 0, 4, 3], [2, 1, 1, 1, 1, 0, 2, 1, 1], [1, 1, 1, 0, 1], [3, 4, 5, 2], [1, 1, 1, 1], [], [4, 2, 4, 4, 1, 2, 4, 2, 0, 1, 0, 4, 2, 0, 2, 4, 1, 1], [0, 3, 2, 0, 2, 1], [4], [2, 2, 1, 2, 0], [1, 2, 3, 0], [6], [5], [8], [15]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 14, 14, 11, 0, 51, 14, 13, 9, 5, 4, 4, 0, 18, 6, 1, 5, 4, 1, 1, 1, 1], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l ( saveOrd(getCharFromString(\"\"f\"\".capitalize().rstrip(getCharFromString(in0[:mod(int(7.0),int(5.0))], i2)[i0:])[int(1.0):], len(\"\"8\"\"))) * saveOrd(in1) ):{:\\nb1 = True\\nin2 = s2[( abs(min(( i2 - i1 ), ( max(int(1.0), mod(int(8.0),min(abs(len(saveChr(int(7.0))[max(( int(7.0) - int(1.0) ), ( int(8.0) - mod(divInt(i0,( i1 - ( i2 + i1 ) )),int(8.0)) )):min(i2, mod(( saveOrd(\"\",\"\") * len(\"\"G\"\") ),i0))])), i1))) - int(9.0) ))) - int(41.0) ):].capitalize()\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1], [1, 2, 1, 0, 2, 0, 0], [2, 0], [0, 2, 0, 0, 0], [0], [0, 0, 0], [], [], [3, 1, 1, 2, 0], [3, 3, 1], [0, 1, 0, 2, 2, 0, 2, 1], [0, 0, 0], [1, 2, 0], [3, 2, 0], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 8, 5, 2, 6, 3, 9, 8, 2, 6, 6, 1, 9, 7, 9, 0, 7, 6, 5, 8, 3, 0, 3, 2, 1, 0, 3, 7, 5, 4, 5, 9, 6, 1, 7, 4, 6, 5], [2, 0, 2, 0, 0, 2, 0, 2, 0, 2, 1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 2, 2], [], [1, 3, 0, 2, 2, 1, 1, 0, 1, 2, 2, 1, 1, 3, 0, 1, 0, 3, 3, 3, 2, 1, 2, 0, 3, 1, 0, 0, 2, 1, 2, 2, 1, 1, 1, 2, 0, 2, 1, 1, 3, 2, 3, 0, 2, 2, 2, 3, 2, 2, 3, 1, 1, 1, 2, 0, 2, 1, 3, 1, 2, 2, 1, 2, 2, 2, 0, 1, 0, 1, 2, 1, 1, 3, 3, 2, 3, 3, 3, 2, 3, 1, 1, 3, 3, 3, 3, 0, 2, 1, 2, 0, 2, 0, 3, 0, 0, 0, 0, 2, 3, 1, 0, 3, 2, 3, 2, 1, 2, 3, 0, 1, 0, 2, 0, 2, 3, 3, 2, 0, 0, 3, 2, 1, 2, 0, 0, 1, 1, 1, 1, 2, 1, 1, 0, 1, 0, 3], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0], [4, 2, 0, 4, 4, 2, 2, 3, 2, 0, 2, 3, 4, 3, 4, 0, 2, 1, 3, 2, 3, 4, 0, 2, 4, 4, 0, 0, 4], [2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 0, 2, 1, 1, 2, 2, 2], [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 3, 2, 3, 1, 1, 2, 5, 5, 1, 5, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [4, 4, 0, 4, 2, 2, 1, 1, 3, 2, 2, 1, 1, 3, 1, 4, 2, 0, 4, 2, 2, 0, 2, 4, 4, 4, 1, 0, 2, 2, 0, 1, 0, 1, 4, 4, 2, 4, 2, 1, 0, 2, 4, 1, 1, 2, 2, 4, 4, 2, 1, 4, 0, 0, 1, 0], [2, 3, 1, 0, 1, 2, 3, 2, 3, 3, 2, 0, 3, 3, 1], [1, 0, 3, 1, 4, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 2, 1, 2, 0, 1, 2, 0], [0, 1, 1, 2, 2, 0, 2, 1, 1, 2, 1, 3], [13, 9], [21, 5, 21, 4, 5], [8, 4, 2, 8], [11]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 1, 1, 2, 1, 0, 0, 7, 7, 3, 0, 16, 4, 2, 2, 2, 1, 1, 0, 7, 3, 1, 2, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( int(2.0) \\ge saveOrd(in2.rstrip().capitalize()) and not saveChr(i2) not in \"\"N\"\"[mod(( int(2.0) * int(2.0) ),i0):int(8.0)][mod(( int(5.0) * int(2.0) ),abs(i2)):int(6.0)] )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [2, 1, 0, 0, 2, 1], [0, 2], [1, 0, 1, 0], [0], [0, 0], [], [], [1, 1], [4, 1], [0, 1, 1], [0, 0], [5], [1], [], [0], [], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [4, 3, 3, 8, 2, 8, 1, 4, 5, 4, 3, 8], [0, 1, 0], [1, 0], [0, 1, 1, 1, 2, 2, 3, 1, 1, 1, 3, 3, 1, 3], [0, 0], [1, 2, 2, 3], [1, 0, 1], [], [2, 0, 1], [0, 1], [0], [0, 1, 0], [], [], [], [1, 0], [17], [3], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 2, 0, 0, 2, 2, 3, 2, 0, 1, 0, 1, 0, 12, 12, 3, 2, 14, 2, 4, 3, 0, 2, 2, 1, 2, 0, 0, 0, 2, 1, 1, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\ni0 -= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = True\\ni0 = int(4.0)\\nloopBreak% = 0\\nwhile int(3.0) \\le int(3.0):{:\\nb1 = ( ( max(int(828145.0), int(4.0)) + int(3.0) ) - abs(abs(int(8.0))) ) \\g len(\"\"dR\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1], [1, 2, 0, 2, 1], [0, 0], [1, 0, 1, 0], [0, 0], [0], [], [], [1, 0], [0, 1], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [2, 3, 5, 2, 9, 1, 9, 0], [0, 1, 1, 2, 2, 0, 2, 1, 1], [0, 1], [0, 2, 1, 2, 2, 1, 1, 2, 0, 3, 3, 1, 3, 0, 2, 1, 2, 0, 0, 1, 0, 3, 1, 0, 1], [0, 0, 0, 1, 1, 1], [2, 1, 1, 2], [1, 1, 0, 2], [0, 0, 0], [1, 3], [0, 1], [0, 0], [4, 1], [1], [], [], [3, 3], [], [], [], [14, 2]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 2, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 8, 2, 23, 6, 4, 4, 3, 2, 2, 2, 2, 1, 0, 0, 2, 0, 0, 0, 2], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i1\\nloopBreak% = 0\\nfor s1 in saveChr(( int(2.0) - ( ( int(3.0) - int(5.0) ) + divInt(i1,abs(max(int(2.0), max(i2, divInt(int(9.0),divInt(i2,i0)))))) ) )):{:\\nb1 = int(1.0) \\l i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in0 in \"\"+\\\\\\t\"\":{:\\ni1 *= abs(int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [3], [], [0], [], [], [1], [], [1], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 9, 3, 7, 4, 3, 1, 8, 5, 7, 0, 4, 7, 3], [0, 1, 1, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 1, 2], [], [3, 3, 3, 2, 0, 0, 0, 3, 2, 1, 2, 0, 2, 0, 3, 0, 2, 1, 2, 2, 0, 3, 3, 1, 3, 2, 2, 1, 0, 0, 1, 2, 2, 3, 2, 2, 1, 3, 3, 2, 3, 1, 2, 1, 1, 0, 2, 2, 2, 3, 1, 3, 2, 2, 3, 3, 3, 1, 0, 1, 0, 3, 3, 0, 0, 0, 2, 0, 1], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1], [0, 2, 0, 3, 0, 0, 2, 2, 3, 1, 2, 0, 0, 3, 3, 2, 3, 4, 0], [0, 2, 1, 1, 1, 2, 1, 2, 1, 2, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0], [2, 1, 3, 0, 3], [0, 1, 0, 0, 1, 1], [], [4, 1, 4, 2, 1, 0, 0, 2, 0, 0, 4, 1], [0, 0, 0], [], [0, 2], [0, 3, 1, 3, 2, 2], [3], [4], [8, 6], [15, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 16, 0, 69, 21, 19, 14, 7, 5, 6, 0, 12, 3, 0, 2, 6, 1, 1, 2, 2], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = getCharFromString(\"\"D,\"\", min(abs(min(mod(i0,i1), i1)), len(getCharFromString(\"\"e,8\"\"[divInt(int(39.0),( i2 + ( i0 * min(i0, ( int(3.0) - ( mod(i0,min(abs(int(7.0)), abs(divInt(( int(4.0) - i0 ),i2)))) - int(3.0) ) )) ) )):( ( len(s1) * ( mod(int(1.0),max(abs(( min(int(8.0), ( int(5.0) - int(7.0) )) * i2 )), ( ( mod(min(int(0.0), len(in0)),( ( len(s0[abs(len(in0)):]) - int(4.0) ) * i2 )) + int(7.0) ) - i0 ))) + saveOrd(getCharFromString(\"\"6\"\", min(i0, i0))) ) ) - i1 )], divInt(i2,int(3.0))))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1], [1, 4, 4, 9, 8, 8, 7, 1, 0, 7], [0, 0, 2, 2, 1, 2, 0, 0, 0, 0, 1], [1], [0, 2, 0, 2, 3, 3, 0, 0, 0, 0, 2, 3, 0, 2, 3, 2, 2, 1, 2, 2, 3, 1, 0, 1, 3, 3, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 4, 1, 4, 2], [0, 2, 1, 2], [0, 1, 0, 1, 1], [3], [1], [0], [2, 4, 4, 2, 1], [1, 1], [], [1, 0], [1], [], [23], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 11, 1, 31, 8, 7, 4, 5, 1, 1, 1, 5, 2, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in saveChr(i0)[:( i0 + divInt(max(min(i2, i2), i1),i2) )]:{:\\ni0 *= ( max(i0, mod(saveOrd(saveChr(divInt(mod(int(1.0),( mod(max(int(4.0), i0),int(4.0)) - saveOrd(\"\"x\"\"[abs(i0):i1]) )),int(9.0)))),int(887.0))) * int(107.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 0, 2, 0, 1, 2, 2, 0, 0], [2, 0, 1, 1], [0, 1, 1, 2, 1], [0], [0, 0, 0, 0], [], [], [1], [1], [0, 1, 2, 0, 0, 0], [0], [4], [2, 2, 1, 1], [], [0, 0], [0, 1], [1, 1, 1, 1, 1, 1, 1], [7, 1, 7, 3, 5, 4, 8], [2, 2, 2, 1, 0, 0, 2, 2, 2, 1, 1], [0, 1, 1], [2, 3, 0, 0, 2, 2, 2, 1, 3, 3, 1, 0, 2, 2, 0, 3, 0, 1, 2, 3, 1, 3, 1, 0, 1, 0, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0, 0, 0], [4, 0, 2, 3, 4, 4, 4], [0, 2, 2, 1, 0, 2, 2], [1, 1, 0], [4, 5, 4, 0, 4], [1, 1, 1, 1], [0], [1, 1, 2, 2, 4, 4, 1, 0, 0, 1, 2, 4], [1, 1, 1], [], [1, 1, 2], [2, 2, 2, 0], [8], [], [2, 9, 2], []], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 4, 5, 1, 4, 0, 0, 1, 1, 6, 1, 1, 4, 0, 2, 2, 6, 6, 10, 3, 26, 7, 6, 6, 3, 4, 4, 1, 10, 2, 0, 2, 4, 1, 0, 3, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not mod(saveOrd(\"\"2\"\"),i2) \\g i2:{:\\nb1 = \"\"9\"\".startswith(saveChr(mod(( ( int(7.0) + min(abs(int(1.0)), i2) ) * divInt(( i1 * len(saveChr(i0)) ),int(7.0)) ),( saveOrd(\"\"2\"\") - int(3.0) )))[:saveOrd(in1)][:int(5.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in in1:{:\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(4.0)\\nif not True:{:\\nif True:{:\\ns0 = \"\"I\"\"\\n:}else:{:\\ni2 *= i1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 2, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1], [0, 0, 0, 1], [1, 1, 0, 1, 2, 2, 2, 1], [0, 0, 0], [0], [], [], [3], [3], [2, 1], [0], [3], [], [], [], [0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [3, 3, 6, 4, 1, 6, 0, 7, 4, 4, 5], [1, 2, 0, 2, 0, 1, 2, 2, 0, 0, 2, 0, 0, 2, 0], [1, 0, 0, 1], [2, 3, 3, 0, 0, 3, 1, 0, 1, 1, 2, 0, 2, 0, 0, 1, 0, 0, 1, 3, 3, 2, 3, 3, 1, 0, 0, 1, 0, 1], [1, 0, 0, 1], [2, 2, 0, 2, 3, 3, 0], [1, 0, 2, 1], [1, 0], [2, 4, 4, 0, 1, 0, 2, 0, 1, 1, 4], [1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0], [2, 0, 0, 2, 4, 0, 1, 3, 3, 2, 4, 3, 4, 1, 1, 1, 1, 4, 0, 3, 2, 1, 4, 2, 0], [1, 2, 2, 1, 1], [], [2, 1, 0, 2, 1], [3, 0, 3, 3, 1, 1, 0, 3], [10, 4], [4, 7], [], [7, 1, 8, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 12, 12, 4, 8, 3, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 11, 11, 15, 4, 30, 4, 7, 4, 2, 11, 8, 3, 25, 5, 0, 5, 8, 2, 2, 0, 4], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= mod(abs(abs(i2)),i0)\\nloopBreak% = 0\\nfor s2 in in1[min(int(3.0), i2):]:{:\\nloopBreak% = 0\\nfor in1 in s0:{:\\ni0 = int(3.0)\\nloopBreak% = 0\\nfor s1 in saveChr(int(6.0))[:( i1 + ( i2 * i2 ) )]:{:\\nres0 = s0 != \"\"$\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(416.0)\\ns2 = (((\"\"K\"\".capitalize() + \"\"\\\\\\n\"\").capitalize()[i0:i2] + \"\"%\"\") + \"\"eh\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = saveChr(int(0.0))\\nif abs(len(s1)) \\ge divInt(len((\"\"E\"\"[min(int(7.0), i0):] + saveChr(i0))),int(44.0)):{:\\ns1 = in1[:i2]\\n:}\\ni0 -= int(5.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 0, 0], [1, 1], [2, 0], [], [0, 0], [], [], [3], [5, 0], [1, 1, 2], [0, 0], [2], [], [], [], [0, 0], [1, 1, 0, 1], [5, 8, 1, 1], [0, 0, 0, 2, 0], [], [2, 1, 1, 0, 1, 0, 0, 3, 0, 0], [1], [0], [], [0], [5, 0], [1, 0, 1, 0, 1], [], [1, 2, 4, 1, 1], [0], [], [2], [3, 0, 2, 1, 0], [8, 23], [1], [3], [11]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 2, 4, 4, 5, 0, 10, 1, 1, 0, 1, 1, 5, 0, 5, 1, 0, 1, 5, 2, 1, 1, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif divInt(int(5.0),int(8.0)) != i0:{:\\nif int(11.0) \\l i0:{:\\nin2 = \"\"(\"\"\\nres0 = getCharFromString(\"\"I3\"\", i0)[min(i2, i0):] == \"\"bX\"\"\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 0, 1], [2, 5, 4, 0, 8, 1], [2, 2, 2, 0], [0], [3, 0, 1, 1, 0, 0], [], [3], [], [], [3, 5, 3, 5, 0, 3], [0, 1], [], [3, 0, 2, 2, 3, 2, 1, 2, 3, 3, 3, 0, 0, 0, 4, 0, 0], [3], [5], [2, 2, 1, 0], [3, 1], [], [24], [], [10]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 4, 1, 6, 0, 1, 0, 0, 6, 2, 0, 17, 1, 1, 4, 2, 0, 1, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = len((in0 + (\"\"\"\\\\\"y\"\"[:i2] + (((in2 + in0) + in2) + s0.strip(in0))[int(25.0):int(4081.0)])[i2:][i0:]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1], [6, 5, 6, 5], [0, 0, 2, 2, 0], [], [3, 0, 1, 2, 2, 2, 0, 0, 2, 3, 1, 0, 2, 3, 0, 1], [0, 1, 0, 1, 1], [0, 4, 2], [2, 0], [1, 1, 0], [3, 3, 0, 2], [1], [], [2, 2, 0, 3, 4, 3, 0, 4, 1, 0], [3, 1], [3], [2, 1], [1], [], [10], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 0, 16, 5, 3, 2, 3, 4, 1, 0, 10, 2, 1, 2, 1, 0, 1, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0[:min(i0, int(6.0))][( mod(( i0 * i2 ),mod(saveOrd(((s0 + saveChr(int(5.0))).lstrip(\"\"k\"\") + s2)),i2)) + divInt(abs(i0),int(65.0)) ):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1], [2, 2, 1, 2, 2, 1, 1, 0], [2, 2, 1, 1, 0], [2, 0, 2], [0], [0], [], [], [1, 2], [0, 1], [0, 0, 1, 2, 0, 1, 2, 2, 0], [0, 0], [4, 3, 1], [2, 3, 2, 0], [1], [0], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 5, 4, 9, 6, 8, 8, 7, 3, 8, 2, 9, 5, 1, 6, 0], [2, 1, 1, 2, 2, 1, 1, 2, 0, 1, 1, 0, 1, 2, 0], [], [0, 2, 3, 0, 1, 2, 3, 0, 3, 0, 0, 0, 1, 3, 1, 3, 1, 2, 1, 2, 2, 3, 2, 2, 2, 0, 0, 3, 0, 2, 3, 1, 1, 3, 2, 2, 2, 3, 2, 2, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 2, 0, 1, 3, 1, 3, 4, 2, 1, 0, 0], [0, 0, 1, 2, 2, 2, 0, 1], [1, 1, 1, 0, 0, 0, 1], [3, 0, 3, 5, 0, 0, 1, 2, 0, 5, 4, 3], [1, 1, 1], [0], [4, 1, 2, 4, 0, 1, 0, 4, 2, 0, 4, 2, 2, 0, 0, 0, 4, 0, 0, 0, 4], [0, 2, 2, 2, 1], [], [0, 2, 0, 2], [0, 1, 1], [11], [24, 18], [0], []], "fitness": 9223372036854775807, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not ( i2 \\l ( max(i1, int(6.0)) + mod(abs(i1),min(i2, i2)) ) or getCharFromString(\"\"L\"\", i1).startswith(in0.capitalize()[int(5.0):max(int(4.0), len(\"\"y\"\"))]) ):{:\\nloopBreak% = 0\\nwhile not int(9.0) \\g ( int(6.0) + ( mod(max(( ( ( i1 - i2 ) * len(s0) ) * i0 ), mod(saveOrd(in0[int(8.0):].capitalize()),int(8.0))),abs(divInt(( ( max(divInt(divInt(min(int(7.0), mod(i1,int(3.0))),i1),i0), i1) * int(8.0) ) + int(2.0) ),int(9.0)))) - int(5.0) ) ):{:\\nin2 = s0[min(int(1.0), int(6.0)):][int(0.0):i2].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif s0 != s1:{:\\nif saveChr(i0) not in s2:{:\\nb1 = b2\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = in2\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 4, 3, 0, 0, 0, 0, 2, 2, 9, 2, 3, 4, 1, 0, 2, 16, 16, 15, 0, 58, 15, 12, 8, 7, 10, 2, 0, 19, 5, 0, 4, 2, 1, 1, 0, 0]}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [2, 2, 2, 1, 2, 2, 2, 1, 1, 1], [1, 0, 0, 0, 0, 2], [0, 0, 2, 1], [0, 0, 0, 0], [0], [], [], [1, 0], [0, 5, 1], [1, 0, 1, 0, 1], [0, 0, 0], [], [1, 2], [], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 7, 1, 7, 2, 2, 0, 4, 3, 0, 7, 6, 1, 3, 9, 1, 0, 7, 7, 7, 2, 9, 1, 5, 2, 6, 1, 9, 7, 3, 4], [1, 2, 1, 1, 1, 2, 2, 0, 2, 1, 2, 2, 0, 2, 0, 0, 1, 2, 1, 0, 1, 2, 1, 1, 0, 0, 2, 2, 2, 0, 2, 2, 2, 1, 1, 2], [1], [1, 3, 0, 1, 2, 3, 0, 0, 1, 2, 3, 3, 2, 1, 2, 0, 1, 0, 0, 3, 3, 2, 0, 1, 1, 3, 2, 0, 0, 3, 2, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 2, 2, 2, 0, 2, 3, 3, 1, 3, 0, 3, 0, 0, 3, 1, 0, 1, 2, 3, 0, 3, 1, 1, 1, 3, 0, 2, 3, 2, 0, 1, 1, 3, 0, 2, 2, 1, 2, 2, 3, 2, 0, 3, 1, 2, 1, 0, 1, 2, 2, 0, 0, 1, 3, 1, 2, 1, 0, 3, 2, 0, 1, 0, 0, 0, 1, 2, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 0, 1, 2, 3, 3, 2, 0, 1, 1, 0, 4, 0, 3, 2, 3, 1, 1, 0, 3, 1], [1, 1, 2, 1, 2, 1, 0, 1, 2, 0, 1, 1, 0, 1, 1, 2], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0], [3, 4, 3, 4, 2, 0, 3, 1, 0, 1, 2, 5, 0, 5, 4, 2, 5], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0], [4, 0, 1, 3, 1, 4, 0, 4, 1, 3, 3, 2, 4, 2, 1, 1, 1, 4, 1, 4, 1, 4, 0, 0, 3, 3, 2, 3, 0, 3, 2, 0, 3, 3, 4, 3, 4, 2, 2, 4, 0, 4, 1, 2, 1, 2, 2, 2, 2, 1, 4, 0, 0, 0, 2, 4, 2, 0, 1, 0], [3, 3, 2, 0, 0, 3, 0, 0, 0, 0, 0, 2, 0], [4, 4, 2], [0, 0, 1, 2, 2, 0, 0, 2, 0, 0, 2, 1, 1], [1, 0, 3, 2, 1, 0, 3, 2, 2, 2, 1, 0, 0, 1, 3], [2, 20, 1, 8], [11, 19, 9, 7], [6, 4, 0, 5], [4, 23, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 6, 4, 4, 0, 0, 0, 2, 3, 5, 3, 0, 2, 0, 1, 1, 31, 31, 36, 1, 111, 25, 22, 16, 10, 17, 15, 4, 60, 13, 3, 13, 15, 4, 4, 4, 3], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l min(i1, int(7.0)):{:\\nloopBreak% = 0\\nfor in0 in in1.rstrip(\"\"lC!\"\"):{:\\nloopBreak% = 0\\nfor in0 in (\"\"6\"\" + in1.rstrip(\"\"t\"\".capitalize())):{:\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s2 in ((getCharFromString(\"\"U\"\"[( len(\"\">\"\") - i2 ):i1], int(1.0))[( min(max(( int(7.0) - divInt(i1,int(2.0)) ), i1), i2) * abs(len(\"\"4\"\")) ):( i2 - int(2.0) )] + getCharFromString(\"\"0\"\", int(0.0))) + \"\"5\"\".strip()):{:\\nloopBreak% = 0\\nfor s0 in getCharFromString(in0, len(s1)):{:\\nloopBreak% = 0\\nwhile ( i0 * i2 ) != abs(divInt(i1,i2)):{:\\nb0 = not i2 \\g i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = (((s1 + (s2[int(4.0):] + ((getCharFromString((getCharFromString(getCharFromString(in2, i2)[int(3.0):int(0.0)][int(7.0):], i0) + getCharFromString(\"\"j\"\", ( mod(( i0 - ( min(max(int(6.0), max(i1, min(i2, i1))), saveOrd(\"\"B\"\"[int(1.0):i0])) + int(3.0) ) ),mod(min(i1, len(\"\"I\"\"[int(9.0):][int(1.0):int(0.0)][abs(i2):( len(s0.capitalize()) - ( i1 * int(7.0) ) )][int(7.0):])),max(i1, ( ( int(7.0) + ( mod(max(( i0 - min(int(2.0), mod(int(9.0),i0)) ), int(1.0)),mod(( i2 - i2 ),int(5.0))) + len(in2) ) ) - int(2.0) )))) - divInt(int(6.0),i2) ))), max(mod(i0,int(1.0)), i2)) + in1) + getCharFromString(s2[:i2], i2)[:int(9.0)])))[:divInt(i1,i1)] + \"\"h*\"\") + in2)\\ni2 *= int(734.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 8, 8, 6, 3, 6, 6, 1, 9, 9, 7], [2, 1, 1, 2, 2, 2, 2], [1, 0], [0, 2, 2, 2, 0, 2, 2, 2, 3, 1, 0, 1, 2, 2, 3, 2, 3, 0, 3, 1, 0, 2, 1, 3, 1, 2, 1, 1], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [1, 3, 3, 2, 2], [1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1], [], [1, 1], [], [1, 1], [], [], [], [3, 3], [], [], [], [0, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 7, 2, 28, 11, 5, 4, 8, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\ni1 = divInt(( mod(i2,divInt(divInt(divInt(max(int(1.0), i2),int(18.0)),divInt(( len(\"\"\"\") - mod(len(\"\"`\"\"),i2) ),abs(int(8.0)))),i2)) + mod(int(63.0),abs(int(661.0))) ),( int(99.0) + int(7.0) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [], [], [2], [], [], [], [], [2], [1], [], [4, 1, 4], [3, 1], [0], [], [1], [5], [6], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 1, 1, 0, 1, 0, 1, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"g\"\".lstrip()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 2, 5, 8, 3, 5, 1, 2, 2, 4, 5, 8, 8, 4, 7, 9, 7], [2, 0, 1, 2, 1, 0, 0, 0, 0, 2, 1, 1, 1, 0, 2, 2, 2, 1, 2, 1, 0, 1, 2, 2, 2, 0, 2, 1], [0], [3, 3, 1, 2, 3, 3, 3, 1, 0, 2, 3, 3, 2, 2, 2, 1, 1, 0, 0, 0, 0, 2, 3, 3, 2, 1, 3, 3, 3, 0, 3, 2, 3, 1, 2, 3, 3, 2, 3, 2, 0, 3, 0, 3, 1, 0, 3, 0, 0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 1, 2, 3, 0, 1, 1, 3, 3, 0, 0, 2, 0, 1, 3, 2, 3, 3, 0, 2, 3, 2, 3, 2, 2, 1, 1, 2, 3, 0, 2, 2, 1, 3, 1, 0, 0, 0, 0, 3, 1, 0, 3, 3, 3, 2, 2, 1, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [2, 3, 4, 4, 1, 3, 0, 1, 0, 2, 3, 0, 3, 2, 1, 4, 1, 1, 4, 2, 4, 4, 3, 2, 2, 0, 1, 1, 2, 3, 0, 0, 0, 1, 3, 3], [1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [2, 2, 2, 5, 0, 2, 3, 4, 0], [1, 1, 1, 1, 1], [], [2, 2, 2, 2, 0, 0, 0, 4, 2, 4, 2, 2, 0, 4, 4, 0, 2, 1, 1, 0, 1, 4, 4, 4, 0, 2, 0, 2, 1, 4, 0, 1], [1, 0, 2, 2, 3, 0, 3, 1], [3, 5], [1, 2, 1, 0, 1, 1, 2, 1, 2, 0], [3, 1, 3, 1, 0], [5], [17, 5], [], [17, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 28, 1, 108, 27, 36, 13, 14, 9, 5, 0, 32, 8, 2, 10, 5, 1, 2, 0, 2], "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(len(s2[int(5.0):divInt(saveOrd(s2),saveOrd(s2))][:max(int(1.0), i0)][divInt(len(saveChr(min(mod(( ( int(2.0) - int(5.0) ) + i1 ),i2), i1))),i0):][:divInt(max(min(divInt(int(8.0),abs(len(getCharFromString(in2[min(i0, len(s0.capitalize().capitalize())):][:mod(abs(int(3.0)),( max(saveOrd(\"\".\"\"[:mod(max(( i0 * max(i0, saveOrd(\"\"r\"\")) ), int(5.0)),i2)]), abs(i1)) + i1 ))], mod(divInt(i1,int(1.0)),( ( saveOrd(s2) + i0 ) + saveOrd(\"\"(\"\") )))[:int(2.0)]))), mod(len(getCharFromString(in0.strip(in1[i2:]), int(2.0)).lstrip(\"\"f\"\"[int(4.0):abs(abs(i2))])),i2)), ( i1 - int(5.0) )),min(( max(max(i2, mod(abs(( len(saveChr(( ( int(8.0) + int(8.0) ) + ( min(i1, mod(( int(4.0) + min(int(7.0), i0) ),i1)) + i2 ) ))) - i2 )),min(int(9.0), i2))), max(len(s0), len(\"\"F\"\"))) + divInt(mod(int(7.0),i0),i2) ), i1))]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 1], [2, 0, 2, 1, 1], [2, 1], [1, 2, 1], [], [0], [], [], [], [5], [0, 1], [0], [], [1], [], [1], [1], [1, 1, 1, 1, 1, 1, 1], [1, 4, 8, 4, 5, 3, 5], [0, 1, 0, 2, 1, 2, 2, 0, 1, 1, 1, 2, 0, 2, 2], [1, 1], [2, 1, 1, 2, 3, 0, 1, 3, 2, 3, 0, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 2, 0, 1, 3, 2, 2, 0, 0, 2, 1, 3, 3, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 2, 0], [0, 0, 0, 0, 0, 0, 2, 2], [1, 0, 1, 0], [0, 3], [1], [], [2, 4, 4, 2, 0, 2, 4, 4, 1], [0, 1, 0, 3], [0], [0, 0, 2], [3], [], [], [], [0]], "fitness": 9223372036854775807, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile False:{:\\ni0 += ( int(1.0) + int(4.0) )\\nif ( len(getCharFromString(saveChr(i1), int(8.0))[len(s0[mod(abs(i0),int(4.0)):i2]):i1]) + i2 ) != i2:{:\\nin0 = getCharFromString(\"\"\"\".lstrip(), ( i0 + i1 ))[int(5.0):]\\n:}else:{:\\ni1 += i1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 0, 1, 1, 5, 5, 11, 2, 21, 4, 3, 5, 1, 2, 1, 0, 9, 4, 1, 3, 1, 0, 0, 0, 1]}, {"genotype": [[0], [1, 1, 0, 0, 0, 1], [2, 2, 1, 1, 0, 1], [2, 1], [1, 0, 0, 1], [], [0], [], [], [2, 0, 2], [1, 2, 0, 2], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0], [], [3, 0], [1], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [2, 9, 8, 4, 9, 2, 5, 6, 9, 3, 9, 8, 1, 6, 5, 5, 4, 6, 8, 1, 0, 6, 2, 0, 6, 6, 7, 0, 1, 9, 4, 4, 0, 5, 1, 6, 0], [0, 0, 1, 2, 1, 0, 2, 0, 2, 2, 0, 2, 0, 2, 0, 2, 1, 2, 2, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 1, 0], [1, 0], [3, 0, 1, 2, 3, 2, 1, 3, 3, 2, 2, 2, 2, 1, 0, 0, 3, 0, 1, 2, 3, 0, 0, 3, 1, 0, 2, 3, 1, 3, 2, 1, 2, 2, 2, 0, 0, 0, 3, 2, 1, 3, 0, 0, 2, 3, 2, 2, 3, 3, 3, 2, 0, 1, 2, 1, 2, 3, 1, 0, 2, 1, 0, 3, 1, 2, 3, 3, 3, 2, 3, 1, 2, 1, 0, 3, 2, 2, 2, 0, 0, 2, 1, 1, 1, 3, 3, 3, 0, 3, 1, 3, 0, 0, 2, 0, 1, 1, 0, 3, 3, 3, 1, 3, 2, 3, 3, 2, 1, 2, 1, 0, 0, 0, 3, 0, 1, 2, 2, 0, 2, 3, 2, 3, 2, 3, 0, 1, 1, 0, 3, 1, 3, 1, 1, 0, 2, 0, 1, 2, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [3, 1, 2, 1, 3, 2, 0, 1, 3, 0, 1, 4, 2, 4, 2, 1, 2, 2, 1, 2, 0, 0, 1, 3, 2, 2, 3, 1, 0, 4, 1, 2, 3, 2, 0, 4, 3, 2, 0], [2, 2, 0, 2, 1, 0, 1, 1, 2, 0, 1, 1, 0, 2, 2, 2, 0, 2], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [3, 0, 1, 2, 1, 5, 5, 1, 1, 0], [1, 1], [], [0, 0, 4, 3, 0, 4, 4, 2, 4, 4, 0, 2, 2, 2, 0, 2, 1, 0, 2, 1, 0, 2, 0, 0, 0], [2, 2, 0, 0, 0], [], [2, 2, 1, 2, 2, 0, 0], [2, 3], [], [], [7], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 0, 1, 0, 0, 3, 4, 6, 4, 0, 2, 1, 0, 1, 37, 37, 34, 2, 142, 38, 39, 18, 21, 10, 2, 0, 25, 5, 0, 7, 2, 0, 0, 1, 1], "tree_depth": 64, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( len(in0) \\g i0 or int(2.0) == ( max(divInt(int(9.0),abs(max(mod(( ( ( int(8.0) * i0 ) * i1 ) + len(s0) ),i2), int(4.0)))), divInt(abs(i1),i0)) * min(int(9.0), i2) ) ):{:\\nif ( max(int(2.0), len((s1 + getCharFromString(getCharFromString(getCharFromString(s2, ( int(5.0) - ( ( mod(i0,i2) + i2 ) - min(mod(int(6.0),max(i0, i2)), divInt(saveOrd(s1[( ( abs(saveOrd(\"\"7\"\"[abs(mod(i0,int(9.0))):])) - mod(int(3.0),mod(max(int(9.0), i2),mod(int(8.0),i0))) ) * abs(int(1.0)) ):][:( abs(max(abs(mod(min(int(6.0), mod(int(5.0),i2)),min(mod(( ( i1 + i2 ) - divInt(int(5.0),int(4.0)) ),int(6.0)), max(len(in2), abs(i2))))), abs(int(8.0)))) - len(\"\"%\"\"[i0:i1]) )][divInt(i1,int(1.0)):]),int(0.0))) ) )), i0)[max(min(saveOrd(in2), int(6.0)), max(divInt(abs(len(s1[( int(2.0) + ( int(0.0) * i0 ) ):i0])),i0), abs(i1))):], int(6.0)).capitalize()).capitalize())) * divInt(( i0 * divInt(min(divInt(saveOrd(s1),mod(len(s0),i0)), int(6.0)),int(701.0)) ),i2) ) \\l abs(int(94.0)):{:\\ni1 += min(int(40.0), int(5.0))\\nb2 = i0 == mod(i1,int(1.0))\\nb0 = b2\\ni0 = ( int(6.0) * int(0.0) )\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 2, 0], [0], [1, 2, 0, 1, 2], [0], [0, 0, 0, 0], [], [], [3], [], [2], [], [4], [], [], [], [], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [1, 5, 9, 1, 0, 4, 6, 8, 1, 7, 2, 4, 1, 8, 8, 4, 7, 2, 8, 8, 3, 7, 0, 2, 0, 7, 9, 4, 6, 7, 1, 2, 5, 7, 4, 5, 6, 8, 1, 4, 7, 4, 7, 3, 0, 8, 6, 2, 7, 4, 8, 9, 9, 7, 5, 7, 4, 3, 0, 3, 4, 1], [0, 2, 0, 1, 2, 2, 1, 0, 0, 2, 1, 1, 0, 2, 2, 0, 2, 0, 2, 0, 2, 0, 1, 2, 2, 2, 1, 2, 0, 0, 1, 2, 0, 1, 1, 0, 0, 2, 0, 1, 0, 1, 0, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2], [1, 1], [0, 2, 3, 0, 1, 0, 0, 1, 2, 0, 2, 0, 3, 1, 3, 0, 0, 3, 1, 3, 0, 1, 2, 1, 1, 3, 3, 1, 1, 0, 2, 0, 1, 0, 3, 1, 2, 3, 3, 3, 0, 1, 3, 1, 0, 0, 3, 3, 2, 1, 3, 3, 1, 2, 2, 3, 1, 2, 1, 2, 3, 2, 2, 2, 0, 1, 2, 3, 3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 3, 3, 0, 0, 0, 1, 2, 3, 1, 2, 1, 2, 2, 1, 2, 2, 0, 2, 1, 1, 3, 2, 0, 3, 0, 2, 3, 1, 3, 0, 3, 2, 2, 2, 2, 0, 3, 0, 0, 2, 3, 3, 3, 2, 2, 2, 0, 0, 1, 2, 2, 2, 2, 0, 1, 3, 1, 0, 0, 2, 2, 0, 0, 3, 2, 1, 2, 3, 2, 1, 0, 0, 0, 3, 0, 3, 3, 2, 0, 0, 0, 1, 3, 2, 3, 0, 2, 3, 2, 2, 2, 1, 3, 1, 3, 1, 2, 0, 3, 1, 0, 3, 2, 3, 3, 1, 1, 0, 1, 1, 3, 1, 1, 2, 1, 3, 1, 3, 3, 0, 0, 0, 1, 1, 2, 3, 3, 0, 1, 3, 3, 2, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 0, 2, 0, 3, 0, 4, 1, 4, 2, 3, 3, 2, 2, 2, 1, 4, 2, 3, 4, 4, 1, 3, 1, 2, 4, 3, 1, 2, 0, 1, 2, 1, 0, 1, 4, 2, 1, 2, 3, 4, 1, 4, 4, 1, 4, 4, 4, 0, 0, 4, 0, 0, 0, 3], [1, 1, 0, 1, 1, 0, 2, 1, 1, 1, 2, 2, 1, 0, 1, 1, 2, 2, 1, 1, 2, 0, 0, 0, 1, 2, 2, 2, 1, 1, 0, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [2, 3, 1, 1, 5, 3, 2, 1, 4, 0, 1, 3, 5, 5, 4, 2, 2, 2, 4, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0], [3, 2, 3, 3, 4, 2, 3, 4, 2, 4, 3, 2, 2, 2, 2, 4, 4, 0, 0, 4, 1, 1, 1, 3, 2, 2, 1, 3, 4, 2, 4, 2, 0, 4, 2, 4, 1, 2, 0, 0, 0, 4, 1, 1, 3, 4, 2, 4, 4, 4, 1, 1, 0, 0, 0, 0, 2, 1, 1, 4, 2, 0, 1, 1, 0, 3, 3, 2, 3, 0, 1, 3, 1, 2, 3, 3, 4, 1, 2, 2, 1, 1, 2, 3, 0, 4, 1, 3, 0, 0, 1, 0, 4, 4, 1, 0], [2, 3, 1, 2, 2, 2, 3, 0, 1, 0, 2, 0, 3, 0, 3, 1, 1, 2, 1, 0], [1, 0, 1, 5], [1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 2, 1, 0, 1, 1], [3, 3, 2, 3, 0, 1, 0, 3, 1, 0, 2, 0, 3, 3, 3, 0, 2, 0, 1, 3, 0, 3, 3, 1, 2, 1, 2, 1, 0], [9, 8, 6, 25, 24, 14, 25, 8], [6, 7, 21, 2, 22, 18], [6, 0, 4, 3, 2], [0, 30, 0, 25, 5, 23, 8, 24, 3, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 1, 5, 1, 4, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 62, 62, 53, 2, 218, 61, 55, 35, 28, 21, 29, 1, 96, 20, 4, 21, 29, 8, 6, 5, 10], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\ns2 = ((((saveChr(divInt(max(i0, int(1.0)),i1))[i2:int(5.0)].rstrip() + (in0.capitalize().capitalize()[( i2 - ( i1 + min(int(9.0), abs(i0)) ) ):][i0:][:min(int(1.0), len(s1))][i2:] + \"\"\"\".capitalize()))[int(0468.0):].capitalize() + \"\"_\"\") + \"\"6\"\")[:( int(1.0) - int(7.0) )] + (\"\"J\"\"[min(saveOrd((getCharFromString(s1[int(2.0):], int(4.0))[i1:].lstrip() + saveChr(divInt(i1,int(1.0))))), i0):max(int(8.0), ( saveOrd(getCharFromString(\"\"g\"\", abs(len(in2[i2:int(8.0)])))[len(in0):int(4.0)]) - i2 ))][i0:abs(abs(( int(72.0) + abs(max(int(8.0), ( mod(saveOrd(s2),int(8.0)) * divInt(int(3.0),( abs(( mod(( i2 - int(7.0) ),( len(\"\"I\"\".capitalize()) - saveOrd(\"\"@\"\") )) - int(0.0) )) * int(2.0) )) ))) )))] + (getCharFromString(getCharFromString(\"\"h\"\".strip(\"\"G\"\"), int(0.0)).rstrip()[int(7.0):], divInt(mod(( divInt(divInt(mod(i0,( divInt(( saveOrd(s1) * max(i2, i0) ),i2) - int(9.0) )),( len(in1) + int(4.0) )),( int(6.0) - ( divInt(int(7.0),divInt(( i0 - ( int(1.0) * int(2.0) ) ),max(mod(i1,abs(i2)), ( saveOrd(s0) * int(5.0) )))) - len(s1) ) )) - i2 ),max(( ( divInt(divInt(i2,abs(i1)),i2) * mod(min(max(abs(( ( ( i0 + i0 ) + int(7.0) ) + ( mod(divInt(divInt(i1,int(4.0)),max(int(5.0), i2)),i0) - ( ( i1 * i1 ) * min(divInt(int(6.0),( max(divInt(int(8.0),i0), i0) * i2 )), saveOrd(\"\"0\"\"[i0:abs(max(( i1 - i0 ), i1))])) ) ) )), int(1.0)), abs(divInt(len(\"\"Z\"\"),i0))),( saveOrd(saveChr(divInt(( divInt(int(4.0),max(int(7.0), saveOrd(in0[int(4.0):( i2 - saveOrd(\"\"\"\"\") )]))) + int(7.0) ),i2))) - max(mod(saveOrd(\"\">\"\"),saveOrd(in2)), int(3.0)) )) ) - int(0.0) ), i2)),int(862.0))) + (((in2 + \"\"%\"\")[int(7.0):] + (\"\"Y4Ov\"\" + ((saveChr(saveOrd(\"\"?\"\")) + \"\"Z\"\"[:int(4.0)][int(8.0):( int(9.0) - min(int(9.0), min(saveOrd(\"\"\"\"), i1)) )]) + (in1 + \"\"(\"\".capitalize())[:i1])[:i0])) + (s2 + s2)))))\\nres0 = \"\"c3\"\".startswith(s2)\\ni1 += int(7.0)\\nloopBreak% = 0\\nfor in1 in saveChr(int(57430.0)):{:\\ns1 = getCharFromString(\"\"w2sI\"\", mod(min(min(i0, int(34.0)), min(len(s1), mod(i2,int(1.0)))),i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [], [0, 0], [], [], [0, 0], [4], [1, 2], [0], [4], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [7, 2, 1, 4, 5, 5, 4, 2, 4, 0, 6, 2, 4, 7, 6, 9, 4, 4, 8, 3, 1, 4, 3, 6, 9, 6, 3, 7, 5, 8, 9, 7, 5, 1, 8, 6, 9, 9, 4, 0, 2, 3, 7, 3, 8, 2, 2], [2, 0, 1, 0, 2, 0, 1, 0, 1, 1, 2, 0, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 2, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2, 0, 1, 1, 1, 2, 1, 2, 1, 1, 2, 0], [], [1, 1, 3, 2, 2, 3, 1, 3, 0, 2, 1, 1, 2, 0, 2, 0, 0, 3, 3, 3, 3, 3, 0, 2, 3, 0, 2, 1, 2, 3, 0, 0, 0, 1, 3, 0, 3, 2, 0, 0, 1, 2, 0, 0, 3, 2, 3, 2, 3, 0, 3, 2, 3, 1, 0, 0, 1, 2, 3, 2, 0, 3, 3, 3, 2, 2, 3, 2, 0, 3, 3, 1, 2, 1, 2, 3, 2, 2, 2, 0, 2, 2, 2, 3, 1, 0, 0, 0, 1, 2, 0, 2, 2, 0, 2, 3, 0, 1, 2, 0, 3, 3, 0, 3, 2, 2, 1, 2, 1, 2, 2, 0, 0, 3, 0, 3, 2, 2, 2, 2, 0, 0, 1, 1, 2, 3, 3, 2, 0, 3, 3, 0, 1, 3, 0, 2, 1, 0, 0, 3, 1, 2, 2, 2, 1, 3, 2, 3, 1, 0, 3, 0, 1, 0, 0, 1, 0, 1, 2, 3, 1, 3, 3, 1, 2, 0, 2, 0, 2, 0, 2, 0, 1, 3, 2, 3, 0, 3, 0, 1, 2, 2, 3, 1, 0, 1, 1, 0, 3, 3, 0, 1, 3, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 4, 0, 1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 3, 3, 3, 1, 3, 1, 2, 4, 1, 3, 2, 2, 1, 1, 1, 0, 2, 3, 3, 3, 1, 4, 1, 0, 0, 4, 4, 0, 0, 0, 0, 4, 3, 3, 4, 1, 2, 4], [2, 0, 0, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [5, 5, 1, 1, 1, 0, 1, 4, 3, 4, 4, 3, 2, 2], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [], [3, 4, 2, 3, 1, 3, 4, 2, 4, 2, 0, 0, 4, 4, 4, 0, 4, 2, 0, 4, 4, 2, 4, 0, 4, 0, 4, 1, 1, 1, 4, 1, 1, 1, 3, 0, 2, 2, 3, 0, 0, 4, 1, 1, 2, 3, 1, 1, 3, 1, 1, 3, 3, 2, 2, 0, 3, 1, 4, 3, 2, 0, 2, 2, 4, 3, 0, 1, 3, 2, 0, 0, 1], [1, 3, 3, 2, 2, 1, 0, 0, 1, 2, 3, 1, 1, 0, 0, 3], [2, 2, 3, 1], [1, 0, 0, 1, 1, 2, 1, 0, 1, 2, 0, 1, 0, 2], [2, 3, 1, 0, 1, 0, 1, 2, 1, 3, 3, 0, 0, 0, 0, 0, 1, 0, 1], [8, 21, 9, 17, 11, 17, 13, 11], [22, 6, 1, 17, 13, 24], [3, 9], [5, 1, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 47, 47, 54, 0, 197, 55, 51, 23, 32, 14, 19, 0, 73, 16, 4, 14, 19, 8, 6, 2, 3], "tree_depth": 85, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(7.0) \\le int(2.0)\\nb0 = (saveChr(len((\"\"3\"\" + (in2[( ( saveOrd(in2) * int(1.0) ) + min(i2, ( int(4.0) + int(5.0) )) ):( i0 - mod(i1,i0) )].strip()[max(min(min(max(max(i2, divInt(max(i0, divInt(int(5.0),( max(i1, i0) + i1 ))),int(4.0))), abs(i1)), max(mod(i2,i0), int(2.0))), divInt(i2,i2)), abs(( len(saveChr(( len(s1) * i1 )).capitalize().capitalize()) + len(getCharFromString(s1[:mod(max(int(4.0), i1),i1)], int(0.0))) ))):mod(len(getCharFromString(saveChr(mod(i0,max(abs(saveOrd(s1.capitalize()[:( divInt(max(( i0 - len(s0.lstrip(saveChr(abs(int(6.0))))) ), mod(int(2.0),( abs(mod(divInt(divInt(i2,divInt(divInt(divInt(max(int(4.0), i0),i1),i0),int(7.0))),divInt(i0,( divInt(i0,( max(i2, int(6.0)) * ( i0 - max(min(i0, abs(divInt(( int(9.0) - divInt(int(4.0),mod(( i0 + i0 ),len(\"\"\"\"\"))) ),i1))), len(\"\"w\"\")) ) )) + divInt(( ( ( i2 * i0 ) + int(4.0) ) - int(8.0) ),mod(len(\"\"I\"\"),max(divInt(i1,saveOrd(saveChr(max(i1, int(3.0))))), min(i1, divInt(int(1.0),i2))))) ))),i0)) + min(int(4.0), ( divInt(mod(int(3.0),saveOrd(\"\"g\"\")),( saveOrd(\"\"V\"\") - int(6.0) )) - i1 )) ))),min(i0, int(9.0))) + i0 )])), i2))), int(6.0))),i2)].strip() + \"\"b9\"\"))[:int(3758.0)])) + (s1 + (in1 + in0)[:( min(int(975.0), min(min(int(1.0), divInt(i0,divInt(i1,( i1 - mod(i1,int(8.0)) )))), saveOrd(getCharFromString(\"\"r\"\", ( len(\"\"\\\\\\n\"\") - i2 ))))) - len((\"\"=\"\" + \"\"J\"\")[i1:int(6.0)]) )][mod(mod(saveOrd((\"\"R\"\" + \"\"LR\"\")),int(9.0)),i2):])).startswith(((in1[int(94023.0):][:int(7.0)] + (\"\"Nn\"\" + getCharFromString((in1[i1:max(abs(i1), int(3.0))] + (in0 + \"\"L\"\").rstrip()[saveOrd((s2[int(8.0):] + s2)):i2][:int(22.0)]), i0))) + \"\"y\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [2, 1, 2, 2, 1, 2, 2, 0, 1, 2, 2, 1, 2, 1, 2, 0, 0, 2, 1, 0, 2, 0, 0, 1, 2, 0, 0, 1, 1, 2, 2, 0, 2, 0, 2, 1, 1, 1, 2, 0], [2, 1, 0, 1, 0, 0, 1, 2, 2, 2, 1, 0, 2, 2, 2, 0, 2], [0, 1, 1, 0, 1, 1, 1, 1, 0, 2, 1, 2, 0, 0, 2, 0, 1, 0, 0, 2, 0, 2, 2], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 3, 1, 3, 3, 0, 1, 2, 2, 2, 1, 2], [0, 4, 5, 3, 5, 5, 0, 2, 3, 1, 5, 1], [0, 1, 2, 2, 2, 0, 0, 0, 0, 1, 1, 0, 1, 2, 1, 1, 0, 1, 0, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 3, 4, 4, 1, 2, 0, 2, 3], [0, 0, 3, 3, 3, 2, 2, 0], [0, 0, 0], [], [1, 0, 1, 1], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [7, 5, 4, 0, 3, 8, 1, 8, 4, 2, 7, 5, 4, 9, 2, 7, 2, 8, 0, 6, 9, 4, 7, 3, 5, 8, 6, 3, 3, 7, 2, 1, 6, 0, 9, 4, 8, 2, 9, 2, 6, 0, 1, 6, 1, 5, 9, 9, 9, 8, 7, 2, 9, 7, 5, 3, 6, 3, 3, 1, 8, 0, 0, 3, 0, 1, 8, 7, 1, 3, 2, 4, 7, 4, 9, 5, 2, 2, 7, 0, 1, 8, 4, 9, 3, 5, 2, 7, 6, 7, 2, 7, 2, 8, 1, 0, 3, 4, 4, 4, 3, 7, 4], [0, 2, 1, 0, 1, 0, 1, 1, 2, 2, 2, 0, 0, 0, 1, 2, 1, 1, 2, 2, 1, 1, 0, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 2, 1, 0, 1, 1, 1, 1, 2, 1, 2, 2, 0, 1, 1, 1, 2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 2, 0, 1, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 0, 2, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0], [1, 3, 1, 0, 0, 3, 1, 2, 3, 2, 2, 3, 2, 1, 3, 2, 0, 0, 3, 1, 1, 1, 2, 1, 2, 3, 0, 0, 0, 2, 3, 1, 1, 0, 3, 0, 3, 0, 3, 0, 3, 1, 0, 3, 0, 0, 1, 0, 0, 1, 2, 2, 1, 1, 2, 1, 3, 1, 0, 0, 1, 2, 3, 1, 3, 1, 0, 2, 0, 0, 0, 3, 1, 1, 3, 2, 0, 3, 3, 2, 2, 3, 0, 1, 1, 1, 0, 0, 2, 1, 0, 0, 2, 2, 0, 0, 3, 3, 1, 1, 2, 2, 1, 0, 2, 0, 3, 1, 2, 2, 0, 1, 1, 1, 3, 0, 3, 3, 0, 0, 1, 2, 1, 3, 2, 3, 3, 3, 2, 3, 0, 1, 2, 1, 1, 0, 1, 2, 0, 3, 0, 0, 2, 3, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 0, 1, 3, 0, 3, 0, 3, 0, 0, 2, 0, 3, 0, 3, 3, 1, 3, 2, 2, 0, 3, 2, 0, 2, 2, 2, 1, 3, 1, 3, 1, 3, 2, 1, 1, 0, 3, 3, 0, 2, 2, 2, 1, 2, 2, 3, 2, 3, 3, 0, 0, 0, 0, 3, 3, 0, 3, 1, 0, 1, 2, 1, 3, 3, 0, 0, 2, 1, 0, 2, 2, 1, 3, 2, 1, 2, 1, 1, 2, 1, 3, 3, 2, 2, 1, 0, 3, 2, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 2, 1, 3, 1, 0, 0, 1, 1, 1, 3, 1, 0, 0, 2, 1, 0, 3, 2, 2, 1, 0, 0, 0, 0, 1, 0, 3, 1, 2, 0, 3, 1, 1, 1, 0, 2, 1, 0, 0, 1, 2, 1, 0, 2, 3, 0, 2, 1, 1, 0, 3, 1, 2, 3, 3, 0, 0, 0, 2, 0, 1, 2, 1, 1], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 4, 0, 0, 0, 0, 1, 4, 3, 1, 2, 1, 1, 3, 0, 0, 4, 0, 1, 3, 0, 0, 0, 1, 4, 2, 3, 1, 1, 1, 1, 4, 2, 1, 4, 3, 2, 4, 2, 0, 3, 1, 2, 3, 4, 2, 1, 3, 3, 4, 1, 0, 0, 4, 1, 2, 1, 4, 0, 1, 0, 1, 0, 1, 3, 3], [2, 0, 0, 2, 2, 1, 0, 0, 0, 0, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [4, 5, 4, 3, 3, 0, 2, 4, 2, 5, 0, 1, 2, 4, 1, 5, 5, 0, 2, 5, 5, 4, 4, 3, 5, 3, 0, 2, 4, 4, 0, 4, 1, 2], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [1, 2, 3, 2, 1, 4, 4, 1, 1, 4, 2, 1, 2, 1, 2, 1, 4, 0, 1, 1, 2, 0, 2, 0, 4, 0, 4, 1, 0, 2, 2, 0, 2, 0, 2, 1, 4, 2, 2, 0, 1, 2, 1, 0, 2, 0, 2, 2, 1, 2, 4, 4, 2, 0, 2, 4, 0, 1, 1, 1, 2, 0, 1, 2, 4, 1, 4, 1, 0, 4, 4, 1, 1, 0, 3, 2, 3, 4, 0, 1, 3, 4, 0, 1, 3, 3, 3, 4, 2, 1, 1, 1, 4, 3, 3, 0, 2, 2, 2, 4, 0, 0, 1, 4, 0, 2, 2, 1, 0, 1, 2, 4, 3, 4, 4, 1, 0, 2, 1, 2, 4, 4, 2, 1, 1], [2, 3, 3, 2, 3, 1, 1, 0, 3, 2, 0, 1, 2, 3, 1, 0, 1, 1, 1, 2, 1, 2, 2, 1, 2], [5, 5, 3, 5, 4], [1, 0, 0, 2, 1, 0, 1, 1, 1, 0, 0, 2, 2, 0, 1, 2, 1, 0, 0, 1, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 0, 2, 1], [2, 0, 2, 0, 3, 1, 1, 3, 1, 0, 2, 1, 0, 3, 1, 2, 2, 1, 1, 2, 1, 0, 0, 3, 3, 2, 2, 0, 1, 1, 1, 2, 3, 1, 3, 2, 0, 2, 0, 2, 2, 0], [1, 20, 11, 3, 20, 17, 9, 13, 12, 18], [2, 22, 4, 13, 15, 21, 13, 7, 5, 21, 16, 2], [7, 2, 1, 1, 1, 4, 1, 2, 0, 1, 1, 4, 1], [12, 20, 20, 18, 4, 4, 10]], "fitness": 9223372036854775807, "mapping_values": [1, 40, 40, 17, 23, 5, 11, 0, 0, 12, 12, 29, 12, 9, 8, 3, 0, 4, 103, 103, 97, 8, 317, 72, 68, 38, 37, 34, 42, 5, 125, 25, 5, 33, 42, 10, 12, 13, 7], "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b0:{:\\nres0 = int(75.0) \\l min(int(4.0), i0)\\nif \"\"7\"\" not in (\"\"B2\"\"[i2:min(int(03.0), ( min(divInt(divInt(saveOrd(\"\"U\"\".strip(\"\")\"\").capitalize()),( int(8.0) * min(( i1 + i0 ), min(int(1.0), int(8.0))) )),int(4.0)), ( int(2.0) + mod(min(i1, i0),i1) )) * divInt(min(int(7.0), int(5.0)),i1) ))] + \"\"c\"\"[max(i2, saveOrd(\"\"w\"\"[i2:])):len(\"\";\"\"[:i2])].strip(in1.capitalize()))[:max(int(49.0), i0)]:{:\\nloopBreak% = 0\\nfor in2 in \"\"e\"\":{:\\ni0 = abs(i0)\\nif \"\"L\"\" != in1[i1:int(2.0)]:{:\\nloopBreak% = 0\\nfor in0 in in0[:i2]:{:\\ni1 *= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = s0.lstrip(saveChr(int(7.0))).startswith(\"\"1\"\")\\nloopBreak% = 0\\nfor s2 in in1:{:\\nif res0:{:\\ni2 = ( ( int(2.0) - int(8.0) ) + ( int(0.0) + max(int(6.0), i2) ) )\\n:}else:{:\\nloopBreak% = 0\\nwhile ( ( ( i1 \\le int(9.0) and divInt(max(int(4.0), len(s2[:int(7.0)][:i1])),mod(i0,i1)) != i2 ) and not min(int(3.0), int(5.0)) \\ge min(mod(i1,saveOrd(in2[min(mod(mod(max(i2, int(8.0)),int(6.0)),int(3.0)), i2):i0])), mod(int(3.0),i1)) ) and \"\"n\"\"[i0:divInt(divInt(i1,i2),len(saveChr(min(int(7.0), int(2.0)))))].startswith(s0[mod(( int(1.0) + i0 ),( i0 + min(int(6.0), divInt(mod(i0,int(0.0)),int(9.0))) )):][int(4.0):]) ):{:\\ni1 *= min(i0, max(saveOrd(\"\"D\"\"), i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile i0 != int(829.0):{:\\ni0 = mod(int(2.0),abs(( len(\"\";\"\"[max(max(mod(max(i0, int(6.0)),( int(0.0) + int(1.0) )), i0), int(6.0)):mod(i2,max(i1, i0))]) * ( saveOrd(s1) * int(1.0) ) )))\\ni1 = ( int(5.0) * divInt(int(9.0),int(9.0)) )\\nloopBreak% = 0\\nwhile mod(int(9.0),int(8.0)) != ( i1 - int(7.0) ):{:\\nres0 = not abs(i1) \\l max(i1, saveOrd(s2[:i2]))\\nin1 = \"\"p\"\"[:i1][( i2 * len(getCharFromString(s1[i2:abs(saveOrd(in2.capitalize()[:int(2.0)]))].strip(\"\"1\"\"), abs(divInt(mod(i0,min(( i1 + ( divInt(( int(9.0) + len(\"\"1\"\") ),int(7.0)) * max(int(5.0), abs(mod(int(3.0),int(6.0)))) ) ), i1)),len(\"\"v\"\"))))[saveOrd(in2[i1:divInt(( mod(int(3.0),( ( abs(( max(len(\"\"n\"\"), i2) - i1 )) + i2 ) - i1 )) - len(getCharFromString(\"\"4\"\", saveOrd(saveChr(i2)))[max(int(3.0), i0):]) ),int(1.0))]):( int(8.0) + min(min(i1, i0), ( int(0.0) + i1 )) )]) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b0:{:\\ni0 -= mod(divInt(int(0.0),saveOrd(\"\"h\"\")),divInt(int(3.0),( int(0.0) + int(1.0) )))\\ns0 = s2\\nb1 = divInt(int(8.0),max(abs(( divInt(int(7.0),i1) + max(( int(1.0) + i1 ), int(3.0)) )), i0)) == i1\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in \"\"U\"\".rstrip(\"\"R\"\").capitalize():{:\\nb2 = i1 \\ge int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = in1\\n:}\\nb2 = ((saveChr(i1) + in1)[( i1 + ( ( int(4.0) - saveOrd(\"\"/\"\") ) - int(7.0) ) ):] + (getCharFromString(in0, i1) + \"\"!12\"\")) not in (((saveChr(i0) + \"\"J\"\"[int(4.0):int(9.0)]) + \"\"f\"\") + \"\"v\"\")\\ni0 = int(52.0)\\n:}\\nloopBreak% = 0\\nwhile saveChr(min(int(2.0), i1)) == ((in2 + saveChr(i1)[( int(7.0) - i2 ):][:max(( mod(int(0.0),i0) * i1 ), i2)][i0:]) + in0):{:\\nloopBreak% = 0\\nwhile int(184935.0) \\g i1:{:\\nb2 = s0 in \"\"q\"\"\\nloopBreak% = 0\\nwhile min(int(2.0), ( i1 * max(int(7.0), int(6.0)) )) != int(7.0):{:\\nb1 = s2.capitalize() == \"\"0\"\"[:i2][divInt(int(2.0),i0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in in1:{:\\ns0 = \"\"!\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = saveChr(i1)[int(7.0):( int(2.0) * i1 )] != (\"\"c\"\".capitalize().capitalize() + in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = \"\"\"\\\\\"1\"\"[mod(min(i1, divInt(int(81.0),int(0.0))),i1):max(int(3.0), ( len(saveChr(len(\"\"N\"\"[:i0].capitalize()))[i2:]) * i1 ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile divInt(i0,int(44.0)) \\g divInt(int(437.0),int(4.0)):{:\\ns2 = \"\"1M41S\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0], [1], [3, 1], [], [4], [1], [], [], [1, 1, 0, 1], [], [3, 3, 1, 1, 1], [], [], [0], [0, 2, 1, 0], [14, 13], [22], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 4, 0, 5, 0, 0, 0, 4, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= saveOrd(((\"\"O\"\" + \"\"9\"\") + \"\"wN\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 1, 2, 2, 2, 2, 2, 2, 1], [2, 1, 0, 1, 2, 1, 2], [1, 1, 1], [0, 0], [0], [], [], [3], [2], [0, 0, 2, 2, 0, 1, 0, 0, 2, 2], [0], [1, 0, 5, 2], [0, 3, 1, 3, 1], [0, 1], [1, 0], [0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 3, 7, 0, 6, 8, 0, 9, 8, 4, 0, 9, 6, 5, 0, 4, 1, 0, 4, 7, 2, 0, 6, 5, 5, 5, 7, 0, 7, 4], [1, 2, 2, 2, 2, 1, 2, 0, 1, 1, 2, 0, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 0, 2, 1, 0, 0, 2, 1, 0, 0, 0, 2, 1, 0, 1, 1, 1, 2, 2, 1, 0, 2, 1], [0, 1, 1], [0, 2, 3, 2, 2, 1, 1, 0, 2, 0, 0, 1, 3, 2, 2, 2, 3, 1, 1, 1, 2, 3, 0, 3, 2, 3, 0, 3, 2, 0, 1, 2, 1, 0, 2, 0, 2, 0, 1, 1, 1, 1, 0, 1, 2, 2, 0, 3, 3, 2, 2, 0, 3, 3, 2, 3, 3, 0, 3, 3, 0, 2, 0, 2, 2, 2, 2, 1, 2, 3, 2, 2, 1, 2, 1, 2, 0, 1, 2, 2, 2, 0, 3, 0, 0, 2, 1, 1, 0, 3, 1, 3, 3, 3, 3, 3, 1, 0, 3, 1, 0, 2, 3, 1, 3, 1, 3, 0, 3, 3, 2, 2, 3, 2, 3, 3, 0, 0, 1, 0, 2, 1, 2, 0, 0, 2, 1, 1, 3, 2, 3, 1, 3, 3, 3, 0, 3, 1, 0, 3, 2, 0, 1, 0, 3, 3, 2, 1, 2, 3, 2, 0, 1, 2, 3, 2, 0, 3, 0, 2, 0, 0, 0, 0, 3, 0], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [4, 3, 2, 2, 4, 4, 4, 3, 4, 4, 4, 0, 4, 0, 2, 3, 3, 1, 1, 4, 0, 4, 2, 0, 3, 0, 3, 3, 2, 0, 3, 0, 2, 2, 1, 4, 0, 0, 0, 3, 0, 2, 4], [1, 1, 0, 1, 0, 1, 2, 0, 2, 1, 1, 0, 1, 2, 1, 2, 2, 2, 2, 0, 2, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [2, 4, 2, 2, 3, 2, 3, 4, 5, 1, 3, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [0, 4, 1, 1, 2, 1, 1, 1, 2, 2, 4, 2, 0, 1, 4, 1, 1, 4, 1, 1, 1, 4, 2, 4, 1, 2, 4, 4, 2, 2, 0, 1, 4, 1, 1, 0, 2, 2, 2, 0, 0, 1, 4, 0, 2, 1, 0, 4, 1, 4, 0, 4, 4, 1, 2, 4, 0, 2, 1, 0, 1, 0], [1, 0, 3, 3, 2, 0, 0, 0, 0, 2, 2, 3, 2, 1, 3, 2, 2], [0, 0, 0, 5], [2, 1, 0, 1, 2, 0, 1, 1, 2, 2, 0, 1, 2, 1, 0], [0, 2, 2, 1, 1, 1, 3, 3, 2, 2, 2, 3, 3, 1, 3, 1, 2, 2, 3], [20], [9, 9, 4, 15, 10], [8, 4, 7, 3, 4, 1, 1], [19, 26, 11, 9, 13, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 7, 3, 1, 1, 0, 0, 1, 1, 10, 1, 4, 5, 2, 2, 3, 10, 10, 13, 3, 40, 13, 7, 6, 9, 3, 11, 1, 21, 4, 2, 4, 11, 1, 3, 5, 2], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= ( saveOrd(s2) - mod(divInt(int(7.0),int(3.0)),i2) )\\nif ( saveChr(( i2 + i1 )) not in \"\"U\"\" and \"\"8\"\" in \"\"4\"\"[int(7.0):] ):{:\\nloopBreak% = 0\\nfor in1 in \"\"j\"\":{:\\nif False:{:\\nloopBreak% = 0\\nwhile len(\"\"j\"\") == mod(mod(divInt(abs(int(0.0)),int(6.0)),int(8.0)),mod(abs(i2),saveOrd(getCharFromString(s2[:mod(saveOrd(\"\"e\"\"),i0)], saveOrd(\"\":\"\".lstrip()))[( i1 - int(0.0) ):mod(int(9.0),i1)][:( i2 + mod(i0,int(8.0)) )]))):{:\\nif ( True or \"\"[\"\".endswith(\"\"7\"\".lstrip()) ):{:\\nloopBreak% = 0\\nwhile \"\"3\"\" == \"\"4\"\":{:\\ni2 -= int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [], [0, 2], [], [5], [2], [], [], [], [1], [6], [2], [1], [1], [], [], [0], [], [5, 5], [1], [], [3, 0, 2, 0, 1], [], [], [2], [2], [], [], [9], []], "fitness": 9223372036854775807, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not (in2 + in2[int(6.0):]).endswith(\"\"9\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, 5, 0, 0, 1, 1, 0, 0, 1, 0]}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 0, 1], [9, 2, 7, 1, 1, 6, 7, 1, 2], [0, 0, 1, 1, 0], [], [3, 2, 1, 0, 2, 2, 3, 0, 1, 0, 3, 0, 3], [0, 1, 1], [1, 1, 4, 3], [2], [1, 0], [3], [1], [], [2, 1, 0], [], [], [2], [2], [], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 4, 0, 13, 3, 4, 1, 2, 1, 1, 0, 3, 0, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(( int(9.0) * i0 ), mod(divInt(max(i0, int(27116.0)),i1),saveOrd(\"\"5\"\"[i1:]))) == len(in0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [2], [2, 2], [], [0, 0], [], [], [], [0], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1], [4, 4, 2, 9, 9], [2, 0], [], [2, 0, 2, 3, 1, 3, 3, 1, 0, 2, 1, 3, 1], [1, 1, 1], [2, 1, 0, 3], [], [0, 1, 0], [5, 0, 3, 1], [0, 0, 0, 0, 0, 1, 1], [], [4, 0, 4, 1, 0, 1], [2, 3], [3], [], [0, 2, 2, 0, 2, 0, 1], [11, 9, 9], [7], [7, 1, 9], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 2, 0, 13, 3, 4, 0, 3, 4, 7, 0, 6, 2, 1, 0, 7, 3, 1, 3, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile divInt(i2,mod(abs(int(4.0)),max(min(int(42.0), i0), divInt(int(9.0),len(in2.capitalize()))))) \\l int(9.0):{:\\ns0 = \"\"L71J9J\"\".lstrip(in0)\\ns1 = \"\"h\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 0, 1], [2, 1, 2, 1, 0, 0], [0, 2], [0, 0, 0, 1], [0], [0, 0], [], [], [1, 2, 3], [], [2, 0, 2, 0], [], [0, 4], [1, 1], [], [1, 1], [], [1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [1, 9, 5, 5, 2, 1, 1, 0, 2, 9], [0, 2, 2, 2, 0, 0, 0, 1, 0], [1], [1, 0, 3, 2, 2, 0, 3, 2, 2, 0, 3, 2, 0, 0, 0, 3, 1, 0, 1, 0, 1, 2, 1, 2, 3, 1, 1], [0, 1, 1, 1, 0, 0, 1], [3, 0, 3, 0, 2], [2, 1, 1, 0], [1, 1, 0, 1], [3, 3, 2, 2, 4], [1, 0, 1, 0, 1], [0], [4, 0, 3, 4, 3, 0, 1, 3, 4, 2, 1, 2, 0, 4, 2, 1, 0], [1, 3, 1, 1], [2], [2, 1, 0], [1, 3, 3, 0, 0], [20, 18], [12], [], [27, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 2, 0, 0, 3, 0, 4, 0, 2, 2, 0, 2, 0, 10, 10, 9, 1, 27, 7, 5, 4, 4, 5, 5, 1, 17, 4, 1, 3, 5, 2, 1, 0, 2], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in saveChr(int(1.0)):{:\\nb1 = in0 in ((s2 + \"\"m\"\").strip() + (saveChr(i0) + \"\"\\\\\\\\^\"\"[len(s2[:( mod(i2,min(mod(divInt(i2,len(saveChr(( i2 * i0 )))),i0), min(int(9.0), i0))) - int(5.0) )]):]))\\nloopBreak% = 0\\nwhile False:{:\\nb2 = \"\"US\"\"[i1:int(52.0)].startswith(in1)\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 -= ( int(1.0) + mod(abs(int(102.0)),int(9.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1], [1, 2, 0, 2, 0, 0, 1], [1, 2], [0, 1, 0, 1, 1], [], [0, 0, 0], [], [], [2, 1, 3, 0], [1], [1, 2, 0, 0], [0], [1], [0, 0], [], [], [0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [0, 8, 1, 9, 1, 1, 3, 9, 7, 3, 7, 2, 3, 2, 3, 7], [0, 2, 2, 1, 1, 2, 2, 0, 2, 1, 0, 1, 1, 1], [1, 1, 1], [0, 0, 3, 3, 2, 2, 1, 3, 2, 1, 2, 2, 1, 3, 0, 3, 2, 2, 2, 3, 1, 0, 0, 1, 3, 3, 1, 3, 3, 2, 1, 1, 3, 2, 3, 3, 0, 3, 2, 3, 0, 0, 2, 0, 0, 3, 0, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [4, 3, 0, 3, 4, 1, 0, 0, 4, 2, 3, 0, 4, 0, 2, 2], [2, 1, 2, 2, 0, 1, 1, 2, 1, 2, 0], [0, 1, 0, 1], [3, 0, 0, 4, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [], [0, 3, 1, 2, 1, 0, 1, 0, 2, 2, 0, 1, 2, 0, 4, 0], [0], [], [1, 2, 1, 2], [0, 1, 1, 3, 1, 1, 0, 1, 2, 0, 3], [9, 17, 8], [21, 22, 20, 16, 0], [5], [7, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 0, 3, 0, 0, 4, 1, 4, 1, 1, 2, 0, 0, 1, 16, 16, 14, 3, 49, 12, 16, 11, 4, 6, 11, 0, 16, 1, 0, 4, 11, 3, 5, 1, 2], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 \\g i2\\nif in0 not in (\"\"Jvw\"\" + \"\"$uqR\"\"[:saveOrd(s0)]):{:\\ni2 *= len(\"\"a5I\"\")\\nloopBreak% = 0\\nwhile b1:{:\\nres0 = b0\\ni1 -= ( ( int(081.0) * min(divInt(int(9.0),mod(( int(1.0) * len(s0) ),i1)), saveOrd(in1[:( divInt(( max(int(1.0), i2) + i2 ),int(3.0)) - min(min(int(9.0), saveOrd(\"\"_\"\")), abs(( int(7.0) - int(3.0) ))) )][len(s1[( min(saveOrd(getCharFromString(s1, i0)), min(( abs(i2) * i1 ), mod(i0,i1))) - abs(i1) ):]):])) ) * int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(23237.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 1, 2, 2, 2, 0, 0, 2, 0, 2, 1, 1], [1, 2, 2, 0, 2, 1], [1, 0, 0, 2, 2, 0, 2], [0], [0, 0, 0, 0], [], [], [0, 2, 2], [1, 2, 1, 3], [2, 1, 0, 1, 0, 2, 0, 0, 1, 2, 1, 2], [0, 0, 0, 0], [5, 3, 2, 4], [2, 2, 1, 3], [0], [0], [0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [8, 2, 5, 8, 4, 0, 1, 3, 4, 7, 3, 0, 0, 5, 2, 3, 6, 9, 3, 6, 3, 9, 3, 2, 7, 6, 3, 6, 1, 0, 3, 9, 9, 9, 2, 9, 0, 9, 5, 6, 9, 1, 6, 9, 9, 3, 8, 3, 3, 1, 0, 9, 3, 0, 9, 2, 6, 9, 2, 7, 5, 0, 4], [0, 0, 0, 2, 2, 2, 0, 2, 1, 1, 1, 2, 2, 2, 1, 2, 0, 0, 1, 1, 1, 2, 1, 2, 0, 2, 0, 2, 1, 1, 1], [1], [3, 0, 3, 0, 2, 1, 0, 1, 3, 0, 1, 0, 0, 0, 1, 1, 1, 0, 3, 0, 2, 3, 3, 1, 1, 3, 0, 3, 1, 1, 3, 1, 1, 1, 2, 0, 0, 0, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 1, 0, 2, 1, 1, 2, 3, 0, 2, 1, 1, 2, 2, 1, 1, 3, 3, 0, 3, 1, 3, 0, 3, 1, 0, 3, 1, 1, 1, 3, 2, 3, 3, 1, 1, 2, 1, 3, 3, 1, 1, 1, 3, 0, 1, 0, 3, 0, 3, 2, 2, 2, 1, 3, 0, 0, 0, 2, 1, 1, 3, 1, 1, 0, 1, 2, 0, 3, 1, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 2, 0, 0, 2, 1, 2, 1, 2, 3, 0, 1, 1, 4, 4, 4, 3, 1, 1, 2, 3, 1, 0, 3, 0, 4, 4, 2, 0], [2, 0, 0, 1, 1, 0, 1, 2, 0, 2, 2], [0, 0, 0, 1, 0, 0, 0], [4, 1, 3, 2, 5, 0, 5, 1, 4, 4, 0, 3, 5, 5, 4, 1, 0, 0, 5, 1, 5, 5, 0], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0], [4, 0, 2, 1, 3, 0, 1, 3, 2, 4, 2, 1, 4, 2, 2, 4, 2, 0, 1, 2, 0, 1, 4, 4, 3, 3, 0, 1, 4, 3, 0, 0, 2, 0, 4, 2, 4, 4, 4, 1, 2, 0, 3, 2, 2, 3, 2, 2, 4, 1, 0, 3, 4, 0, 1, 4, 4, 4, 2, 0, 2, 4, 1, 0, 2, 1, 1, 3, 0, 2, 1, 4, 0, 3, 3, 3, 2, 3, 3, 4, 2, 1, 0, 4, 0, 3, 2, 2, 2, 4, 4, 0, 1, 0, 2, 4, 4, 1, 4, 4, 1, 4, 1], [3, 3, 1, 0, 0, 3, 1, 3, 3, 2, 2, 3, 0, 0, 3, 0, 0, 0, 1, 2, 2, 3, 3, 1, 1, 2, 2], [5, 5, 3, 3, 2, 5, 0, 1, 3], [0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 2, 0, 1, 2, 2, 0, 1, 0, 1, 0, 1], [2, 3, 2, 0, 2, 0, 2, 3, 2, 3, 3, 2, 0, 3, 1, 3, 1, 1, 2, 0, 0, 0], [3, 2, 0, 7, 20, 19], [15, 2, 22], [4, 7, 5, 8, 7, 5, 2], [24, 9, 18, 17, 1, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 13, 13, 6, 7, 1, 4, 0, 0, 3, 4, 12, 4, 4, 4, 1, 1, 2, 63, 63, 31, 1, 123, 17, 29, 11, 7, 23, 22, 1, 103, 27, 9, 24, 22, 6, 3, 7, 6], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= max(i0, abs(i0))\\nif in1.strip(\"\"4\"\"[( int(82.0) + i2 ):int(5.0)]).endswith((s1 + \"\"?\"\")):{:\\nb0 = min(i2, int(8.0)) \\g i2\\nloopBreak% = 0\\nwhile not i0 == i2:{:\\nloopBreak% = 0\\nwhile not (\"\"7\"\"[:int(4.0)].strip(saveChr(int(0.0)))[:int(1.0)] + getCharFromString(in0[i1:min(i1, ( abs(max(int(3.0), int(4.0))) + abs(i1) ))], max(int(7.0), int(3.0)))[:abs(int(0.0))][int(0.0):int(5.0)]) != \"\"D\"\":{:\\nloopBreak% = 0\\nfor s2 in in2[divInt(i2,i2):i2]:{:\\nb2 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = \"\"5C8\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile ( divInt(len(getCharFromString(((in2 + \"\"&\"\") + saveChr(min(int(2.0), ( int(3.0) - int(6.0) )))).lstrip((s1 + in1)), i1)),i2) \\g i0 and in1[:i0] == \"\"7\"\".capitalize().capitalize().strip()[:int(9.0)].lstrip(s0[:int(3.0)]) ):{:\\nin0 = ((\"\"/\"\".strip(in2)[i1:][:divInt(int(6.0),int(3.0))] + (getCharFromString(in2, mod(max(i1, divInt(int(9.0),int(3.0))),divInt(( int(2.0) - int(7.0) ),max(saveOrd(\"\".\"\"), i1)))) + getCharFromString(getCharFromString(in1[saveOrd(getCharFromString(\"\"5\"\", int(6.0))[:saveOrd(s1)]):i2], len(\"\"A\"\"[int(3.0):])).lstrip(), i1)))[max(int(6.0), int(10.0)):int(3.0)][max(( abs(len(\"\"\\\\\\n\"\")) + int(99.0) ), int(9.0)):divInt(int(29.0),max(min(int(09.0), int(5.0)), int(6916.0)))] + (s0 + \"\"p!c\"\"[len(getCharFromString(s0, i2)):]))\\nif int(993.0) \\ge i0:{:\\nb2 = (((((saveChr(min(i2, saveOrd(\"\"w\"\"[:( ( ( int(8.0) - saveOrd(in2) ) * i0 ) + i2 )]))) + s1.capitalize()) + (in2.rstrip().capitalize()[i1:( int(3.0) * int(3.0) )][:abs(int(1.0))][int(0.0):i1] + \"\"2\"\"))[int(93.0):( i1 * min(int(0.0), int(9.0)) )] + in2) + saveChr(int(2.0)).lstrip(\"\"H\"\")[:int(692.0)]) + saveChr(int(7504.0))).startswith(\"\"U\"\".capitalize())\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = \"\"T\"\".capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 5, 1, 6, 9, 9, 4, 3, 9, 7, 7, 1, 8, 3, 2, 3, 3, 8, 3, 0, 0, 1, 6, 7, 7], [0, 2, 2, 2, 1], [1, 1], [2, 2, 3, 2, 1, 2, 0, 2, 0, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 3, 1, 1, 2, 3, 3, 2, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [4, 2, 4, 4], [1, 1, 0, 2, 2, 1, 2, 0], [1, 1, 0, 1, 0, 1], [4], [0, 0, 1, 1], [], [2, 0, 1, 2, 4, 1], [3], [0], [2, 2], [0, 2, 1, 0], [11, 16], [2], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 5, 1, 30, 13, 4, 8, 6, 1, 4, 0, 6, 1, 1, 2, 4, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= mod(( saveOrd(in1[( int(6.0) - mod(i2,( i2 + int(5.0) )) ):]) * divInt(int(169943.0),int(9771832.0)) ),( ( ( mod(int(33.0),int(830.0)) * ( int(0.0) - abs(int(167.0)) ) ) * int(7.0) ) + divInt(saveOrd(\"\"L4c\"\"),saveOrd(\"\"Q\"\".lstrip()[mod(i2,i1):])) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [2], [1], [0], [], [], [], [], [], [1], [6], [2, 0, 2, 1, 1], [], [3, 2, 1, 0, 0, 2, 3, 1, 0, 0], [0, 1], [4, 1], [2], [1], [], [0, 1], [], [1], [], [], [], [0, 2], [25], [], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 0, 2, 0, 1, 0, 0, 0, 2, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(\"\"Z2\"\") == ( int(6.0) * i2 )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [], [2], [], [5], [], [], [], [], [1, 1], [0, 7], [0, 1, 2, 1, 0, 0, 0, 1], [1], [2, 3, 0, 0, 0, 2, 2, 2, 1, 0, 0, 0, 2, 0, 3, 3, 2, 3, 2, 0, 1], [0, 1, 0, 1, 0, 1, 1], [1, 3, 2, 4], [1, 0, 0], [0, 1, 1, 1], [1, 3], [0, 1, 0, 1, 1], [], [4, 1, 3, 4, 4, 2, 3, 1, 0, 0, 1], [0, 0, 1], [], [1], [3, 3, 2, 1, 1], [], [24, 2], [4], [18, 28]], "fitness": 9223372036854775807, "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = getCharFromString(\"\"/]\"\", ( max(i0, i1) - i2 )).endswith((getCharFromString(saveChr(divInt(( mod(int(0.0),i1) + i0 ),i0)), ( i0 + len((\"\"4y\"\" + s1)[:abs(mod(saveOrd(in0),mod(i1,int(7.0))))]) )) + \"\"c\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 8, 0, 21, 7, 4, 3, 4, 2, 5, 0, 11, 3, 0, 1, 5, 0, 2, 1, 2]}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [0], [1], [0], [], [], [], [], [], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [8, 7, 7, 6, 4, 9, 7, 8, 0, 1, 1, 1, 3], [2, 2, 2, 1], [0], [2, 1, 1, 2, 0, 2, 2, 1, 3, 0, 1, 2, 3, 1, 2, 3, 0, 3, 0], [1, 0, 0, 0, 0, 0], [0, 1, 2, 3], [2, 2, 0, 2, 1], [1], [], [0, 1], [], [1], [], [], [], [2, 0], [12], [], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 4, 0, 19, 6, 4, 5, 1, 0, 2, 0, 1, 0, 0, 0, 2, 1, 0, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = mod(int(87.0),int(76497.0)) \\l ( i2 * ( ( int(8011.0) * min(i2, int(1.0)) ) + ( max(int(3.0), ( abs(i2) * len(\"\"4M\"\") )) - i1 ) ) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [0, 2, 9], [2, 0, 0, 1], [1, 1], [2, 0, 2, 0, 1, 1, 1], [0, 1], [], [0, 0, 1, 2], [0], [0], [1, 1], [], [4, 2, 3, 1, 1], [0], [], [1], [0, 1], [6], [12], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 7, 2, 0, 2, 1, 1, 2, 0, 5, 1, 0, 1, 2, 1, 1, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += ( i0 + divInt(i0,int(0.0)) )\\ns0 = getCharFromString((\"\"G\"\" + \"\"m\"\")[:int(2.0)], int(9.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 3, 2, 3, 7, 7, 2, 6], [1, 1, 0, 2, 0, 1, 1, 1, 0, 0, 0, 0, 2, 0], [1], [0, 2, 0, 2, 3, 3, 0, 0, 0, 0, 2, 3, 0, 0, 2, 2, 2, 1, 3, 1, 3, 0, 2, 3, 3, 1, 0, 2, 2, 2, 1, 1, 1, 2, 1, 3, 0, 2, 1, 1, 2, 3, 2, 0, 0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 2, 1, 4, 1, 4, 3], [0, 1, 1, 2, 2, 2, 0, 2, 0, 1], [0, 0, 0, 1, 0], [3, 4], [1, 0, 0, 1], [0], [2, 4, 2, 2, 1, 0, 1], [1], [], [1, 0, 2], [0, 3, 3, 2], [22], [], [1], [22, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 14, 1, 45, 14, 9, 10, 5, 2, 4, 1, 7, 1, 0, 3, 4, 1, 0, 1, 2], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in saveChr(i1)[:( i1 + divInt(min(min(i0, i2), i0),i1) )]:{:\\ni1 -= ( max(i1, i0) - ( divInt(divInt(int(8.0),abs(int(8.0))),max(i0, mod(saveOrd(\"\"W\"\"[max(int(3.0), i0):][( ( ( int(2.0) * int(3.0) ) * int(7.0) ) * divInt(int(7.0),saveOrd(in1)) ):i0]),( int(2.0) + int(6.0) )))) * ( len(\"\"=<1\"\") + ( i2 - i0 ) ) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3], [0, 0, 0, 0, 1], [2], [], [], [5, 1], [1], [], [4, 4, 1, 0], [3, 3], [2, 4], [], [0], [8], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 4, 2, 2, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = \"\"I\"\".rstrip(s1).strip()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [2], [], [], [], [], [2], [], [0], [], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [5, 6, 7, 7, 1, 4, 9, 6, 3, 2, 2, 2, 7, 4], [2, 1, 0, 2, 2, 2, 2, 2], [], [2, 3, 0, 3, 2, 3, 1, 3, 0, 0, 3, 1, 1, 3, 0, 3, 3, 3, 0, 3, 1, 2, 3, 1, 0, 1, 0, 0, 1, 3, 1], [1, 0, 0], [1, 2, 4, 2, 0, 0, 0, 3, 0, 0, 1, 3], [2, 0], [0], [4, 2, 4, 4], [1, 1], [], [4, 2, 4, 0, 2, 2, 2, 0, 2, 1, 2, 1, 4], [3, 0, 1], [5], [0, 2, 1, 2, 2, 2], [1, 3], [], [4], [], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 14, 14, 8, 0, 31, 3, 12, 2, 1, 3, 2, 0, 13, 3, 1, 6, 2, 0, 1, 0, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b2:{:\\nin1 = getCharFromString(s2, divInt(max(i2, abs(( saveOrd(in1[int(5.0):][:abs(i1)][i0:]) * min(int(6.0), int(7.0)) ))),min(i2, min(len(\"\"e\"\"[min(i2, min(int(7.0), ( max(int(1.0), i2) + int(4.0) ))):]), i2))))[i2:int(9632227.0)].strip(\"\"\"\"\"[len(saveChr(int(4.0))):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [2, 0], [], [0], [], [], [1, 2], [], [0], [], [], [0], [], [], [], [1], [3], [0, 2, 0, 2], [0, 0], [0, 1, 2, 0, 0, 0], [0], [], [2], [], [5, 3, 3, 2], [1, 1, 1], [], [3, 4, 3, 3, 3, 2, 4, 0, 3, 1, 2, 0, 1, 0, 4, 1], [2, 0, 0], [], [2, 2], [1, 3, 2], [], [16], [9], [22]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 4, 0, 6, 1, 0, 1, 0, 4, 3, 0, 16, 3, 0, 2, 3, 0, 1, 1, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = ((((getCharFromString(in0, i0)[int(3.0):] + (\"\"q\"\" + in0[( i2 * i0 ):])) + \"\"=\"\") + s2).capitalize() + getCharFromString(\"\"9\"\", i2))\\nb1 = b2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [1, 0, 0, 1], [3, 4, 9, 3], [0, 1], [], [2, 1, 2, 2, 2, 0, 1, 3, 0, 3], [0, 1, 1, 0], [4, 3], [0, 2], [0, 1], [5], [0, 1, 0, 0, 0, 0, 1], [], [3, 1, 1, 0], [], [], [], [2, 3, 2, 2, 2, 0, 2], [17], [], [0, 4, 9, 4, 6], [18]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 10, 4, 2, 2, 2, 1, 7, 0, 4, 0, 0, 0, 7, 1, 0, 5, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( int(3.0) + divInt(mod(( i0 * int(493.0) ),saveOrd((\"\"0/\"\" + \"\"494R6\"\"))),i1) ) != len(in2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1, 0, 0], [], [0], [], [0], [], [], [1, 1], [], [0, 2], [], [2], [2, 0], [], [], [], [0, 0, 1], [1, 1, 2], [], [], [1], [], [], [], [], [5, 5, 4], [1, 1], [], [0, 2, 3, 1, 1], [], [], [1], [2, 2], [], [], [6, 4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 3, 3, 0, 0, 1, 0, 0, 0, 0, 1, 2, 0, 5, 0, 0, 1, 2, 0, 0, 2, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not in2 == (\"\"6\"\" + \"\"4\"\")[:int(112.0)]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [0], [0], [], [], [], [], [3, 3, 0, 1], [0, 0, 1], [0], [3, 0, 1], [], [], [], [3, 3, 2], [], [], [4], [25, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 2, 3, 1, 3, 0, 0, 0, 3, 0, 0, 1, 2], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in (in0 + \"\"@4\"\"):{:\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [1], [2], [], [0], [], [], [], [1], [0, 2, 0], [0], [5], [3, 1], [0], [0], [0], [1, 0, 1], [5, 5, 8], [0, 1], [], [3, 0, 3, 1, 1], [], [4, 2], [], [], [1, 4, 3, 1, 0, 5, 1], [1, 1], [], [0, 3, 3, 2, 3, 3, 1, 3, 0, 0, 1, 4, 3, 4, 0, 4, 0, 0], [1, 2, 1], [], [0], [0, 3], [25], [], [], [14]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 0, 1, 2, 1, 1, 1, 3, 3, 1, 0, 5, 0, 2, 0, 0, 7, 2, 0, 18, 3, 0, 1, 2, 1, 0, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( s1.endswith(((((\"\"Z\"\" + (in1 + in0)) + \"\"+\"\")[saveOrd(saveChr(i0)):abs(int(5.0))] + (s1.capitalize() + saveChr(int(58.0)))) + s0)) and True ):{:\\nin2 = s1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 1, 2, 2, 0, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 0, 2, 0, 1], [0, 2, 1, 1, 2, 0, 0, 2, 2, 0, 2], [2, 1, 2, 2, 2, 2, 1, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0], [], [], [], [4, 2, 0], [2, 0, 2, 0, 1, 1, 2, 1], [0, 0, 0], [4, 0, 4], [1, 2], [], [0], [0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 7, 8, 8, 7, 1, 1, 5, 2, 1, 2, 1, 3, 2, 3, 0, 6, 0, 4, 1, 9, 2, 9, 8, 9, 2, 1, 1, 5, 2, 3, 1, 1, 8, 3, 5, 3, 3, 5, 1], [2, 1, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 2, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 2, 1, 1, 0, 1, 2], [0, 1], [1, 2, 1, 1, 2, 3, 1, 3, 0, 3, 3, 0, 1, 1, 1, 1, 1, 2, 3, 2, 1, 1, 3, 3, 3, 3, 2, 0, 0, 0, 2, 2, 1, 0, 3, 2, 0, 2, 3, 2, 2, 0, 2, 3, 2, 2, 2, 3, 2, 3, 1, 2, 2, 1, 2, 1, 3, 3, 3, 0, 3, 0, 0, 3, 1, 0, 3, 1, 1, 1, 0, 1, 2, 1, 3, 0, 0, 1, 1, 0, 3, 2, 1, 3, 0, 1, 2, 1, 2, 0, 0, 0, 2, 2, 3, 3, 3, 2, 1, 2, 1, 3, 2, 0, 1, 3, 0, 3, 0, 0, 0, 1, 1, 3, 2, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 4, 2, 3, 2, 0, 2, 2, 0, 3, 0, 4, 4, 4, 1, 1, 3, 0, 4, 4, 4, 4, 2, 0, 2, 0, 4, 3, 0, 2], [1, 2, 0, 1, 2, 1, 2, 0, 2, 2, 0, 0, 2], [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0], [3, 5, 4, 4, 5, 5, 2, 3, 3, 0, 5, 5, 5, 5, 4, 0, 2, 5, 1, 0, 0, 4, 2, 2, 0, 3, 2, 3, 4, 5, 5, 4, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0], [3, 0, 1, 4, 2, 1, 4, 0, 0, 1, 0, 4, 3, 1, 0, 2, 2, 0, 0, 3, 4, 2, 2, 0, 0, 2, 4, 0, 0, 0, 0, 0, 4, 0, 1, 4, 2, 0, 2, 0, 4, 4, 1, 4, 2, 0, 1, 1, 1, 0, 3, 4, 2, 2, 1, 4, 0, 4, 2, 0, 2, 4, 2, 1, 2, 0, 4, 1], [2, 0, 3, 3, 0, 2, 3, 0, 0, 0, 0, 2, 1, 2, 0], [0, 0, 0], [1, 1, 1, 2, 0, 0, 1, 1, 2, 0, 2, 0, 1, 0, 2], [3, 0, 0, 1, 2, 3, 1, 0, 1, 2, 2, 1, 0], [3, 13, 19, 16], [14, 22, 7, 10], [0, 4, 3], [23, 1]], "fitness": 9223372036854775807, "mapping_values": [1, 20, 20, 11, 9, 4, 4, 0, 0, 0, 3, 8, 3, 3, 2, 0, 1, 2, 40, 40, 29, 2, 119, 29, 30, 13, 17, 33, 13, 4, 68, 15, 3, 15, 13, 4, 4, 3, 2], "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (in2 + \"\">\"\")\\nloopBreak% = 0\\nfor in1 in \"\"D\"\"[:int(2.0)].capitalize():{:\\ni2 = divInt(int(7887.0),int(1.0))\\nloopBreak% = 0\\nwhile getCharFromString(in1, ( len(in2) - int(1.0) )).startswith(\"\"N\"\"):{:\\nif True:{:\\nin2 = s2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif (\"\"o\"\" + in0).lstrip() in in0[:saveOrd(s0)][:i1]:{:\\nin2 = (in2[abs(len(in2)):i2][int(5.0):].lstrip() + getCharFromString(in2, int(21.0))[int(2.0):int(13.0)])\\n:}else:{:\\nloopBreak% = 0\\nwhile not int(2.0) \\le ( abs(( int(3.0) * int(06.0) )) + min(abs(abs(min(mod(i2,i2), i1))), mod(( int(0.0) - i0 ),len(in1))) ):{:\\nloopBreak% = 0\\nfor s0 in s2:{:\\nloopBreak% = 0\\nfor in2 in s1:{:\\ns0 = s0\\nloopBreak% = 0\\nwhile ( i2 * mod(min(mod(divInt(i1,divInt(saveOrd(in1.capitalize()),( ( mod(saveOrd(\"\"0\"\"),mod(saveOrd(s2[:int(4.0)].lstrip()),( mod(int(1.0),( int(9.0) - max(max(len(s2[:i2]), min(i0, i2)), saveOrd(getCharFromString(getCharFromString(\"\"\\\\\\n\"\", int(2.0)), i2))) )) * saveOrd(getCharFromString(s0[int(9.0):], int(8.0))) ))) + int(9.0) ) * i2 ))),int(2.0)), mod(int(1.0),saveOrd(\"\"w\"\"))),i2) ) == i2:{:\\nloopBreak% = 0\\nwhile \"\"T\"\".startswith(\"\"h\"\"):{:\\nin0 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in0 in (getCharFromString(\"\"4\"\"[int(1.0):][int(5.0):i1], saveOrd(in1.capitalize())) + saveChr(( int(2.0) * abs(i0) ))):{:\\ni2 += int(3.0)\\nloopBreak% = 0\\nwhile ( int(1.0) + divInt(i1,i2) ) \\l i0:{:\\nin2 = in2[divInt(mod(min(abs(min(mod(int(1.0),( int(8.0) * saveOrd(\"\"3\"\"[divInt(i2,int(3.0)):len(in1[i2:])].capitalize()[:min(i1, i1)]) )), i0)), int(5.0)),int(3.0)),abs(divInt(i1,i2))):int(3.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = getCharFromString(\"\"kQ\"\", int(51.0))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [2, 2, 0, 0, 0, 0], [0, 0], [0, 0, 1, 2], [0, 0], [0, 0, 0, 0], [], [], [2, 1], [2], [1, 2], [0], [1], [], [], [], [], [1, 1, 1, 1, 1, 1], [8, 9, 1, 4, 6, 6], [0, 0, 0, 0, 1, 1, 0, 2, 1, 2], [1], [0, 3, 2, 1, 0, 2, 0, 0, 1, 2, 3, 2, 3, 2, 0, 1, 1, 3, 0, 2, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1], [0, 4, 0, 4], [2, 1, 0, 0], [1, 1, 0], [1, 3, 5, 4, 2, 5, 5], [1], [0, 0], [2, 4, 2, 0, 0, 1, 4, 0, 0], [1, 1], [], [0, 2], [0], [23], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 2, 4, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 5, 5, 10, 1, 24, 6, 4, 4, 3, 7, 1, 2, 9, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in saveChr(i0)[min(mod(int(8.0),i0), ( i0 * i0 )):int(9.0)]:{:\\nloopBreak% = 0\\nfor in0 in in2[( saveOrd(in1) - mod(min(( i1 + int(1.0) ), int(4.0)),saveOrd(\"\"X\"\")) ):]:{:\\nb2 = i1 == divInt(i0,i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = saveChr(i1) not in s2\\ni2 += int(6.0)\\nin2 = in2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [4], [0, 0, 2, 0, 2, 1], [0], [1, 3], [3, 3, 2], [0, 0], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 7, 9, 9, 1, 3, 9, 4, 5, 4, 0, 8, 8, 4, 0, 0], [2, 2, 1, 0, 0, 2], [], [1, 1, 3, 3, 3, 2, 3, 3, 2, 1, 0, 3, 3, 3, 1, 3, 0, 2, 1, 0, 0, 3, 1, 1, 1, 0, 2, 3, 2, 1, 1, 1, 0, 3, 1, 3], [1, 1, 1, 1, 1], [1, 4, 0, 1, 0, 0, 0, 2, 3, 1, 1, 3, 3], [], [1, 0, 1, 0, 1], [2, 3, 4, 2, 5], [1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [], [4, 2, 4, 4, 1, 0, 3, 0, 1, 3, 1, 3, 3, 4, 1, 3, 4, 0, 0, 1, 4, 2, 3, 0, 3, 4, 3, 1, 1, 4, 4, 1, 1], [3, 1, 2, 1, 1, 2, 2, 3, 1], [4, 5], [0, 2], [0, 1, 0, 3, 0, 2, 0, 3, 3, 3, 3, 0, 2, 1, 3, 0], [5, 17, 16, 6, 7, 2], [19, 13], [4, 7], [2, 30, 5, 13, 19, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 0, 0, 16, 16, 6, 0, 36, 5, 13, 0, 5, 5, 16, 0, 33, 9, 2, 2, 16, 6, 2, 2, 6], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( ( saveChr(int(0.0))[int(7.0):max(saveOrd(\"\"F\"\".capitalize()), min(mod(max(min(divInt(int(9.0),i2), min(min(abs(int(9.0)), len(s2)), i2)), mod(int(1.0),i1)),i0), max(int(3.0), int(9.0))))].rstrip((in0 + \"\"t\"\")) not in (\"\"R\\\\\\tQ\"\" + ((saveChr(int(45.0)) + \"\"4G_\"\") + (saveChr(i0) + in1))) and not s2 != \"\"\"\"\" ) and divInt(max(mod(int(40.0),int(884.0)), int(0.0)),i2) \\le len((in2 + ((\"\"*:\"\" + \"\"H7\"\").capitalize() + saveChr(int(0.0)).strip(\"\"n=\"\")))[len(\"\"C\"\"):].capitalize()) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [], [0, 0, 2, 2], [], [1, 2], [3, 2], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 5, 2, 9, 7, 7, 7, 5], [0, 2, 1, 2], [], [1, 1, 2, 2, 2, 2, 3, 1, 0, 1, 0, 2, 3, 3, 1, 3, 1, 0, 3, 1, 0, 1, 3, 1, 3, 1], [0, 1, 0, 0, 1], [0, 1, 0, 3, 4, 0, 4, 2], [1, 2, 0], [0, 1], [1, 2, 3], [1, 1, 1, 1], [], [4, 2, 4, 0, 4, 4, 4, 2, 1, 1, 1, 1, 0, 0, 2, 0], [2, 0, 2, 3, 1], [3], [1, 2, 1, 0], [0, 0, 3, 1], [2, 24], [12], [], [16]], "fitness": 9223372036854775807, "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( not getCharFromString(s1, int(7.0))[:int(2.0)].capitalize() not in saveChr(( divInt(( ( min(int(5.0), i0) - int(2.0) ) * i2 ),mod(max(min(int(9.0), len(\"\"C\"\"[int(7.0):])), i1),saveOrd(\"\"Y\"\"))) + int(7.0) )).lstrip(\"\"-\"\").capitalize() and \"\"m\"\" == s2 )\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 4, 0, 2, 2, 1, 0, 0, 7, 7, 3, 0, 20, 5, 5, 3, 2, 2, 4, 0, 13, 5, 1, 2, 4, 2, 1, 0, 1]}, {"genotype": [[0], [0, 1, 1, 1], [0, 0, 2, 0], [2, 2], [0, 0], [], [0, 0], [], [], [3, 3], [5, 4], [0, 2, 1, 2], [0, 0], [0, 2], [3], [0], [], [], [1, 1, 1], [4, 0, 0], [1, 1], [], [0, 1, 3, 0, 1, 1], [], [0], [], [], [1], [0, 1, 1, 1], [], [0, 1, 1, 1], [], [], [], [1, 2, 1, 0], [20], [14, 3], [7, 1], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 1, 4, 1, 2, 1, 1, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 4, 0, 4, 0, 0, 0, 4, 1, 2, 1, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( s1 in \"\"o7\"\" and i1 != int(4.0) )\\nres0 = \"\"d\"\" == \"\"U\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 1, 1, 2, 1, 2, 0, 2, 2, 1, 0, 0], [1, 0, 0, 1], [2, 1, 0, 0, 2, 1, 0, 0], [0, 0], [0, 0, 0, 0], [], [], [0, 1, 3, 1], [4, 2, 0, 5], [0, 0, 1, 1, 1, 0, 2, 1, 2, 2, 1, 1, 0], [0, 0, 0, 0], [4, 2, 1], [3, 2, 1, 3, 1, 1], [0, 1, 1], [0, 0], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 7, 4, 5, 4, 2, 8, 0, 4, 5, 3, 2, 2, 2, 1, 1, 9, 4, 8, 0, 0, 1, 7, 0, 3, 3], [1, 1, 2, 2, 0, 2, 1, 0, 1, 0, 0, 2, 2, 1, 0, 2, 1, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 2, 2, 1, 1, 0, 0, 1], [0, 1], [2, 2, 2, 1, 2, 0, 2, 2, 2, 0, 3, 1, 1, 3, 0, 0, 3, 0, 2, 3, 0, 2, 1, 2, 0, 1, 2, 1, 3, 1, 2, 2, 3, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 3, 3, 3, 3, 3, 0, 3, 2, 3, 0, 2, 3, 1, 0, 1, 2, 1, 3, 3, 1, 3, 0, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 2, 3, 0, 3, 3, 3, 0, 2, 0, 0, 3, 2, 2, 0, 2, 3, 2, 2, 2, 1, 0, 0, 0, 1, 1, 0, 2, 1, 2, 1, 2, 0, 2, 0, 3, 2, 0, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 2, 3, 2, 0, 2, 1, 4, 4, 2, 0, 0, 2, 1, 1, 1, 0, 3, 3, 2, 3, 2, 3, 1, 1, 4, 1], [2, 0, 0, 1, 2, 1, 1, 0, 0, 2, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 3, 1, 4, 3, 4, 4, 5, 2, 5, 0, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [4, 4, 2, 2, 1, 0, 0, 2, 4, 0, 4, 1, 1, 1, 4, 4, 2, 1, 4, 0, 2, 0, 2, 4, 0, 0, 1, 4, 4, 4, 0, 0, 3, 2, 1, 1], [1, 1, 1, 0, 3, 3, 0, 3, 1, 3, 0], [4, 5, 3, 4], [0, 2, 1, 2, 1, 0, 2], [2, 2, 0, 3, 2, 3, 1, 1], [2], [14, 10], [5, 5, 2], [15, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 12, 12, 4, 8, 2, 4, 0, 0, 4, 4, 9, 4, 2, 3, 1, 1, 2, 26, 26, 38, 2, 122, 33, 27, 12, 22, 13, 8, 2, 36, 11, 4, 7, 8, 1, 2, 3, 2], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(mod(divInt(divInt(int(6.0),mod(i1,divInt(( mod(i1,abs(int(7.0))) * int(4.0) ),abs(i2)))),i2),len(saveChr(i0))))\\ni2 = mod(abs(i1),divInt(int(5.0),( i0 + int(4.0) )))\\nb0 = ( not divInt(int(2.0),min(int(8.0), ( ( abs(int(0.0)) + i1 ) - i0 ))) \\le int(4.0) and int(5.0) == int(3.0) )\\nif i0 \\l int(2.0):{:\\nb1 = True\\n:}\\nloopBreak% = 0\\nfor in0 in \"\"5\"\"[int(2.0):][i2:max(saveOrd(s1), saveOrd(in1))]:{:\\nin0 = saveChr(abs(min(i2, min(mod(abs(i1),mod(max(int(2.0), i0),int(1.0))), mod(int(1.0),max(max(int(9.0), min(i2, i1)), i0))))))[:len(in1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in getCharFromString(\"\"5\"\", int(4.0)):{:\\nif \"\"C\"\".startswith(\"\",\"\"):{:\\ni2 *= i0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = int(8.0) != int(0.0)\\nb1 = \"\"2\"\"[i0:].strip(getCharFromString(in2, divInt(( mod(len(s2[:i0]),abs(len(in2.lstrip(s0)[abs(i1):( i0 - i1 )]))) - len(\"\"%\"\") ),( divInt(i0,mod(max(mod(( divInt(int(0.0),i0) + i1 ),i0), int(1.0)),int(7.0))) + i0 )))).rstrip(saveChr(( int(0.0) * mod(int(3.0),mod(i0,( i2 - max(( i2 - int(3.0) ), divInt(mod(saveOrd(getCharFromString(s2, max(i1, i1)).rstrip(s1)),i0),i0)) ))) ))) == (\"\"o\"\"[i1:] + \"\"k\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 2, 0, 1, 0], [0, 2], [2, 1, 1], [0], [0, 0], [], [], [], [3], [1], [0], [], [], [], [], [], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [8, 9, 7, 0, 6, 2, 4, 6, 1, 2, 4, 3], [1, 2, 1, 2, 0, 2, 2, 2, 2, 0], [1, 1], [1, 0, 2, 3, 1, 1, 2, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 2, 0, 3, 2, 0, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 4, 3], [2, 2, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1], [0, 5, 0], [0, 1, 1, 1], [0], [0, 4, 1, 1, 1], [0], [], [], [1, 3, 1, 3], [], [1, 24], [], [6, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 10, 2, 29, 10, 4, 7, 5, 3, 4, 1, 5, 1, 0, 0, 4, 0, 2, 0, 2], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nloopBreak% = 0\\nwhile int(897.0) \\ge i1:{:\\ns0 = getCharFromString(\"\"b#\"\", divInt(max(int(0.0), int(6.0)),mod(( i2 * ( min(divInt(int(2.0),i1), divInt(saveOrd(\"\"y\"\"),i2)) * ( i0 + len(\"\"=\"\") ) ) ),( i2 + int(4.0) ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= i2\\ni2 += mod(( i0 - int(6124.0) ),int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0], [1], [1, 1], [], [0], [], [], [], [], [2], [], [5], [], [], [], [0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [3, 2, 8, 7, 3, 8, 8, 2, 7, 9, 1, 8, 4, 8, 2], [0, 1, 0, 2, 2, 2], [1, 0], [1, 2, 0, 0, 2, 0, 2, 1, 2, 2, 2, 1, 1, 2, 0, 3, 3, 1, 1], [0, 0, 0, 0, 0, 1, 0], [2, 3], [2, 0, 0, 0, 2, 0, 0], [0], [1], [0, 0, 0, 1, 1], [], [2, 1, 0, 1], [], [], [0], [0, 2, 1, 2, 0], [18, 8], [10], [1, 9], []], "fitness": 9223372036854775807, "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif \"\"S1k9\"\"[int(3.0):( i0 * i1 )].endswith(s1):{:\\ni0 += ( i2 + ( int(2.0) + ( ( divInt(int(8.0),int(7.0)) * ( i2 + abs(len(\"\"I\"\")) ) ) + int(3882.0) ) ) )\\ni2 = int(7918482.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 15, 15, 6, 2, 19, 7, 2, 7, 1, 1, 5, 0, 4, 0, 0, 1, 5, 2, 1, 2, 0]}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [0], [1], [1], [], [], [2], [], [1], [1], [], [1], [], [], [], [1], [], [15], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"p\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [3, 6, 6, 4, 7, 1, 5, 2, 3, 0, 7], [2, 1, 2, 1, 2, 2, 1, 0, 1, 1, 0, 1, 1, 1], [], [3, 0, 2, 3, 3, 3, 2, 0, 0, 3, 0, 1, 3, 0, 3, 3, 1, 1, 3, 3, 3, 2, 0, 2, 0, 0, 3, 2, 3, 0, 0, 3, 1, 2, 2, 3, 0, 1, 3, 3, 3, 2, 2, 1, 1, 2, 3, 0, 3, 0, 2, 0, 2, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [2, 0, 4, 0, 4, 4, 2, 0, 3, 2, 1, 0, 2, 1, 2, 3, 4, 0, 4, 4], [1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 1, 1], [5, 4, 5, 0, 3], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [], [4, 1, 4, 2, 2, 2, 2, 4, 4, 4, 4, 1, 0, 0, 4, 1, 1, 2, 0, 0, 1, 4, 1, 4, 0], [0, 3, 3, 3, 2, 2, 2, 3, 0], [5, 4, 0, 3], [0, 2, 0, 0, 0], [1, 0, 1, 1, 1, 0, 1, 0, 0, 2], [0, 0, 20, 11], [19, 0, 19, 17, 17], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 14, 0, 56, 12, 20, 3, 9, 5, 10, 0, 25, 9, 4, 5, 10, 4, 5, 1, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = abs(i2) \\ge ( min(saveOrd(getCharFromString(\"\"tAatr\"\", min(( i1 - i2 ), saveOrd(\"\"A\"\".capitalize().capitalize().lstrip().rstrip(in2)[i1:int(3.0)][saveOrd(in1):i2][abs(min(int(6.0), int(6.0))):][len(\"\"r\"\".capitalize()):abs(max(divInt(i2,divInt(i1,i0)), min(mod(abs(i1),i1), max(int(4.0), mod(mod(abs(i0),int(7.0)),len(\"\"U\"\"))))))].strip(in2[saveOrd(s0):min(divInt(mod(int(1.0),int(5.0)),( saveOrd(\"\"L\"\") + i1 )), saveOrd(\"\"3\"\".lstrip(getCharFromString(in0, i1))))]))))), mod(i1,mod(int(2.0),int(30.0)))) - int(7.0) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 9, 2, 3], [2, 1, 1], [], [3, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 1, 3, 3], [1, 1, 0, 1, 1, 0], [1, 3, 3], [2, 2], [1, 0, 1, 1], [3], [0, 0, 1], [], [1, 0], [], [], [], [3, 2, 3], [], [], [2], [31, 11]], "fitness": 9223372036854775807, "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = max(mod(i2,divInt(int(1.0),( int(3.0) * mod(i1,int(9.0)) ))), mod(( i1 * int(9.0) ),len(\"\"`2(\"\"))) == len(in0)\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 16, 6, 3, 2, 4, 1, 3, 0, 2, 0, 0, 0, 3, 0, 0, 1, 2]}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0], [1], [3, 0, 0], [], [2], [2], [], [5], [1], [], [2, 1], [], [], [1], [1], [], [9], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 1, 0, 1, 1, 0, 2, 0, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= abs(i0)\\nin2 = \"\"j\"\"[:i0]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 4, 2, 5, 3, 0, 6, 5, 2, 5], [2, 0, 2, 2, 0, 1, 1, 1, 0, 0, 1, 0], [], [2, 2, 3, 1, 2, 1, 3, 2, 3, 1, 3, 3, 3, 0, 2, 3, 3, 2, 1, 2, 0, 2, 2, 3, 3, 2, 0, 2, 3, 0, 0, 3, 2, 3, 0, 0, 3, 3, 3, 2, 0, 0, 1, 1, 1, 1, 1, 1, 0, 3, 0, 3, 0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 4, 4, 1, 4, 3, 0, 1, 1, 1, 4, 0, 3, 2, 0, 4, 2, 3], [0, 0, 2, 1, 1], [1, 0, 1, 0, 0, 0, 0, 0], [0, 5, 4, 2, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [], [4, 4, 4, 1, 3, 3, 1, 1, 2, 0, 2, 1, 1, 2, 4, 1, 2, 0, 4, 3, 0, 0], [0, 1, 1, 3, 1], [3], [2, 2, 0, 0], [2, 0, 3, 3, 1, 3, 3, 3, 3, 0, 0], [3, 3, 18], [21], [6], [16, 0, 27, 3, 8, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 12, 0, 53, 13, 18, 5, 8, 5, 11, 0, 22, 5, 1, 4, 11, 3, 1, 1, 6], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(saveChr(mod(divInt(abs(int(8.0)),mod(int(4.0),saveOrd(saveChr(( saveOrd(\"\"6\"\") + int(2.0) ))))),max(saveOrd(((\"\"D-\"\" + \"\"v\\\\\\\\%\"\") + in2[len(\"\"\\\\\\\\\"\"[i2:]):])), ( min(max(( int(5.0) + ( i0 * divInt(( max(max(divInt(i2,divInt(saveOrd(\"\"D\"\"),i2)), i0), min(divInt(len(\"\"S\"\".lstrip(in1[i1:i1])[abs(min(saveOrd(saveChr(divInt(i1,i0))), int(3.0))):int(0.0)]),int(6.0)), int(5.0))) - int(2.0) ),int(5.0)) ) ), i0), abs(i1)) - len((s2 + s1)) )))), i0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [0], [], [], [], [], [5], [1], [0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [9, 4, 6, 0, 9, 3, 2, 3, 0, 7], [1, 0, 1, 2, 0, 1, 1, 1, 0, 1, 0, 2, 2, 0, 1, 1, 1, 1, 1, 2], [1], [0, 2, 3, 2, 3, 3, 0, 0, 0, 0, 2, 3, 0, 3, 0, 3, 2, 3, 3, 2, 2, 3, 1, 2, 3, 2, 2, 3, 0, 3, 2, 3, 2, 0, 0, 3, 0, 0, 3, 2, 3, 1, 1, 3, 3, 2, 0, 0, 2, 0, 0, 2, 0, 1, 1, 1, 2, 3, 3, 0, 1, 1, 0, 3, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [1, 0, 4, 1, 2, 2, 3, 3, 0, 2, 3, 3, 4, 1, 0, 0, 2, 1, 3, 4, 4], [0, 1, 0, 1, 2, 1, 0, 1, 2, 1], [0, 0, 0, 0, 0, 1, 0], [3, 4, 4], [1, 1, 1], [0], [2, 4, 4, 4, 0, 0, 2, 4, 1, 4, 1, 4, 1, 0, 2, 4, 4], [1, 0, 0, 3, 0, 1, 1, 1], [3], [1, 2, 1], [3, 0, 2], [24], [], [9], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 10, 10, 20, 1, 65, 16, 21, 10, 7, 3, 3, 0, 17, 8, 1, 3, 3, 1, 0, 1, 1], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif i1 != ( max(divInt(min(saveOrd(saveChr(i0)[:i1]), i2),i0), ( max(i1, abs(i1)) + abs(divInt(len(getCharFromString(getCharFromString(in0, len(in1)), ( ( min(int(9.0), divInt(abs(divInt(divInt(len(\"\"*\"\".lstrip(getCharFromString(\"\"Y\"\", i1))[len(saveChr(( saveOrd(\"\"9\"\") - mod(i0,i1) ))):]),max(i0, i2)),min(( min(int(4.0), int(6.0)) + abs(max(( i2 - i0 ), ( i1 * i1 ))) ), ( i1 - int(0.0) )))),int(9.0))) + int(3.0) ) - divInt(len(in1),saveOrd(saveChr(i1)[:int(2.0)])) ))),int(3.0))) )) * i1 ):{:\\ni2 -= saveOrd(saveChr(int(07.0)))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [3], [], [3], [1], [], [4, 5, 0], [1], [], [4, 1, 0, 0], [3], [1], [], [1], [], [21], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 2, 1, 1, 0, 1, 0, 1, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(\"\"v\"\".rstrip())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [2], [], [0], [], [], [], [], [2], [], [2], [], [], [], [], [1, 0, 1, 0, 1, 1, 1], [4, 8, 0, 7, 0, 2, 2], [2, 2, 2, 1, 2], [], [0, 2, 0, 2, 3, 1, 0, 1, 3, 1, 2, 0, 2, 0, 1, 1], [1, 1, 1, 0], [2, 1], [2], [1, 1, 0], [4, 0, 3], [1, 0, 1], [], [4, 2, 4, 0, 1, 4, 0, 2, 1], [0, 2, 3], [4], [0, 0], [2, 0, 1], [12], [15], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 5, 0, 16, 4, 2, 1, 3, 3, 3, 0, 9, 3, 1, 2, 3, 1, 1, 1, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile getCharFromString(in1.capitalize()[i2:mod(i2,mod(abs(int(4.0)),i2))], int(80.0)) == \"\"7\"\":{:\\ns0 = in0.rstrip(\"\"Mp\"\"[max(int(70.0), divInt(i1,( i2 * int(2.0) ))):int(2.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [3, 1], [], [2], [], [], [2], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 8, 3, 2, 7, 7, 0, 2, 6, 9, 5, 5, 6, 3, 3, 8, 5, 5, 3, 8, 3, 4, 0, 1, 7, 0, 6, 7, 3], [2, 1, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 2, 0, 1, 0, 2], [0], [2, 3, 3, 1, 3, 0, 2, 2, 2, 2, 3, 0, 3, 2, 3, 0, 3, 1, 3, 2, 2, 2, 3, 1, 1, 3, 0, 3, 3, 0, 3, 2, 1, 2, 1, 3, 0, 1, 1, 2, 2, 1, 0, 2, 2, 3, 1, 1, 1, 2, 0, 2, 3, 1, 0, 3, 3, 0, 3, 3, 2, 0, 1, 3, 1, 3, 3, 3, 2, 0, 2, 0, 2, 3, 2, 1, 0, 3, 2, 3, 1, 1, 2, 2, 0, 1, 0, 2, 1, 2, 3, 3, 1, 2, 1, 3, 2, 1, 1, 1, 2, 3, 1, 1, 1, 3], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [2, 2, 1, 4, 2, 4, 1, 1, 1, 4, 2, 0, 4, 4, 3, 4, 0, 3, 1, 2, 2, 1, 1, 0, 2, 4, 3, 1, 2, 3, 0, 4], [1, 0, 2, 1, 1, 0, 1, 1, 0, 1, 0, 2, 2], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0], [4, 1, 5, 5, 4, 5, 4], [1, 1], [], [0, 0, 4, 2, 2, 0, 1, 2, 2, 4, 0, 4, 2, 4, 2, 1, 2, 0, 0, 4, 0], [0, 1, 2, 1, 1], [], [2, 0, 2, 2, 0, 1, 2], [0, 3], [25], [], [], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 29, 17, 1, 106, 30, 32, 13, 17, 7, 2, 0, 21, 5, 0, 7, 2, 1, 0, 0, 1], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(abs(abs(int(58.0))),max(i1, divInt(( divInt(mod(saveOrd(in1),i2),abs(mod(saveOrd(s1),i0))) - max(int(3.0), max(( ( divInt(max(int(2.0), int(7.0)),saveOrd(getCharFromString(in2[i1:abs(min(i2, saveOrd(\"\"Z\"\")))][divInt(int(7.0),divInt(int(0.0),saveOrd(saveChr(i1)[int(2.0):][int(6.0):]))):], mod(( int(9.0) + i0 ),( divInt(len(in2),int(5.0)) * int(5.0) ))))) - int(6.0) ) - mod(i0,divInt(saveOrd(saveChr(int(3.0))[i0:min(len(\"\"*\"\"[:i2]), max(abs(mod(i2,int(3.0))), abs(int(8.0))))].capitalize()),max(max(min(( i2 + mod(i0,( abs(( int(5.0) - i1 )) - saveOrd(in1[( len(in2) + int(5.0) ):]) )) ), int(3.0)), mod(mod(i0,int(8.0)),i2)), divInt(int(3.0),( max(abs(int(4.0)), ( int(0.0) - len(saveChr(( int(1.0) + int(7.0) ))) )) * int(0.0) ))))) ), ( min(int(6.0), int(7.0)) * int(3.0) ))) ),saveOrd(in1))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1], [2, 0, 2, 1, 2, 1, 0], [0, 0, 0], [1, 1, 1, 2], [0, 0, 0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1, 1, 1, 1], [8, 4, 1, 3, 5, 4], [1, 0, 2, 1, 2, 2, 0, 2], [0, 1, 1], [1, 0, 2, 1, 3, 0, 3, 2, 2, 0, 3, 3, 3, 2, 3, 0, 2, 1, 1, 0], [0, 0, 1, 1, 1], [4, 1, 1, 3, 3, 2], [1, 1, 0, 2], [1, 1, 0], [5, 2, 4, 0, 2, 2, 1, 4, 5, 0, 3], [1, 1, 0, 0, 1], [0, 0, 0], [0, 0, 3, 0, 4, 2, 3, 0, 4, 1, 1, 0, 4, 3, 3, 1, 0, 0], [3, 1, 2], [1], [2], [0, 0, 2, 3, 2], [25, 16], [], [4, 3], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 8, 3, 20, 5, 6, 4, 3, 11, 5, 3, 18, 3, 1, 1, 5, 2, 0, 2, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s2:{:\\ni1 = int(841.0)\\nloopBreak% = 0\\nfor in1 in s0:{:\\ni0 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s2 in (s2 + (s1 + saveChr(( int(3.0) - saveOrd(\"\"Z\"\") )))[i1:].rstrip()):{:\\ni2 += max(( mod(i2,max(len(\"\"Q\"\"), len(in1))) * mod(abs(i0),divInt(int(5.0),int(4.0))) ), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = ((\"\"4^3\"\" + s0) + in0).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1], [1, 2, 1, 1, 2, 1, 0], [2, 0], [1, 1, 2, 1, 0], [0], [0], [], [], [0], [4], [1, 2], [0], [5], [], [], [], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 9, 2, 4, 0, 8, 4, 8, 2, 6, 6, 6, 6, 0, 2, 6, 3, 4, 8, 7, 0, 5, 2, 8, 0, 3, 7, 7, 7, 0, 5, 8, 3, 6, 9, 5, 6, 3, 3, 2, 4], [1, 0, 2, 1, 0, 2, 2, 0, 0, 2, 1, 1, 0, 0, 2, 1, 0, 1, 0, 1, 2, 0, 0, 1, 1, 0, 1, 1, 1, 2, 1, 2, 1, 1, 1, 0, 1, 2, 2, 2, 0, 0, 0], [1, 0, 0], [3, 3, 0, 0, 0, 1, 2, 3, 1, 0, 3, 1, 2, 1, 2, 3, 1, 0, 2, 0, 3, 2, 2, 1, 1, 3, 3, 1, 0, 0, 3, 1, 3, 1, 3, 0, 3, 0, 2, 0, 2, 0, 0, 3, 2, 1, 1, 2, 2, 0, 2, 2, 3, 0, 0, 3, 3, 2, 2, 3, 2, 0, 1, 0, 0, 2, 3, 1, 0, 0, 2, 2, 2, 0, 2, 3, 3, 3, 3, 0, 0, 0, 1, 3, 0, 0, 2, 1, 1, 0, 2, 2, 1, 1, 1, 1, 2, 2, 2, 0, 2, 0, 0, 3, 2, 3, 3, 2, 2, 3, 3, 3, 2, 1, 2, 1, 3, 1, 2, 1, 1, 3, 3, 0, 2, 3, 0, 0, 1, 1, 0, 0, 1, 1, 2, 1, 3, 2, 2, 0, 0, 1, 1, 2, 1, 1, 3, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [4, 1, 1, 0, 1, 2, 1, 2, 0, 3, 2, 0, 4, 2, 2, 3, 1, 0, 4, 1, 3, 0, 2, 1, 2, 2, 1, 0, 2, 3, 1, 3, 1, 3, 2], [1, 1, 2, 2, 0, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 0, 0, 2, 2, 0, 2, 1], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [4, 0, 0, 3, 2, 1, 4, 0, 2, 5, 0, 4, 5, 3, 5, 4], [1, 0, 1, 1, 1, 1], [0], [0, 3, 2, 3, 3, 2, 3, 2, 2, 4, 0, 2, 0, 0, 3, 2, 2, 2, 1, 0, 1, 4, 0, 2, 4, 0, 1, 4, 0, 2, 0, 0, 4, 2, 1, 0, 2, 4, 0, 2, 1, 2, 4, 0, 4, 4, 4, 0], [3, 2, 0, 1, 3, 3, 1, 0, 0, 2], [5, 4, 5], [2, 2, 1, 1, 0, 2, 0, 1, 1, 0, 1, 1, 0, 0], [1, 1, 3, 1, 0, 3], [13], [23, 3, 19], [], [11, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 2, 5, 1, 1, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 41, 41, 43, 3, 149, 39, 35, 23, 17, 16, 6, 1, 48, 10, 3, 14, 6, 1, 3, 0, 2], "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= saveOrd(in1)\\nloopBreak% = 0\\nwhile max(i0, i2) \\le i1:{:\\ni0 = int(392.0)\\ns0 = ((((s0.strip(in0[divInt(max(int(4.0), i2),min(int(0.0), ( int(8.0) - mod(max(int(4.0), i2),( i0 * abs(mod(( int(8.0) * int(2.0) ),max(abs(int(6.0)), i0))) )) ))):i2])[:min(int(6.0), len(s2))][:int(6.0)] + (\"\"x\"\"[:abs(i1)][min(i1, ( i0 + ( i0 * i2 ) )):saveOrd(s1)][( int(6.0) - int(0.0) ):] + \"\"d(\"\"))[( ( i1 * ( ( abs(i0) - i1 ) * abs(len(in1.capitalize())) ) ) * mod(( max(divInt(i0,int(2.0)), i1) * i2 ),( min(int(6.0), i0) - i0 )) ):] + getCharFromString(s0, mod(mod(divInt(i1,( saveOrd(\"\"t\"\") * max(len(saveChr(min(i1, i0))), i1) )),int(3.0)),abs(i1)))[:i1]) + s2)[divInt(int(48.0),int(7.0)):] + in2[i2:mod(divInt(int(052.0),int(8.0)),int(0.0))])\\nloopBreak% = 0\\nfor s0 in in1:{:\\ni1 = int(37.0)\\nb0 = \"\"N\"\"[:divInt(mod(( i2 * ( i1 - i1 ) ),max(( abs(abs(( ( max(min(abs(( int(7.0) + divInt(int(7.0),len(in2)) )), int(0.0)), ( int(5.0) + int(8.0) )) * max(len(in0.strip(\"\"`\"\"[i1:divInt(max(i0, i1),int(3.0))])[:int(6.0)]), i2) ) * i2 ))) + int(9.0) ), int(5.0))),divInt(int(6.0),len(saveChr(( divInt(i2,i0) * int(3.0) ))[int(3.0):( int(2.0) - int(4.0) )])))].rstrip(in2).endswith(getCharFromString(getCharFromString(in1.capitalize(), abs(i0)), i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 2, 2, 0, 1, 1, 0], [0, 0], [0, 0, 1, 1, 0, 1, 2], [0, 0], [0, 0, 0, 0, 0], [], [], [2, 2, 0, 3], [5], [1, 0, 2], [0], [2], [0], [], [], [], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [3, 6, 6, 2, 0, 7, 9, 4, 2, 8], [0, 1, 1, 0, 0], [1, 0, 0], [0, 1, 2, 1, 1, 1, 1, 1, 0], [1], [], [1], [1], [3, 0, 3, 4, 2, 2, 1], [1], [0, 0], [4, 2, 0, 4, 4, 4, 1, 0, 0, 0], [2, 2, 2, 0], [], [2], [1], [], [7], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 2, 7, 2, 5, 0, 0, 4, 1, 3, 1, 1, 1, 0, 0, 0, 10, 10, 5, 3, 9, 1, 0, 1, 1, 7, 1, 2, 10, 4, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 != int(3.0)\\nb2 = b0\\ni1 -= mod(int(6.0),int(62079.0))\\nloopBreak% = 0\\nfor in0 in s0[int(4.0):].capitalize():{:\\nloopBreak% = 0\\nfor in0 in getCharFromString(\"\"h\"\", int(2.0)).capitalize().capitalize():{:\\ni1 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = in1 == s2\\ni0 = i0\\ns2 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [0], [2, 0], [0], [0], [], [], [0], [3], [0, 1], [0], [], [2], [], [], [], [1, 0, 0, 0, 1], [0, 5, 6, 9, 4], [2, 1, 1, 1, 0, 2, 2, 0], [], [0, 2, 0, 3, 2, 1, 3, 0, 0, 0, 3, 0, 3, 0, 0, 2, 3, 1], [1, 0, 1], [2, 1, 0, 2, 4], [1], [1, 0], [2, 1, 5], [1, 1], [0], [2, 2, 1, 1, 0], [], [], [0, 0], [0, 1], [22], [7], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 5, 5, 8, 0, 18, 3, 5, 1, 2, 3, 2, 1, 5, 0, 0, 2, 2, 1, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"W\"\"[i2:mod(i1,abs(( int(0.0) - max(i1, i1) )))][i0:min(i2, abs(i2))]\\nloopBreak% = 0\\nfor s1 in \"\"h\"\":{:\\nb0 = not i0 \\ge divInt(saveOrd(in2),int(5694.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [], [0, 2, 2], [], [5, 3], [3], [1], [0], [], [1, 1, 1, 1], [6, 1, 0, 8], [0, 0, 2, 1, 2, 2, 1, 0], [], [1, 3, 3, 2, 3, 0, 1, 2, 2, 3, 0, 2, 0, 3, 1, 3, 3, 0, 1, 0, 0, 0, 3, 0], [1, 1, 1, 0], [3, 3, 2, 4, 0, 0, 3, 3], [0], [0, 0, 1], [4, 4, 3, 2, 3, 1, 2, 0], [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [], [3, 3, 3, 2, 2, 4, 1, 0, 3, 2, 1, 0, 1, 4, 3, 3, 3, 2, 0, 3, 1, 1, 0, 1, 1, 2, 0, 1, 0, 2, 3, 3, 2, 2, 0, 1, 3, 1, 4, 0], [1, 2, 1], [], [0, 2, 2, 1, 2, 2, 2, 2], [0, 1, 3, 1, 1, 3, 3, 2, 2, 0, 2, 3, 1, 1, 2, 3, 1, 0, 3, 3, 3, 0, 1, 0], [18, 20, 4, 13, 10], [20, 20, 24, 25, 22, 3, 12], [1, 4, 3, 8], [24, 12, 10, 29, 4, 18, 0, 0]], "fitness": 9223372036854775807, "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( (((saveChr(int(6.0))[len(\"\"Su\"\"):][len(in1):divInt(abs(i0),int(1.0))] + (\"\"?u\"\"[divInt(mod(saveOrd(in1),i0),( i2 + min(int(0.0), min(len(\"\"y\"\"), i1)) )):] + (((in0[:int(8.0)] + (\"\")\"\" + \"\"\"\\\\\"1\"\")) + s2) + \"\"4U3^\"\").capitalize())) + \"\"z\"\") + in0[i2:]).endswith(\"\"w8\"\") or s1 != ((s2[i2:][i1:] + \"\"!dE/N\"\") + (\"\"mK\"\" + saveChr(len(s0))))[i0:] )\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 3, 0, 2, 1, 1, 0, 0, 4, 4, 8, 0, 24, 4, 8, 1, 3, 8, 24, 0, 40, 3, 0, 8, 24, 5, 7, 4, 8]}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 2, 0, 2, 2, 1, 1, 1, 1], [2, 0, 1], [0, 1, 0, 2, 1, 0, 0], [0], [0], [], [], [0, 1, 2, 3, 0, 3], [3, 0], [0, 0, 0, 2, 1, 1, 0], [0, 0], [3], [2, 1, 0, 0], [], [0], [0], [1, 1, 0, 0, 0, 1], [5, 1, 9, 2, 5, 1], [2, 1, 0, 1, 1], [1, 1], [0, 1, 3, 3, 3, 1, 0, 1, 0], [], [2, 2, 3], [1, 1], [], [1, 5, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1], [0], [1, 0, 1, 3, 2, 1, 1, 1], [], [], [2], [1, 3, 2, 1, 1, 1, 3, 3, 2], [], [2, 16, 13, 23], [2, 8], [12, 22, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 3, 7, 1, 1, 0, 0, 6, 2, 7, 2, 1, 4, 0, 1, 1, 6, 6, 5, 2, 9, 0, 3, 2, 0, 3, 9, 1, 8, 0, 0, 1, 9, 0, 4, 2, 3], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not True\\ni2 -= i1\\nloopBreak% = 0\\nwhile b1:{:\\nb2 = \"\"c)\"\" != s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in \"\"2qn\"\":{:\\nif int(5.0) \\ge abs(abs(len((\"\"x\"\"[int(1.0):] + \"\"=\"\")))):{:\\ns0 = \"\";8\"\"\\ni0 -= i1\\nres0 = int(9251.0) \\l i1\\nb0 = res0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 0, 0], [], [2, 1, 1], [], [0, 0, 0], [], [], [1], [], [0], [], [], [1], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [7, 7, 7, 3, 8, 0, 1, 3, 3, 0], [1, 2, 2, 1, 0, 1, 0, 0, 0, 2, 0, 0], [0, 0], [2, 1, 0, 2, 0, 0, 2, 0, 2, 2, 3, 3, 2, 0, 3, 3, 2, 1, 2, 0, 1, 2, 1, 3, 2, 0, 2, 0, 1, 3, 2, 3, 1, 1, 3, 0, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 4, 1, 4, 3, 0, 3], [2, 2, 0, 2, 2], [1, 1, 0, 1, 0, 1, 1], [0, 5, 2, 0], [1, 0, 1, 1, 1], [], [3, 2, 4, 3, 1, 1, 4, 1, 2, 0, 2, 2, 0, 0, 1], [2, 0], [], [2, 2, 1, 2], [0, 3, 0, 0, 0], [16, 25, 6, 4], [], [], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 12, 2, 39, 12, 8, 5, 7, 4, 5, 0, 15, 2, 0, 4, 5, 4, 0, 0, 1], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = ((\"\"Q\"\" + \"\"]Z\"\").capitalize()[mod(int(7.0),i1):] + getCharFromString(\"\"G\"\", mod(i2,i2)))\\ni1 = ( i0 * divInt(( min(max(( i1 * saveOrd(in2[max(( int(7.0) + ( i0 * int(7.0) ) ), mod(int(3.0),saveOrd(s2[divInt(i0,mod(i0,int(8.0))):][:len(s0)]))):]) ), mod(min(int(0.0), int(1.0)),len(\"\"E\"\"))), i2) * i0 ),int(3.0)) )\\ni0 = int(30.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 1], [2, 1, 2, 1, 1], [0, 0], [0, 2, 1], [0, 0], [0], [], [], [1], [], [2], [], [0], [], [], [], [], [1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [7, 2, 8, 1, 0, 2, 1, 2, 4, 6, 4, 9, 8, 2, 9, 8, 9, 1], [2, 0, 1, 2], [0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 3, 1, 1, 1], [], [1], [], [], [5, 0, 4], [1, 1, 1, 1], [0, 0], [3, 4, 2, 2, 1, 4, 2, 4, 1, 4, 3, 2, 1, 4, 2, 1], [1, 1, 1, 0, 3], [1], [0, 2, 0, 0, 0], [0, 2, 1, 3], [5], [23], [3], [14]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 2, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 18, 4, 1, 16, 0, 1, 0, 0, 3, 4, 2, 16, 5, 1, 5, 4, 1, 1, 1, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in (saveChr(int(7.0)) + \"\"F\"\"[i2:][int(2.0):int(810.0)]):{:\\nb1 = saveChr(int(21.0)) in saveChr(int(24.0))[int(6.0):int(4.0)]\\nloopBreak% = 0\\nfor s0 in \"\"3\"\":{:\\nin1 = getCharFromString((\"\"x\"\"[int(9.0):i0] + \"\"+\"\"[i1:int(8.0)].rstrip()), max(int(29.0), int(8.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(91.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [2, 0], [], [0], [], [], [1, 2, 2], [4], [1, 0], [0], [], [0], [], [], [], [1, 1, 1, 1], [1, 5, 2, 3], [0, 2], [], [2, 3, 1, 0, 3, 1, 0, 1, 1], [1], [0, 0], [], [1], [5], [1], [], [2, 1], [], [], [2], [3], [], [], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 9, 1, 2, 0, 1, 1, 1, 0, 2, 0, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = \"\"&\"\"[mod(min(int(1.0), i0),min(int(5.0), i2)):]\\nb1 = int(2.0) \\le int(3.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [1], [2], [], [0], [], [], [], [4], [0, 0, 0, 2], [0], [1], [3, 2, 1], [0], [0], [0], [1], [5], [1, 2, 1, 2], [], [3, 0, 0, 0, 0], [], [0], [], [], [1, 4], [0, 0, 0, 1, 1], [], [2, 1, 2, 1, 0], [], [], [0, 2], [2, 1, 1, 0, 2], [25], [6, 11], [3, 4], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 4, 0, 1, 3, 1, 1, 1, 0, 0, 4, 0, 5, 0, 1, 0, 0, 2, 5, 0, 5, 0, 0, 2, 5, 1, 2, 2, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( not True and \"\"3glZ\"\"[min(i1, i2):i1] not in \"\"4\"\"[i2:] ):{:\\ns1 = in1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 2, 0, 1, 1, 1, 0], [1], [0, 2, 0, 2, 3, 3, 0, 0, 0, 0, 2, 0, 0], [0, 1, 0], [4, 0], [0, 1, 1], [0], [3], [1], [0], [2, 4, 1], [1], [], [2], [3], [], [], [], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 9, 2, 2, 2, 1, 1, 1, 1, 3, 1, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in saveChr(i1)[( i0 + divInt(saveOrd(\"\"*\"\"),min(i1, i2)) ):]:{:\\ni0 -= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [2], [], [5], [], [], [], [], [0, 1], [1, 2], [], [], [1, 1], [], [], [], [], [2, 5], [1], [], [0, 4, 1, 0, 4, 2, 0], [2, 2], [], [1], [0], [7], [9], [], []], "fitness": 9223372036854775807, "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s2.endswith(\"\"H\"\".capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 3, 1, 0, 0, 1, 1, 0, 0, 0]}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0], [], [], [1, 2, 2], [5], [1, 0], [0], [], [3], [], [], [], [1, 1, 1], [1, 5, 2], [0, 2], [], [2, 3, 1, 0, 3, 1, 0, 1, 3], [1], [0, 0, 4], [], [1], [0, 4], [0, 0, 1], [], [2, 0, 1], [], [], [2], [2, 2, 3], [], [], [3, 4], [29]], "fitness": 9223372036854775807, "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = mod(min(int(1.0), i0),min(int(5.0), i2)) != int(2.0)\\ns0 = in1[saveOrd(\"\"34^\"\"):]\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 9, 1, 3, 0, 1, 2, 3, 0, 3, 0, 0, 1, 3, 0, 0, 2, 1]}, {"genotype": [[0], [0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [], [0, 2, 1, 2, 0], [], [0, 0, 0, 0], [], [], [2, 1, 0], [0], [1, 2, 2, 2, 2], [0], [3, 5, 2], [3], [0], [], [], [1], [3], [0, 2, 2, 1], [0], [3, 0, 0, 0], [], [4], [], [], [3, 0, 1, 1, 2, 4, 1], [1, 1, 1, 1, 1, 1], [], [4, 4, 1, 4, 4, 0, 0, 1, 3, 1, 0, 4, 1, 1, 0, 2, 4, 0], [3, 3, 2, 3, 0, 0], [5, 2, 2], [], [0, 2, 3, 2, 1, 0], [18], [20, 12], [9, 7], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 0, 5, 0, 4, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 4, 1, 4, 0, 1, 0, 0, 5, 4, 0, 13, 5, 3, 0, 4, 1, 0, 2, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveOrd(\"\"S\"\".strip().strip(in0.strip().capitalize())) \\l i0\\ns0 = s1\\ni2 = i2\\ns1 = \"\"9\"\"\\nb1 = (\"\"#\"\" + s2) != getCharFromString(\"\"7\"\", i1)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 2, 2, 0, 1, 2, 0, 2, 0, 2, 1, 0, 2, 1, 0], [1, 2, 0, 2, 1, 0], [1, 0, 1, 2, 1, 0, 1, 2, 2], [0, 0], [0, 0, 0, 0, 0], [], [], [1, 3, 2], [2, 3, 0, 2], [2, 1, 2, 2, 0, 0, 0, 1, 2, 0, 0], [0, 0, 0, 0], [3, 4, 5, 0, 0], [2, 3, 3, 0, 1], [0, 0], [0], [0, 0], [1, 1, 1, 1, 1], [0, 6, 4, 2, 7], [2, 0, 2, 2, 0, 2, 0, 2, 0, 2, 1, 0], [1, 0, 1, 0], [0, 3, 2, 3, 0, 1, 0, 0, 3, 3, 1, 0, 0, 1, 3, 3, 0, 2, 2, 0, 1, 1, 3], [0, 0, 1], [3, 3, 3, 3, 2, 1, 4], [0, 1, 1, 1], [1], [4, 3, 3, 2, 0, 5, 4, 4, 4, 5, 1, 1, 3, 4, 3], [1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [0, 0], [1, 0, 0, 4, 1, 0, 0, 1, 0, 2, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [1], [], [2], [3, 1, 2, 3, 0, 3, 3, 1, 1, 3, 2], [6], [2, 12, 24], [4, 8], [21, 13, 4, 28, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 14, 14, 6, 8, 2, 4, 0, 0, 3, 2, 11, 2, 4, 5, 2, 1, 2, 2, 2, 9, 4, 12, 1, 4, 3, 0, 12, 8, 2, 17, 1, 0, 1, 8, 1, 2, 1, 4], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\nif \"\"<\"\" != in1:{:\\nloopBreak% = 0\\nwhile len(in0) == ( len(saveChr(i2)) - int(0.0) ):{:\\nb1 = \"\"c\"\".startswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i0\\nloopBreak% = 0\\nfor s2 in s0:{:\\nin2 = \"\"4\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile in1.endswith(\"\"*\"\"[i2:]):{:\\ni0 -= len(\"\"G\"\")\\nif not ( ( len(in1) \\ge int(6.0) and \"\"!\"\" in in1 ) and res0 ):{:\\nb2 = True\\ni2 = i0\\nloopBreak% = 0\\nfor in2 in s1:{:\\ns1 = \"\"]m\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1], [1, 2, 1, 1, 0, 2, 0, 0], [1, 0], [0, 0, 2, 1, 1, 0], [0], [0, 0, 0], [], [], [0, 3, 1], [3, 3], [0, 0, 1, 2, 1, 2], [0, 0], [3, 4], [1, 3], [0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [4, 0, 6, 9, 8, 4, 7, 2, 8, 4, 3, 2, 5, 5, 7, 3, 4, 1, 6, 6, 2, 3, 4, 2, 7, 3, 1, 3, 7, 6, 5, 7, 9, 7, 2, 6, 1, 4, 9, 1, 5, 9, 7, 0, 5, 8, 6, 4, 4], [2, 1, 1, 0, 0, 1, 0, 0, 1, 2, 1, 1, 1, 0, 0, 2, 1, 1, 0, 0, 2, 0, 1, 0, 2, 1, 1], [0, 0], [0, 2, 2, 1, 0, 0, 1, 3, 1, 2, 2, 3, 2, 2, 0, 2, 2, 0, 2, 1, 1, 0, 1, 2, 3, 1, 2, 2, 0, 1, 3, 0, 1, 1, 2, 1, 3, 3, 3, 0, 2, 2, 1, 1, 0, 3, 0, 1, 0, 1, 2, 1, 1, 2, 0, 2, 2, 3, 0, 0, 1, 3, 1, 2, 2, 2, 2, 2, 0, 0, 3, 2, 2, 1, 2, 0, 1, 1, 3, 1, 3, 0, 0, 2, 2, 2, 1, 2, 1, 1, 3, 3, 3, 0, 3, 3, 2, 2, 2, 1, 1, 0, 0, 3, 2, 1, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [2, 2, 1, 4, 1, 4, 3, 4, 0, 2, 4, 0, 2, 0, 3, 1, 2, 0, 2], [2, 0, 0, 0, 1, 2, 0, 0, 0, 1, 1, 0, 0, 1, 2, 2, 1], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 2, 5, 4, 4, 0, 0, 5, 5, 2, 1, 4, 3, 3, 4, 1], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0], [3, 1, 3, 2, 3, 2, 0, 2, 4, 3, 2, 4, 0, 4, 0, 0, 1, 0, 1, 1, 0, 3, 4, 4, 0, 1, 3, 3, 4, 3, 1, 1, 0, 4, 3, 1, 0, 3, 2, 1, 3, 2, 3, 2, 4, 0, 0, 0, 0, 0, 2, 0, 1, 0], [2, 3, 2, 2, 0, 2, 3, 3], [5, 0, 4], [0, 2, 1, 0, 0, 2, 0, 1], [1, 3, 3, 3, 2, 0, 1, 3, 1, 0, 0, 2, 0, 3, 2, 1, 1, 0, 1, 2], [8, 25, 12, 6, 7], [24, 18, 2, 8, 1, 2], [2, 0, 3, 7], [5, 23, 26, 28, 30]], "fitness": 9223372036854775807, "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\nif ( i2 \\ge mod(divInt(int(4.0),i1),i1) and (\"\"y\"\" + ((s0[int(0.0):] + (s2.strip(in0.capitalize())[abs(int(6.0)):( ( abs(( divInt(i0,mod(( i0 * mod(int(9.0),int(8.0)) ),i1)) + int(4.0) )) + ( max(int(7.0), divInt(mod(i0,int(2.0)),saveOrd(s2))) + i0 ) ) - int(8.0) )] + \"\"\"\"\").capitalize()[:int(432.0)])[divInt(int(5.0),max(saveOrd(in2), len(\"\">\"\"))):i1] + \"\"[2I\"\")) != in1 ):{:\\nres0 = ( divInt(int(5.0),int(73416.0)) * i2 ) \\ge saveOrd((getCharFromString(in1, i1).capitalize() + \"\"s]c\"\"))\\n:}else:{:\\ns0 = (((\"\"Z\"\" + \"\"M0G_3i\"\").capitalize() + s0) + (\"\"b\"\" + in2).lstrip())\\n:}\\ni1 = int(6.0)\\nloopBreak% = 0\\nfor in2 in (\"\"H\"\"[i1:int(2342.0)] + ((s2.rstrip(s1)[( int(73137.0) + int(6.0) ):mod(i0,mod(( min(i0, i2) + int(5.0) ),abs(int(7.0))))] + in1)[divInt(divInt(( mod(mod(i1,i1),saveOrd(in0)) + mod(( int(9.0) - ( i0 - int(7.0) ) ),int(2.0)) ),min(int(61491.0), abs(i0))),i2):] + in0)):{:\\ni0 = mod(mod(( int(597.0) + ( int(0.0) + int(5.0) ) ),min(len(in1[:max(i1, abs(min(( ( ( int(8.0) - int(6.0) ) * i0 ) * i2 ), abs(( int(4.0) - i1 )))))]), i1)),int(4.0))\\nb1 = \"\"c7\"\".startswith(s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 2, 6, 1, 3, 0, 0, 3, 2, 6, 2, 2, 2, 1, 1, 1, 49, 49, 27, 2, 109, 35, 19, 17, 18, 18, 20, 1, 54, 8, 3, 8, 20, 5, 6, 4, 5]}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [], [], [1, 3], [], [4], [], [], [3, 1, 4], [1, 0, 0, 0, 0, 0, 0, 1], [], [3, 2, 3, 1, 0, 0, 1], [], [], [0], [1, 2, 3, 1, 3, 1, 3, 0], [14], [12, 2, 25], [8], [3, 11, 0]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 3, 8, 0, 7, 0, 0, 1, 8, 1, 3, 1, 3], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = ((\"\"m\"\" + s1)[int(4.0):saveOrd(in1)] + \"\"8c(zO\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1], [4, 8, 8, 0], [0, 2, 0, 1], [0, 0], [2, 1, 2, 3, 2, 3, 0, 0, 1, 2, 1, 2, 0, 1], [1, 1, 1, 0, 1], [1, 4], [2], [0, 1, 0, 0], [1, 2], [0, 1], [], [2, 1, 0], [], [], [2], [0, 2], [11], [], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 1, 14, 5, 2, 1, 4, 2, 2, 0, 3, 0, 0, 1, 2, 1, 0, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = divInt(int(4.0),mod(max(divInt(saveOrd(\"\"L3\"\"[i2:]),i0), int(8.0)),( int(8.0) * divInt(i1,int(0.0)) )))\\ns1 = s2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [0, 2, 0, 1], [0], [1, 2, 1], [0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [8, 5, 7, 8, 9, 8, 7, 0, 4, 8, 1, 4, 6, 6, 1, 1, 7, 7, 6, 9, 0, 1, 2, 6, 2, 4, 0, 8, 7, 0, 7, 5, 9, 5, 3, 0, 0, 1, 2, 4, 9, 3, 0, 1, 6, 2, 1, 4, 9, 4, 8, 5, 1, 5, 7, 9], [1, 1, 1, 2, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 2, 0, 2, 2, 0, 0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1, 2, 1, 1], [1, 0], [1, 0, 2, 1, 0, 3, 0, 3, 2, 1, 3, 2, 2, 3, 1, 1, 2, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 3, 0, 2, 2, 3, 3, 0, 2, 2, 3, 0, 3, 1, 2, 2, 2, 1, 2, 1, 0, 2, 2, 1, 2, 2, 3, 2, 1, 1, 2, 1, 3, 2, 3, 1, 2, 1, 1, 3, 0, 0, 3, 1, 2, 2, 2, 2, 2, 1, 0, 1, 3, 3, 1, 2, 1, 3, 2, 0, 3, 3, 1, 1, 3, 2, 1, 2, 1, 2, 1, 1, 0, 0, 0, 2, 2, 3, 2, 1, 2, 0, 1, 1, 3, 1, 0, 1, 3, 2, 0, 2, 1, 0, 1, 0, 0, 3, 3, 3, 2, 0, 1, 1, 3, 3, 2, 2, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 0, 2, 0, 3, 0, 2, 1, 3, 2, 1, 2, 3, 3, 1, 0, 2, 2, 2, 1, 0, 3, 1], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 4, 3, 2, 1, 1, 0, 2, 2, 2, 0, 2, 3, 1, 0, 0, 0, 1, 2, 1, 3, 2, 3, 1, 1, 1, 2, 2, 3, 4, 3, 3, 2, 3], [2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 0, 2, 0, 2, 2, 0, 2, 1, 0, 2, 2, 0, 0, 2, 2, 0, 0, 1, 1, 1, 1, 2, 0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0], [4, 3, 0, 0, 4, 2, 1, 3, 4, 5, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0], [3, 0, 4, 3, 0, 4, 2, 4, 4, 3, 1, 4, 4, 1, 4, 0, 2, 0, 0, 4, 4, 4, 3, 1, 1, 1, 3, 3, 4, 4, 0, 2, 2, 4, 2, 4, 2, 4, 4, 4, 2, 0, 0, 0, 1, 1, 0, 1, 2, 1, 0], [3, 0, 2, 0, 2, 0, 0, 3, 3, 3, 2, 1, 2, 3, 1, 2, 3], [3, 0, 3, 5, 0, 4], [2, 0, 0, 2, 1, 0, 0, 2], [2, 2, 0, 0, 1, 2, 2, 3, 3, 2], [0, 17], [19], [2, 2, 2, 9, 5], [19, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 56, 34, 2, 167, 54, 35, 33, 22, 13, 10, 1, 51, 17, 6, 8, 10, 2, 1, 5, 2], "tree_depth": 69, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(85.0)\\nloopBreak% = 0\\nfor in1 in (in0 + (s0 + getCharFromString(getCharFromString((\"\"2\"\" + getCharFromString(\"\"2\"\", i1).capitalize()), mod(int(7.0),i1)).capitalize()[abs(i2):], min(mod(int(8.0),saveOrd(getCharFromString(s0, ( ( len(in1[int(9.0):int(8.0)]) * ( int(7.0) - i0 ) ) - divInt(i0,( int(0.0) + int(4.0) )) )))), ( abs(int(81.0)) * i1 )))).lstrip(s2)):{:\\ns1 = (\"\"A\"\" + \"\"R\"\").strip(\"\"t\"\").lstrip(((saveChr(max(i0, divInt(mod(max(min(i2, ( mod(abs(i0),abs(int(4.0))) - mod(( mod(int(6.0),mod(int(6.0),i0)) - ( mod(int(1.0),( ( abs(( int(1.0) + int(7.0) )) + ( int(7.0) + min(( abs(int(6.0)) * mod(int(9.0),int(0.0)) ), len(in0)) ) ) + i2 )) * i0 ) ),max(int(1.0), ( ( ( ( ( int(2.0) * i0 ) + int(6.0) ) * min(min(int(2.0), ( int(4.0) - min(( i2 + max(abs(int(0.0)), int(8.0)) ), max(( int(7.0) * divInt(int(0.0),( int(7.0) * int(5.0) )) ), i0)) )), i2) ) + i2 ) + divInt(divInt(len(saveChr(( int(9.0) * mod(i0,int(5.0)) ))[int(3.0):abs(int(0.0))].lstrip()[:i0].capitalize()[int(0.0):][len(in1[( i2 * ( int(1.0) + i1 ) ):int(2.0)].rstrip(in2).capitalize()):i0]),i1),max(max(max(( i2 + int(4.0) ), int(9.0)), abs(abs(mod(( i1 - ( ( int(3.0) - i2 ) - ( len(s1) - int(0.0) ) ) ),i1)))), mod(i0,( i0 * saveOrd(\"\"2\"\") )))) ))) )), i1),divInt(int(1.0),len(\"\"9\"\"))),mod(int(6.0),( len(s1) + abs(int(2.0)) ))))).capitalize() + \"\":@\"\") + \"\"5\"\"[i2:])).lstrip()\\ni1 = mod(mod(divInt(int(14948.0),i1),len(s0)),int(51579.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 0], [], [0, 0], [], [], [3, 3], [0, 1], [1, 0], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [1, 9, 3, 2, 7, 7, 0], [2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 0, 1, 2], [1], [2, 2, 2, 1, 2, 0, 2, 0, 3, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 0, 0, 2, 2, 3, 2, 2, 2, 2, 3, 0, 3, 0, 0, 0, 2, 0, 1, 3, 0], [0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [2, 2, 4, 2, 3, 3], [1, 2, 2, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [2], [1, 0, 0, 0, 1], [], [1, 0, 2, 1], [], [], [1], [3, 0, 3, 3, 2], [2], [], [4], [28, 9, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 13, 1, 39, 16, 6, 6, 11, 1, 5, 0, 4, 0, 0, 1, 5, 1, 0, 1, 3], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= ( mod(mod(int(1.0),mod(i2,( i1 * abs(int(9.0)) ))),mod(( int(3.0) * i1 ),int(2.0))) + abs(mod(i2,mod(i2,i2))) )\\nres0 = mod(( saveOrd(\"\"]\"\") + divInt(mod(( mod(abs(i1),len(s2)) + i1 ),i1),i0) ),mod(i1,int(7.0))) \\l len(\"\"C&,4\"\"[:i2])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [4], [1], [], [1], [], [], [], [0], [4], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"E\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 2, 0], [2, 1], [1, 1], [], [0], [], [], [], [5, 2], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 5, 2, 0, 3, 0, 7, 1, 8, 1, 8, 1, 8, 9, 9, 5, 4, 0, 5, 8, 1, 4, 7, 2], [2, 0, 1, 0, 0, 1, 1, 1, 2, 1, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 1], [0, 1], [3, 0, 2, 3, 0, 3, 1, 0, 2, 3, 2, 1, 1, 2, 3, 3, 2, 3, 1, 3, 2, 0, 3, 2, 3, 0, 1, 1, 3, 3, 3, 1, 0, 2, 3, 2, 2, 3, 3, 3, 0, 3, 1, 3, 0, 2, 0, 1, 0, 2, 0, 2, 1, 1, 2, 1, 3, 3, 1, 0, 2, 0, 0, 2, 3, 1, 2, 2, 0, 3, 0, 1, 2, 1, 2, 0, 1, 2, 0, 1, 3, 2, 3, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0], [1, 3, 1, 1, 0, 4, 0, 1, 0, 1, 4, 4, 1, 0, 2, 2, 2, 0, 4, 4, 2, 2, 2, 2, 2], [2, 2, 1, 2, 1, 0, 0, 1, 0, 2, 2], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 3, 0], [1, 1], [], [2, 4, 4, 2, 4, 2, 0, 0, 0, 2, 1, 1, 4, 2, 0], [1, 0, 3, 0], [3], [1, 1, 2, 1, 2], [2, 1], [], [6], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 24, 24, 21, 1, 85, 22, 25, 11, 11, 4, 2, 0, 15, 4, 1, 5, 2, 0, 1, 1, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(i2, ( len(saveChr(i0)[:max(int(1.0), i1)]) * mod(max(( int(5.0) * int(2.0) ), divInt(min(saveOrd(getCharFromString(s0[( min(int(0.0), max(( i0 - min(( max(i0, int(3.0)) * int(0.0) ), saveOrd(s1)) ), saveOrd(in0))) - max(int(7.0), i1) ):].lstrip(\"\"0\"\"[:divInt(min(divInt(mod(abs(abs(abs(i1))),min(int(1.0), saveOrd(\"\"g\"\"))),i1), ( i2 + int(8.0) )),i1)])[:mod(i0,( int(1.0) + int(8.0) ))], mod(int(1.0),saveOrd(getCharFromString(s0[abs(int(8.0)):], i1))))), mod(i1,i0)),( abs(int(9.0)) - mod(mod(i1,abs(i0)),int(9.0)) ))),( int(54058.0) + mod(i2,int(147.0)) )) )) != ( i0 * int(2.0) ):{:\\ni1 = abs(( abs(i1) * i1 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [1], [0], [], [0], [], [], [1], [0], [1, 0], [0], [], [1], [], [0], [0], [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [7, 7, 9, 0, 4, 7, 2, 5, 9, 3, 3, 2, 3, 2, 2], [1, 2, 2, 1, 2, 0, 2, 2, 0, 0], [], [1, 2, 3, 3, 2, 2, 0, 1, 3, 1, 1, 3, 3, 1, 1, 2, 0, 2, 3, 3, 0, 1, 2, 0, 2, 3, 3, 3, 2, 3, 0, 3, 0, 1, 2, 2, 2, 3, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [4, 1, 4, 1, 1, 4, 3, 3, 1, 3, 1, 1, 3], [1, 1, 0, 0, 0], [1, 0, 0, 1, 1, 1], [3, 5, 2, 0, 1], [1], [], [4, 0, 2, 2, 0, 1, 0, 3, 2, 4, 0, 4, 0, 4, 4, 4, 4], [3, 1, 0, 2, 2, 1, 1], [5], [2, 1, 0], [3], [], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 15, 15, 10, 0, 44, 11, 13, 5, 6, 5, 1, 0, 17, 7, 1, 3, 1, 0, 0, 0, 1], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(77.0) \\l ( saveOrd(in0.strip(in2[:max(( ( i1 - int(9.0) ) - saveOrd(\"\")\"\") ), int(0.0))][int(4.0):])) + max(max(int(72.0), int(5933.0)), mod(i2,( saveOrd(s2) + len((saveChr(i2)[int(2.0):divInt(i1,divInt(len(s0),max(len(getCharFromString(s1, mod(max(i2, max(i0, int(3.0))),( mod(mod(len(saveChr(i2).capitalize().capitalize()),i2),i0) + int(2.0) )))), i0)))] + saveChr(int(2.0)))) ))) ):{:\\nb1 = True\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [0, 0, 2, 0], [2], [1, 1, 0], [], [0, 0, 0], [], [], [1], [], [2, 0], [], [5], [1], [], [1], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 4, 6, 8, 1, 0, 2, 4, 9, 7, 5, 6, 5, 8, 7, 8, 7, 3, 7, 9, 3], [0, 0, 0, 0, 0, 1, 2, 0, 2, 2, 1, 1, 1, 2, 1, 0, 2, 1, 0, 0, 0], [0, 1], [0, 1, 2, 3, 2, 2, 1, 2, 0, 2, 2, 3, 0, 0, 1, 3, 3, 2, 3, 0, 0, 3, 2, 0, 0, 3, 1, 2, 3, 2, 2, 1, 2, 3, 2, 2, 3, 1, 2, 1, 2, 3, 3, 0, 0, 3, 3, 1, 2, 0, 2, 3, 2, 1, 3, 3, 3, 3, 2, 0, 1, 1, 2, 1, 2, 2, 1, 1, 2, 3, 0, 1, 2, 1, 3, 0, 1, 2, 0, 2, 0, 3, 1, 1, 2, 1, 2, 0, 0, 2, 2, 0, 1, 3], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 0, 1, 4, 0, 2, 2, 2, 3, 0, 1, 3, 0, 3, 0, 4, 2, 4, 4, 3, 0, 0, 3], [0, 2, 2, 1, 2, 1, 1, 1, 2, 2, 1, 0, 2, 2, 0], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [3, 1, 5, 1, 3], [1, 1, 1, 1, 1, 0, 1], [], [0, 4, 0, 4, 0, 2, 2, 1, 4, 2, 4, 1, 4, 1, 2, 1, 0, 0, 1, 1], [3, 1, 1, 2, 3], [5, 0], [0, 0, 1, 2], [2, 2, 1, 1, 3, 2, 3], [], [21, 2], [6, 6, 6], [5, 29]], "fitness": 9223372036854775807, "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\ni0 += int(3.0)\\nloopBreak% = 0\\nwhile in0.endswith(s1.strip(saveChr(( len(in2) * mod(( int(74.0) * ( i0 - mod(( min(i0, i1) * int(6.0) ),max(saveOrd(\"\"6\"\"[mod(min(i2, i0),abs(( i2 - i2 ))):abs(int(8.0))][divInt(abs(divInt(mod(int(1.0),( len(saveChr(divInt(mod(min(int(0.0), ( int(2.0) - ( max(len(\"\"6\"\".capitalize()[:i1]), i1) - min(len(\"\"v\"\".lstrip()), int(4.0)) ) )),divInt(i1,mod(min(( int(9.0) * saveOrd(\"\"c\"\"[abs(saveOrd(s1)):]) ), saveOrd(in0)),divInt(i2,int(7.0))))),int(5.0)))) * divInt(int(6.0),divInt(mod(int(5.0),int(8.0)),mod(len(\"\"\"\"\"),i1))) )),int(7.0))),( int(8.0) - min(i0, int(7.0)) )):( i2 + ( i1 * min(int(3.0), int(7.0)) ) )]), ( int(9.0) * ( i0 + i0 ) ))) ) ),mod(mod(i0,int(3.0)),len(\"\"6^\"\"))) )))):{:\\nb1 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 3, 0, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 22, 22, 21, 2, 94, 31, 23, 15, 17, 5, 7, 0, 20, 5, 2, 4, 7, 0, 2, 3, 2]}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 9, 2, 3], [2, 1, 1], [], [3, 2, 0, 2, 1, 2, 1, 2, 0, 1, 3, 2, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [1, 3], [2, 2], [1, 0, 0, 1, 0, 0], [], [0, 1], [], [1], [], [], [], [1, 1], [], [5, 9], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 14, 5, 2, 0, 5, 0, 2, 0, 1, 0, 0, 0, 2, 0, 2, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(mod(i2,divInt(int(1.0),divInt(int(3.0),mod(i1,int(9.0))))), len(\"\"fj\"\")) == divInt(i1,int(9.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 1, 0], [0], [0, 2, 1], [0], [0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 1], [7, 0, 5, 2, 7, 8, 3, 1, 8], [0, 1, 2, 0, 0], [0], [1, 2, 3, 2, 3, 3, 1, 1, 1, 3, 1, 1, 0, 3, 0, 2, 0, 2, 3, 3, 3, 1, 1, 0], [1, 1, 1, 1], [1, 3, 4, 4, 4, 2, 1, 4], [], [0, 1, 0, 0], [0, 1, 4, 1], [0, 1, 0, 1, 0, 1, 0, 1], [0], [2, 4, 0, 4, 2, 2, 4, 1, 2, 1, 1, 2, 1, 0], [3, 1, 1, 1], [3], [2, 2, 2, 1, 0], [3, 3, 0, 2, 3, 2, 0, 2], [22, 17], [], [5, 5, 6], [4, 22, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 5, 1, 24, 4, 8, 0, 4, 4, 8, 1, 14, 3, 1, 5, 8, 2, 0, 3, 3], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1.lstrip(saveChr(int(7.0)))[divInt(max(mod(len(saveChr(saveOrd(\"\"!=\"\"))[int(0.0):][int(5.0):]),int(2.0)), saveOrd(\"\"W5\"\"[:int(7.0)])),int(8.0)):]:{:\\nres0 = i0 \\l saveOrd(\"\"?5\"\")\\nin1 = \"\"R6\"\"[i1:divInt(i2,divInt(abs(max(saveOrd(s1), int(3.0))),int(18.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1], [1, 2, 1, 0, 2, 0], [0, 0], [1, 2, 0, 1], [0, 0], [0, 0], [], [], [2], [], [0, 2], [], [3], [2], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 5, 4, 6, 6, 2, 4, 0, 8, 0, 8, 7, 6, 2, 0, 2, 0, 1, 7, 5, 5, 9, 2, 1, 9, 2, 5, 8, 7, 5, 7, 7, 2, 7, 5, 7, 1, 3, 2, 2, 9, 4, 5, 8, 3, 6, 7, 2, 2, 4, 3, 9, 5, 2, 2, 2, 1, 5, 0, 9, 5, 5, 0, 4, 5, 3, 9, 6, 6, 6, 5, 0, 5, 4, 8], [1, 2, 1, 2, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 2, 1, 0, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 1, 2, 0, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 0, 0, 1, 2, 2, 1, 0, 2, 1, 0, 2, 0], [0, 1], [1, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 3, 1, 1, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 1, 0, 2, 2, 0, 1, 2, 1, 1, 3, 3, 0, 2, 3, 2, 3, 0, 3, 1, 3, 2, 2, 1, 1, 2, 2, 2, 1, 2, 3, 1, 1, 0, 1, 2, 2, 3, 1, 2, 2, 2, 2, 3, 2, 2, 0, 2, 2, 2, 3, 2, 1, 2, 3, 0, 2, 1, 2, 3, 0, 1, 3, 2, 2, 3, 1, 1, 2, 3, 2, 0, 3, 0, 2, 1, 1, 3, 0, 2, 1, 1, 3, 2, 1, 0, 1, 3, 2, 1, 1, 2, 0, 1, 2, 0, 0, 3, 2, 1, 2, 3, 3, 2, 2, 2, 3, 2, 2, 1, 0, 3, 1, 2, 2, 3, 3, 3, 0, 3, 1, 0, 2, 3, 1, 0, 0, 1, 1, 3, 2, 0, 1, 0, 0, 3, 1, 2, 1, 2, 2, 3, 3, 0, 0, 3, 2, 0, 1, 2, 0, 2, 3, 3, 0, 1, 0, 1, 2, 2, 2, 0, 1, 2, 3, 2, 0, 2, 3, 1, 1, 0, 2, 3, 1, 0, 0, 1, 0, 3, 1, 1, 3, 3, 0, 2, 2, 2, 2, 3, 0, 1, 0, 0, 2, 3, 3, 2, 3, 1, 2, 2, 3, 3, 1, 2, 2, 1, 2, 3, 0, 0, 2, 3, 2, 1, 2, 1, 1, 3, 2, 2, 3, 3, 0, 2, 0, 1, 1, 0, 0, 1, 1, 2, 1, 2, 0, 3, 2, 2, 2, 2, 1, 0, 1, 3, 2, 1, 3, 1, 3, 1, 0, 0, 3, 0, 3, 2, 2, 0, 2, 2, 2, 0, 3, 1, 0, 3, 1, 2, 1, 3, 3, 3, 1, 1, 2, 1, 0, 1, 0, 0, 3, 3, 3, 2, 0, 0, 0, 0, 3, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0], [3, 1, 4, 3, 2, 4, 4, 4, 3, 2, 0, 2, 4, 4, 4, 4, 0, 4, 3, 1, 4, 2, 3, 4, 1, 4, 1, 1, 1, 1, 1, 1, 0, 4, 1, 0, 1, 3, 1, 1, 2, 3, 1, 2, 4, 2, 2, 0, 3, 3, 4, 0, 3, 4, 1, 3, 0, 2, 3, 4, 4, 2, 0, 0, 4, 3, 1, 4, 2, 3, 3, 0, 1, 3, 2, 2, 1, 4, 1, 1, 2], [2, 1, 0, 2, 2, 2, 0, 0, 1, 1, 2, 1, 2, 0, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 0, 0, 1, 2, 1, 2, 2, 2, 0, 1, 0, 1, 2, 0, 0, 0, 1, 0, 0, 1, 2, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1], [1, 0, 4, 1, 0, 5, 5, 5, 4, 1, 1, 2, 5, 0, 3, 1, 3, 4, 4, 1, 1, 2, 3, 2, 5, 1, 5, 0, 4, 5, 2], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [3, 3, 1, 3, 4, 0, 1, 0, 3, 3, 3, 2, 1, 1, 0, 4, 2, 4, 0, 0, 4, 2, 1, 2, 3, 0, 3, 1, 3, 4, 2, 0, 4, 1, 1, 4, 2, 0, 2, 0, 2, 1, 2, 1, 0, 4, 3, 3, 1, 2, 3, 2, 4, 0, 4, 2, 2, 4, 0, 2, 1, 2, 2, 1, 4, 0, 0, 2, 2, 2, 2, 1, 0, 0, 2, 4, 2, 2, 0, 0, 4, 1, 0, 0, 4, 4, 1, 4, 2, 0, 1, 2, 1, 0, 1, 0, 2, 1, 2, 1, 4, 2, 4, 4, 1, 1, 2, 0, 0, 4, 0, 2, 0, 2, 2, 1, 3, 4, 0, 4, 1], [0, 1, 3, 3, 2, 1, 2, 2, 3, 2, 3, 2, 2, 1, 3, 2, 3, 0, 0, 2, 1, 1, 2], [1, 5, 0, 4, 4, 0], [1, 0, 1, 0, 2, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 2, 2, 0, 1, 2, 0, 1, 0, 0, 1, 0, 2, 2, 1], [0, 0, 2, 3, 2, 1, 3, 1, 3, 0, 2, 3, 1, 2, 0, 2, 2, 2, 3, 3, 0, 1, 2, 1, 2, 0, 1, 0, 2, 3, 2, 0, 0], [14, 5, 15, 15, 3, 25, 21, 24, 19], [0, 5, 10, 3, 19, 10], [0, 4, 7, 2, 9, 9, 0, 5, 9, 3, 6], [0, 14, 15, 22, 21, 18, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 2, 2, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 76, 76, 69, 2, 317, 94, 81, 52, 43, 31, 33, 2, 121, 23, 6, 32, 33, 9, 6, 11, 7], "tree_depth": 101, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(00.0)\\nloopBreak% = 0\\nfor s1 in ((\"\"OF\"\" + (getCharFromString(s0, i2) + \"\"0\"\")) + in1):{:\\ns1 = (((\"\"4\"\"[:i1] + \"\"a\"\") + s0) + saveChr(i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = not in2.rstrip()[i0:i1] != in2\\nloopBreak% = 0\\nfor in2 in \"\"+\"\"[:len((in1 + (\"\"f,P\"\" + (s1[max(saveOrd(saveChr(( ( i0 * len(\"\"7\"\") ) - int(5.0) ))), int(4.0)):].capitalize() + \"\"=k\"\")))[abs(saveOrd(s1[:saveOrd(s2[:saveOrd(\"\"2\"\"[:len(\"\"P\"\"[int(6.0):abs(min(abs(saveOrd(in2)), int(6.0)))])])])].capitalize())):int(2.0)])].strip(((\"\"990<\"\" + (s0.lstrip()[:i1] + in0.rstrip(\"\"/\"\"[:( divInt(i0,int(4.0)) + divInt(int(0.0),int(8.0)) )])[:saveOrd(\"\"D\"\"[:saveOrd(s1.capitalize())][i0:( saveOrd(in0) * ( min(i1, saveOrd(\"\"d\"\"[int(0.0):][len(in1):][( ( int(8.0) * int(7.0) ) * ( ( ( int(6.0) + divInt(max(int(2.0), int(0.0)),i0) ) + int(2.0) ) - divInt(( saveOrd(in1) - int(0.0) ),divInt(( mod(( abs(mod(( i1 * ( divInt(mod(len(s1[divInt(int(1.0),divInt(saveOrd(s1),i1)):][:( int(7.0) - mod(max(i1, int(5.0)),saveOrd(saveChr(mod(mod(max(int(5.0), int(9.0)),( max(( i0 * max(i2, ( int(2.0) + int(1.0) )) ), max(i1, ( int(9.0) - int(2.0) ))) * max(mod(int(5.0),i0), int(8.0)) )),max(divInt(int(7.0),int(5.0)), ( i2 - int(7.0) )))))) )].capitalize()[divInt(i1,i1):min(( int(7.0) + ( saveOrd(\"\"5\"\") - max(( mod(( min(divInt(divInt(int(2.0),i1),max(int(7.0), mod(mod(len(s2),max(max(i1, abs(int(5.0))), i2)),( len(in0) - int(7.0) )))), i1) - i1 ),int(1.0)) - int(3.0) ), max(( i1 - int(2.0) ), i1)) ) ), i1)]),abs(int(2.0))),divInt(int(9.0),mod(( saveOrd(\"\"t\"\".capitalize().rstrip(s2[abs(i1):i1].lstrip())) - abs(( i1 - int(4.0) )) ),( i2 + divInt(min(len(\"\"9\"\"), i0),int(5.0)) )))) + i0 ) ),int(8.0))) * ( mod(( i1 + int(3.0) ),( len(\"\"Z\"\"[:( i2 + ( saveOrd(in2) - int(6.0) ) )]) * int(7.0) )) - i0 ) ),divInt(min(int(2.0), i1),i2)) * int(2.0) ),i2)) ) ):len(\"\"k\"\")][int(4.0):int(3.0)])) * saveOrd(s1) ) )])][max(i0, ( ( ( ( len(\"\"V\"\"[i1:int(9.0)]) * i2 ) + i0 ) - ( min(abs(( len(\"\"3\"\"[int(5.0):( ( saveOrd(getCharFromString(getCharFromString(\"\"+\"\".capitalize(), saveOrd(\"\"6\"\"))[:int(2.0)], ( mod(int(2.0),divInt(abs(i2),i1)) + divInt(min(mod(int(2.0),( int(1.0) - int(5.0) )), min(( divInt(saveOrd(in2[len(s0):i2]),divInt(i1,int(0.0))) * int(9.0) ), i2)),i2) ))) + int(5.0) ) + int(5.0) )]) + divInt(int(0.0),( i2 - max(divInt(mod(mod(( int(4.0) + i1 ),int(5.0)),saveOrd(saveChr(mod(int(3.0),abs(int(9.0)))))),len(in1)), int(6.0)) )) )), i1) + i1 ) ) - len(in2[i2:]) )):min(mod(mod(i0,divInt(( ( i0 * max(int(6.0), i1) ) + len(\"\"Y\"\"[:int(6.0)][mod(int(5.0),abs(abs(max(int(0.0), int(5.0))))):]) ),mod(int(4.0),i2))),int(8.0)), i2)].capitalize())[i1:saveOrd((saveChr(max(max(( i0 - i2 ), i1), i0)) + s2))]) + \"\"T\"\".capitalize()).capitalize()):{:\\ni2 -= abs(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1], [2, 1, 2, 0], [2, 0], [0, 1], [0], [0], [], [], [3], [5, 2], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 0, 3, 4, 0, 1, 5, 1, 8, 1], [2, 0, 1, 0, 0, 1, 1, 1, 2, 1, 0, 1, 1, 0, 1], [0, 1], [3, 0, 2, 3, 0, 3, 1, 1, 3, 3, 0, 1, 1, 2, 3, 3, 2, 3, 1, 3, 2, 0, 3, 0, 1, 0, 1, 1, 3, 3, 3, 1, 0, 2, 3, 2, 2, 0, 3, 3, 0, 3, 1, 3, 0, 2, 0, 1, 0, 2, 0, 2, 1, 3, 3], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 3, 2, 1, 0, 4, 0, 1, 0, 1, 4, 4, 2, 0, 2, 2, 2, 0, 4], [2, 2, 1, 2, 1, 0], [1, 0, 0, 0, 1, 1], [0, 1, 3, 0], [0, 0, 0, 0, 1], [0], [1, 4, 0, 2, 0, 2, 0, 0], [1], [], [1, 1, 2], [3, 1, 3, 1, 0], [24], [12, 24], [], [30, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 9, 9, 7, 1, 32, 4, 13, 2, 2, 4, 5, 1, 7, 1, 0, 2, 5, 1, 2, 0, 2], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(i2, ( len(\"\"_m+yY\"\") * i0 )) != abs(int(1.0)):{:\\nres0 = int(5.0) == max(min(i1, int(2.0)), int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in saveChr(mod(saveOrd(s1),min(( max(int(3.0), min(divInt(i0,max(i0, int(4.0))), i1)) * int(0.0) ), int(1.0)))):{:\\ni1 = saveOrd(in0[:saveOrd(s0[:abs(int(5.0))])])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1], [2, 0, 2, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 0, 0, 0, 1, 2, 2, 1, 2, 0, 2, 1, 1, 2, 0, 2, 0, 0, 0, 0, 2, 1, 1], [1, 0, 2, 0, 0, 0, 1, 0, 2, 0, 2, 1, 0], [2, 2, 0, 0, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 1, 2, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [2, 2, 1, 0, 1, 2, 1, 2, 0, 2, 0, 2], [1, 2, 4, 1, 1, 5], [0, 1, 1, 0, 1, 0, 1, 2, 0, 2, 1, 2, 2, 2, 0, 2, 1], [0, 0, 0, 0, 0, 0], [0, 3, 5, 3, 0, 5], [2, 0, 0, 1, 1], [], [0, 1], [1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [4, 3, 0, 5, 8, 5, 4, 1, 7, 7, 2, 6, 7, 4, 0, 2, 1, 0, 2, 4, 6, 3, 8, 7, 1, 1, 5, 0, 1, 9, 7, 0, 2, 6, 7, 7, 9, 3, 6, 4, 1, 6, 8, 7, 8, 4, 1, 7, 4, 5, 7, 3, 1, 3, 6, 4, 2, 3, 9, 7, 9, 5, 8, 4], [1, 2, 1, 2, 0, 2, 0, 0, 0, 2, 2, 1, 1, 2, 2, 1, 1, 0, 1, 2, 1, 1, 2, 0, 1, 1, 2, 2, 0, 0, 1, 2, 0, 2, 1, 2, 2, 1, 1, 1, 1, 2, 0, 1, 1, 2, 1], [0, 1, 0], [1, 0, 3, 3, 1, 1, 1, 1, 3, 0, 2, 3, 1, 0, 3, 1, 1, 1, 1, 1, 3, 2, 0, 1, 3, 2, 1, 2, 0, 0, 2, 0, 1, 3, 2, 3, 2, 3, 3, 3, 3, 1, 0, 1, 2, 2, 1, 2, 2, 3, 2, 3, 1, 2, 0, 1, 2, 1, 2, 1, 1, 0, 1, 2, 0, 1, 1, 2, 1, 2, 1, 0, 0, 2, 0, 3, 2, 2, 2, 1, 2, 0, 2, 3, 3, 2, 2, 1, 2, 3, 0, 0, 0, 0, 0, 0, 1, 0, 2, 3, 3, 1, 3, 0, 0, 2, 3, 3, 1, 3, 0, 1, 3, 3, 1, 2, 3, 2, 0, 2, 2, 3, 0, 1, 3, 2, 1, 1, 1, 1, 2, 0, 1, 0, 3, 2, 3, 2, 2, 1, 2, 1, 2, 1, 0, 1, 2, 2, 0, 2, 3, 2, 0, 1, 1, 1, 3, 1, 3, 0, 3, 2, 3, 2, 3, 2, 0, 0, 0, 1, 0, 3, 3, 0, 1, 3, 1, 2, 3, 1, 0, 0, 1, 3, 3, 3, 2, 3, 0, 0, 2, 0, 0], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [4, 1, 4, 4, 4, 3, 2, 0, 3, 3, 0, 1, 2, 3, 2, 3, 4, 4, 4, 0, 1, 1, 3, 0, 0, 4, 4, 3, 4, 4, 2, 2, 2, 1, 2, 4, 0, 2, 4, 4, 4, 4, 2, 4, 2, 1], [2, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 2, 1, 2, 1, 2, 0, 2, 0, 2, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 3, 4, 5, 3, 2, 0, 0, 2, 3, 3, 2, 1, 2, 1, 0, 0, 1, 0, 1, 0, 5, 3, 4, 1, 5, 4, 5, 1, 3, 4, 0, 5, 1, 3, 1, 4, 2, 0, 2, 2, 4, 0, 0, 2, 5, 5, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 0, 4, 1, 0, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 3, 4, 0, 2, 2, 0, 1, 1, 0, 4, 1, 0, 2, 4, 4, 2, 1, 1, 4, 1, 2, 4, 0, 2, 0, 0, 4, 1, 2, 1, 1, 2, 0, 0, 2, 2, 0, 1, 0, 2, 2, 0, 2, 0, 3, 3, 1, 4, 1, 0, 1, 0, 4, 4, 4, 3, 0, 3, 4, 3, 4, 2, 1, 3, 3, 4, 0, 4, 2, 1, 1, 4, 4, 1, 2, 1, 3, 0, 4, 1, 4, 2, 1, 1, 4, 1, 2, 2, 3, 3, 1, 0, 1, 0, 0], [2, 3, 3, 1, 0, 3, 2, 1, 2, 3, 1, 1, 0, 1, 3, 2, 1, 1, 3, 1, 2], [5, 1, 5, 0, 2, 1], [1, 1, 2, 0, 1, 1, 0, 2, 1, 0, 2, 1, 0, 0, 2, 0, 0, 1, 2, 2, 2, 1, 2, 0, 2, 1], [0, 2, 3, 2, 1, 1, 0, 1, 1, 2, 0, 0, 2, 0, 3, 0, 3, 3, 0, 0, 3, 0, 3, 3, 1, 1, 0, 3, 0, 3, 0], [11, 8, 8, 6, 12, 2, 8, 9, 14, 21, 13, 23], [5, 14, 6, 24, 13, 10], [4, 8, 2, 0], [10, 5, 6, 12, 19, 12, 7, 14, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 35, 35, 13, 22, 7, 11, 0, 0, 12, 6, 17, 6, 6, 5, 0, 2, 3, 64, 64, 47, 3, 193, 50, 46, 23, 28, 48, 31, 7, 115, 21, 6, 26, 31, 12, 6, 4, 9], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not int(4.0) \\g i1:{:\\ns1 = in0[:saveOrd(in1)][:max(int(305.0), int(85.0))]\\nloopBreak% = 0\\nfor in2 in in0:{:\\ns2 = s0\\nb2 = int(41.0) == int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = b1\\ns0 = s2\\nloopBreak% = 0\\nwhile saveOrd(\"\"L\"\".capitalize()) \\le i2:{:\\nloopBreak% = 0\\nfor in0 in in0:{:\\nloopBreak% = 0\\nfor s2 in s1[:divInt(saveOrd(s2[int(7.0):i1]),saveOrd(s1))][:int(2.0)][int(6.0):int(7.0)][int(4.0):]:{:\\nloopBreak% = 0\\nfor s0 in s0:{:\\ns1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(02.0)\\ns1 = (s0.strip(in2[:len(\"\"4\"\")][( i0 * int(1.0) ):]) + \"\"\"\\\\\"8\"\")\\nb0 = b1\\nb2 = abs(( int(0.0) - mod(i2,i0) )) \\g divInt(i0,int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = in0 in \"\"f\"\".rstrip()\\nif True:{:\\nloopBreak% = 0\\nfor in1 in s1:{:\\nb2 = saveChr(min(( len(getCharFromString(\"\"o\"\"[mod(len(\"\"I\"\"),min(max(abs(int(4.0)), i0), int(6.0))):], ( ( int(3.0) + divInt(( len(\"\"g\"\".strip(in2.capitalize()[:( abs(int(8.0)) * divInt(i2,int(7.0)) )])) - divInt(int(1.0),divInt(int(1.0),int(5.0))) ),i2) ) + int(0.0) ))) + ( i1 - int(1.0) ) ), int(9.0)))[( int(7.0) - ( int(0.0) + i1 ) ):i2] != in1[mod(i2,len(in2)):( mod(mod(int(2.0),( i1 + divInt(saveOrd(saveChr(saveOrd(\"\"y\"\"))),( divInt(int(6.0),mod(saveOrd(\"\"2\"\"[i1:i0]),i1)) * i2 )) )),i1) - i1 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(77936.0) \\g i2:{:\\nb0 = \"\"I\"\".endswith(s1[( min(max(int(4.0), max(i0, i1)), mod(len(in0),min(int(1.0), min(i1, int(6.0))))) * saveOrd(in1[saveOrd(\"\"G\"\"):int(8.0)][( len(s0) - ( i2 * ( ( saveOrd(in2[i2:][:int(7.0)]) + saveOrd(s1[divInt(int(8.0),int(4.0)):]) ) * int(1.0) ) ) ):int(7.0)]) ):])\\nloopBreak% = 0\\nfor in0 in ((\"\"0\"\" + \"\"M\"\".capitalize()) + s1):{:\\nb2 = \"\"\"\"\" != in1\\ns2 = saveChr(divInt(i0,int(4.0))).lstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nloopBreak% = 0\\nwhile saveChr(i0) in (s0 + (getCharFromString((saveChr(abs(divInt(abs(mod(( int(5.0) + ( int(7.0) * ( int(3.0) - i1 ) ) ),int(1.0))),mod(divInt(i2,( abs(divInt(i0,int(3.0))) - int(6.0) )),int(4.0))))) + \"\"C#)\"\"[max(int(2.0), abs(i2)):]), saveOrd(((s2.strip() + \"\"I\"\"[:divInt(min(divInt(abs(divInt(i1,i2)),i2), int(3.0)),i1)].capitalize()) + \"\"J:\"\"))) + saveChr(saveOrd(saveChr(saveOrd(\"\"O\"\")))))):{:\\ns2 = \"\")$\"\"[i1:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif False:{:\\ni1 += int(979.0)\\nb0 = (in1 + \"\"n\"\".rstrip()).endswith(saveChr(saveOrd(\"\"k\"\"[int(5.0):divInt(saveOrd(\"\"V\"\"),int(8.0))])))\\ns0 = \"\"+\"\".capitalize()\\ni1 = i2\\nloopBreak% = 0\\nfor s0 in ((\"\"N\"\" + s2) + \"\">X\"\")[:i0][int(4.0):]:{:\\nin2 = in2\\nb2 = abs(saveOrd(s1)) != abs(mod(max(i1, i1),mod(i2,i1)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 2], [], [0, 0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [7, 0, 3, 0, 7, 8], [0], [], [1, 2, 3, 2, 3, 3, 1, 3, 1, 3, 1, 1, 0], [1, 1], [1, 2, 4, 4, 3], [], [0, 1], [0, 1, 5], [0, 1, 0, 1], [], [1, 4, 0, 4, 2, 2, 4, 1, 0], [3, 1, 3, 1], [3, 0], [2, 2], [3, 1, 2, 0], [12], [2], [4], [4, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 0, 0, 12, 2, 5, 0, 2, 3, 4, 0, 9, 3, 2, 2, 4, 1, 1, 1, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(7.0) \\l divInt(max(mod(abs(saveOrd(\"\"!c\"\")),int(0.0)), saveOrd(s0.lstrip(saveChr(int(3.0))))),len(\"\"4M\"\".lstrip()[int(0.0):][int(7.0):]))\\ns1 = in2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [2, 1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 8, 4, 3, 4, 6, 6, 9, 9, 1], [0, 2, 1, 0, 0], [0], [1, 3, 3, 0, 2, 2, 1, 2, 2, 3, 1, 1, 0, 2, 2, 1, 2, 0, 1, 1, 0, 2, 3, 1, 1], [0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 2], [2, 0], [0, 1, 1, 0, 1, 0], [3, 5, 4], [0, 1], [], [4, 0, 1], [0], [], [], [0, 0], [1, 16], [], [], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 5, 1, 25, 8, 4, 2, 6, 3, 2, 0, 3, 1, 0, 0, 2, 2, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = getCharFromString(in2, int(2.0))\\ni0 = min(min(i2, ( divInt(int(8.0),mod(mod(min(int(4.0), int(3.0)),i1),divInt(mod(int(4.0),divInt(i0,int(6.0))),int(6.0)))) * i0 )), ( abs(int(9.0)) + int(91.0) ))\\nin1 = \"\"BQ\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 0], [1], [2], [], [0], [], [], [1, 0], [3], [1, 0], [0], [], [0], [], [], [], [1], [0], [2], [], [3, 1, 3, 0], [], [2, 2], [], [], [2], [0, 0, 0, 1], [], [4, 1], [2], [], [], [1, 2, 0, 3], [17], [2], [8], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 2, 1, 0, 0, 4, 1, 1, 1, 1], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"c8R\\\\\\t\"\".capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [0], [2], [0], [0], [], [], [], [], [1, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [1, 1, 0, 0, 1, 1], [], [1, 3, 1, 2, 4, 1, 1], [3], [3], [0], [2, 3, 3, 3, 2, 3], [], [], [1, 8], [18, 9, 11, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 6, 0, 7, 1, 1, 1, 6, 0, 0, 2, 4], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\"1\"\" in (\"\"/\"\" + \"\"&(8\"\".lstrip(\"\"/\"\")[int(0.0):int(3.0)])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 0, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 0, 1, 2, 1, 1], [0, 1, 0, 2, 0, 0, 2, 1, 0], [1, 1, 2, 2, 2, 0, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0], [], [], [1, 0], [5, 0, 3, 1], [1, 1, 1, 1, 0], [0, 0, 0, 0], [], [0], [], [], [0, 0], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [8, 0, 6, 9, 6, 8, 9, 3, 7, 8, 8, 1, 0, 2, 7, 1, 7, 1, 9, 6, 5, 1, 3, 0, 1, 3, 9, 6, 9, 8, 8, 4, 6, 6, 9, 8], [1, 2, 0, 1, 1, 1, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 1, 2, 1, 0, 0, 2, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1], [0, 3, 3, 2, 2, 1, 2, 0, 0, 0, 0, 1, 1, 2, 0, 1, 2, 1, 3, 0, 1, 0, 3, 0, 1, 2, 3, 1, 2, 0, 0, 2, 2, 2, 3, 0, 1, 3, 1, 2, 3, 2, 3, 1, 3, 0, 0, 3, 3, 1, 1, 1, 1, 2, 2, 1, 3, 2, 3, 2, 1, 2, 2, 1, 0, 2, 1, 0, 2, 0, 1, 2, 0, 1, 0, 0, 3, 1, 0, 3, 1, 3, 3, 1, 3, 3, 0, 1, 1, 3, 0, 3, 2, 3, 3, 3, 0, 1, 0, 3, 0, 1, 0, 0, 2, 1, 1], [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0], [4, 2, 1, 4, 2, 3, 1, 3, 2, 4, 0, 0, 2, 1, 4, 3, 1, 2, 2, 2, 3, 4, 2, 0, 3, 4], [2, 0, 1, 0, 1, 2, 0, 1, 0, 2, 1, 2, 1, 0, 0], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [3, 1, 3, 5, 1, 1, 2, 4, 4, 1, 0, 4, 3, 2, 2, 4, 0, 1, 3, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [3, 2, 4, 1, 2, 4, 3, 1, 0, 4, 3, 3, 1, 4, 2, 4, 0, 0, 2, 1, 0, 3, 0, 2, 2, 4, 0, 1, 2, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 2, 2, 0, 3, 0, 4, 1, 1, 0, 4, 4, 1, 4], [0, 2, 1, 3, 0, 2, 1, 0, 1, 1], [5], [0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 2, 2, 2, 2, 0], [0, 2, 0, 0, 0, 0, 3, 1, 2, 2, 3, 1, 3], [18, 8, 23, 17, 8], [3, 15], [9, 9, 8], [4, 2, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 18, 18, 9, 9, 5, 3, 0, 0, 2, 4, 5, 4, 0, 1, 0, 0, 2, 36, 36, 33, 5, 107, 23, 26, 15, 11, 20, 13, 5, 53, 10, 1, 15, 13, 5, 2, 3, 3], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\nloopBreak% = 0\\nfor in0 in (getCharFromString(\"\"S\"\", saveOrd((\"\"9\"\" + s1).capitalize()[abs(mod(( int(8.0) * divInt(i0,i1) ),i1)):]))[i1:int(06.0)] + saveChr(int(96.0))):{:\\ni1 += ( i1 - int(893.0) )\\nif ( int(7.0) + max(i0, int(88.0)) ) != i0:{:\\nin0 = ((\"\"IX\"\" + getCharFromString(in2, saveOrd(s1))[i0:].strip(\"\"R\"\"[int(1.0):])) + s1)\\nloopBreak% = 0\\nfor s2 in (in1 + in1.capitalize()[:( abs(int(0.0)) - mod(i2,i0) )][:mod(divInt(( len(\"\"I\"\") * i0 ),int(2.0)),max(int(7.0), ( len(s1[( abs(int(1.0)) + saveOrd(\"\"!\"\"[i0:i0]) ):]) - min(min(int(7.0), int(1.0)), int(9.0)) )))]):{:\\nloopBreak% = 0\\nwhile int(6.0) \\l ( ( int(5.0) + abs(mod(max(( int(1.0) * mod(mod(int(3.0),i0),divInt(int(0.0),i2)) ), divInt(i1,int(1.0))),divInt(i1,int(3.0)))) ) - i2 ):{:\\nloopBreak% = 0\\nfor s0 in in1[i1:][:saveOrd(\"\"d\"\"[int(9.0):])][i2:len(in0)]:{:\\ns2 = s2[int(6.0):max(abs(int(9.0)), abs(abs(i1)))][int(8.0):][int(8.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = (s0 + saveChr(len(\"\"9\"\")))\\n:}\\nloopBreak% = 0\\nfor s1 in \"\"8\\\\\\tp\"\":{:\\nloopBreak% = 0\\nwhile i0 \\ge saveOrd(in0):{:\\nif ( abs(min(len(getCharFromString(saveChr(i0), int(4.0))), i2)) * saveOrd(\"\">\"\") ) \\g i1:{:\\nb1 = b0\\ni1 -= int(6.0)\\nloopBreak% = 0\\nfor s1 in saveChr(i0):{:\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += ( int(6.0) + int(98.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [], [0, 0], [], [], [1, 2], [1, 4], [1, 0, 2, 1], [0, 0], [3], [3], [1], [], [], [1, 1, 1, 0, 1, 1], [1, 3, 3, 5, 8, 8], [0, 2, 1], [], [3, 3, 1, 3, 2, 1, 1, 0, 2, 0, 3, 0, 1, 2, 3, 3, 1], [1, 1, 0], [4, 4, 4, 1, 4, 3], [1], [1, 1], [1, 4, 4, 3, 0], [1, 1, 0, 1], [], [1, 4, 0, 4, 1, 2, 0, 2, 3, 0, 2, 1, 0, 0], [0, 3], [0], [2, 0, 1], [1, 1, 2, 1], [], [25, 3, 19], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 2, 4, 2, 1, 1, 1, 0, 0, 6, 6, 3, 0, 17, 3, 6, 1, 2, 5, 4, 0, 14, 2, 1, 3, 4, 0, 3, 1, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(\"\"z\"\") \\g saveOrd(getCharFromString(s1, int(1.0)))\\nb2 = ( \"\"d\"\".lstrip() != in1[saveOrd((in1 + \"\"3t\"\"[:mod(int(3.0),int(3.0))])[i0:mod(i2,max(i1, int(58.0)))]):] or ( saveOrd(in0) - len(s0) ) \\le int(8.0) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 0, 2, 1, 2, 1, 2], [0, 0, 1], [2, 0, 1, 0, 1], [0, 0], [0, 0, 0], [], [], [2, 0], [3, 0], [1, 1, 0, 0], [0, 0], [], [2, 1], [], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 7, 6, 1, 0, 5, 2, 6, 9, 1, 3, 0, 8, 2, 7, 9], [0, 2, 0, 0, 1, 0, 1, 1, 0, 2, 2, 1, 1], [1, 1], [1, 0, 1, 1, 3, 3, 2, 1, 2, 1, 3, 2, 3, 1, 1, 3, 1, 3, 1, 2, 0, 0, 2, 2, 2, 0, 3, 2, 2, 0, 2, 2, 1, 0, 0, 1, 3, 0, 2, 0, 1, 1, 3, 1, 0, 2, 2, 0, 3, 3, 3, 3, 2, 2, 0, 1, 3, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [1, 2, 2, 1, 4, 4, 1, 1, 2, 4, 2, 4, 1], [1, 2, 2, 1, 1, 1, 2, 1, 0, 2, 2, 1], [0, 0, 1, 1, 0, 1, 0, 0], [3, 4, 2, 3, 5, 0], [1, 1, 1, 1], [0, 0], [0, 1, 2, 2, 4, 4, 2, 4, 0, 1, 0, 1, 0], [1, 0, 0], [1], [1, 1, 1], [3, 1, 2, 0], [10], [22, 1], [], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 10, 1, 44, 12, 9, 8, 5, 5, 2, 2, 10, 3, 0, 3, 2, 0, 1, 0, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in1\\nloopBreak% = 0\\nfor s2 in \"\"[\"\":{:\\nb2 = int(4.0) \\ge i0\\nloopBreak% = 0\\nfor in0 in saveChr(int(8.0))[:int(7.0)][:max(abs(( int(6.0) - divInt(int(1.0),abs(divInt(max(int(0.0), int(5.0)),saveOrd(getCharFromString(getCharFromString(in2, int(2.0))[:saveOrd(\"\"w\"\")], int(6.0)))))) )), ( i2 * i0 ))]:{:\\ni0 *= ( ( mod(i1,max(( ( i0 - mod(( int(9.0) - i1 ),i1) ) - int(1.0) ), max(i0, divInt(i2,int(3.0))))) * int(0.0) ) - abs(int(8.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 9, 9, 4, 3, 8, 4, 0, 3, 7, 4, 8, 6, 4, 2], [0, 2, 2, 0, 0, 1, 1, 2, 2, 2, 1, 1, 2, 0, 1, 2, 1, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 1, 2], [1], [2, 1, 0, 2, 2, 2, 1, 3, 0, 1, 3, 0, 2, 3, 0, 2, 3, 3, 0, 3, 1, 0, 2, 3, 2, 3, 0, 3, 0, 2, 3, 1, 0, 0, 2, 0, 2, 0, 2, 2, 0, 0, 3, 2, 3, 0, 3, 2, 3, 2, 0, 1, 0, 2, 2, 2, 2, 0, 1, 2, 2, 2, 3, 3, 2, 0, 1, 1, 3, 2, 3, 3, 3, 3, 3, 0, 1, 1, 1, 0, 3, 3, 1, 1, 3, 2, 1, 0, 2, 1, 2, 0, 1, 0, 0, 3, 0, 1, 1, 0], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 0, 3, 3, 0, 0, 3, 3, 1, 3, 2, 4, 2, 3, 1, 3, 1, 0, 0, 3, 1, 2, 1], [2, 2, 0, 2, 1, 0, 1, 1, 1, 2, 1, 1, 2, 1, 2], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0], [3, 5, 4], [1, 1, 1, 1, 1], [], [2, 2, 1, 1, 4, 0, 0, 1, 1, 0, 4, 4, 1, 1], [0, 1, 2, 0], [], [1, 2], [3, 2, 0, 2, 2], [14, 13], [], [5, 8, 8], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 16, 1, 47, 14, 13, 4, 11, 2, 4, 0, 9, 1, 0, 2, 4, 1, 0, 2, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( int(4.0) * i0 ) != mod(divInt(( int(8.0) * max(i2, int(9.0)) ),min(i2, divInt(min(i0, divInt(len(\"\"#\"\"[len(\"\"5\"\"):][:i0]),min(int(9.0), i1))),divInt(min(divInt(len(getCharFromString(in0, i1)),len(in2)), i2),divInt(max(int(4.0), i2),i2))))),divInt(i1,divInt(i1,mod(( i2 + i0 ),len(\"\"O\"\")))))\\ni1 *= mod(abs(i2),saveOrd(\"\"8\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 2, 1, 0, 1, 2, 2, 0, 0, 0, 2, 2, 1], [2, 1, 1, 2, 0], [1, 0, 0, 1, 1, 0, 1, 1], [0], [0, 0, 0, 0, 0], [], [], [1, 2, 1, 0], [4, 4, 3, 4], [1, 1, 0, 0, 1, 2, 2, 2, 0, 1, 2], [0, 0, 0, 0], [0, 0, 4, 5, 1], [3, 3, 0], [0, 1], [], [1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 9, 1, 4, 1, 5, 5, 8, 4, 3, 6, 6, 3, 1, 6, 0, 3, 6, 2, 0, 5, 8, 2, 0, 5, 0, 9, 1, 6, 7, 2, 7, 1, 6, 3, 1, 1, 2, 6, 6, 7, 1, 4, 3, 3, 3, 3, 1, 0, 4, 6, 0, 7, 9, 2, 5, 8, 8, 0, 7, 7, 3, 0, 3, 3, 5, 9, 2, 2, 3, 0, 3, 8, 5, 7, 1, 5, 9, 7, 1, 2, 2, 9, 2, 7, 2, 3, 5], [0, 0, 0, 2, 1, 1, 2, 1, 0, 2, 0, 1, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 0, 2, 0, 1, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2, 1, 2, 2, 2, 0, 0, 1, 1, 2, 0, 2, 1, 1, 1, 0, 0, 2, 0, 1, 2, 0, 0, 1, 2, 1, 1, 0, 0, 0, 2, 2, 1, 0, 2, 1, 2, 1, 1, 0, 2, 0, 2, 0, 0, 1, 1, 2, 1, 1, 1, 0, 2, 0, 1, 1, 1, 2, 1, 1, 0, 2, 2, 0], [1, 0, 0, 1, 0], [3, 3, 0, 3, 2, 2, 1, 3, 2, 2, 3, 2, 1, 3, 1, 0, 3, 2, 3, 3, 2, 3, 0, 2, 0, 0, 1, 1, 1, 1, 3, 3, 1, 2, 3, 2, 3, 2, 3, 2, 1, 3, 1, 0, 2, 1, 3, 1, 1, 1, 3, 1, 3, 2, 0, 2, 3, 2, 1, 2, 3, 1, 0, 2, 0, 0, 2, 2, 3, 3, 3, 2, 3, 1, 3, 1, 2, 2, 2, 2, 2, 3, 2, 1, 1, 1, 1, 2, 3, 0, 1, 0, 3, 3, 1, 1, 3, 2, 2, 2, 1, 1, 3, 1, 0, 2, 0, 3, 0, 2, 0, 3, 2, 3, 1, 0, 0, 2, 2, 0, 2, 1, 0, 0, 0, 1, 2, 1, 3, 0, 1, 0, 0, 2, 0, 2, 2, 3, 1, 3, 2, 0, 1, 3, 3, 1, 3, 0, 2, 1, 0, 2, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 1, 0, 2, 2, 1, 2, 0, 0, 0, 3, 1, 1, 1, 3, 3, 2, 1, 0, 1, 1, 1, 2, 2, 2, 3, 2, 3, 0, 1, 3, 1, 2, 0, 0, 3, 2, 2, 2, 3, 1, 3, 3, 2, 1, 1, 1, 1, 1, 2, 0, 2, 2, 2, 0, 2, 1, 2, 1, 2, 2, 3, 0, 2, 1, 3, 3, 2, 3, 2, 3, 3, 0, 3, 0, 2, 2, 1, 3, 0, 3, 0, 0, 0, 0, 2, 0, 0, 1, 3, 3, 1, 1, 0, 2, 2, 0, 0, 3, 3, 0, 2, 1, 2, 3, 1, 3, 2, 1, 0, 0, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0, 3, 3, 0, 3, 2, 2, 0, 0, 1, 0, 0, 2, 2, 1, 1, 2, 2, 1, 2, 0, 2, 2, 2, 3, 0, 1, 0, 3, 1, 2, 2, 2, 0, 3, 0, 3, 1, 2, 0, 2, 2, 3, 2, 0, 1, 0, 3, 2, 3, 2, 3, 2, 2, 0, 0, 3, 3, 0, 1, 0, 3, 2, 0, 1, 2, 0, 2, 2, 3, 1, 1, 1, 2, 3, 1, 2, 0, 2, 2, 2, 0, 0, 2, 2, 1, 0, 0, 3, 1, 1, 1, 3, 1, 0, 0, 0, 1, 1, 2, 2, 0, 1, 3, 2, 3, 1, 0], [1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 2, 4, 1, 0, 2, 4, 4, 3, 2, 4, 0, 2, 0, 4, 3, 4, 2, 0, 2, 1, 1, 1, 4, 4, 0, 2, 4, 4, 2, 4, 4, 0, 0, 1, 1, 3, 1, 3, 3, 2, 0, 4, 2, 1, 1, 3, 3, 3, 0, 1, 3, 1, 0, 2, 0, 0, 3, 2, 0, 0, 3, 3, 1, 0, 0, 4, 0, 1, 2, 4, 4, 2, 2, 0, 3, 4, 0, 2, 4, 0, 2, 4, 1, 1, 4, 3, 2, 2, 3], [0, 2, 0, 0, 2, 1, 1, 1, 2, 0, 0, 2, 2, 2, 1, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 2, 2, 2, 0, 1, 0, 1, 2, 1, 2, 1, 0, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [5, 5, 1, 3, 1, 2, 5, 0, 0, 0, 4, 4, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [0, 0, 1, 2, 0, 0, 4, 4, 1, 2, 2, 2, 2, 1, 0, 2, 1, 2, 1, 0, 1, 4, 1, 4, 1, 1, 0, 4, 2, 4, 1, 1, 4, 0, 0, 2, 2, 0, 0, 4, 1, 2, 2, 2, 4, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 4, 1, 4, 2, 4, 4, 2, 4, 2, 2, 1, 2, 4, 2, 1, 2, 1, 0], [3, 1, 1, 0, 1, 1, 0, 1, 0, 2, 1, 3, 3, 3, 1], [1, 2, 0], [0, 2, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 2, 2, 0, 0, 0, 0, 1, 2, 1, 0], [2, 3, 2, 0, 2, 2, 1, 1, 3, 0, 3, 1, 0, 3, 1, 0, 2, 1, 3, 0, 0, 2], [16, 1, 20, 14, 23, 22], [8, 6, 16, 25, 17, 11, 8], [3, 6, 4, 4, 8], [12, 17, 31, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 3, 7, 0, 4, 0, 0, 4, 4, 10, 4, 3, 3, 2, 0, 2, 39, 39, 38, 4, 158, 44, 41, 20, 26, 8, 11, 0, 34, 7, 1, 8, 11, 2, 2, 4, 3], "tree_depth": 63, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += max(abs(i0), saveOrd(in2))\\nloopBreak% = 0\\nwhile mod(mod(int(3.0),max(( ( min(( int(1.0) * abs(int(9.0)) ), i0) + saveOrd(in2) ) + ( saveOrd(\"\"3\"\") * len(s1[( abs(i2) - mod(i1,i1) ):int(1.0)]) ) ), int(4.0))),int(1.0)) \\le int(5.0):{:\\nb1 = saveOrd(in0) \\le min(int(5.0), mod(abs(( min(( saveOrd(saveChr(mod(int(8.0),len(\"\")\"\"))).rstrip()) - int(4.0) ), i2) - ( int(3.0) * saveOrd(\"\"6\"\"[int(6.0):int(6.0)][int(3.0):abs(int(1.0))][min(mod(i1,divInt(abs(mod(int(6.0),divInt(max(int(0.0), i0),divInt(i2,i0)))),( divInt(max(max(saveOrd(s1), divInt(saveOrd(\"\"Q\"\"[:int(3.0)]),min(int(6.0), ( mod(( divInt(( abs(( int(2.0) + int(0.0) )) + int(5.0) ),int(8.0)) * divInt(saveOrd(\"\"4\"\"[i1:int(2.0)]),i2) ),saveOrd(s2)) * abs(int(0.0)) )))), int(5.0)),saveOrd(\"\"4\"\")) * ( divInt(mod(int(0.0),int(9.0)),saveOrd(saveChr(int(1.0)))) - i2 ) ))), mod(i1,min(i1, mod(i2,min(divInt(max(int(6.0), i0),i0), divInt(mod(i0,( int(7.0) + i1 )),i0)))))):i0][int(2.0):]) ) )),( int(7.0) + max(i2, int(1.0)) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( ( i0 \\ge i1 and \"\"i\"\" in getCharFromString(\"\"g\"\", divInt(i2,( mod(len(\"\".\"\"),int(6.0)) + max(mod(i2,int(3.0)), len(in2)) ))) ) or saveChr(len(saveChr(int(1.0))[:abs(i0)])) in \"\"B\"\" )\\ni0 = ( int(1.0) * i0 )\\nif \"\"`\"\".startswith(getCharFromString(s0, divInt(i0,i0))):{:\\nif b1:{:\\ni2 = i0\\n:}\\nb0 = i2 \\le int(2.0)\\n:}else:{:\\ni1 -= i2\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1], [2, 1, 1, 2, 0, 2, 0], [0, 1, 0], [1, 1, 1, 0], [0, 0], [0, 0], [], [], [3], [], [2, 2], [], [0, 1], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 5, 2, 3, 5, 0, 1, 5, 0, 9, 4, 5, 7, 0], [2, 2, 0, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0], [1, 1, 0], [0, 0, 2, 1, 3, 2, 3, 0, 3, 0, 1, 0, 0, 2, 3, 3, 1, 0, 1, 1, 0, 0, 1, 3, 3, 3, 3, 2, 1, 0, 1, 0, 3, 0, 1, 2, 2, 1, 1, 0, 1, 3, 3, 0, 3, 1, 0, 1, 0, 0, 1], [1, 0, 1, 1, 1, 1], [0, 0, 2, 3, 0, 3, 1, 0, 4, 2, 0, 3, 0], [0, 1, 2], [0, 0, 1, 0, 0], [1, 2, 4, 5, 4, 0, 5, 2, 5, 5], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0], [0, 1, 3, 4, 2, 1, 3, 4, 4, 4, 4, 4, 0, 2, 0, 1, 2, 2, 0, 3, 2, 1, 2, 4, 0, 3, 1, 0, 1, 3, 2, 1, 3, 2, 4, 2, 4, 0, 2, 0], [0, 2, 0, 3, 0, 2, 1, 0, 1], [4], [0, 2, 1, 2, 0, 2, 0, 1, 0, 1], [2, 2, 2, 1, 1, 2, 1, 2, 3, 1, 0], [14], [6, 0, 10, 19], [4, 7, 1, 4, 4], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 2, 2, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 1, 15, 15, 20, 3, 51, 6, 13, 3, 5, 10, 11, 2, 40, 9, 1, 10, 11, 1, 4, 5, 1], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s2:{:\\ni2 += i2\\ni0 -= i1\\nif \"\"47\"\" in (getCharFromString(\"\"1ga\"\"[divInt(int(1.0),min(( min(i1, abs(i1)) * int(7.0) ), i1)):i2], divInt(len((getCharFromString(getCharFromString(in1.capitalize(), min(int(5.0), i2)).rstrip(in2[int(2.0):]), int(3.0)).capitalize() + \"\"4\"\")),i0)) + in1[i0:][:int(5.0)]):{:\\ni0 = len((\"\"k\"\"[max(min(saveOrd(saveChr(mod(int(0.0),i0))[int(1.0):]), i0), abs(i0)):int(5.0)] + s0))\\n:}\\nloopBreak% = 0\\nfor in2 in (\"\"4\"\" + s2):{:\\nres0 = \"\"\\\\\\nt\"\" not in (\"\"O\"\"[divInt(divInt(int(0.0),int(9.0)),i0):int(4.0)] + (getCharFromString(saveChr(min(len(in2), i2))[min(int(5.0), i2):int(7.0)], i0)[:i0] + in2[:int(0.0)]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1], [1, 2, 1, 0, 1], [2], [0, 1, 0, 0], [], [0], [], [], [1, 0, 1], [4, 4], [0, 1, 1, 2], [0, 0], [3], [1], [], [0], [], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1], [0, 9, 3, 3, 6, 8, 5, 6, 6, 0, 9, 9, 9, 7], [1, 0, 0, 0, 2, 0, 2, 2, 1, 2], [1], [2, 2, 1, 1, 3, 1, 3, 0, 3, 1, 3, 3, 0, 2, 1, 0, 0, 1, 3, 0, 1, 2, 0, 0, 2, 1, 1, 0, 0], [0, 1, 0, 0, 0], [0, 1, 0, 3, 3, 4], [1, 1, 2, 2, 1], [1], [2, 0, 2, 2], [0, 0, 1, 0, 1, 0, 0, 0, 1], [], [0, 3, 2, 1, 3, 2, 2, 0, 4, 2, 1, 0, 2, 0, 2, 4, 1], [0, 0], [], [2, 2, 2, 1, 2, 1], [0, 1, 3, 1, 2, 2, 1, 2, 2], [2], [10, 24, 24], [9, 3, 3, 5], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 1, 0, 0, 3, 2, 4, 2, 1, 1, 0, 1, 0, 14, 14, 10, 1, 29, 5, 6, 5, 1, 4, 9, 0, 17, 2, 0, 6, 9, 1, 3, 4, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\nloopBreak% = 0\\nwhile ( mod(int(0.0),int(9.0)) - min(int(3.0), max(i1, min(int(36.0), len(s2)))) ) \\le len((\"\"Ck@\"\"[i0:] + (s0[( int(8.0) - i0 ):][i0:] + getCharFromString(\"\"y9\"\"[:int(56.0)], saveOrd(s2))))):{:\\ni2 *= i0\\nb0 = int(6.0) \\le ( i2 * i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = s2[( int(09.0) - int(997.0) ):] != getCharFromString(\"\"3y35\"\", i1)[:i2]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1, 1], [2, 2, 0, 2, 1], [1, 1, 2], [0, 1], [], [0], [], [], [1], [0, 5], [1, 0, 1, 2], [0, 0], [2], [1], [], [0], [0, 1], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 4, 2, 7, 2, 3, 1, 4, 2, 6, 0, 3, 0, 1, 8, 6, 4, 7, 0, 1, 5, 3, 5, 7, 8, 7, 2], [1, 0, 2, 0, 2, 0, 1, 0, 2, 1, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0], [1], [1, 2, 3, 1, 1, 0, 1, 3, 1, 1, 3, 3, 2, 3, 2, 3, 2, 2, 1, 2, 1, 2, 2, 1, 2, 0, 0, 0, 1, 1, 2, 1, 2, 2, 0, 1, 0, 1, 1, 3, 2, 3, 3, 2, 2, 2, 3, 2, 0, 2, 1, 0, 2, 0, 3, 1, 0, 0, 2, 2, 2, 3, 1, 0, 0, 3, 3, 1, 2, 3, 1, 2, 2, 0, 0, 3, 1, 0, 1, 2, 3, 0, 1, 0, 3, 1, 1, 2, 3, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [1, 3, 4, 1, 3, 2, 2, 1, 4, 1, 1, 2, 1, 1, 1, 1, 4, 3, 2], [1, 2, 1, 1, 1, 2, 2, 0, 0, 1, 1, 2, 1, 1, 1, 1, 0, 0, 1, 2, 0], [1, 1, 1, 0, 0, 0, 1], [5, 0, 5, 3, 5, 0, 4], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [], [3, 2, 0, 1, 4, 1, 3, 3, 2, 0, 0, 3, 1, 3, 4, 2, 2, 1, 1, 4, 1, 0, 1, 0, 0, 3, 2, 4, 1, 2, 0], [2, 3, 0, 0], [3], [1, 2, 0, 0, 1, 1], [1, 0, 1, 0, 2, 1, 3, 0, 3, 0, 1], [2, 17, 10, 18], [13, 17, 2, 20], [6], [17, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 3, 2, 0, 1, 0, 0, 1, 2, 4, 2, 1, 1, 0, 1, 2, 28, 28, 20, 1, 91, 27, 19, 21, 7, 7, 11, 0, 31, 4, 1, 6, 11, 4, 4, 1, 2], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(7.0) \\l ( max(int(7.0), int(4.0)) - i1 ):{:\\nif True:{:\\nb1 = int(272.0) != len((in2[:int(3.0)] + \"\"nCr\"\"))\\n:}else:{:\\nloopBreak% = 0\\nwhile \"\"R6\"\".capitalize() == ((s0[int(1.0):] + in2) + (\"\"c\"\" + (\"\".\"\"[saveOrd(\"\"K\"\"):max(( len(getCharFromString(\"\";\"\", ( abs(( ( int(4.0) * ( int(2.0) - ( ( int(6.0) - ( i0 - i2 ) ) * i0 ) ) ) * int(0.0) )) + int(3.0) ))) + ( int(0.0) - ( ( i2 - int(1.0) ) * i0 ) ) ), int(8.0))][int(6.0):abs(mod(max(saveOrd(in0), mod(mod(( max(( i1 - ( int(4.0) - i0 ) ), ( i2 - max(int(7.0), i1) )) - i0 ),( divInt(( abs(int(0.0)) + i0 ),i0) + max(max(int(1.0), divInt(max(int(5.0), ( divInt(i1,i1) - max(int(3.0), i2) )),int(5.0))), mod(saveOrd(\"\"S\"\"),i1)) )),int(7.0))),i0))].lstrip(in2) + s0))):{:\\ni1 *= len((getCharFromString(\"\"u\"\", int(8.0))[:int(7.0)] + in1[:( abs(int(2.0)) + i0 )]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1, 0, 0, 0, 0, 1], [8, 7, 4, 1, 8, 1, 3, 9, 9], [0, 2, 2], [], [0, 2, 0, 3, 2, 3, 1, 0, 2, 3, 1, 1], [1, 1, 1], [0, 0, 4], [], [0, 1, 0], [4, 5], [1], [], [2, 0, 1], [], [], [0], [3], [], [], [], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 3, 0, 12, 3, 3, 0, 3, 2, 1, 0, 3, 0, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2[i0:divInt(i2,min(mod(min(int(87.0), i2),divInt(saveOrd(\"\">\"\"),int(41.0))), int(81399.0)))]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1], [2, 2, 1, 2, 0, 1, 0], [2, 1, 1], [1, 1, 1, 1], [], [0, 0], [], [], [], [], [2, 2, 0], [], [5, 2], [1], [], [0], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [7, 0, 5, 7, 9, 9, 1, 8, 6, 0], [1, 0, 2, 2, 1, 0, 1, 0], [1, 0, 1, 0], [2, 2, 3, 1, 1, 1, 3, 1, 2, 1, 1, 2, 0, 1, 3, 2, 0, 0, 3, 0, 1, 3, 1, 1], [1, 0, 0, 0, 1], [1, 4, 0, 0, 4, 2], [2, 0, 2, 1, 1, 0], [1, 0], [4, 2, 5, 1, 5], [1, 1, 1], [], [4, 4, 1, 1, 0, 0, 2, 1, 0, 2, 0], [0, 0], [], [2, 2], [2, 0, 0], [10, 2], [], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 0, 2, 0, 0, 0, 0, 3, 0, 2, 1, 0, 1, 2, 10, 10, 8, 4, 23, 5, 5, 5, 2, 3, 3, 0, 9, 2, 0, 1, 3, 2, 0, 1, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile getCharFromString(getCharFromString(\"\"2\"\", mod(( max(int(7.0), int(0.0)) * int(5.0) ),saveOrd(\"\"K\"\"))), int(7.0)).endswith(in1):{:\\nif s2 == \"\"C\"\"[( int(9.0) + int(9.0) ):]:{:\\ni1 *= ( i0 - int(1.0) )\\n:}else:{:\\nif True:{:\\ni2 = min(divInt(i2,i1), min(i0, int(8.0)))\\n:}else:{:\\ni1 -= saveOrd(in2)\\n:}\\n:}\\ni0 = int(60.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 1], [], [3, 0, 4, 1], [2], [], [], [2, 3], [], [], [8], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 4, 1, 0, 0, 2, 0, 0, 1, 1], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (s1 + \"\"8%\"\".capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [2, 1, 2, 2, 0, 2, 1, 1, 1, 1, 2, 2, 0, 1, 1, 0, 0, 2, 0, 1, 1], [1, 1, 2, 1, 0, 2, 2], [2, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 2, 0], [0], [0, 0, 0, 0, 0], [], [], [2, 0, 3, 0, 3, 2, 2, 3, 0, 0], [4, 3, 5, 5, 5, 2, 2], [0, 1, 0, 1, 0, 0, 2, 1, 0, 1, 2, 0, 1, 0, 2, 2, 1, 1], [0, 0, 0, 0, 0, 0, 0], [3, 3, 0, 2], [0, 0, 1, 0, 3, 3, 2], [0, 1], [0], [0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 7, 9, 0, 1, 7, 6, 8, 7, 4, 5, 7, 7, 5, 7, 1, 2, 0, 1, 4, 9, 2, 0, 8, 2, 3, 4], [2, 1, 0, 2, 0, 0, 0, 2, 2, 2, 1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0], [0, 1, 2, 1, 3, 1, 1, 0, 3, 1, 3, 3, 1, 3, 1, 0, 2, 0, 1, 3, 3, 1, 1, 1, 0, 2, 0, 1, 3, 0, 0, 2, 0, 1, 2, 3, 0, 2, 3, 0, 1, 2, 1, 0, 2, 0, 3, 0, 3], [0, 1, 1, 0, 1, 1, 0, 0], [4, 3, 4, 2, 0, 3, 3, 4, 2, 4, 3, 4], [1, 1, 0, 0, 2], [1, 1, 1, 1], [1, 5, 0, 0, 2, 4, 1, 4, 5, 3, 5, 1, 5, 1, 3, 3], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0], [4, 4, 2, 3, 4, 2, 0, 0, 1, 4, 4, 2, 2, 4, 4, 4, 0, 0, 3, 0, 0, 4, 1, 4, 0, 1, 0, 1, 3, 1, 1, 2, 1, 4, 1, 0, 2, 1, 0, 4, 2, 1, 0, 1, 0, 3, 1, 1], [2, 2, 2, 1, 2, 3, 3, 1, 0, 3, 3, 2], [5, 1, 2, 3], [0, 1, 2, 1, 1, 2, 2], [0, 0, 2, 1, 1, 2, 1, 0, 2, 3, 0, 2, 0, 2, 3, 0], [2, 8, 9, 14, 11, 22], [5, 16, 6], [9, 6, 2, 0, 7], [18, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 21, 21, 7, 14, 1, 5, 0, 0, 10, 7, 18, 7, 4, 7, 2, 1, 3, 27, 27, 18, 4, 49, 8, 12, 5, 4, 16, 16, 1, 48, 12, 4, 7, 16, 6, 3, 5, 2], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif b2:{:\\ns1 = (in2[:i2].capitalize() + s0)[int(679.0):( int(0.0) - saveOrd(\"\"CI\"\") )].capitalize().capitalize()\\nif int(1.0) \\le int(7687.0):{:\\nloopBreak% = 0\\nwhile b0:{:\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif len(saveChr(int(4.0))) \\ge saveOrd(saveChr(abs(int(5.0))).rstrip().strip(s0)[:min(int(7.0), i2)][mod(i0,int(7.0)):].capitalize()):{:\\ni0 = len(s2)\\n:}else:{:\\nin1 = (s1 + in1)\\n:}\\nres0 = True\\ni0 -= len(getCharFromString(\"\"9f\"\", int(571.0)))\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in in0.strip():{:\\nloopBreak% = 0\\nwhile b0:{:\\nres0 = \"\"q\"\" != in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = int(201.0) != int(49.0)\\ni2 = i2\\nb2 = ( mod(i2,int(2.0)) != saveOrd(\"\"6\"\") and (\"\"g\"\" + \"\"J\"\") != \"\"2\"\"[:i1] )\\nres0 = ( i0 != ( i1 + int(0.0) ) or not \"\"/\"\".lstrip(s1) in \"\"O\"\"[mod(abs(i0),mod(saveOrd(in2),i0)):] )\\nloopBreak% = 0\\nwhile \"\"0L\"\"[int(823.0):].capitalize() == s1:{:\\nb0 = ( int(4.0) + i0 ) == ( i1 * len(\"\"7\"\") )\\nin0 = in0\\nb0 = i1 == saveOrd((\"\"`\"\" + \"\"W\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1], [1, 2, 0, 1, 1], [0], [1, 0, 1, 0], [0], [0], [], [], [1, 0], [0, 4], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 3, 5, 2, 9, 1, 9, 0, 8, 0, 4, 6, 5, 8, 8, 8, 3, 1, 2, 4, 7, 8, 4, 1, 4, 8, 5, 5, 0, 4], [0, 1, 1, 2, 2, 0, 2, 1, 1, 2, 0, 1, 1, 2, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 2, 1, 0, 2, 0], [0, 1], [0, 2, 1, 2, 2, 1, 3, 2, 0, 3, 3, 1, 3, 0, 2, 1, 2, 0, 0, 1, 0, 3, 2, 0, 1, 3, 1, 1, 0, 2, 0, 1, 3, 3, 2, 2, 2, 3, 2, 2, 0, 0, 0, 0, 3, 2, 3, 3, 1, 2, 3, 2, 2, 3, 2, 1, 2, 0, 3, 3, 0, 2, 1, 2, 2, 0, 3, 0, 1, 1, 2, 2, 1, 3, 1, 2, 3, 0, 0, 0, 3, 3, 2, 2, 0, 2, 2, 0, 1, 3, 1, 0, 1, 3, 1, 3, 1, 1, 0, 3, 3, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 0, 3, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], [2, 1, 1, 2, 4, 1, 2, 4, 2, 0, 4, 0, 4, 4, 2, 1, 4, 2, 0, 4, 2, 4, 0, 4, 1, 3, 0, 1, 3, 1], [1, 1, 0, 2, 2, 2, 1, 0, 1, 0, 1, 1, 2, 2, 1, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [1, 5, 2, 0, 5, 3], [1, 1, 1, 1, 1], [0], [4, 4, 3, 4, 2, 4, 2, 4, 1, 4, 4, 2, 2, 1, 1, 4, 1, 4, 0, 0, 0, 2, 2, 2, 1, 0, 0], [1, 2, 2, 1, 3, 0, 1, 1, 0], [4], [2, 0, 0, 0, 2, 2, 0], [0, 0, 0, 3, 3], [6, 17, 14], [], [], [9, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 1, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 30, 30, 29, 2, 118, 32, 30, 16, 17, 6, 5, 1, 27, 9, 1, 7, 5, 3, 0, 0, 2], "tree_depth": 69, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i1\\nloopBreak% = 0\\nfor s1 in saveChr(( int(2.0) - ( ( int(3.0) - abs(divInt(i1,max(max(int(5.0), abs(i2)), divInt(int(2.0),mod(i2,i0))))) ) + int(9.0) ) )):{:\\nb1 = i2 \\l saveOrd((saveChr(( i1 * int(1.0) ))[max(int(9.0), int(0.0)):].capitalize() + \"\"G\"\".rstrip(getCharFromString(saveChr(i1), divInt(i2,int(8.0))))[abs(saveOrd(\"\"R\"\"[mod(( ( abs(( ( i0 * i1 ) * i1 )) - i2 ) + min(mod(saveOrd(\"\"O\"\"),min(int(0.0), divInt(saveOrd(saveChr(mod(divInt(saveOrd(\"\"&\"\"),( int(4.0) - mod(i0,abs(max(i1, ( int(6.0) + ( divInt(i0,saveOrd(getCharFromString(in2, i1))) - int(5.0) ) )))) )),int(8.0)))),divInt(divInt(int(8.0),abs(int(8.0))),divInt(min(i2, i1),i0))))), saveOrd(s2)) ),abs(( divInt(i1,( mod(i0,int(3.0)) - saveOrd(s0) )) * int(1.0) ))):i1][int(2.0):min(int(4.0), saveOrd(\"\"!\"\"[int(7.0):int(8.0)][i2:][max(len(in2), int(4.0)):]))])):( int(1.0) * ( int(4.0) - mod(int(8.0),min(int(5.0), max(int(5.0), len(in0)))) ) )]).capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += i0\\nb0 = max(i2, int(04.0)) \\le i0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1], [2, 0, 0, 1, 0, 1, 0], [1], [2, 0, 2, 2, 0, 1], [], [0, 0, 0, 0], [], [], [1, 1], [0], [0, 0, 1], [0], [], [1, 1], [], [1, 0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], [9, 2, 7, 1, 1, 6, 7, 1, 2, 3, 3, 2, 6, 7, 3, 3, 5, 8, 2, 2, 3, 9, 4, 8, 3, 3, 0, 6, 0, 8, 2, 6, 8, 4, 3, 7, 9, 3, 5, 9, 3, 0, 7, 7], [0, 2, 2, 2, 0, 2, 0, 0, 1, 1, 1, 2, 1, 0, 1, 1, 0, 0, 2, 2, 1, 0, 1, 0, 0, 2, 0, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 2, 1, 1], [0], [3, 1, 0, 2, 2, 1, 2, 2, 1, 2, 3, 0, 0, 3, 3, 2, 0, 2, 2, 2, 1, 0, 1, 1, 2, 0, 0, 1, 3, 1, 2, 3, 1, 2, 0, 1, 2, 1, 2, 0, 1, 0, 0, 3, 0, 2, 2, 2, 3, 3, 3, 3, 3, 1, 2, 3, 2, 0, 1, 2, 0, 3, 1, 2, 3, 1, 0, 3, 3, 1, 3, 3, 0, 3, 3, 3, 2, 2, 1, 1, 3, 3, 2, 2, 0, 2, 3, 2, 0, 3, 2, 0, 2, 1, 2, 2, 1, 1, 2, 3, 3, 0, 1, 2, 2, 2, 0, 2, 2, 2, 1, 3, 3, 1, 2, 0, 0, 3, 3, 0, 3, 2, 2, 1, 2, 0, 1, 3, 2, 0, 3, 2, 3, 0, 3, 0, 2, 2, 1, 0, 0, 1, 0, 0, 2, 3, 0, 0, 0, 3, 3, 3, 0, 2, 1, 3, 1, 3, 2, 1, 1, 1, 0, 2, 2, 3, 0, 1, 3, 0, 2, 2, 1, 1, 3, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [4, 2, 2, 3, 2, 3, 0, 1, 4, 2, 0, 2, 3, 2, 2, 2, 2, 1, 3, 0, 1, 3, 0, 1, 3, 1, 3, 1, 1, 3, 0, 0, 3, 3, 3, 3, 0, 0, 1, 4, 0, 0, 1, 3, 2, 2], [2, 1, 0, 0, 1, 2, 1, 0, 1, 2, 0, 1, 0, 2, 1, 2, 0, 1], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 5, 2, 4, 1, 4, 4, 5, 4, 3, 1, 1, 1, 2], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [], [4, 2, 0, 4, 2, 2, 1, 0, 0, 3, 3, 2, 0, 3, 3, 2, 2, 1, 2, 0, 2, 2, 3, 3, 4, 4, 1, 0, 1, 0, 4, 0, 1, 4, 0, 4, 1, 1, 4, 2, 4, 2, 1, 1, 4, 1, 4, 2, 0, 1, 0, 0], [0, 0, 3, 2, 2, 1, 0, 3, 1, 2, 1], [3, 1], [1, 2, 1, 1, 1, 0, 2, 1, 0, 1, 0, 1], [0, 3, 2, 0, 2, 1, 2, 2, 0, 1, 3, 1, 1, 0], [5, 16, 4, 2], [15, 6, 14, 23], [9, 4, 1, 6], [8, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 1, 5, 0, 3, 0, 0, 2, 1, 3, 1, 0, 2, 0, 2, 1, 44, 44, 40, 0, 178, 53, 46, 18, 35, 15, 14, 0, 52, 11, 2, 12, 14, 4, 4, 4, 2], "tree_depth": 83, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif False:{:\\ns1 = getCharFromString(s0[:saveOrd(getCharFromString(\"\"F\"\"[:int(9.0)][i0:], mod(( int(2.0) * mod(( int(7.0) - ( abs(i2) + i2 ) ),abs(len(in2))) ),mod(i2,( mod(mod(int(1.0),i0),int(1.0)) + int(6.0) )))))], divInt(i2,i0))\\nb1 = True\\ns2 = in1\\ns1 = ((in1[:int(7.0)] + ((\"\"%\"\"[abs(int(1.0)):divInt(len(in1[int(2.0):]),mod(i0,int(3.0)))][:mod(int(3.0),divInt(i1,int(26.0)))] + ((\"\"9\"\".capitalize().lstrip(in2) + \"\"Q4\"\") + in1)[i1:i1][:min(i2, mod(divInt(( max(saveOrd(in0.capitalize()), abs(min(abs(int(7.0)), ( len(\"\"p\"\") - mod(i1,int(3.0)) )))) * ( i0 - abs(int(3.0)) ) ),divInt(abs(int(5.0)),i1)),abs(abs(int(8.0)))))]) + saveChr(max(len(s1), i1)))) + getCharFromString(\"\"16\"\", min(max(len(\"\"Eg\"\"), mod(mod(int(2.0),int(2.0)),min(max(( ( i0 + divInt(len(saveChr(mod(i0,max(mod(i2,( int(3.0) - divInt(divInt(int(9.0),int(4.0)),mod(len(\"\"_\"\"[max(i2, int(8.0)):mod(divInt(( i1 * mod(divInt(divInt(int(3.0),max(len(\"\"o\"\"), int(3.0))),mod(i0,i1)),min(min(i0, len(\"\"x\"\".capitalize())), mod(divInt(int(0.0),( i0 + int(6.0) )),len(saveChr(( i2 - len(s1[:mod(len(\"\"C\"\"),i0)]) )))))) ),min(i2, ( ( int(0.0) + i1 ) * i0 ))),int(8.0))]),i1)) )), i2)))[:divInt(min(i0, i2),i1)].rstrip()),max(saveOrd(s1), min(i0, mod(int(2.0),min(int(6.0), max(( int(8.0) - int(4.0) ), int(3.0))))))) ) * i2 ), ( ( len(s2) + i2 ) - int(7.0) )), abs(i1)))), mod(mod(int(9.0),int(35.0)),abs(int(93.0))))))\\n:}else:{:\\nb1 = i1 \\l int(077.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0], [2], [0, 1], [], [0], [], [], [1], [1, 5], [1, 1], [0, 0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 8, 9, 6, 2, 8, 7, 9, 8, 8, 7, 6, 6, 8, 5, 1, 6, 9, 3], [1, 0, 0, 2, 0, 2, 1, 2, 0], [0], [2, 1, 2, 1, 3, 1, 0, 2, 0, 1, 2, 2, 2, 3, 3, 2, 0, 1, 0, 2, 1, 3, 3, 0, 2, 1, 1, 1, 1, 3, 1, 0, 1, 0, 2, 0, 2, 2, 2, 1, 3, 1, 3, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [1, 1, 4, 4, 1, 4, 1, 3], [0, 2, 1, 2, 1, 2, 1], [1, 1, 1, 0, 1, 0], [2, 2, 5, 2], [1, 1, 1], [], [2, 0, 1, 3, 1, 2, 2, 2, 3, 0, 2, 2, 0, 4, 0, 1], [3], [3], [1, 2, 1, 0, 2, 1], [2, 2, 1], [], [25], [0, 6], []], "fitness": 9223372036854775807, "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( int(8.0) + mod(int(6.0),max(int(8.0), i1)) ) \\g mod(i0,int(9.0)):{:\\nb1 = ( ( ( max(saveOrd(s2[:mod(i0,int(6.0))]), i2) * ( int(2.0) - saveOrd(\"\"0\"\") ) ) * max(i0, divInt(int(8.0),int(7.0))) ) - int(9.0) ) != int(8.0)\\ni2 = saveOrd((\"\"6\"\" + (s2 + in2[:int(8.0)][i1:])[int(76.0):i2][:mod(i0,( ( divInt(int(6.0),max(int(8.0), len(s2.lstrip(\"\"z\"\")))) * int(5.0) ) - int(1.0) ))][int(693.0):]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 20, 20, 9, 1, 46, 13, 8, 7, 6, 4, 3, 0, 16, 1, 1, 6, 3, 0, 1, 2, 0]}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 1], [2, 1, 0, 0, 1, 0, 1, 0, 0], [1], [1, 0, 1, 1, 2, 1, 1, 1], [], [0, 0, 0, 0, 0], [], [], [3], [1], [0, 1, 2], [0], [0], [2], [], [], [1], [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [4, 1, 5, 7, 5, 9, 6, 7, 3, 6, 2, 0, 0, 2, 5, 0, 1, 5, 4, 9, 7, 7], [1, 1, 2, 1, 0, 1, 0, 2, 0, 1, 1, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0], [0, 1, 2, 2, 0, 0, 3, 0, 2, 2, 2, 1, 1, 1, 0, 1, 0, 3, 0, 2, 1, 0, 3, 3, 2, 1, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [2, 0, 0, 0], [1, 1, 0, 0], [1, 0, 1], [3, 1, 5, 4], [1, 1], [], [0, 4, 3, 0, 1, 1, 0], [3], [3], [], [1, 1], [], [19, 5], [], []], "fitness": 9223372036854775807, "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not i1 \\g int(4.0):{:\\ni1 = ( ( i2 - i1 ) - abs(i0) )\\n:}else:{:\\nres0 = in0 in (s1 + \"\"t\"\").lstrip(\"\"f\"\")\\ni1 = mod(divInt(mod(int(1.0),int(5.0)),int(75.0)),i0)\\ni2 = int(9673620.0)\\nin2 = in1\\ni0 = i1\\ni1 = min(i0, ( int(02.0) + i2 ))\\n:}\\ni2 = min(min(( int(50.0) + i0 ), i0), int(154977.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 1, 8, 0, 5, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 1, 22, 22, 16, 6, 29, 7, 4, 4, 3, 4, 2, 0, 7, 1, 1, 0, 2, 0, 2, 0, 0]}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [5, 4, 4, 1, 7, 8, 9, 0, 5, 4, 1, 4, 2, 2, 5, 6, 5, 1, 5, 0, 6, 2], [1, 2, 2, 1, 1, 0, 1, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 2, 1, 0, 0, 0], [1], [2, 0, 2, 1, 2, 2, 2, 2, 3, 3, 0, 1, 1, 0, 3, 3, 0, 0, 2, 2, 1, 3, 2, 0, 0, 3, 2, 3, 0, 2, 1, 2, 2, 1, 3, 2, 2, 1, 2, 2, 3, 2, 3, 3, 1, 3, 3, 0, 3, 0, 0, 2, 2, 1, 1, 2, 2, 3, 0, 0, 3, 0, 3, 3, 0, 2, 2, 2, 3, 2, 0, 2, 3, 3, 2, 2, 1, 0, 3, 0, 3, 1, 2, 2, 1, 1, 3, 0, 2, 0, 1, 1, 0, 0, 1, 3, 1], [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [3, 1, 0, 3, 4, 4, 0, 2, 3, 2, 2, 4, 3, 0, 0, 2, 3, 0, 2, 1, 1, 1, 2, 3, 3], [2, 1, 2, 2, 2, 0, 1, 1, 2, 2, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [3, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [], [1, 2, 3, 2, 3, 1, 2, 1, 4, 1, 0, 2, 1, 2, 1, 2, 0, 0, 1, 1, 1], [2], [], [1, 1, 2, 0, 0, 1], [3, 2, 1, 0, 1, 0, 1, 2, 3], [21, 15], [6, 24, 13], [3, 6], [16, 1]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 22, 23, 1, 97, 32, 25, 13, 20, 3, 9, 0, 21, 1, 0, 6, 9, 2, 3, 2, 2], "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= ( i2 - divInt(int(54.0),divInt(mod(divInt(( len(\"\"-\"\") * max(i2, int(41.0)) ),int(7.0)),i1),min(len(((\"\"3\"\" + \"\"g\"\"[i1:])[:i0] + \"\"V\"\".capitalize())[:divInt(mod(int(8.0),saveOrd(in0)),( i1 * i2 ))]), saveOrd(\"\"y\"\"[mod(min(i0, mod(int(9.0),divInt(divInt(int(0.0),abs(mod(( int(5.0) * ( mod(len(\"\"P\"\"[( abs(abs(int(4.0))) + saveOrd(s1[:len(s0)]) ):i0]),min(i0, i1)) - divInt(( int(1.0) - int(4.0) ),( divInt(min(i1, i0),abs(i1)) * len(\"\"n\"\") )) ) ),min(i0, ( ( divInt(abs(divInt(i1,( max(max(divInt(divInt(int(2.0),i0),max(i2, abs(int(2.0)))), mod(( int(5.0) * int(6.0) ),len(\"\"6\"\"))), i1) - divInt(i0,int(5.0)) ))),int(1.0)) - i0 ) + i0 ))))),int(5.0)))),len(\"\"\\\\\\n\"\")):int(062.0)])))) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [1], [1], [0], [], [], [], [], [], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 8, 6, 6, 6, 4, 0, 0, 5, 9, 2, 3, 2, 6, 6, 4, 7, 7, 5, 1], [1, 2, 2, 1, 0, 1, 0, 2, 1], [], [1, 2, 2, 1, 2, 1, 0, 2, 3, 1, 2, 1, 1, 3, 3, 3, 2, 0, 3, 0, 0, 2, 3, 0, 3, 2, 2, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 0, 1], [3, 0, 2, 1, 2, 3, 2], [2, 0, 1], [0, 0, 0, 1, 0, 1], [1], [1], [], [2, 2, 2, 0, 2, 1], [], [], [2, 0, 0, 1], [0], [0], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 20, 20, 9, 0, 33, 9, 7, 3, 6, 1, 1, 0, 6, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(08.0) \\g ( divInt(int(6664005.0),( int(9.0) * i1 )) + divInt(len(s1[int(232.0):divInt(int(6.0),int(6.0))][min(abs(max(mod(i2,abs(i2)), i1)), divInt(len(\"\"A\"\"[:i0]),abs(( mod(i1,int(4.0)) - i0 )))):i2][i1:]),int(7751.0)) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 1], [2], [1, 2], [0], [], [], [], [], [], [2], [], [0], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 6, 0, 0, 1, 2, 3], [1, 2, 1, 2, 2, 2, 1, 1, 0], [0], [1, 1, 1, 0, 1, 2, 3, 2, 3, 1, 2, 0, 3, 3, 2, 2, 2, 2, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 1, 0], [1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 2, 2, 1, 0], [1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0], [1, 4], [1, 1, 1, 1], [0], [1, 4, 4, 1, 4, 2, 0, 1], [2, 3, 2], [3], [1, 0], [2, 1, 1, 2], [], [4, 12], [0, 2], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 0, 0, 0, 2, 3, 0, 8, 3, 1, 1, 3, 0, 2, 1, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile \"\"0\"\" in \"\"e\"\".lstrip(s1[:int(4.0)].capitalize()).capitalize():{:\\ni1 = int(8.0)\\nin1 = \"\"m\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1], [2, 2, 1, 0, 1, 2, 0], [1, 1, 0], [1, 0, 1, 2], [0], [0, 0], [], [], [3, 1], [3], [2, 0, 0, 0, 0, 0, 1, 2, 0], [0], [3, 1, 3], [0, 2, 3, 3, 2, 1], [1, 0], [0], [1, 0], [1, 1, 1, 1, 1, 1, 1], [3, 9, 6, 8, 3, 5, 0], [0, 2, 2, 2, 0, 2], [0, 1], [2, 1, 2, 3, 0, 0, 1, 3, 3, 1, 1, 0, 3, 1, 1, 1, 0], [0, 1], [3, 4, 2, 0], [1, 1], [1], [0, 0, 4, 1, 0, 5, 3, 0, 2], [1, 1, 1], [0], [0, 1, 1, 0, 2, 0, 2, 0, 2, 0, 4, 4, 1, 0, 2, 4, 4], [2, 0, 2, 1], [], [1, 0, 0, 1], [2, 2, 2], [], [], [5, 0, 4], []], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 1, 2, 0, 0, 2, 1, 9, 1, 2, 6, 2, 1, 2, 7, 7, 6, 2, 17, 2, 4, 2, 1, 7, 3, 1, 13, 2, 0, 3, 3, 0, 0, 3, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0 != \"\"5\"\":{:\\nif res0:{:\\ni0 = ( int(3.0) - mod(len(\"\"0\"\"),i2) )\\n:}\\n:}else:{:\\nb1 = not ( ( not i2 \\ge int(9.0) or s0 not in in1[:saveOrd(s1[abs(int(6.0)):int(8.0)])] ) and True )\\n:}\\ni2 -= i0\\nloopBreak% = 0\\nfor s0 in in2[min(int(3.0), int(5.0)):int(0.0)]:{:\\nin0 = getCharFromString(\"\"4\"\", i2).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 2, 0, 0, 1, 1, 2, 1, 2, 2, 0, 1], [1, 0, 1, 1], [2, 1, 1, 0, 2, 0, 0, 2, 0], [0], [0, 0, 0, 0, 0], [], [], [3, 0, 3, 0, 0, 1, 2], [0, 4, 0], [1, 1, 2, 0, 0, 2, 2, 0, 1, 0], [0, 0, 0], [5, 3, 0], [0, 3, 1, 0, 1], [1], [1, 1], [1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 3, 4, 5, 1, 6, 2, 4, 2, 3, 5, 6, 0, 1, 6, 7, 5, 4, 2, 7, 0, 7, 0, 7, 0, 9, 7, 0, 0, 4, 4, 1, 0, 1, 5], [1, 0, 2, 0, 2, 1, 2, 1, 2, 0, 2, 0, 2, 1, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 1, 2, 0, 1, 1], [1, 1], [0, 3, 2, 1, 2, 3, 0, 3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 1, 2, 0, 3, 0, 2, 1, 2, 0, 1, 3, 0, 1, 3, 0, 1, 0, 0, 0, 3, 2, 0, 2, 1, 3, 2, 1, 2, 0, 3, 0, 1, 0, 1, 3, 3, 1, 3, 2, 3, 2, 0, 0, 1, 0, 2, 1, 3, 1, 0, 0, 0, 0, 2, 3, 2, 2, 1, 3, 1, 0, 3, 1, 3, 3, 2, 0, 1, 3, 3, 2, 0, 2, 2, 1, 1, 0, 1, 2, 3, 3, 1, 3, 3, 3, 2, 2, 3, 0, 3, 2, 3, 3, 1, 2, 0, 0, 1, 3, 1, 2, 3, 1, 2, 1, 2, 2, 0, 2, 0, 0, 2, 0, 3, 2, 0, 3, 3, 2, 1, 1, 1, 0, 0, 3, 3, 2, 0, 1, 1, 0, 2, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 4, 2, 2, 2, 4, 2, 3, 1, 4, 3, 2, 2, 0, 0, 1, 1, 1, 2, 3, 1, 4, 3, 3, 1, 2, 0, 2, 3, 3, 3, 3, 2, 1, 1, 0, 1, 2], [2, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 2, 1, 2, 0, 1, 0, 2, 2, 2], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 2, 1, 1, 0, 4, 5, 5, 1, 1, 5, 2, 4, 2, 3, 0, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [3, 1, 2, 1, 4, 2, 1, 0, 1, 4, 0, 0, 4, 2, 4, 2, 0, 1, 1, 4, 2, 2, 0, 0, 2, 2, 4, 0, 4, 4, 0, 1, 2, 2, 1, 1, 0, 4, 0, 0, 1, 0, 2, 1, 4, 2, 0, 2, 1, 1, 0], [3, 2, 2, 0, 2, 2, 0, 2, 2, 3, 3, 0], [4, 4], [0, 0, 0, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1], [1, 0, 1, 1, 1, 2, 2, 1, 3, 1, 2, 0, 1], [22, 16, 13], [6, 2, 19, 5, 20, 18, 25], [6, 7, 2], [31]], "fitness": 9223372036854775807, "mapping_values": [1, 13, 13, 4, 9, 1, 5, 0, 0, 5, 3, 9, 3, 3, 3, 1, 1, 3, 32, 32, 39, 2, 149, 41, 39, 26, 17, 17, 13, 1, 50, 10, 2, 13, 13, 2, 7, 3, 1], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (\"\"g\"\" + \"\"W\"\"[i1:max(( int(2.0) * ( min(i0, saveOrd(\"\"c\"\"[( ( abs(( ( ( ( ( mod(abs(int(0.0)),( i2 - abs(i0) )) + divInt(int(3.0),( i2 + int(4.0) )) ) * saveOrd(s2) ) * i1 ) + int(5.0) ) + abs(i2) )) + int(1.0) ) + i1 ):i2].rstrip(\"\"t\"\"))) + i0 ) ), len(s1.capitalize()))])\\ni2 -= mod(i0,( int(6.0) - max(mod(int(2.0),( i2 - saveOrd(s1) )), i1) ))\\nif int(4.0) \\l i2:{:\\ni1 += int(2.0)\\nres0 = len(getCharFromString(s0[abs(int(3.0)):], abs(( min(( i0 + i2 ), int(5.0)) + i0 )))[mod(int(6.0),min(int(0.0), i0)):i0].capitalize()) \\le i0\\nin1 = \"\"f\"\"\\n:}else:{:\\nb0 = \"\"6\"\".endswith(in2[i0:][( max(mod(( int(1.0) - max(int(6.0), i0) ),max(int(7.0), abs(len(in2)))), ( i1 + int(5.0) )) * max(saveOrd(s1.capitalize()[mod(i2,divInt(( int(4.0) - int(2.0) ),i2)):][:int(7.0)]), divInt(len(getCharFromString(s1.capitalize(), len(\"\"7\"\"))),int(0.0))) ):].capitalize())\\nloopBreak% = 0\\nfor in2 in \"\"u\"\"[:max(abs(min(mod(( abs(i1) * len(\"\"`\"\") ),divInt(len(s2),len(in1.capitalize()))), int(7.0))), ( i2 + i2 ))][:int(0.0)]:{:\\nres0 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( s2 != \"\"s\"\" or in0 in \"\"2\"\"[len(s0[:int(7.0)].rstrip(\"\"Q\"\"[( abs(int(0.0)) - mod(int(9.0),mod(( i1 + divInt(i1,i1) ),( i0 * max(mod(i1,max(min(divInt(int(7.0),int(0.0)), int(0.0)), i2)), i0) ))) ):])):] ):{:\\nif False:{:\\nin1 = \"\"z\"\"\\n:}\\n:}else:{:\\nb0 = max(abs(divInt(i1,int(4.0))), int(4.0)) \\l i1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0], [1], [0, 1], [], [0], [], [], [1], [], [2, 2], [], [3, 0], [], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 5], [1, 0, 0], [1], [0, 1, 3, 2, 2, 2, 3, 3, 0, 1, 3, 3, 1], [1, 1], [2, 2, 4, 2, 2], [0, 1], [1, 0], [1, 2, 5, 1], [1], [], [4, 0, 0, 1, 0, 2, 4, 1], [1, 2], [], [2, 1], [2], [], [], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 1, 1, 1, 2, 1, 2, 0, 0, 1, 0, 2, 1, 0, 4, 1, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveChr(i1) != s1:{:\\nb1 = s2 in \"\"2\"\"\\ni0 += int(9.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1], [1, 2, 0, 1, 1], [1], [1, 1, 0, 2], [], [0], [], [], [2], [0], [0, 2, 1, 0], [0], [2], [3, 1], [0], [0], [1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 2, 8, 2, 0, 5, 8, 5, 4, 2, 6, 3, 3, 6, 5, 3, 4, 2, 1, 1, 7, 2, 9, 5, 0, 0, 3, 5], [2, 2, 1, 2, 2, 0, 2, 0, 1, 0, 2, 2, 2, 1, 2, 1, 2, 0, 2, 2], [0, 1], [2, 1, 3, 2, 0, 1, 0, 3, 1, 3, 2, 2, 3, 1, 1, 2, 1, 2, 3, 2, 0, 0, 3, 1, 0, 2, 3, 1, 0, 1, 0, 2, 1, 2, 3, 2, 3, 3, 0, 2, 3, 2, 1, 2, 0, 2, 1, 3, 1, 1, 0, 3, 3, 3, 1, 1, 0, 0, 1, 3, 2, 2, 0, 2, 2, 2, 1, 2, 3, 2, 0, 0, 0, 0, 1, 3, 0, 2, 1, 3, 3, 3, 3, 2, 1, 3], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 3, 3, 1, 0, 0, 1, 2, 3, 1, 2, 1, 0, 1, 1, 4, 3, 0, 3, 4, 2, 2, 4], [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 2, 1, 2, 2], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 5, 4, 3, 1, 2], [0, 1, 1, 0, 1, 1, 1], [], [4, 0, 1, 4, 2, 4, 1, 1, 2, 2, 0, 0, 4, 0, 2, 1, 2, 1, 4, 0], [2, 2, 3, 1, 2], [0], [0, 2, 0, 2, 1], [1, 1, 1, 1, 0, 2, 0], [21, 1], [1, 1, 2, 17], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 0, 1, 0, 0, 1, 1, 4, 1, 1, 2, 1, 1, 1, 28, 28, 20, 2, 86, 24, 23, 14, 11, 6, 7, 0, 20, 5, 1, 5, 7, 2, 4, 1, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( int(828.0) - min(( i2 - int(2.0) ), i1) )\\nif ( s0.capitalize() == \"\"bb\"\" and len(\"\"c\"\".lstrip()[int(05.0):len(\"\"rV\"\")].capitalize()) \\l ( ( max(int(85.0), int(426.0)) + ( int(33.0) + mod(min(divInt(i2,i2), min(int(6.0), i0)),divInt(max(int(5.0), i2),int(3.0))) ) ) - i0 ) ):{:\\ni1 += divInt(int(4.0),mod(abs(divInt(len(in2[max(i0, divInt(abs(( int(2.0) + mod(i2,divInt(int(1.0),max(int(1.0), int(7.0)))) )),i2)):min(max(max(int(2.0), int(9.0)), i2), i1)][int(5.0):]),saveOrd(in1))),( ( i2 - ( mod(mod(int(0.0),( len(saveChr(( i1 - i2 ))) - i0 )),i2) * int(0.0) ) ) - min(i2, ( int(3.0) * len(in0) )) )))\\n:}else:{:\\nb2 = True\\ns1 = \"\"7\"\"[saveOrd(\"\"B\"\"[:abs(abs(( int(5.0) * saveOrd(s2.capitalize()) )))]):]\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 2, 0, 0, 2, 1, 1, 1, 2, 1, 1, 1], [1, 0, 1, 1, 2, 1, 0, 0, 1, 1, 0, 0, 0], [2, 1, 1, 2, 0, 2, 1, 1, 2, 0, 1, 0, 2, 1, 1, 1], [0, 0, 0, 0, 0, 0], [0, 0], [], [], [3, 0, 2], [1, 1, 1, 1, 5], [2, 0, 1, 2, 1, 2, 0, 1, 1, 0, 2, 0, 1, 0], [0, 0, 0, 0, 0], [2, 2, 1, 2], [2, 1, 2, 3, 1], [1], [1, 1], [0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 9, 3, 9, 0, 5, 2, 9, 5, 0, 8, 3, 3, 2, 3, 5, 6, 9, 7, 4, 4, 9, 6, 6, 5, 9, 8, 6, 0, 9, 2, 0, 9, 6, 3, 0, 1, 4, 9, 0, 2, 5, 6, 7, 4, 9, 0, 5, 3, 9, 0, 5, 1, 4, 7, 2, 2, 2, 6, 8, 9, 4], [2, 1, 0, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 1, 1, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 0, 1, 0, 1, 1, 2, 2, 0, 1, 0, 2, 2, 2, 0, 2, 1, 0, 2, 2, 0, 2, 2, 2, 0, 1, 2, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2], [0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 2, 0, 2, 3, 2, 0, 1, 0, 1, 1, 0, 0, 2, 2, 3, 2, 0, 2, 1, 2, 0, 1, 3, 2, 2, 3, 0, 1, 2, 1, 3, 2, 2, 1, 0, 1, 1, 0, 2, 3, 1, 0, 3, 2, 1, 0, 1, 3, 3, 1, 2, 0, 0, 1, 0, 0, 2, 3, 2, 3, 3, 0, 0, 3, 2, 1, 3, 0, 2, 3, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 3, 2, 0, 1, 3, 0, 0, 2, 0, 0, 2, 1, 0, 0, 1, 3, 1, 3, 3, 3, 3, 2, 1, 2, 2, 1, 1, 2, 3, 0, 2, 1, 0, 3, 0, 2, 1, 0, 2, 3, 2, 2, 2, 1, 1, 1, 3, 1, 3, 0, 0, 2, 2, 3, 1, 2, 0, 3, 1, 0, 2, 1, 1, 1, 3, 2, 3, 1, 1, 1, 3, 3, 3, 3, 2, 0, 0, 3, 2, 3, 2, 2, 1, 3, 3, 3, 0, 0, 0, 1, 0, 2, 0, 3, 0, 2, 2, 1, 3, 0, 2, 2, 0, 0, 3, 1, 0, 1, 0, 2, 0, 1, 0, 2, 1, 1, 1, 0, 1, 0, 0, 1, 1, 3, 1, 2, 3, 3, 0, 0, 3, 0, 0, 3, 1, 0, 3, 3, 2, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0], [1, 4, 0, 4, 1, 3, 2, 2, 1, 0, 1, 1, 3, 2, 4, 3, 1, 2, 4, 0, 3, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 0, 2, 3, 4, 1, 3, 0, 1, 0, 1, 1, 3, 0, 3, 0, 0, 4, 1, 4], [0, 2, 2, 2, 0, 0, 1, 0, 1, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 1, 2, 0, 0, 2, 1, 0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 4, 4, 5, 3, 0, 3, 1, 2, 0, 5, 5, 2, 4, 3, 2, 4, 0, 2, 5, 1, 2, 1, 3, 1, 5, 3, 3, 4], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [4, 4, 3, 4, 2, 4, 2, 0, 4, 3, 3, 2, 1, 2, 2, 1, 1, 1, 0, 2, 4, 3, 1, 2, 4, 2, 4, 0, 4, 1, 0, 1, 0, 1, 4, 1, 4, 2, 1, 4, 0, 2, 0, 1, 4, 2, 1, 0, 0, 0, 2, 4, 4, 2, 2, 1, 2, 0, 1, 0, 1, 4, 1, 1, 1, 0, 4, 4, 4, 1, 1, 2, 0, 0, 4, 0, 1, 0, 4, 2, 1, 0], [0, 1, 2, 0, 2, 0, 3, 3, 2, 0, 2, 1, 0, 0, 2, 2, 3, 0, 3, 0, 2], [3, 4, 3, 2], [0, 1, 1, 2, 2, 0, 1, 0, 1, 2, 0, 0, 1, 1, 2, 2, 0], [2, 2, 2, 0, 1, 3, 0, 2, 0, 1, 3, 3, 1, 2, 1, 2, 0, 0, 2, 2, 0, 3, 0, 0, 0, 0, 3], [10, 0, 3, 7, 21, 24, 9, 24, 12, 10], [11, 23, 5, 1], [6, 7, 8, 4, 7, 5, 3, 7], [10, 5, 4, 27, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 29, 29, 13, 16, 6, 2, 0, 0, 3, 5, 14, 5, 4, 5, 1, 2, 6, 62, 62, 68, 8, 225, 57, 50, 31, 28, 29, 27, 6, 82, 21, 4, 17, 27, 10, 4, 8, 5], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = getCharFromString(saveChr(int(0.0)), i2)\\nif (getCharFromString(in1[:( i1 + mod(max(mod(i0,int(9.0)), i1),int(3.0)) )], int(9.0))[i0:i0].capitalize() + ((\"\"67\"\"[:divInt(divInt(saveOrd(\"\"8\"\"[mod(i0,mod(int(0.0),( i2 * int(5.0) ))):][min(divInt(( saveOrd(\"\"K\"\") * i2 ),int(2.0)), ( int(9.0) * max(divInt(mod(int(5.0),i0),int(0.0)), int(8.0)) )):]),i1),mod(len(\"\"l\"\"),int(3.0)))] + in1) + getCharFromString((\"\"\"\\\\\"A\"\" + in2.rstrip(\"\"4\"\".capitalize())[i2:abs(( int(3.0) + i2 ))].lstrip(in0)[:int(235.0)]), abs(max(int(69.0), ( i1 + i1 ))))[int(7.0):i2]).capitalize()) == \"\"Dx\"\"\":{:\\nloopBreak% = 0\\nfor s0 in in0:{:\\nif not i1 \\g divInt(min(( max(max(i0, i2), len(\"\"!\"\")) - ( int(4.0) + abs(i0) ) ), mod(saveOrd(getCharFromString(\"\"f\"\", divInt(divInt(int(4.0),int(9.0)),( ( int(6.0) - int(6.0) ) + divInt(( len(\"\"7\"\"[:mod(i1,int(5.0))].capitalize()) * max(i0, i1) ),divInt(i2,i0)) )))),( int(9.0) * i0 ))),i1):{:\\nif saveChr(int(8.0)) == s1:{:\\nloopBreak% = 0\\nwhile abs(int(6.0)) \\g saveOrd(s2[min(len(\"\"b\"\"), max(mod(int(0.0),( ( int(9.0) - int(2.0) ) + ( min(i0, ( int(0.0) + i1 )) + max(i1, mod(int(9.0),i2)) ) )), ( abs(mod(mod(( int(6.0) + int(3.0) ),int(0.0)),len(getCharFromString(\"\"5\"\"[int(1.0):abs(i2)], i0)))) + ( mod(max(int(4.0), ( i1 + min(int(9.0), i0) )),( int(0.0) - int(2.0) )) - int(5.0) ) ))):]):{:\\ni2 = max(( abs(int(6.0)) + int(7.0) ), int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni2 = min(abs(len(s0)), saveOrd(in2))\\n:}\\nif in2 not in getCharFromString(\"\"H\"\"[:mod(i2,i0)][:max(( len(s2[divInt(mod(int(9.0),min(max(min(i2, i1), i0), int(0.0))),i2):]) * ( i2 + max(i0, ( mod(int(5.0),max(i2, ( ( i2 - i2 ) * len(\"\"V\"\") ))) + int(3.0) )) ) ), i0)].capitalize(), int(9.0))[i1:( i2 + int(0.0) )]:{:\\nin1 = in0\\nloopBreak% = 0\\nfor s2 in \"\"3\"\":{:\\nloopBreak% = 0\\nfor in1 in \"\"7\"\".capitalize():{:\\nres0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif i1 \\g mod(int(5.0),int(1.0)):{:\\nif int(4.0) \\g i0:{:\\ns0 = \"\"Y\"\"\\n:}else:{:\\ni0 *= int(7.0)\\n:}\\n:}\\n:}else:{:\\ni1 -= i0\\n:}\\nloopBreak% = 0\\nfor s2 in \"\"\\\\\\\\J\"\":{:\\nin2 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not getCharFromString(\"\"Y\"\".strip(), i0).lstrip(\"\"M\"\") == s2[int(2.0):]\\nloopBreak% = 0\\nfor s1 in in0:{:\\ni1 = int(2.0)\\nb2 = ( min(int(2.0), mod(len(getCharFromString(s1, min(i1, i0))),min(i0, i0))) != saveOrd(\"\"K\"\") or False )\\nin2 = in0\\nloopBreak% = 0\\nfor in0 in \"\"=\"\"[int(6.0):i0].capitalize():{:\\ni0 = max(saveOrd(in1), ( int(8.0) + i0 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = int(94.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [5, 9], [0, 1, 2], [1, 1], [1, 3, 3, 0, 1], [], [3, 1], [1, 1], [], [3], [1], [], [4, 1], [1], [], [], [3], [], [], [], [19]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 1, 1, 0, 2, 1, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = saveChr(int(5.0))\\ni0 -= len(\"\":\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 1, 2, 0, 0, 2, 2, 1, 0], [1, 2, 0], [1, 0, 1, 1, 1, 1], [0], [0, 0, 0, 0], [], [], [2], [4, 5], [0, 0, 2, 0, 0, 0, 1, 2, 1], [0, 0], [4, 5], [2, 2, 3, 3, 1], [1, 1], [1], [1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 2, 3, 5, 1, 7, 0, 6, 2, 4, 7, 3, 7, 4, 4, 2, 0, 3, 1, 1, 8, 6, 2, 2, 6, 5, 6, 6, 4, 3, 2, 2, 1, 3, 6, 2, 1, 9, 9, 9, 3, 7, 1, 3, 8, 3, 0, 1, 0, 8, 7, 6, 4, 3, 3, 6, 5, 8, 8, 3, 0], [0, 2, 2, 2, 1, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 0, 1, 1, 2, 0, 1, 2, 2, 1, 0, 0, 1, 1, 0, 2, 2, 2, 1, 1, 0, 2, 0, 1, 0, 2, 1, 0], [1, 0, 1, 0, 1], [1, 2, 3, 3, 1, 3, 0, 0, 0, 3, 2, 1, 1, 0, 3, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 2, 3, 0, 1, 3, 3, 3, 0, 3, 1, 3, 0, 0, 0, 3, 3, 1, 3, 0, 2, 0, 0, 2, 0, 0, 0, 2, 1, 2, 2, 1, 1, 1, 3, 2, 0, 3, 0, 0, 3, 3, 0, 2, 1, 1, 1, 2, 2, 1, 2, 2, 0, 1, 3, 1, 0, 2, 3, 2, 0, 0, 3, 1, 3, 2, 3, 3, 3, 2, 3, 0, 1, 1, 3, 1, 1, 0, 3, 3, 2, 1, 1, 3, 2, 3, 2, 1, 3, 1, 1, 3, 3, 3, 1, 1, 3, 0, 3, 2, 2, 0, 2, 3, 3, 2, 0, 1, 1, 3, 1, 2, 3, 2, 1, 0, 1, 1, 1, 0, 3, 3, 2, 3, 2, 1, 0, 1, 3, 3, 0, 1, 3, 1, 0, 3, 3, 2, 1, 0, 3, 1, 1, 1, 3, 2, 1, 0], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [3, 4, 0, 3, 2, 0, 1, 1, 4, 2, 2, 3, 3, 4, 2, 0, 0, 1, 4, 1, 4, 3, 3, 4, 0, 0, 0, 2, 2, 3, 4, 4, 2, 1, 2, 3, 0, 2, 0, 4, 3, 3, 0, 1, 0, 1, 1, 2, 1, 4, 3, 0, 3, 4], [0, 0, 1, 1, 1, 2, 0, 2, 0, 0, 0, 2, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0], [3, 3, 3, 5, 4, 1, 5, 3, 1, 2, 0, 2, 1, 3, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0], [1, 2, 3, 4, 2, 2, 3, 1, 1, 1, 4, 4, 0, 2, 0, 4, 4, 2, 0, 3, 4, 2, 1, 2, 2, 0, 2, 0, 2, 1, 4, 3, 2, 0, 2, 1, 0, 1, 2, 4, 2, 1, 3, 3, 0, 1, 3, 4, 4, 4, 4, 4, 4, 4, 2, 4, 2, 2, 4, 4, 0, 1, 4, 2, 4, 2, 4, 2, 0, 2, 0, 1, 2, 1, 2, 1, 4, 0, 1, 1, 2, 2, 0, 4, 2, 4, 4, 1, 0, 0], [0, 0, 0, 0, 1, 3, 1, 2, 3, 1, 0, 2, 3, 3, 3, 1, 1, 2, 2, 0, 2, 0, 3, 1, 3], [3, 1, 0, 3, 2, 2, 5], [2, 1, 0, 2, 2, 2, 1, 1, 1, 0, 0, 2, 2, 1, 2, 1, 2, 1, 1, 1, 0, 0, 2, 0, 0, 0], [3, 0, 2, 1, 3, 2, 1, 0, 2, 3, 0, 3, 2, 0, 2, 0, 1, 2], [21, 4, 2, 7, 12], [8, 14, 0], [4, 6, 5, 8, 1, 6], [3, 29, 29, 24]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 3, 6, 1, 4, 0, 0, 1, 2, 9, 2, 2, 5, 2, 1, 1, 62, 62, 42, 5, 172, 32, 54, 14, 21, 16, 18, 1, 90, 25, 7, 26, 18, 5, 3, 6, 4], "tree_depth": 66, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(7.0)\\nb2 = not not \"\"\"\".startswith((getCharFromString((\"\"V\"\" + \"\"4\"\")[mod(len(\"\"i\"\"),saveOrd(getCharFromString(getCharFromString(in0, int(1.0)), min(i2, i2)))):i2][:len(in0[( int(2.0) + int(3.0) ):])], i1) + getCharFromString(saveChr(abs(min(max(int(5.0), divInt(int(1.0),max(int(7.0), int(0.0)))), i1))), i2))[divInt(saveOrd(in0[i0:]),int(624.0)):])\\nif ( ( False or abs(abs(len((\"\"^\"\"[i1:].lstrip(in2[:len(in1[:int(7.0)])][:saveOrd(\"\"6\"\"[i0:i0])]) + saveChr(i0))))) \\le abs(min(int(37.0), min(i0, divInt(i2,i1)))) ) or (s1[divInt(i0,i1):i1] + \"\"o\"\"[( int(44.0) - divInt(divInt(int(2.0),int(03.0)),int(11.0)) ):]).endswith(in2) ):{:\\ni2 = max(mod(i0,saveOrd(\"\"E\"\")), i1)\\ni2 -= i2\\n:}else:{:\\nloopBreak% = 0\\nwhile max(saveOrd(\"\"5\"\"[:i1].capitalize()[mod(int(86.0),int(2.0)):]), int(2656.0)) != ( ( int(6432.0) - ( divInt(i0,int(2.0)) * len(((in0 + \"\"^\"\") + (saveChr(int(1.0)).rstrip() + getCharFromString(saveChr(i0)[( len(saveChr(divInt(i1,i1))[saveOrd(s1.capitalize()):][:int(3.0)]) + min(mod(min(min(abs(divInt(abs(i0),int(6.0))), int(2.0)), len(\"\"C\"\")),int(1.0)), int(9.0)) ):].strip().lstrip(getCharFromString(s2[:i2].capitalize()[:saveOrd(s0[saveOrd(\"\"?\"\"):mod(int(9.0),int(9.0))])], abs(( max(( int(3.0) * abs(int(7.0)) ), int(1.0)) + len(\"\"8\"\"[min(abs(int(3.0)), int(8.0)):min(i2, saveOrd(\"\"H\"\"[mod(divInt(i2,divInt(len(getCharFromString(s2, len(\"\"1\"\"))),( i1 + int(3.0) ))),int(0.0)):]))]) )))[:min(int(1.0), mod(max(( int(0.0) + i1 ), int(8.0)),int(7.0)))].capitalize()).lstrip().capitalize(), int(6.0))))) ) ) * i0 ):{:\\nloopBreak% = 0\\nfor s1 in \"\"Ma\"\":{:\\ni2 = min(max(mod(max(( int(4.0) + i0 ), int(3.0)),abs(max(i1, int(3.0)))), saveOrd(in0[int(6.0):i0][len(saveChr(min(divInt(int(5.0),i2), len(\"\"6\"\".strip(s0))))[int(8.0):int(8.0)].strip()):int(3.0)])), saveOrd(s1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += divInt(int(0.0),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 0, 2, 2, 2, 0, 1, 2, 1, 0, 0, 2, 1, 2, 1, 2, 1, 1], [1, 0, 2, 0, 2, 1, 0, 0], [0, 0, 1, 2, 0, 1, 0, 2, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0], [], [], [3, 2, 0, 1, 2, 1], [3, 2, 1], [2, 2, 0, 0, 1, 1, 0, 1], [0, 0, 0], [2, 0], [1, 0, 0], [], [0], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1], [0, 5, 6, 7, 7, 4, 8, 4, 9, 0, 0, 3, 9, 9, 8, 7, 8, 2, 6, 3, 3, 1, 0, 8, 0, 6, 5, 5, 4, 4, 7, 4, 2, 4, 3, 5, 0], [0, 0, 2, 2, 0, 1, 0, 2, 0, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 0, 1, 2, 0, 0, 2, 2, 2, 0, 1, 1, 2], [0, 0, 0, 0], [2, 1, 2, 1, 2, 0, 1, 1, 1, 3, 0, 0, 3, 0, 0, 0, 1, 2, 3, 0, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 0, 0, 0, 2, 1, 1, 3, 1, 3, 1, 1, 2, 2, 3, 0, 2, 3, 0, 2, 1, 0, 3, 0, 2, 0, 3, 2, 0, 2, 3, 0, 1, 1, 0, 2, 1, 2, 1, 1, 2, 1, 2, 0, 3, 0, 2, 2, 0, 0, 3, 0, 2, 0, 1, 0, 3, 2, 2, 0, 1, 0], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0], [0, 0, 2, 2, 3, 1, 4, 0, 3, 3, 0, 1, 2], [0, 0, 1, 0, 1, 2, 1, 2, 2, 0, 2, 1, 2, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [4, 0, 0, 1, 4, 1, 2, 3, 0, 5, 4, 1, 5, 0, 4, 0], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0], [2, 4, 4, 4, 0, 2, 4, 4, 2, 2, 4, 4, 4, 4, 4, 1, 0, 2, 0, 3, 2, 0, 1, 0, 3, 1, 0, 1, 1, 1, 1, 4, 2, 0, 1, 0, 3, 1, 0, 2, 0], [3, 1, 3, 3, 2, 0, 3, 0, 0, 2, 3], [4, 1, 4, 4, 0], [2, 0, 1, 2, 2, 0, 0, 2], [3, 3, 2, 3, 3, 0, 2, 2, 1, 1, 2, 0, 1, 1], [18, 15], [15, 18, 5, 7], [3, 9, 2, 7], [15, 9, 25, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 18, 18, 8, 10, 4, 4, 0, 0, 6, 3, 8, 3, 2, 3, 0, 1, 2, 37, 37, 31, 4, 94, 27, 13, 14, 13, 16, 14, 4, 41, 11, 5, 8, 14, 2, 4, 4, 4], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveChr(divInt(int(0.0),( int(5.0) + ( i0 + int(6.0) ) ))).rstrip(in1.rstrip())[int(7.0):] == getCharFromString(getCharFromString(getCharFromString(\"\",\"\".capitalize(), int(7.0)), min(i0, i2)).rstrip(s0), min(i2, i0))[i1:][:int(4.0)].capitalize().rstrip(s0[( abs(i0) - ( int(8.0) + divInt(int(4.0),mod(int(9.0),( mod(int(0.0),divInt(int(0.0),int(3.0))) - int(9.0) ))) ) ):])[i2:i0]:{:\\nres0 = (s1[i2:mod(int(98.0),int(7.0))] + \"\"&3@%\"\") in in1\\n:}else:{:\\nloopBreak% = 0\\nfor s1 in (\"\"S9\"\" + s2):{:\\nloopBreak% = 0\\nwhile True:{:\\nloopBreak% = 0\\nfor in0 in \"\"2\"\":{:\\nb2 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = abs(int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile len(\"\"p\"\") \\ge int(2.0):{:\\ns0 = \"\"s7\"\"\\nb1 = int(6.0) == divInt(divInt(max(i1, ( saveOrd(\"\"P\"\") * i1 )),( int(3.0) - i1 )),min(i2, mod(i2,len(in2[( i2 * mod(len(\"\"f\"\"),i2) ):int(3.0)].lstrip()))))\\ni1 = int(10.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b2:{:\\nb1 = i0 \\g ( int(8065.0) * divInt(int(54.0),int(474.0)) )\\n:}else:{:\\nloopBreak% = 0\\nfor in1 in s1:{:\\nin2 = (\"\"h\"\" + s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in s0[( int(24.0) + ( i1 * min(i2, mod(mod(i0,i0),max(i2, ( i2 - int(3.0) )))) ) ):]:{:\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = abs(( ( i1 * int(50.0) ) - i2 ))\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [2, 1, 1, 2, 1, 2, 2, 2, 1, 0, 0], [2, 2, 0, 1, 1], [2, 0, 2, 2, 1, 0], [0], [0, 0], [], [], [0, 3], [0, 2, 5, 5], [2, 0, 1, 1, 0, 0, 1, 0, 2, 1, 2], [0, 0, 0, 0], [0, 2, 2], [3, 1, 2, 3], [0, 1], [0], [1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 5, 8, 1, 3, 3, 1, 5, 6, 3, 1, 0, 7, 4, 1], [2, 1, 0, 1, 0, 0, 1, 2, 1, 1, 0, 0, 1, 1, 0], [1], [3, 0, 2, 1, 1, 3, 1, 1, 1, 3, 2, 0, 2, 1, 0, 0, 0, 0, 3, 0, 0, 1, 1, 1, 1, 3, 0, 1, 3, 0, 3, 2, 3, 0, 3, 3, 1, 1, 0, 1, 0, 0, 3, 1], [0, 0, 0, 0], [1, 2, 1, 4, 3, 2, 0, 1, 0, 2, 2], [1, 0, 0, 2, 0], [], [5, 0, 0, 3, 4, 5, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [0, 4, 4, 1, 4, 4, 4, 4, 0, 4, 2, 4, 4, 4, 1, 1, 1, 1, 2, 0, 2, 4, 4, 1, 1, 0, 2, 1, 1], [1, 0, 0, 3, 3, 3, 0, 0, 3, 1, 2, 1], [3, 5, 4, 3], [1, 0, 0, 2], [3, 0, 2, 1, 3, 1, 1, 2, 0], [1, 3], [25, 20, 2, 16], [6, 6], [13, 1]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 5, 6, 1, 2, 0, 0, 2, 4, 11, 4, 3, 4, 2, 1, 2, 15, 15, 15, 1, 44, 4, 11, 5, 0, 8, 9, 1, 29, 12, 4, 4, 9, 2, 3, 2, 2], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2 in saveChr(max(i2, ( int(0.0) - int(5.0) ))):{:\\ns0 = getCharFromString(\"\"*\"\", abs(int(8.0)))\\nb0 = ( int(1.0) \\l int(3.0) and max(( i1 + ( int(3.0) + i0 ) ), i1) == i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile True:{:\\ns0 = getCharFromString(in0.rstrip(getCharFromString(getCharFromString(saveChr(i0).lstrip(\"\"B\"\"), saveOrd(\"\"6\"\"))[:i1], i2)).strip(\"\"z\"\").lstrip(\"\"\\\\\\n\"\"), int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in1 in in2[int(5.0):int(6.0)]:{:\\nif not int(3.0) != len(saveChr(i1).capitalize()[int(1.0):abs(i1)]):{:\\nif ( \"\"u\"\" == \"\"c\"\" or min(( max(i0, min(abs(int(0.0)), int(7.0))) * i0 ), int(4.0)) != i1 ):{:\\ns2 = s2\\n:}else:{:\\ni1 += i0\\n:}\\n:}else:{:\\nres0 = \"\"6\"\"[abs(int(1.0)):] == \"\"D\"\"\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 2, 2, 0, 1, 2, 2, 0, 0, 2, 0, 2, 2, 1, 2, 1, 0, 2, 0, 0, 0], [2, 0, 1, 1, 0, 2, 1, 1, 2], [1, 1, 2, 1, 2, 2, 0, 2, 2, 0, 0, 0], [0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [2, 0, 0, 2, 1, 0, 0], [2, 4, 0], [1, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 0, 0, 0, 2], [0, 0, 0], [4, 3, 1, 0, 4, 2, 5, 3], [3, 1, 3, 0, 1, 3, 3, 3, 0, 0, 2], [0, 1, 1, 0, 0], [1, 0], [1, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 9, 0, 2, 4, 8, 7, 8, 6, 3, 7, 6, 9, 0, 4, 7, 9, 5, 1, 1, 6, 7, 4, 5, 5, 1], [2, 0, 1, 0, 1, 0, 2, 2, 1, 1, 2, 2, 0, 2, 0, 0, 2, 2, 2, 1, 0, 0, 0], [0, 1, 1], [1, 1, 3, 0, 1, 3, 0, 0, 0, 0, 0, 3, 0, 1, 1, 2, 0, 1, 2, 1, 0, 0, 0, 2, 0, 1, 1, 0, 1, 1, 2, 2, 3, 1, 3, 0, 2, 1, 2, 0, 0, 1, 3, 2, 2, 2, 2, 0, 1, 1, 3, 1, 1, 1, 2, 2, 0, 2, 0, 1, 1, 1, 0, 3, 1, 3, 3, 1], [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [1, 2, 1, 1, 2, 0, 3, 0, 0, 4], [0, 1, 2, 0, 1, 0, 2, 0, 2], [1, 1, 0, 1, 0, 0, 1], [5, 1, 2, 3, 5, 1, 3, 2, 5, 0, 4, 4, 2, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0], [2, 4, 4, 4, 0, 1, 4, 0, 4, 1, 1, 4, 1, 0, 1, 1, 1, 2, 1, 2, 4, 2, 1, 4, 2, 4, 0, 1, 2, 2, 2, 2, 4, 2, 1, 1, 4, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 3, 3, 2, 2, 3, 1, 3, 2, 2, 3], [2, 0, 0, 4, 0], [0, 0, 0, 0, 1, 0, 0, 1, 2, 1], [0, 0, 1, 1, 3, 0, 2, 0, 3, 3, 3, 1, 1, 3, 2, 1, 1, 1, 0, 1, 0], [22, 9, 11, 18, 25, 14], [22, 21, 4, 2, 23, 4, 12, 21], [6, 0], [22, 1, 23, 17, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 21, 21, 9, 12, 2, 9, 0, 0, 7, 3, 22, 3, 8, 11, 5, 2, 4, 26, 26, 23, 3, 68, 14, 10, 9, 7, 14, 21, 2, 46, 11, 5, 10, 21, 6, 8, 2, 5], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(4.0)\\nloopBreak% = 0\\nwhile int(9.0) == max(i0, int(024.0)):{:\\nloopBreak% = 0\\nfor in2 in s1.lstrip().strip().capitalize()[abs(i1):i0]:{:\\ni1 += i0\\ns2 = \"\"WJw\"\"\\nif ( False and ( b2 or True ) ):{:\\nif in0.capitalize().startswith(\"\"v\"\".capitalize()):{:\\ni2 -= i2\\nin2 = \"\"=\"\"\\n:}else:{:\\nloopBreak% = 0\\nfor s1 in \"\"L\"\".lstrip():{:\\nin0 = s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile \"\"6\"\" != \"\"S\"\":{:\\nif \"\"\\\\\\n\"\" not in \"\">\"\"[i1:max(i1, int(8.0))]:{:\\nb0 = saveChr(int(7.0))[( i2 * int(8.0) ):mod(int(6.0),i2)] in \"\".\"\"[i0:i2]\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif in2.capitalize()[:( i0 + int(3.0) )].rstrip(\"\"e\"\").startswith(\"\"c\"\"[:int(7.0)].capitalize()[i0:][:int(6.0)][int(9.0):mod(divInt(max(int(0.0), abs(i2)),mod(int(4.0),( i2 - i2 ))),int(7.0))][min(divInt(( ( ( i1 + int(9.0) ) * int(5.0) ) + len(\"\"-\"\") ),int(1.0)), int(1.0)):int(6.0)]):{:\\ns0 = in1.lstrip()\\nin1 = \"\"0\"\"\\nloopBreak% = 0\\nwhile s2 == \"\"x\"\":{:\\nb0 = \"\"e\"\".endswith(s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = ( ( ( ( divInt(i0,mod(i0,int(7.0))) * int(4.0) ) \\le int(5.0) or i0 \\l min(int(5.0), min(saveOrd(\"\"m\"\"), int(1.0))) ) and b1 ) and b0 )\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not \"\"Zv\"\" != \"\"O\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 2], [0], [0, 0, 1, 0, 0, 0, 2, 2, 2], [0], [0, 5, 4], [3, 3, 3, 0, 3], [1, 0, 1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [5, 6, 3, 7, 2, 4, 7, 5, 4, 4, 5, 5, 6, 2, 1, 1, 2, 1, 6, 7, 2, 4, 1, 4, 3, 5, 7, 6, 2, 8, 1, 8, 1, 7, 2, 1, 0, 5, 7, 5, 5, 2, 3, 8, 2, 0, 7, 6, 0, 3, 2, 6, 1, 4, 5, 3, 8, 5, 8, 5, 6, 7, 1, 4, 4, 9, 8, 1, 5, 6, 2, 9, 4, 7, 7, 9, 9, 7, 8, 8, 1, 1, 3, 1, 9, 2, 6, 6, 7], [0, 1, 0, 2, 2, 2, 2, 0, 0, 2, 0, 1, 1, 1, 1, 0, 0, 2, 2, 1, 2, 0, 0, 1, 1, 0, 1, 1, 0, 2, 2, 1, 0, 2, 1, 2, 0, 1, 2, 1, 1, 1, 2, 1, 0, 2, 0, 1, 0, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 2, 1, 0, 1, 2, 0, 1, 0, 2, 0, 0, 0, 1, 1, 2, 0, 1, 1, 1, 0, 0, 1], [], [0, 0, 3, 2, 2, 3, 1, 3, 2, 0, 0, 3, 3, 3, 2, 1, 3, 2, 0, 3, 3, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 3, 2, 2, 1, 1, 3, 2, 1, 1, 0, 2, 3, 2, 1, 0, 2, 0, 3, 0, 3, 1, 1, 0, 3, 3, 2, 3, 2, 0, 2, 0, 3, 0, 2, 2, 1, 1, 0, 2, 0, 2, 0, 3, 0, 3, 3, 3, 2, 3, 3, 1, 1, 2, 0, 2, 1, 0, 0, 3, 2, 3, 0, 0, 1, 3, 2, 2, 2, 1, 1, 3, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0, 2, 3, 1, 1, 1, 2, 1, 3, 0, 2, 3, 2, 1, 3, 0, 3, 1, 0, 2, 3, 0, 1, 2, 3, 1, 2, 0, 2, 3, 3, 3, 1, 1, 2, 3, 2, 2, 0, 2, 3, 2, 3, 3, 1, 3, 3, 0, 2, 0, 0, 0, 3, 1, 0, 3, 2, 2, 0, 2, 3, 1, 2, 1, 2, 3, 2, 3, 2, 1, 2, 0, 2, 3, 3, 2, 1, 3, 1, 2, 1, 3, 0, 0, 0, 3, 0, 3, 0, 2, 0, 1, 3, 0, 3, 1, 1, 0, 2, 2, 1, 3, 2, 3, 3, 2, 1, 3, 0, 2, 3, 1, 2, 0, 0, 0, 3, 3, 3, 1, 1, 1, 0, 2, 0, 3, 3, 2, 1, 0, 2, 0, 2, 3, 3, 2, 2, 3, 0, 2, 1, 2, 1, 1, 3, 2, 3, 0, 2, 1, 0, 2, 2, 0, 0, 0, 2, 0, 0, 2, 3, 3, 1, 3, 0, 1, 2, 1, 2, 3, 2, 1, 2, 0, 0, 3, 0, 2, 2, 3, 0, 0, 1, 3, 2, 3, 1, 2, 1, 3, 3, 3, 2, 1, 0, 0, 3, 3, 1, 2, 0, 3, 2, 0, 0, 3, 1, 3, 1, 3, 1, 0, 1, 1, 0, 3, 0, 2, 2, 0, 3, 3, 3, 1, 2, 0, 0, 0, 2, 1, 1, 2, 0, 1, 3, 3, 3, 1, 3, 2, 2, 3, 0, 0, 3, 1, 2, 1, 1, 3, 3, 3, 1, 1, 1, 2, 1, 0, 2, 2, 2, 0, 2, 3, 1, 2, 3, 0, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 3, 0, 1, 2, 0, 1, 1, 3, 0, 4, 3, 2, 1, 3, 3, 3, 2, 2, 2, 0, 2, 4, 2, 3, 4, 4, 2, 1, 1, 1, 1, 2, 2, 0, 4, 1, 0, 0, 3, 0, 4, 3, 0, 3, 2, 1, 3, 3, 1, 4, 4, 2, 1, 3, 2, 3, 2, 1, 1, 2, 3, 1, 3, 1, 0, 4, 1, 4, 1, 4, 0, 3, 0, 3, 1, 3, 1, 2, 1, 2, 2, 0, 1, 0, 0, 4, 3, 4, 2, 1, 2, 1, 0, 2, 1, 1, 4, 1, 1, 1, 0, 3, 3, 4, 4], [0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 0, 1, 1, 2, 2, 1, 1, 1, 0, 1, 0, 2, 0, 1, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 2, 1, 2, 0, 1, 0, 1, 0, 0, 1, 2, 1, 2, 1, 1], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [4, 0, 3, 0, 2, 0, 1, 5, 2, 4, 2, 0, 5, 3, 5], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [4, 2, 3, 4, 4, 4, 2, 0, 2, 4, 4, 2, 1, 2, 0, 2, 1, 2, 4, 0, 0, 4, 2, 0, 4, 4, 4, 1, 2, 4, 2, 2, 4, 2, 0, 1, 1, 1, 4, 0, 4, 2, 4, 3, 2, 3, 2, 4, 2, 1, 2, 4, 2, 1, 4, 1, 2, 2, 4, 0, 2, 2, 0, 4, 4, 1, 1, 4, 0, 2, 1, 2, 0, 2, 0, 4, 0, 4, 1, 3, 3, 1, 2, 1, 2, 4, 0, 2, 2, 2, 4, 2, 2, 1, 4, 2, 4, 4, 1, 4, 4, 4, 4, 1, 4, 4, 1, 0, 4, 1, 4, 4, 1], [3, 2, 2, 0, 1, 2, 1, 3, 2, 0, 1, 1, 1, 1, 0, 2, 3, 1, 1, 1, 3, 0, 2, 1, 3, 0, 1, 3, 3, 2, 1, 1, 3, 0, 1, 1, 1, 3, 1], [5, 4, 2, 2, 0, 2, 3, 5, 1], [2, 2, 1, 2, 1, 0, 2, 1, 2, 0, 2, 2, 2, 2, 0, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 0, 2, 0, 1, 1, 2, 2], [2, 2, 1, 0, 3, 2, 1, 2, 0, 1, 2, 1, 3, 1, 0, 0, 2, 1, 1, 3, 1, 2, 3, 0, 3, 0, 0], [3, 11, 12, 24, 20, 14, 22], [22, 19, 24, 7, 6, 6, 6, 14], [5, 3, 7, 2, 0, 2, 3], [11, 12, 1, 12, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 1, 9, 1, 3, 5, 4, 0, 0, 89, 89, 92, 0, 382, 101, 107, 50, 51, 15, 27, 0, 113, 39, 9, 33, 27, 7, 8, 7, 5], "tree_depth": 91, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( ( i0 \\l i1 or ( b2 and ( (getCharFromString(in1[max(divInt(divInt(min(int(5.0), len(saveChr(( i0 + i2 ))[:min(max(abs(mod(int(6.0),min(( i2 * max(max(( i2 + ( int(3.0) - len(\"\"5\"\"[int(7.0):].capitalize()) ) ), min(i2, mod(mod(saveOrd(s0[:( ( int(2.0) * int(4.0) ) + len(\"\"3\"\"[( int(7.0) - int(5.0) ):i0]) )]),divInt(abs(( int(4.0) * i0 )),mod(i2,max(i0, len(saveChr(int(4.0))[int(5.0):]))))),i1))), len(in0)) ), len(s0)))), divInt(abs(divInt(i1,( i1 + abs(i1) ))),divInt(divInt(int(5.0),int(6.0)),i0))), ( i0 - divInt(i2,abs(i2)) ))])),min(abs(saveOrd(s2[:divInt(abs(len(getCharFromString(saveChr(int(2.0)), int(1.0)).capitalize())),( i1 + mod(int(1.0),i2) ))].rstrip(\"\"w\"\"))), i0)),saveOrd(saveChr(( saveOrd(saveChr(i0)[i1:][int(2.0):abs(mod(( mod(int(1.0),int(6.0)) - max(i1, int(7.0)) ),i0))]) - i1 ))[i1:])), i0):], max(int(2.0), mod(i2,mod(max(int(4.0), int(1.0)),int(4.0))))).capitalize().capitalize() + s0[divInt(int(3.0),max(i2, mod(abs(divInt(int(5.0),abs(i1))),min(int(7.0), i0)))):])[( saveOrd(\"\"D\"\") * i2 ):].strip(\"\"(7t\"\") in \"\"2Ly0h\"\" or saveChr(int(628.0)).endswith(s1) ) ) ) and getCharFromString(((\"\")\"\"[:divInt(max(int(1.0), ( i1 * mod(min(min(len(saveChr(int(8.0))[:int(1.0)]), divInt(min(( divInt(i2,( saveOrd(\"\"g\"\"[:( len(saveChr(min(int(7.0), len(\"\"M\"\")))) - abs(i0) )]) - divInt(i1,i2) )) - i1 ), max(int(2.0), i1)),len(saveChr(divInt(( i1 + ( len(in2) - int(1.0) ) ),( int(0.0) + mod(max(( saveOrd(s2[:( int(5.0) * divInt(i2,mod(saveOrd(getCharFromString(\"\"Y\"\", abs(( int(7.0) + max(int(5.0), divInt(int(5.0),len(\"\"2\"\"))) ))).strip()),i1)) )][i0:]) - i2 ), abs(i0)),len(in1.capitalize())) )))[i1:][( i0 * int(2.0) ):]))), abs(i1)),max(int(3.0), int(8.0))) )),i2)].strip()[( mod(int(2.0),max(( abs(len(\"\"g\"\"[:( int(0.0) + max(i2, ( len(s2[int(7.0):]) * mod(i2,i2) )) )])) + i2 ), max(min(saveOrd(s0[int(6.0):]), int(0.0)), int(3.0)))) - i1 ):( i1 + max(saveOrd(saveChr(( int(2.0) + i2 ))), ( i1 + ( max(saveOrd(in2), divInt(( min(i0, ( int(6.0) + ( int(1.0) + int(4.0) ) )) - len(\"\"g\"\".lstrip()) ),mod(min(i0, ( int(5.0) * i0 )),divInt(mod(i1,i1),i0)))) - mod(i1,i0) ) )) )] + ((\"\"\\\\\\n\"\" + \"\"o\"\"[:( len(getCharFromString(in0, max(int(3.0), len(saveChr(i1)[:int(8.0)][( int(5.0) * ( max(divInt(int(8.0),( i1 + i1 )), abs(i2)) - ( divInt(max(i1, i0),int(5.0)) + abs(( abs(int(6.0)) - divInt(int(7.0),min(max(min(( int(1.0) + i1 ), i2), min(saveOrd(\"\"3\"\"[int(4.0):][:divInt(i0,len(\"\")\"\".capitalize().lstrip(saveChr(divInt(i1,i0)))[saveOrd(saveChr(int(4.0))):].strip()))]), abs(int(9.0)))), max(int(8.0), i2))) )) ) ) ):int(1.0)][int(5.0):])))[i0:abs(i0)]) + mod(divInt(i0,max(min(abs(int(6.0)), ( i1 - i1 )), i2)),divInt(int(2.0),int(9.0))) )]) + getCharFromString(\"\"U\"\", mod(i0,int(4.0))).strip(saveChr(max(max(saveOrd(saveChr(int(7.0))), max(mod(( max(i1, i1) * max(int(7.0), ( int(9.0) - int(9.0) )) ),min(len(\"\"<\"\"), len(in2))), int(7.0))), int(8.0))))))[int(811.0):] + saveChr(( int(3.0) * i1 ))).capitalize()[( ( mod(i0,divInt(saveOrd(\"\"O\"\"),int(1.0))) - mod(saveOrd(saveChr(i0).rstrip()),int(92.0)) ) - int(667.0) ):], i1).startswith(\"\"W\"\") )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [0, 0, 1], [], [0, 0, 2], [], [0, 0], [], [], [2, 1], [4], [2, 1], [0], [0], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 0, 1, 3, 7, 9, 0, 9, 8, 1, 4, 1, 1, 3, 9, 8, 5, 4, 7, 8], [0, 2, 2, 0, 0, 2, 2, 1, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 0], [], [1, 3, 2, 0, 0, 2, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 2, 0, 2, 3, 3, 3, 2, 3, 0, 2, 3, 3, 3, 2, 1, 2, 1, 3, 3, 3, 1, 3, 0, 2, 3, 0, 2, 0, 0, 3, 0, 3, 3, 2, 3, 3, 1, 3, 2, 0, 3, 1, 0, 1, 1, 2, 2, 3, 0, 0, 0, 1, 2, 2, 1, 3, 2, 3, 0, 3, 1, 0, 2, 3, 1, 2, 1, 3, 1, 2, 1], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 3, 0, 1, 0, 4, 3, 1, 3, 0, 0, 3, 3, 2, 1, 2, 1, 1, 3, 2, 0, 2, 1, 0, 2, 2, 3, 3], [0, 1, 0, 2, 2, 2, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1], [2, 2, 3, 0, 2, 4, 0, 2, 5, 0], [1, 1], [], [4, 4, 4, 0, 4, 1, 1, 2, 2, 2, 2, 2, 4, 0, 1, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 1, 0, 0, 0, 1], [5], [1, 2, 0, 1, 0, 0, 2], [3, 0], [24], [], [0], [31]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 2, 0, 12, 2, 3, 1, 1, 1, 1, 0, 6, 4, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = getCharFromString(saveChr(int(9.0)), min(( i0 + i2 ), divInt(int(2.0),len(getCharFromString(s2, min(int(0.0), int(1.0))))))) in getCharFromString(\"\"`\"\", int(3.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1], [8, 6, 3, 0], [0, 0], [1], [3, 3, 3, 1, 2, 1, 3, 3, 3, 0, 3, 1, 1], [1], [1, 1, 0, 3, 3, 1, 1], [2], [1], [], [1, 1], [], [1, 1], [], [], [], [3, 0], [10], [], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 1, 13, 1, 7, 1, 1, 0, 2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= max(max(min(int(8.0), mod(int(6.0),len(\"\"&\"\"))), len(\"\"K\"\")), max(i0, max(int(3.0), int(0.0))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 1, 1], [], [2, 0, 0, 0], [], [0], [], [], [1, 0, 2], [1], [1, 2, 2], [0], [4, 4], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 7, 0, 4, 4, 1, 8, 3, 6, 7, 9, 2, 6, 1, 2, 8, 7, 6, 3, 8, 0, 8, 6, 2, 4, 7, 7, 5, 3, 7, 7, 2, 6], [0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 1, 0, 1, 0, 0, 2, 2, 0, 0, 0, 1, 2, 2, 0, 1, 2, 0, 1, 2, 0, 2], [], [2, 3, 3, 2, 1, 2, 1, 0, 1, 3, 3, 3, 2, 1, 1, 1, 1, 0, 3, 3, 3, 3, 3, 2, 2, 1, 0, 2, 0, 2, 2, 2, 0, 0, 2, 2, 3, 0, 1, 0, 0, 2, 2, 3, 0, 2, 3, 3, 2, 3, 2, 0, 0, 3, 3, 3, 0, 2, 1, 3, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 2, 3, 0, 0, 3, 1, 2, 1, 0, 0, 2, 0, 2, 2, 0, 1, 3, 3, 0, 1, 2, 1, 0, 2, 2, 3, 0, 1, 2, 2, 3, 2, 1, 1, 2, 1, 3, 1, 1, 0, 3, 3, 2, 2, 1, 2, 0, 1, 3, 0, 1, 1, 3, 1, 0, 1, 1, 1, 0, 3, 1, 0, 0, 3, 1], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 3, 3, 1, 3, 3, 0, 3, 4, 2, 2, 0, 1, 3, 2, 4, 2, 3, 2, 0, 1, 0, 3, 2, 3, 3, 3, 0, 0, 3, 4, 4, 0, 2, 4, 3], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 2, 2], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 4, 1, 5, 4, 1, 3, 1, 0, 2, 0, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [], [4, 4, 4, 0, 1, 2, 1, 4, 2, 2, 4, 1, 0, 4, 4, 2, 1, 4, 0, 2, 0, 4, 2, 1, 4, 0, 4, 1, 0, 0, 0, 4, 2, 0, 2, 1, 2, 2, 4, 2, 0, 2, 2, 0, 0, 2, 2, 2, 0, 4, 4, 1, 1, 0, 2, 0, 4, 4, 2, 2, 4, 2, 4, 1, 1, 1, 4, 0, 4, 0, 1], [3, 1, 3, 3, 0, 1, 3, 0, 3, 2, 2, 3, 0, 1, 3, 3, 2, 1, 0, 3], [1, 3, 3, 4, 3, 3, 2, 5, 2], [2, 2, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 2, 2, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0], [0, 1, 0, 2, 1, 2, 2, 2, 0, 2, 0, 2, 1], [19, 13, 21, 1, 25], [3, 13], [5, 9, 6, 9, 7], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 0, 4, 0, 0, 0, 0, 3, 1, 3, 1, 2, 0, 0, 0, 0, 28, 28, 28, 0, 122, 36, 30, 16, 20, 14, 9, 0, 53, 15, 7, 16, 9, 3, 2, 4, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = saveChr(mod(len(s0.lstrip(\"\"T\"\")),len(\"\"d\"\"[divInt(int(1.0),divInt(int(6.0),i0)):]))).rstrip()\\nb1 = int(7.0) \\g len(getCharFromString(\"\"N\"\", max(len(s0), divInt(int(0.0),int(4.0))))[:int(4.0)][int(1.0):].lstrip(saveChr(i0)))\\nb0 = \"\"5\"\"[len(getCharFromString(s1, min(len(s1[:saveOrd(\"\"n\"\"[:abs(divInt(( int(8.0) + i0 ),divInt(i0,( mod(( i1 + i1 ),divInt(( abs(i2) - int(3.0) ),i2)) + i2 ))))].lstrip(in1.capitalize()))]), mod(mod(min(i2, ( max(len(\"\"9\"\".capitalize()), mod(abs(divInt(i1,i0)),saveOrd(s1))) - abs(len(in2)) )),i1),( int(6.0) - abs(i0) ))))):].rstrip(in1).startswith(s1[:( min(int(7.0), i0) + int(9.0) )].lstrip(\"\"6\"\"[int(2.0):i2]))\\nb2 = getCharFromString(in0[:mod(( mod(max(i2, i0),min(int(6.0), ( int(1.0) - i0 ))) - i0 ),mod(i1,divInt(( i2 + int(2.0) ),len(s1[abs(i2):][:int(8.0)]))))], divInt(int(7.0),i0))[:( ( len(s0) - i1 ) + int(6.0) )][:( ( len(s2[( int(3.0) + int(8.0) ):divInt(int(0.0),len(saveChr(int(8.0))))][:int(6.0)][i2:]) + min(min(( mod(int(2.0),mod(i0,int(4.0))) * len(\"\"9\"\".strip()) ), i1), int(7.0)) ) * int(7.0) )].startswith(\"\"V\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 1, 2, 0, 2, 1, 0], [2, 1, 1], [1, 0, 1, 2, 0], [], [0, 0, 0], [], [], [0, 0], [4], [2, 1, 0, 2, 2], [0], [3, 1, 4], [1], [], [1], [0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 5, 7, 9, 4, 3, 8, 4, 7, 7, 5, 2, 3, 1, 4, 8, 4, 0, 9, 6, 4, 0, 0, 2, 2, 0, 6, 2, 5, 4, 3], [2, 0, 2, 0, 1, 1, 0, 0, 2, 0, 1, 1, 0, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 1, 0, 2], [1, 1], [0, 1, 2, 0, 3, 1, 0, 2, 3, 2, 1, 0, 2, 2, 3, 1, 3, 3, 1, 3, 3, 2, 1, 1, 0, 2, 0, 2, 3, 2, 3, 0, 0, 0, 1, 3, 1, 2, 2, 2, 0, 2, 3, 2, 0, 1, 0, 3, 3, 0, 3, 1, 2, 1, 3, 0, 1, 0, 3, 3, 3, 1, 3, 1, 1, 3, 1, 2, 0, 0, 1, 0, 2, 3, 1, 1, 2, 1, 3, 2, 3, 1, 2, 3, 3, 3, 3, 0, 0, 3, 1, 0, 2, 3, 0, 1, 3, 3, 3, 0, 1, 0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 4, 3, 1, 4, 3, 3, 3, 4, 1, 4, 3, 3, 1, 3, 2, 4, 0, 1, 2, 3, 1, 4, 0, 1, 2, 3, 3, 2, 3, 3, 4], [1, 2, 0, 1, 1, 1, 1, 1, 2, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [2, 1, 0, 3, 0, 4, 2, 4, 4, 0, 0, 2, 5, 4, 0, 1, 5, 3, 1, 3, 2], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1], [], [0, 4, 4, 4, 3, 0, 3, 2, 3, 1, 3, 1, 2, 0, 3, 1, 2, 2, 4, 1, 0, 0, 2, 2, 0, 2, 4, 1, 0, 1, 4, 3, 3, 0, 0, 1, 2, 1, 2, 0, 2, 2, 4, 1, 3, 3, 0, 3, 1, 2, 0, 1, 2, 3, 3, 1, 2, 4, 4, 2, 0, 4, 0, 2, 0, 1, 0, 3, 3, 0, 3, 3, 1, 1, 1, 1, 3, 1, 1, 1, 0, 3, 4, 3, 2, 4, 0, 2, 4, 4, 4, 4, 1, 0, 1, 1], [0, 2, 2, 3, 0, 1, 1, 0, 3, 2, 1, 0, 0, 2, 3, 1], [5, 2, 4], [0, 0, 1, 1, 1, 0, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 1, 1], [3, 1, 1, 0, 1, 3, 0, 3, 1, 1, 1, 3, 3, 2, 2, 3, 3, 3, 2, 1, 0, 2, 2, 0, 0, 3, 1, 0, 0, 0, 3, 1, 1, 3, 3, 1], [19, 11, 25, 3, 17, 19, 21, 22], [8, 17, 17, 4, 23, 6, 8, 11, 15, 13, 7], [3, 2, 3, 5, 3], [20, 14, 11, 8, 25, 21, 10, 1, 14, 4, 17, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 3, 5, 0, 3, 0, 0, 2, 1, 5, 1, 3, 1, 0, 1, 2, 32, 32, 26, 2, 102, 21, 32, 11, 12, 21, 36, 0, 96, 16, 3, 18, 36, 8, 11, 5, 12], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i0\\nloopBreak% = 0\\nwhile s2 != getCharFromString((s1 + ((\"\";\"\" + (\"\"ir\"\" + s0[int(1.0):mod(i2,max(int(1.0), i0))]))[mod(saveOrd((\"\"T\"\" + \"\"r\"\".strip(in0)[:divInt(int(5.0),i1)][:( ( len(s0) * int(7.0) ) + max(saveOrd(in1[int(9.0):len(getCharFromString(\"\"+\"\", len(s2))[( int(4.0) - int(3.0) ):])][:i1]), divInt(i0,( len(\"\"L\"\") - ( saveOrd(saveChr(i0)) - i2 ) ))) )])),i0):int(8.0)] + ((in1 + in1) + \"\"(\"\"))).capitalize().capitalize(), max(int(4.0), ( ( ( i1 - divInt(saveOrd(\"\"e\"\"[mod(i1,int(7.0)):i0]),len(s0[len(saveChr(i2)[max(int(7.0), mod(int(5.0),len(\"\"x\"\"))):i0][:int(2.0)]):])) ) - i2 ) * abs(saveOrd(((s0 + (\"\"g\"\" + s2[:min(int(3.0), max(int(1.0), int(4.0)))])) + \"\"%@\"\"))) ))):{:\\nb0 = abs(int(8.0)) \\le mod(i0,i1)\\nif False:{:\\ni0 += int(40964.0)\\n:}\\nif ((\"\"32<\"\" + getCharFromString(in2[i0:divInt(len(in1.capitalize()),int(0.0))].strip(), int(02.0))[( int(20.0) + max(mod(saveOrd(s0[:int(6.0)]),mod(min(max(abs(len(\"\"\"\\\\\"\"\")), i1), i0),len(s1))), int(2.0)) ):]) + ((in2 + ((\"\"\\\\\\n\"\" + \"\"3iZ5\"\") + \"\"3\"\")) + \"\"DR+\"\"))[i1:divInt(abs(i1),int(54.0))] not in (\"\"lT\"\" + \"\"V\"\"):{:\\nin0 = \"\"W\"\"\\nb0 = s1.startswith((saveChr(len((getCharFromString(in0, len(getCharFromString(saveChr(saveOrd(\"\"!\"\")).rstrip(s2).capitalize(), i0)[:int(3.0)]))[:i2] + \"\"p\"\"))) + \"\"n.&h\"\"))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 0, 0], [0], [0, 0, 1], [0], [0, 0], [], [], [0, 3], [], [2, 0, 0], [], [3], [2, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [8, 1, 5, 0, 7, 6, 2, 7, 6, 3, 0, 4, 3, 2, 8, 6, 4, 8, 5, 6, 0, 8, 9], [1, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 1, 2, 0, 2, 2, 0, 2, 0], [1], [1, 2, 3, 3, 0, 2, 3, 2, 3, 0, 3, 0, 2, 0, 3, 0, 3, 1, 2, 3, 1, 1, 1, 2, 3, 0, 3, 3, 0, 0, 3, 2, 1, 1, 0, 1, 2, 2, 2, 2, 3, 3, 0, 2, 1, 3, 1, 0, 3, 2, 1, 2, 1, 1, 2, 3, 0, 1, 1, 1, 1, 3, 3, 3, 0, 2, 2, 1, 2, 1, 2, 2, 3, 0, 0, 0, 0, 3, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 4, 1, 2, 3, 4, 1, 3, 0, 1, 1, 1, 1, 0, 2, 4, 0, 1, 0, 4, 1, 0], [2, 1, 2, 0, 1, 2, 1, 0, 2, 2, 1, 0, 2, 1], [1, 0, 0, 0, 0, 0, 0], [2, 5, 5], [1, 1, 1, 1, 1, 1, 1, 1], [0], [1, 1, 2, 4, 1, 1, 1, 4, 2, 3, 0, 2, 1, 4, 2, 1, 2, 0, 1], [3, 1, 2], [5], [2, 0, 0, 0, 0], [2, 1, 2, 3, 3, 1, 2, 0], [10], [1, 23], [4, 6, 4], [1, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 2, 0, 3, 0, 1, 2, 0, 1, 0, 23, 23, 19, 1, 81, 20, 22, 14, 7, 3, 8, 1, 19, 3, 1, 5, 8, 1, 2, 3, 2], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in \"\"4\"\":{:\\nb0 = \"\"b\"\" != \"\"6\"\".strip(\"\"\\\\\\n\"\")[int(8.0):]\\nres0 = not True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= ( min(saveOrd(\"\"*\"\"), i0) - mod(max(( abs(i2) * len(saveChr(i1)) ), ( i0 + saveOrd((in2 + \"\"x\"\"[i2:max(int(1.0), ( len(\"\"4\"\"[int(5.0):int(0.0)].capitalize()) - int(7.0) ))])[( min(i1, max(max(i1, i1), max(( int(6.0) * int(2.0) ), i1))) - int(7.0) ):divInt(( divInt(( max(min(i1, divInt(int(6.0),abs(int(3.0)))), i1) + saveOrd(in2[( int(0.0) * ( int(4.0) * int(3.0) ) ):divInt(min(i2, int(2.0)),int(8.0))]) ),int(6.0)) - int(4.0) ),max(min(saveOrd(\"\"K\"\"), i0), ( ( int(8.0) + divInt(int(5.0),( divInt(max(i2, i2),i0) * i2 )) ) - min(int(6.0), i0) )))]) )),int(089.0)) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [2, 1, 2, 0, 1, 1, 2, 2, 1, 0, 1], [1, 2, 2, 0], [1, 2, 1, 0, 2, 1, 1], [0], [0, 0], [], [], [3], [5], [2, 1, 0, 2, 2, 0, 2], [0], [4, 4, 5, 4], [3, 2], [1], [], [1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 5, 5, 9, 0, 8, 0, 0, 4, 0, 8, 4, 5, 9, 3, 9, 0, 5, 8, 2, 5, 6, 6, 9, 1, 2, 1, 8, 1, 0, 7, 7, 0, 6, 7, 2, 5, 3, 6, 1, 7, 1, 8, 2, 2, 4, 8, 2, 5, 8, 0, 8, 9, 1, 5], [1, 1, 2, 0, 1, 2, 0, 2, 0, 2, 0, 1, 1, 0, 2, 1, 2, 2, 0, 0, 1, 1, 1, 2, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 0, 2, 0, 1, 1], [1, 0, 0, 0], [0, 2, 0, 1, 3, 3, 0, 0, 0, 0, 2, 0, 0, 0, 3, 2, 3, 3, 2, 3, 3, 0, 0, 2, 2, 2, 0, 0, 2, 3, 1, 2, 3, 1, 1, 3, 0, 3, 3, 3, 3, 0, 1, 0, 3, 2, 3, 2, 2, 0, 3, 2, 0, 3, 2, 3, 2, 1, 3, 1, 1, 1, 2, 0, 2, 1, 1, 3, 2, 1, 1, 3, 3, 3, 2, 3, 1, 0, 0, 2, 2, 1, 0, 2, 2, 1, 1, 1, 3, 0, 0, 3, 1, 2, 1, 3, 1, 3, 3, 0, 2, 3, 0, 3, 1, 2, 3, 1, 1, 0, 2, 3, 3, 1, 0, 3, 3, 0, 3, 3, 3, 1, 2, 3, 1, 0, 1, 0, 3, 1, 2, 2, 2, 2, 0, 2, 3, 1, 2, 1, 2, 2, 3, 3, 2, 1, 1, 0, 3, 2, 2, 1, 2, 2, 2, 1, 0, 0, 2, 0, 0, 2, 3, 3, 3, 1, 2, 2, 1, 0, 3, 1, 0, 1, 0, 3, 1, 1, 0, 3, 2, 2, 2, 3, 1, 0, 0, 3, 1, 1, 3, 2, 0, 3, 0, 0, 1, 1, 1, 0, 2, 2, 2, 0, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 1, 3, 3, 3, 0, 1, 2, 3, 2, 2, 1, 3, 1, 3, 1, 3, 0, 3, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 3, 0, 0, 0, 0, 4, 2, 4, 1, 1, 1, 2, 1, 3, 4, 4, 2, 0, 1, 3, 4, 3, 1, 1, 3, 4, 4, 0, 3, 3, 2, 3, 3, 1, 0, 3, 3, 0, 2, 2, 3, 0, 1, 3, 4, 2, 3, 2, 1, 1, 3, 0, 0, 3, 3, 0, 2, 4, 4, 3], [0, 1, 1, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1, 0, 1, 2, 2, 2, 2, 1, 0, 1, 2, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [5, 1, 3, 2, 4, 0, 4, 2, 4, 4, 0, 5, 1, 1, 2, 3, 2, 3, 4, 3, 0, 0, 4, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [2, 4, 3, 3, 2, 0, 4, 2, 0, 0, 2, 2, 4, 1, 2, 0, 4, 0, 0, 2, 4, 2, 0, 1, 2, 0, 2, 2, 1, 2, 0, 1, 4, 2, 1, 0, 2, 4, 1, 1, 4, 4, 0, 1, 1, 4, 1, 1, 0, 0, 4, 3, 4, 3, 4, 2, 2, 2, 2, 1, 1, 4, 0, 4, 2, 0, 4, 2, 1, 2, 0, 0, 0, 2, 2, 4, 2, 2, 0, 2, 1, 4, 2, 4, 4, 2, 0, 1, 2, 1, 0], [1, 0, 1, 2, 3, 2, 1, 3, 3, 2, 2, 0, 3, 0, 1, 0, 1, 3, 2, 1], [1, 1, 0, 0, 3], [1, 1, 2, 0, 0, 0, 2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 0, 0, 0, 1, 0, 2, 1, 1, 0, 2, 0, 2, 1], [0, 3, 0, 3, 2, 1, 1, 3, 2, 2, 2, 3, 0, 3, 1, 1, 0], [4, 6, 23, 4], [3, 11, 6, 8], [6, 0, 3, 9], [16, 4, 9, 10, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 4, 7, 1, 2, 0, 0, 1, 1, 7, 1, 4, 2, 1, 0, 1, 56, 56, 61, 4, 235, 59, 64, 25, 35, 24, 17, 1, 91, 20, 5, 29, 17, 4, 4, 4, 5], "tree_depth": 68, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveChr(i1)[:( i1 + int(44.0) )].startswith(((in2[:max(min(i2, i0), i1)] + getCharFromString(s1[i2:], divInt(i0,i2))) + in0)):{:\\ni0 -= i2\\n:}else:{:\\nloopBreak% = 0\\nwhile min(( min(len(saveChr(mod(min(min(i0, i1), mod(( ( i1 - i0 ) * ( min(int(5.0), ( min(int(5.0), int(9.0)) + saveOrd(\"\"E\"\") )) * i2 ) ),abs(saveOrd(s2[max(max(i1, int(0.0)), i2):max(( abs(mod(divInt(i2,max(mod(i0,len(in1.capitalize())), divInt(saveOrd(s0),( int(8.0) * saveOrd(in1[int(0.0):].rstrip()[int(0.0):]) )))),int(4.0))) - divInt(i0,divInt(int(0.0),int(8.0))) ), abs(divInt(int(4.0),int(5.0))))])))),min(max(len(\"\"-\"\"), mod(saveOrd(s2[int(9.0):]),i1)), i1)))[mod(divInt(int(3.0),i1),mod(divInt(int(9.0),int(0.0)),int(5.0))):len(\"\"G\"\"[:i2][:i0])][max(int(8.0), ( int(2.0) * max(int(5.0), len(in1[saveOrd(\"\"!\"\"):])) )):i2]), divInt(saveOrd(\"\"6\"\"[:i2].capitalize()),min(int(6.0), ( len(in1) + int(6.0) )))) + int(9.0) ), i2) != ( len(saveChr(abs(int(1.0)))[:i2]) + len(\"\"d\"\") ):{:\\ns0 = \"\"l\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = len(in2.lstrip().rstrip())\\nres0 = ( \"\"&\"\".startswith(\"\"0\"\") or \"\"3\"\".capitalize().endswith(\"\"9\"\") )\\nloopBreak% = 0\\nwhile not s1.startswith(s1):{:\\nloopBreak% = 0\\nfor s2 in (getCharFromString((\"\"\"\\\\\"\"\"[i0:max(min(len(\"\"X\"\"), int(2.0)), divInt(len(getCharFromString(in0, int(1.0))),i2))][int(8.0):i2][min(int(1.0), ( divInt(mod(( i2 - ( abs(int(0.0)) + ( int(7.0) - ( divInt(abs(len(saveChr(( int(7.0) * int(0.0) )))),i2) * min(mod(divInt(int(6.0),( ( divInt(int(7.0),i1) * i1 ) * ( i1 - i0 ) )),divInt(max(len(s2[saveOrd(getCharFromString(\"\"<\"\"[:int(2.0)], mod(divInt(int(5.0),i0),abs(int(3.0))))):i0]), int(6.0)),i0)), len(in0[int(1.0):int(7.0)])) ) ) ) ),i0),abs(mod(divInt(mod(max(int(1.0), i2),i0),max(int(8.0), int(2.0))),len(in1)))) + ( i1 - min(i0, i0) ) )):][:int(2.0)].lstrip() + in0), int(4.0)) + saveChr(int(8.0))[:i2][mod(mod(( i0 * ( divInt(i2,mod(i1,int(2.0))) + i1 ) ),i2),i0):]).capitalize():{:\\ns0 = s0[int(5.0):i0][:int(8.0)]\\ni0 = min(len(\"\"g\"\"[len(saveChr(i2).capitalize()[int(0.0):mod(min(divInt(( int(8.0) - abs(int(9.0)) ),saveOrd(in1[int(1.0):])), saveOrd(\"\"i\"\")),i0)].lstrip(\"\"E\"\"[:len(s0)])):]), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = i1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1], [2, 1, 0, 1], [2], [2, 1, 1], [], [0], [], [], [], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 1, 0, 0, 1], [3, 7, 7, 4, 7, 5, 1, 7], [2, 0, 2, 2, 0, 1], [1, 0], [1, 0, 0, 1, 3, 3, 0, 3, 1, 0, 1, 1], [], [1, 3, 3], [0], [], [5, 3], [0, 1, 0, 1], [], [4, 2, 4, 4, 2, 1, 2, 1, 2, 0], [2, 1, 3], [5], [2, 2, 1, 0], [1, 1, 2, 3], [], [3, 11], [7], [5]], "fitness": 9223372036854775807, "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(3.0) \\g i2:{:\\nin2 = saveChr(i0)[int(7.0):].capitalize()\\ni2 += max(len(\"\"dl\"\"[i2:].strip(\"\"7\"\"\"[:len(in0[int(7.0):i0])])), int(47.0))\\ni1 = int(517.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 6, 2, 12, 0, 3, 1, 0, 2, 4, 0, 10, 3, 1, 4, 4, 0, 2, 1, 1]}]