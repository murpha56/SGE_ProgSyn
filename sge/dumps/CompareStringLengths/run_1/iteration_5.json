[{"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(int(5.0),min(i2, ( divInt(( int(7.0) + i0 ),divInt(len(saveChr(( i1 + ( min(divInt(int(2.0),i2), ( max(int(1.0), i1) * int(7.0) )) - int(7.0) ) ))),i2)) + i0 ))):divInt(int(9.0),abs(int(8.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 38, 11, 8, 5, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(( i2 * min(max(( int(7.0) - i1 ), divInt(abs(int(7.0)),i2)), int(1.0)) ))),int(7.0))) + i0 )) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 9, 8, 5, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 10, 1, 3, 0, 1, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[:int(7.0)][int(7.0):i0][mod(i2,int(5.0)):abs(int(2.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 12, 2, 5, 0, 2, 7, 0, 1, 10, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i1:abs(min(mod(i1,int(0.0)), mod(int(7.0),len(in1[i1:]))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 6, 0, 16, 3, 4, 2, 1, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(\"\"R\"\"[i0:int(0.0)], abs(( i2 + int(7.0) )))[mod(i2,min(i0, ( i2 + i2 ))):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 1, 5, 0, 1, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[abs(int(7.0)):], i0)[mod(i2,int(7.0)):min(int(5.0), len(saveChr(i2)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i0:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 4, 0, 3, 4, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 0, 1, 4, 1, 1, 0], [3, 0, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 3, 0, 0, 7, 0, 1, 12, 3, 2, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], len(in1.lstrip())).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i0:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 12, 3, 2, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + i2 ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[int(0.0):i0].rstrip()[abs(i2):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 0, 1], [2, 1, 1, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 3, 2, 1, 0, 0, 1, 3, 3, 1, 0, 2, 2, 2, 0, 3, 3, 2, 1, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 3, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [0, 3, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 13, 2, 4, 0, 2, 8, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in2\\nin1 = getCharFromString(in2[i0:i2], max(mod(i2,min(mod(int(0.0),i0), i1)), int(3.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 7, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[int(0.0):i0].rstrip()[abs(i2):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 0, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 8, 0, 33, 10, 8, 6, 4, 7, 1, 1, 14, 3, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(mod(i0,len(s0[( i2 + int(7.0) ):( int(7.0) + min(i0, divInt(( mod(int(5.0),i0) * ( len((\"\"R\"\" + in1).lstrip()) - ( i1 + min(max(divInt(int(7.0),int(7.0)), ( min(int(1.0), i2) * int(7.0) )), i1) ) ) ),i1)) )]))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), i0):]:{:\\nres0 = in1[int(7.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 167}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[abs(i0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [2, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 4, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[divInt(len(in1),int(0.0)):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(\"\"R\"\") != mod(int(0.0),i0) or True ) and in1 not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] not in s0[:mod(int(0.0),i0)].capitalize()[mod(i2,int(7.0)):( int(5.0) * abs(i2) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 6, 2, 1, 2, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( ( int(0.0) + i0 ) - int(7.0) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(len(in1)):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 2, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 0, 0], [], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), i0):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] not in s0[mod(int(0.0),i0):divInt(i2,int(1.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i0):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 10, 7, 7, 3, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i2:int(0.0)], len(saveChr(mod(i0,int(6.0)))))[divInt(int(5.0),min(i1, ( divInt(( len((\"\"R\"\" + in1.rstrip())) + i1 ),( min(( i0 + ( i1 * ( int(7.0) - i0 ) ) ), ( max(int(2.0), i1) + int(5.0) )) * int(7.0) )) - i1 ))):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 2, 0, 1, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0[len(saveChr(mod(int(07.0),i0))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 234}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(\"\"R\"\"):] not in in0[mod(int(0.0),mod(( i2 + int(7.0) ),divInt(int(5.0),abs(int(7.0))))):i2].capitalize()[divInt(divInt(int(6.0),i2),( min(( i0 + divInt(len(saveChr(( min(i1, mod(max(int(1.0), i2),int(7.0))) * int(7.0) ))),i1) ), i2) - divInt(int(9.0),abs(int(8.0))) )):max(i0, ( ( ( int(5.0) + int(0.0) ) * divInt(int(4.0),i0) ) - int(8.0) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 10, 0, 49, 16, 9, 7, 9, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 1, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 9, 0, 36, 10, 8, 5, 5, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(in1)] not in getCharFromString(s0[i0:abs(min(mod(i2,int(0.0)), mod(int(2.0),abs(i2))))], ( divInt(( int(7.0) + i0 ),divInt(min(divInt(i1,( max(( int(7.0) + i2 ), ( abs(i1) * int(2.0) )) - int(1.0) )), int(7.0)),i2)) + i0 ))[int(7.0):int(9.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 5, 0, 1, 10, 3, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in getCharFromString(saveChr(len(in0[i0:int(0.0)].rstrip()[:i2])), mod(i2,int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[i1:]) != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 1, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 4, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 12, 3, 2, 2, 1, 4, 0, 1, 11, 5, 2, 3, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = saveChr(len(in1[mod(i2,int(1.0)):( i2 + int(7.0) )].capitalize().lstrip())).rstrip()[( int(5.0) * i1 ):] not in saveChr(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 4, 0, 1, 8, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.rstrip()[abs(i0):] not in saveChr(int(7.0))[i2:mod(i2,int(7.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 1, 9, 0, 3, 0, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(getCharFromString(s1[i1:int(0.0)], abs(int(7.0)))[i2:int(5.0)][:i2])\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 1, 11, 2, 5, 0, 2, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1 not in s0\\ni0 = max(i2, abs(min(mod(i2,int(2.0)), mod(int(7.0),len(s0)))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 11, 2, 5, 1, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[abs(i0):]) != min(mod(int(0.0),int(7.0)), ( int(5.0) + len(s0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 1, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 2, 1, 7, 0, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(\"\"R\"\"):] not in \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 11, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 6, 0, 1, 8, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(in0)) not in s0[int(0.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 239}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 34, 10, 8, 6, 4, 7, 1, 1, 15, 4, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[len(in0):] not in saveChr(mod(i0,len(s0[( i2 + int(1.0) ):( int(7.0) + min(i0, divInt(( divInt(int(5.0),i0) * ( len((\"\"R\"\" + getCharFromString(in1, ( i1 - min(max(divInt(int(7.0),int(7.0)), ( min(int(1.0), i2) + int(7.0) )), i1) ))).lstrip()) * i1 ) ),i0)) )]))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 136}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 12, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[len(in0):] not in s0[:divInt(int(0.0),i0)].capitalize()[divInt(i2,int(7.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 136, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 14, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 8, 8, 8, 0, 33, 9, 8, 4, 5, 6, 1, 1, 10, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[i1:]) != int(0.0) or False ) and in0 not in getCharFromString(\"\"R\"\", abs(mod(i1,int(7.0))))[mod(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len(s0) + min(max(( divInt(divInt(int(8.0),i0),i2) * abs(int(1.0)) ), i1), int(7.0)) )) - int(7.0) ))):i1] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 265}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 3, 1, 0, 2, 0, 2, 0, 3, 1, 2, 1, 0, 3, 3, 0, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 0, 0, 1, 2, 1, 1, 0, 1, 3, 0], [0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 33, 7, 9, 3, 4, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(divInt(i2,int(0.0))))[( int(7.0) + min(min(( mod(min(int(5.0), i0),divInt(i1,divInt(i2,max(int(7.0), ( int(7.0) + i0 ))))) * abs(max(i2, int(1.0))) ), int(7.0)), int(7.0)) ):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 106}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 2, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 1, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = s1[mod(int(0.0),int(8.0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 226}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 11, 0, 53, 18, 10, 9, 9, 7, 0, 1, 10, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = (in1 + in0) not in s0[max(i0, mod(abs(( i2 + int(9.0) )),( int(7.0) + min(i2, ( mod(divInt(len(in1[i0:( min(( i1 * divInt(( divInt(int(5.0),i2) - divInt(max(int(7.0), i1),int(4.0)) ),int(1.0)) ), i2) + i0 )]),( int(7.0) * abs(int(7.0)) )),max(i0, ( ( mod(int(9.0),int(8.0)) - divInt(int(5.0),i2) ) - int(0.0) ))) * divInt(abs(int(4.0)),int(8.0)) )) ))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 1, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [3, 3, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 18, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 8, 2, 3, 1, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = len(in1[mod(i0,len(in0)):]) != ( i2 + int(1.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 234}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 0, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 2, 3], [1, 0], [2, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 8, 1, 3, 0, 1, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):].startswith(saveChr(i1)[i1:abs(mod(i2,i0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[i1:]) != int(0.0) or True ) and in0.endswith(\"\"R\"\") )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 0, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 14, 0, 51, 16, 9, 8, 8, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(in0)].endswith(getCharFromString(s0[i0:int(0.0)], max(mod(i2,int(7.0)), mod(( min(i2, divInt(( divInt(int(5.0),i0) + ( len(saveChr(( i1 + divInt(min(( i2 * i1 ), mod(max(int(7.0), i2),int(2.0))),int(1.0)) ))) - i0 ) ),i0)) + mod(int(7.0),abs(int(7.0))) ),max(i0, ( ( ( int(9.0) * int(8.0) ) - divInt(int(5.0),i2) ) - int(0.0) )))))[i2:i2])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = (s0 + in0) not in s0[max(i0, int(1.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[int(0.0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 1, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 12, 1, 34, 10, 8, 4, 6, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = i0 != int(08.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = max(mod(int(2.0),min(divInt(int(7.0),len(in1.capitalize())), i2)), ( divInt(( int(2.0) + i0 ),mod(min(( i0 * divInt(i1,i1) ), int(1.0)),i2)) * divInt(max(i0, i0),abs(( i2 - i2 ))) ))\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 3, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 0, 4, 0, 0, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):].startswith(getCharFromString(s0, i0)[i2:abs(min(i2, int(0.0)))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 0, 0, 2, 0, 5, 1, 2, 1, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( len(in1) + i0 ):]:{:\\nres0 = ( ( i2 != len(in1) or True ) and in0.startswith(s0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 12, 0, 49, 15, 10, 7, 8, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):].endswith(s0[mod(int(0.0),i0):mod(i2,abs(( int(7.0) + min(i2, i0) )))].capitalize()[divInt(divInt(int(5.0),i1),divInt(len(saveChr(( i2 + ( min(divInt(max(i1, ( abs(int(7.0)) * i2 )),int(6.0)), int(1.0)) - i0 ) ))),i0)):mod(int(7.0),max(int(7.0), min(i0, divInt(( ( int(9.0) + int(8.0) ) * ( int(5.0) - i1 ) ),int(0.0)))))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1], [1], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 4, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 3, 1, 0, 8, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (s0 + getCharFromString(in2[len(in1):], len(\"\"R\"\"))) not in saveChr(abs(i0))\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 0, 0, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 10, 0, 40, 10, 10, 6, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), i0):]:{:\\nres0 = in1[abs(min(mod(i1,int(0.0)), mod(int(2.0),len(in0)))):].startswith(getCharFromString(s0[i2:( divInt(( int(7.0) + i0 ),divInt(min(( i1 + ( max(( int(7.0) + int(2.0) ), ( abs(i2) - i1 )) + int(1.0) ) ), int(7.0)),i2)) * i0 )], int(7.0))[int(9.0):max(int(8.0), saveOrd(saveChr(i0)))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 4, 0, 1, 8, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[abs(len(in1[i0:].rstrip())):]:{:\\nres0 = in1 not in saveChr(i2)[abs(int(0.0)):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 3, 0, 12, 2, 5, 0, 2, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = ( ( max(i0, abs(min(mod(i2,int(2.0)), mod(int(7.0),len(s0))))) != i2 or True ) and in0 not in s0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 13, 1, 53, 17, 10, 8, 9, 7, 0, 1, 10, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):][max(i0, abs(min(mod(i2,int(2.0)), mod(int(7.0),len(in1))))):]:{:\\nres0 = in0 not in s0[i2:( divInt(( min(i0, divInt(max(( i1 + ( divInt(( int(5.0) + i2 ),divInt(abs(int(7.0)),i1)) * int(4.0) ) ), int(1.0)),i2)) - i0 ),mod(int(7.0),max(int(7.0), saveOrd(in1[i0:( ( ( int(9.0) + int(8.0) ) * divInt(int(5.0),i0) ) - int(0.0) )])))) - divInt(i1,int(4.0)) )]\\ni0 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 22, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in0),i0):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 230}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 23, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = len(in1) != i0\\ni2 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 235}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 24, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[saveOrd(s2):] not in \"\"R\"\"\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 254}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 26, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 6, 0, 1, 9, 1, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in0):]:{:\\nres0 = in1[len(in0):] not in s0.rstrip()[i0:i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 284}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 12, 2, 3, 1, 1, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, int(07.0))[i2:] not in in0[int(1.0):max(( i2 + int(7.0) ), mod(int(4.0),abs(i2)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 12, 2, 3, 0, 2, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, int(87.0))[i2:] not in in0[int(5.0):max(mod(i2,int(7.0)), mod(int(4.0),abs(i2)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 9, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 3, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 10, 0, 38, 11, 8, 5, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = in1[len(in0):] not in s0[divInt(int(0.0),i0):( i2 + int(7.0) )].capitalize()[( min(int(5.0), i2) + i0 ):mod(divInt(int(9.0),i1),divInt(min(( i2 * ( len(saveChr(divInt(min(i1, ( max(int(6.0), i2) - int(1.0) )),int(7.0)))) + i0 ) ), i0),divInt(int(7.0),abs(int(9.0)))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 1, 0, 2, 1, 1, 2, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 3, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 2, 0, 1, 0, 0, 0, 3], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 14, 14, 12, 0, 53, 17, 10, 9, 8, 7, 1, 1, 15, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(s1):]):][i1:]:{:\\nres0 = ( ( int(0.0) != abs(mod(int(7.0),int(5.0))) or True ) and in0[mod(int(7.0),min(i2, ( divInt(( int(8.0) + i1 ),( int(1.0) + len(s0[:i1]) )) * ( ( divInt(int(0.0),i0) - ( min(int(7.0), i2) + int(9.0) ) ) * max(i1, divInt(divInt(int(8.0),abs(int(5.0))),max(i1, ( ( ( int(0.0) - int(4.0) ) - mod(divInt(i2,int(8.0)),i2) ) * i2 )))) ) ))):] not in getCharFromString((\"\"R\"\" + saveChr(i1)), saveOrd(in1)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 388}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [0, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 12, 2, 3, 0, 2, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, int(07.0))[i2:] not in in0[int(5.0):max(divInt(i2,int(7.0)), mod(int(5.0),abs(i2)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 2, 0, 10, 1, 3, 0, 1, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, int(07.0))[i2:] not in in0[int(5.0):max(mod(i2,int(7.0)), abs(int(4.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 2, 2, 0, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 0, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1)):{:\\nres0 = in1[len(in0):] not in saveChr(i0)[int(0.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in s0[int(2.0):i0].rstrip()[abs(i2):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 8, 3, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 2, 1, 2, 0, 3, 0, 0, 0, 2, 2, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 12, 0, 34, 10, 7, 6, 4, 6, 1, 1, 11, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in getCharFromString(\"\"R\"\"[i0:int(0.0)], abs(divInt(divInt(int(7.0),( i1 + min(i2, i0) )),i2)))[mod(( i2 + ( len(s0) + ( i1 - ( i2 + divInt(int(8.0),i0) ) ) ) ),( min(int(3.0), i0) - max(int(2.0), i0) )):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 2, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 1, 3, 2, 2, 1, 2, 2, 1, 2, 1, 1, 0, 0, 3], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 4, 2, 0, 3, 0, 1, 2, 1, 3, 1, 2, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 18, 13, 0, 65, 21, 14, 12, 9, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(saveOrd(in1), ( int(1.0) + i0 )):]:{:\\nres0 = in1[( i2 + ( mod(int(7.0),abs(i2)) * min(mod(divInt(int(5.0),i0),( len(in0) - ( i1 + divInt(min(( max(i2, divInt(abs(int(7.0)),i1)) * int(6.0) ), int(1.0)),i2) ) )), i0) ) ):] not in s0[divInt(int(7.0),max(int(7.0), len(saveChr(i0)))):( ( ( int(9.0) - int(8.0) ) - mod(int(5.0),i0) ) * int(0.0) )].capitalize()[max(abs(int(4.0)), abs(divInt(mod(int(8.0),( ( int(59.0) + ( int(9.0) + int(2.0) ) ) - i2 )),i0))):len((\"\"R\"\" + in1.rstrip()))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 5, 7, 7, 1, 7, 7, 9, 8, 7, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 1, 2, 2, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 3, 1, 2, 2, 1, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 3, 2, 0, 1, 1, 1, 3, 2, 1, 1, 3, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 1, 0, 4, 0, 0, 1, 4, 4, 1, 3], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 4, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1[max(i0, i2):] not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 5, 0, 16, 3, 4, 1, 2, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[saveOrd(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(\"\"R\"\"[i0:int(07.0)], abs(mod(i2,int(5.0))))[divInt(i2,min(i2, ( i2 + int(7.0) ))):int(2.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 291}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 0, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 2, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 1, 3, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 2], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 0, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 3, 3, 2, 0, 8, 0, 3, 0, 0, 8, 0, 1, 12, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1.endswith(in0):{:\\nres0 = ( len(s0) != int(0.0) or ( getCharFromString(in1[int(7.0):len(saveChr(i0))], i2)[int(5.0):].endswith(s2) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 291}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 6, 0, 1, 8, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nres0 = in1[len(in0):] not in s0[i0:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0], [], [], [0, 2, 2], [5], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [1, 5, 2], [2, 2], [], [1, 3, 1, 0, 2, 1, 0, 1], [1], [0, 0], [], [0], [2, 5], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 7, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) != min(int(5.0), i2)\\ns2 = saveChr(divInt(int(2.0),i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [2], [2, 1], [], [0, 0], [], [], [], [], [2], [], [1], [], [], [], [], [], [], [1, 1], [0], [0], [], [], [], [], [3, 2, 5, 2], [], [], [4, 0, 0, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 4, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in0.capitalize() not in s2:{:\\nin2 = s2\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 7, 7, 12, 1, 34, 8, 8, 5, 3, 6, 1, 0, 15, 3, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[saveOrd(in2):] not in in1[len(in1):]:{:\\nres0 = ( i0 != i2 or ( in0[abs(i2):i0].rstrip()[int(0.0):mod(int(7.0),min(i1, ( ( divInt(int(1.0),i2) + ( len(saveChr(divInt(i1,max(max(( int(7.0) + i2 ), ( abs(int(2.0)) * i0 )), int(1.0))))) - int(7.0) ) ) + i0 )))].endswith((\"\"R\"\" + s0.lstrip())) and True ) )\\n:}else:{:\\ni0 = i0\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [4, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 3, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s0[saveOrd(in2):] not in in2[len(in1):]\\ni0 = abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [2, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [3, 0, 0, 3, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len((s0 + in2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 5, 5, 4, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 2, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 0], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0, 1, 0], [0, 0], [1, 5], [3, 3, 1, 3, 0], [1, 0, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 1, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 3, 2, 2, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 2, 8, 2, 1, 5, 3, 1, 0, 3, 3, 2, 0, 9, 1, 3, 0, 1, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( ( len(s0[len(in0):]) != i1 or True ) and in1[int(0.0):] not in in1 ):{:\\nres0 = ( abs(mod(i1,int(7.0))) \\l int(5.0) and b2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 1, 0, 1], [], [], [], [], [], [], [], [], [5, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [0], [0], [1, 0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 2, 1, 0, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"R\"\"[mod(len(s0),i1):] not in in2[int(0.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[( int(2.0) + i0 ):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 1, 0], [], [0], [], [], [0, 2, 1], [4], [0, 1], [0], [], [0], [], [], [], [1, 1, 1, 0, 1, 0, 1], [7, 0, 6, 9, 1, 2, 7], [2, 0, 2, 0, 1, 1, 0], [1, 1], [0, 0, 3, 2, 2, 2, 1, 2, 1, 1, 1, 2, 3, 0, 0, 0], [1, 0, 1, 1, 0], [2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\ni2 += i0\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [1, 1], [], [0], [], [], [1, 0], [], [1, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0, 2], [], [], [], [], [], [], [], [], [1], [2], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [3], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [1, 3, 0], [1, 2], [0], [1, 0], [], [], [0], [], [4, 4, 4, 4, 3, 3, 5], [1], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in1[int(130.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0], [0, 1], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [0], [3, 0, 1, 1], [], [2], [2], [], [4, 3], [1], [], [1, 0], [], [], [1], [1], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 4, 9, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 0, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4, 4], [1], [0], [4, 0, 3, 4, 0, 0, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 8, 0, 1, 10, 3, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len((saveChr(saveOrd(s1)) + in1))):{:\\nloopBreak% = 0\\nwhile in0 not in s0.rstrip():{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1], [0, 2, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [1, 3, 1, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 2, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 0, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s1[int(0.0):]:{:\\nres0 = \"\"R\"\" not in in1[len(in1):int(2.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 3, 0, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 1, 2, 1, 0, 2, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 0, 2, 0, 3, 0, 1, 2, 1, 1, 0, 0, 3, 0], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 9, 1, 33, 10, 7, 4, 6, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:max(min(i2, i2), abs(mod(i2,int(0.0))))]:{:\\ni1 = divInt(int(6.0),( min(divInt(divInt(divInt(int(5.0),i1),( len(in1) + ( i2 + divInt(min(( int(7.0) - i0 ), max(i2, int(8.0))),int(1.0)) ) )),int(7.0)), int(7.0)) - i1 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 5, 4, 3, 0, 4], [0], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 8, 1, 3, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in2):]:{:\\nres0 = len(in1[i0:]) != int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = abs(mod(i2,int(4.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [0, 3], [0, 1, 1], [0, 0], [4], [3, 0], [1], [], [], [1, 1, 0, 1, 1, 1], [8, 4, 9, 2, 8, 3], [2, 1, 0], [], [1, 0, 0, 3, 2, 2, 3, 0, 3, 2, 1, 1, 1, 1], [1, 0, 1], [0, 4, 3], [0, 1], [0, 0], [5, 5], [], [], [0, 0, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 3, 0, 12, 3, 3, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( int(8.0) \\l i2 or i1 \\ge min(divInt(( saveOrd(in2) + i0 ),len(in2)), divInt(int(4.0),int(92.0))) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [1], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [1, 1, 1], [], [], [], [], [], [], [], [0, 0], [], [], [], [], [], [1], [5], [2, 1, 0, 1, 2, 0, 2], [1, 1, 0], [0, 0, 2, 0, 0, 0], [1, 0], [], [1, 2, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 5, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\ni0 *= i1\\ni2 = divInt(i0,i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [0], [0], [], [], [1, 2, 2], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 0, 0, 1, 1, 1], [4, 9, 2, 6, 9, 5, 4, 8, 9], [0, 2, 0], [1], [1, 2, 2, 3, 1, 1, 2, 0, 2, 0, 0, 1], [1, 1, 0, 1], [0], [0], [0, 0, 1], [0, 2], [], [], [2, 0, 0, 2, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2[int(49.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [2, 2], [5], [0, 1], [0], [], [2, 0], [], [], [], [], [], [1, 2, 0], [0], [2, 0, 0, 0], [1], [], [], [0], [], [], [], [], [], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = divInt(i2,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1[divInt(int(0.0),i2):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 3, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 5, 1, 1, 7, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in getCharFromString(in2, len(in1)):{:\\nres0 = in0[len(in0):] not in \"\"R\"\"\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [0, 1, 1], [], [], [], [], [], [2, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [1, 3], [1], [0], [0], [], [0], [], [], [], [1, 1, 1], [1], [0, 1], [0], [3, 3, 0], [], [0, 4], [], [], [1, 4], [], [], [0, 4, 0], [0], [1, 0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = min(saveOrd(s1), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [6, 9, 1], [2, 0, 2], [1, 0], [1, 3, 1, 0], [], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(6.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [0], [3, 0, 1, 1], [], [2], [2], [], [4, 3], [1], [], [1, 0], [], [], [1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(i1)\\nin1 = \"\"F\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0], [], [0], [], [], [1], [], [0], [], [], [], [0, 1], [1], [0], [0, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 1, 2, 0, 8, 5, 0, 4, 3, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4, 3], [1], [0], [4, 0, 0, 3, 0, 0, 1, 0, 2, 0, 4, 3, 1, 4, 2, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = getCharFromString(s0, len(in2)) not in (in1 + in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nb0 = s1[len(in0):].startswith(getCharFromString(s0, i0)[int(0.0):abs(mod(i2,int(4.0)))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [1, 1, 0], [], [0, 0], [], [], [3], [], [2], [], [1], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 9, 1, 5, 4, 5, 9, 0, 3, 9, 4, 1, 4], [2, 1, 0, 0, 2, 2], [1, 0], [1, 2, 2, 2, 0, 3, 0, 3, 1, 1, 2, 0, 1, 3, 3, 3, 1, 0, 1, 3, 1, 0, 0, 3], [0, 0, 0, 1], [0, 2, 3, 2, 3, 0, 2, 0], [1, 0, 1, 0], [0], [0, 2, 5, 4], [], [], [4, 0, 2, 2, 2, 4, 0, 0, 0], [3, 2], [1], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 6, 2, 19, 4, 5, 4, 1, 4, 0, 0, 9, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(2.0)\\ni1 = ( ( ( i0 + min(i0, abs(int(9.0))) ) - int(1.0) ) + divInt(i2,int(5.0)) )\\nres0 = s0.rstrip() not in s2.capitalize()[:len(in2)][abs(len(in1)):int(4.0)][i2:int(5.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 0, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 5, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 4, 4, 3, 0, 11, 0, 4, 0, 0, 6, 1, 0, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1:{:\\nres0 = ( len(s0) != i0 or ( getCharFromString(in2[int(0.0):abs(int(7.0))], i1)[int(5.0):i2][:int(7.0)].endswith(saveChr(saveOrd((\"\"R\"\" + s1.rstrip())))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [0, 1, 1], [3, 3, 0, 0, 0, 2, 0, 1, 1, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 1, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[:len(in0)] not in in0[i2:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [3], [0], [1], [1], [], [], [2], [], [0, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 2], [3], [1, 0, 1], [0], [], [3, 1], [0], [], [], [1, 0, 1], [1, 4, 1], [0, 0], [], [2, 1, 1, 0], [0], [4], [1], [], [5, 1], [], [], [3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( int(1.0) - int(41.0) ) \\ge i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0, 2], [], [0], [], [], [1], [], [0], [], [], [], [1, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 2, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 0, 0], [0, 0, 2, 1, 0, 2, 1, 2, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 8, 0, 34, 9, 9, 5, 4, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), i0):i2]:{:\\nres0 = abs(mod(i2,int(0.0))) != ( int(7.0) + min(len(in1), ( ( divInt(int(5.0),i0) + divInt(min(( i2 * max(abs(( int(7.0) - i2 )), max(divInt(int(7.0),int(1.0)), int(7.0))) ), int(7.0)),i0) ) + i2 )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 2], [0], [3, 3, 0, 0, 0], [0], [2, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(min(i1, i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 0, 1], [4, 1, 4, 5, 2], [2], [1], [1], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(41452.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 0, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 4, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in1[len(in1):]:{:\\nin1 = in0[i1:]\\ni1 = abs(int(07.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [4], [0, 0, 0], [0, 0], [0, 1], [], [], [], [], [2], [], [], [4], [3], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[int(2.0):] not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 1], [], [0], [], [], [0], [], [], [], [1, 1], [4, 5], [0, 0], [1], [2, 0, 1], [0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [2], [1], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 1], [0], [2, 1], [0], [0], [], [], [1], [], [2], [0], [0], [], [], [], [], [1], [9], [1], [1], [3, 1], [], [2], [0], [], [0, 3, 5, 1], [], [0], [4, 4, 0, 0], [3, 2], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 2, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in0.capitalize().strip()\\ni1 += abs(int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 1, 0, 0, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(int(0.0), i2):]:{:\\ni2 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [], [2], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [3], [0], [1], [1], [], [], [2], [], [0, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1, 1], [6, 0], [1, 0], [0], [1, 1, 0], [], [], [1], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(6.0) \\l int(0.0)\\ni1 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 3, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 6, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len((in1 + in1)):]:{:\\nin0 = getCharFromString(saveChr(len(s0[i0:int(0.0)]))[:i2], mod(i2,int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [0, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [2], [2], [1], [0], [], [], [], [], [], [1], [3], [1], [0], [1, 0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[len(in0):abs(i0)] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [0], [2], [1], [0], [], [1], [], [1], [], [1], [], [0, 1], [0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [2], [1], [1], [], [], [2], [1, 1, 0, 0, 0, 0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 4, 7, 9, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 2, 0, 0, 1, 0, 1, 2], [0, 1, 1], [1, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 3, 2, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 2, 0, 2, 3, 1, 2, 1, 0, 0, 3, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [3, 3, 2, 2, 3, 4, 1, 2, 1, 0], [2, 1, 2, 1, 0, 2, 1, 1, 2, 2, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[int(0.0):len(in1)]:{:\\ns1 = in0[:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 2, 2, 0, 2, 0], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 3, 1, 2, 3, 2, 3, 1, 0, 0, 0, 3, 0, 3, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3, 1, 4, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [2, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 1, 4, 1, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [15], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 8, 1, 2, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(s2):]:{:\\nb2 = in1[max(i0, int(0.0)):int(9.0)] not in in0\\ni2 = mod(i2,int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [0], [0], [], [], [3], [3, 5], [0, 1, 1], [0, 0], [], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 4, 3, 2, 7, 4, 8, 2, 4, 4], [0, 2, 1, 0], [1], [3, 0, 2, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [3, 3, 1, 0, 3, 0, 1, 2, 1], [2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [3, 1, 3, 4], [1], [], [0, 2, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0], [0, 1, 3], [0, 2], [1, 1, 1], [1], [], [24], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 0, 0, 0, 2, 2, 3, 0, 8, 2, 1, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not len(in0) \\ge i0:{:\\nres0 = mod(divInt(int(9.0),i2),i1) != int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [1], [], [], [], [], [], [], [1, 0, 1], [8, 5, 2], [2, 1, 0, 2, 2, 2], [1, 1], [2, 2, 0, 1, 0, 3, 0, 0], [0, 0], [0], [2, 2, 0, 1], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 6, 2, 8, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= ( ( i1 * int(8.0) ) + i0 )\\ni2 -= min(i2, i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0, 2], [], [], [], [], [], [], [], [], [1], [2], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[abs(len(in2)):] not in in1[i0:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [0], [1, 1], [0], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [0, 1, 1, 0, 1, 0, 1], [0, 8, 8, 6, 8, 7, 2], [2, 0, 1], [1, 1], [1, 2, 1, 1, 3, 3, 2, 1, 2, 0, 1, 3, 1], [0, 0, 0, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [2, 0, 2, 0, 2], [0], [1, 5], [], [0], [0, 2, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 2, 2, 4, 1, 0, 3, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(08.0)\\nloopBreak% = 0\\nfor s1 in in2:{:\\ni0 += ( int(8.0) * int(68.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [0], [0], [], [], [1], [], [1], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2[len(in2):] not in in1.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [3, 2], [1], [0], [0], [], [0], [], [], [], [0, 1], [7, 0], [1, 0, 1, 2], [], [2, 0, 2, 0, 0, 2, 0, 1], [0, 0, 1], [], [0, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 1, 12, 3, 3, 1, 2, 3, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):mod(i0,int(7.0))]:{:\\nres0 = len(\"\"R\"\") != mod(i0,int(7.0))\\ni0 = ( int(5.0) + abs(i0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 0], [], [2, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 4, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveChr(i1) != getCharFromString(in0, i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [0, 2], [0], [4], [2], [], [1], [], [1, 1], [0, 8], [], [], [1, 3, 3, 1], [0], [3], [1], [], [1, 4, 1, 5], [], [], [0, 3, 4, 2, 0, 0, 0], [0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 4, 0, 0, 7, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not s1.startswith((getCharFromString(in1[:int(0.0)], len(s1)) + in2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 0, 2, 2, 1, 0, 2, 1, 2, 0, 0, 1, 2, 1, 0, 3, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 2, 2, 1, 1, 0, 1, 3, 0], [0, 0, 2, 2, 1, 2, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 1, 3, 0, 1, 5, 0, 1, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(i0).capitalize()[i2:abs(divInt(i2,int(0.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [3], [0], [1], [1], [], [], [2], [], [0, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 0], [2], [1, 0], [], [0, 0], [], [], [0, 3, 3], [3], [1, 0, 1], [0], [], [1, 0], [], [1], [], [], [], [0, 2, 1, 0, 0, 2, 2], [0], [0, 0, 0], [], [2], [], [], [0], [], [], [4], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 1], [2], [0, 1, 2], [], [], [], [], [2], [5], [2, 1], [0], [1], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 8, 9, 8, 7, 2, 9, 5, 5, 3, 5, 7, 2, 1], [0, 1, 2, 0, 2, 2, 1, 2, 0, 0, 2, 0, 0, 1, 2, 2, 0, 0, 0], [1], [0, 2, 2, 2, 3, 0, 3, 2, 2, 3, 2, 0, 1, 2, 3, 0, 0, 2, 1, 0, 2, 0, 2, 1, 3, 2, 0, 3, 2, 0, 0, 2, 1, 2, 2, 3, 2, 2, 2, 1, 3, 1, 3, 1, 2, 0, 2, 2, 1, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0], [1, 0, 2, 1, 2, 1, 2, 3, 1, 0, 2], [0, 2, 1, 1, 1, 0, 0, 0, 1, 2, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [5, 1, 5], [], [], [0, 2, 0, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 15, 15, 19, 1, 69, 26, 10, 13, 14, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in2 not in s1[:i0]\\ni1 += ( ( ( max(i2, min(( ( abs(divInt(i0,int(4.0))) * ( max(i2, i2) - divInt(int(0.0),i1) ) ) - mod(i2,( int(8.0) - abs(divInt(i0,max(( i0 + i2 ), divInt(int(9.0),( divInt(abs(divInt(divInt(divInt(int(8.0),len(in2)),int(7.0)),max(int(2.0), mod(i0,mod(( int(9.0) + i0 ),mod(i1,( i2 + i2 ))))))),mod(divInt(int(5.0),( int(5.0) - min(i0, i0) )),int(3.0))) * int(5.0) ))))) )) ), int(7.0))) + int(2.0) ) - int(1.0) ) + i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 0, 1], [2, 1, 0, 1, 0], [0], [2, 0, 1, 1], [0], [0, 0, 0], [], [], [1, 2], [2], [2, 0], [], [5], [1], [], [0], [], [0, 0, 1, 1], [4, 4, 3, 8], [2, 0, 2, 1, 0], [0, 0], [1, 1, 2, 0, 1, 0], [0], [2], [1], [], [2, 1, 0, 5, 3], [], [0], [4, 0, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 0, 0, 1, 0, 0, 0, 0, 5, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in saveChr(int(443.0)):{:\\ns1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = in2.endswith(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1], [1, 6, 2, 8], [0, 2], [0], [1, 0], [], [], [1], [], [3, 5, 5], [], [], [4, 0, 0, 0], [2, 2, 1, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in2.capitalize()\\ni0 = int(1628.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [0], [0], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [1, 0, 0, 0, 0, 0, 1], [6, 6, 4, 3, 8, 0, 4], [1, 2], [1], [2, 2, 3], [1], [], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2, 1, 2, 1], [1, 0], [3, 0, 2, 1, 0], [0], [2], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 2, 5, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += abs(i1)\\ni2 = ( int(0.0) - i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [0, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 6, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 1, 1, 2, 0, 1, 0, 2, 0, 1, 0, 1, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 0, 1, 3, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 2, 0, 0, 0, 1, 0, 1, 0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 1, 2, 2, 3, 0, 1, 2, 1, 1], [1, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 0, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 7, 7, 11, 1, 34, 11, 6, 6, 5, 3, 1, 0, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(len(s0[:i0]),int(0.0)) != max(divInt(i2,int(7.0)), ( int(5.0) - abs(i2) )):{:\\nres0 = ( ( ( divInt(abs(i2),( len(in2) + ( i1 * divInt(i1,( int(7.0) - i1 )) ) )) + divInt(i2,int(4.0)) ) + min(int(1.0), int(7.0)) ) \\l i0 and ( \"\"R\"\" not in in1 and True ) )\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [1], [], [], [], [], [], [], [1, 0, 1, 0], [9, 9, 0, 3], [1, 2, 0, 2], [1], [2, 0, 1, 2, 0, 1, 3, 3, 0, 0, 0], [0, 0], [1, 2], [1, 0], [1], [1, 4], [], [], [3, 2, 0, 4], [1], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 0, 6, 2, 0, 2, 0, 2, 0, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = (in1[:( i1 - int(9.0) )] + saveChr(( i2 + int(90.0) )))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [2, 0, 2], [0, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(1.0)\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [], [], [], [], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [], [], [], [], [], [], [], [1, 1], [9, 4], [1, 2], [], [1, 1, 1], [], [], [], [1], [1, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [], [0], [0], [], [1], [], [1], [], [], [], [0, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 0, 0], [1], [3], [], [3], [0], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [0], [0], [], [], [1], [2], [0], [0], [], [], [], [], [], [1, 1], [3, 7], [0, 0], [1], [0, 1, 0, 0], [], [0], [1], [], [2, 0], [], [0], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 1, 0, 2, 0, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0[:i0].capitalize():{:\\ni0 -= int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [2, 0, 1, 0, 2, 0], [], [], [], [], [], [], [0, 1, 0, 0, 1, 0], [0, 3, 6, 1, 2, 6], [0, 0, 1, 2], [0, 0], [2, 0, 2, 1, 0, 1], [0, 0], [], [2, 1, 0, 2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 4, 2, 6, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( i0 * ( int(03.0) - i1 ) )\\ni2 = int(612.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [0], [], [], [], [0], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 2, 2, 0, 0, 1], [0, 1], [2], [0, 2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 6, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(( mod(i0,i2) + int(3.0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 0, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[len(in2):]:{:\\nb2 = ( mod(int(0.0),i0) != mod(i2,int(7.0)) or ( in0.endswith(s0[( int(5.0) + abs(i2) ):i0].capitalize()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 4, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 12, 0, 50, 16, 9, 8, 8, 6, 0, 1, 11, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString((in1 + in1), max(i0, int(17.0)))):]:{:\\nb0 = in0[abs(mod(i2,int(5.0))):] not in s0[mod(int(7.0),min(i2, ( divInt(( len(saveChr(i0)) + divInt(min(( i1 + ( divInt(( int(4.0) * i2 ),divInt(max(int(1.0), i1),int(7.0))) - int(7.0) ) ), i2),i0) ),mod(int(9.0),abs(int(8.0)))) + max(i0, ( ( ( int(5.0) * int(0.0) ) - divInt(int(4.0),i1) ) - int(8.0) )) ))):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 3, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [1, 0, 3, 0, 0, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 1, 7, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[int(0.0):]:{:\\nin1 = in1[i1:min(i2, i2)][len(s2):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2], [0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [2], [1], [0], [], [1], [], [1], [], [1], [], [0, 1], [0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 == i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 2, 1, 3, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 2, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nin1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [0, 0, 0, 1], [5, 9, 5, 6], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(5956.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [0, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [4], [1], [0], [], [], [], [], [], [1], [3], [1, 1, 1], [1], [3, 0, 1, 2, 0, 1], [1, 1], [3], [0], [1, 0], [4], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = len(in1[i1:]) \\le int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 0], [], [0, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [4], [1], [0], [], [], [], [], [], [1, 0, 1], [4, 0, 2], [1, 0], [1], [2, 1, 0, 1], [1], [], [2], [1], [4, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = mod(int(4.0),i1) \\le int(02.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [8, 3, 9, 4, 2, 3, 5, 9, 2, 4, 9], [2, 2, 0, 0, 2, 1, 0, 0, 0, 0], [], [3, 2, 0, 2, 1, 2, 1, 0, 0, 1, 2, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 3, 2, 1, 2, 2, 2, 0, 2, 0, 0, 2, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 3], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0], [2, 1, 4], [], [], [2, 2, 0, 2, 0], [], [0, 2], [1, 0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 0, 15, 5, 1, 1, 4, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1[max(mod(i2,divInt(int(8.0),( int(3.0) + i2 ))), i0):int(9.0)][:mod(mod(i0,i2),int(4.0))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [1, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 1, 12, 3, 3, 1, 2, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[int(0.0):]:{:\\nin1 = in1\\ni1 = len(in0[mod(int(7.0),max(mod(i1,int(5.0)), ( int(7.0) + abs(i1) ))):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [4, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = getCharFromString(s1, saveOrd(in2)) not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2 not in in2\\ni2 = len(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [2], [2], [1], [0, 0], [], [], [], [], [], [1], [8], [1], [1], [1, 0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [5, 9], [0], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(59.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 0, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 3, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0], [3, 4, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 0, 0, 0, 3, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 2, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 3, 3, 1, 1, 3, 0, 0, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 4, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0 not in in2.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1, 0], [1], [3, 2, 0, 1, 3, 0], [1], [0, 3], [1], [0], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 6, 1, 2, 1, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= min(divInt(i1,int(4.0)), len(s2[:i0]))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [8, 9, 1], [1], [1], [1], [], [], [1], [], [1, 0], [], [], [0], [], [], [], [3, 0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(89.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [0, 3], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\l int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(s0), i0):]:{:\\nb2 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1, 3], [4], [2], [0], [], [0], [], [], [], [1, 1], [7, 5], [0], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [3, 3, 1], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [0], [0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [1, 4, 7], [2], [0], [3, 1, 1], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(int(1.0), int(47.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1, 3], [5], [1], [0], [], [0], [], [], [], [0, 0, 1, 0, 1, 1], [7, 5, 3], [0], [0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(753.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [2], [], [1, 0], [1, 0, 1, 1, 0], [], [], [], [3, 1, 2, 5], [], [], [3, 4, 3, 0, 0, 0], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (getCharFromString((s1 + s2), int(1.0)) + in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 4, 9, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 1, 0, 0, 1, 2, 0, 1, 2, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 0, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 2, 1, 4, 3, 0, 4], [1], [0], [2, 0, 3, 4, 0, 0, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 6, 0, 1, 7, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len((getCharFromString(s1, int(0.0)) + in1)):]:{:\\nin0 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1], [0, 0, 0, 1, 1], [1, 2], [0, 1, 2, 1], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 1, 4, 5], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s0[len(in2):]) != i0\\ni1 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0], [9, 9, 0, 3], [1, 2, 0, 2], [1], [2, 0, 1, 2, 0, 1, 3, 3, 0, 0, 0], [0, 0], [1, 2], [1, 0], [1], [1, 4], [], [], [3, 2, 0], [], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= ( i2 + int(9.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (s0 + s2) not in in1.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nin1 = in0[abs(i1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [3, 3], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [1], [3, 2, 2, 3, 3, 1, 1, 0, 0, 0], [1, 1, 1], [4, 0, 2], [1], [1, 0, 1], [4, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 9, 2, 3, 1, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= saveOrd(saveChr(mod(divInt(min(abs(int(3.0)), int(3.0)),i2),i0)).capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [1], [], [], [0], [1, 1, 1, 1], [7, 7, 5, 3], [1, 0], [0], [1, 3, 2, 0, 2, 1, 2, 1, 2, 3, 0, 1], [0, 0, 0, 1], [1, 3, 2], [1, 2, 2, 0], [0], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 0, 0, 0], [2, 0, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 6, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (getCharFromString(s2.capitalize(), int(7.0)).capitalize() + s2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len((s0 + s2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 4, 0, 12, 3, 2, 2, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nres0 = ( ( min(( int(0.0) + i0 ), mod(i2,int(7.0))) != ( int(5.0) + i2 ) or True ) and in1[i0:] != in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [3, 5, 7], [1], [0], [3], [], [3], [], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0, 0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 0, 0, 2, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 6, 0, 1, 6, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.rstrip():{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(in2[len(s0):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [4], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 5], [1, 2, 0], [1], [2, 0, 1, 2, 1, 0], [1, 1], [], [0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = divInt(i1,int(3.0)) \\le divInt(int(5.0),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [0, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 0, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 4, 1, 4], [1], [0], [2, 0, 0, 2, 2, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nin1 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 7, 5, 7, 8, 4, 7, 9, 9, 8, 8, 0, 4, 8, 5, 9, 9, 2, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 2, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 1, 1, 0, 0, 3, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 3, 1, 2, 3, 1, 3, 2, 3, 1, 0, 1, 0, 1, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [3, 1, 2, 0, 3, 0, 1, 0, 1, 3, 3, 4, 0, 0, 4], [1, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 3, 4, 3, 0, 4, 5, 1], [1], [0], [2, 0, 0, 2, 2, 0, 2, 0, 2, 0, 4, 3, 2, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 20, 13, 0, 65, 19, 15, 10, 9, 9, 1, 1, 17, 2, 0, 6, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nin1 = in0[max(i2, int(07.0)):abs(mod(i2,int(5.0)))][mod(int(7.0),min(i2, ( divInt(( len(s0[i0:divInt(min(( i1 - ( divInt(( int(8.0) + i2 ),divInt(max(mod(i1,int(4.0)), int(7.0)),i2)) * i2 ) ), min(int(9.0), max(int(9.0), len(in1[:i0])))),( ( ( int(8.0) * int(8.0) ) + divInt(int(0.0),i2) ) * int(4.0) ))]) - int(8.0) ),mod(len(getCharFromString((saveChr(int(59.0))[:( saveOrd(in2) - int(9.0) )] + \"\"R\"\"), min(( min(int(2.0), i2) * int(2.0) ), i1))),int(2.0))) + saveOrd(s1) ))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0, 0], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [0, 0, 0, 0, 0, 1, 1, 1], [6, 2, 5, 3, 7, 5, 0, 7], [0, 1, 0, 0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(625375.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0], [1], [], [0], [1], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 3, 0, 1, 7, 8, 3], [2, 0, 2, 1, 2, 2], [1], [3, 0, 1, 3, 0, 3, 3, 2, 1, 2, 3, 1, 2, 0, 3, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0], [4, 1, 0, 2, 0, 0, 1, 0, 1], [2, 2, 0], [0, 1, 0], [4, 4, 5], [], [], [4, 0], [0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= saveOrd(getCharFromString(in1, i0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [0], [], [], [2], [], [1], [], [1], [2], [2], [0], [1], [], [], [2], [], [5], [], [], [4, 4], [3, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(2.0)).lstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 2, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [3, 3, 1], [], [], [], [1, 1], [4, 9], [0, 2], [1], [3, 2, 0, 1, 3, 0], [0], [2, 3, 2], [1, 0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 0, 1], [], [0], [4, 4, 0, 0], [1, 0], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = saveChr(abs(( i0 - int(4.0) )))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [], [2, 0, 1], [], [0], [], [], [1], [], [0], [], [], [1], [], [0], [], [1], [3], [2], [0], [1], [], [], [], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\nb1 = True\\ni2 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 6, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 0, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 4, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [4, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 2, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = min(len(s0[i0:]), int(4.0)) \\le abs(divInt(i1,int(2.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0, 2, 2], [0], [0], [], [], [2, 0], [], [0], [], [], [0], [], [1], [], [1], [8], [1, 0, 0, 0, 0, 1], [0], [1, 1, 3], [1], [4], [], [1], [0], [], [0], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 3, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 0], [0, 5, 4, 0, 3, 4, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[i0:]:{:\\nres0 = in2 not in in1[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [2], [], [0], [], [], [1, 0], [], [2, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = saveChr(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [1, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\ni0 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [0], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4, 3], [1], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 1, 0, 0, 8, 0, 1, 10, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile (in1 + in0) not in s0[int(7.0):]:{:\\nin1 = in0[i0:int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [7, 4], [2, 0, 0, 0], [1], [2, 1, 0, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(7.0),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [0, 1], [1, 1], [0], [], [0, 1], [], [], [1], [], [3, 3], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 != int(11.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [1, 0, 1], [4, 6, 0], [2, 0, 2, 0, 1, 0, 1], [1], [3, 2, 2, 2, 2, 0, 0, 3, 1, 2, 0, 0, 2, 3, 0, 1, 0], [1, 0, 1, 0, 0, 0], [1, 3, 0], [0, 0, 2, 0, 1], [0, 1, 1], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 7, 1, 17, 6, 3, 5, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += max(divInt(( mod(( i0 + i2 ),len(in1)) * int(4.0) ),( i0 + i1 )), ( min(i0, int(60.0)) - i1 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 0, 0, 1, 1], [3, 7, 1, 5, 3, 7, 4, 2], [2, 0, 0], [], [2, 2, 2, 2, 1, 2, 0, 0, 1, 1, 2, 0, 3, 1], [1, 1, 0, 0, 1, 0], [2], [0, 2, 2], [0, 0, 0], [2, 2, 2], [], [], [4, 3, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 3, 0, 14, 6, 1, 3, 3, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(divInt(divInt(( ( int(3.0) + divInt(i2,i0) ) * int(7.0) ),int(15374.0)),( i0 * abs(int(2.0)) )))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 2], [0], [0], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 2, 4], [1], [0], [1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\"R\"\" not in s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [1, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0, 0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 5, 0, 7, 2, 2, 8, 1, 1, 6, 4, 0, 2, 1, 0, 8, 8, 8, 7, 9], [0, 0, 2, 1, 2, 1, 1, 1, 0], [], [1, 3, 2, 2, 2, 1, 3, 1, 0, 0, 3, 1, 2, 3, 2, 3, 3, 3, 2, 0, 0, 1, 2, 2, 2, 0, 1, 0, 0, 2, 1, 2, 1, 3, 2, 2, 3, 2, 0, 1, 2, 1, 1, 3, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 0, 4, 3, 4, 1, 4], [0, 0, 2, 1, 1, 2, 2, 1, 0, 2], [1, 0, 0, 0, 0], [1, 5, 3, 4], [], [], [4, 0, 2, 0, 0, 0, 1], [3], [0], [1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 21, 21, 9, 0, 45, 15, 10, 10, 5, 4, 0, 0, 6, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g max(mod(( divInt(int(1.0),max(int(5.0), i0)) + i0 ),max(int(07.0), divInt(max(( min(saveOrd(s1.lstrip()), len(in2[:( i2 + i1 )])) * int(2.0) ), ( ( ( i2 - int(2.0) ) - i1 ) * i1 )),( int(8116.0) * ( int(40.0) - saveOrd(in0) ) )))), divInt(( max(( i1 + int(2108.0) ), divInt(int(8.0),int(879.0))) * saveOrd(in1) ),i0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 0, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s0[i2:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 8, 1, 1, 7, 7, 2, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 2, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1], [0, 1, 1], [3, 0, 2, 0, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 1, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 3, 2, 2, 0, 1, 2, 1, 0, 3, 0, 0, 2, 0, 2, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [3, 0, 3, 0, 3, 4, 1, 2, 1, 2, 3], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2, 1], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 11, 0, 40, 13, 8, 4, 9, 6, 1, 1, 15, 5, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[i0:].capitalize()):mod(i1,i1)]:{:\\nres0 = in1 not in saveChr(mod(divInt(int(0.0),mod(int(4.0),min(i0, i1))),( divInt(int(5.0),int(8.0)) + ( len(in0.rstrip()) + ( i2 * divInt(min(mod(len((\"\"R\"\" + saveChr(i1)).capitalize()),divInt(saveOrd(s0),int(1.0))), i0),int(1.0)) ) ) )))[mod(i0,i0):( int(7.0) - max(int(7.0), abs(i0)) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [0], [], [], [], [1], [3], [1], [0], [], [], [], [], [], [0, 1], [], [0, 2], [0], [0, 0], [], [4], [], [], [0, 2], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2:{:\\nb1 = i0 \\ge i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 1], [0, 3, 0, 7, 4], [1, 1, 1, 2], [1, 1], [1, 2, 2, 0, 1, 0], [0, 1], [], [1, 1, 0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 4, 2, 6, 2, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(0.0)\\ni1 -= ( divInt(i1,int(3074.0)) + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [1], [1], [1], [1, 1, 1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1], [0, 2], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [1, 0, 1, 0], [1, 0], [0, 0], [], [], [2], [], [4, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\ni1 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 4, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 1, 49, 16, 10, 8, 8, 4, 0, 1, 8, 3, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(saveChr(len(in2.rstrip())), max(i0, abs(min(mod(i2,int(2.0)), mod(int(7.0),len(in1))))))[i2:]:{:\\ni0 = ( divInt(( min(i1, divInt(max(( i2 + ( divInt(( int(5.0) + i1 ),divInt(abs(int(7.0)),i2)) * int(4.0) ) ), int(1.0)),i0)) - i0 ),mod(int(7.0),max(int(7.0), len(in1[i0:])))) + ( ( ( int(9.0) * int(8.0) ) - divInt(int(5.0),i1) ) - int(0.0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [3], [4], [1], [0], [], [], [], [], [], [0, 1, 1], [1, 3, 0], [1, 2], [1], [1, 0], [], [], [0], [1, 0, 0, 0, 0, 0, 1, 0], [], [], [], [], [], [1, 0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(13.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 4], [2, 0, 0, 0], [1], [2, 1, 0, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(2.0),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 6, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 0, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 4, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 2, 0, 2, 3, 1, 0, 0, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [4, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 0, 1, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = getCharFromString(s0, len(in2)) not in in1[divInt(i0,len(in1)):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 5, 4, 3, 0, 4], [], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in2):]:{:\\nres0 = (in1 + in0) not in s0[max(i0, int(5.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0], [1], [0], [], [], [0], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [8, 2], [0, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [2, 1], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(21.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0, 0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1], [1, 1, 5, 7, 7, 2, 2, 8, 1, 1, 6, 8, 0, 2, 1, 0, 8, 8, 8, 7, 9, 3, 4], [0, 0, 2, 1, 2, 1, 0, 1, 0], [], [1, 3, 2, 2, 2, 1, 3, 1, 0, 0, 3, 1, 2, 3, 2, 3, 3, 3, 2, 0, 0, 1, 2, 2, 2, 2, 1, 0, 0, 2, 1, 2, 1, 3, 2, 2, 3, 2, 0, 1, 2, 1, 1, 3, 1, 3, 1, 1, 2, 0, 1], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0], [1, 1, 1, 1, 0, 4, 3, 4, 1, 4, 2], [0, 0, 2, 1, 1, 2, 0, 1, 0, 2, 2], [1, 0, 0, 0, 0, 1], [5, 5, 3, 4], [], [], [4, 0, 2, 0, 0, 0, 1], [1], [0], [1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 23, 23, 8, 0, 51, 17, 11, 11, 6, 3, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g max(mod(( divInt(int(1.0),max(int(5.0), i0)) + i0 ),max(int(77.0), divInt(max(( min(saveOrd(saveChr(len(in2))), ( i2 + i1 )) * int(2.0) ), ( ( ( ( int(2.0) - i2 ) - i1 ) * ( int(81.0) + divInt(int(16.0),saveOrd(in2[:( ( max(divInt(i0,int(80.0)), mod(int(2.0),int(1.0))) - saveOrd(in0) ) + int(08.0) )])) ) ) * abs(int(8.0)) )),int(879.0)))), ( i1 * int(34.0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [0], [], [], [1], [], [0], [], [], [], [2, 0, 2, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 9, 1, 7, 7, 6, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 1, 1, 2, 1, 0, 2, 0, 2, 2, 1, 0, 3, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 1, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 33, 9, 8, 3, 6, 6, 1, 1, 15, 4, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nb1 = in1[len(saveChr(abs(int(0.0))).capitalize()[i0:mod(int(2.0),int(5.0))]):divInt(int(7.0),i2)][( i2 + divInt(divInt(int(9.0),i0),min(len(in0), divInt(i1,( min(( max(i2, divInt(abs(int(1.0)),i1)) + int(7.0) ), int(7.0)) * i1 )))) ):] not in (\"\"R\"\" + s0.lstrip()).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[int(4.0):i0].rstrip()[abs(i2):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 1], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [6, 9, 1], [2, 0, 2], [1, 0], [1, 3, 1, 0], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 4, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(6.0)\\ni0 = min(int(9.0), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [], [0], [], [], [1, 0], [4, 4], [1, 1, 0], [0, 0], [], [3, 0], [1, 0], [], [], [1, 1], [3, 8], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 0, 2, 1], [1], [0, 0, 3, 1, 1], [1], [2], [0], [1], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i0 \\le i1:{:\\nb1 = abs(int(3.0)) \\le int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [0], [0, 2], [], [3], [1], [], [0], [], [], [], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = min(i0, ( i2 + i1 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1], [1, 6, 4, 3], [1], [0], [2, 1, 3, 2, 2, 1], [0, 1], [3], [1], [1, 1], [0, 1], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 1, 1, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = saveChr(( int(1.0) - len(s1) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 2, 0, 1], [0], [1, 2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 3], [2, 0, 0, 2], [1, 0], [0, 0, 1], [], [], [2], [], [4, 2, 5], [1], [0], [0, 1], [], [], [0], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 3, 1, 1, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i0\\nloopBreak% = 0\\nfor in1 in s2:{:\\nin2 = \"\"U\"\"\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [3], [1, 0], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1], [0, 4, 0, 9], [2], [], [1, 0], [], [], [], [], [1], [], [], [4, 4], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = saveChr(int(0409.0)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2, 2, 2], [], [0], [], [], [2, 0], [], [0], [], [], [0], [], [1], [], [1], [8], [1, 0, 0, 0, 0, 1], [0], [1, 1, 3], [1], [4], [], [1], [0, 4], [], [], [0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 2, 2, 2, 0, 0, 0], [0, 1, 1], [3, 0, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 1, 2, 3, 2, 1, 3, 1, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [2, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4, 5], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [3, 1, 3, 1], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 7, 0, 30, 10, 5, 4, 6, 5, 1, 1, 11, 2, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1.rstrip()[i0:i2] not in saveChr(i0)[len(in0[mod(i0,int(0.0)):divInt(int(7.0),divInt(i2,divInt(( divInt(int(5.0),int(7.0)) * ( abs(( int(7.0) * abs(int(1.0)) )) * divInt(int(7.0),i2) ) ),( len(\"\"R\"\") - int(7.0) ))))]):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1], [8], [2, 2, 1], [1], [0, 1, 3, 3, 0, 0, 0], [1, 1], [0, 3], [0], [0, 1], [0], [], [], [1, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 2], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 4, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 13, 3, 5, 0, 3, 2, 1, 0, 6, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"R\"\"[len(saveChr(min(mod(int(0.0),abs(mod(i0,min(divInt(int(1.0),len(in0)), i1)))), i2)).capitalize()):] not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1], [2, 7, 5, 3], [2, 2], [0], [1, 1, 2, 0, 3, 3, 2, 3, 2, 1, 0, 1], [0, 0, 0, 0], [1, 3, 2], [0, 0, 1, 0], [], [3, 2, 2, 5], [], [], [3, 4, 4, 4, 4, 0, 0], [1, 1, 2, 3], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (saveChr(int(2.0)) + saveChr(int(7.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 1, 1, 2, 1, 0, 0, 0, 1, 0, 2, 0], [0, 1, 1], [3, 1, 0, 2, 0, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 3, 2, 0, 3, 2, 0, 1, 3, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 4, 1, 4, 2, 1], [0, 0, 2, 1, 0, 2, 1, 2, 2, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0], [0, 3, 4, 4, 2, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [3, 1, 0, 1], [4, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 4, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile (s0 + in0) not in in1[len(in1):]:{:\\ni1 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9], [1], [0], [3, 1], [], [2], [0], [], [0, 4, 5, 1], [], [0], [4, 4, 0, 0], [3, 2], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 2, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in1.capitalize().strip()\\ni1 = abs(int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [0, 3, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 1, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 2], [], [0], [], [], [0], [], [], [], [1, 1], [4, 5], [0, 0], [1], [2, 0, 1], [0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [1, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\ni0 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 0, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1, 0], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 12, 0, 40, 11, 8, 4, 7, 5, 1, 1, 15, 5, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in saveChr(len(in2[:saveOrd(in1)])).capitalize()[divInt(int(0.0),i0):]:{:\\nres0 = in1[divInt(i2,int(7.0)):( i2 + int(5.0) )].rstrip()[i0:i1] not in saveChr(divInt(divInt(int(7.0),i2),divInt(min(( i1 + ( min(divInt(len((\"\"R\"\" + getCharFromString(in0, i2))),( min(int(6.0), i0) * int(1.0) )), int(7.0)) - i0 ) ), i2),mod(int(7.0),max(int(9.0), abs(i2))))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [0], [], [0, 1], [], [], [], [], [], [], [], [], [0, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [], [1], [], [0], [], [], [], [1], [1], [0], [], [], [], [], [], [1, 0, 1, 1], [9, 5], [2, 1, 1, 0, 2, 2], [0], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 0], [0], [0, 0], [0], [], [0], [], [], [], [1, 0, 1, 1], [9, 3, 4, 0], [], [], [1, 2, 1, 1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [1], [9], [0, 0], [1], [3, 0, 1], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= max(i0, int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [3, 8], [2], [], [1, 2, 1, 0, 1], [1, 1], [], [], [1, 1], [2, 2, 2], [], [], [4, 3, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [0, 2], [1], [0], [1], [], [3, 3, 2, 0, 3, 0, 1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(02.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [2, 2, 4, 2, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(i0):]:{:\\nres0 = in1 not in in1[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [], [], [0, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 6, 2, 9, 0, 4, 3, 0, 8, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 2, 0, 3, 2, 2, 3, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 1], [1, 1, 2, 1, 2, 0], [1, 0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0, 1, 2], [], [0], [], [], [0], [1], [1], [0], [2], [], [], [], [], [0, 0, 1, 0, 1], [0, 8, 4, 2, 1], [2, 0, 0], [], [2, 3, 0, 1, 1, 0], [0, 1], [4], [2, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 5, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( saveOrd(saveChr(i2)) * int(084.0) ) \\g int(21.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 6, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nb2 = in1[len(in0):] not in s1[int(0.0):i0].rstrip()[abs(i0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 1, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0], [4, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0], [2, 5, 4, 4, 5, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"R\"\" not in s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [0, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 3, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[i0:] not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 5, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0, 1, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 2, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 3, 0, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 0, 1, 2, 1, 3], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 3, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 12, 2, 3, 0, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[len(getCharFromString(in1, i0)[int(0.0):i2][mod(i2,int(0.0)):mod(int(5.0),abs(i0))]):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [1], [1], [1], [0], [], [], [], [], [0], [1], [1], [1], [0], [3, 3, 1, 0], [], [4, 4], [0], [], [1, 4], [], [], [0, 4, 4], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1], [], [0], [], [], [1], [], [], [], [], [], [1, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [0, 2], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [], [], [], [], [], [0, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0, 2], [], [0], [], [], [1], [], [0], [], [], [], [1, 1], [0], [0], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 9, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 1, 0, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [5], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 2], [3], [0, 0, 0], [0], [], [3, 0, 1], [0], [0], [], [1, 0, 0], [1, 4, 1], [0, 0], [], [2, 1, 1, 0], [0], [4], [1], [], [5, 1], [], [], [3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 3, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( b2 and True )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [4, 3], [0, 1, 0], [1], [0, 0, 1], [], [], [2], [], [4, 2], [1], [], [0, 1], [], [], [0], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i1\\nin1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [3, 9, 6], [1, 2], [1], [1, 0, 0, 1], [], [2], [0], [], [1, 4, 1], [1], [0], [0, 4, 1], [0], [], [], [0], [9], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in1:{:\\ni1 += int(396.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 1, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s0[saveOrd(in1):]:{:\\nres0 = s1[i0:len(in0)] not in s0[int(0.0):abs(( i2 + int(7.0) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [], [], [], [], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [1], [1], [], [0], [], [], [], [3], [1], [0], [], [], [], [], [0], [0, 1, 0, 1], [4, 8, 4, 4], [0, 2, 1, 2, 0, 2], [1], [2, 3, 0, 3, 3, 1, 2, 0, 0], [1, 1], [2, 0, 2], [1], [1, 1], [], [], [], [1], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 9, 2, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= mod(abs(i2),min(abs(int(48.0)), mod(i1,i2)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 2, 2], [], [0], [], [], [2], [1], [1], [0], [], [1], [], [1], [], [1, 0, 1], [8, 8, 8], [1, 0, 0, 0, 0, 1], [0], [1, 1, 3], [1], [4], [], [1], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(8.0) \\g int(88.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [2, 0, 1, 0, 2, 0], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 7, 3, 9, 7, 1, 7, 3, 7, 5, 0, 4, 4, 1, 3, 6, 8, 5, 9, 4, 4, 0, 1], [0, 2, 1, 0, 2, 1, 2, 0, 0, 2, 0, 2, 2, 0, 1, 0, 2, 0], [0], [1, 2, 2, 3, 2, 2, 2, 3, 3, 2, 3, 3, 2, 3, 2, 0, 3, 0, 1, 3, 0, 1, 2, 3, 0, 0, 2, 2, 0, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 1, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 2, 0, 2, 2, 1, 1, 2, 1, 3, 0, 1, 0, 0, 3, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 3, 1, 3, 3, 1, 2, 1, 3, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 3, 1, 3, 4, 1, 4, 3, 4, 0, 1, 2, 4, 3, 4, 4, 2, 1, 3, 1, 3, 2, 2], [2, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0], [], [0, 5, 2, 0, 4, 5, 3, 1, 4], [0, 0, 1, 1, 1, 1, 1, 1], [0], [1, 1, 2, 2, 1, 4, 2, 0, 0, 4, 0, 2, 1, 2, 4, 2, 1, 0, 0, 2, 1, 4, 0, 1, 0, 1], [3, 0, 0, 2, 1], [5, 3], [0, 2, 0, 0, 1, 0, 1], [3, 3, 0, 2, 0, 3, 2, 2], [20], [10], [5, 6, 4], [6, 24, 11]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 3, 0, 1, 0, 0, 0, 3, 1, 0, 0, 2], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(7.0)\\ns0 = \"\"#?U\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [0], [0], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [0, 3], [3], [0, 1], [0], [], [1], [], [1], [], [0, 0, 1], [4, 6, 2], [0, 0, 0], [1, 1], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\ni0 *= int(462.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [3, 0], [], [0], [], [], [0], [], [], [], [0, 0, 0, 1, 0, 1], [2, 4, 5, 7, 6, 4], [0, 2, 2, 0, 0], [0], [2, 2, 0, 1, 3, 2, 2, 0, 0, 0, 1], [0, 1, 0, 0], [0], [0, 1, 1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 5, 1, 11, 4, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( mod(i2,int(2457.0)) + min(( ( i2 - i0 ) - i0 ), int(64.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 0], [2], [1, 1], [], [0, 0], [], [], [2], [2], [1, 0], [0], [], [1], [], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [3, 2, 8, 7, 3, 3, 4, 4, 0, 1, 4, 3, 2, 9, 2], [0, 2, 2, 1, 0, 1, 1], [1, 1], [3, 0, 0, 0, 1, 2, 1, 0, 2, 0, 1, 3, 1, 0, 3, 1, 1, 2, 3, 1, 3, 1, 2, 0, 0, 3, 3], [0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 4, 1, 3, 2, 4], [2, 2, 2, 1, 0], [0, 0], [4], [1], [0], [4, 2, 4, 1], [3, 2], [2], [2], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= min(i2, i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 14, 14, 13, 1, 50, 15, 9, 7, 8, 6, 0, 0, 11, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):len(in1[mod(int(0.0),i0):mod(i2,int(7.0))])] not in in1:{:\\nres0 = ( ( int(5.0) + abs(i2) ) != i0 or ( in0.endswith(s0[divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( len(saveChr(divInt(min(i1, ( max(int(6.0), i2) * int(1.0) )),int(7.0)))) - i0 ) ), i0),mod(int(7.0),abs(int(9.0))))):max(i1, divInt(( ( int(8.0) + int(5.0) ) * ( int(0.0) - i1 ) ),int(4.0)))].capitalize()) and True ) )\\n:}else:{:\\ni0 = int(8.0)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [4, 1, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 3, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 1, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in0[saveOrd(in1):]:{:\\ns1 = in0[i0:max(int(0.0), abs(( i2 * int(7.0) )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [25], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 3, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\ni0 = len(in1[abs(i1):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1, 0, 0, 0], [0], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [2, 4, 1], [0, 0, 0, 1, 2], [], [3, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0], [0, 1, 1], [1], [0], [0, 0], [5, 2, 4, 4], [], [0], [0, 2, 4, 0], [3], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 3, 1, 1, 2, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[mod(mod(int(0.0),i0),( i2 + int(7.0) )):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nres0 = in0[len(in0):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [0, 0, 1], [4, 9, 5], [1, 2], [0], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i1 \\ge int(495.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 7, 3], [2, 0, 1, 0, 1, 1, 1, 2], [], [0, 2, 0, 2, 1, 2, 2, 2, 0, 1, 2, 2, 2, 3, 1, 0, 2, 0, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0, 1, 1], [1], [1, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0], [0, 1], [], [], [2, 2, 0], [], [0, 2], [0, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 8, 0, 24, 9, 1, 4, 5, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1[i2:mod(i0,( int(1.0) - ( divInt(mod(i1,int(3.0)),( ( mod(max(int(9.0), i0),divInt(i1,i1)) + int(4.0) ) * int(7.0) )) * i1 ) ))][i2:int(3.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [8, 2], [2], [0], [1], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(82.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [1, 1], [0], [0], [], [3, 3, 4, 0, 3, 0, 1, 2, 1], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1], [0, 4], [2, 1, 2, 1], [1, 0], [3, 0, 2, 1, 0, 1], [0], [2], [0, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 6, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = abs(i2) == ( int(0.0) + i1 )\\ni2 *= int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 0, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[len(in1):]:{:\\nb1 = ( mod(int(0.0),i0) != mod(i2,int(7.0)) or ( in0.endswith(s0[( int(5.0) + abs(i2) ):i0].capitalize()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 4, 1, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [1, 2, 2], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 0, 0, 1, 1, 1], [4, 9, 2, 6, 9, 5, 4, 8, 9], [0, 2, 0], [1], [1, 2, 2, 3, 1, 1, 2, 0, 2, 0, 0, 1], [1, 1, 0, 1], [0], [0], [0, 0, 1], [2, 2], [], [], [2, 0, 0, 2, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s2[:int(49.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(s0):] not in \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 2, 0, 0, 5, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(getCharFromString(s0, len(in2[i0:]))[int(0.0):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [0, 0, 1, 1], [6, 9, 2, 5], [0], [], [1, 0], [0], [2], [], [], [4, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(int(692.0)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [3, 0, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 5, 0, 1, 0, 0, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s0[len(s2):]:{:\\nres0 = getCharFromString(in1, int(03.0))[i2:] not in in0[int(5.0):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [0], [], [2], [], [], [], [], [0, 1], [3, 8], [0], [1], [1], [], [], [0], [], [3, 0], [], [], [0, 4], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0], [1], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 0, 1], [], [1, 0, 1], [], [0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 0, 1, 1], [6, 7, 0, 7], [2, 0, 0, 1, 0, 1, 2, 1], [0, 1], [3, 2, 2, 1, 0, 2, 3, 0, 0, 0, 1, 0], [1, 1, 0], [1, 1], [2, 1, 0], [1, 1], [], [], [], [], [], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 5, 1, 11, 3, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(mod(mod(int(6.0),i0),( max(i0, i1) * i0 )), int(70.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 2], [1], [3, 3, 0, 0, 0], [0], [2, 2], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= abs(abs(i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [17], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (in2 + \"\"R\"\")\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 2, 1], [0, 1, 1], [3, 2, 2, 0, 0, 2, 0, 3, 2, 1, 0, 0, 0, 2, 2, 2, 0, 2, 3, 1, 0, 2, 3, 2, 3, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 0, 0, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 6, 0, 13, 4, 2, 3, 1, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[( ( i0 + i2 ) + ( i1 * saveOrd(\"\"R\"\") ) ):] not in in0[mod(int(0.0),i0):i1].capitalize()[:i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 3, 2, 0, 0, 4, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 7, 0, 32, 9, 8, 5, 4, 7, 1, 1, 15, 3, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in1[len(in1):] + getCharFromString(in0, i1))):]:{:\\nres0 = s0[int(0.0):abs(mod(i1,int(7.0)))] not in saveChr(mod(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len((\"\"R\"\" + in1.rstrip())) + min(i0, ( max(( int(2.0) * i2 ), divInt(abs(int(1.0)),i1)) - int(7.0) )) )) + int(7.0) ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [1, 1, 0, 1], [4, 5, 0, 1], [0, 0, 1], [], [0, 2, 0, 1, 0, 3, 2, 2, 1, 0, 1, 0], [1, 0, 0, 1], [3, 3], [1, 2, 0], [1], [5, 0, 2], [1], [], [3, 4, 4, 0, 0, 3, 1, 2, 0], [3, 0], [1], [], [2], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 != mod(i0,int(4.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1, 2], [], [0], [0], [], [0], [], [0], [], [1], [4], [2], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [], [], [2, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 6, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 2, 2, 2, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 3, 0, 0, 1, 2, 0, 3, 2, 2, 1, 0, 2, 0, 2, 2, 2, 0, 2, 1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 3, 2, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 1, 1, 3, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 0, 2, 3, 0, 4], [1], [0], [2, 0, 1, 3, 0, 4, 2, 1, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 4, 0, 2, 1, 0, 2, 1, 1, 3, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\ni1 = abs(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [5, 1], [2], [0], [3], [], [4], [], [], [5, 4], [1], [], [4, 0], [2], [], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in1.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [0, 1, 1, 1], [], [1, 1, 2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 3, 7, 2, 5], [0, 1, 1, 1, 1, 0, 2, 1], [1, 1], [1, 0, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 3, 1, 0, 1], [0, 1, 1, 0], [4, 1, 0], [0, 2, 2, 2], [0, 0], [0, 3, 2], [1], [], [2, 0, 4], [], [], [0], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(0.0)\\ni1 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [0, 1], [0, 2], [], [], [1], [], [], [], [], [2, 4], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(int(02.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 2, 3, 1, 1, 0, 2, 3, 0, 0, 1, 1, 1, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 0, 34, 9, 8, 5, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = in1[len(in0):] not in getCharFromString(s0[i0:abs(min(mod(i2,int(0.0)), mod(int(2.0),len(saveChr(i2)))))], ( divInt(( int(7.0) + i0 ),divInt(min(( int(7.0) + ( max(int(2.0), int(1.0)) * i1 ) ), ( abs(i2) - i1 )),int(7.0))) + int(7.0) ))[int(9.0):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [3, 2, 3], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [], [0, 0], [], [], [1, 2, 0], [4, 5], [0, 0, 1, 1], [0, 0], [], [0, 3], [0], [0], [], [0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 6, 6, 7, 5, 0, 5, 0, 9], [2, 1], [], [1, 3, 2, 0, 1, 3, 2, 1, 0, 1], [1, 1], [3, 1], [], [0, 0], [0], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 3, 2, 4, 2, 0, 2, 1, 0, 0, 9, 9, 2, 0, 10, 2, 2, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b2\\nb0 = ( int(066750.0) \\le len(s0) and divInt(i2,int(5.0)) != max(divInt(int(0.0),i1), int(9.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 2], [1, 0, 1, 2], [0], [3, 3, 3, 2, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1], [1, 2, 2, 1, 2], [2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 12, 2, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = max(abs(abs(( max(divInt(i0,int(5.0)), i1) * int(7.0) ))), abs(i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [3], [], [3], [0], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 1], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [9], [0], [0], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 0], [0], [0, 0], [0], [], [0], [], [], [], [1, 0, 1, 1], [9, 3, 4, 0], [], [], [1, 2, 1, 1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 1, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len((s0 + in0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 1], [], [0], [], [], [0], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1], [4, 2], [1], [1], [1, 2, 3, 3, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0, 0, 0], [], [], [0, 2], [], [0, 2, 0], [], [0], [3, 0], [1], [0], [], [0], [2], [2], [], [0, 0], [], [], [], [1, 1, 0, 0, 0, 0, 1, 0], [5, 4], [], [], [0, 4, 2, 0], [1, 2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [1, 2, 1, 1], [0, 1], [0, 0, 1], [1], [], [1], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\ni1 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 3, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 8, 1, 3, 0, 1, 5, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in getCharFromString(in2, len(in1[abs(i1):]))[int(0.0):]:{:\\nin1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = abs(mod(i1,int(7.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [0, 3, 1, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 2, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 2, 1, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 4, 1, 1, 7, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[:i0][len(s1[int(0.0):i2]):]:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 1, 1, 0, 0], [0], [2, 1, 0, 0], [0], [0, 0], [], [], [2, 1], [5, 0], [1, 0, 1], [0, 0], [], [2], [], [], [0], [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 8, 2, 6, 8, 1, 4, 0, 0, 9, 0, 5, 9], [0, 2, 2, 2, 0], [0], [2, 0, 1, 2, 2, 0, 2, 1, 2, 1, 0, 1, 1, 1, 0], [1, 1, 0, 1, 1], [], [0], [0, 1, 1, 0], [5, 0, 0, 3], [1], [0], [0, 0], [0, 1, 3], [], [], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 1, 4, 1, 2, 0, 0, 2, 2, 3, 2, 0, 1, 0, 0, 0, 13, 13, 5, 1, 15, 5, 0, 1, 4, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\ns0 = in0\\ni0 = divInt(i2,int(5.0))\\nb2 = mod(( i2 + mod(int(82.0),divInt(int(68.0),i2)) ),int(14.0)) != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = not int(09059.0) \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ns2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(getCharFromString(s0, len(in2)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2, 1], [1], [2, 3, 0], [0], [3], [0, 0], [], [0], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 1, 1, 2, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( len(s0.capitalize()) + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):saveOrd(\"\"R\"\"[mod(int(0.0),i0):])]:{:\\nin1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [0, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = s2 not in \"\"R\"\"\\ni1 += len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1, 1, 0, 0, 1], [0, 7, 5, 1, 1, 6, 1, 1], [1, 1, 2, 0, 2], [1, 1], [2, 3, 1, 0, 0, 1, 2, 1, 2, 1, 3, 1], [1, 0, 0], [0, 4, 3], [1, 0, 0, 0], [1, 0], [5, 1], [], [], [2, 0, 2, 0], [], [], [2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 4, 2, 6, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= mod(min(int(0751.0), i1),i2)\\ni0 += int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [2, 0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [0, 6, 2, 0, 0, 4, 3, 0, 7, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 3, 2, 2, 3, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [2, 1], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [4, 0], [1], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s0[saveOrd(in2):]) != ( int(0.0) + i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 0], [], [0, 0], [], [], [3, 2, 3], [0], [1], [0], [], [], [], [], [], [], [], [1, 2, 1, 2, 2, 1], [1], [3, 2, 0, 0, 2, 0, 0], [0, 1], [4], [0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 3, 0], [1], [], [0, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 1, 1, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in0\\nres0 = saveOrd(s0) \\l ( i1 + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [1], [2], [], [0], [], [], [], [], [0], [], [], [1], [], [0], [0], [1], [0], [2], [], [1, 0], [], [], [], [], [2, 4], [], [], [0, 2], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif True:{:\\ns2 = in1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [2, 3, 4], [0], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= int(234.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [2, 0], [], [0, 0], [], [], [3, 2, 3], [], [], [], [], [], [], [], [], [], [], [1, 2, 1, 2, 2, 1], [1], [3, 2, 0, 0, 2, 0, 0], [0, 1], [4], [0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 0], [1], [], [0, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [5, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [2, 9, 2, 5, 4, 5, 9, 0, 3, 9, 4, 1, 4], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 0], [1, 2, 2, 1, 0, 2, 3, 3, 1, 1, 1, 2, 3, 3, 3, 3, 1, 0, 1, 3, 1, 0, 0, 3], [0, 0, 0, 1], [0, 2, 3, 2, 3, 0, 2, 0], [1, 0, 2, 0], [0], [0, 2], [], [], [4, 0, 2, 2, 2, 4, 0], [3, 2], [1], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 3, 2, 11, 3, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(29.0)\\ni2 = ( ( int(2.0) - i1 ) + ( min(abs(int(54.0)), int(5.0)) * int(90394.0) ) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [4, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2.rstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 8, 8, 10, 0, 38, 12, 8, 6, 6, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( min(saveOrd(s0[( int(1.0) + i0 ):]), ( i2 + ( mod(int(7.0),abs(i2)) * i0 ) )) != mod(divInt(int(5.0),i1),( min(( i2 - divInt(len(in2),( min(i1, divInt(max(int(7.0), i2),int(6.0))) + int(1.0) )) ), i0) * i0 )) or True ) and in1[divInt(int(7.0),abs(int(7.0))):] not in in1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 2, 8, 1, 3, 1, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in0):]:{:\\ni2 = max(i2, int(07.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += abs(mod(i0,int(5.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [0], [], [0], [], [], [2], [], [1], [], [], [], [2, 0, 1, 1], [0], [2, 0, 3, 0, 0], [1], [1], [2], [0], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(i0,max(i1, i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 0], [], [2, 0, 2], [], [0, 0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 8, 9, 7, 0, 1, 2, 6, 7, 5, 5, 2, 0], [2, 1, 0, 1, 1, 2, 2, 2, 0, 1, 0, 0], [], [0, 1, 1, 0, 0, 1, 2, 0, 0, 3, 3, 1, 1, 3, 0, 0, 2, 0, 3, 2, 2, 0, 2, 0, 3, 2, 1, 1, 1, 2, 1, 2, 0, 0, 2, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0], [1, 3, 4, 2, 1, 1], [1, 0, 2, 0, 1, 1], [0, 0, 0], [1, 3, 2, 3, 1, 1, 2, 0, 5], [], [], [4, 0, 0, 0, 2, 2, 0, 4, 2, 3, 3, 4, 4, 0, 3, 0, 2, 3, 4, 2, 4, 0, 0], [2, 3, 2, 1, 0], [1], [0, 1, 1, 1, 2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in0.capitalize()\\nb0 = i2 == int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 1], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 1, 13, 13, 13, 1, 49, 16, 8, 5, 11, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(s0[i0:]) != i2:{:\\nres0 = ( int(0.0) \\l max(mod(i2,int(7.0)), mod(int(5.0),abs(i0))) or ( in2 not in getCharFromString(in1, divInt(divInt(( min(i1, divInt(len(in1),( i2 + divInt(( mod(int(7.0),i1) + ( min(int(4.0), i2) * int(1.0) ) ),int(7.0)) ))) - i0 ),i0),divInt(int(7.0),max(int(9.0), abs(i0))))) and True ) )\\n:}else:{:\\ni1 = ( divInt(mod(int(8.0),int(5.0)),divInt(int(0.0),i1)) + int(4.0) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [0, 1], [1], [3, 1], [], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(int(5.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0, 2], [], [0], [], [], [1], [], [0], [], [], [], [0, 2], [0], [0], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [1, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 1, 3, 2, 0, 2, 1, 2, 1, 0, 3, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 1, 0, 3, 0, 4, 2, 1, 1, 0, 1, 3, 0], [0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nb0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [2, 4, 3, 4, 8, 9, 2, 6, 2, 7], [1, 0], [0, 1], [1, 1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(24.0)\\ni0 *= int(34892627.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\" not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [], [2], [], [5], [], [], [], [], [], [], [2, 0], [1], [0], [], [], [0], [], [0, 2], [], [], [0, 4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s0.endswith(saveChr(i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1, 0, 0, 0, 1], [2, 1, 4, 2, 9, 3, 5, 9, 6], [2, 0, 2, 2], [0], [2, 0, 1, 3, 0, 1, 0], [1, 0], [1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(i0,int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0, 2, 0], [0], [0, 1, 1], [0], [0, 0], [], [], [1], [], [2], [], [3], [], [], [], [], [1, 1, 1, 1], [6, 2, 9, 6], [0, 1, 0, 0, 0, 1, 0, 0], [0, 0], [0, 3, 1, 1, 3, 2, 0, 0, 3, 1, 2, 0, 1, 3, 3, 0, 1], [0, 0, 0], [3, 4, 3, 3], [0, 1, 0], [], [4], [1], [0], [2, 2, 0, 4, 1, 4, 4, 4, 2, 0, 1, 0], [1, 1, 1, 2], [], [0, 0, 2], [3], [], [], [], [10]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 1, 0, 1, 1, 0, 6, 2, 0, 2, 1, 0, 0, 0, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = in1[i0:len(saveChr(int(6.0)))][int(2.0):saveOrd(\"\"\"\\\\\"\"\")] != saveChr(( i1 + i0 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 3, 0], [0], [2], [0, 2], [], [3], [1], [], [0], [], [], [], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [2, 0, 1, 0, 2, 0], [], [], [], [], [], [], [1, 1, 0, 1, 1], [], [0, 0], [0], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [3], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [0, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 0], [], [1, 2, 3, 1], [0], [3], [1], [], [1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\ge ( len(s1) - int(8.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [], [0, 0], [], [], [2], [4], [0, 1], [0], [], [2], [], [1], [], [1, 0, 0, 0, 1, 1], [2, 3, 1, 3, 0, 8], [2, 1], [0, 0], [1, 0, 1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 5, 5, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(2.0)\\nb2 = not i1 \\le int(3130.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [0, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 2, 1], [], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [], [1, 0, 0, 1], [3, 1, 5, 1], [2, 1, 0], [1, 1], [3, 1, 0], [], [4], [0, 2], [], [1, 5, 2], [], [], [4, 0, 0, 4], [0, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += saveOrd(getCharFromString(s1, int(3.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [0, 0], [], [], [0, 3], [1], [0, 1], [0], [], [1], [], [1], [], [], [], [1, 2], [0], [0, 2, 3, 0], [0], [4], [2], [], [1, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 2, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\nres0 = i1 \\g ( saveOrd(s1) * i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1, 1, 1], [2, 2, 1, 0, 1], [0, 2], [1, 1, 2], [0], [0, 0], [], [], [1], [], [0, 0], [], [], [1, 0], [], [1], [], [1, 0, 1, 1, 1], [0, 8, 1, 4, 6], [2, 0, 0, 2], [1, 0], [1, 3, 1, 2, 2, 0, 1, 1, 2, 0, 1], [1, 0, 1], [2, 0, 0], [1, 1], [0, 0], [4, 4, 0, 4], [], [0], [4, 4, 0, 0], [1, 2], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 5, 5, 3, 2, 8, 2, 1, 2, 1, 3, 0, 1, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in saveChr(int(0.0)):{:\\nloopBreak% = 0\\nwhile False:{:\\ni2 -= abs(int(81.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = divInt(( i0 - int(4.0) ),int(6.0))\\nin1 = s0.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [], [0, 0], [], [], [0, 0], [2], [0, 1], [0], [], [1], [], [0], [], [0, 1], [2, 3], [1, 1], [], [0, 0], [], [2], [], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\nb0 = i1 == i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [0, 0], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [0], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0], [], [1, 0, 0], [], [0], [], [], [0, 2, 1], [5], [0, 2], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0], [0, 1], [0, 0, 3, 2, 2, 2, 2, 2, 1, 0, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [0, 0], [1, 0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 3], [1], [0], [0], [], [0], [], [], [], [1, 1, 1], [1], [], [], [3, 3, 1], [], [4, 4], [], [], [1, 4], [], [], [0, 4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 0, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [3, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = s0[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0, 0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 5, 7, 7, 2, 2, 8, 1, 1, 6, 8, 0, 2, 1, 0, 8, 8, 7, 7, 9], [1, 2, 0, 2, 0, 2, 1, 2, 1], [], [1, 3, 2, 2, 2, 1, 3, 1, 0, 0, 0, 1, 2, 3, 2, 3, 3, 3, 2, 0, 0, 1, 2, 2, 2, 0, 1, 0, 0, 2, 1, 2, 1, 3, 2, 2, 3, 2, 0, 1, 2, 1, 1, 3, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], [1, 1, 1, 1, 0, 4, 3, 4, 1, 4], [0, 0, 2, 1, 1, 1, 0, 1, 0, 2], [1, 1, 0, 0, 0], [5, 5, 3, 4], [], [], [4, 0, 2, 0, 0, 0, 1], [3], [0], [1, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 3, 0, 12, 3, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g max(( ( mod(int(1.0),max(int(5.0), i1)) + i2 ) + i0 ), int(77.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 3, 8, 5, 9, 9, 2, 2], [0, 0, 1, 2, 1, 1, 1, 1, 1, 2, 1, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 2, 1, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 0, 2, 0, 0, 4, 0, 1, 7, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(s1[min(i0, int(0.0)):].capitalize()):]:{:\\nres0 = in1.endswith(saveChr(i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 5], [1, 1], [0], [0, 1, 1], [], [], [], [], [5, 0, 2], [1], [], [3, 4, 1, 0, 1, 3, 0, 2, 0], [2, 0], [0], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 1, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 3, 2, 1, 6, 0, 0, 2, 2, 2, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = \"\"R\"\"[min(mod(int(0.0),i0), mod(i2,int(7.0))):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [2, 0, 1, 0, 2, 0], [], [], [], [], [], [], [1, 1, 1], [1, 3, 2], [0, 0], [0], [1, 2, 3, 3, 3, 1, 3, 0, 0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 2, 3], [2], [], [4, 2], [], [], [0], [], [], [1, 2, 2, 2], [0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [1], [1, 1], [0], [], [2], [], [], [], [1, 0, 1], [8, 9, 7], [2], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(8.0) \\g i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 4, 1, 1, 1, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\ni1 = ( len(in1[i1:]) + int(0.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [0], [1], [0], [2], [], [], [], [], [1, 1], [0, 2], [2, 0, 0, 2], [], [2, 2, 0, 3, 0, 0, 0], [0, 1], [3], [1, 1], [0, 1, 0, 0, 0, 0, 1, 0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 2, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( divInt(i2,len(saveChr(i0))) - i0 ) \\l i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [0], [1], [0], [], [], [], [], [], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 4, 3, 7, 2, 7, 1, 3, 6, 8, 9, 0, 2], [0, 0, 2, 0, 0], [], [3, 1, 1, 2, 2, 3, 1, 2, 0, 2, 3, 0, 1, 3, 0, 3, 3, 0, 3, 1, 1], [0, 1, 1, 0], [1, 1, 4, 0, 4, 2, 0], [0, 1], [1, 1], [3, 2, 3], [], [], [3, 4, 4, 2, 0, 0, 0], [3, 1], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 4, 0, 21, 4, 7, 2, 2, 3, 0, 0, 7, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(int(6.0), int(4.0)) \\l ( mod(max(int(37.0), mod(i0,( saveOrd((saveChr(i0).rstrip(in0[int(2.0):]) + s2)) + min(i2, saveOrd(in0)) ))),abs(i0)) - min(int(713.0), int(68902.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [], [2, 0, 1, 0, 2, 0], [0, 0], [], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 4, 9, 8, 1, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 2, 2, 0, 1, 2, 1, 1], [0, 1, 1], [0, 3, 2, 1, 3, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 0, 2, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 1, 1, 2, 1], [], [1, 1, 1, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [3, 1, 3], [3, 0], [2, 2, 2], [0], [22], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[i0:]:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [0], [0, 0], [], [], [1, 1, 3], [], [0, 0], [], [], [1, 0], [], [0], [], [1, 0, 1], [8, 4, 7], [2], [0], [2, 2, 1, 3, 1], [0, 0], [4], [1], [0], [3, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 3, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\nb1 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [0], [], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 1], [5, 4, 4, 6, 9], [0, 2], [0, 1, 1], [2, 1, 1], [0], [2], [1, 1], [1], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 1, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( int(5.0) - int(4469.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 1, 2, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 8, 0, 33, 11, 7, 6, 5, 6, 1, 1, 12, 3, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = in1[len(in0):] not in saveChr(mod(i0,len(s0[( i2 + int(1.0) ):( int(7.0) + min(i0, divInt(( mod(int(5.0),i0) * ( ( divInt(i1,len(\"\"R\"\".lstrip())) - min(( int(7.0) + int(7.0) ), divInt(max(int(1.0), i2),int(7.0))) ) * i1 ) ),i0)) )]))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 0], [], [0], [], [], [0, 0], [2], [1], [0], [], [1], [], [0], [], [1, 1], [3, 5], [], [], [1, 3, 1], [], [2], [], [], [1, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in0\\nb0 = int(3.0) == abs(int(5.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 0, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 1, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 11, 2, 5, 1, 1, 4, 2, 1, 7, 0, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[min(abs(i0), min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in1) ))):] not in \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0], [0, 2], [1], [0], [0], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [], [], [0, 2], [0], [0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [4], [], [], [0, 2], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = i0 \\ge i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 12, 12, 11, 0, 49, 16, 10, 8, 8, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):max(i0, abs(min(mod(i2,int(2.0)), mod(int(7.0),len(\"\"R\"\")))))]:{:\\nres0 = ( ( i2 != ( divInt(( min(i0, divInt(max(( i1 + ( divInt(( int(5.0) + i2 ),divInt(abs(int(7.0)),i1)) * int(4.0) ) ), int(1.0)),i2)) - i0 ),mod(int(7.0),max(int(7.0), abs(i0)))) + ( ( ( int(9.0) * int(8.0) ) - divInt(int(5.0),i2) ) - int(0.0) ) ) or True ) and in1 not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 1, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 0, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 1, 0, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[len(s1):] not in getCharFromString(in0, i0)[int(0.0):abs(( i2 + int(4.0) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 2, 0, 1, 1, 0, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = len(in1.capitalize()) \\l i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 1, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[:len(in1)]:{:\\ns1 = in0[abs(i1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in2[len(in1):len(in1[abs(i0):])] not in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = max(saveOrd(s0), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 1, 11, 2, 5, 1, 1, 4, 1, 1, 7, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString(in1[len(in1):], abs(i0))):]:{:\\ni1 = min(mod(int(0.0),int(7.0)), ( int(5.0) + len(\"\"R\"\") ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 8, 1, 3, 0, 1, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1)]:{:\\nres0 = i0 != int(7.0)\\ni0 = abs(mod(i2,int(7.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1, 0, 0, 0, 1], [7, 8, 0, 2, 8, 6, 1], [0, 1, 0], [], [2, 0, 0, 2, 1, 2, 1, 0], [0, 1, 0], [], [0, 0], [0], [2, 5], [], [], [2, 2, 0], [2], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 3, 0, 8, 3, 0, 2, 1, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2[:( i0 + i1 )][:divInt(int(780.0),( int(2861.0) + i0 ))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 0], [], [2, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveChr(i1) != in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [0, 3], [3], [0, 1], [0], [], [1], [], [1], [], [0, 0, 1], [4, 1, 2], [2, 0, 1], [1, 1], [0, 1], [], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i0\\ni1 -= int(412.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1, 0], [], [0], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [1], [1], [0], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 2, 3], [2, 1, 1, 0, 2, 1], [], [3, 2, 3, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 2, 0, 2, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0], [1, 2], [0, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0], [0, 1], [], [], [4, 2, 0], [2], [0, 2], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 16, 6, 2, 2, 4, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1[:max(mod(abs(mod(int(1.0),( int(3.0) + mod(i2,int(9.0)) ))),divInt(( i1 * i1 ),int(4.0))), i0)].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [0, 0, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 1, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 3, 1, 1, 6, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:][i2:]:{:\\nb2 = in0[i0:i0] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 2, 1], [0, 1], [0], [0], [0], [], [], [0], [3], [1, 2], [0], [], [1], [1, 0], [0], [0], [1, 1], [7, 2], [0, 0], [0], [0, 1, 2], [], [], [], [], [0, 3, 0, 4], [], [0], [3, 3, 3, 4, 4, 0, 0], [1], [], [2, 2, 0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\ge int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 2], [0], [0, 0], [], [], [0], [2], [1], [0], [5], [], [], [], [], [1, 1], [3, 9], [0, 2], [], [1, 0, 1], [], [2], [], [], [4, 1, 5], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(3.0) == i0\\nin1 = saveChr(int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1, 1], [2, 4], [2, 0, 0, 0], [1, 1], [2, 1, 0, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [2, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 2, 5, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= divInt(int(2.0),i0)\\ni0 *= abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [], [2], [], [5], [], [], [], [], [], [], [2, 0], [0, 0], [0], [], [], [0], [], [0, 2], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s0.endswith(s2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 3, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 13, 3, 5, 1, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = len(in1[mod(abs(i0),mod(i2,int(0.0))):]) != ( int(7.0) + min(i2, len(in0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 2], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 2, 0, 0, 0, 3, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 3, 4, 0, 3, 2, 0, 0, 5, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(saveChr(min(mod(mod(i0,i1),i2), abs(divInt(int(0.0),min(int(7.0), i0))))).capitalize()):] not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 1, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 1, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 2, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[abs(len(in2)):]:{:\\nres0 = in1[i0:] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [3, 9], [0], [0], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(39.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0, 0], [], [0], [], [], [0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 1], [1], [3, 3, 2, 0, 0], [0], [1, 3], [1, 0], [], [0], [1], [], [1], [3, 1], [], [], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 1, 2, 2, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= max(len(\"\"r\"\"), ( i1 + i2 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 9, 8, 4, 5, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nb2 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[divInt(int(7.0),min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(( i2 + min(max(( int(7.0) * i1 ), divInt(abs(int(0.0)),i2)), int(1.0)) ))),int(7.0))) - i0 ))):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0], [0], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [2, 2, 0, 0, 1], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 12, 3, 2, 2, 1, 2, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[min(abs(( int(0.0) + i0 )), mod(i2,int(7.0))):]:{:\\nres0 = ( int(5.0) + i2 ) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1], [7], [2], [1], [1], [], [], [0], [], [5], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [1, 0], [0], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [2], [], [], [], [], [], [], [], [], [1, 1], [9, 4], [1, 2], [0], [1, 1, 1], [], [], [], [1], [3, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [1], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0, 1, 1], [8, 5, 3, 9, 1, 1], [0, 2, 1], [1], [2, 1, 3, 2, 1, 0, 3, 2, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 2], [0, 0, 2], [1, 0], [1], [], [], [4, 0], [2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 3, 1, 11, 3, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += ( int(8.0) + min(( int(53.0) * i2 ), min(mod(int(91.0),int(1.0)), i1)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1], [5, 1, 2, 6, 8, 8, 2, 5, 0, 8, 4, 1, 8, 5, 0, 1, 2, 4, 2, 9, 2], [2, 0, 2, 1, 2, 2, 2, 2, 2, 2, 1, 0], [0], [0, 3, 0, 0, 0, 2, 0, 2, 3, 1, 1, 0, 3, 0, 2, 0, 0, 0, 0, 2, 2, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0], [4, 0, 3, 3, 2], [1, 2, 2, 2], [0, 1, 1, 0], [3, 4], [], [], [4, 2, 2, 2, 4, 0, 4, 2, 4], [1, 0, 2, 2], [], [0, 0, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = saveChr(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0[abs(i1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [4, 6, 5, 1, 1, 6, 1, 1, 9, 0, 9, 7, 6], [1, 2, 0, 0, 2], [1, 0], [2, 3, 2, 0, 0, 1, 2, 1, 2, 1, 3, 1], [1, 0, 0, 1], [0, 4, 3], [1, 0, 0, 0], [0, 0], [5, 1], [], [], [2, 0, 2, 0], [], [], [2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 3, 1, 12, 4, 2, 3, 2, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= divInt(min(( i2 + i0 ), int(4651.0)),( int(1.0) + divInt(int(611.0),saveOrd(in2[int(90976.0):])) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 4, 0, 2, 1, 0, 3, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(\"\"R\"\")]:{:\\ni0 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [2, 1, 2], [0, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [2, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [1], [3, 0, 1, 1], [], [2], [1], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[:abs(i0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 1], [1, 1, 0, 0], [], [2, 0, 0, 2], [], [0, 0], [], [], [1, 1], [5, 0, 0], [2, 0], [0, 0], [3], [1], [], [0], [], [1, 0, 1, 1, 0, 0, 0, 1], [8, 5, 7, 1, 5, 3, 4, 1], [0, 2, 0], [1], [1, 1, 3, 2, 2, 1, 1, 0], [0, 1], [1, 3], [1, 2], [], [5, 2], [1, 0, 1], [], [1, 2, 4, 2, 0, 2, 1], [3], [2], [0, 1, 1], [3, 2, 3], [5], [], [], [6, 18]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = \"\"#\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [3, 7], [2, 0, 0, 2], [], [2, 2, 0, 2, 0, 0, 0, 0, 1], [0, 1, 0, 0], [], [0, 2], [1, 0], [2, 2, 2], [], [], [4, 3, 0, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 3, 0, 2, 1, 3, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = getCharFromString((s2 + s2), ( mod(i2,( i0 + i0 )) * i2 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [3, 3, 1], [], [0], [], [1], [0], [1, 1], [1], [2, 0, 1], [1], [], [1], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= divInt(i1,int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [3], [0], [1], [0], [], [], [], [], [], [0, 1, 0, 1], [6, 0, 2, 7], [1, 0], [1], [1, 1, 0], [], [], [1], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(60.0) \\l int(27.0)\\ni1 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [2], [], [0], [], [], [], [], [2, 0, 1, 0, 2, 0], [0, 0], [2], [1], [], [0], [0], [1, 1, 1], [1, 7, 3], [2, 2, 1, 0, 2, 1], [], [1, 0, 0, 2, 2, 3, 2, 0, 2, 0, 3, 1, 2, 1, 0, 0], [1, 1, 1, 0, 1], [2, 4], [2], [0, 1, 1, 1], [2, 4, 5], [0, 0, 0, 0, 1], [], [0, 2, 4, 2, 0, 4, 1], [0, 1], [], [1, 0], [3, 0, 0, 2, 3], [21, 14], [], [6], [27, 4]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [0, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\ni2 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0], [], [1, 1, 0], [], [0], [], [], [0, 2, 1], [5], [0, 2], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [1, 0, 2, 0, 1, 1, 0], [0, 1], [0, 0, 3, 2, 2, 2, 2, 2, 1, 0, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [2, 0], [1, 0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\ni2 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [0, 3, 1], [2, 1, 1], [0, 0], [1, 3, 0], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(031.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 2, 0, 2, 3, 1, 0, 0, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [], [0], [0, 0, 0, 2, 0, 3, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 3, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 3, 0, 1, 1, 0, 1, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 1, 0, 1, 2, 1, 3], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 4, 4, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 9, 0, 38, 8, 10, 5, 3, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nb1 = in1[mod(i0,int(0.0)):] != getCharFromString(in1[:len(saveChr(int(0.0)))], i2)[int(5.0):mod(int(7.0),max(i2, ( divInt(min(int(2.0), i0),( max(( i1 - ( min(max(int(1.0), i2), ( abs(max(i1, int(7.0))) + int(7.0) )) * i0 ) ), int(9.0)) - i0 )) + int(8.0) )))][len((\"\"R\"\" + in1.rstrip())):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [], [], [2, 1], [1], [0, 0], [], [2], [1], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i2 != i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 2], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 3, 4, 0, 3, 2, 0, 0, 5, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(saveChr(min(mod(int(0.0),i0), mod(i1,abs(divInt(int(7.0),min(i1, i0)))))).capitalize()):] not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1], [0, 4, 0, 9], [2, 2], [], [2, 0, 0], [0], [], [1], [], [1], [], [], [4, 4], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 1, 0, 1, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = saveChr(( i2 - i2 )).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 2], [0], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 2, 2, 3, 2, 1, 1, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 2, 3, 0, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(s0[len(in2):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [0, 2], [], [0], [], [], [1, 2, 2], [5], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [8, 5, 2], [0, 2], [], [1, 3, 1, 0, 3, 1, 0, 1], [1], [0, 0], [], [0], [2, 5], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(8.0) != min(int(5.0), i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [2, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 1, 2, 2, 0, 1, 1, 1, 3, 2, 2, 2, 3, 1, 0, 2, 3, 3, 2, 2, 3, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [3, 3, 2, 4, 3, 0, 1, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 9, 2, 2, 0, 2, 5, 0, 0, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[len(s0):]:{:\\nin0 = saveChr(i1)[int(0.0):mod(mod(i2,int(7.0)),int(1.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 1], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 1, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 2, 8, 1, 3, 1, 1, 2, 1, 1, 3, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\ni2 = max(i2, int(07.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += abs(mod(i0,int(5.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [1, 1, 0, 1], [4, 5, 0, 1], [0, 0, 1], [], [0, 2, 0, 1, 0, 3, 2, 2, 1, 0, 1, 0], [1, 0, 0, 1], [3, 3], [1, 2, 0], [1], [5, 0, 2], [1], [], [3, 4, 4, 0, 0, 3, 1, 2, 0], [3, 0], [1], [2, 1], [2], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 != mod(i0,int(4.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 9, 3, 6, 1, 4, 3, 0, 4, 8, 1, 5], [0, 0, 0, 0, 2, 0, 0, 0, 2, 2], [0], [3, 2, 0, 0, 2, 3, 2, 2, 1, 2, 1, 2, 2, 2, 0, 0, 3, 2, 2, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0, 3, 3, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 2, 4, 0, 2, 1, 0, 1], [0, 0, 2, 1, 2, 2, 2], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 1], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 10, 1, 47, 16, 8, 5, 11, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = max(divInt(i0,i0), divInt(abs(mod(divInt(int(4.0),divInt(int(0.0),mod(divInt(divInt(i0,i2),saveOrd(saveChr(divInt(( min(int(0.0), ( int(9.0) + abs(int(3.0)) )) + int(6.0) ),divInt(( int(1.0) * i0 ),max(( ( int(4.0) - mod(i0,i0) ) * int(3.0) ), int(0.0)))))[:i2])),min(max(int(4.0), int(8.0)), int(1.0))))),int(5.0))),i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [1], [2], [], [0], [], [], [], [], [0], [], [], [1], [], [1], [0], [1], [0], [2], [], [1, 0], [], [], [], [], [2, 4], [], [], [0, 2], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [4, 0, 1, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1, 5, 8, 3, 6], [0, 0, 0, 0, 2, 0, 0, 1, 0, 2], [1], [3, 2, 0, 0, 2, 3, 2, 2, 1, 2, 1, 2, 2, 2, 0, 0, 3, 2, 2, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 2, 3, 3, 1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1], [1, 2, 4, 0, 2, 1, 0, 1], [0, 0, 2, 1, 2, 2, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1], [], [], [2, 4, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 10, 1, 49, 17, 8, 5, 13, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += max(divInt(i0,i0), divInt(abs(mod(divInt(int(4.0),divInt(int(0.0),divInt(divInt(divInt(i0,i2),saveOrd(saveChr(divInt(divInt(min(int(1.0), ( int(7.0) + abs(int(3.0)) )),int(6.0)),divInt(( int(1.0) * i0 ),max(( ( int(4.0) - divInt(i0,i1) ) * int(3.0) ), int(0.0)))))[:mod(min(max(int(4.0), int(8.0)), int(1.0)),int(5.0))])),i0))),int(836.0))),i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [2, 0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [0], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [0, 6, 2, 0, 0, 4, 3, 0, 7, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 3, 2, 2, 3, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [2, 1], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [4, 0], [1], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [5, 9], [0, 1, 2, 0], [0, 1, 1], [3, 3, 2, 1, 2, 0, 3, 0, 1, 0], [1, 1, 0], [0, 2, 3], [2], [0, 1, 1], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 8, 2, 3, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = min(abs(divInt(int(5.0),mod(i1,len(in2)))), i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 9, 1, 5, 4, 5, 9, 0, 3, 9, 4, 1, 4], [2, 1, 0, 2, 2, 2], [0, 1], [1, 2, 3, 2, 0, 3, 0, 3, 3, 1, 2, 2, 1, 3, 3, 3, 1, 0, 1, 3, 1, 0, 0, 3], [0, 1, 0, 1], [0, 2, 3, 2, 3, 0, 2, 0], [1, 0, 2, 0], [1], [0, 2], [], [], [4, 0, 2, 2, 2, 4, 0], [3, 2], [1], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 4, 2, 10, 2, 4, 2, 1, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(391.0)\\ni1 -= ( min(mod(i0,abs(i2)), len(s0.rstrip())) + abs(int(54.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [2, 1], [], [0], [], [], [1, 0], [], [0, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = saveChr(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [0, 2], [1], [2, 3, 1], [0], [3], [1, 1], [1], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( len(in0) - int(5.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0, 0], [0], [3, 0, 1], [0], [3], [2, 2], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 3, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 12, 1, 49, 16, 10, 8, 8, 6, 0, 1, 8, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = max(i0, abs(min(mod(i2,int(2.0)), mod(int(7.0),len(in1))))) != i2\\ni0 = ( divInt(( min(i1, divInt(max(( i2 + ( divInt(( int(5.0) + i1 ),divInt(abs(int(7.0)),i2)) * int(4.0) ) ), int(1.0)),i0)) - i0 ),mod(int(7.0),max(int(7.0), saveOrd((in0 + s0[i0:]))))) + ( ( ( int(9.0) * int(8.0) ) - divInt(int(5.0),i1) ) - int(0.0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 2, 1], [0], [0, 0, 1, 0, 0], [], [0, 0, 0], [], [], [0, 2, 3, 3], [2, 5], [0, 1, 0], [0, 0], [], [1, 0], [], [1], [], [1], [5], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [1], [0, 1, 0, 0], [], [], [0], [], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\nb2 = i0 == int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [2], [0, 1], [], [0], [], [], [2, 3], [1], [0, 1], [0], [], [0], [], [], [], [], [], [1, 2, 2], [1], [0, 0, 3], [], [3], [1], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b2:{:\\nres0 = i1 \\g i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1, 0], [], [1, 0, 1], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 9, 0, 9, 5, 8, 3, 4, 9, 2, 1, 7, 3, 4, 6, 6], [0, 1, 2, 2, 1, 0, 1], [1, 0], [3, 2, 2, 3, 1, 1, 0, 1, 2, 0, 2, 0, 3, 1, 1, 2, 3, 3, 1, 3, 1, 2, 0, 3, 1, 0, 2, 1, 1], [1, 1, 1, 0, 1, 1, 0], [0, 0, 4, 1, 1, 3], [1, 0, 0], [1, 1, 0, 0, 0], [4, 5], [], [], [0, 4, 3, 3, 4, 0, 4], [0, 1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 4, 1, 15, 4, 3, 2, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= min(mod(mod(min(int(0.0), int(90.0)),i1),int(9.0)), divInt(i2,( i2 + saveOrd(in1) )))\\nb1 = int(5.0) \\ge int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [0], [0], [0], [], [1], [], [1], [], [1], [0], [0, 2], [], [2, 0, 1, 0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 3, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 2, 2, 1, 0, 2, 0], [0, 1, 1], [3, 0, 2, 1, 0, 2, 1, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 3, 2, 3, 1, 3, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 2, 0, 1, 2, 1, 4], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 13, 13, 10, 0, 49, 16, 10, 7, 9, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( ( len(in1[i0:]) != mod(int(0.0),i2) or True ) and in2.startswith(in1[mod(int(7.0),( divInt(int(5.0),max(i0, i0)) + divInt(divInt(int(7.0),i1),( abs(( i2 * divInt(min(( abs(min(mod(max(int(6.0), abs(int(1.0))),int(7.0)), i2)) * i2 ), divInt(int(7.0),max(int(9.0), saveOrd(in1)))),i1) )) - ( ( ( int(8.0) + int(5.0) ) * mod(int(0.0),i0) ) - int(4.0) ) )) )):]) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1], [4, 2, 3, 1, 5, 9, 4, 8], [1, 2, 0], [1, 0], [1, 2, 3, 3, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 2], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 3, 2, 6, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(4.0)\\ni2 = ( abs(abs(int(2315948.0))) * i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [2], [1, 1], [], [0, 0], [], [], [], [3], [0, 1], [0], [], [2], [], [], [], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [4, 6, 0, 1, 3, 7, 1, 6, 6, 4, 9, 8, 7, 6, 1, 2, 5, 2, 2], [2, 1, 1, 2, 1, 2, 1, 2], [0, 1, 1], [1, 2, 0, 2, 3, 3, 2, 0, 0, 1, 1, 0, 3, 1, 1, 1, 1, 0, 2, 2, 1, 2, 0, 1, 1, 1, 1, 1, 3, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1], [1, 2, 1, 4, 2], [1, 1, 2, 0, 0], [1, 1, 0, 0, 1, 1], [], [], [], [2, 4], [1], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 7, 7, 6, 2, 15, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(4.0)\\nloopBreak% = 0\\nwhile not ( i1 - mod(max(abs(( i1 - i2 )), int(60.0)),int(13.0)) ) \\ge i1:{:\\ni2 *= max(int(7.0), int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [0, 2, 1, 0], [0], [2, 3, 3, 0, 0, 2], [1], [4, 2], [1], [1], [5], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 1, 2, 0, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(saveOrd(in2[abs(i2):]),i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 3, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 12, 0, 50, 16, 8, 7, 9, 6, 1, 1, 14, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in1[i0:] + in1)):]:{:\\nres0 = in0[i2:int(0.0)] not in s0[max(mod(i2,int(7.0)), mod(int(5.0),abs(i0))):divInt(( ( min(i1, divInt(len(getCharFromString((\"\"R\"\" + saveChr(divInt(i2,divInt(( ( int(7.0) + i1 ) + mod(min(int(4.0), i2),int(1.0)) ),int(7.0))))), i0)),i0)) * divInt(int(7.0),max(int(9.0), abs(i1))) ) - ( ( ( int(8.0) + int(5.0) ) * mod(int(0.0),i0) ) - int(4.0) ) ),int(8.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [3], [2], [2], [], [1], [], [], [], [], [], [], [0], [], [0], [], [3, 1, 2, 0, 3, 0, 1, 2, 1], [], [], [4, 1, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in saveChr(i0):{:\\nres0 = s1 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [1], [1], [0], [], [], [], [], [], [0, 1, 1], [1, 4, 2], [], [], [1, 1], [], [], [0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = int(14.0) \\g int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [2, 2], [5], [0, 1], [0], [], [2, 0], [], [], [], [], [], [1, 1, 1], [0], [2, 0, 0, 0], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = divInt(i1,i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1, 0], [], [0], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [1], [1], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1, 1], [2, 2, 1, 0, 1], [0, 2], [1, 1, 2], [0], [0, 0], [], [], [1], [], [0, 0, 2], [], [3], [2, 2], [], [], [], [1, 1, 1, 1], [0, 8, 1, 4, 6], [2, 0, 0, 2], [1, 0], [2, 3, 1, 2, 2, 0, 1, 1, 2, 0, 1], [1, 0, 1], [3, 0, 0], [1, 1], [1, 0], [1, 4, 0, 4, 1], [], [0], [4, 4, 0, 0, 0, 0], [3, 2], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 3, 0, 1, 2, 0, 0, 0, 3, 3, 3, 2, 8, 3, 1, 2, 2, 5, 0, 1, 6, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in1.capitalize().rstrip():{:\\nloopBreak% = 0\\nwhile not not s0 != in1:{:\\ni2 -= mod(len(s1),int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = ( divInt(i0,int(8.0)) - int(1.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [], [2, 0, 1, 0, 2, 0], [0], [3], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [], [], [0], [], [], [0, 4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s0 != saveChr(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [0, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [4, 5, 4, 0, 9, 0, 7, 2, 2, 6, 1, 6, 7, 8, 3, 7, 7, 1, 2], [0, 2, 0, 2, 2, 1, 2, 0, 0, 1, 0, 2, 2, 2], [0], [1, 1, 0, 2, 3, 1, 1, 0, 2, 1, 0, 2, 2, 0, 0, 0, 1, 2, 2, 2, 1, 3, 1, 0, 2, 3, 0, 1, 2, 1, 2, 2, 3, 0, 3, 2, 1, 2, 3, 1, 2, 1, 1, 3, 0, 3, 2, 0, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0], [1, 0, 1, 2, 2, 2, 2, 4], [2, 0, 1, 0, 1, 2, 0], [1, 1, 0, 0, 1, 0, 1, 1], [3, 2, 1], [1, 1], [], [2, 0, 2, 2, 3, 2, 0, 4, 4, 2, 0], [1, 3], [0], [1, 0, 2, 0, 0], [3, 1], [], [15], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 14, 1, 50, 15, 8, 7, 8, 3, 0, 0, 11, 2, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in0[:int(4.0)].endswith((s2[int(5.0):i0] + saveChr(( max(int(4.0), int(090.0)) * i2 )))[mod(int(72.0),i0):][mod(( i2 + i2 ),i1):int(26.0)])\\ni2 = divInt(divInt(mod(int(1.0),min(int(6.0), i0)),( max(i0, int(78.0)) - ( int(3.0) + divInt(mod(abs(i1),abs(( int(7.0) - mod(abs(int(7.0)),( int(1.0) * int(2.0) )) ))),abs(i0)) ) )),saveOrd(s1[( i2 + i2 ):i2].lstrip()))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [3, 4, 7, 9, 5, 0, 1, 6, 4, 0, 4], [2, 0, 2, 1, 1], [0], [3, 0, 1, 3, 0, 2, 3, 0, 2, 0, 1, 3, 1], [0, 1], [1, 1, 3, 2], [2], [1], [5], [], [], [2, 0], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(i0, int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 1], [], [1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 1, 0, 1, 2, 0, 2], [1, 0, 0], [0, 0, 2, 0, 0, 0], [1, 0], [], [1, 1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i1\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 3, 0, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 2, 3], [1, 0], [0, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):max(i0, i2)]:{:\\nres0 = s0[abs(mod(int(0.0),int(7.0))):].startswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 2, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = abs(( int(0.0) + i0 )) != ( i2 + int(6.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0], [1], [0, 2], [0], [4], [2], [], [0], [], [1, 1], [0, 8], [1], [0], [1, 3, 3, 1], [0], [3], [1], [], [1, 4, 1], [], [], [1, 3, 4, 2, 0, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [1], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += len(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 1], [2, 7, 0, 3, 8], [2], [1], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(27.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [5, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [1, 2], [], [], [0], [], [], [], [], [], [1], [8], [2], [0], [3, 1, 0], [1], [2], [2], [1], [0], [], [], [1, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = abs(int(8.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [0], [3, 0], [], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1, 0, 0, 0], [0], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [2, 4, 1], [0, 0, 0, 1, 2], [], [3, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0], [0, 1, 1], [1], [0], [0, 0], [2, 2, 4, 4], [], [0], [0, 2, 4, 0], [3], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 5, 8, 1], [1, 0, 0, 0, 2, 1, 2, 2, 0], [0, 0], [1, 2, 0, 1, 1, 0, 2, 2, 0, 1, 3, 2, 2, 2, 3, 0, 1, 2, 2, 1, 0, 2, 0, 3, 1, 1, 2, 1, 1, 0, 1, 2, 2, 1, 2, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 2, 4, 0], [2, 2, 2, 1, 2, 0, 2, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [1, 1], [1], [], [2, 4, 1], [1], [], [0], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(4.0)\\ni0 = divInt(i0,int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1, 2], [], [0], [], [], [1, 2, 2], [5], [1, 0], [0], [], [0], [], [], [], [1, 1, 1], [1, 5, 2], [0, 2, 0], [0], [1, 3, 1, 0, 3, 1, 0, 1], [1], [0, 0], [], [0], [2, 5], [1], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 1, 7, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(1.0) != min(int(5.0), i0)\\ni2 = min(int(2.0), i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [0], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 0, 1, 2, 0, 3, 1, 1, 0, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 5, 3, 0, 4], [1], [0], [2, 2, 3, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 4, 1, 15, 3, 1, 1, 2, 5, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2[int(0.0):i0] + s2)[int(7.0):][mod(i2,max(int(5.0), int(7.0))):]:{:\\nb2 = in2.capitalize()[i2:int(6.0)] not in in0\\ni0 = mod(int(1.0),( int(7.0) + int(7.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 2, 1, 0, 2, 0, 3, 2, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0.capitalize()[int(07.0):] not in in2[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 3, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 11, 0, 34, 9, 7, 5, 4, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in1):i0]):][abs(i2):]:{:\\nres0 = getCharFromString(in0[:mod(i2,int(7.0))], min(int(7.0), len(saveChr(i0))))[divInt(( divInt(int(5.0),i1) + ( min(( i2 + ( i1 - ( int(2.0) - i2 ) ) ), divInt(max(int(2.0), i0),int(5.0))) + int(7.0) ) ),i0):i0] not in (\"\"R\"\" + s0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 2, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[saveOrd(in1):]:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 8, 1, 1, 7, 3, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 0, 2, 1], [0, 1, 1], [3, 3, 2, 0, 0, 2, 2, 1, 2, 1, 3, 0, 0, 0, 1, 1, 0, 2, 3, 2, 0, 2, 3, 2, 0, 0, 2, 3, 1, 0, 1, 2, 0, 3, 2, 1, 3, 1, 3, 0, 3, 2, 2, 1, 1, 2, 1, 0, 3, 0, 3, 2, 0, 3, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [3, 0, 2, 0, 3, 0, 1, 2, 1, 0, 2], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 6, 1, 14, 4, 3, 0, 4, 3, 0, 1, 5, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[min(mod(i0,i1), mod(divInt(int(0.0),divInt(int(4.0),abs(i2))),i0)):].capitalize()):]:{:\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 5, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 13, 0, 51, 16, 9, 9, 7, 6, 1, 1, 15, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in0, len(saveChr(i0)[int(0.0):abs(mod(i2,int(7.0)))]))[mod(int(5.0),min(i2, ( divInt(( int(5.0) + i0 ),divInt(len(in0[( i1 + ( min(( int(2.0) * i2 ), ( max(int(1.0), i1) - int(7.0) )) - mod(i2,i0) ) ):divInt(int(7.0),abs(int(1.0)))]),max(i0, ( ( ( int(8.0) * int(5.0) ) - mod(int(0.0),i0) ) - int(4.0) )))) * i0 ))):] not in (\"\"R\"\" + getCharFromString(s0, i2)).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 0, 1, 1], [8, 5, 3, 9, 1, 1], [0, 2, 1], [1], [2, 1, 3, 2, 1, 0, 3, 2, 1, 1, 0], [1, 0, 1], [3, 0, 2], [0, 0], [1, 0], [2, 2], [], [], [4, 0], [2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 1, 1, 3, 1, 1, 1, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += mod(int(85391.0),len(s2.capitalize()))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [0], [2, 0], [0], [0, 0], [], [], [0, 2], [2], [2, 0], [], [5], [1], [], [0], [], [0, 1, 1], [4, 4, 3], [2, 0, 2, 1, 0], [], [1], [], [], [], [], [2, 0, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(int(44.0))\\nb0 = s0.endswith(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 1], [], [], [], [], [0], [5], [0, 0], [0], [], [2], [], [], [], [1, 1, 0, 0, 1, 1, 0, 1], [3, 1, 5, 1, 3, 6, 9, 8], [0, 0, 2, 1, 2], [0, 1], [2, 3, 3, 1, 3, 3, 0, 3, 3, 1, 0, 2, 0, 1, 1, 1], [0, 0], [1, 0, 0, 2, 0, 1], [1, 1], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 4, 1, 16, 2, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( max(min(int(3.0), min(abs(i0), min(max(int(1.0), i2), ( i1 - int(513.0) )))), int(6.0)) - int(98.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 0, 1], [], [1, 2, 2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [4, 3], [2, 0, 0, 0], [1, 0], [0, 0, 1], [], [], [2], [], [4, 4, 4], [1], [], [0, 1], [], [], [0], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 3, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i0\\nin1 = in1\\nin1 = \"\"U\"\"\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1], [0, 9, 6, 9, 5, 6, 8, 2], [2, 2, 0, 0, 2, 0, 1, 2, 1, 1, 2], [1], [3, 3, 2, 1, 1, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 0, 2, 2, 3, 0, 2, 2, 2, 0, 1, 1, 3, 2, 3, 1, 0, 0, 0, 3, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 1, 3, 2, 3, 4, 2, 1, 0, 1], [2, 0, 0, 0, 0, 2, 2, 2, 0, 2], [0, 1, 0, 1], [5, 1, 1, 2], [1, 1], [], [3, 0, 0, 4, 4, 1, 2, 0, 4, 2, 0, 2, 4, 1], [0, 3, 3, 2, 1], [4], [2, 2, 1], [1, 1], [], [17, 0], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 5, 1, 2, 2, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= max(len((in2 + s1)), ( int(0.0) + int(9.0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 1], [7, 8, 2, 5, 5, 8, 7], [0, 0, 2, 2, 0], [0, 1], [1, 2, 0, 3, 3, 3, 3, 0, 0, 3, 0, 3, 0, 3, 2, 2, 1, 1, 1], [1, 1, 1, 0], [2, 1, 2, 3, 1, 4, 4], [1, 1], [0, 1], [1, 1, 1, 3, 0], [], [], [2, 2, 2, 0, 2, 0, 0, 0], [], [], [0, 2, 2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 0, 14, 1, 7, 0, 1, 5, 0, 0, 8, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s1[int(7.0):][divInt(i0,abs(max(abs(len(s1[i0:i2])), max(i2, saveOrd(in0))))):][i0:saveOrd(s0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [5], [0, 2, 1], [0], [5], [3, 0], [1], [], [], [1, 1, 0, 1, 1, 1], [9, 4, 9, 2, 8, 3], [2, 1, 0, 1], [], [2, 0, 0, 3, 2, 2, 3, 0, 3, 3, 1, 0, 1, 1], [1, 0, 1, 0], [0, 4, 3, 1], [0, 1], [0, 0], [5, 2], [], [], [0, 4, 0, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 4, 4, 4, 0, 14, 3, 4, 1, 2, 2, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( in2.endswith(saveChr(divInt(i2,i1))) or min(( divInt(saveOrd(s2),i0) + len(saveChr(max(int(9.0), i1))) ), int(4.0)) != int(92.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 2, 0, 0, 1, 0, 1, 2], [0, 1, 1], [0, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 2, 0, 2, 3, 1, 2, 1, 0, 0, 0, 3, 0, 3, 3, 3, 0, 2, 0, 3, 1, 1, 2, 1, 0, 1, 1, 3, 0, 1, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 2, 3, 0, 1, 2, 1, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:len(in1)]:{:\\nin1 = in0[:i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):len(in1[mod(int(0.0),i0):])] not in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [1, 0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 9, 1, 5, 4, 5, 9, 0, 3, 9, 4, 1, 4], [2, 1, 0, 0, 2, 2], [1, 1], [1, 3, 2, 2, 0, 3, 0, 3, 2, 1, 2, 0, 1, 3, 3, 3, 1, 0, 1, 3, 1, 0, 0, 3], [0, 0, 0, 1], [0, 3, 3, 2, 3, 0, 2, 0], [1, 0, 2, 0, 1], [0], [0, 2, 5, 0], [1], [], [4, 0, 2, 2, 2, 4, 0, 3, 0, 0], [3, 2], [1], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 2, 21, 4, 7, 5, 1, 4, 0, 0, 10, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(2.0)\\ni1 += min(( ( i0 * len(s0.rstrip()) ) + i0 ), len(s2.capitalize()[:( int(9.0) - divInt(i2,int(1.0)) )][abs(len((in2 + s0))):min(int(5.0), i2)][int(4.0):abs(int(5.0))]))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 2], [], [0], [], [], [0], [], [], [], [1, 0, 1, 0], [9, 9, 0, 3], [2, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1], [2, 0, 1, 2, 0, 1, 3, 3, 0, 0, 0], [0, 0], [1, 2], [1, 0], [1], [1, 4], [], [], [0, 2, 0], [], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [17], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 6, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 0, 0, 1, 3, 0, 2, 3, 2, 1, 1, 2, 0, 2, 0, 2, 0, 2, 1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 3, 2, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 2, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 1, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 5, 0, 9, 1, 2, 0, 1, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s2[:len(getCharFromString(\"\"R\"\"[i1:int(0.0)], i2))] not in s2[mod(i2,i0):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 1, 0], [2], [0, 0, 2], [], [0], [], [], [1, 2], [2, 1], [1, 0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1], [0, 8, 9, 8, 5], [1, 2, 0, 1, 2, 1, 2, 2], [], [2, 0, 3, 1, 2, 1, 0, 2, 0, 3, 1, 3, 0, 3, 0, 0, 1, 3, 0, 2, 2, 0, 1, 1], [0, 1, 0, 0, 0, 1], [4, 1, 4, 0, 1, 2], [2, 0, 2, 1], [1, 1], [1, 1], [1], [], [0, 1], [], [], [], [0], [16], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( i1 * saveOrd(s1) ) == int(0.0):{:\\nb1 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1], [4, 5, 4, 0, 9, 0, 7, 2, 2, 1, 1, 6, 7, 8, 2], [0, 2, 0, 2, 2, 1, 2, 0, 0], [0], [1, 1, 0, 2, 3, 1, 1, 1, 2, 1, 0, 2, 2, 0, 0, 0, 1, 2, 1, 2, 1, 3, 0, 0, 0], [0, 1, 1, 0, 1, 0], [1, 0], [2, 1, 2], [1, 1, 0, 0], [3, 2, 5], [1, 1], [], [2, 0, 2, 2, 3, 2, 0, 4, 3, 0, 4], [0, 1], [], [1, 0, 2, 0], [3, 1], [], [15], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 15, 15, 9, 1, 25, 6, 2, 3, 3, 3, 0, 0, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in0[:int(4.0)].endswith((s2[int(5.0):i0] + getCharFromString((in2 + saveChr(( max(int(4.0), int(090.0)) * int(72.0) ))), mod(int(21.0),i2)))[mod(( i0 - i2 ),i2):][int(1.0):divInt(int(678.0),( int(2.0) * min(i1, i2) ))])\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 1], [], [], [], [], [0], [5], [0, 0], [0], [], [2], [], [], [], [1, 1, 0, 0, 1, 1], [1, 1, 5, 0, 6, 2], [1, 0, 1, 2, 2], [0, 1], [2, 3, 1, 1, 0, 3, 0, 3, 3, 1, 0, 2, 0, 1], [0, 0], [0, 0, 0, 2, 0], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 5, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = ( min(int(1.0), int(1.0)) - i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 8, 5, 3, 9, 9, 0, 7, 9, 0], [0, 0], [1], [1, 0, 1, 3, 1, 1], [0], [1], [1], [], [5, 0, 2], [1], [], [1, 0, 2, 0], [1], [], [0], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = \"\"U\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0], [0, 1, 1], [3, 1, 2, 3, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 12, 0, 40, 11, 8, 5, 6, 5, 0, 1, 11, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[int(4.0):( min(i0, mod(i2,int(3.0))) + ( int(5.0) + i2 ) )]):][i0:]:{:\\nb2 = in1 not in in0[:i1].capitalize()[mod(divInt(int(7.0),i2),divInt(abs(( i1 * ( min(divInt(len(saveChr(i2)),( min(int(6.0), i0) - int(1.0) )), int(7.0)) + i0 ) )),i0)):divInt(int(7.0),max(int(9.0), abs(i0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [3, 0], [], [2], [2, 1, 2, 1, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0], [3], [2], [0], [1], [], [], [1], [], [0, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\"[len(in1):] not in in0[:i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [2, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 1], [3, 7], [2, 1], [], [3, 2, 1, 0, 1, 0], [1, 1], [0], [], [1, 1], [5, 2, 2], [], [], [4, 3, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = min(mod(int(3.0),i2), int(7.0)) \\ge i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 0, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 1, 7, 0, 2, 0, 0, 2, 0, 0, 6, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(in1[i0:i2][int(0.0):len(in2)][i1:][i1:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 2, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [0], [], [3, 3, 1], [], [], [], [1, 1], [4, 9], [0, 2], [1], [1, 2, 2, 1, 3, 0], [0, 1], [4, 3, 2], [1, 0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 0, 1], [], [0], [4, 4, 0, 0], [2, 1, 3], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = saveChr(int(4.0)).capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 5, 0, 7, 3, 6, 1, 4, 3, 0, 5, 8, 1], [1, 2, 1, 0, 2, 1, 2, 2, 0], [0], [3, 2, 2, 1, 1, 0, 2, 2, 0, 1, 3, 2, 2, 2, 3, 0, 1, 2, 2, 1, 0, 2, 0, 3, 1, 1, 2, 1, 1, 0, 1, 2, 2, 1, 2, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 2, 4, 0], [2, 2, 2, 1, 2, 0, 2, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [1, 1], [1], [], [2, 4, 1], [1], [], [0], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 7, 1, 31, 11, 4, 4, 7, 1, 1, 0, 3, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = max(divInt(( int(4.0) * int(5.0) ),i2), divInt(mod(i1,int(0.0)),abs(( mod(divInt(saveOrd(saveChr(i0)[int(7.0):mod(divInt(int(3.0),i2),( i1 * min(int(6.0), int(1.0)) ))]),( int(4.0) * int(3.0) )),i2) - int(0.0) ))))\\ns1 = \"\"u\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 0], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 0, 1, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 2, 1, 5, 1, 1, 3, 2, 0, 0, 0, 0, 2, 0, 5, 1, 2, 1, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s1[( len(s0) + i0 ):]:{:\\nres0 = ( ( i2 != len(s1) or b2 ) and s0.startswith(in1) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1, 0, 0, 0, 1], [2, 1, 4, 2, 9, 3, 5, 9, 6], [2, 0, 2, 2], [0], [2, 1, 1, 3, 0, 1, 0], [1, 0], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(int(2.0),int(1.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in0 + in1):{:\\nin1 = in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [], [0], [], [], [2, 2], [5], [0, 1], [0], [], [2, 0], [], [], [], [1, 0, 0, 1], [9, 0, 0, 6], [2, 2, 0, 0, 0, 2, 2, 0, 2], [1, 0], [2, 0, 0, 0, 2, 2, 3, 2, 2, 2, 0, 3, 1, 2, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [1, 4], [2, 0, 0, 1, 1, 1], [0, 1], [1], [], [], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 4, 4, 9, 1, 19, 7, 2, 6, 2, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= ( i2 + i0 )\\nb2 = not i0 != divInt(( max(( ( ( i0 + saveOrd(s1.capitalize()) ) - int(9.0) ) - mod(i2,i2) ), i0) - int(006.0) ),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 0], [2], [1, 1], [], [0, 0], [], [], [2], [2], [1, 0], [0], [], [1], [], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [3, 2, 8, 7, 3, 3, 4, 4, 0, 1, 4, 3, 2, 9, 2], [0, 2, 2, 1, 0, 1, 1], [1, 1], [3, 0, 0, 0, 1, 2, 1, 0, 2, 0, 1, 3, 1, 0, 3, 1, 1, 2, 3, 1, 3, 1, 2, 0, 0, 3, 3], [0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 4, 1, 3, 2, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4], [1], [0], [4, 2, 4, 1], [3, 2], [2], [2], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += min(i2, i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [0, 2], [2], [], [0], [], [], [1, 3], [], [0, 2, 0], [], [4], [3, 0], [1], [], [], [1], [0], [2, 2, 1], [], [2, 0, 2, 0, 2, 1, 0], [0, 1, 0], [], [0, 1], [1], [2], [], [], [4, 4], [1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 7, 3, 0, 2, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(( i2 + mod(i2,( int(0.0) - i1 )) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 12, 3, 3, 1, 2, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[:len(in0.rstrip()[mod(int(07.0),i0):mod(i0,int(5.0))][:( int(7.0) + abs(i2) )])] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 5, 0, 13, 3, 1, 1, 2, 4, 1, 1, 10, 1, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:][len(in1[divInt(int(0.0),i2):mod(i2,int(7.0))]):]:{:\\nres0 = s2 not in \"\"R\"\"[:( int(5.0) + int(7.0) )].capitalize()[i0:i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [1, 0], [], [], [], [], [], [0, 2], [0], [0], [1, 0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1], [0], [2, 1], [1, 1, 1], [0, 1], [], [4], [2], [], [5], [], [], [2, 0], [], [1, 0], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = s1[len(in0):] not in getCharFromString(s0, i1)[int(0.0):abs(mod(i0,int(0.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [0], [0, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [0, 2, 2, 5], [], [], [3, 4, 4, 4, 0, 0, 0], [1, 0, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (saveChr(i1) + getCharFromString(s2.capitalize(), i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 4], [2, 2, 0, 0, 0], [0], [2, 1, 3, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [2, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 1, 10, 2, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(int(2.0),abs(max(i2, max(( i0 * i0 ), i0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 1], [2], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [0, 2], [], [0, 2, 0], [], [0], [3, 0], [1], [], [], [0], [2], [2], [], [0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [], [], [], [5, 4], [], [], [0, 4, 2, 0], [1, 2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 1], [], [0, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [0, 1], [4, 5], [1], [], [0, 1, 1], [], [], [], [], [5, 0, 2], [1], [], [3, 0, 3, 0, 1, 3, 0, 2, 0], [0, 0], [0], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i1 \\g int(45.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 2, 0, 2, 1, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 9, 0, 38, 12, 8, 4, 8, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s1[len(in0):] not in s0[divInt(mod(i0,( int(0.0) + int(7.0) )),divInt(int(5.0),abs(i2))):].capitalize()[i2:divInt(divInt(int(7.0),i0),( min(( i1 + divInt(len(saveChr(( min(i2, mod(max(int(6.0), i1),int(1.0))) * int(7.0) ))),i2) ), i0) - divInt(int(7.0),abs(int(9.0))) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [1, 0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [0, 6, 2, 0, 0, 4, 3, 0, 7, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 3, 2, 2, 3, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [2, 1], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [4, 0], [1], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [0], [0], [0], [], [1], [], [1], [], [1], [0], [0, 2], [], [2, 0, 1, 0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [1, 2, 2], [1, 0], [1, 0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(5.0)\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 1, 0, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 0, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 2, 1, 1, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in \"\"R\"\":{:\\ni0 = len(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 1], [2], [0], [3], [], [4], [], [], [1], [1], [], [4, 1], [2], [], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"R\"\".capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [1], [1], [1], [0], [], [], [], [], [0], [1], [1], [1], [0], [3, 3, 1, 0], [], [4, 4], [0], [], [1, 4], [], [], [0, 4, 4], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [1], [0], [2], [0], [], [1], [], [1], [], [1], [0], [0, 2], [1], [2, 0, 1, 0], [1], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += mod(i2,int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0], [], [0], [], [], [], [], [5], [], [], [4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 1, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2[len(in0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [0], [1, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [3, 2, 2, 5], [], [], [0, 4, 4, 4, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [3, 3, 1], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [0], [0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1)]:{:\\ns2 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1, 1, 1, 1, 1], [7, 5, 4, 8, 0, 5, 3, 7], [1, 1, 2, 1, 0, 2, 0, 0, 0, 2], [0], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 4, 2, 0, 1], [2], [1, 1, 0, 1, 1, 1, 1, 1, 1], [5, 0, 2], [1], [], [3, 4, 1, 0, 1, 3, 0, 2, 0], [2, 0], [0], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = min(min(i1, i2), int(75.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 6, 0, 9, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 0, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 2, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 3], [1], [0], [2, 0, 4, 3, 0, 0, 2, 0, 2, 0, 4, 1, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 16, 16, 13, 0, 52, 16, 8, 8, 8, 6, 0, 1, 11, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString((in1 + in1), int(7.0))):]:{:\\nloopBreak% = 0\\nwhile i0 != int(7.0):{:\\nb0 = ( max(mod(i2,int(5.0)), divInt(int(7.0),abs(i2))) \\l ( divInt(( min(i0, divInt(len(in0[( i1 + i2 ):]),( divInt(int(4.0),i1) + ( min(int(1.0), i2) + int(7.0) ) ))) - int(7.0) ),i0) + i0 ) or ( s0[( int(9.0) * divInt(int(8.0),max(i0, ( ( mod(int(6.0),int(0.0)) - divInt(int(9.0),i1) ) * int(8.0) ))) ):i2] not in saveChr(abs(int(59.0))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [2], [0, 2], [], [0], [], [], [2, 0], [3], [0, 2, 1], [0], [0], [0], [], [], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [8, 8, 7, 3, 5, 1, 6, 7, 0, 0, 7, 9, 5, 5, 5], [2, 2, 0, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1], [], [3, 0, 3, 2, 1, 2, 1, 0, 0, 3, 3, 1, 2, 1, 2, 2, 0, 0, 1, 2, 0, 2, 0, 2, 3, 1, 0, 0, 0, 2, 0, 1, 0, 2, 3, 0, 2, 3, 0, 0, 3, 3, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 3, 1, 2, 2, 2, 1, 1, 0, 0, 0, 2, 0], [0, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 1, 3, 5, 3, 2], [], [], [2, 4, 4, 0, 0, 0, 0], [3, 0], [1], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 3, 3, 3, 0, 10, 2, 3, 1, 1, 3, 0, 0, 6, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = getCharFromString(s1, min(i2, max(( int(8.0) + mod(int(87.0),i2) ), i0))).rstrip()[:len(s1)] in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [0, 0], [1], [0], [], [], [2], [], [4, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1, 0, 0], [], [1, 1], [], [0], [], [], [2, 1], [], [], [], [], [], [], [], [], [1, 1], [0, 9], [1, 2, 0, 2], [0, 1], [3, 1, 2, 0, 1, 0, 0], [1], [3], [1, 2], [0], [5], [], [], [4, 2, 2, 4], [0, 1], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 7, 1, 1, 0, 1, 0, 0, 0, 4, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(getCharFromString(saveChr(int(0.0))[:divInt(i2,int(9.0))][:i0], i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 1, 1, 0], [0, 0], [0, 0, 2], [0], [0], [], [], [1, 2], [2, 1], [0, 0, 1], [0, 0], [], [1], [], [0], [], [1, 1, 1, 1, 1], [0, 8, 9, 8, 5], [1, 2, 0, 1, 2, 1, 2, 2], [], [3, 3, 3, 1, 2, 1, 0, 2, 0, 3, 1, 3, 0, 3, 0, 0, 1, 3, 0, 2, 2, 0, 1, 1], [1, 1, 0, 0, 0, 1], [4, 1, 4, 0, 1, 2], [2, 0, 2, 1], [1, 1], [1, 1], [1], [0], [0, 1], [], [], [], [0], [16], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s1:{:\\nb1 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [0, 0], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [4], [1], [0], [], [1], [], [1], [], [0, 0, 1], [5, 8, 7], [1], [], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(587.0) \\le i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2], [0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 1, 1, 1, 2, 1, 0, 2, 2, 0, 0, 2, 2, 0, 1, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 0, 2, 2, 0, 1, 1, 2, 0, 1], [0, 2, 0, 0, 0, 0, 1, 0, 2, 1], [2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 0, 1, 2, 0, 2, 2, 2, 1, 2, 0, 0, 0, 2, 2], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 2, 0, 3, 0, 2, 1, 2, 3, 0], [0, 2, 1], [0, 0, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 2, 1], [0, 0, 0], [1, 1, 4, 4, 3, 0, 4, 2, 1, 1], [2, 1, 3, 3, 1, 0], [0, 0], [0, 1], [1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 9, 1, 8, 5, 8, 9, 7, 6, 2, 7, 0, 1, 5, 7, 8, 4, 6, 9, 2, 5, 4, 7, 6, 8, 0, 4, 2, 1, 9, 7, 0, 0, 8, 5], [0, 0, 0, 2, 0, 2, 0, 2, 2, 1, 1, 1, 1, 2, 0, 2, 2, 0, 1, 1, 0, 0, 1, 1, 1, 2, 0, 2, 1, 0, 1, 1, 1, 2, 1, 0, 0, 2, 0], [0, 1, 1], [0, 3, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 2, 1, 1, 3, 0, 0, 2, 3, 2, 3, 3, 0, 2, 2, 3, 0, 1, 3, 2, 1, 1, 1, 1, 1, 3, 2, 3, 0, 3, 0, 1, 0, 1, 0, 0, 2, 1, 0, 3, 1, 0, 3, 2, 3, 1, 3, 1, 2, 0, 3, 1, 0, 0, 1, 1, 3, 1, 1, 3, 3, 2, 2, 1, 1, 1, 3, 2, 3, 1, 3, 2, 1, 3, 1, 0, 3, 0, 2, 0, 0, 3, 2, 3, 3, 3, 0, 0, 3, 3, 1, 2, 0, 3, 3, 0, 3, 0, 0, 2, 1, 2, 3, 1, 1, 0, 1, 3, 2, 0, 3, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [2, 3, 2, 0, 4, 0, 3, 3, 0, 2, 1, 0, 4, 4, 1, 1, 1, 1, 0, 4, 2, 2, 4, 4, 2, 3, 0, 0, 4, 2, 4, 3], [2, 0, 2, 0, 1, 2, 0, 2, 0, 2, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 1], [2, 3, 4, 3, 4, 3, 2, 0, 2, 1, 0, 3, 2, 0, 2, 5, 2, 3, 4, 3, 3, 2, 2, 4, 4, 0, 2, 5, 5, 5, 3, 5, 0, 0, 3, 3, 1, 5, 1, 2, 3, 3, 5, 3, 3, 3, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 3, 3, 0, 0, 4, 4, 4, 0, 1, 4, 1, 4, 2, 2, 2, 0, 1, 4, 4, 1, 2, 1, 2, 0, 0, 4, 0, 4, 1, 0, 2, 4, 0, 0, 0, 0, 4, 4, 1, 1, 2, 0, 2, 1, 4, 2, 1, 4, 4, 1, 0, 2, 1, 2, 4, 3, 2, 0, 1, 1, 4, 0, 4, 0, 1, 2, 4, 3, 3, 4, 0, 1, 0, 1, 0, 2, 4, 3, 0, 0, 1, 0, 2, 1, 2, 1, 0, 0, 4, 4, 3, 0, 1], [1, 0, 2, 2, 1, 3, 3, 1, 2, 0, 3, 1, 1, 0, 2, 1, 3, 1, 1, 0, 2, 2, 1, 0, 1, 0], [3, 1, 4, 5], [0, 2, 0, 1, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2], [0, 2, 2, 3, 0, 2, 2, 2, 0, 3, 2, 3, 3, 0, 3, 0, 2, 0, 1, 2, 1, 3, 0, 0, 3], [8, 10, 1, 1, 14, 6, 1], [16, 7, 21], [8, 2, 0, 7, 6, 9, 1], [0, 4, 22, 13, 26, 27, 30, 9]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 0, 0, 5, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in0:{:\\nin1 = in0\\ni0 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = saveChr(abs(int(1.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [], [2], [], [4], [], [], [], [], [0, 1], [3, 8], [0], [1], [1], [], [], [0], [], [3, 0], [], [], [0, 3, 0, 4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in0.startswith((s0 + saveChr(int(38.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [2, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1], [4, 2], [1], [0], [1, 2, 3, 3, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 1, 1, 0, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[divInt(len(in1),i0):]:{:\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 3, 3, 6, 2, 12, 2, 3, 1, 2, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(s0[i0:]) != i2:{:\\ni2 = int(0.0)\\n:}else:{:\\ni0 += max(mod(i1,int(7.0)), mod(int(5.0),abs(i2)))\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [], [1], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [0, 0, 1, 1], [9, 5, 1], [2], [0], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(951.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [0], [1], [0], [2], [], [], [], [], [1, 1], [0, 2], [2, 0, 0], [], [2, 3, 0, 1, 1, 0], [0, 1], [3], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( len(saveChr(i2)) - int(0.0) ) \\l int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2, 0], [], [2, 0, 0], [1], [], [], [1], [2, 2], [], [], [4, 0], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 1, 0, 0, 1, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = getCharFromString(s2, mod(i2,i0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [0], [0], [], [], [1, 0], [], [0, 2], [], [3, 0], [0], [], [], [], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 0, 3, 0, 2, 3, 1, 0, 2, 0, 2, 1, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 3, 3, 0, 1, 0, 1], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 1, 1, 2, 1, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 2, 4, 0, 2, 6, 1, 1, 12, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s0[len(in2):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], len(saveChr(mod(i2,int(7.0)))))[divInt(int(5.0),len(\"\"R\"\")):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [1], [0, 2], [], [0], [], [], [1, 2, 2], [5], [1, 0], [0], [], [0], [], [], [0], [1, 1, 1], [1, 5, 2], [0, 2], [], [1, 1, 1, 0, 3, 1, 0, 1], [1], [0, 0], [], [0], [3, 5], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 1, 3, 3, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif int(1.0) != int(5.0):{:\\nb1 = b2\\n:}\\nin0 = saveChr(int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 5, 1, 1, 0, 1, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s0[len(in2):] not in s0[int(0.0):]\\ni0 = divInt(int(7.0),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 0, 4, 0, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 4, 0, 9, 2, 2, 2, 0, 5, 0, 1, 8, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( len(s0) * i0 ):]:{:\\nres0 = ( ( i2 != len(in1.rstrip()) or True ) and s0.startswith(saveChr(( i0 + int(0.0) ))[i0:]) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [3, 5, 7], [1], [0], [3], [], [3], [], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 7], [1], [0], [1], [], [], [2], [], [5, 0], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(47.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1], [4], [2, 0, 1, 0, 2, 1, 2], [1], [3, 2, 2, 2, 2, 0, 0, 3, 1, 2, 0, 0, 2, 0, 0], [1, 0, 1, 0, 0, 1], [3, 3], [0, 0, 2, 1], [0, 1, 1], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += len(in1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [3, 0], [], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0, 0], [1], [3, 0, 1], [0], [3], [2, 2], [], [3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= len(in0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 1], [1], [3, 3, 0, 0, 0], [0], [1, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= max(min(i1, i2), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0, 2], [1], [0], [0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 0], [1, 0, 1, 2], [], [2, 0, 2, 0, 0, 2, 0, 1], [0, 0, 1], [], [0, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [5, 1], [2], [0], [3], [], [4], [], [], [0], [1], [], [1, 1], [2], [], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 4, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 3, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[abs(max(i0, int(1.0))):] not in getCharFromString((in2 + in1), abs(mod(i2,int(7.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1], [1, 2, 0, 1, 0, 0, 0], [2], [1, 0, 2, 2, 2, 2], [], [0, 0, 0, 0], [], [], [0], [2], [0, 0], [0], [], [1], [], [1], [], [1, 1, 1], [6, 2, 6], [0, 0, 1, 2, 0, 1, 1, 1], [0, 1, 0], [3, 2, 0, 0, 1, 1, 2, 0, 1, 0, 0], [0, 0], [4], [2, 1, 1], [], [0, 0, 1, 0, 3], [], [], [3, 0, 0, 0], [3], [4], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd((s0 + s0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [3], [1], [0], [2], [], [], [], [], [1], [0], [2, 0, 1], [], [2, 3, 0, 1, 0, 0], [0, 1], [4], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 5, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( saveOrd(saveChr(i2)) - int(0.0) ) \\ge i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [2], [5, 0, 0], [1, 1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 1], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 14, 14, 11, 1, 49, 15, 10, 9, 6, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(in0), i0):]:{:\\nloopBreak% = 0\\nwhile int(0.0) != abs(divInt(i1,int(5.0))):{:\\nb2 = divInt(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len(getCharFromString(in1, min(i0, ( max(( int(2.0) + i2 ), divInt(abs(int(1.0)),i1)) * int(7.0) )))) - int(7.0) )) + i1 ))) \\l ( divInt(int(9.0),max(int(8.0), saveOrd(in0))) * i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = mod(( ( int(5.0) - int(0.0) ) - ( int(4.0) * i1 ) ),int(8.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [2, 1], [], [0], [], [], [], [], [2, 0, 1, 0, 2, 0], [], [], [], [], [], [], [0, 1, 0, 1, 1, 0], [0, 3, 6, 2, 2, 6], [0, 0, 1, 2], [1, 1], [2, 0, 2, 1, 2, 1, 1], [1, 0, 1], [], [2, 1, 0, 2], [1, 0], [1, 4], [], [], [4, 0], [3], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 2, 1, 7, 3, 0, 2, 2, 2, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1.rstrip()\\ni0 *= mod(i0,( int(03.0) - divInt(int(62.0),int(2.0)) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [2, 1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [], [], [2, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [0, 1], [1], [0, 3, 2], [1], [], [1, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [1, 3, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 2, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 0, 0, 0, 3, 3, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 4, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 4, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 0, 0, 0, 1], [0, 2, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0], [3, 2, 2, 1, 1, 2, 3, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0, 7], [0], [], [2, 0, 3, 1, 1], [0], [1], [1], [], [5, 3], [], [], [4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(in0, ( i0 - max(int(0.0), int(7.0)) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [6, 1], [0, 2], [1], [3, 0, 1, 1], [], [0], [1], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= min(i2, int(6.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 14, 14, 12, 0, 50, 16, 8, 9, 7, 6, 1, 0, 14, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in (in1 + in1):{:\\nres0 = ( i1 != i2 or ( in0[int(0.0):].endswith(s0[max(mod(i2,int(7.0)), mod(int(5.0),abs(i0))):( divInt(divInt(min(i1, ( len(getCharFromString((\"\"R\"\" + saveChr(( i2 + ( ( ( int(7.0) + i1 ) * ( min(int(4.0), i2) - int(1.0) ) ) + int(7.0) ) ))), i0)) * i0 )),( int(7.0) - max(int(9.0), abs(i1)) )),divInt(divInt(mod(int(8.0),int(5.0)),( int(0.0) - i0 )),int(4.0))) * int(8.0) )]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 4, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 4, 3, 3, 1, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[max(saveOrd(in2), ( int(1.0) * i0 )):] not in in1[( i2 + ( mod(int(7.0),abs(i2)) * i0 ) ):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [0], [0], [], [], [], [], [], [], [], [], [], [0], [], [0, 1], [], [1, 1], [1], [0], [], [], [2], [], [0, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 1, 1, 1], [8, 5, 3, 9, 1, 1], [0, 0, 1], [1], [2, 1, 3, 2, 1, 0, 3, 2, 1, 1, 0], [1, 0, 1], [0, 0, 2], [0, 0], [1, 0], [1], [], [], [4, 0], [2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 3, 1, 11, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += mod(int(8.0),min(( int(539.0) + i0 ), min(divInt(int(1.0),int(1.0)), i1)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1], [8], [2, 2, 1], [0], [0, 1, 3, 3, 0, 0, 0], [1, 1], [0, 3], [0], [0, 1], [0], [], [], [1, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [], [], [], [], [], [], [], [1, 4], [], [], [0], [2, 1, 3], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 2], [2], [2, 2], [], [0], [], [], [], [], [0, 2], [], [2], [2], [], [], [0], [], [], [], [], [], [], [], [], [], [1, 4, 1, 4, 3], [0, 0, 0, 1], [0], [0, 0, 3, 0], [], [], [], [3, 3, 0, 3], [], [], [], [5, 24, 8, 23]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1\\ns1 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0], [], [0, 0], [], [0], [], [], [3, 2], [], [0, 0, 2], [], [2], [1, 1], [1], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [], [1, 1], [], [], [], [3, 3], [], [], [], [9, 30]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = False\\nb2 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [2], [0], [1], [0], [4], [], [], [], [], [0, 1, 0, 1], [0, 5, 5, 7], [1, 1], [1], [3, 1, 2, 0, 2, 2, 3, 0, 3, 3], [0, 1, 1], [2, 3, 4, 4], [0], [0, 1], [2, 5], [], [], [4, 4, 0, 0], [1, 2], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(int(05.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 0, 1, 1], [], [0], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\ns1 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 2], [], [0, 0], [], [], [3, 2, 3], [], [], [], [], [], [], [], [], [], [], [1, 2, 1, 1, 2, 1], [0], [2, 2, 0, 0, 2, 0, 0], [0, 1, 1], [4], [0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 0, 4], [1], [], [0, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in0\\ns0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [0, 2, 1, 0], [1], [2, 3, 3, 0, 0, 0], [1], [0, 2], [1], [1], [5], [], [], [2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 6, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= mod(min(abs(i2), i1),i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9, 7, 7], [0, 2, 1], [1, 0], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i2\\ni1 = int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [0], [], [1, 0], [4, 0], [1, 2], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\ni1 += int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 3, 2, 1, 0, 4, 0, 1, 0, 1, 4, 4, 2, 0, 2, 2, 2, 0, 4], [], [], [2, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [0, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [5, 5], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0], [1], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [2, 2], [], [0], [], [], [0], [], [], [], [1, 1], [4, 5], [0, 0], [1], [2, 0, 1], [0], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( i0 * int(4.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 1, 1], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [0, 0], [], [5], [1], [], [1], [], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [4, 5, 4, 7, 9, 0, 7, 2, 2, 6, 1, 6, 7, 8], [0, 2, 0, 2, 2, 1, 2, 0, 0], [0], [1, 1, 0, 2, 2, 1, 1, 0, 2, 1, 2, 2, 2, 0, 0, 0, 1, 2, 1, 2, 1, 3, 0, 0], [0, 1, 1, 0, 1, 1], [1, 0], [0, 0], [1, 1, 0, 0], [3, 2], [1, 1], [], [2, 0, 2, 2, 3, 4, 0, 4], [1], [], [1, 0, 2, 0], [3, 1], [], [15], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\ni0 = int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in \"\"R\"\":{:\\nres0 = s0 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 0, 1, 2, 0, 3], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 2], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 2, 4, 0, 0, 4], [1], [0], [2, 0, 3, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 6, 1, 1, 0, 1, 6, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[int(0.0):]:{:\\nb2 = (s2[i2:] + in1) not in s0.capitalize()[int(7.0):mod(i2,len(s0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [0], [0], [], [1], [], [0], [], [], [], [2], [], [0], [], [], [], [], [4], [], [], [4, 4], [3, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(i2).lstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [4, 0, 4, 2, 0, 1, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 8, 0, 3, 0, 0, 3, 1, 1, 11, 5, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.rstrip():{:\\nb2 = saveChr(len(in1[saveOrd(\"\"R\"\"):])) not in getCharFromString(saveChr(int(0.0)), i0)[abs(i2):i1].lstrip()[int(75.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [2, 0, 2], [], [0, 0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [5, 1, 8, 9, 7, 0, 1, 2, 6, 7], [2, 1, 0, 1, 1, 1, 0], [], [0, 1, 3, 0, 0, 2, 0, 0, 3, 3, 3, 1, 1, 0, 2, 0, 2, 1, 1], [1, 1, 1], [2, 2, 1, 2], [], [0, 0, 0], [2, 3, 1, 3, 2, 0, 2, 0], [], [], [4, 2, 0, 2, 2, 2, 0, 0, 2, 3, 3, 4, 4, 0, 3, 0, 2, 3, 4, 2], [2, 3, 2, 1], [2], [0, 0, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 7, 0, 19, 3, 4, 0, 3, 4, 0, 0, 7, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[i2:int(5.0)].capitalize()\\nb0 = abs(i1) == i0\\ns1 = in0[:divInt(i1,i1)][:abs(max(abs(int(1.0)), int(8.0)))][i1:divInt(i0,divInt(int(9701.0),int(2.0)))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 1], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 0, 1], [], [0, 1, 1, 2], [], [0, 0], [], [], [2, 1], [0], [0, 0, 1, 0], [0], [3], [1, 3, 1], [1], [0, 0], [], [1, 1, 1, 1], [0, 2, 7, 1], [0, 2, 0, 0], [1, 1], [2, 1, 0, 2, 3, 1, 1, 0], [0, 1], [1], [1, 0, 2], [0], [5, 2], [1], [], [1, 2, 4], [1], [], [0], [3], [], [], [], [6]], "fitness": 31, "mapping_values": [1, 4, 4, 0, 4, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 3, 3, 4, 2, 8, 2, 1, 3, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\ni0 -= ( int(0.0) + i2 )\\ni0 *= divInt(max(int(2.0), int(7.0)),i0)\\nin2 = \"\"#\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 1, 2, 1, 0, 7, 1, 8, 5, 8, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 1, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 1, 0, 2, 4, 2, 4, 4, 3, 1, 1, 1, 1, 0], [0, 1, 3, 2], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 1, 0, 8, 1, 2, 1, 0, 2, 1, 0, 8, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2[len(getCharFromString(\"\"R\"\"[:len(s2)], i0)):] not in saveChr(int(5.0))[int(7.0):( int(5.0) + int(1.0) )]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 1], [], [0, 0], [], [], [3, 2, 3], [], [], [], [], [], [], [], [], [], [], [1, 2, 1, 2, 2, 1], [0], [2, 2, 0, 0, 2, 0, 0], [0, 1, 1], [4], [0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 3, 0], [1], [], [0, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 7, 3, 0, 1, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in0\\ni1 = ( mod(i2,i1) + mod(i2,i2) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [0, 2], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1, 1], [9, 0], [0, 1, 1, 0, 1], [1], [3, 1, 3, 3, 0, 2, 1, 2, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 0], [0, 2, 0], [1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 1, 11, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += max(int(9.0), max(min(i1, ( int(0.0) * ( i1 + i0 ) )), i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[len(in1):] not in in0[i1:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [1, 0], [1], [0], [], [3, 3, 4, 0, 3, 0, 1, 2, 1], [1], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [1, 2, 2], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 0, 0, 1, 1, 1], [4, 9, 2, 6, 9, 5, 4, 8, 9], [0, 2, 0, 1], [1], [0, 2, 2, 3, 1, 1, 2, 0, 2, 0, 0, 1], [1, 1, 0, 1], [0], [0], [0, 0, 1], [2, 2], [], [], [2, 0, 0, 2, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 4, 0, 12, 4, 1, 1, 3, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s2[i0:divInt(divInt(min(int(49.0), int(26954.0)),( i2 + mod(i0,i1) )),int(8.0))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 6, 6, 10, 0, 33, 9, 8, 5, 4, 5, 0, 0, 9, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[abs(len(in2)):] not in in1[i0:]:{:\\nres0 = ( i2 != abs(mod(i2,int(0.0))) or ( in1.endswith(getCharFromString(saveChr(( ( min(i0, divInt(i1,( int(7.0) + i2 ))) + divInt(len(in0),( i1 * min(max(( int(5.0) - i0 ), divInt(abs(int(7.0)),i0)), int(7.0)) )) ) + int(1.0) )), i0)) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1], [], [2, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [0], [1], [0], [2], [], [], [], [], [1, 0, 1], [0, 2, 0], [2, 0, 0], [], [2, 2, 0, 1, 1, 0], [0, 1], [], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 6, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( divInt(i2,int(0.0)) - int(20.0) ) \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0], [], [0, 0], [], [2], [2, 1], [], [0], [], [0, 0, 0, 1], [4, 6, 9, 9], [0, 2, 2, 0], [1], [3, 1, 2, 0, 2, 0, 2, 3, 0], [1, 1, 0], [0, 3], [1, 2], [1, 1], [0, 0, 4], [], [0], [0, 3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 1, 9, 3, 2, 2, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= min(int(4699.0), mod(i2,mod(i2,( len(s0) * i0 ))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 3, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 8, 2, 3, 1, 1, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = len(s0[len(in2):]) != ( abs(i0) + mod(i2,int(0.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 1, 1, 1, 2, 1, 0, 2, 2, 0, 0, 2, 2, 0, 1, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 0, 2, 2, 0, 1, 1, 2, 0, 1], [0, 2, 0, 0, 0, 0, 1, 0, 2, 1], [2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 0, 1, 2, 0, 2, 2, 2, 1, 2, 0, 0, 0, 2, 2], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 2, 0, 3, 0, 2, 1, 2, 3, 0], [0, 2, 1], [0, 0, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 2, 1], [0, 0, 0], [1, 1, 4, 4, 3, 0, 4, 2, 1, 1], [2, 1, 3, 3, 1, 0], [0, 0], [0, 1], [1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 9, 1, 8, 5, 8, 9, 7, 6, 2, 7, 0, 1, 5, 7, 8, 4, 6, 9, 2, 5, 4, 7, 6, 8, 0, 4, 2, 1, 9, 7, 0, 0, 8, 5], [0, 0, 0, 2, 0, 2, 0, 2, 2, 1, 1, 1, 1, 2, 0, 2, 2, 0, 1, 1, 0, 0, 1, 1, 1, 2, 0, 2, 1, 0, 1, 1, 1, 2, 1, 0, 0, 2, 0], [0, 1, 1], [0, 3, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 2, 1, 1, 3, 0, 0, 2, 3, 2, 3, 3, 0, 2, 2, 3, 0, 1, 3, 2, 1, 1, 1, 1, 1, 3, 2, 3, 0, 3, 0, 1, 0, 1, 0, 0, 2, 1, 0, 3, 1, 0, 3, 2, 3, 1, 3, 1, 2, 0, 3, 1, 0, 0, 1, 1, 3, 1, 1, 3, 3, 2, 2, 1, 1, 1, 3, 2, 3, 1, 3, 2, 1, 3, 1, 0, 3, 0, 2, 0, 0, 3, 2, 3, 3, 3, 0, 0, 3, 3, 1, 2, 0, 3, 3, 0, 3, 0, 0, 2, 1, 2, 3, 1, 1, 0, 1, 3, 2, 0, 3, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [3, 3, 2, 0, 4, 0, 3, 3, 0, 2, 1, 0, 4, 4, 1, 1, 1, 1, 0, 4, 2, 2, 4, 4, 2, 3, 0, 0, 4, 2, 4, 3], [2, 0, 2, 0, 1, 2, 0, 2, 0, 2, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 1], [2, 3, 4, 3, 5, 3, 2, 0, 2, 1, 0, 3, 2, 0, 2, 5, 2, 3, 4, 3, 3, 2, 2, 4, 4, 0, 2, 5, 5, 5, 3, 5, 0, 0, 3, 3, 1, 5, 1, 2, 3, 3, 5, 3, 3, 3, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 3, 3, 0, 0, 4, 4, 4, 0, 1, 4, 1, 4, 2, 2, 2, 0, 1, 4, 4, 1, 2, 1, 2, 0, 0, 4, 0, 4, 1, 0, 2, 4, 0, 0, 0, 0, 4, 4, 1, 1, 2, 0, 2, 1, 4, 2, 1, 4, 4, 1, 0, 2, 1, 2, 4, 3, 2, 0, 1, 1, 4, 0, 4, 0, 1, 2, 4, 3, 3, 4, 0, 1, 0, 1, 0, 2, 4, 3, 0, 0, 1, 0, 2, 1, 2, 1, 0, 0, 4, 4, 3, 0, 1], [1, 0, 2, 2, 1, 3, 3, 1, 2, 0, 3, 1, 1, 0, 2, 1, 3, 1, 1, 0, 2, 2, 1, 0, 1, 0], [3, 1, 4, 5], [0, 2, 0, 1, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2], [0, 2, 2, 3, 0, 2, 2, 2, 0, 3, 2, 3, 3, 0, 3, 0, 2, 0, 1, 2, 1, 3, 0, 0, 3], [8, 10, 1, 1, 14, 6, 1], [16, 7, 21], [8, 2, 0, 7, 6, 9, 1], [0, 4, 22, 13, 26, 27, 30, 9]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 6, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in0:{:\\nin1 = in0\\ni0 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = saveChr(len(in0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [2], [1], [0], [], [0], [], [], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 3, 4, 5], [1, 1], [], [1, 2, 1, 0], [0], [], [0, 0, 2, 1, 2, 1, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(2.0) == ( int(34.0) + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 8, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 0, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in0):]:{:\\nb0 = \"\"R\"\"[int(02.0):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 2, 1], [0], [0, 2, 1, 0, 0], [], [0, 0, 0], [], [], [0, 2, 3, 3], [2, 5], [0, 1, 0], [0, 0], [], [1, 0], [], [0], [], [1], [5], [2, 0, 1, 2], [1], [0, 1, 0, 0], [], [], [0], [], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\ns2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [4], [1], [0], [], [], [], [], [], [1, 1], [3, 7], [2, 1], [], [3, 2, 1, 0, 1, 0], [1, 1], [0], [], [1, 1], [5, 2, 2], [], [], [4, 3, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = min(mod(int(3.0),i2), int(7.0)) \\le i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 0, 2, 1, 0, 2, 0, 1, 1, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 3, 0, 1, 2, 1, 1, 0, 0, 3, 0], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 2, 1, 2, 0, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:max(i0, ( int(0.0) + i2 ))]:{:\\nb0 = in1 not in getCharFromString(in1, ( i2 + int(6.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [0], [2], [0], [0], [], [], [0], [2], [2], [], [5], [], [], [], [], [], [], [2, 0, 2, 1, 0], [], [0], [], [], [], [], [4, 5, 0], [], [0], [0, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 1, 0, 0, 1], [0], [13], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[:len(in2)] not in in1[:int(0.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( i0 != i2 or True ) and in1[:int(0.0)] not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 2, 7], [2, 1, 1, 2, 2, 1], [], [3, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 3, 0, 2, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0], [2], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1], [2, 1], [], [], [2, 2, 0], [], [0, 2], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 0, 16, 6, 1, 2, 4, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1[abs(mod(i2,mod(int(1.0),( int(3.0) + divInt(i1,int(9.0)) )))):mod(( i1 + i2 ),int(4.0))][:i2]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 0, 2, 2, 1, 3, 2, 3, 2, 0, 3, 1, 2, 1, 0, 3, 3, 1, 1, 1, 2, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 4, 0, 1, 2, 1, 1, 0, 1, 3, 0], [0, 0, 1, 1, 1, 2, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [2, 0, 1, 0, 2, 0], [], [], [], [], [], [], [0, 1, 1, 0, 1, 0], [0, 3, 6, 2, 2, 6], [0, 0, 1, 2], [1, 1], [2, 0, 2, 1, 0, 1], [0, 0], [], [2, 1, 0, 2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 2, 6, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= ( i0 - ( int(03.0) + i1 ) )\\ni2 *= int(6.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [0], [], [2], [], [2], [], [], [], [], [1, 0, 1, 0, 1, 1], [4, 4, 1, 4, 3, 0], [0, 0, 0, 2, 1], [1], [0, 3, 0, 3, 0, 0, 1, 1, 3, 1, 3, 3], [1], [2, 1, 4, 3], [2], [], [4, 1, 4], [1], [], [2, 0, 2, 3, 2, 4, 4, 4, 0, 3, 4, 1, 2, 0], [2, 1, 3, 1], [5], [2, 2, 1, 1], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 5, 1, 10, 0, 3, 1, 0, 3, 1, 0, 14, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\nb0 = in1[abs(i0):] == (saveChr(max(i2, i1)).capitalize()[:int(4.0)] + s1.strip((saveChr(int(41.0)) + \"\"U\"\")))[saveOrd(in1[:int(43.0)]):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1], [2, 1, 0, 0, 0], [0], [2, 1, 0, 0], [0], [0, 0, 0], [], [], [2, 1], [5, 0], [1, 1], [0, 0], [], [], [], [], [0], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1], [5, 8, 2, 6, 8, 1, 4, 0, 0, 9, 2, 7, 9, 9, 2, 3], [0, 2, 2, 2, 2], [0], [2, 1, 1, 0, 2, 0, 2, 1, 2, 1, 3, 1, 1, 3, 0, 2, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0], [4, 1], [0, 2, 1], [0, 1, 1], [5, 0, 0, 3, 1], [1], [0], [0, 0, 2, 0], [0, 1, 3], [], [1], [0], [5], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 1, 4, 1, 3, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 16, 16, 5, 1, 20, 6, 2, 3, 3, 5, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\ns0 = in0\\ni0 = divInt(int(5.0),int(82.0))\\nb2 = i2 != mod(i2,( int(68.0) + mod(int(14.0),saveOrd(s1[:int(0.0)])) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = int(0.0) \\l max(i2, ( ( int(9279.0) * i2 ) - int(923.0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 0, 4, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = max(i2, int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 3, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 1, 0, 0, 3, 2, 0, 1, 2, 1, 2, 3, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 3, 2, 1, 0, 3, 0, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 1, 2, 1, 0, 2, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 0, 0, 3, 1, 1, 2, 1, 1, 0, 0, 3, 0], [1, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 4, 4, 4, 2, 0, 4], [1], [0], [2, 0, 4, 4, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 18, 13, 0, 60, 21, 9, 10, 11, 4, 0, 1, 6, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[:max(int(0.0), i0)]:{:\\nres0 = getCharFromString(saveChr(i2), min(mod(i2,int(6.0)), ( int(3.0) - ( min(( divInt(divInt(( i0 + ( divInt(( i1 - divInt(min(divInt(int(7.0),i2), len(in1)),i0) ),int(8.0)) - int(1.0) ) ),int(7.0)),int(7.0)) + i2 ), i1) * ( int(9.0) - max(( max(i0, ( divInt(divInt(int(8.0),int(5.0)),mod(int(0.0),i0)) - int(4.0) )) * abs(i0) ), ( max(int(8.0), mod(int(59.0),i1)) + mod(int(9.0),int(2.0)) )) ) ) ))) not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [0], [], [], [0, 3], [], [], [0], [], [], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1], [7, 6, 2, 3, 2, 6, 8, 4], [0, 0, 0, 0, 2], [0, 0], [1, 3, 3, 3, 2, 2, 3, 1, 2, 3, 2, 0, 2, 0, 2, 1, 2, 3, 1, 1, 3, 2, 1, 3, 1, 3, 3, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1], [3, 0, 0, 4, 4, 2, 1, 4, 4, 3, 3, 4], [2, 0, 2, 0, 1, 1], [0, 0, 0], [4, 4, 4, 4, 3, 3, 5, 5], [1], [], [4, 0, 0, 2, 0, 0, 0, 4, 0, 4, 2, 0], [3], [1], [1, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 0, 1, 0, 0, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(7.0)\\ni0 = len(in1.rstrip())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 1], [1, 1], [0], [], [0, 1], [], [], [1], [], [3, 3], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 != int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 2, 0, 2, 3, 1, 0, 0, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nres0 = in1[( i0 + int(0.0) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [3, 0], [], [2], [2, 1, 2, 1, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 1, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 1, 1, 2, 0, 6, 0, 3, 0, 0, 5, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1:{:\\nres0 = ( min(i0, i2) != abs(int(0.0)) or ( in1.endswith(in0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0, 0], [], [], [], [], [], [0, 1, 1], [0, 9, 1], [1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(09.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 0], [0, 2], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [6], [1, 1], [1], [0], [], [], [2], [], [4, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i1\\nin1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 9, 9, 12, 1, 38, 10, 8, 4, 6, 6, 1, 0, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( divInt(int(0.0),i0) != mod(i2,int(7.0)) or ( in0[i2:int(5.0)].capitalize()[abs(i0):i1].endswith(saveChr(( divInt(int(7.0),i2) + divInt(min(divInt(i1,( len((\"\"R\"\" + s0.rstrip())) + ( min(i2, divInt(max(int(6.0), i0),int(1.0))) * int(7.0) ) )), i0),i1) ))) and True ) )\\n:}else:{:\\ni0 = ( int(7.0) - abs(int(9.0)) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [3], [1, 0, 1], [], [1], [], [], [], [3, 0, 3], [24], [], [], [6, 23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"#\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[abs(len(in1)):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0, 1, 0], [], [1, 0, 1], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 9, 0, 9, 5, 8, 3, 4, 9, 2, 1, 7, 3, 4, 6, 6], [2, 1, 2, 2, 1, 0, 1], [1, 0], [1, 2, 2, 3, 1, 1, 0, 1, 2, 0, 2, 0, 3, 1, 1, 2, 3, 3, 1, 3, 1, 2, 0, 3, 1, 0, 2, 1, 1], [1, 1, 1, 0, 1, 1, 0], [0, 0, 4, 1, 1, 3], [1, 0, 0], [1, 1, 0, 0, 0], [4, 5], [], [], [0, 4, 3, 3, 4, 0, 4], [0, 1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2], [0], [1, 2], [], [], [], [], [4], [], [], [0, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1], [1, 4], [2], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i2 \\g int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0, 0], [], [], [], [], [], [0, 1, 1], [0, 9, 1], [2], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(09.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [0], [0], [], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [2], [1, 1], [], [0], [], [], [], [], [0, 0], [], [], [2, 1], [], [0], [], [1, 0, 1], [2, 7, 7], [1, 2, 1], [1, 1], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 1, 1, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i2\\nloopBreak% = 0\\nwhile not True:{:\\ni1 *= int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [0], [2], [0], [0], [], [], [0], [2], [2], [], [5], [], [], [], [], [], [], [2, 0, 2, 1, 0], [], [0], [], [], [], [], [4, 1, 0], [], [0], [0, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 0, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = len(s0[i2:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [0, 1, 1, 0], [2], [0, 0, 2], [], [0], [], [], [1, 2], [2, 1], [1, 0, 1], [0], [], [1], [], [0], [], [1, 1, 1, 1, 1], [0, 8, 9, 8, 5], [1, 2, 0, 1, 2, 1, 2, 2], [], [3, 0, 3, 1, 2, 1, 0, 2, 0, 3, 1, 3, 0, 3, 0, 0, 1, 3, 0, 2, 2, 0, 1, 1], [1, 1, 0, 0, 0, 1], [3, 1, 4, 0, 1, 2], [2, 0, 2, 1], [1, 1], [1, 1], [1], [], [0, 1], [], [], [], [0], [16], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = len(s1) == i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [5, 1], [2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [4], [], [], [1], [1], [], [4, 1], [2], [], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"R\"\".capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 2, 2, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nres0 = s2 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2, 1], [], [2, 0, 1, 0], [1], [], [], [1], [4], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 1, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = getCharFromString(saveChr(mod(i2,int(0.0))), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [0], [], [1], [], [1, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i2\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 3], [2, 0, 0], [1], [1, 0, 1], [], [], [2], [], [4, 2], [1], [], [0, 1], [], [], [0], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(43.0)\\nin1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 0], [2], [1, 1], [], [0, 0], [], [], [2], [2], [1, 0], [0], [], [1], [], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [3, 2, 8, 7, 3, 3, 4, 4, 0, 1, 4, 3, 2, 9, 2], [0, 2, 2, 1, 0, 1, 1], [1, 1], [3, 0, 3, 0, 1, 2, 1, 0, 2, 0, 1, 3, 1, 0, 3, 1, 1, 2, 3, 1, 3, 1, 2, 0, 0, 3, 3], [0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 4, 1, 3, 2, 4], [1, 2, 2, 1, 0], [0, 0], [4], [1], [0], [4, 2, 4, 1], [3, 2], [2], [2], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 5, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= min(i2, max(i2, int(3.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1, 0], [4], [0, 1, 0], [0], [], [3, 0], [0, 0], [], [], [1], [3], [1, 0], [1], [0, 0, 3], [1], [], [0], [1], [], [1], [], [], [], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( i1 \\le i0 and b0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [2, 2], [5], [0, 1], [0], [], [0, 0], [], [], [], [1], [7], [2, 1, 1, 0, 2, 2], [], [2, 0, 2, 0, 0, 3, 0, 2, 0, 2, 0, 3, 0], [1, 0, 1, 1], [0, 2], [0], [0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [0, 2], [], [0], [], [], [1, 2, 2], [5], [1, 0], [0], [], [0], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [1, 5, 2, 8, 4, 7, 5, 8, 7, 4], [0, 2], [], [1, 2, 1, 3, 3, 1, 0, 1], [1], [0, 0], [], [0], [2, 5], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 1, 0, 8, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(1.0) != divInt(int(5.0),min(min(int(2.0), i0), int(8475874.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [], [], [2, 1], [1], [0, 0], [], [2], [1], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i2 != i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 3], [], [], [0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 2, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 2, 2, 2, 0, 0, 3, 3, 4, 0, 12, 2, 3, 2, 0, 7, 0, 1, 11, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in s2[( len(in1) + i0 ):]:{:\\nres0 = ( ( i2 != len(in1) or in0.startswith(s0) ) and in1[( i0 + int(0.0) ):i0].rstrip()[int(7.0):].endswith(saveChr(abs(int(5.0)))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [0, 1, 2, 0, 0, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 1, 2, 1, 0, 3, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 3, 0], [0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 0, 34, 8, 9, 5, 3, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i1], abs(divInt(i2,int(0.0))))[( int(7.0) + min(len(saveChr(( ( divInt(int(5.0),i0) + divInt(min(( i0 * max(int(7.0), ( int(7.0) - i2 )) ), abs(max(int(1.0), int(7.0)))),int(7.0)) ) - int(9.0) ))), i0) ):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 5, 5, 6, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 2, 1, 0, 2, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 0, 3, 0, 0, 3, 2, 0, 2, 2, 2, 0, 0, 2, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 2, 3, 1, 0, 0, 0, 3, 0, 3, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 0, 3], [1, 0], [2, 0, 0, 0, 1], [0], [3], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nb2 = in1[int(0.0):i2] not in in0\\ni2 = int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [0, 1, 0, 2, 1], [1], [2, 0, 2, 2, 0, 0, 0], [1, 1, 0], [], [1, 1], [0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 7, 3, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= divInt(i1,divInt(( i0 - i2 ),i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [0], [2, 0, 0], [1], [], [], [0], [5, 5], [], [], [3, 4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 1, 0, 0, 1, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (saveChr(divInt(i0,i2)) + in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [0], [], [], [2], [], [1], [], [1], [5], [2], [0], [1], [], [], [2], [1, 1, 1, 0, 0, 0, 1, 0], [5], [], [0], [4, 4], [3, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(5.0)).lstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [1], [], [], [], [], [0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 1, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 0, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [2, 4, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 32, 10, 7, 4, 6, 4, 0, 0, 9, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0.capitalize()[mod(len(in2[mod(int(07.0),int(5.0)):]),( i0 + len(in1) )):] not in saveChr(divInt(int(7.0),abs(i2)))[i2:divInt(mod(int(6.0),i0),( min(i1, i2) + ( len(in1) * divInt(min(i1, ( max(int(1.0), i2) - int(7.0) )),int(7.0)) ) ))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [0], [1], [0], [], [], [], [], [], [1, 1], [0, 8], [], [], [1, 1], [], [], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(0.0) \\l int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [3, 4, 7, 9, 5, 0, 1, 6, 4, 0, 4], [2, 0, 2, 1, 1], [0], [3, 2, 1, 3, 0, 2, 3, 0, 2, 0, 1, 3, 1, 0, 0], [0, 1, 0], [1, 1, 3, 2], [2, 0], [1], [5], [], [], [2, 0], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 11, 11, 5, 0, 15, 3, 4, 2, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(( int(3.0) * max(i2, mod(len(in2[i0:( i2 + int(4795.0) )]),abs(int(016404.0)))) ), i1) \\ge i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 2, 1], [0], [0, 2, 1, 0, 0], [], [0], [], [], [0, 2, 3, 3], [2, 5], [0, 2, 0], [0, 0], [], [1, 0], [], [0], [], [1], [5], [2, 0, 1, 2], [1], [0, 1, 0, 0], [], [], [0], [], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [5, 0], [], [], [0, 4, 1], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[i0:] not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [0, 2, 0], [0], [2, 0, 0], [0], [], [1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( i2 - i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 2, 1, 0, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 1, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 9, 1, 1, 0, 1, 3, 1, 1, 10, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize()[i0:len(\"\"R\"\"[mod(int(0.0),i2):])]:{:\\nres0 = saveChr(int(7.0)) == in1[i2:int(2.0)].rstrip()[:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [3, 3, 3, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 33, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in0[saveOrd(in0):]:{:\\nres0 = int(07.0) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 339}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 34, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nres0 = s0[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [1, 3, 1, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 35, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 0, 0, 3, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[int(0.0):]:{:\\nres0 = ( ( len(in1) != int(7.0) or True ) and in1.startswith(in0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 300}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 37, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 38, 12, 8, 6, 6, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(max(( int(1.0) + i0 ), ( i2 + ( mod(int(7.0),abs(i2)) * i0 ) )), mod(divInt(int(5.0),i1),( min(( i2 - divInt(len(s0),( min(i1, divInt(max(int(7.0), i2),int(6.0))) + int(1.0) )) ), i0) * i0 ))):]:{:\\nres0 = in1[divInt(int(7.0),abs(int(7.0))):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 477}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [1, 3, 0, 0, 0, 2, 0, 3, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 38, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(7.0):]:{:\\nres0 = len(in1) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 563}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 3, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 1, 3, 1, 4], [1, 0, 1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 0], [1, 0], [2, 1, 0, 0, 1], [0, 2, 1], [17, 21], [], [9], [20]], "fitness": 43, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 4, 4, 4, 0, 12, 0, 4, 0, 0, 5, 0, 0, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in0):] == in1:{:\\nres0 = ( abs(i0) != int(8.0) or ( s1.endswith(getCharFromString(in0[abs(int(7.0)):i1], int(5.0))[i2:int(7.0)][:len(saveChr(i2))]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):].startswith(in1)\\n", "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 2, 1, 3], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 4, 2, 0, 3, 0, 1, 2, 1, 3, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 44, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 12, 0, 54, 17, 11, 9, 8, 6, 1, 1, 15, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[min(saveOrd(in1), ( int(1.0) + i2 )):]:{:\\nres0 = in1[( i2 + ( mod(int(7.0),abs(i2)) * i0 ) ):] not in saveChr(mod(divInt(int(5.0),i1),( min(( i2 - divInt(len(in0[( min(i1, divInt(max(int(7.0), i2),int(6.0))) + int(1.0) ):i0]),i0) ), divInt(int(7.0),abs(int(7.0)))) * max(i2, ( ( ( int(9.0) - int(8.0) ) - mod(int(5.0),i1) ) * int(0.0) )) )))[len((\"\"R\"\" + saveChr(int(4.0))).rstrip()):divInt(int(8.0),saveOrd(s0))].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 644}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 7, 4, 7, 7, 9, 1, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 3, 1, 1, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1, 3, 2, 1, 1, 3, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 0, 4, 0, 0, 1, 1, 4, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 0], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 4, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 44, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 34, 9, 8, 5, 4, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(max(i0, i2), max(mod(i2,int(0.0)), ( ( min(int(7.0), int(1.0)) + divInt(( int(7.0) + i0 ),divInt(saveOrd(in1),( i1 * min(min(( int(7.0) - i2 ), divInt(max(int(4.0), i1),int(7.0))), int(7.0)) ))) ) + i2 ))):]:{:\\nres0 = in1[i0:] not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 644}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 4, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[i1:len(in1)]:{:\\nres0 = in1[i1:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(0.0)\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 1, 1, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:( len(in1) + i0 )]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [1, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 32, 9, 6, 5, 4, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = in1[len(getCharFromString(in0[:i0], int(7.0))[i2:mod(i0,int(7.0))]):abs(int(5.0))][min(i0, divInt(( divInt(int(2.0),i1) + ( len(saveChr(( i2 + ( i1 - ( int(2.0) - i2 ) ) ))) + divInt(min(int(5.0), i0),int(7.0)) ) ),int(5.0))):] not in (\"\"R\"\" + s0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 651}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 8, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 0, 2, 1], [0, 1, 1], [3, 3, 2, 0, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 1, 0, 3, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 2, 0, 2, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [3, 0, 2, 0, 3, 0, 1, 2, 1, 0, 3], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 12, 0, 49, 16, 9, 6, 10, 5, 0, 1, 10, 3, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0[min(mod(i0,i2), mod(divInt(int(0.0),mod(int(4.0),abs(i0))),i0)):].capitalize()):]:{:\\nres0 = in1 not in saveChr(( divInt(int(5.0),i1) + ( min(( i2 + divInt(len(in0.rstrip()),mod(min(i1, divInt(max(int(8.0), i2),int(7.0))),mod(i0,i0))) ), ( int(1.0) * abs(int(7.0)) )) - int(7.0) ) ))[i0:max(( ( int(9.0) + int(8.0) ) - divInt(int(5.0),i1) ), int(0.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 3, 0, 8, 2, 1, 0, 2, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(i0,i2):]:{:\\nres0 = ( ( int(0.0) != len(in1) or True ) and in1[mod(i2,int(7.0)):] not in \"\"R\"\" )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 4, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1)):{:\\nres0 = in1[:saveOrd(in0)] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.rstrip():{:\\nres0 = in1 not in in1[saveOrd(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):len(in1[i1:])]:{:\\nres0 = in1 not in in0[int(0.0):abs(mod(i1,int(7.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 2, 3, 1, 4, 0, 1, 0], [2, 0, 1], [1, 0], [0, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 12, 3, 3, 1, 2, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):len(in1[mod(int(0.0),i1):])]:{:\\nres0 = mod(i2,int(7.0)) != ( int(1.0) + abs(i2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 1, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1 not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 2, 1, 7, 8, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 0, 0, 3, 3, 2, 1, 0, 2, 3, 0, 0, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 10, 0, 33, 8, 9, 5, 3, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(len(in1), i0):]:{:\\nres0 = in1[abs(min(mod(i2,int(0.0)), mod(int(2.0),len(in0)))):] not in getCharFromString(s0, i2)[( divInt(( int(7.0) + i0 ),( min(i1, i1) + max(abs(( int(7.0) * i1 )), ( max(i2, i0) - int(2.0) )) )) + int(1.0) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 1, 0, 0, 2], [0, 0], [1, 5], [3, 3, 1, 0], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [0, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 5, 0, 10, 1, 2, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = ( min(i2, i0) != min(mod(i0,int(0.0)), i1) or ( True and in1 not in in1[int(7.0):] ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 8, 1, 1, 7, 7, 5, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 0, 2, 1], [0, 1, 1], [3, 3, 2, 0, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 3, 2, 2, 1, 1, 2, 1, 0, 3, 0, 0, 2, 3, 2, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [3, 0, 2, 1, 3, 0, 1, 1, 1, 0, 3, 3], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2, 1], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 15, 0, 57, 18, 12, 7, 11, 6, 1, 1, 15, 5, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1[min(mod(i0,i1), mod(divInt(int(0.0),mod(int(4.0),abs(i0))),i0)):].capitalize())]:{:\\nres0 = in1 not in saveChr(( divInt(int(5.0),i1) + ( max(( i2 + divInt(len(in0.rstrip()),mod(min(i1, divInt(max(int(8.0), i2),int(1.0))),mod(i0,i0))) ), ( int(1.0) * max(int(7.0), max(i0, min(( ( int(7.0) - int(5.0) ) + divInt(int(8.0),i1) ), len((\"\"R\"\" + saveChr(i0)).capitalize())))) )) - i0 ) ))[divInt(len(s0),( int(5.0) - i2 )):int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 1, 2, 3, 2, 0, 3, 1, 2, 1, 0, 3, 3, 1, 1, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 3, 0], [1, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 1, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 10, 0, 49, 14, 11, 7, 7, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"[:len(in0)][i0:]):]:{:\\nres0 = getCharFromString(in1, i2)[abs(divInt(i2,int(5.0))):( int(7.0) - min(len(in0), ( ( divInt(int(5.0),int(7.0)) + divInt(min(( i0 * max(int(7.0), ( int(1.0) - i1 )) ), abs(max(int(7.0), int(7.0)))),divInt(int(9.0),i2)) ) - i0 )) )] not in saveChr(( int(8.0) * max(divInt(min(i2, i1),divInt(( int(5.0) - int(0.0) ),mod(int(4.0),i0))), int(8.0)) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 653}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 6, 3, 6, 0, 8, 6, 2], [0, 2, 2, 0, 2, 2, 0, 2, 1, 0, 0, 0, 1, 1, 0, 0, 2, 1, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 2, 1, 0, 0, 1, 1, 3, 0, 2, 0, 3, 3, 0, 1, 1, 0, 2, 0, 2, 1, 2, 2, 1, 3, 3, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 0, 0, 2, 0, 2, 1, 0], [0, 0, 2, 1, 0, 2, 1, 2, 2, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0], [0, 5, 1, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 26, 26, 22, 0, 95, 29, 19, 14, 15, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(s1), i0):]:{:\\nres0 = in1[abs(min(mod(i2,int(0.0)), ( int(7.0) + len(s2) ))):] not in getCharFromString(s0[min(( ( divInt(int(5.0),i2) + divInt(max(( i0 * abs(max(( int(7.0) - i2 ), max(divInt(int(7.0),int(1.0)), int(7.0)))) ), int(7.0)),i2) ) + i0 ), ( int(9.0) * min(divInt(max(i2, divInt(( ( int(8.0) - int(5.0) ) * ( int(0.0) * i1 ) ),int(4.0))),min(i0, mod(min(divInt(mod(int(8.0),i0),( ( int(59.0) + i0 ) + i1 )), int(9.0)),int(2.0)))), abs(i1)) )):divInt(i0,min(abs(i0), int(2.0)))], int(6.0))[i2:mod(i1,( int(3.0) - mod(mod(int(6.0),max(min(int(0.0), mod(( i0 + i2 ),int(8.0))), ( divInt(int(6.0),i1) - int(2.0) ))),i1) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 8, 7, 7, 1, 4, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [2, 2, 2, 1, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 3, 2, 2, 1, 0, 2, 3, 2, 0, 3, 1, 2, 1, 0, 3, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 1, 0, 1, 3, 1, 1, 0, 1, 3, 0], [0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 50, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 11, 0, 49, 12, 12, 6, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] == getCharFromString(s0[i2:i2], abs(divInt(i2,int(0.0))))[( int(7.0) + min(max(min(( ( int(8.0) + i1 ) * divInt(max(divInt(i1,len(saveChr(int(7.0)))), ( int(7.0) - i2 )),max(max(int(1.0), int(4.0)), int(7.0))) ), int(9.0)), i0), i2) ):( int(8.0) - min(divInt(max(i1, i0),( divInt(int(5.0),int(0.0)) * divInt(int(4.0),i0) )), int(8.0)) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 572}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 3, 8, 1, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 2], [0, 1, 1], [3, 3, 2, 0, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 3, 2, 2, 1, 2, 2, 1, 0, 3, 0, 0, 2, 0, 2, 1, 0, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [3, 0, 2, 0, 3, 0, 1, 2, 2, 0, 3], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 4, 0, 4, 2, 1, 4, 0, 1, 0], [2, 1, 3, 2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 17, 0, 58, 19, 11, 7, 12, 5, 1, 1, 13, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1[min(mod(i0,i1), mod(divInt(int(0.0),divInt(int(4.0),abs(i2))),i0)):].capitalize()):]:{:\\nres0 = in1 not in saveChr(( divInt(int(3.0),i1) + ( min(( i2 + divInt(len(in0.rstrip()),mod(min(i0, divInt(max(int(8.0), i2),int(1.0))),mod(i0,i0))) ), ( int(1.0) * abs(int(8.0)) )) - abs(i0) ) ))[min(( ( int(7.0) + divInt(divInt(int(9.0),i1),len(\"\"R\"\"[i0:i0].capitalize())) ) - ( i0 - mod(int(8.0),i1) ) ), int(5.0)):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 638}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 3, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2:{:\\nres0 = in0 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 484}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 0, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 52, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = len(s0)\\nres0 = in2 not in in0\\n", "other_info": {}, "test_fitness": 569}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in1):mod(int(0.0),i0)]):][mod(i2,int(7.0)):]:{:\\nres0 = in0 not in s0[( int(5.0) + abs(i2) ):i0].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 3, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 0, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = in0 not in in1[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 692}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 8, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 1, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1, 2], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 1, 3, 0, 4, 3], [1], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 9, 9, 9, 0, 34, 10, 6, 5, 5, 8, 1, 1, 15, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nloopBreak% = 0\\nwhile (s1 + in0) not in s0[int(7.0):]:{:\\nres0 = ( i0 != int(7.0) or ( in1[max(mod(i2,int(5.0)), mod(int(7.0),abs(i2))):( divInt(( min(i0, divInt(len((\"\"R\"\" + saveChr(( i1 + int(4.0) ))).capitalize()),( divInt(int(1.0),i2) - ( min(int(7.0), i1) * int(7.0) ) ))) - int(9.0) ),i2) + i0 )].endswith(in0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 1, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[int(0.0):]:{:\\nres0 = in1 not in in1[int(7.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 5, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( len(s0[len(in2):]) != i0 or True ) and in1 not in s0 )\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 2, 0, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 11, 0, 35, 10, 7, 7, 3, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in1):i0][abs(min(( i2 + int(0.0) ), mod(int(2.0),len(in0[:i2].capitalize()[( mod(( int(7.0) + i0 ),divInt(min(( i1 * ( max(( int(7.0) - i2 ), ( i1 + i2 )) + i0 ) ), int(2.0)),int(0.0))) - i0 ):i1])))):]):]:{:\\nres0 = (\"\"R\"\" + saveChr(int(7.0))).rstrip() not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0], [1, 5], [3, 3, 1, 1], [1, 0], [0, 0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 3, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 1, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 3, 3, 0, 2, 2, 2, 3, 0, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 0, 1, 2, 1, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1], [0], [2, 0, 2, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 0, 4, 2, 2, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 3, 1, 1, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"[len(in1):]):]:{:\\nres0 = ( ( i1 != i1 or True ) and True )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 2, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 4, 2, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 1, 2, 3, 1, 4, 0, 1, 0], [2, 0, 1], [1, 0], [0, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 14, 14, 12, 0, 51, 17, 9, 8, 9, 3, 0, 0, 6, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(s0[len(in1[mod(int(07.0),mod(( i1 + int(1.0) ),divInt(divInt(abs(i2),i2),divInt(( int(7.0) + i0 ),( min(( i1 * ( len(s2) - mod(min(i2, mod(max(int(6.0), i1),int(1.0))),int(7.0)) ) ), i2) + i0 ))))):( int(7.0) * abs(int(9.0)) )][max(i0, ( ( divInt(int(8.0),int(5.0)) - divInt(int(0.0),i1) ) - int(4.0) )):]):i0]) != int(8.0):{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 0], [5], [0, 0], [0], [], [2, 0], [], [], [], [1, 1], [2, 4], [2, 0, 0, 0], [1], [0, 1, 0, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not b0\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0, 1], [0, 0], [4, 5], [3, 3, 1, 2], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 7, 2, 1, 4, 2, 1, 0, 1, 1, 4, 0, 9, 2, 2, 2, 0, 4, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( ( ( len(in1[i0:]) + i2 ) != len(in2) or True ) and in1.startswith(in1) ):{:\\nres0 = not ( i0 + int(0.0) ) \\l i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [2, 0, 0], [1], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 2, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 12, 12, 12, 0, 50, 17, 9, 8, 9, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s0[max(i0, int(1.0)):abs(mod(i2,mod(( int(7.0) + min(i2, divInt(( divInt(len(in2),i0) + ( min(( i1 * divInt(( divInt(int(5.0),i2) - mod(max(int(7.0), i1),int(4.0)) ),int(1.0)) ), i2) + i0 ) ),( int(7.0) * abs(int(7.0)) ))) ),max(i0, ( ( divInt(int(9.0),int(8.0)) - mod(int(5.0),i2) ) - int(0.0) )))))]) == i2\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1, 1], [1, 2, 0], [2], [2, 0], [], [0], [], [], [3], [4, 5, 0], [0, 1, 1, 1], [0, 0, 0], [], [3], [0], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 2, 9, 7, 7, 9, 9, 4], [2, 1, 1], [], [0, 1, 1, 3, 2, 1, 3, 1, 2, 2, 1, 1, 2, 2, 1, 3, 3, 0, 0, 1], [1, 0, 0, 0, 1], [4, 3, 4, 4], [1, 1, 1], [1, 1], [3, 1, 5, 2, 3, 2], [], [], [0, 2, 0, 3, 4, 4, 0, 0, 0], [0, 1], [], [0], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 3, 4, 3, 0, 1, 1, 0, 0, 9, 9, 3, 0, 20, 5, 4, 3, 2, 6, 0, 0, 9, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\nloopBreak% = 0\\nwhile ( i2 \\le int(56.0) and int(2.0) != saveOrd(in2[mod(int(9.0),len((getCharFromString(saveChr(int(7.0)), ( ( int(7.0) - int(9.0) ) - ( mod(int(9.0),saveOrd(s2)) - saveOrd(in0) ) )) + s2))):i1]) ):{:\\nres0 = i1 \\l int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 2, 0, 1, 1, 2], [1, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 2, 2, 1, 1], [1, 1], [0], [1, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [1, 0], [17], [17], [], [20]], "fitness": 69, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 12, 12, 13, 1, 49, 15, 10, 11, 5, 5, 2, 0, 15, 4, 2, 3, 2, 1, 1, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile \"\"r\"\" == s0:{:\\nres0 = ( len(in2[abs(i0):].rstrip()) != i2 or ( s2.endswith(saveChr(abs(( i0 + int(0.0) )))[( int(7.0) + min(int(5.0), ( mod(( int(7.0) * i0 ),divInt(len(s2[( i1 - min(max(( int(7.0) - i2 ), divInt(abs(int(1.0)),i1)), int(7.0)) ):i0]),i2)) * i0 )) ):]) and True ) )\\ni1 -= ( int(7.0) - max(divInt(len((\"\"R\"\" + s1.capitalize()).lstrip()),i1), divInt(( ( int(9.0) * int(8.0) ) + ( int(5.0) + i2 ) ),int(0.0))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 0], [0], [0, 0], [0], [0, 0], [], [], [0, 3], [0], [2, 1], [0], [5], [], [], [], [], [1, 1], [3, 9], [0, 2], [], [1, 0, 1], [], [2], [], [], [4, 1, 5], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveChr(int(3.0)).endswith(in1)\\nres0 = i0 \\l int(9.0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [0], [1], [0], [], [3, 3, 1], [], [], [], [1, 0, 1], [0, 3, 1], [], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(0.0) \\l int(31.0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 0, 2, 0, 0, 1, 1, 2, 0, 1, 3, 2, 0, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 3, 0, 10, 1, 3, 0, 1, 3, 0, 0, 8, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( len(in0[len(in2):]) != i2 or True ) or in1.rstrip()[int(5.0):] not in saveChr(abs(mod(i0,int(7.0))))[i2:int(5.0)] )\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 0, 0], [], [1, 1, 1, 0], [], [0, 0], [], [], [2], [2], [0, 2, 1], [0], [5], [3], [1], [], [], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [2, 8, 6, 5, 8, 6, 0, 3, 6, 1, 0, 0, 3, 3, 1], [2, 1, 1, 2, 1, 2, 2, 1, 1], [0, 0, 0], [1, 3, 0, 0, 0, 2, 1, 1, 0, 0, 0, 2, 2, 1, 1, 3, 1, 3, 2, 1, 2, 1, 1, 1], [0, 1, 0, 1, 1], [2, 4, 2], [1, 2], [1, 0, 1], [4, 4, 2, 0, 5], [1, 1, 1, 1, 1], [], [4, 2, 4, 2, 2, 2, 1, 0, 4, 3, 3, 1, 3, 1, 0, 4, 3, 3, 1, 0, 4, 4, 3, 0, 1, 0], [3, 0, 0, 2, 3, 2], [0, 5], [0, 1, 1, 2], [3, 3, 0, 2, 1], [8], [5], [3], [18, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 0, 4, 0, 2, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 15, 15, 9, 3, 24, 5, 3, 2, 3, 5, 5, 0, 26, 6, 2, 4, 5, 1, 1, 1, 2], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(2.0)\\ni1 = abs(i1)\\ni2 = i1\\nb2 = ( getCharFromString(\"\"/\"\"[i2:][:( int(8.0) - int(6.0) )][:i2], i1)[i1:mod(( int(586.0) * int(0.0) ),saveOrd(in1))].lstrip().endswith(getCharFromString(((\"\"!\"\" + (\"\"I\"\" + in1)) + ((\"\"3\"\" + s2) + (s0 + \"\"f\"\").capitalize().strip(in2)).capitalize()), int(3.0))) or abs(divInt(int(6.0),mod(int(1.0),int(00.0)))) == int(331.0) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [1], [5], [0, 1], [0], [], [2], [], [], [], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 4, 8, 7, 3, 0, 5, 3, 2, 9, 0], [2, 0, 0, 0, 0, 1, 0, 2, 1, 1], [1], [2, 1, 0, 3, 0, 3, 2, 0, 0, 0, 2, 2, 3, 3, 3, 3, 0, 0, 3, 0, 2, 1, 3, 3, 0, 1, 2, 2, 3, 1, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0], [2, 1, 1, 2, 2, 1, 0, 3, 0, 1], [0, 2, 1, 2], [0, 1, 1], [5, 2], [1], [], [2, 2, 4, 0, 1], [0], [], [2, 0], [1], [], [4], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 10, 0, 33, 7, 10, 4, 3, 2, 1, 0, 5, 1, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(s2, divInt(int(1.0),i2))[abs(i0):max(( i0 + i0 ), i0)][( mod(max(abs(abs(max(i1, i0))), min(i2, ( int(4.0) * len(\"\"e\"\") ))),min(i1, int(87.0))) - mod(( max(int(3.0), int(05329.0)) * i1 ),int(0.0)) ):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 0, 0, 2, 0, 1, 2, 1], [0, 0], [1, 5], [3, 3, 3, 3, 0], [1, 0, 0, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 5, 0, 2, 3, 6, 9, 5, 4, 0, 5, 5, 9, 7, 6, 2, 4, 1, 9, 7, 5, 0, 0, 0, 6], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2, 0, 1, 0, 0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 2, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 2, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 0, 2, 1, 1, 1, 1, 2, 3, 3, 2, 3, 1, 2, 3, 1, 2, 1, 0, 3, 0, 2, 2, 1, 2, 2, 3, 3, 3, 2, 0, 2, 1, 1, 3, 3, 2, 2, 3, 0, 3, 0, 2, 2, 3, 0, 1, 2, 1, 3, 2, 0, 1, 1, 0, 2, 1, 2, 3, 3, 3, 2, 2, 1, 2, 2, 0, 1, 2, 3, 1, 3, 3, 2, 0, 3, 0, 1, 0, 2, 3, 1, 2, 1, 2, 3, 0, 2, 0, 3, 2, 1, 1, 3, 1, 0, 2, 2, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [3, 3, 2, 0, 3, 0, 4, 2, 1, 3, 3, 3, 0, 4, 0, 0, 0, 3, 1, 4, 2, 3, 0, 4, 4, 0, 3, 1, 3, 2, 3, 4, 0, 3, 3, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 5, 4, 4, 0, 0, 3, 5, 2, 4, 1, 2, 4, 0, 3, 4, 4, 5], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0, 3, 3, 2, 2, 0, 2, 4, 0, 2, 2, 2, 0, 0, 4, 1, 4, 0, 0, 4, 2, 4, 1, 1, 4, 1, 4, 0, 2, 1, 1, 1, 1, 4, 2, 3, 0, 0, 2, 1], [0, 1, 3, 0, 0, 3, 0, 2, 2, 2], [1, 0], [2, 2, 0, 2, 1, 0, 2, 0, 0, 2, 2, 1, 0, 0], [0, 3, 1, 2, 2, 1, 0, 3, 0, 3, 2, 0], [17, 2, 4, 13], [6, 5], [2, 8, 1], [20, 16, 19]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 2, 2, 9, 2, 2, 5, 4, 0, 0, 43, 43, 29, 0, 155, 48, 37, 28, 20, 18, 12, 1, 56, 10, 2, 14, 12, 4, 2, 3, 3], "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( ( ( in1[len(s0):] not in s0[i1:abs(min(mod(i1,int(0.0)), divInt(int(7.0),len(in0[i1:]))))] or b2 ) and ( divInt(( int(5.0) + i1 ),( min(saveOrd(getCharFromString((\"\"R\"\" + saveChr(i0)), ( ( divInt(abs(i2),( max(int(7.0), i1) + int(0.0) )) * int(1.0) ) - i1 ))), divInt(int(7.0),int(7.0))) + len(in2) )) * int(9.0) ) != len(\"\";g\"\") ) and s2.endswith(((in1[i2:divInt(( ( int(8.0) - int(5.0) ) - ( int(0.0) * i2 ) ),int(4.0))][:len(s1.rstrip()[i0:])] + s2[i1:][mod(int(8.0),int(59.0)):int(9.0)][int(2.0):divInt(min(saveOrd(in1), ( min(int(2.0), ( min(int(5.0), ( int(0.0) + i0 )) + min(i0, ( mod(int(2.0),( mod(len(getCharFromString(\"\"2\"\", max(saveOrd(getCharFromString(s0, ( i2 - ( int(3.0) + int(6.0) ) ))), abs(len(in0))))),( divInt(min(i0, saveOrd(getCharFromString(\"\"8\"\", i1)[( ( saveOrd(\"\"f\"\") - i1 ) + int(9.0) ):].lstrip())),( int(5.0) + min(divInt(i2,int(4.0)), int(0.0)) )) + i2 )) - mod(int(5.0),mod(len(\"\"C\"\".capitalize()),max(len(in1.capitalize()), divInt(( int(5.0) - ( ( i2 + int(9.0) ) + ( abs(int(7.0)) - len(\"\"-\"\"[:saveOrd(\"\"E\"\")]) ) ) ),mod(i0,min(i2, int(6.0))))))) )) - i1 )) )) + ( len(\"\":\"\") + int(2.0) ) )),( int(4.0) - ( len(\"\"1\"\") - i2 ) ))]) + (in1 + in2)[divInt(i1,max(mod(int(1.0),int(9.0)), saveOrd(\"\"N\"\"[int(7.0):i1]))):( mod(int(5.0),int(0.0)) - int(0.0) )].capitalize())) ) and mod(i0,i0) \\l int(06.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 1], [0, 2, 1, 2, 1], [0, 1], [2, 1, 1], [0], [0], [], [], [], [5], [1], [0], [], [3, 3, 1], [], [], [0], [1, 1, 0, 1, 1, 1], [4, 9, 7, 8, 4, 1], [0, 2, 1, 0, 2, 1, 1, 1], [1, 0], [3, 2, 0, 1, 3, 0, 0, 1, 3, 3, 1, 0, 3, 2, 1, 2, 0, 1, 0], [0, 0, 1], [2, 3, 2, 4, 3], [1, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 0, 1, 2, 3, 2, 2], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0], [4, 4, 3, 0, 3, 2, 0, 1, 4, 4, 0, 0, 0, 3, 0, 3, 3, 1, 1, 2, 4, 1, 3, 2, 1, 2, 1], [3, 0, 3, 3, 1], [1, 4, 5], [0, 2, 1, 1], [1, 3, 3, 1, 1, 1, 2, 1, 2, 2, 3], [], [14, 18, 12, 14, 0], [9, 4, 1], [10, 26, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 6, 6, 8, 2, 19, 3, 5, 3, 1, 8, 11, 1, 27, 5, 3, 4, 11, 0, 5, 3, 3], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString((in1 + (s0[abs(( i0 - int(4.0) )):len(\"\"o\"\")] + s1.strip(s2).rstrip(in0))), i2).rstrip()\\nloopBreak% = 0\\nfor s2 in (s2 + ((\"\"\"\\\\\"[s\"\" + \"\"m\"\") + saveChr(i1)[int(9.0):])):{:\\ni0 += abs(saveOrd(\"\"o9\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(78.0) != i2:{:\\ni1 = len((\"\"a41\"\"[:( int(4.0) + mod(i1,int(1.0)) )] + \"\"&\"\"[:i1]))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [0], [3, 0, 1, 1], [], [2], [2], [], [4, 3], [1], [], [1, 0], [], [], [1], [0], [16], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(i1)\\nin1 = \"\"Q\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [0], [0, 0], [0], [0], [], [], [0, 2, 3], [0], [0, 1], [0], [], [0], [], [], [], [1, 1, 1, 1, 1, 1], [6, 5, 7, 3, 5, 8], [2, 2, 0, 0, 2], [], [1, 2, 3, 2, 3, 0, 2, 3, 3, 0, 3, 1, 3, 3, 1, 3, 2, 2, 2, 1, 1, 2, 0, 1, 3, 0, 0], [0, 0, 0, 0, 0, 0, 1], [2, 2, 2, 3, 1, 3, 1, 2, 2], [1, 1, 0, 0, 0, 1], [1], [2, 0], [1, 1], [0], [0, 2, 1, 2, 1], [], [], [1, 2], [3, 0], [1], [], [], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 6, 6, 5, 0, 27, 7, 9, 6, 1, 2, 2, 1, 5, 0, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s0:{:\\nb0 = b2\\nres0 = int(6.0) \\l ( abs(( abs(i2) - ( abs(len(\"\"%\"\"[:i2])) - max(int(5.0), len(\"\"B\"\"[max(int(7.0), abs(( ( ( int(3.0) + int(5.0) ) + mod(i0,int(8.0)) ) + abs(i0) ))):])) ) )) - i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 3, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 3, 2, 3, 2, 0, 2, 0, 2, 2, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1, 1], [0], [2, 1, 0, 2, 2, 0, 2, 4, 0, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0, 0], [5, 10], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 33, 12, 5, 4, 8, 3, 2, 0, 10, 1, 0, 4, 2, 2, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"F\"\"[:len(s0)] not in in2[mod(mod(int(0.0),i0),( i2 + int(7.0) )):divInt(int(5.0),len(in1.capitalize()[i2:i0]))][divInt(divInt(int(7.0),abs(( min(( i1 + divInt(i2,( mod(i1,divInt(len(\"\"K\"\"),int(3.0))) * i2 )) ), int(1.0)) * int(7.0) ))),i0):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2], [0, 1, 1], [3, 3, 3, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 2, 2, 3, 0, 0, 2, 2, 2, 0, 0, 2, 0, 1, 3, 1, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1], [3, 0, 2, 0, 3, 1, 1, 3, 1, 0, 1, 2, 2], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 0, 0, 0, 1], [0, 1, 1, 0], [17, 24], [18, 9], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 18, 15, 0, 67, 22, 13, 9, 13, 5, 4, 1, 10, 1, 0, 3, 4, 2, 2, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[min(abs(i1), min(mod(i1,int(0.0)), ( int(7.0) + divInt(i2,divInt(( ( int(5.0) + i0 ) - divInt(len(in0),int(7.0)) ),i1)) ))):max(max(divInt(int(7.0),i2), divInt(len(\"\"R\"\"),int(1.0))), ( int(7.0) - int(7.0) ))] not in getCharFromString(\"\"sjY\"\"[i1:i2], mod(int(9.0),max(( min(i0, divInt(( mod(int(8.0),int(5.0)) + ( int(0.0) * i0 ) ),int(4.0))) - max(int(8.0), ( mod(abs(i2),i2) - divInt(mod(( i1 * i0 ),divInt(i2,int(59.0))),abs(int(9.0))) )) ), int(2.0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0], [], [], [1, 2, 2], [5], [1, 0], [0], [], [0], [], [], [], [1, 1, 1, 1], [7, 5, 2, 2], [0, 2], [], [1, 3, 1, 0, 3, 1, 0, 1], [1], [0, 0], [], [0], [2, 5, 2], [1], [], [3, 0, 2, 3, 1, 3, 4, 0], [1], [], [1], [3], [], [], [], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 8, 0, 2, 0, 0, 3, 1, 0, 8, 1, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(7.0) != min(int(5.0), i0)\\ns2 = (in2 + (\"\"]\"\" + (saveChr(min(int(2.0), i2)) + s2))[:int(2.0)])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [1, 2, 1], [], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [], [1, 0, 0, 1], [3, 1, 5, 1], [2, 1, 0], [1, 1], [3, 1, 0], [], [4], [0, 2], [], [4, 5, 2], [1], [], [4, 1, 0, 4], [3, 1], [0], [], [2], [], [], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 2, 1, 1, 0, 1, 0, 0, 1, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += saveOrd(\"\"4\"\".lstrip())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0, 2, 0, 0, 1], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 3, 2, 1, 1], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 2, 2], [17], [5], [0, 1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 6, 6, 14, 1, 34, 9, 6, 5, 4, 7, 4, 1, 21, 3, 2, 5, 4, 1, 1, 2, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i0):]:{:\\nloopBreak% = 0\\nwhile in1[i2:] not in (in0[len(saveChr(( i0 + int(0.0) ))):i0].rstrip()[int(7.0):abs(int(5.0))] + (\"\"R\"\" + s0.lstrip())):{:\\nres0 = ( ( divInt(( int(7.0) + i1 ),divInt(min(( i2 * len(\"\"f\"\") ), min(( i1 - i0 ), divInt(i0,int(7.0)))),i0)) + int(1.0) ) != i2 or ( in1.endswith((\"\"0\"\"[:i0] + \"\"1\"\")) and True ) )\\ni0 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [3, 3, 2, 0, 3, 1, 1, 3, 1, 2, 3], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 3], [17], [], [], [20, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 10, 10, 8, 0, 40, 11, 11, 5, 6, 6, 3, 1, 15, 3, 1, 3, 3, 1, 0, 0, 2], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[abs(i0):]) != min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in0) )) or True ) and \"\"R\"\" not in getCharFromString(\"\";\"\"[i1:divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len(saveChr(divInt(int(1.0),i1))), divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)) )),i1)], ( int(8.0) - abs(( len((\"\"\"\" + s0.rstrip())) + i2 )) )) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 1, 2, 0, 0, 2, 2, 2, 1, 2, 1, 1, 0, 0, 0, 2, 2, 2, 2, 0, 0, 1, 2, 0, 0, 0, 1], [2, 1, 0, 0, 0, 0, 1, 2, 1, 1], [1, 1, 0, 0, 2, 2, 1, 0, 2, 0, 1, 1, 2, 1, 2, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [2, 0, 3, 0, 3, 0, 0], [5, 0, 5], [0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 1, 1, 2, 2, 0, 0, 2], [0, 0, 0], [2, 1, 4, 5, 2], [0, 3, 1, 1, 2, 1, 2, 3, 0], [0, 0], [0, 0, 0], [1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 3, 2, 6, 9, 9, 3, 5, 6, 3, 4, 5, 1, 4, 5, 8, 8, 3, 6, 2, 2, 6, 0, 5, 8, 2, 4, 9, 8, 6, 2, 8, 3, 9, 2, 5, 7, 0, 3, 8, 0, 2, 3], [0, 1, 1, 0, 2, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 2, 0, 2, 0, 2, 0, 2, 2, 0, 0, 1, 1, 1, 2], [1, 0, 0, 1, 1, 0], [1, 1, 0, 1, 0, 1, 3, 1, 0, 2, 3, 0, 2, 2, 3, 1, 2, 2, 0, 3, 1, 1, 1, 0, 1, 0, 0, 2, 2, 3, 0, 3, 1, 2, 2, 2, 1, 1, 2, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 2, 2, 3, 2, 2, 1, 2, 2, 3, 3, 1, 1, 0, 2, 2, 3, 0, 1, 2, 1, 1, 0, 1, 2, 2, 0, 2, 0, 1, 2, 1, 1, 2, 1, 0, 0, 2, 2, 0, 2, 3, 2, 3, 3, 3, 0, 3, 3, 1, 1, 1, 1, 3, 1, 0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0], [3, 3, 3, 3, 3, 4, 3, 1, 0, 4, 4, 1, 0, 0, 2, 4, 1], [0, 0, 2, 1, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 1, 1, 1, 0], [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 0, 5, 2, 5, 5, 2, 0, 4, 2, 3, 0, 0, 2, 5, 4, 2, 3, 0, 2, 3, 4, 5, 0, 5, 3, 0, 3, 4, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 3, 1, 4, 2, 0, 2, 1, 0, 2, 4, 0, 4, 1, 0, 1, 1, 0, 2, 0, 0, 0, 2, 0, 1, 0, 4, 1, 1, 2, 4, 1, 0, 3, 3, 0, 1, 3, 3, 2, 0, 0, 4, 4, 1, 1, 0, 2, 4, 4, 3, 2, 2, 1, 0, 1, 2, 0, 1, 0], [0, 3, 2, 3, 1, 2, 3, 1, 0], [1, 5, 4], [0, 0, 2, 2, 1, 0, 1, 0, 0, 1, 0], [0, 2, 2, 3, 1, 1, 2, 0, 3, 3, 2, 2, 3, 3, 1], [7, 19], [20, 9, 15], [3, 5, 4, 8, 3], [23, 5, 9, 18, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 27, 27, 10, 17, 4, 11, 0, 0, 7, 3, 17, 3, 5, 9, 2, 3, 4, 44, 44, 30, 6, 104, 29, 17, 18, 14, 31, 15, 4, 62, 9, 3, 11, 15, 2, 3, 5, 5], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(38.0)\\ni1 = int(32.0)\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = ( in0 == s0 and True )\\nres0 = True\\nif i1 != int(69.0):{:\\nloopBreak% = 0\\nfor in2 in s2:{:\\nloopBreak% = 0\\nfor in2 in (\"\"H\"\" + getCharFromString(in2[i0:int(9.0)], len(\"\"3\"\"[int(3.0):i2]))):{:\\ns2 = s0\\nloopBreak% = 0\\nfor in1 in s2.rstrip()[( len(\"\"5\"\".capitalize()) + i0 ):]:{:\\nin0 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = mod(( len(\"\">\"\") * int(5.0) ),mod(mod(i1,len(\"\"u\"\")),int(6.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb0 = not s0 not in s2[int(3.0):]\\nin2 = in1\\nres0 = True\\nloopBreak% = 0\\nfor s2 in in0:{:\\nif not int(4.0) \\l i1:{:\\nloopBreak% = 0\\nwhile int(5.0) != i1:{:\\nif s0[:i1].startswith(\"\"j\"\"):{:\\ni0 -= divInt(divInt(len(s2),i1),saveOrd(\"\"4\"\".strip(\"\"T\"\")))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 += int(1.0)\\n:}else:{:\\nin0 = saveChr(( ( ( int(4.0) * int(5.0) ) + ( i0 * int(8.0) ) ) + i0 ))[i2:int(8.0)]\\nif \"\"\"\"\".endswith(in1):{:\\ni0 = i2\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = ((s0 + \"\"&\"\") + ((in2[:int(36.0)] + in0) + \"\"8\"\".rstrip(\"\"3\"\").capitalize()))\\ns0 = in0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = ( b0 and saveChr(int(2260.0))[int(5.0):i0] == getCharFromString((\"\"/\"\"[:( mod(len(in1),( ( int(8.0) * ( mod(max(min(int(2.0), int(4.0)), i2),mod(mod(saveOrd(\"\"@\"\"),i0),int(9.0))) + divInt(int(8.0),int(6.0)) ) ) + i2 )) + int(283.0) )][divInt(divInt(i2,( i0 * int(92.0) )),( int(5.0) - int(7.0) )):( int(0.0) - i0 )] + s1[i1:mod(mod(i1,( saveOrd(\"\"p\"\") - ( max(min(min(i1, abs(saveOrd(s2))), int(3.0)), int(8.0)) + int(0.0) ) )),int(2.0))]), max(int(3.0), i2)) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 0, 0, 2], [0, 0], [1, 5, 1], [3, 3, 2, 0, 2], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 5, 4, 1, 1, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 0, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 3, 2, 1, 3, 1, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 3], [1, 1, 0, 0, 0, 1], [0], [2, 0, 0, 3, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0, 0, 0, 0, 1], [17, 22, 5, 13, 8], [11], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 2, 1, 9, 1, 3, 5, 2, 0, 0, 14, 14, 12, 0, 50, 15, 9, 9, 6, 6, 6, 0, 16, 2, 0, 3, 6, 5, 1, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in (in1 + in1):{:\\nloopBreak% = 0\\nwhile ( int(7.0) != i0 or ( \"\"R\"\"[int(7.0):].endswith(in0[max(divInt(i2,int(5.0)), mod(int(5.0),abs(i2))):( ( ( min(i0, divInt(len(getCharFromString((\"\"W\"\" + saveChr(( i1 + min(( divInt(int(4.0),i0) + ( divInt(int(1.0),i1) * int(1.0) ) ), int(7.0)) ))), i2)),max(divInt(int(9.0),abs(int(8.0))), max(i0, i0)))) - ( ( int(5.0) + int(0.0) ) * ( int(4.0) - i0 ) ) ) - int(8.0) ) * i1 )]) and not res0 ) ):{:\\nb2 = not s0 not in \"\"FNIl\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1], [1, 0, 0, 1], [], [2, 0, 1, 2], [], [0, 0], [], [], [3], [], [0], [], [], [1], [], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 5, 5, 2, 1, 3, 9, 2, 9], [1, 0, 0, 0, 2, 0], [0], [0, 3, 1, 2, 2, 2, 1, 2, 2, 2, 1, 3, 3, 2, 3, 1, 3, 2, 1, 1, 3, 2, 2, 0, 1, 3, 0, 2, 3, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 2, 2, 4, 4, 3, 2, 2], [0, 1, 1, 2, 1, 0, 1, 2], [1, 0, 0], [2, 2, 0, 0], [1, 1], [], [2, 4, 4, 4, 1, 0, 1, 4, 0, 4], [2, 0, 2, 2, 1], [], [2], [3, 0], [6], [], [], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 0, 4, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 9, 9, 6, 1, 32, 11, 8, 8, 3, 4, 2, 0, 10, 5, 0, 1, 2, 1, 0, 0, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = getCharFromString(\"\"^\"\".capitalize(), i1).capitalize()[max(int(1.0), ( mod(( int(55.0) + ( ( ( int(2.0) - abs(abs(divInt(saveOrd(s2),int(1.0)))) ) - saveOrd(\"\"G\"\") ) * divInt(int(3.0),int(9.0)) ) ),len(s0.capitalize())) - ( ( i0 + int(2.0) ) - abs(i0) ) )):]\\nres0 = True\\ni0 = ( abs(i2) * i0 )\\ns0 = saveChr(int(9.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 2, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 0, 0, 0, 1, 0, 2, 0], [0, 1, 1], [3, 3, 0, 2, 1, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 4, 1, 1, 2, 1], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 2, 0, 4], [1, 1], [0], [3, 0, 0, 2, 2, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 1], [4, 0], [2, 2, 2, 0, 1], [0, 2], [17], [], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 13, 1, 49, 17, 7, 10, 7, 4, 2, 0, 16, 4, 2, 4, 2, 1, 0, 1, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile (s0 + in0) not in in1[len(saveChr(saveOrd((\"\"R\"\" + saveChr(i0)).lstrip()))[mod(int(0.0),( i2 + int(7.0) )):( int(5.0) + abs(i0) )].rstrip(in1)[divInt(( divInt(int(7.0),i1) * ( min(( i1 - divInt(( ( int(8.0) + i2 ) + divInt(saveOrd(\"\"5\"\"),int(1.0)) ),i1) ), int(7.0)) - i0 ) ),i0):]):][i0:]:{:\\ni1 = ( int(7.0) - max(( max(i0, ( divInt(int(9.0),int(2.0)) * int(5.0) )) + mod(int(0.0),i2) ), int(4.0)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 1], [2], [1, 2], [], [0], [], [], [2], [0], [0], [0], [], [1], [], [1], [], [0, 1, 0, 0, 0, 0, 1], [0, 3, 6, 0, 8, 5, 3], [2], [1], [1, 1], [], [], [0], [], [1], [0, 1], [0], [2, 1], [], [], [1], [0, 2], [0], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 7, 7, 1, 1, 2, 0, 0, 1, 0, 1, 2, 0, 2, 0, 0, 1, 2, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile False:{:\\ni2 += int(03.0)\\ns1 = \"\"A8\"\"[:int(60853.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 3, 8, 5, 9, 9, 2, 2], [0, 0, 1, 2, 1, 1, 1, 1, 1, 2, 1, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [3, 0, 4, 3, 3, 0, 4], [1, 1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 8, 8, 12, 0, 38, 10, 8, 3, 7, 7, 2, 1, 17, 4, 2, 4, 2, 1, 0, 0, 1], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s0[len(in1[min(i0, int(0.0)):].capitalize()):]:{:\\nloopBreak% = 0\\nwhile in0 == saveChr(i0)[mod(i1,int(4.0)):mod(int(5.0),len(in0[i2:i1]))]:{:\\nb1 = ( divInt(divInt(int(7.0),i1),divInt(min(divInt(i1,( len((\"\"R\"\" + s0.lstrip()).rstrip()) + ( min(i1, mod(max(int(4.0), i1),int(1.0))) + int(7.0) ) )), i2),i1)) != ( i0 * abs(int(7.0)) ) or ( \"\";\"\".endswith(in1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 2, 1, 2, 1, 0, 1], [2, 0], [0, 2, 2, 2, 2, 2, 0, 0], [0], [0, 0], [], [], [2, 3, 3], [0], [0, 0, 0, 0, 2, 1, 2], [0], [2, 3], [1, 3, 1, 2], [1], [1, 1], [], [0, 1, 0, 1, 1, 1], [0, 3, 8, 4, 9, 3], [1, 2, 2, 1, 1, 0, 2, 1, 0, 1, 0, 0, 1, 1], [], [1, 1, 0, 0, 2, 0, 0, 0, 2, 3, 0, 3, 0, 0, 0, 1, 3, 0, 0, 0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 1], [1, 1], [3, 2, 3, 3, 2, 2, 0, 4, 4, 4], [], [1, 1], [0, 1, 4, 2, 3, 5, 5, 5, 5, 2, 5, 3, 4, 5, 3, 3, 3], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0], [3, 4, 4, 1, 2, 4, 1, 2, 4, 4, 2, 2, 4, 0, 1, 2, 1, 4, 0, 2, 4, 1, 1, 1, 3, 0, 0, 0, 0, 3, 4, 2, 3, 0, 2, 0, 1, 1, 4, 0, 2, 0, 0], [0, 0, 3, 2, 0, 0, 3, 0, 1, 3], [3, 1, 1], [1, 2, 0, 0, 2, 2, 0, 0, 1], [0, 0, 1, 0, 0, 2, 2, 1, 2, 3], [22, 10, 14, 2], [25, 12], [2, 9, 7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 2, 8, 1, 2, 0, 0, 3, 1, 7, 1, 2, 4, 1, 2, 0, 6, 6, 14, 0, 30, 2, 10, 0, 2, 17, 10, 1, 43, 10, 3, 9, 10, 4, 2, 3, 1], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\ns0 = (getCharFromString(getCharFromString(\"\"W\"\", int(03.0)), int(84.0)) + \"\"K\"\".lstrip(getCharFromString(getCharFromString(s1, i1)[i2:mod(i2,i1)][i1:mod(len(\"\"z\"\"),i0)], abs(i2)).capitalize()[i1:])[:i0])\\nin1 = \"\"O\"\"[int(9.0):]\\ns2 = in0.rstrip()\\nloopBreak% = 0\\nwhile ( False or not getCharFromString(\"\"C\"\", len(\"\"2\"\"))[i1:] == \"\"9m\"\" ):{:\\nin2 = (in2 + in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in s2:{:\\nin2 = in0\\nres0 = i0 \\l i0\\nres0 = (saveChr(len((in1 + in2[i1:abs(i1)])[abs(min(saveOrd(\"\"7\"\"), saveOrd(\"\";\"\"))):saveOrd(in0.rstrip())])) + in0[:int(3.0)]) != in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 7, 9, 3, 2, 9, 8, 4], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0, 1, 1, 2, 2, 2, 0, 2, 1], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 1, 3, 2, 0, 3, 3, 3, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 2, 1, 0, 2, 1, 3, 2, 2, 1, 1, 2, 1, 3, 3, 2, 1, 1, 1, 3, 0, 2, 0, 3, 1, 3, 2, 1, 0, 3, 0, 2, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [3, 2, 3, 0, 3, 0, 1, 0, 1, 1, 0, 3, 2, 1, 3, 0, 2, 2, 0, 3, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 1, 2, 2, 1, 1, 2], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4, 1, 1], [1, 1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 2, 0, 1, 0, 0, 1], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 1, 3, 0], [17, 19], [10], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 26, 26, 18, 0, 93, 29, 21, 18, 11, 9, 4, 1, 19, 3, 2, 4, 4, 2, 1, 0, 1], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[abs(mod(i0,len(in0))):] not in saveChr(( i2 + int(1.0) )).rstrip():{:\\nres0 = ( ( int(7.0) + min(i0, divInt(( mod(int(5.0),i0) * int(7.0) ),len(s0[( i1 - min(max(min(int(7.0), int(1.0)), ( max(int(7.0), i2) + int(7.0) )), i1) ):i1]))) ) != i0 or ( (\"\"R\"\" + in1[divInt(int(9.0),max(( min(i0, divInt(divInt(( int(8.0) * int(5.0) ),( int(0.0) - i1 )),int(4.0))) - ( mod(divInt(len(\"\"k\"\"),( divInt(( abs(max(( int(8.0) * i1 ), ( int(59.0) + len(s1) ))) + ( divInt(int(9.0),int(2.0)) - divInt(int(2.0),min(abs(( int(7.0) - int(9.0) )), int(3.0))) ) ),abs(i2)) * ( i2 * min(int(2.0), len(s1)) ) )),( int(9.0) - i2 )) - max(i0, ( i2 * int(8.0) )) ) ), int(4.0))):i1]).lstrip().endswith(\"\";T\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 1, 1], [2, 0, 0, 2, 2, 1], [2, 2, 0], [1, 0, 1], [0], [0, 0], [], [], [0, 3], [2, 5], [0, 1, 2, 0, 0], [0], [2], [2, 2, 0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 4, 3, 2, 7, 4, 8, 2, 4, 4], [2, 0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [1, 1], [3, 0, 1, 2, 1, 0, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [3, 3, 1, 0, 3, 0, 1, 2, 1], [2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [4, 1, 3, 4], [1, 0, 0, 1], [0], [0, 2, 4, 2, 4, 4, 0, 4, 1, 1, 0, 4, 4, 0, 2, 0], [3, 2, 2, 3, 0, 0, 2, 1], [0, 2], [1, 1, 1], [1, 0, 3, 0], [3, 16], [24], [], [2]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 3, 3, 1, 2, 0, 0, 2, 1, 5, 1, 1, 3, 0, 0, 0, 3, 3, 5, 2, 8, 1, 1, 3, 0, 3, 4, 1, 10, 4, 2, 2, 4, 2, 1, 0, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not len(in1) == i2:{:\\ni0 *= int(7.0)\\nb0 = s1.capitalize().capitalize()[:( int(4.0) + i2 )].lstrip()[:i2] == \"\"y\"\".strip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not res0:{:\\nloopBreak% = 0\\nfor in0 in \"\"D\\\\\\tQ\"\":{:\\ni0 -= int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [1, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0, 0, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 3, 1, 2], [17], [15], [0, 8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 11, 2, 5, 1, 1, 5, 5, 1, 7, 0, 0, 2, 5, 1, 1, 2, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), abs(i0)):]:{:\\nres0 = in1[min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in0) )):] not in \"\"R0;p8\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 0, 0, 1, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s1):].startswith(\"\"1\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 3, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 1, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 3, 3, 2, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1, 1, 1, 1, 0, 0, 1], [0], [4, 2, 0, 1, 3, 3, 1, 4, 4, 1, 4, 4, 4, 4, 1, 4, 1], [0, 1, 3, 0, 1, 1, 0, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 0, 3, 0, 1, 3], [17, 6, 14], [4], [], [20, 19, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 12, 2, 5, 0, 2, 2, 7, 1, 17, 8, 2, 1, 7, 3, 1, 0, 3], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in getCharFromString(in2[len(\"\"R\"\"):], len(((\"\";\"\" + saveChr(int(0.0))) + \"\"G\"\".rstrip()))):{:\\nres0 = getCharFromString(saveChr(abs(saveOrd(saveChr(mod(i0,int(7.0)))))), mod(int(3.0),len(getCharFromString(\"\":\"\", i2)))) not in \"\"Oe+\"\".lstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [2], [17], [], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 0, 1, 4, 1, 1, 6, 0, 0, 2, 1, 0, 0, 1, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1[int(0.0):divInt(int(7.0),i0)] not in \"\"2\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 0, 0, 1, 2, 0, 2, 1, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 0, 4, 0, 0, 1, 4, 4, 1, 4], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 4, 4, 3, 0, 4], [1, 1, 1], [0], [3, 3, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 1, 1], [17], [1, 19], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 13, 0, 51, 14, 11, 6, 8, 4, 3, 0, 17, 3, 1, 4, 3, 1, 2, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ((s0 + s2.capitalize()) + \"\"R\"\") not in saveChr(max(max(i1, int(08.0)), max(mod(int(2.0),min(mod(int(7.0),saveOrd(in1[:i2])), ( mod(( int(2.0) + i0 ),mod(min(( i0 * divInt(i0,i0) ), int(1.0)),i1)) * divInt(min(i2, i0),max(( i2 - i1 ), mod(saveOrd((\"\"b\"\" + \"\"t\"\"[saveOrd(in1):int(7.0)].rstrip())[max(i0, mod(( int(4.0) + int(9.0) ),int(8.0))):( int(5.0) * i1 )]),int(0.0)))) ))), int(4.0))))[int(8599.0):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 2, 0, 0, 0, 2, 1, 0, 1, 1, 0, 2], [0, 2], [2, 2, 0, 2, 1, 2, 1, 0, 1, 2], [0], [0, 0, 0, 0, 0], [], [], [3, 1, 1, 0], [0], [0, 1, 0], [0], [], [0, 0], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 0, 7, 4, 1, 4, 4, 3, 9, 8, 9, 4, 0, 9, 0, 7, 9, 5, 0, 5, 1, 2], [0, 1, 0, 1, 0, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 2, 2, 2, 0, 2, 2, 0, 1, 2, 2], [1, 0, 1], [1, 1, 3, 2, 1, 1, 3, 3, 0, 1, 0, 0, 3, 0, 1, 2, 2, 3, 2, 1, 1, 1, 0, 0, 3, 3, 2, 3, 3, 2, 3, 2, 2, 3, 0, 3, 0, 0, 1, 0, 1, 3, 1, 3, 0, 1, 3, 0, 2, 0, 3, 2, 2, 1, 3, 0, 3, 1, 3, 0, 2, 0, 0, 3, 2, 1, 3, 2, 2, 2, 2, 0, 0, 3, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0], [2, 4, 2, 2, 3, 2, 1, 3, 1, 2, 1, 4, 1, 1, 2, 2, 3, 1, 2, 4], [2, 2, 0, 2, 0, 0, 2, 1, 0, 2, 1], [0, 1, 0, 1, 1, 0], [4, 4, 4, 1, 0, 0, 5, 5, 2, 1, 1, 1, 1, 3, 5], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [0], [1, 2, 4, 3, 0, 1, 1, 0, 1, 4, 1, 0, 4, 2, 2, 0, 3, 1, 4, 2, 2, 4, 2, 2, 4, 1, 4, 0, 1, 1, 2, 1, 2, 1, 4, 0, 2, 3, 3, 4, 0, 3, 0, 4, 2, 1, 1, 3, 3, 2, 4, 0, 1, 4], [3, 0, 0, 2, 3, 1, 3, 3, 2, 2, 2, 1], [1, 5, 4, 3], [0, 1, 1, 0, 1, 0, 1, 2, 2, 2, 1, 1, 0], [2, 0, 3, 2, 1, 3, 3, 1, 3, 2, 0, 1, 1, 1, 1, 0, 3], [17, 16, 10, 1], [13, 14, 23, 10, 17], [5, 1, 0], [27, 17, 24, 18, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 1, 0, 1, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"5R\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [0], [0], [], [], [], [4], [1], [0], [], [], [], [], [], [0, 0, 1], [3, 1, 6], [1, 2, 1], [1], [0, 0, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [2], [0], [], [0, 2, 1], [1, 1, 0, 1, 1], [0], [3, 4, 1, 4, 3, 3, 1, 1, 1], [0, 2], [], [], [0, 1, 0, 1, 2], [9, 13], [25, 0], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 2, 0, 0, 1, 0, 1, 5, 1, 9, 2, 0, 0, 5, 2, 2, 1, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (getCharFromString(\"\"J\"\", i1) + ((\"\"z\"\" + \"\"Na\"\") + \"\"2\"\").capitalize()):{:\\ni2 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 3, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1, 0, 0, 2], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1, 1, 0, 1], [0], [2, 0, 0, 2, 0, 1, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 2, 1, 1, 3], [17], [17, 25, 21], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 16, 16, 12, 1, 53, 15, 12, 6, 10, 4, 6, 0, 15, 3, 1, 3, 6, 1, 3, 1, 1], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[len(\"\"R\"\"):]:{:\\nres0 = ( abs(i0) != min(mod(int(0.0),int(7.0)), ( int(5.0) + len(\"\"r3\"\") )) or ( getCharFromString(\"\"z\"\"[i1:divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len(saveChr(divInt(int(1.0),i1))), divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)) )),i1)], mod(int(8.0),min(( min(i2, divInt(( divInt(int(5.0),int(0.0)) - divInt(int(4.0),i0) ),int(8.0))) + i0 ), i1))).endswith((\"\"v;\"\" + in1.rstrip())) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= abs(int(59.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [0, 1], [1], [3, 0, 1], [], [1], [2], [], [0], [1], [], [1], [], [], [], [0], [23], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = \"\"X\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 2, 2, 3, 2, 1, 0, 2, 3, 1, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2, 2, 4, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1], [1, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [1, 2, 0, 0, 1], [0, 0, 2], [17, 9], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 16, 16, 13, 0, 60, 19, 13, 9, 10, 6, 3, 1, 16, 4, 1, 3, 3, 2, 0, 1, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[:len(in1)]:{:\\nloopBreak% = 0\\nwhile len(in1[i0:]) != int(8.0):{:\\nres0 = ( abs(mod(i2,int(4.0))) \\l mod(int(5.0),min(i2, ( divInt(( divInt(i0,( len(in0) + ( i1 + divInt(min(max(int(7.0), i2), ( abs(int(2.0)) * i1 )),int(1.0)) ) )) - int(7.0) ),i2) + i0 ))) or ( \"\"R\"\" not in getCharFromString(saveChr(divInt(int(7.0),max(int(1.0), abs(i0))))[mod(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i1 ) ),int(4.0)):i0], divInt(divInt(abs(mod(int(8.0),i0)),( saveOrd((\"\"J\"\" + s0.capitalize()).rstrip()) * int(59.0) )),len(\"\"6\"\"))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2], [0], [1, 0, 0], [], [1], [2], [], [4, 5, 0], [1], [], [3, 3, 1, 0, 0], [], [], [], [0], [25], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 5, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = ((\"\"Z\"\" + in2) + s0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [2], [], [0], [], [], [], [], [], [], [1, 1], [8, 3], [], [], [3, 2, 2, 3, 1, 1], [0, 0], [2, 4], [1, 2], [], [2, 4], [0, 1], [], [4, 4, 4, 1], [2, 1, 3], [2], [], [3, 3], [], [], [], [3, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 6, 2, 2, 2, 0, 1, 2, 0, 4, 3, 1, 0, 2, 0, 0, 0, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(abs(( ( saveOrd(\"\"#\"\".strip()) - int(8.0) ) * int(3.0) ))).capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 1, 2, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 2, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 0, 0, 3, 2, 1, 2, 3, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [1, 4, 2, 0, 3, 0, 1, 2, 1, 1, 4, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [3, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [9], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 16, 0, 60, 19, 12, 9, 10, 6, 2, 1, 16, 3, 1, 5, 2, 1, 1, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[max(saveOrd(in1), ( int(1.0) + i0 )):]:{:\\nres0 = in1[( i2 + ( mod(int(7.0),abs(i2)) * i0 ) ):mod(divInt(int(5.0),i1),( min(( i2 - divInt(len(in0[:( min(i1, divInt(max(int(7.0), i2),int(6.0))) + int(1.0) )].capitalize()[i0:i0]),divInt(int(7.0),abs(int(7.0)))) ), max(i1, ( ( ( int(9.0) * int(8.0) ) - mod(int(5.0),i0) ) - int(0.0) ))) * max(divInt(i1,i2), saveOrd(saveChr(mod(int(4.0),mod(len((\"\"R\"\" + s0.rstrip())),i0))))) ))][i1:] not in \"\"j\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 1, 0, 0, 2], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 1, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 2, 3, 3, 2, 0, 2, 1, 3, 1, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [2, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 0, 1], [0], [2, 0, 0, 2, 3, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 0, 2, 0, 3], [17, 16, 14], [], [0, 5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 16, 1, 59, 19, 11, 9, 10, 7, 6, 1, 17, 3, 1, 4, 6, 3, 0, 2, 1], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nres0 = (in1 + getCharFromString(in0[( i0 + int(0.0) ):len(saveChr(( i2 + int(3.0) )))], mod(int(5.0),abs(i2)))[divInt(( ( divInt(i0,divInt(min(int(7.0), i1),divInt(i2,( int(2.0) * i1 )))) - divInt(len((\"\"R\"\" + s0.rstrip())),int(5.0)) ) + i2 ),min(int(7.0), i0)):i0])[( int(5.0) * max(int(9.0), min(i0, ( mod(( int(8.0) - int(5.0) ),divInt(i1,i1)) - int(0.0) ))) ):] not in \"\"0Q5O;\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = divInt(max(abs(( i0 * divInt(int(4.0),len(in1)) )), int(8.0)),i2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 3, 8, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 0, 2, 1], [0, 1, 1], [3, 3, 2, 0, 0, 2, 2, 0, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 2, 0, 0, 0, 1, 3, 1, 3, 0, 3, 2, 2, 1, 1, 2, 1, 0, 3, 1, 0, 1, 0, 2, 1, 0], [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0], [3, 0, 0, 0, 3, 0, 1, 2, 1, 0, 3, 3], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 0, 1], [0], [2, 2, 4, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2, 1], [1, 0], [2, 2, 0, 0, 1], [0, 1, 3, 0, 3, 2], [17, 9], [14], [7], [20, 7]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 15, 0, 53, 15, 12, 6, 9, 5, 6, 1, 16, 5, 1, 4, 6, 2, 1, 1, 2], "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):min(mod(i0,i1), mod(divInt(i2,divInt(int(0.0),min(i0, min(( divInt(int(4.0),i1) + ( len(saveChr(divInt(i2,mod(min(divInt(max(i1, mod(abs(int(3.0)),i2)),int(8.0)), ( i0 + i0 )),i0)))[int(2.0):max(int(1.0), min(i1, len(in1.rstrip())))]) * ( ( int(7.0) - int(7.0) ) + ( int(9.0) - i0 ) ) ) ), len((\"\"R\"\" + saveChr(int(8.0))).capitalize()))))),i0))].capitalize()[int(5.0):][i2:]:{:\\nres0 = in0 == \"\"o;J$7\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 3, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 1], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 1, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [2, 5, 4, 4, 4, 0, 4], [1, 1, 0, 1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0, 2, 1], [17, 11], [10], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 14, 0, 51, 16, 8, 7, 9, 6, 4, 1, 16, 3, 1, 4, 4, 2, 1, 1, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[mod(i2,int(2.0)):] not in \"\"R\"\":{:\\nres0 = ( len(getCharFromString(in1[( i2 + int(3.0) ):divInt(int(5.0),abs(i2))], divInt(( ( divInt(i0,divInt(min(int(7.0), i1),divInt(i2,( int(2.0) + i1 )))) * mod(len(saveChr(int(5.0))),i2) ) - min(int(7.0), i0) ),i0))[( int(5.0) + max(int(9.0), min(i0, ( divInt(( int(8.0) * int(5.0) ),divInt(i1,i0)) - int(0.0) ))) ):i1]) != int(4.0) or ( (\"\"L\"\" + s0.rstrip()).endswith(\"\"1k\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 2, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [3, 0, 2, 0, 3, 1, 1, 3, 1, 3, 3], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 2, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 0, 0, 0, 1], [0, 2, 1], [9], [12], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 9, 0, 52, 17, 11, 4, 13, 6, 3, 1, 15, 3, 1, 3, 3, 1, 1, 1, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[:mod(len(in1),min(i0, abs(( int(0.0) + int(7.0) ))))]:{:\\nres0 = in1[divInt(int(5.0),min(divInt(( ( divInt(int(7.0),i1) + divInt(len(in0),int(7.0)) ) - i2 ),max(max(divInt(int(1.0),i0), mod(len(\"\"J\"\"),int(7.0))), divInt(int(7.0),int(9.0)))), i1)):i2] not in getCharFromString(\"\"1\"\"[divInt(int(8.0),max(divInt(len(saveChr(i1)),mod(divInt(divInt(int(5.0),int(0.0)),( int(4.0) - i2 )),int(8.0))), i0)):len((\"\"m\"\" + s0.rstrip()))], int(59.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1, 2, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 3, 0, 2, 0, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 2], [17], [], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 13, 13, 14, 1, 52, 16, 10, 8, 8, 7, 3, 0, 17, 3, 1, 4, 3, 1, 0, 1, 1], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( mod(int(0.0),i0) != divInt(i2,int(7.0)) or ( getCharFromString(in0[( int(5.0) + len(saveChr(i2)) ):i1], divInt(divInt(int(7.0),i1),( min(( i2 + ( len((\"\"R\"\" + s0.rstrip())) * ( min(i1, ( abs(int(2.0)) - i2 )) + int(5.0) ) ) ), int(7.0)) * i0 )))[i0:divInt(int(5.0),min(int(9.0), max(i0, divInt(( ( int(8.0) - int(5.0) ) - mod(int(0.0),i1) ),int(4.0)))))].endswith(\"\";7\"\") and True ) )\\n:}else:{:\\ni2 = divInt(saveOrd(in1),i0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 5, 2, 5, 0, 9, 9, 6, 4, 1, 9, 9], [0, 2, 2, 0, 2, 2, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 0, 0, 2, 2, 0, 2, 0, 2, 0], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 2, 1, 0, 0, 3, 1, 2, 3, 0, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 0, 1, 3, 0, 2, 0, 1, 3, 2, 3, 1, 0, 3, 3, 1, 2, 3, 1, 3, 3, 0, 3, 3, 0, 1, 2, 0, 2, 0, 3], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 0, 0, 0, 3, 3, 2, 0, 3, 2, 2, 2, 1, 3, 0, 4, 2, 4], [0, 0, 2, 1, 0, 2, 1, 2, 2, 0, 0, 1, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0], [0, 5, 5, 4, 0, 0, 4, 1, 3, 1], [1, 1, 1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 2, 0, 4, 2, 4, 4, 0, 0, 0, 1], [0, 1, 3, 2, 0, 3, 0], [1, 0], [2, 2, 0, 0, 1, 2], [0, 2, 1], [17], [10], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 30, 30, 25, 0, 113, 33, 29, 16, 17, 10, 3, 0, 27, 7, 2, 6, 3, 1, 1, 1, 0], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif getCharFromString(s0, len(in2[len(in2):]))[i0:] not in saveChr(mod(abs(( i2 + int(0.0) )),( int(7.0) + min(len(in1[( divInt(divInt(int(5.0),i2),( min(( i0 * max(abs(divInt(int(7.0),i2)), max(( int(7.0) - int(1.0) ), int(7.0))) ), int(7.0)) + i2 )) * i0 ):divInt(int(9.0),max(divInt(min(i2, ( ( ( int(8.0) - int(5.0) ) * mod(int(0.0),i1) ) * int(4.0) )),max(i0, divInt(min(mod(( int(8.0) + i0 ),mod(( int(59.0) + i0 ),i1)), min(int(9.0), ( min(i1, int(2.0)) - ( divInt(len((\"\"R\"\" + s0.capitalize()).rstrip()),len(\"\"2\"\")) + abs(divInt(( mod(mod(i0,i2),i0) - int(2.0) ),int(5.0))) ) ))),int(2.0)))), i0))]), int(5.0)) )))[min(i2, divInt(i2,int(0996.0))):len(s0)]:{:\\nres0 = ( ( abs(int(4.0)) + i0 ) != abs(abs(int(1.0))) or ( in1[:divInt(max(int(9.0), len(getCharFromString(getCharFromString(s1, min(i2, saveOrd(in0))).lstrip()[abs(i0):], int(9.0)))),divInt(i2,( i0 + saveOrd(s1) )))].endswith(\"\"k\"\") and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [2], [], [1, 0], [1, 0, 1, 1, 0], [], [], [], [3, 4, 2, 5, 3], [0, 1], [], [3, 4, 3, 0, 0, 0, 1], [0, 1], [], [], [3, 0], [13], [], [], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 5, 2, 0, 7, 1, 0, 0, 2, 1, 0, 0, 1], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (getCharFromString((in1 + s2), int(1.0)) + in2)\\nin0 = \"\"[N\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [1, 1, 0, 0, 1], [4, 5, 4, 0, 9], [0, 2, 0], [0], [0, 1, 0, 2, 3, 0, 1, 2], [0, 1], [1], [2, 0], [1], [5, 3], [1, 1], [], [3, 1, 4, 0], [1], [], [0], [3, 1], [], [15], [], [15]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 4, 1, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = (\"\",\"\" + saveChr(i0)).endswith(in2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1, 0, 3], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [0, 0, 1, 1, 1, 1], [0], [2, 0, 0, 2, 2, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 3, 0, 1, 3], [17, 18], [19], [8], [20, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 9, 0, 49, 15, 11, 5, 10, 5, 6, 1, 16, 3, 1, 4, 6, 2, 1, 1, 2], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(\"\"R8;\"\"):abs(i0)][min(mod(int(0.0),int(7.0)), ( int(5.0) + len(getCharFromString(\"\"S\"\"[i1:divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len(saveChr(divInt(int(1.0),i1))), divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)) )),i1)], ( int(8.0) - min(mod(len((\"\"t\"\" + in0.rstrip())),i2), divInt(( mod(int(5.0),int(0.0)) + mod(int(4.0),i0) ),int(8.0))) ))) )):] not in \"\",\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 3, 7, 3, 7, 0, 8, 2, 9, 5, 5], [0, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 0, 0, 0, 2, 1], [], [0, 3, 3, 1, 3, 3, 0, 3, 2, 2, 1, 0, 0, 2, 0, 2, 0, 2, 2, 0, 2, 0, 3, 3, 1, 2, 2, 3, 1, 3, 0, 3, 3, 3, 0, 2, 3, 1, 0, 1, 1, 0, 2, 3, 3, 1, 2, 1, 3, 3, 2, 0, 3, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 4, 3, 0, 0, 2, 4, 3, 1, 0, 4, 2, 3, 4, 4, 0, 1, 4], [1, 0, 2, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0], [3, 3, 1, 5, 5, 2, 0, 0, 1, 1, 3], [1, 1], [], [4, 2, 0, 3, 3, 4, 2, 3, 3, 0, 3, 4, 0, 0, 0, 4, 4, 2, 0, 0, 2, 2, 4, 0, 1, 4, 4, 0, 4, 1, 2, 4, 4, 0, 0], [2, 0, 0, 0, 3, 1, 2, 3, 0, 1, 0], [5, 0], [1, 2, 0, 2, 1, 0], [1, 1], [], [3, 6], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 17, 0, 59, 13, 18, 8, 5, 11, 2, 0, 35, 11, 2, 6, 2, 0, 2, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 != min(saveOrd(in0[:int(11.0)].capitalize()), len(((getCharFromString(((in0 + (getCharFromString(s1, min(i0, min(( mod(int(1.0),i1) - i2 ), ( i1 + ( i0 * divInt(( i1 - divInt(i2,abs(saveOrd(in2))) ),int(3.0)) ) )))) + in2)) + getCharFromString(s2[( divInt(len(s0),int(7.0)) - max(i0, min(saveOrd(saveChr(abs(i2))[:( len(s0) + int(3.0) )][i1:]), int(7.0))) ):int(0.0)].strip(\"\"d\"\"), i0))[( saveOrd(s1.lstrip().capitalize()) + saveOrd(getCharFromString(\"\"g\"\", int(8.0))) ):], divInt(int(2.0),min(max(( i0 + saveOrd(saveChr(i0)[int(9.0):i0]) ), i2), i1))) + getCharFromString(s1, int(55.0))) + in0)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 1, 1, 2, 1, 0, 0, 0, 1, 0, 2, 0], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 1, 2, 1, 1, 0, 2, 3, 2, 0, 3, 2, 2, 0, 0, 2, 2, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 4, 1, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1], [0, 3, 4, 4, 2, 0, 4], [1, 1, 1], [0], [3, 0, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 1, 1, 0], [3, 1, 3, 1], [4, 0], [2, 2, 2, 0, 1], [0, 0, 2], [17, 17], [], [8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 5, 1, 17, 4, 4, 2, 2, 4, 3, 0, 16, 3, 2, 4, 3, 2, 0, 1, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile (s0 + in0) not in in1[len(in1):]:{:\\ni0 = len(saveChr(i2)[mod(saveOrd((\"\"R\"\" + \"\"R\"\".lstrip())),( i0 + int(0.0) )):( int(3.0) - min(i1, int(5.0)) )][divInt(int(7.0),int(8.0)):].rstrip(\"\"8\"\")[i1:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [0, 2, 0, 1], [0], [1, 0, 2], [0], [0, 0], [], [], [1], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 4, 3, 4, 5, 6, 1, 0, 4, 8, 9, 0, 2, 6, 8, 8, 3, 2, 1, 5, 7, 0, 2, 2, 7, 5, 7, 9, 7, 1, 3, 2, 7, 2, 9, 0, 8, 1, 1, 9, 1, 5, 6, 4, 0, 6, 6, 4, 7, 0, 9, 2, 7, 6, 8, 7, 9, 5, 7, 6], [2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 0, 2, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 2, 2, 2, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 1, 0, 2, 1, 2, 1, 0], [1], [1, 2, 3, 0, 1, 3, 2, 2, 0, 3, 2, 3, 1, 3, 3, 2, 1, 1, 1, 3, 2, 3, 0, 1, 1, 2, 3, 2, 0, 3, 1, 2, 3, 3, 3, 1, 1, 1, 0, 1, 0, 2, 3, 3, 2, 0, 1, 2, 0, 2, 0, 3, 0, 2, 0, 3, 1, 1, 3, 3, 1, 3, 0, 1, 1, 2, 2, 0, 2, 3, 0, 3, 2, 3, 0, 3, 0, 0, 3, 3, 2, 2, 3, 3, 2, 3, 3, 1, 0, 2, 2, 1, 3, 1, 3, 1, 3, 3, 3, 2, 3, 2, 3, 2, 2, 1, 3, 2, 2, 2, 3, 3, 1, 1, 3, 0, 0, 3, 0, 3, 2, 0, 0, 1, 1, 2, 2, 0, 2, 1, 0, 3, 1, 2, 3, 2, 0, 0, 3, 0, 0, 3, 0, 3, 3, 2, 0, 2, 3, 0, 0, 1, 3, 2, 3, 3, 2, 3, 3, 1, 3, 2, 3, 3, 0, 2, 2, 3, 3, 1, 2, 2, 0, 1, 1, 0, 1, 3, 2, 1, 3, 1, 0, 2, 1, 3, 2, 1, 2, 0, 1, 1, 3, 1, 0, 0, 0, 1, 1, 2, 3, 2, 0, 1, 3, 3, 3, 1, 0, 3, 3, 0, 1, 2, 2, 2, 2, 1, 0, 1, 1, 0, 3, 3, 0, 1, 1, 3, 0, 3, 0, 3, 1, 3, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0], [3, 2, 1, 1, 0, 4, 2, 4, 3, 2, 1, 1, 1, 1, 1, 4, 3, 1, 1, 1, 3, 3, 3, 0, 3, 1, 3, 1, 1, 1, 0, 3, 4, 1, 3, 3, 4, 1, 0, 4, 3, 3, 2, 3, 1, 1, 0, 1, 2, 2, 2, 1, 3, 0, 0, 3, 1, 0, 4, 2, 1, 2, 2, 2, 4, 1, 1, 0, 1, 0, 4, 2, 3, 4, 2, 2], [1, 1, 0, 1, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 2, 1, 0, 0, 2, 2, 0, 0, 2, 0, 2, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [5, 3, 4, 4, 0, 5, 5, 2, 5, 3, 2, 5, 1, 3, 1, 0, 4, 4, 2], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0], [2, 3, 0, 3, 0, 2, 4, 0, 4, 1, 0, 0, 1, 3, 2, 3, 0, 3, 2, 2, 1, 1, 1, 2, 4, 4, 3, 1, 2, 4, 2, 4, 2, 1, 1, 0, 4, 2, 2, 0, 4, 2, 4, 1, 4, 2, 4, 2, 2, 0, 0, 4, 4, 4, 0, 1, 0, 4, 1, 4, 2, 2, 2, 0, 0, 1, 2, 2, 1, 0, 2, 0, 1, 4, 1, 2, 1, 3, 3, 0, 3, 3, 1, 4, 4, 1, 4, 1], [2, 0, 2, 1, 3, 2, 3, 3, 1, 3, 0, 1, 2, 1, 1, 0, 2, 3, 1, 0], [3, 0, 4, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 0, 0, 1, 0, 1, 2, 1, 2, 1, 1, 1, 1], [0, 3, 0, 0, 2, 3, 3, 0, 2, 1, 1, 1, 1, 1, 3, 3, 2, 2, 3, 2, 0, 3, 3], [18, 4, 18, 14, 9], [7, 14, 12, 4, 17], [3, 5, 2, 1, 0], [28, 20, 2, 22, 17, 9, 19, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 61, 61, 51, 1, 235, 55, 76, 27, 29, 19, 23, 1, 88, 20, 5, 22, 23, 5, 5, 5, 8], "tree_depth": 106, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(4.0)\\nloopBreak% = 0\\nfor in2 in (in0 + (in1 + in1.capitalize()[( len(getCharFromString(\"\"S]\"\", i1)) - int(24.0) ):]))[abs(( ( i1 + max(divInt(max(int(3.0), min(saveOrd(s0), mod(int(4.0),int(5.0)))),int(6.0)), abs(divInt(saveOrd(in2),i1))) ) - int(1.0) )):int(0489.0)]:{:\\nb1 = ( len(\"\"ES3\"\") + divInt(i2,abs(int(02.0))) ) != ( max(max(max(int(6.0), int(8.0)), int(8.0)), i2) + int(321.0) )\\nin2 = ((s2 + (\"\";\"\"[i2:( max(max(( i1 + int(5.0) ), divInt(i1,( i2 + saveOrd(\"\"\\\\\\t\"\") ))), i1) - mod(i2,len(\"\"O\"\")) )][int(7.0):] + saveChr(int(0.0)).capitalize()[max(max(int(2.0), max(i1, int(2.0))), int(7.0)):]))[divInt(( i2 * divInt(len((\"\"5\"\" + \"\"h\"\"[i1:].capitalize()[:len(\"\"o\"\")].lstrip(in2)[( len(in0[i1:min(i0, i2)][:len(saveChr(max(( ( len(\"\"m\"\") * max(mod(max(max(int(5.0), i1), ( ( int(7.0) * min(int(9.0), len(getCharFromString(s2[:int(7.0)][saveOrd(in2):max(len(saveChr(mod(len(saveChr(mod(saveOrd(s1),divInt(( int(1.0) - max(divInt(mod(mod(min(saveOrd(\"\"e\"\"), int(3.0)),int(2.0)),len(in0)),i1), i1) ),len(saveChr(i1))))).capitalize()),abs(( i0 + i1 ))))), int(7.0))], int(2.0))[:( divInt(i1,( int(9.0) * i1 )) - len(\"\"r\"\") )].rstrip(getCharFromString(s1[int(0.0):][:( max(mod(i0,i1), max(i1, i1)) + min(i0, max(abs(( i2 + divInt(abs(i2),i2) )), int(8.0))) )][abs(( max(len(s0), mod(min(min(int(1.0), len(\"\"=\"\")), ( max(min(i0, divInt(mod(saveOrd(\"\".\"\"[:abs(int(1.0))][:( divInt(i1,int(9.0)) * int(1.0) )]),i2),int(5.0))), max(divInt(int(6.0),abs(int(4.0))), i0)) * ( int(0.0) + abs(divInt(int(6.0),divInt(i2,int(6.0)))) ) )),int(4.0))) + abs(int(7.0)) )):], i0)))) ) * i2 )),i0), int(0.0)) ) + int(9.0) ), divInt(saveOrd(in1),( i0 * int(2.0) ))))[max(max(min(int(7.0), i2), max(min(i1, int(6.0)), mod(mod(divInt(( int(8.0) - i0 ),int(7.0)),int(9.0)),i2))), saveOrd(in1[:abs(i1)])):int(5.0)].rstrip(\"\"2\"\"))].lstrip()) - int(7.0) ):])),len(\"\"1\"\".capitalize())) ),i2):saveOrd(\"\"&0\"\"[:i1])] + ((s2 + ((\"\"J\"\" + saveChr(abs(int(6.0))).rstrip()) + \"\":\"\")) + getCharFromString(\"\"<\"\", abs(i0))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 2, 3, 0, 4], [1, 1, 0, 0, 1], [0], [2, 0, 3, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 0, 1, 0, 3], [17, 13, 23], [14], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 34, 10, 8, 5, 5, 5, 5, 1, 16, 4, 1, 3, 5, 3, 1, 0, 1], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len((in1[len(s2):] + \"\"R\"\")):]:{:\\nres0 = getCharFromString(saveChr(i0)[int(8.0):abs(mod(i2,int(4.0)))], mod(int(5.0),min(i2, ( divInt(( divInt(i0,( len((\"\"N\"\" + in0.capitalize()).rstrip()) + ( i1 + divInt(min(max(int(7.0), i2), ( abs(int(2.0)) * i1 )),int(1.0)) ) )) - int(7.0) ),i2) + i0 )))) not in \"\"oX;\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [3, 3], [0], [0, 0], [0], [], [0], [], [], [], [1, 0, 1, 1], [9, 3, 4, 0], [], [], [1, 2, 1, 1], [], [1], [], [], [4, 3], [0, 1], [], [4, 1, 0], [3], [3], [], [2, 2], [], [], [6, 9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 3, 1, 1, 0, 2, 0, 0, 2, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"69\"\".lstrip(in0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 1, 0, 3, 0, 1, 2, 1, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 2, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [0, 1, 0, 0, 1, 2], [3, 2, 3], [17], [], [7], [20, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 14, 0, 49, 14, 10, 6, 8, 5, 3, 1, 17, 3, 1, 6, 3, 0, 0, 1, 2], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1.capitalize()[:i0]):i2]:{:\\nres0 = \"\";\"\" not in saveChr(int(08.0))[len(in1[mod(int(2.0),max(mod(int(7.0),min(i2, ( mod(( int(2.0) + i0 ),divInt(len((\"\"7\"\" + \"\"&\"\"[( i0 * mod(i1,i1) ):].rstrip())[:int(1.0)]),i2)) * mod(min(i0, i0),max(( i2 - i2 ), mod(abs(max(int(7.0), len(in0))),i1))) ))), mod(( int(4.0) + int(9.0) ),int(8.0)))):( int(5.0) * i0 )]):int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 2, 1, 0, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 1, 0, 1], [0], [11], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 1, 8, 1, 1, 0, 1, 3, 1, 1, 8, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):len(in1)]:{:\\nloopBreak% = 0\\nwhile \"\"L\"\"[mod(int(7.0),i0):] == saveChr(int(5.0))[:i2].capitalize():{:\\ni2 = int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 0, 2, 0], [0, 1, 1], [3, 3, 0, 2, 0, 2, 2, 2, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1, 1, 2, 2, 3, 3, 1, 0, 3, 1, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0], [3, 3, 3, 0, 3, 0, 1, 2, 1, 2, 3, 0], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 5, 4, 1, 3, 0, 4], [1, 1, 0, 1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 0, 4, 4, 3, 1, 4, 0, 1, 0, 1], [0, 1, 3, 2, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 3, 3], [17], [], [1], [20, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 13, 13, 15, 0, 60, 20, 12, 8, 12, 6, 4, 0, 18, 5, 2, 3, 4, 1, 0, 1, 2], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s1[len(in2):] not in in1[len(getCharFromString(saveChr(i0)[mod(i2,mod(( divInt(( int(0.0) + len(s1) ),i2) + divInt(( ( divInt(i0,( min(divInt(i1,mod(len((\"\"R\"\" + in0.lstrip()).capitalize().rstrip()),min(int(4.0), i2))), ( max(int(5.0), i1) * int(7.0) )) - int(2.0) )) + i2 ) + i0 ),divInt(int(1.0),abs(divInt(max(i0, divInt(i1,divInt(int(0.0),int(7.0)))),mod(int(1.0),i0))))) ),int(8.0))):int(5.0)], ( ( abs(len(\"\"1\"\")) - int(0.0) ) - i0 ))):]:{:\\nres0 = ( min(int(4.0), i2) != i0 or ( s0.endswith(\"\";*\"\") and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 1, 0, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [], [0, 5, 4, 4, 3, 0, 4], [0, 1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [], [1, 0], [0, 2, 0, 0, 1], [0, 2], [17], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 1, 3, 0, 0, 0, 2, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R6\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [1], [1], [], [0], [], [], [1], [1], [1], [0], [], [], [], [], [0], [1, 0, 1, 1], [1, 5, 1, 2], [1, 1, 0], [0], [3, 3, 1, 0, 3, 0, 1, 1], [], [4, 4, 4], [0], [], [1, 4, 2], [1, 1, 1], [], [0, 4, 4, 3, 3, 4, 3, 1, 1, 0, 2, 2, 0, 1], [0, 3, 0], [1], [0, 2], [1, 2, 0], [1], [9], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 4, 4, 3, 1, 8, 0, 3, 0, 0, 3, 3, 0, 14, 3, 1, 2, 3, 1, 1, 1, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveOrd(s1) \\g saveOrd(getCharFromString(((getCharFromString((\"\"j\"\" + \"\"0\"\"), int(1.0)) + in1) + s2[i1:][saveOrd(\"\"B\"\"):i1]).rstrip(), int(51.0))):{:\\ni0 = int(2.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1, 0, 1], [0], [2, 1, 0, 2, 1, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0, 3, 0], [17, 21], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 3, 1, 1, 2, 1, 3, 0, 5, 0, 0, 2, 3, 2, 0, 0, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"R\"\"[:len(s0)] != \"\";V\"\"[mod(mod(int(0.0),i0),( i2 + int(7.0) )):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 8, 1, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 1, 1, 2, 0, 0, 0, 2, 0, 0, 2, 1], [0, 1, 1], [3, 3, 2, 0, 0, 2, 2, 1, 2, 1, 3, 1, 0, 2, 2, 1, 3, 2, 3, 1, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 3, 2, 2, 1, 1, 2, 1, 0, 3, 0, 0, 2, 0, 2, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [3, 0, 2, 0, 3, 0, 1, 2, 1, 0, 3, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [1, 0, 4, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2, 2], [1, 0], [2, 2, 0, 0, 1], [0, 2, 2], [17], [], [7, 5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 12, 12, 12, 0, 51, 15, 12, 6, 9, 6, 3, 1, 16, 5, 1, 2, 3, 1, 0, 2, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nloopBreak% = 0\\nwhile in2 not in in1[len(in1):].capitalize():{:\\nres0 = ( min(mod(i0,i1), mod(divInt(int(0.0),divInt(int(4.0),abs(int(5.0)))),i2)) != ( divInt(int(8.0),min(( len(saveChr(int(1.0))[i0:]) + ( min(divInt(max(i1, mod(abs(int(1.0)),i1)),int(7.0)), divInt(i1,i2)) + mod(int(7.0),max(int(9.0), min(i0, len(in0.rstrip())))) ) ), ( ( int(8.0) * int(5.0) ) - ( int(0.0) + i0 ) ))) - max(i0, i2) ) or ( (\"\"7\"\" + s0.capitalize()).capitalize().endswith(\"\"5\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [0], [2, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 7, 3, 6, 1, 4, 3, 0, 4, 8, 1, 4, 1, 0], [1, 0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 1, 1, 2], [1], [1, 2, 1, 0, 2, 3, 2, 2, 1, 2, 1, 2, 2, 2, 0, 1, 3, 2, 2, 3, 1, 2, 1, 3, 1, 1, 2, 2, 1, 0, 3, 2, 2, 1, 2, 0, 0, 1, 1, 0, 0, 3, 1, 0, 3, 2, 2, 2, 3, 0, 1, 2, 1, 1, 3, 3, 1, 3, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 2, 4, 0, 2, 1, 1, 4, 0, 1, 1, 2], [2, 2, 2, 1, 1, 2, 2, 2, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 3], [1, 0, 0, 1], [0], [1, 4, 4, 1, 0], [2, 3], [3], [1], [3, 0, 0, 0], [20, 10, 20], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 1, 5, 2, 1, 0, 4, 3, 0, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in \"\")\"\":{:\\ns1 = \"\"UKU\"\".lstrip(in0).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [1], [], [1, 0], [], [], [], [], [5], [1], [], [4, 4, 2, 1], [2, 0], [], [2], [2], [], [], [7], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 1, 1, 0, 4, 2, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(\"\"7\"\"[int(2.0):], i1).capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [2, 0, 2], [], [0, 0], [], [], [0], [2], [2], [0], [0], [], [], [], [], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 8, 9, 7, 0, 1, 2, 6, 7, 5, 5, 4, 0], [2, 1, 0, 1, 1, 2, 2, 2, 0, 1, 2, 0], [], [0, 1, 1, 0, 3, 2, 1, 0, 3, 3, 3, 0, 1, 3, 0, 0, 2, 0, 3, 2, 3, 0, 2, 3, 3, 2, 1, 1, 1, 2, 1, 2, 2, 0, 2, 3, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0], [1, 3, 4, 2, 1, 4], [1, 1, 2, 0, 1, 1], [0, 1, 0], [2, 3, 2, 3, 1, 0, 2, 4, 5], [0, 1, 1, 1], [], [4, 2, 0, 2, 2, 2, 0, 0, 2, 3, 3, 4, 4, 0, 2, 0, 2, 3, 4, 1, 4, 0, 0, 3, 1, 1], [2, 3, 2, 1, 0], [2], [0, 1, 1, 2, 2, 1, 1], [3, 3, 2, 3], [], [], [5], [4, 14, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 7, 0, 19, 2, 6, 0, 2, 9, 4, 0, 26, 5, 1, 7, 4, 0, 0, 1, 3], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[i2:int(5.0)].capitalize()\\nb0 = s2[int(68.0):][:i1][:max(divInt(int(9701.0),i0), len(in0))] in ((s1.capitalize().strip() + s0[:saveOrd((saveChr(abs(i1)) + \"\"!+\"\")[:int(2.0)])]) + getCharFromString(s2, max(i1, i2)))[mod(i2,saveOrd(in1)):]\\nin2 = (\"\"5\"\" + \"\">\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1], [2, 0, 1, 1], [0], [1, 2, 2, 1], [0], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [9, 9], [2, 0, 2, 2, 1, 1, 1], [0, 0, 0], [0, 2, 0, 0, 2, 0, 3, 2, 1, 3], [0, 1, 0], [4, 3], [2, 1, 1], [1, 1], [0, 2, 3, 0], [1], [0], [4, 4, 1, 0, 0], [1, 2, 1, 2], [], [], [0], [10], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4, 1, 0, 1, 0, 4, 1, 1, 4, 2, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in saveChr(i2):{:\\ni0 = ( i2 * i2 )\\ns2 = \"\"K\"\".capitalize()\\nin0 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 2, 2, 2, 1, 2, 1, 0, 1, 1, 2, 0, 2, 0, 1, 2, 0], [0, 2, 0, 1, 0, 1, 0], [0, 1, 0, 2, 0, 1, 0, 2, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0, 0], [], [], [3, 0, 2, 3], [0, 2, 1], [1, 1, 2, 2, 2, 1, 2], [0, 0, 0], [5, 0, 3, 1], [], [], [], [1, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 0, 5, 3, 6, 9, 7, 8, 7, 9, 0, 2, 9, 5, 1, 5, 2, 6, 9, 3, 4, 7, 6, 7, 7, 3, 3, 5, 8, 6, 7, 0, 3, 6, 9, 9, 5, 4, 0, 1], [1, 0, 0, 2, 2, 0, 2, 0, 1, 0, 1, 1, 2, 2, 1, 2, 2, 0, 0, 1, 1, 0, 0, 2, 1, 0, 0, 1, 2, 2, 2, 1, 1, 0, 1, 1, 1, 2, 2, 2, 1, 2, 1], [1, 0, 1], [1, 1, 0, 0, 2, 3, 1, 2, 1, 3, 2, 1, 2, 0, 2, 3, 1, 3, 1, 3, 0, 1, 0, 2, 0, 3, 3, 1, 3, 1, 0, 0, 0, 2, 0, 1, 3, 1, 0, 2, 1, 2, 2, 2, 3, 0, 3, 1, 3, 1, 1, 0, 2, 2, 0, 2, 1, 0, 0, 3, 3, 2, 1, 3, 3, 2, 2, 2, 3, 1, 1, 2, 3, 1, 1, 2, 1, 0, 2, 1, 0, 1, 1, 2, 1, 1, 2, 3, 0, 2, 3, 0, 2, 3, 2, 0, 2, 0, 3, 0, 2, 0, 2, 3, 3, 2, 3, 1, 0, 2, 1, 1, 1, 2, 1, 2, 0, 3, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0, 3, 2, 0, 2, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [2, 1, 0, 0, 4, 3, 3, 1, 1, 1, 2, 0, 0, 1, 1, 3, 3, 1, 0, 3, 2, 4, 4, 2, 2, 1, 4, 3], [1, 1, 1, 1, 0, 1, 2, 1, 1, 2, 2, 2, 2, 2, 0, 2, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 3, 2, 3, 2, 0, 5, 3, 2, 3, 3, 4, 4, 5, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0], [3, 4, 4, 2, 1, 1, 4, 3, 3, 1, 1, 4, 1, 1, 0, 1, 0, 1, 2, 4, 2, 0, 4, 1, 2, 1, 4, 1, 1, 2, 0, 2, 4, 2, 1, 0, 1, 2, 4, 1, 2, 2, 0, 0, 0], [0, 1, 1, 3, 1, 0, 1, 1, 2], [1], [2, 0, 0, 1, 0, 0, 0, 2, 0, 2], [1, 2, 0, 3, 2, 1, 2, 1, 1, 1, 1, 1, 3, 0, 0], [1, 17, 7], [12, 1, 15, 12, 18, 5, 5], [1, 7, 4], [28, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 17, 17, 7, 10, 4, 5, 0, 0, 4, 3, 7, 3, 4, 0, 0, 0, 2, 40, 40, 43, 3, 141, 39, 28, 22, 19, 15, 15, 4, 45, 9, 1, 10, 15, 3, 7, 3, 2], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(6053.0) \\l int(69.0)\\nloopBreak% = 0\\nfor s1 in (getCharFromString(saveChr(i1), i0) + \"\"m\"\"[divInt(abs(int(7.0)),divInt(int(8.0),max(( int(790.0) - mod(i0,mod(min(int(2.0), min(int(9.0), saveOrd(\"\"1\"\"))),i2)) ), int(5.0)))):]):{:\\nloopBreak% = 0\\nwhile i2 == ( i0 - len(saveChr(len(((\"\"B\"\" + \"\"]\"\") + \"\"7\"\".rstrip())))) ):{:\\nloopBreak% = 0\\nfor in0 in \"\"b\"\":{:\\ni2 -= int(1.0)\\nif s2.endswith(\"\"4\"\"):{:\\nb0 = in0 in \"\"p\"\"\\n:}else:{:\\ns2 = saveChr(max(int(5.0), i0))[i1:i0]\\n:}\\nb2 = s0[mod(i1,int(2.0)):max(int(6.0), i1)] != getCharFromString(\"\"m\"\", ( int(9.0) - ( mod(mod(max(i2, abs(int(3.0))),min(int(4.0), int(7.0))),i2) + divInt(mod(i1,divInt(int(6.0),i2)),i2) ) ))\\ni0 = min(max(( int(7.0) - max(len(\"\"s\"\"[:divInt(( ( len(saveChr(int(7.0))) * int(3.0) ) - ( max(int(3.0), int(5.0)) - ( int(8.0) * i0 ) ) ),mod(int(6.0),i1))]), int(7.0)) ), int(0.0)), ( int(3.0) * int(6.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in \"\"f\"\":{:\\nres0 = divInt(min(i1, ( len(\"\"f\"\") * i0 )),( abs(( i0 * ( i2 * saveOrd(in0[i1:divInt(i0,divInt(saveOrd(saveChr(abs(( abs(int(9.0)) + i0 )))[( int(9.0) * int(5.0) ):int(4.0)]),divInt(int(0.0),( i1 + max(int(1.0), mod(divInt(i2,i2),i2)) ))))]) ) )) + i1 )) \\g i1\\nif \"\"&\"\"[i0:i1] not in s2:{:\\nin0 = \"\"R\"\"\\nin0 = \"\"H\"\".capitalize()[i1:]\\n:}else:{:\\nloopBreak% = 0\\nfor in1 in in1[i1:][( saveOrd(in2) - mod(i2,len(s2)) ):( i2 + ( i2 - i1 ) )]:{:\\ni2 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [0, 2, 2], [], [0], [], [], [2], [0], [0], [], [], [1], [], [1], [], [0, 1], [0, 3], [], [], [1, 1], [], [], [], [], [3, 1, 0], [0, 0, 0, 0, 0, 1], [], [0, 1], [], [], [], [0, 0, 2, 2, 2, 0], [24, 12, 20], [], [6, 8, 7], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 0, 2, 0, 0, 0, 6, 3, 0, 3, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\nin0 = s1\\ns0 = \"\"YM687U\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1], [2, 0, 2, 1, 2, 1, 1], [0, 1, 2], [2, 2, 1, 0], [0], [0], [], [], [1], [0, 3], [1, 0, 1], [0, 0], [], [1], [], [1], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [3, 4, 2, 4, 8, 5, 8, 9, 7, 2, 8, 8, 1, 6, 9, 8, 8], [0, 1, 2, 0, 0, 0, 2, 0], [0], [3, 3, 3, 0, 1, 3, 3, 1, 1, 1, 1, 2, 2, 0, 3, 0, 2, 3, 0, 3, 2, 1, 1, 2, 0, 3, 1, 0, 3, 2, 3, 0, 1, 1, 3, 2, 1, 3, 1, 2, 3, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0], [3, 4, 4, 0, 0, 2, 3, 4, 1, 1, 0, 4, 1, 3], [2, 1, 2, 1], [1, 1, 0, 0], [5, 0, 1, 1, 2, 4, 0, 2, 5, 3, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0], [1, 0, 1, 4, 4, 4, 0, 2, 1, 3, 0, 3, 2, 3, 4, 2, 1, 4, 2, 0, 0, 1, 3, 3, 4, 3, 4, 1, 0, 1, 0, 0, 1], [3, 1, 2, 3, 1, 2, 0], [5, 4], [1, 0, 0, 2], [3, 1, 0, 2, 2, 3, 3, 0, 1, 2, 1, 2, 1], [21, 24], [1, 5, 5, 8], [1, 3, 9, 5], [8, 14, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 1, 1, 0, 0, 1, 2, 3, 2, 0, 1, 0, 1, 1, 17, 17, 8, 1, 43, 8, 14, 4, 4, 11, 13, 1, 33, 7, 2, 4, 13, 2, 4, 4, 3], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"%bV\"\":{:\\ns0 = s1\\nif len(\"\"13\"\") \\l saveOrd(saveChr(saveOrd(s1.capitalize())).strip(\"\"+\"\"[:i0])):{:\\ns2 = (in1 + ((\"\"\\\\\\\\\"\"[int(3.0):min(min(int(4.0), int(2.0)), int(4.0))].rstrip(saveChr(int(8.0))) + s0[( mod(i1,abs(i2)) * mod(len(s2),i0) ):])[saveOrd(\"\"Y\"\"):( int(5.0) - int(8.0) )] + (((getCharFromString(\"\"f\"\", divInt(i0,max(int(9.0), i0))) + in2).capitalize() + \"\"9f5\"\") + in0)))\\n:}\\nloopBreak% = 0\\nwhile False:{:\\ni2 = max(( min(i0, int(7.0)) * int(288.0) ), saveOrd(s0))\\nb1 = divInt(int(1.0),max(int(6.0), ( len(\"\"i\"\") - int(9.0) ))) \\ge int(88.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 2, 0, 0, 1, 2, 0, 0, 2, 1, 2, 0, 0, 0], [2, 2, 0, 1, 2], [1, 2, 1, 2, 1, 0, 2, 0, 2], [0], [0, 0, 0, 0, 0, 0, 0], [], [], [2, 2], [2, 0], [1, 2, 2, 0, 1, 0, 0, 2, 2], [0, 0], [3, 2, 1, 4], [3, 2, 1], [1], [1], [1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 4, 3, 7, 8, 9, 7, 6, 7, 5, 9, 0, 4, 1, 4, 9, 1, 9, 3, 3, 8, 8, 7, 1, 3, 9, 3, 1, 7, 8, 0, 6, 9, 8, 9, 2, 5, 1, 7, 1, 9, 9, 4, 8, 4, 4, 6, 9, 0, 2, 8, 7, 2, 9, 7, 2, 5, 8, 7], [2, 1, 1, 0, 2, 1, 1, 0, 2, 2, 2, 1, 0, 1, 1, 2, 1, 2, 1, 0, 2, 0, 0, 1, 1, 0, 2, 0, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 2, 2, 0, 1, 0, 2, 0, 1, 1, 0], [1, 1, 0], [3, 0, 3, 1, 1, 3, 1, 1, 0, 0, 2, 2, 3, 2, 1, 2, 1, 1, 2, 3, 3, 0, 1, 3, 3, 0, 2, 0, 0, 2, 1, 2, 2, 1, 0, 3, 1, 0, 1, 3, 2, 2, 2, 2, 1, 3, 1, 0, 2, 1, 0, 0, 2, 2, 3, 3, 2, 1, 2, 0, 1, 2, 2, 3, 1, 1, 2, 0, 0, 0, 3, 0, 3, 2, 3, 3, 3, 2, 3, 2, 2, 0, 0, 3, 3, 3, 0, 3, 3, 0, 1, 1, 0, 2, 3, 2, 0, 2, 2, 0, 2, 1, 2, 1, 1, 0, 3, 1, 3, 0, 2, 1, 1, 0, 2, 2, 1, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 2, 1, 2, 0, 1, 3, 1, 0, 2, 1, 1, 3, 1, 3, 0, 1, 3, 0, 2, 0, 0, 1, 2, 1, 1, 2, 1, 1, 2, 3, 2, 2, 0, 1, 0, 3, 2, 3, 1, 0, 3, 2, 2, 1, 2, 0, 3, 0, 1, 2, 2, 1, 1, 3, 1, 2, 3, 1, 0, 2, 0, 2, 3, 0, 0, 3, 3, 2, 2, 3, 3, 1, 1, 3, 0, 0, 3, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [3, 4, 3, 3, 0, 1, 1, 4, 2, 3, 4, 4, 1, 1, 3, 0, 1, 3, 1, 0, 2, 3, 3, 1, 4, 3, 4, 2, 3, 3, 0, 0, 0, 0, 3, 3, 2, 1, 0, 3, 3, 1, 4, 4, 2, 2], [1, 1, 2, 2, 2, 1, 1, 0, 2, 0, 1, 1, 2, 0, 0, 0, 1, 2, 1, 1, 2, 2, 0, 2, 1, 2, 2, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 2, 2, 3, 0, 1, 2, 1, 5, 2, 2, 5, 4, 5, 0, 2, 0, 2, 4, 2, 3, 0, 2, 0, 5, 2, 2, 4, 4, 2, 0, 2], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [2, 1, 3, 2, 4, 1, 0, 3, 3, 4, 2, 4, 1, 0, 2, 2, 2, 3, 3, 4, 1, 4, 2, 0, 2, 4, 4, 0, 0, 0, 3, 3, 4, 1, 2, 4, 0, 4, 2, 2, 0, 1, 1, 1, 4, 1, 0, 4, 0, 4, 0, 0, 3, 3, 0, 4, 3, 2, 4, 2, 0, 4, 1, 1, 2, 0, 3, 3, 4, 2, 3, 2, 4, 0, 0, 0, 1, 3, 3, 2, 1, 3, 0, 1, 4, 1, 1, 1, 4, 4, 4, 4, 1, 4, 0, 0, 2, 1, 4, 4, 4, 2, 1, 0, 0, 4, 2, 0, 0, 4, 4, 0, 4, 0], [0, 1, 2, 3, 3, 0, 1, 2, 0, 0, 1, 0, 3, 1, 2, 1, 2, 1, 0, 0, 0, 3, 3, 0, 2, 3, 1, 1, 2, 0, 1], [5, 4, 0, 3, 3, 2], [2, 1, 2, 1, 1, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 1, 2, 0, 2], [0, 0, 1, 2, 1, 3, 2, 1, 1, 0, 0, 2, 2, 2, 1, 0, 0, 2, 3, 3, 3, 3, 2, 0], [18, 6, 20, 2, 23, 19, 24], [5, 9, 17, 10, 8], [3, 4, 2, 4, 9, 0, 8], [1, 17, 20, 18, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 14, 14, 5, 9, 1, 7, 0, 0, 2, 2, 9, 2, 4, 3, 1, 1, 1, 59, 59, 55, 3, 208, 57, 46, 29, 30, 32, 24, 1, 114, 31, 6, 20, 24, 7, 5, 7, 5], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(\"\"S\"\"[i2:]) == saveOrd((getCharFromString(\"\"Gf3\"\", int(84.0))[:int(3.0)] + s0)):{:\\nloopBreak% = 0\\nwhile ((saveChr(len(\"\"j\"\".capitalize()[int(7.0):])) + s2) + ((\"\"\\\\\\n\"\".strip(s2[int(8.0):i1].rstrip(getCharFromString(saveChr(i1), ( ( len(in0) - divInt(int(9.0),mod(int(7.0),int(6.0))) ) - ( min(max(i0, int(7.0)), max(saveOrd(s0), i2)) * divInt(i1,i1) ) ))[( int(5.0) * ( ( int(9.0) * i0 ) - abs(int(0.0)) ) ):i2])) + s1) + ((\"\"4\"\".capitalize() + getCharFromString(s2, int(4.0))[len(getCharFromString(s1[divInt(divInt(divInt(( int(1.0) - saveOrd(\"\"r\"\") ),int(4.0)),i2),( int(9.0) + i2 )):i1][( ( saveOrd(\"\"k\"\") * max(mod(int(1.0),( i0 + int(9.0) )), mod(divInt(max(int(3.0), int(3.0)),divInt(i1,i1)),i2)) ) - len(\"\"U\"\") ):], i1)):min(mod(max(len(saveChr(max(divInt(min(mod(divInt(i2,i1),abs(len(\"\"C\"\"))), len(in2)),i0), max(saveOrd(getCharFromString(s2, i2)), int(8.0))))), int(8.0)),i0), ( len(s2.lstrip()) - divInt(i0,( divInt(i1,( int(7.0) * divInt(int(1.0),int(3.0)) )) + i1 )) ))]) + in2))[:saveOrd(((in1 + saveChr(int(9.0))) + (in2[abs(i0):( int(3.0) + int(1.0) )].capitalize()[i2:] + saveChr(divInt(divInt(int(7.0),i0),i2)))))][:( ( i2 + i1 ) - mod(i1,int(80.0)) )][:i2]) != \"\"2\"\":{:\\ni2 *= ( int(698.0) - ( i2 - int(9.0) ) )\\ns0 = \"\"49i\"\"\\ni1 *= len(s2[int(25.0):])\\nloopBreak% = 0\\nfor s0 in (((saveChr(i1)[( int(1.0) * int(7.0) ):len(s2)] + in1)[int(19.0):min(i1, int(9.0))].capitalize() + s2) + \"\"X\"\"):{:\\nin0 = ((\"\"T\"\"[:min(i1, ( i0 + i1 ))] + (s0 + \"\"0\"\")) + getCharFromString(\"\".\"\", int(4.0)))\\ni0 = ( int(8.0) * int(4.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif \"\";\"\" == \"\"/\"\":{:\\nb2 = ( divInt(int(4.0),int(6.0)) \\l divInt(min(divInt(divInt(i2,int(9.0)),i1), min(( len(getCharFromString(getCharFromString(\"\"@\"\".lstrip(getCharFromString(s2, int(0.0))).lstrip(s0), i1), len(\"\"8\"\"[( mod(int(2.0),( i2 - abs(i2) )) * int(8.0) ):]))) * ( ( int(7.0) - int(2.0) ) + max(int(9.0), divInt(min(int(7.0), i0),divInt(i1,divInt(len(saveChr(i0).strip().capitalize()),i2)))) ) ), len(\"\"Y\"\"[max(divInt(mod(saveOrd(in2),saveOrd(s2)),int(2.0)), int(5.0)):abs(i0)]))),i1) or not False )\\n:}else:{:\\nloopBreak% = 0\\nwhile saveChr(abs(int(8.0))) not in s2[i1:]:{:\\nin1 = in1\\nb2 = getCharFromString(s2, int(7.0)).capitalize().startswith(saveChr(i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = s2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 0, 0, 1], [2, 2, 0, 0, 0, 0], [1, 2], [0, 1, 2, 1], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 9, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 2, 2, 0, 2, 0, 1], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 2, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 2, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 2, 0, 1, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1, 0, 1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 1, 2], [1, 0], [2, 0, 0, 1, 1], [0, 2, 1], [17], [1], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 0, 4, 0, 0, 1, 2, 7, 2, 2, 3, 2, 1, 1, 18, 18, 16, 2, 59, 17, 11, 10, 8, 7, 3, 0, 16, 4, 0, 3, 3, 1, 1, 1, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif getCharFromString(s0, len(in2)) not in in1[len(in1):]:{:\\nloopBreak% = 0\\nwhile ( i0 != abs(min(mod(i2,mod(( int(0.0) + len(saveChr(i0)[divInt(( divInt(int(2.0),i0) + ( min(( i1 * ( max(( int(7.0) - i2 ), divInt(abs(i1),divInt(int(9.0),int(2.0)))) + i2 ) ), i0) * int(1.0) ) ),int(7.0)):max(int(7.0), saveOrd(in0[i0:( ( ( int(9.0) - int(8.0) ) - mod(int(5.0),i2) ) * int(0.0) )]))]) ),abs(int(4.0)))), divInt(i2,int(8.0)))) or ( saveChr(int(59.0)).endswith((\"\"R\"\" + in0.capitalize())) and True ) ):{:\\nres0 = int(9.0) \\l i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 = i0\\nin1 = \"\"7b\"\"\\ni1 += int(2.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [], [], [], [3, 2, 3], [], [2, 0, 1, 0, 2, 0], [0, 0], [], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 5, 1, 7, 4, 9, 8, 1, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 2, 2, 0, 1, 2, 1, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 0, 2, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 1, 1, 2, 1], [1, 2, 2, 0, 0, 0, 1, 2, 0], [1, 1, 1, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [3, 1, 3], [4, 0], [2, 2, 2, 2, 1], [0], [22], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 10, 0, 49, 16, 9, 9, 7, 7, 1, 1, 15, 3, 2, 5, 1, 1, 0, 0, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nin1 = in0[len(saveChr(mod(int(0.0),max(( int(7.0) - int(5.0) ), int(7.0))))[int(5.0):].rstrip(s0[min(i0, ( mod(( int(1.0) * i2 ),mod(len((\"\"W\"\" + in1.lstrip())[:( i2 * ( max(divInt(int(7.0),i0), ( max(i0, i1) + divInt(divInt(i2,i2),( int(4.0) + abs(int(9.0)) )) )) + max(i0, ( ( int(8.0) - int(1.0) ) * int(0.0) )) ) )]),mod(int(4.0),i1))) + int(8.0) )):])):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 1], [], [2, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [1], [], [5, 2, 2, 5], [0, 0, 0, 1], [], [0, 3, 1, 0], [], [], [], [0, 3, 2, 1], [23], [14], [4], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 0, 4, 1, 1, 1, 1], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\ns2 = (\"\"X)4o\"\" + in2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 1, 0, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 2, 2, 0, 1, 0, 2, 1, 1], [1, 2, 1, 2, 1, 0, 0, 1, 0, 2], [1, 1, 1, 2, 1, 1, 0, 2, 0, 0, 0, 2], [0, 0, 0], [0, 0, 0, 0], [], [], [1, 0, 1, 2, 0, 2], [4, 1, 5, 5, 5, 2], [1, 1, 1, 2, 1, 0, 1, 2, 0, 0, 2, 1], [0, 0, 0, 0, 0, 0], [2, 4, 5], [0, 2, 0], [], [], [1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [5, 6, 0, 3, 6, 2, 8, 8, 5, 8, 0, 4, 2, 6, 4, 3, 9, 8, 2, 2, 6, 2, 2, 9, 4, 5, 8, 2, 1, 9, 8, 2, 9, 9, 4, 5, 2, 6, 7, 8, 6, 9, 6, 4, 4, 2, 1, 5, 8, 1, 4, 5, 6, 3, 7, 8, 0, 6, 7, 0, 8, 1], [0, 1, 0, 1, 2, 0, 2, 2, 0, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 2, 0, 2, 0, 2, 1, 2, 2, 0, 2, 0, 1, 1, 2, 1, 2, 0, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 0, 2, 1, 1, 1, 1, 1, 2, 2, 0, 1, 2, 1, 1, 1, 2, 0, 0, 1, 1, 0, 1], [1, 1, 0, 1, 1], [0, 3, 2, 0, 0, 0, 0, 0, 2, 0, 0, 1, 2, 3, 2, 3, 2, 3, 1, 2, 0, 0, 3, 0, 1, 0, 2, 1, 3, 3, 0, 0, 1, 3, 0, 1, 2, 3, 3, 2, 3, 0, 3, 2, 0, 3, 1, 2, 2, 0, 3, 3, 1, 1, 3, 1, 0, 2, 1, 2, 2, 1, 0, 1, 3, 3, 0, 1, 0, 2, 1, 2, 2, 0, 1, 2, 0, 1, 0, 3, 0, 2, 2, 0, 2, 0, 0, 0, 2, 1, 3, 3, 0, 0, 2, 1, 2, 0, 1, 3, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 2, 3, 0, 0, 0, 3, 0, 2, 0, 3, 0, 1, 0, 2, 0, 1, 1, 2, 0, 1, 1, 2, 0, 2, 3, 3, 1, 1, 2, 1, 2, 2, 3, 1, 1, 3, 1, 1, 3, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 3, 2, 0, 2, 3, 0, 2, 0, 2, 1, 3, 3, 1, 2, 2, 2, 1, 3, 0, 0, 2, 0, 3, 2, 0, 2, 3, 3, 0, 0, 1, 1, 0, 3, 2, 2, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 1, 3, 0, 1, 3, 2, 2, 1, 2, 2, 2, 0, 0, 1, 1, 0, 2, 0, 2, 0, 0, 2, 0, 1, 0, 2, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0], [4, 4, 0, 3, 1, 2, 1, 3, 3, 0, 4, 4, 3, 3, 3, 2, 4, 4, 2, 3, 4, 1, 4, 0, 2, 4, 1, 3, 1, 2, 2, 1, 2, 3, 1, 3, 1, 4, 0, 1, 4, 1], [1, 1, 2, 2, 2, 0, 0, 1, 0, 2, 0, 2, 2, 2, 2, 1, 0, 1, 2, 2, 0, 1, 0, 2, 2, 1, 2, 1, 0, 2, 1, 2, 1, 0, 0, 2], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [2, 0, 3, 0, 5, 3, 5, 3, 1, 4, 4, 1, 3, 1, 4, 3, 2, 5, 5, 2, 2, 3, 5, 1, 5], [1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0], [3, 1, 3, 2, 4, 0, 3, 2, 4, 2, 0, 2, 1, 0, 2, 3, 3, 1, 1, 2, 3, 2, 2, 4, 2, 2, 1, 1, 4, 2, 2, 1, 4, 1, 4, 4, 2, 0, 4, 2, 4, 1, 1, 2, 0, 2, 4, 4, 3, 3, 1, 4, 1, 4, 1, 1, 0, 1, 0, 4, 4, 4, 0, 2, 2, 0, 4, 2, 1, 4, 1, 2, 1, 0, 4, 0, 3, 0, 3, 4, 2, 4, 2, 4, 2, 4, 0, 2, 4, 3, 2, 0, 0, 1, 0, 4, 3, 0, 2, 4, 2, 1, 1, 2, 0, 1, 2, 3, 2, 2, 2, 3, 0, 1, 1, 3, 4, 1], [0, 3, 1, 1, 3, 3, 1, 3, 1, 2, 1, 3, 3, 1, 0, 2, 0, 2, 1, 2, 3, 2, 1, 0, 1, 3, 1], [0, 3, 5, 4, 5, 5, 3, 2], [0, 0, 0, 2, 2, 0, 2, 1, 0, 0, 2, 2, 0, 1, 1, 2, 1, 2, 0, 2, 2, 2, 1, 2, 2, 1, 0, 0, 2, 1, 2, 0], [2, 3, 1, 3, 2, 2, 3, 2, 0, 3, 3, 3, 0, 0, 0, 3, 0, 3, 2, 1, 3, 0, 2, 2, 1, 2, 1, 2, 1], [24, 1, 17, 15, 16, 9], [8, 12, 2, 6, 9], [6, 0, 9, 0, 2, 8, 3, 2, 9], [11, 18, 10, 7, 7, 7, 5, 3, 26]], "fitness": 9223372036854775807, "mapping_values": [1, 22, 22, 10, 12, 3, 4, 0, 0, 6, 6, 12, 6, 3, 3, 0, 0, 4, 62, 62, 82, 5, 237, 64, 42, 36, 32, 25, 29, 3, 118, 27, 8, 32, 29, 6, 5, 9, 9], "tree_depth": 68, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i1\\nif saveOrd((\"\"6\"\" + (getCharFromString(s2, divInt(i0,i1))[i2:i0] + (s0[i2:( i2 - i0 )].lstrip()[int(5.0):( saveOrd(\"\"(\"\"[divInt(min(( len(in0) * int(6.0) ), ( i2 * i2 )),max(i2, int(0.0))):]) * i1 )] + ((\"\"i/\"\" + \"\"09\"\") + (saveChr(( int(3.0) + abs(max(i1, i2)) ))[:int(6.0)][len(\"\"\"\\\\\"\"\"[i1:int(2.0)][divInt(len(\"\"0\"\"),min(( saveOrd(saveChr(i2)) + saveOrd(\"\"Y\"\"[mod(i2,len(\"\"$\"\".lstrip(saveChr(int(8.0)).strip(s0[divInt(( i1 - len(saveChr(len(\"\"$\"\"))[:int(8.0)].rstrip(\"\"$\"\")) ),int(5.0)):abs(int(8.0))])))):][i1:]) ), ( int(0.0) + divInt(( int(4.0) * i1 ),int(2.0)) ))):saveOrd(in2[:saveOrd(saveChr(i2).capitalize()[int(6.0):])])]):] + ((\"\"B\"\" + \"\"R\"\".strip(\"\"P\"\".strip(\"\"\"\"\"))) + in0))[i1:mod(int(4.0),( mod(i0,int(3.0)) + mod(i1,int(9.0)) ))])[i1:])))) \\le abs(i2):{:\\ni0 *= ( ( i1 * divInt(i2,i0) ) * i2 )\\ni0 = ( int(8.0) * len(\"\"Q\"\") )\\nloopBreak% = 0\\nwhile saveOrd(in2) \\g i2:{:\\nif i1 != ( int(2.0) - divInt(i2,int(2.0)) ):{:\\nloopBreak% = 0\\nwhile saveChr(max(i2, i0)) == getCharFromString(in0.capitalize(), i2):{:\\nif divInt(i0,mod(i1,i1)) != i2:{:\\nloopBreak% = 0\\nfor s1 in in1[i1:][:int(6.0)]:{:\\nloopBreak% = 0\\nfor in1 in getCharFromString(\"\"\"\"[int(2.0):int(2.0)], int(9.0)):{:\\ns1 = \"\"2\"\".capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += divInt(saveOrd(\"\"m\"\"[i0:]),i1)\\n:}else:{:\\ni2 -= i1\\n:}\\nb1 = b0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif min(i2, divInt(i2,abs(i1))) != int(45.0):{:\\nloopBreak% = 0\\nfor in0 in s1:{:\\nin1 = saveChr(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb1 = in0.startswith((s2 + (saveChr(( i2 * int(8.0) ))[:int(2.0)].capitalize()[( i1 * int(1.0) ):].lstrip(in2)[int(98.0):].capitalize() + getCharFromString((in2[( i2 + mod(saveOrd(s2),max(int(2.0), int(9.0))) ):] + \"\"[\"\"), divInt(int(9.0),( divInt(len(s2),int(4.0)) - int(5.0) )))[max(int(2.0), int(678.0)):])))\\nb2 = not b0\\n:}else:{:\\nloopBreak% = 0\\nwhile saveChr(abs(i2)).endswith((in0 + \"\"J\"\"[mod(int(6.0),i2):divInt(int(9.0),int(6.0))].strip()[:( i1 + i1 )])):{:\\nb2 = abs(( i0 * ( max(i2, ( i1 * divInt(int(4.0),abs(len(\"\"8\"\"))) )) - int(4.0) ) )) == divInt(mod(( int(2.0) * max(i1, i1) ),mod(i1,len(in2[divInt(i1,( max(saveOrd(\"\"3\"\"), i2) - i2 )):int(1.0)]))),int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ns1 = ((in2 + \"\"c2\"\")[i0:min(( divInt(int(81.0),divInt(( int(4.0) + i1 ),int(5.0))) * max(divInt(i2,( int(6.0) - saveOrd(\"\"g\"\") )), i1) ), int(3.0))][max(mod(( int(7.0) * divInt(mod(( i1 - i1 ),int(8.0)),int(0.0)) ),i2), divInt(i0,( i0 + i1 ))):][:( i1 + int(6.0) )] + (saveChr(i0) + \"\"9j\"\"))[( int(7081.0) * i1 ):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 2, 2, 1, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2], [1, 0], [0, 2, 1, 2, 1], [0, 1], [17], [22], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 10, 1, 3, 0, 1, 4, 2, 1, 15, 4, 1, 5, 2, 1, 1, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"[:saveOrd(saveChr(mod(int(0.0),i0))[abs(i2):].capitalize())][int(7.0):]):i2]:{:\\nb2 = in1[:int(5.0)] == (\"\"w\"\" + in1.capitalize()).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0], [], [2, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [1], [3, 0, 1, 1], [], [2], [1], [], [2, 3], [1], [], [2, 2, 1], [], [], [1, 2], [1], [], [14], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 1, 1, 0, 3, 0, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"o\"\"[abs(i0):][:int(4.0)]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 2], [], [0, 0], [], [], [], [], [], [], [], [1], [], [], [0], [1, 1, 1, 1, 1], [7, 7, 5, 3, 6], [1, 0], [0], [1, 3, 2, 0, 2, 1, 2, 1, 2, 3, 0, 1, 1], [0, 0, 0, 1], [1, 3, 2], [1, 2, 2, 0], [0], [1, 2, 2, 5, 0, 4], [1], [], [3, 2, 4, 4, 0, 0, 0, 2, 3, 0, 1], [2, 0, 0], [], [1, 1], [2], [], [], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 2, 0, 13, 4, 2, 3, 1, 6, 1, 0, 11, 2, 0, 2, 1, 0, 0, 1, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = (getCharFromString(s2, int(7.0)).capitalize()[:max(( i1 - ( int(7.0) * ( int(5.0) * divInt(len(s2),i0) ) ) ), int(3.0))] + in2)\\ns0 = (in1 + \"\"9\"\")[:int(6.0)]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2], [0, 1, 1], [3, 1, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 0, 2, 2, 1, 0, 2, 0, 0, 3, 0, 3, 2, 2, 3, 3, 0, 0, 3, 2, 3, 0, 2, 3, 3, 3, 1, 0, 2, 1, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [2, 1, 2, 0, 3, 0, 1, 2, 1, 3, 1, 1, 2, 0, 1, 4, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4, 1], [1, 1], [0], [2, 0, 3, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [8], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 22, 1, 83, 26, 18, 12, 14, 8, 2, 1, 17, 2, 0, 3, 2, 1, 1, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(int(1.0)):]:{:\\nb2 = ((in1 + in1) + in0[i0:]) not in s0[mod(max(mod(i2,int(7.0)), ( int(5.0) + abs(i2) )),divInt(( divInt(min(i0, ( len(getCharFromString((\"\"R\"\" + saveChr(( i1 + divInt(( divInt(int(7.0),i2) * mod(min(int(4.0), i1),int(1.0)) ),int(7.0)) ))), i2)) - i0 )),( int(7.0) + max(int(9.0), abs(i0)) )) * ( ( divInt(int(8.0),int(5.0)) - mod(int(0.0),i2) ) - int(4.0) ) ),max(divInt(i0,mod(( int(8.0) * i1 ),( i2 + i2 ))), len(in1)))):i1]\\ni2 = max(mod(divInt(max(abs(i1), i2),min(( max(i2, ( saveOrd(\"\"i\"\") + max(len(s1), int(59.0)) )) - i2 ), mod(int(9.0),int(2.0)))),i2), int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [2, 0, 2, 2, 1, 2, 0, 0, 0, 0], [2, 2, 0, 0], [1, 1, 0, 2, 2, 0], [0, 0], [0, 0, 0, 0, 0], [], [], [3, 1], [5, 3, 1], [1, 1, 2, 1], [0, 0, 0], [2], [], [1, 0], [], [], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [5, 3, 2, 2, 8, 1, 0, 7, 7, 7, 3, 9, 3, 9], [1, 2, 0, 1, 2, 1, 2, 0, 0, 2], [1, 1], [1, 0, 0, 1, 3, 1, 1, 2, 3, 2, 3, 1, 2, 3, 3, 1, 0, 1, 2, 3, 2, 1, 1, 0, 3, 0, 0, 0, 3, 2, 0, 1], [0, 1, 0, 0, 1, 0], [1, 0, 1, 4, 0, 4, 2, 2], [1, 2, 2, 1, 2, 1], [1, 0], [5, 4, 0, 4, 0, 4, 4], [1, 0, 1, 1, 1, 0, 1], [0, 0], [4, 1, 4, 1, 0, 1, 1, 1, 2, 0, 4, 0], [3, 3, 1], [5, 1], [1], [0, 1, 1, 3, 3, 1, 2], [12], [12, 25, 18], [5], [22, 26]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 4, 6, 2, 5, 0, 0, 2, 3, 4, 3, 1, 0, 0, 0, 0, 14, 14, 10, 2, 32, 6, 8, 6, 2, 7, 7, 2, 12, 3, 2, 1, 7, 1, 3, 1, 2], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(532.0) != i1:{:\\ni2 -= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile int(28.0) \\ge max(int(10.0), int(7.0)):{:\\nloopBreak% = 0\\nfor in2 in \"\"M\"\".strip(\"\"mz\"\".rstrip()):{:\\ni1 *= ( min(mod(max(int(7.0), ( saveOrd(in1) * min(int(7.0), i2) )),int(3.0)), ( saveOrd(\"\"=\"\") - divInt(int(9.0),int(3.0)) )) * i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in \"\"[\"\":{:\\nres0 = \"\"s5\"\" == in1[:abs(i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = saveChr(i0)\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = i0 \\g abs(( i2 - int(9.0) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [1, 2, 2, 1, 0, 0, 2, 0, 1, 2, 2, 0, 1, 1, 0, 1, 1], [2, 0, 0, 2, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 2], [0, 0, 0], [0, 0, 0, 0, 0], [], [], [0, 1, 2, 0, 0, 3], [1, 1], [0, 1, 2, 0, 2, 2, 1, 0, 0], [0, 0], [1, 1, 3], [1, 3, 0, 1], [1], [1, 0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [9, 4, 1, 8, 9, 9, 0, 8, 7, 3, 0, 5, 9, 9, 9, 3, 4, 5, 6, 9, 0, 4, 4, 4, 7, 6, 8, 2, 7, 5, 5, 9, 8, 6, 8, 1, 3, 5, 9, 3, 7, 5, 6, 6, 1, 6, 6, 5, 4, 4, 3, 8, 7, 3, 8], [0, 1, 1, 0, 0, 0, 1, 0, 2, 1, 2, 2, 0, 1, 1, 1, 2, 2, 1, 2, 2, 2, 0, 1, 2, 1, 2, 1, 0, 2, 1, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 2, 0, 0, 2, 1, 1, 2, 0, 2, 0], [0, 1, 0, 1, 0, 1], [1, 3, 2, 0, 0, 1, 3, 2, 2, 0, 3, 3, 0, 3, 1, 1, 0, 2, 2, 2, 1, 1, 1, 3, 2, 2, 1, 0, 3, 1, 0, 0, 1, 1, 3, 0, 0, 3, 1, 1, 3, 0, 3, 0, 1, 0, 0, 1, 2, 3, 2, 3, 0, 1, 1, 0, 0, 3, 3, 3, 0, 2, 2, 1, 2, 2, 2, 1, 0, 2, 2, 2, 3, 2, 1, 3, 2, 2, 0, 3, 3, 1, 3, 3, 2, 0, 2, 2, 0, 2, 1, 3, 0, 1, 1, 0, 2, 1, 3, 3, 2, 0, 1, 2, 1, 0, 2, 0, 3, 2, 1, 0, 2, 2, 2, 0, 1, 3, 2, 0, 3, 2, 0, 2, 0, 3, 2, 1, 2, 0, 1, 3, 0, 1, 0, 3, 2, 2, 1, 1, 0, 1, 3, 2, 1, 0, 0, 1, 0, 0, 2, 3, 3, 2, 1, 2, 1, 0, 3, 0, 0, 1, 1, 1, 0, 2, 3, 0, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [4, 4, 3, 1, 4, 3, 0, 0, 2, 1, 4, 4, 3, 2, 0, 3, 0, 3, 0, 0, 3, 4, 2, 2, 4, 1, 0, 1, 0, 2, 0, 1, 1, 1, 4, 4], [0, 2, 2, 1, 2, 1, 1, 1, 0, 2, 0, 1, 0, 0, 0, 1, 1, 1, 2, 2, 1, 0, 2, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0], [5, 4, 0, 2, 5, 3, 4, 0, 1, 2, 4, 0, 2, 4, 1, 2, 0, 2, 0, 1, 5, 0, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0], [1, 0, 2, 1, 3, 4, 0, 0, 4, 2, 2, 2, 2, 4, 0, 2, 2, 4, 1, 1, 4, 3, 2, 0, 4, 3, 2, 2, 0, 2, 0, 2, 0, 0, 3, 2, 4, 4, 2, 1, 4, 4, 1, 4, 0, 1, 1, 4, 4, 0, 1, 1, 1, 2, 1, 4, 0, 2, 3, 3, 0, 4, 2, 3, 0, 1, 3, 0, 3, 4, 3, 0, 3, 0, 0, 1, 0], [1, 3, 3, 0, 3, 2, 1, 2, 0, 1, 1, 0, 2, 0, 3, 3], [2, 1, 5, 0, 2], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2, 0, 0, 0, 0, 2], [2, 2, 0, 2, 1, 3, 1, 2, 2, 3, 1, 1, 2, 0], [2, 2], [8, 19, 16, 10], [5, 9, 7, 9, 7, 6], [31, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 17, 17, 5, 12, 3, 5, 0, 0, 6, 2, 9, 2, 3, 4, 1, 2, 0, 55, 55, 51, 6, 171, 45, 36, 24, 24, 23, 14, 3, 77, 16, 5, 17, 14, 2, 4, 6, 2], "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\nloopBreak% = 0\\nwhile int(9.0) \\g saveOrd(\"\"5\"\"):{:\\nloopBreak% = 0\\nfor in2 in in1:{:\\nb1 = \"\"9\"\"[( i0 + i1 ):int(4.0)] not in (saveChr(saveOrd(s0)) + s2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = divInt(divInt(i0,len(in2.rstrip()[:max(i0, saveOrd(getCharFromString(\"\"C\"\", int(1.0))[int(8.0):i0][:mod(mod(mod(int(9.0),int(9.0)),int(0.0)),len(\"\"7\"\"))]))][mod(divInt(int(8.0),i1),min(int(7.0), i0)):i2][int(3.0):int(0.0)][:min(i1, i2)].strip())),abs(int(59.0)))\\ni2 *= int(99.0)\\nloopBreak% = 0\\nfor in0 in (in1[:max(i0, saveOrd((s0[:i1][int(3.0):i1] + s1[i1:]).capitalize()))] + s2[int(45.0):]).strip(in1):{:\\nb2 = ( (saveChr(mod(saveOrd(\"\"i\"\"[mod(len(getCharFromString(saveChr(i2), int(6.0))),int(9.0)):i2].capitalize()),i1))[abs(min(len(\"\"`\"\"), i2)):mod(divInt(int(0.0),divInt(( mod(int(4.0),i2) * ( ( ( min(mod(int(4.0),len(saveChr(( ( i2 - min(min(int(4.0), len(s0)), saveOrd(\"\"t\"\")) ) * mod(i0,mod(( i1 - ( int(7.0) - abs(i2) ) ),int(6.0))) )))), int(8.0)) - i1 ) + ( int(2.0) * abs(saveOrd(\"\"9\"\")) ) ) + mod(i2,int(7.0)) ) ),( int(5.0) - i1 ))),( i0 + max(divInt(int(5.0),i2), ( divInt(( i1 + int(9.0) ),min(divInt(i2,max(( i2 + mod(i2,min(( int(8.0) - ( i1 - int(6.0) ) ), abs(i1))) ), int(8.0))), i2)) - min(( mod(int(1.0),int(3.0)) * i1 ), int(5.0)) )) ))] + getCharFromString(s2.capitalize(), max(divInt(int(9.0),i0), i1))) not in \"\"7\"\" or \"\"-\"\" != \"\"q\"\" )\\ni2 = int(3.0)\\nloopBreak% = 0\\nwhile i2 \\g i0:{:\\nloopBreak% = 0\\nfor in1 in \"\"k\"\"[( max(max(( int(7.0) * ( int(5.0) - i0 ) ), saveOrd(getCharFromString(s1, i2))), i1) + int(6.0) ):int(6.0)]:{:\\ni1 *= int(1.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b0\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += divInt(saveOrd(((s2 + (s0 + \"\"6\"\")[i0:].lstrip()) + (s2 + ((s0 + (s1 + in2)).strip() + \"\"C\"\")))[int(6.0):int(6.0)]),int(54438738.0))\\ns0 = in0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 0, 2, 1, 1, 2, 3, 2, 3, 3, 1, 2, 0, 0, 3, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 3, 0], [0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [1, 0, 0, 2, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 3, 3], [1, 0, 1], [2, 2, 0, 0, 1], [0, 1], [17], [22], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 0, 0, 2, 0, 4, 0, 2, 0, 0, 4, 2, 0, 8, 0, 0, 2, 2, 1, 1, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif \"\"R\"\" not in s0:{:\\nres0 = ( len(in2) != len(\"\"w\"\"[i0:]) or ( in1.endswith(in1[i2:]) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 6, 6, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 2, 0, 6, 4, 4, 9, 4, 8, 2, 4, 4, 4, 5, 1, 3, 1, 9, 2, 4, 7, 1, 6, 1, 7, 6, 9, 4, 4], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 2, 0, 2, 1, 1, 0, 0, 0, 2, 2, 2, 0, 0, 1, 0, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 0, 1], [0, 1, 1], [1, 3, 2, 2, 0, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1, 2, 2, 1, 3, 0, 1, 1, 3, 3, 3, 0, 2, 0, 0, 3, 0, 2, 1, 2, 3, 2, 2, 2, 0, 3, 0, 2, 2, 3, 3, 0, 3, 1, 3, 0, 2, 1, 0, 0, 3, 2, 2, 2, 0, 0, 3, 2, 0, 3, 2, 2, 3, 1, 2, 0, 3, 2, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 1, 1, 0, 1, 3, 3, 0, 2, 1, 1, 1, 0, 2, 0, 2, 2, 2, 2, 3, 3, 2, 0, 1, 0, 0, 0, 3, 0, 0, 3, 2, 1, 2, 2, 3, 1, 1, 2, 0, 3, 2, 2, 2, 1, 2, 0, 1, 3, 2, 2, 0, 0, 0, 2, 1, 1, 1, 3, 1, 2, 0, 1, 1, 3, 0, 1, 3, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 1, 2, 0, 3, 0, 3, 1, 3, 0, 3, 3, 3, 2, 0, 2, 2, 3, 2, 0, 0, 2, 4, 0, 2, 3, 1, 0], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2, 1, 2, 2, 1, 1, 0, 0, 2, 2, 1, 2, 0, 0, 1, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [0, 5, 2, 1, 3, 0, 4, 2], [1, 1, 1, 1, 1, 1], [0], [1, 4, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 4, 4, 4, 2, 2, 4, 0, 4, 1, 4, 2, 2, 1, 2, 2, 1, 2, 0, 4, 2, 2, 2, 0], [2, 1, 3, 0, 0, 3, 0, 0, 1, 0, 2], [1, 0], [2, 2, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 2, 0], [0, 3, 2, 1, 0, 1], [17, 21], [22, 4], [9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 47, 47, 46, 1, 187, 58, 38, 29, 29, 8, 6, 0, 40, 11, 2, 14, 6, 2, 2, 1, 1], "tree_depth": 73, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"R\"\" not in s0[int(0.0):][len(in2):].capitalize()\\ni0 = mod(mod(i2,( i2 + int(7.0) )),divInt(int(5.0),len(saveChr(i0)[divInt(divInt(( ( i1 + divInt(abs(( i2 + ( min(mod(len(s2[i2:( min(int(7.0), i2) - int(6.0) )]),int(6.0)), i0) + i0 ) )),( int(7.0) * max(int(7.0), abs(max(( divInt(mod(int(9.0),int(8.0)),mod(int(5.0),i0)) - int(0.0) ), int(4.0)))) )) ) - int(8.0) ),( divInt(int(59.0),len((\"\";\"\" + getCharFromString(s1, i1)).rstrip())) * int(9.0) )),int(2.0)):min(max(abs(i1), ( i1 + i1 )), min(i1, ( int(2.0) + ( len(\"\"9\"\") - mod(mod(divInt(i0,min(i0, ( ( len(in0) * max(i1, len(getCharFromString(getCharFromString(getCharFromString(s0, int(2.0))[min(i2, divInt(int(0.0),i0)):][:i2], len(saveChr(divInt(divInt(( i1 - i1 ),len(\"\"w\"\")),( i0 * len(getCharFromString(\"\"V\"\"[( divInt(abs(int(6.0)),( i0 * min(( int(4.0) - int(4.0) ), int(9.0)) )) - mod(divInt(abs(i0),int(4.0)),int(8.0)) ):i2][int(2.0):int(4.0)], i2)) ))))).lstrip(), int(4.0)))) ) + abs(len(\"\"e\"\"[i2:( int(4.0) + int(5.0) )][int(1.0):i0])) ))),( i0 * mod(divInt(( ( abs(min(( i1 * int(3.0) ), i0)) - i2 ) * i2 ),min(i1, i1)),abs(divInt(int(1.0),( ( saveOrd(in1[:int(9.0)]) + int(2.0) ) + ( i2 - min(( mod(( int(4.0) + mod(i2,int(7.0)) ),abs(divInt(divInt(i1,i2),i2))) + divInt(int(1.0),int(6.0)) ), int(1.0)) ) )))) )),len(s2[int(7.0):mod(i2,int(6.0))][int(9.0):][max(i0, int(4.0)):min(i1, int(4.0))].capitalize())) ) )))])))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [1, 2, 1, 0], [2], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [], [1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 5, 1, 0, 9, 1, 8, 0, 1, 9], [0, 1, 0, 1, 1, 2, 0], [1, 1], [3, 1, 0, 3, 3, 2, 1, 0, 0, 2, 0, 2, 2, 2, 3, 3, 1, 1, 3, 0, 1, 2, 1, 3, 3, 1], [0, 1, 0, 1, 1, 1], [0, 1, 4, 2, 3, 3, 1, 4], [0, 2, 2, 0], [1, 0, 0, 0], [1, 5, 2], [1, 1, 0, 1, 1], [], [4, 0, 0, 4, 2, 2, 1, 4, 1, 4, 1, 1], [3, 1, 2, 0], [0], [2, 0], [3, 2, 1, 1, 0], [8], [10, 18], [7], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 7, 2, 26, 6, 8, 4, 4, 3, 5, 0, 12, 4, 1, 2, 5, 1, 2, 1, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += min(int(3.0), i1)\\nloopBreak% = 0\\nwhile s1.lstrip() in in2:{:\\ni0 *= max(saveOrd(saveChr(( int(151.0) * i1 ))), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns2 = \"\"[\"\"[mod(i2,( divInt(divInt(abs(len(\"\"7\"\".capitalize())),int(09.0)),int(1.0)) + len(getCharFromString(\"\"ks\"\", i0)) )):int(80.0)][divInt(int(1.0),max(saveOrd(\"\"I\"\"), int(9.0))):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0], [1], [1], [], [0], [], [], [], [3], [1], [0], [], [], [], [], [0], [0, 1, 0, 1], [4, 8, 4, 4], [0, 2, 1, 2, 0, 2], [1], [2, 3, 0, 0, 3, 3, 0, 0, 0], [1], [0, 0, 4], [1], [0], [], [0, 1], [], [1], [], [], [], [1, 3], [], [5], [], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 7, 1, 3, 1, 1, 0, 2, 0, 1, 0, 0, 0, 2, 0, 1, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= divInt(min(i2, i1),min(saveOrd(\"\"f^\"\"), i2))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 6, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 3, 2, 1, 0, 0, 1, 3, 3, 3, 0, 2, 2, 2, 0, 3, 3, 2, 1, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 4, 1, 0, 3, 0, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4, 5], [1], [0], [1, 0, 0, 2, 0, 0, 4, 0, 2, 2, 4, 3, 1, 0, 0, 1, 0], [0, 0, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [22], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"W\"\":{:\\nres0 = in2 not in in1\\nin1 = in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 1, 0, 0, 1, 0, 1], [0, 1, 1], [3, 3, 2, 0, 1, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 3, 0, 2, 3, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1, 1, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 2, 2, 0, 4, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 1, 0], [1, 0], [2, 2, 0, 0, 1], [0, 3, 1], [17], [19], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 13, 0, 57, 17, 12, 9, 8, 5, 3, 1, 16, 5, 2, 4, 3, 1, 1, 0, 1], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[abs(mod(i0,int(1.0))):( i2 + int(7.0) )][( int(5.0) + abs(i2) ):]):]:{:\\nres0 = saveChr(divInt(( mod(int(7.0),i0) * ( min(( i1 - len(in1[min(divInt(int(7.0),int(1.0)), ( max(int(7.0), i2) + int(7.0) )):i1].lstrip()) ), i1) * i0 ) ),divInt(int(9.0),min(divInt(max(i0, ( ( ( int(8.0) - int(5.0) ) - mod(int(0.0),i1) ) * int(4.0) )),i0), max(saveOrd(saveChr(i1)), divInt(saveOrd((\"\"R\"\" + getCharFromString(in0, int(8.0)))),int(59.0))))))).rstrip() not in \"\";t\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 8, 3, 1, 4, 7, 4, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 0, 2, 1], [0, 1, 1], [3, 3, 2, 0, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 3, 2, 2, 1, 1, 2, 1, 0, 3, 0, 0, 2, 0, 2, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [3, 0, 2, 3, 3, 2, 1, 2, 0, 0, 3], [0, 1, 1, 2, 2, 1, 1], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [0], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 12, 0, 49, 16, 11, 7, 9, 6, 1, 1, 15, 5, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[min(( i0 + i1 ), mod(mod(int(0.0),divInt(int(4.0),abs(i2))),i0)):].capitalize()):]:{:\\nres0 = in1 not in saveChr(( divInt(int(5.0),i1) - ( len(in0.rstrip()) - ( i2 * divInt(len((\"\"A\"\" + saveChr(mod(abs(i1),mod(max(int(8.0), i2),int(3.0))))).capitalize()),divInt(i0,i0)) ) ) ))[( int(1.0) * abs(int(4.0)) ):min(i0, min(( ( int(7.0) - int(4.0) ) - mod(int(8.0),i1) ), len(s0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 0, 0, 2, 0, 3, 3, 0, 2, 0, 3, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 2, 4, 3, 0, 4], [1, 1], [0], [2, 0, 3, 2, 0, 2, 2, 3, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [21], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 12, 2, 3, 0, 2, 6, 2, 1, 16, 2, 0, 4, 2, 1, 1, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[int(0.0):]:{:\\nb2 = (s2[i1:] + (in1 + in0)[i0:mod(i2,len((\"\"R\"\" + saveChr(len(s0))).capitalize()))][i0:mod(i1,abs(int(7.0)))]) not in \"\"v\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 7, 4, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 2, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 3, 4, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 8, 0, 32, 10, 7, 6, 4, 7, 2, 1, 16, 3, 1, 4, 2, 1, 0, 0, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], len(saveChr(mod(i2,int(7.0)))))[divInt(int(7.0),min(i2, divInt(divInt(( len((\"\"R\"\" + in1.rstrip())) + i1 ),( saveOrd(\"\";\"\") + ( i1 * ( i2 - ( int(4.0) + i1 ) ) ) )),( max(int(2.0), i2) * int(5.0) )))):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [3, 0, 0], [0, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 2, 0, 1, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 0, 1, 3, 1, 1, 2, 3, 0, 3, 1, 2, 0, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 4, 1], [2, 2, 0, 2, 1, 0, 0, 2, 0], [0, 0, 0, 1, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4, 0], [1, 1, 1, 0, 1], [0], [2, 0, 3, 2, 3, 0, 2, 4, 2, 1, 2, 3, 1, 4, 0, 1, 0, 2, 2, 0, 2, 2, 0, 0, 1], [2, 0, 1], [1, 0], [0, 2, 0, 0, 1, 1, 0, 2, 2], [3, 0, 3, 3, 3], [17], [], [], [20, 10, 24, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 19, 19, 16, 0, 63, 17, 12, 9, 8, 8, 5, 1, 25, 2, 0, 9, 5, 1, 0, 0, 4], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(((in1 + \"\";\"\"[len((\"\"R\"\" + getCharFromString(in1, divInt(int(0.0),i1)))[:( i1 * int(6.0) )]):( int(1.0) * max(i2, i0) )].capitalize()[divInt(divInt(int(7.0),i1),mod(min(( i2 + ( len(\"\"\"\\\\\"\"\") * ( min(i1, ( max(int(6.0), i2) - int(1.0) )) + int(7.0) ) ) ), i0),i0)):divInt(int(7.0),abs(int(9.0)))])[max(i2, mod(( ( int(8.0) + int(5.0) ) * ( int(0.0) + i2 ) ),int(4.0))):] + in0)):int(8.0)]:{:\\nres0 = ( ( i2 \\ge int(59.0) or True ) or s0[len(in1[int(9.0):][int(2.0):]):mod(saveOrd(s0),i0)][:max(int(2.0), divInt(i1,i2))] not in \"\"?,\"\" )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [1], [0], [0, 0, 0, 1], [0], [], [2, 3, 1], [1], [0], [], [1, 1, 0, 0, 1], [8], [2, 2, 1], [1], [0, 1, 3, 3, 0, 0, 0], [1, 1], [0, 3], [0], [0, 1], [0], [0, 0, 0, 0, 0, 1], [0], [1, 0], [2], [], [], [2, 1, 3, 2, 0, 0], [13, 23], [17], [1, 5], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 4, 1, 0, 3, 1, 1, 0, 1, 1, 3, 1, 5, 0, 2, 1, 0, 0, 6, 0, 1, 0, 0, 0, 6, 2, 1, 2, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i2\\nb1 = not ( True or int(8.0) \\l min(len(\"\"1r%5NX\"\"), i1) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 2, 2, 1, 2, 2, 1, 0, 1, 0], [0, 2, 0, 2], [1, 0, 1, 1, 1, 0], [0, 0], [0, 0], [], [], [3, 3, 0], [2, 0, 0], [1, 0, 1, 1, 0], [0, 0, 0], [], [2, 0], [], [], [], [1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [6, 0, 0, 2, 1, 0, 9, 7, 8, 2, 8, 4, 1, 0, 0, 6, 3, 4, 8, 8, 0, 7, 6, 2, 9, 0], [2, 0, 0, 1, 0, 1, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 1, 0, 2, 2, 2, 1], [1, 1, 0, 0], [0, 2, 3, 0, 3, 2, 3, 0, 0, 0, 1, 3, 2, 1, 2, 0, 3, 1, 0, 1, 1, 1, 2, 1, 0, 3, 1, 0, 3, 2, 2, 0, 0, 0, 2, 1, 0, 1, 2, 3, 3, 0, 2, 2, 0, 1, 0, 1, 2, 0, 1, 2, 2, 1, 1, 3, 0, 2, 1, 1], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [1, 1, 0, 3, 0, 4, 1, 2, 1, 2], [0, 2, 0, 2, 1, 1, 0, 1, 2, 2, 0, 2, 1], [1, 0, 0, 1], [3, 0, 4, 3, 3, 3, 5], [1, 1, 1, 1], [0, 0], [3, 4, 3, 1, 2, 4, 1, 3, 0, 3, 1, 3, 0, 0, 2, 3, 4, 0, 1, 4, 4, 0], [3, 1, 0, 1, 2], [3], [2, 0], [0, 2, 1, 0], [3, 17], [18], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 4, 6, 2, 2, 0, 0, 3, 3, 5, 3, 0, 2, 0, 0, 0, 26, 26, 22, 4, 60, 15, 10, 13, 4, 7, 4, 2, 22, 5, 1, 2, 4, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i0\\nloopBreak% = 0\\nfor in0 in ((\"\"D\"\" + saveChr(( max(i0, max(mod(min(i1, i0),i1), int(6.0))) * len(\"\"6\"\") ))[divInt(int(00.0),( i0 + min(int(2.0), i1) )):]).lstrip((s0 + (\"\"s\"\" + (in1 + in0)))) + (getCharFromString(in0, int(1.0)) + \"\"R\"\")[int(0978.0):int(2841.0)]):{:\\nloopBreak% = 0\\nwhile ( int(0.0) * i1 ) == saveOrd(saveChr(int(0.0))):{:\\nres0 = not i2 \\l max(( ( i0 - i2 ) - i0 ), divInt(int(6.0),i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in0 in in2.capitalize():{:\\nloopBreak% = 0\\nwhile int(3.0) \\l ( abs(max(i2, ( mod(i0,int(4.0)) + i1 ))) - int(8.0) ):{:\\ni0 *= ( i2 * int(8.0) )\\ni2 = ( ( int(0.0) + int(7.0) ) * abs(i2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = ( int(62.0) - int(90.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = b0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 2, 0, 2, 0, 1, 1, 1, 1], [1, 0], [1, 0, 2, 0, 2, 1, 0, 0, 1], [0], [0, 0, 0, 0, 0], [], [], [1, 1, 0, 1], [3, 2], [2, 2, 0, 1, 1], [0, 0], [4, 0], [1], [], [0], [1], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [5, 1, 8, 2, 1, 2, 5, 3, 8, 4, 5, 1, 5, 1, 3, 9, 7, 3, 9, 1, 0, 8, 2, 3, 4, 8, 7, 3, 4, 5, 5, 4, 9, 2, 4, 9, 2, 4, 7, 5, 9, 0, 8, 9, 4, 8, 4, 8, 4, 5, 9, 2, 2, 3, 5, 9, 4, 9, 0, 5, 3, 4, 9, 2, 0], [0, 2, 0, 1, 1, 0, 0, 2, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 0, 1, 2, 0, 2, 0, 2, 1, 1], [0, 1, 0], [2, 0, 0, 2, 0, 3, 1, 2, 0, 3, 3, 1, 1, 2, 3, 1, 2, 0, 3, 3, 3, 2, 2, 3, 2, 3, 0, 3, 3, 1, 0, 1, 2, 0, 0, 1, 1, 3, 2, 3, 3, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 3, 2, 0, 3, 2, 0, 3, 0, 3, 1, 0, 3, 3, 2, 3, 2, 1, 3, 3, 2, 2, 0, 2, 1, 3, 1, 2, 3, 1, 2, 3, 1, 1, 0, 1, 1, 2, 3, 2, 3, 1, 3, 0, 3, 3, 1, 3, 2, 1, 0, 2, 0, 1, 0, 2, 2, 0, 1, 0, 2, 1, 1, 2, 2, 2, 0, 0, 2, 0, 0, 2, 1, 2, 3, 3, 3, 2, 3, 3, 1, 3, 3, 1, 2, 3, 2, 2, 3, 3, 1, 1, 0, 2, 0, 3, 1, 1, 3, 2, 3, 0, 1, 1, 0, 3, 2, 1, 2, 1, 3, 3, 2, 1, 2, 3, 0, 0, 1, 1, 0, 0, 0, 2, 2, 3, 3, 3, 2, 1, 3, 0, 2, 3, 2, 1, 1, 0, 0, 3, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 3, 2, 1, 4, 1, 0, 0, 4, 0, 4, 1, 4, 0, 1, 3, 1, 2, 4, 4, 0, 1, 2, 0, 4, 4, 4, 4, 0, 4, 4, 3, 4, 3, 0, 4, 0, 0, 1, 0, 3, 4, 4, 0, 3, 0, 2, 2, 1, 3, 0, 3, 1, 4, 2], [0, 0, 2, 2, 1, 1, 2, 1, 0, 2, 1, 2, 1, 2, 1, 1, 2, 2, 0, 2, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [4, 2, 2, 5, 0, 1, 0, 1, 1, 0, 1, 5, 2, 0, 2, 2, 2, 1, 2, 2, 5, 3], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [0, 1, 1, 4, 1, 4, 1, 3, 2, 3, 4, 2, 3, 1, 1, 0, 0, 2, 4, 0, 3, 4, 1, 1, 0, 1, 3, 3, 1, 1, 1, 0, 3, 3, 0, 4, 2, 0, 2, 4, 2, 1, 4, 0, 0, 2, 0, 4, 1, 1, 2, 4, 4, 2, 0, 0, 4, 4, 1, 2, 2, 4, 4, 2, 1, 0, 1, 1, 4, 1, 4, 2, 0, 0, 0, 1, 4, 3, 2, 4, 1, 1, 0, 0], [3, 3, 3, 2, 3, 1, 2, 0, 3, 0, 2, 0, 2, 1, 0, 3, 0, 0, 0], [3, 2, 4, 1, 5, 1], [2, 2, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 2, 3, 1, 3, 1, 3, 3, 2, 3, 2, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 1, 2, 2, 2, 2, 1, 3, 3], [1, 9, 6, 1, 11, 14, 23, 2, 9], [9, 14, 16, 25], [0, 0, 2, 0, 1, 1, 8], [11, 7, 2, 14, 23, 10, 17, 3, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 2, 9, 1, 5, 0, 0, 4, 2, 5, 2, 2, 1, 0, 1, 1, 65, 65, 40, 3, 193, 51, 55, 25, 27, 22, 29, 1, 84, 19, 6, 14, 29, 9, 4, 7, 9], "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( i2 + i0 )\\nb1 = in1.startswith(\"\"B\"\")\\ns2 = \"\"0\"\"\\nif \"\"(j$\"\".lstrip(\"\"o\"\".strip()) in (((\"\"\\\\\\t+\"\" + \"\"0\"\")[mod(i1,min(int(5.0), ( i1 + len(s2) ))):].rstrip(in2) + s0.capitalize()[abs(int(1821.0)):int(2.0)])[( max(int(53845.0), divInt(i0,saveOrd((\"\">\"\".rstrip() + \"\"2\"\")))) * max(min(( ( min(( saveOrd(s1) * i0 ), min(saveOrd(\"\"J\"\"), int(1.0))) - i2 ) - int(5.0) ), ( i0 * i0 )), int(139.0)) ):] + ((\"\"G\"\\\\\"\"\" + \"\"B\"\") + \"\"L.O\"\")):{:\\nb1 = True\\n:}else:{:\\nloopBreak% = 0\\nfor s0 in s1:{:\\ns1 = ((s0 + saveChr(int(7.0))) + s1[max(divInt(saveOrd(\"\"X\"\"[min(int(3.0), ( ( int(9.0) - int(1.0) ) + mod(int(0.0),int(8.0)) )):int(2.0)].capitalize()[( max(( i0 * len(getCharFromString(in2, mod(i1,max(i0, abs(int(3.0)))))) ), i0) - saveOrd(s2) ):]),saveOrd(s0[mod(min(( int(4.0) * max(abs(mod(mod(i2,mod(int(8.0),min(int(7.0), mod(saveOrd(\"\"C\"\".strip(\"\"J\"\")),int(3.0))))),divInt(saveOrd(getCharFromString(s2[int(4.0):].capitalize(), int(5.0))[i2:]),int(5.0)))), int(4.0)) ), mod(saveOrd(s2),divInt(saveOrd(getCharFromString(\"\"q\"\".capitalize(), int(9.0))),min(i0, saveOrd(saveChr(saveOrd(getCharFromString(\"\"0\"\"[int(2.0):len(s2)], mod(int(4.0),i0))))[( i0 - int(9.0) ):][i2:]))))),divInt(mod(i0,int(2.0)),i2)):( int(4.0) * int(7.0) )])), mod(divInt(( i1 - i1 ),( i2 - i2 )),divInt(int(5.0),( saveOrd(\"\"1\"\") * len(\"\"1\"\") )))):min(( saveOrd(\"\"8\"\".rstrip()) * min(int(9.0), min(max(int(0.0), mod(min(mod(divInt(len(getCharFromString(s1[saveOrd(s2):int(8.0)], int(9.0))),i2),( i1 + saveOrd(s2) )), int(4.0)),int(8.0))), min(( len(\"\"z\"\") * i2 ), int(4.0)))) ), int(8.0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= i1\\nb0 = min(( int(4.0) * ( int(5.0) - abs(abs(mod(int(9.0),( max(i0, i1) + int(2.0) )))) ) ), int(23.0)) \\ge i2\\n:}\\nb1 = i0 == i2\\ni0 = mod(divInt(len(getCharFromString((getCharFromString(\"\"\"\", min(len(\"\"\"\"\"), mod(int(5.0),max(i2, ( saveOrd(in2) - divInt(int(9.0),int(4.0)) )))))[i1:i1] + in0), abs(int(9053.0)))),int(492.0)),int(0.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [2, 0, 0, 0, 2, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 0, 2, 0, 0], [2, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 2, 1, 0, 1, 1, 2, 0], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [], [], [3, 3, 1, 2, 3, 0, 0], [0, 4, 1, 0, 1, 3], [1, 0, 1, 2, 2, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [3, 2], [1], [], [0], [0], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 7, 9, 3, 9, 2, 7, 5, 4, 9, 7, 7, 9, 5, 3, 2, 1, 3, 8, 4, 7, 3, 6, 3, 3, 4, 4, 1, 9, 7, 7, 2, 6, 5, 2, 5, 4, 1, 2, 5, 5, 1, 8, 8, 4, 0, 8, 2, 2, 5, 5, 1, 6, 1, 8, 6, 7, 5, 7, 5, 0, 3, 7, 2, 6, 2, 1, 9, 4], [1, 2, 1, 0, 2, 0, 0, 2, 2, 2, 0, 1, 1, 2, 0, 2, 2, 0, 0, 2, 1, 2, 2, 0, 2, 1, 2, 2, 1, 2, 0, 1, 0, 1, 1, 2, 1, 2, 0, 1, 2, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 0, 0, 2, 2, 1, 1, 0, 2, 1, 2, 0, 0, 1, 2, 0, 2, 1, 1], [0, 1, 0, 1, 1], [1, 1, 0, 2, 0, 0, 3, 0, 3, 2, 1, 3, 2, 3, 0, 0, 1, 3, 1, 2, 3, 2, 1, 0, 3, 2, 3, 3, 0, 1, 3, 2, 2, 0, 0, 1, 2, 2, 0, 0, 3, 2, 0, 1, 1, 2, 2, 2, 0, 2, 2, 3, 0, 2, 1, 1, 3, 2, 1, 2, 2, 1, 2, 0, 3, 2, 3, 2, 3, 1, 1, 3, 1, 0, 3, 0, 2, 0, 0, 0, 0, 2, 3, 2, 0, 0, 2, 2, 0, 3, 1, 0, 3, 2, 3, 3, 3, 3, 0, 1, 3, 0, 1, 0, 3, 0, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 2, 3, 3, 2, 2, 3, 1, 0, 1, 3, 3, 2, 2, 2, 1, 3, 2, 1, 3, 0, 3, 2, 1, 1, 1, 1, 3, 2, 2, 0, 1, 3, 0, 2, 1, 1, 1, 3, 1, 3, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 0, 0, 0, 2, 3, 2, 0, 0, 1, 2, 1, 1, 0, 1, 3, 2, 3, 0, 1, 0, 1, 0, 2, 1, 2, 3, 2, 2, 0, 3, 0, 0, 3, 0, 1, 0, 2, 2, 3, 3, 0, 2, 1, 0, 0, 1, 2, 2, 2, 2, 0, 0, 0, 1, 3, 2, 1, 1, 3, 0, 1, 2, 2, 0, 2, 3, 0, 3, 0, 3, 1, 3, 3, 1, 3, 3, 0, 2, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [0, 3, 1, 3, 4, 1, 2, 4, 1, 0, 0, 2, 1, 1, 4, 0, 3, 1, 2, 1, 1, 2, 4, 0, 4, 3, 2, 1, 3, 3, 0, 3, 0, 4, 3, 3, 0, 4, 2, 0, 2, 1, 0, 0, 0, 4, 1, 3, 3, 1, 3, 0, 3, 3, 3, 1], [2, 1, 1, 0, 1, 0, 1, 1, 2, 2, 1, 0, 2, 0, 2, 1, 1, 1, 2, 2, 1, 0, 0, 0, 2, 1, 2, 1, 1, 0, 2, 2, 1, 2, 1, 2, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [2, 5, 3, 0, 4, 0, 3, 0, 1, 1, 1, 4, 2, 5, 4, 3, 0, 0, 0, 2, 1, 4, 0, 1, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 0, 0], [0, 3, 4, 1, 3, 3, 1, 2, 1, 4, 2, 4, 4, 4, 0, 4, 1, 0, 0, 1, 4, 4, 1, 1, 4, 0, 1, 1, 3, 4, 0, 3, 4, 1, 1, 0, 4, 1, 4, 2, 1, 0, 2, 0, 0, 2, 1, 2, 4, 4, 1, 4, 4, 1, 0, 2, 4, 2, 2, 1, 2, 0, 2, 2, 0, 3, 2, 1, 3, 0, 3, 1, 0, 4, 2, 1, 4, 4, 3, 4, 1, 4, 2, 0, 4, 1, 1, 2, 2, 0, 4, 2, 0, 0, 0, 3, 0, 1], [2, 3, 0, 3, 3, 3, 0, 1, 2, 3, 1, 2, 0, 2, 3, 2, 3, 0, 2, 0, 0, 2, 0, 0, 2], [5, 4, 3, 4, 1, 1, 5], [0, 2, 0, 2, 2, 1, 1, 2, 0, 1, 2, 1, 2, 2, 1, 0, 0, 0], [1, 3, 2, 3, 2, 1, 2, 3, 0, 1, 3, 3, 0, 2, 1, 3, 0, 2, 2, 3, 2, 2, 1, 0, 2, 0, 0, 1, 0], [2, 21, 19, 22, 2, 4, 18], [21, 7, 11, 7, 5, 10], [2, 8, 5, 6, 5, 0, 7, 8, 1], [16, 12, 0, 6, 8, 18, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 19, 19, 5, 14, 3, 8, 0, 0, 7, 6, 9, 6, 2, 1, 0, 1, 1, 71, 71, 69, 5, 246, 68, 56, 37, 34, 26, 29, 3, 98, 25, 7, 18, 29, 7, 6, 9, 7], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile int(2.0) \\l int(1.0):{:\\nres0 = True\\nres0 = i1 \\le ( i2 * i1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = min(i2, len(s2))\\nloopBreak% = 0\\nfor in2 in (\"\"v\"\".capitalize() + ((\"\"-\"\" + \"\"2\"\"[( int(3.0) - max(( len(getCharFromString(in0.lstrip(\"\")\"\".rstrip(s0)).rstrip(in1), i0)[i0:].strip(\"\"8\"\")) - int(79.0) ), saveOrd(getCharFromString(saveChr(int(3.0)), mod(max(mod(int(9.0),i2), abs(mod(saveOrd(\"\"h\"\"),max(i2, int(2.0))))),min(( ( i2 + i0 ) - int(7.0) ), mod(mod(i1,i1),min(mod(i2,int(5.0)), int(4.0)))))))) ):divInt(mod(divInt(i0,( ( abs(i2) + mod(int(9.0),int(7.0)) ) - max(( int(7.0) - divInt(mod(int(9.0),( i2 * max(mod(saveOrd(\"\"5\"\"),mod(min(int(5.0), int(3.0)),len(s0.capitalize()))), int(2.0)) )),i0) ), max(i0, ( i2 * i1 ))) )),i2),i2)]) + \"\"\"\")):{:\\nif \"\"Cl\"\" != (in0.rstrip() + (saveChr(( abs(( i0 - i2 )) + mod(mod(i1,max(int(1.0), i2)),max(( abs(saveOrd(\"\"#\"\")) * min(saveOrd(\"\"%\"\"), i2) ), int(3.0))) )) + s0)):{:\\nloopBreak% = 0\\nfor s1 in \"\"V\"\".capitalize():{:\\nb1 = getCharFromString(\"\"6\"\"[len(s1):i1], int(8.0)) == s1[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = abs(i0) \\g int(4.0)\\ni1 += mod(divInt(mod(i0,int(7.0)),int(3.0)),( int(6.0) * int(3.0) ))\\n:}\\nres0 = ( max(len(in1), ( ( len(\"\"h\"\"[int(3.0):]) - i1 ) - int(4.0) )) - min(len(\"\"/\"\".rstrip().capitalize()[:divInt(mod(( int(4.0) * min(mod(int(1.0),saveOrd(\"\"T\"\".strip(s2).capitalize())), i1) ),len(getCharFromString(\"\"5\"\"[divInt(int(9.0),int(7.0)):int(7.0)][int(2.0):], len(in2[:( divInt(i2,int(6.0)) * min(i1, ( int(5.0) - int(2.0) )) )]))[:int(5.0)])),saveOrd(in1[:int(4.0)][abs(divInt(( divInt(int(1.0),i2) + int(2.0) ),divInt(i0,int(5.0)))):]))]), int(5.0)) ) \\l i1\\nin0 = (\"\"0\"\"[i2:] + (s0 + (\"\"&78\"\" + s0)))\\ni1 = i0\\nb0 = ( min(( i2 + i1 ), int(188.0)) + ( int(4.0) * int(08.0) ) ) \\g i0\\ni1 -= int(2255161.0)\\ni0 *= abs(divInt(max(i2, int(8.0)),i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in \"\"fW\"\"[int(6.0):].capitalize():{:\\ns2 = getCharFromString(getCharFromString((\"\"1\"\".capitalize() + getCharFromString(s1[:i0], ( int(7.0) - ( min(mod(divInt(i0,min(i0, i2)),min(i2, int(5.0))), i1) - ( divInt(saveOrd(getCharFromString(\"\"C\"\", max(i1, ( int(7.0) + i0 )))),i2) * int(5.0) ) ) ))), ( mod(( ( i1 * i2 ) - i0 ),int(0.0)) * len(\"\"Ek\"\") )), ( int(372.0) - int(6.0) ))\\nb0 = len(in1[i0:int(21.0)][( ( i1 * divInt(max(i2, len(s0[i0:min(int(9.0), len(s1))].capitalize())),len(in0)) ) - int(4.0) ):len((in1 + \"\"S\"\"))]) \\ge max(i2, divInt(i1,i1))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1, 3], [], [0, 2, 0], [], [4], [3, 0], [1], [], [], [1], [0], [2], [], [1, 0], [], [], [], [], [2], [0, 0, 0, 0, 1], [], [4, 1], [1, 1], [], [], [0, 0, 0, 2, 3], [1, 25, 10], [], [1], [0]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 3, 0, 1, 2, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 2, 1, 0, 0, 5, 3, 0, 1, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( saveChr(int(0.0)).startswith(\"\"BZK1\"\") or res0 )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"7\"\":{:\\nin2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [2], [0], [2], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [6, 4, 9, 6, 9, 9, 0, 2, 0, 0], [2, 2, 0, 1, 2], [], [1, 1, 2, 2, 0, 0, 2, 2, 1, 0, 2, 1, 0, 3, 3, 2, 1, 0], [0, 0, 0, 1, 0, 1], [1, 4], [0, 2, 1, 0], [1, 1], [5, 1, 3], [0, 1], [], [2, 3, 1, 0, 2, 0, 0], [], [], [0, 0], [3, 2], [], [], [6], [15]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 5, 0, 18, 6, 2, 4, 2, 3, 2, 0, 7, 0, 0, 2, 2, 0, 0, 1, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = (\"\",6\"\" + in2)[int(6.0):int(4.0)] == s1[( ( i2 + i2 ) * ( mod(int(9.0),i0) - ( int(699020.0) + i1 ) ) ):max(saveOrd(in0), mod(int(0.0),i2))]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0, 0, 0, 2, 0, 1, 2], [0, 0], [1, 5, 3], [3, 3, 1, 3, 3, 0, 3], [1, 0, 1, 1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 6, 1, 1, 7, 7, 9, 8, 5, 4, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 2, 2, 1, 3, 0, 2, 2, 2, 1, 0, 0, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 1, 2, 2, 1, 0, 2, 1, 0, 1, 3, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 3, 5], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 1], [17], [21], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 2, 12, 2, 3, 7, 5, 1, 1, 14, 14, 12, 0, 51, 15, 10, 9, 6, 8, 2, 0, 17, 2, 0, 4, 2, 1, 1, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( ( len(s0[len(in2):]) != i1 or True ) and in1[int(0.0):] not in s1 ):{:\\nres0 = ( ( b2 or in0[abs(mod(i1,mod(( int(7.0) + min(i1, divInt(( ( int(5.0) + i1 ) * i2 ),len(s0[min(i2, ( ( divInt(int(6.0),i1) - ( max(int(1.0), i1) + int(1.0) ) ) * int(7.0) )):]))) ),i2))):divInt(divInt(int(7.0),abs(int(9.0))),max(i2, int(8.0)))].endswith(getCharFromString((\"\"R\"\" + saveChr(( ( int(5.0) - i0 ) - ( int(4.0) * i1 ) ))), int(4.0))) ) or ( len(in0) \\l int(8.0) and \"\"v\"\" != in2 ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 9, 2, 5, 3, 6, 7, 5, 6, 6, 5, 1, 8, 4, 1, 2, 3, 4, 7, 0, 4], [0, 2, 1, 1, 0, 2, 1, 2, 1, 2, 1, 1, 1, 2, 2, 1, 0, 1, 2, 1, 2, 1], [], [1, 0, 3, 3, 1, 3, 1, 1, 0, 2, 1, 3, 3, 0, 2, 3, 0, 2, 0, 2, 3, 0, 2, 2, 2, 3, 2, 3, 2, 3, 0, 1, 1, 3, 2, 3, 1, 3, 1, 2, 2, 0, 1, 2, 1, 3, 2, 2, 1, 0, 3, 2, 2, 0, 2, 0, 1, 3, 2, 2, 0, 0, 0, 1, 3, 1, 3, 2, 1, 1, 3, 2, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 2, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [2, 0, 0, 2, 3, 0, 0, 2, 0, 0, 2, 2, 0, 1, 3, 3, 4, 1, 3], [0, 2, 0, 0, 2, 1, 2, 0, 0, 2, 1, 2, 2, 1, 2], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [4, 2, 5, 2], [1, 1, 1], [], [4, 4, 0, 2, 4, 3, 2, 4, 4, 4, 2, 3, 4, 4, 4, 1, 4, 4, 0, 1, 0, 1], [2, 3, 2, 1, 2, 1, 2, 1, 0, 3, 2], [4, 2], [0, 1, 2], [3, 1, 0], [23], [23], [], [16]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 21, 22, 0, 87, 28, 19, 15, 13, 4, 3, 0, 22, 11, 2, 3, 3, 1, 1, 0, 1], "tree_depth": 68, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s2.rstrip((saveChr(int(692.0))[:i0] + saveChr(abs(min(int(5.0), min(int(3.0), int(6.0))))).capitalize()).capitalize()[i2:( int(75.0) + abs(len((saveChr(i1).capitalize() + getCharFromString(\"\"-\"\", ( min(i1, ( i0 * divInt(min(i2, mod(( ( abs(( min(mod(min(i1, int(6.0)),int(6.0)), abs(mod(abs(int(5.0)),min(int(1.0), ( ( i2 + int(8.0) ) + ( int(4.0) * max(( mod(int(1.0),i1) - len(in2.capitalize().strip()) ), ( ( i2 * mod(i1,int(2.0)) ) + len(\"\"x\"\") )) ) ))))) + ( divInt(i1,i1) * i2 ) )) - int(3.0) ) * saveOrd(s2) ),int(4.0))),max(divInt(int(7.0),int(0.0)), len(\"\"X\"\"))) )) * mod(mod(i2,( i1 - divInt(i0,i1) )),i2) )))[( i1 * divInt(mod(i2,i1),int(4.0)) ):])) )]).capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 7, 6, 3, 1, 2, 5, 8, 6, 7], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 1, 2, 3, 0, 2, 2, 2, 3, 0, 1, 3, 1, 3, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 1, 2, 1, 3, 2, 3, 2, 1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [2, 3, 0, 0, 3, 0, 1, 2, 1, 3, 0, 4, 4, 2, 0, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4, 2, 4, 4], [1, 1, 1, 1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 3, 0, 4, 0, 3, 3, 4, 4, 4, 2, 2, 4, 1, 2, 2, 4, 2, 1, 0], [2, 1, 3, 2, 0, 0, 3, 0, 3], [1, 0, 0], [2, 2, 0, 0, 1, 2, 2, 2, 0, 0], [0, 3, 3, 0], [17, 1], [], [], [20, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 28, 28, 20, 0, 87, 23, 17, 12, 11, 10, 4, 1, 36, 9, 3, 10, 4, 2, 0, 0, 2], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1[min(divInt(i1,mod(i2,int(0.0))), ( int(7.0) + int(5.0) )):i2][i0:])):]:{:\\nloopBreak% = 0\\nwhile in1 not in in0[:divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( len(saveChr(divInt(min(i1, ( max(int(6.0), i2) * int(1.0) )),int(7.0)))) - i0 ) ), i0),mod(int(7.0),abs(int(9.0)))))].capitalize()[max(i2, divInt(( ( int(8.0) + int(5.0) ) * ( int(0.0) - i2 ) ),int(4.0))):mod(len((\"\"R\"\" + s0.rstrip())),int(8.0))]:{:\\nres0 = ( mod(min(i1, ( ( divInt(saveOrd(\"\";\"\"),i1) - int(59.0) ) * saveOrd(in1) )),int(9.0)) != abs(i1) or ( (s2 + in1.capitalize()).endswith(((getCharFromString(getCharFromString(getCharFromString(\"\"]\"\", i2)[i2:][int(2.0):].lstrip(), int(2.0)), int(7.0)) + \"\"B\"\"[i1:min(i2, int(6.0))].lstrip()[int(3.0):( int(1.0) + max(( max(( int(2.0) + int(5.0) ), int(8.0)) - i2 ), int(6.0)) )][int(7.0):]) + in1)) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [2], [1, 0], [], [], [], [], [2], [5], [2, 2], [0], [1, 2], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 5, 9, 5, 7, 7, 9, 7, 6, 4, 5, 9, 2, 1, 1, 7, 6, 9, 3, 2, 3, 6, 0, 8, 8, 2, 7, 9, 9], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 2, 2], [1], [0, 2, 2, 2, 3, 0, 3, 2, 2, 3, 2, 0, 1, 2, 3, 0, 0, 2, 2, 0, 2, 0, 2, 1, 3, 2, 0, 3, 2, 0, 0, 2, 3, 2, 2, 3, 2, 0, 2, 1, 3, 1, 1, 0, 1, 0, 2, 2, 1, 0, 1, 0, 2, 0, 0, 2, 2, 1, 2, 1, 3, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 1, 2, 3, 0, 0, 1, 0, 3, 3, 0, 1, 3, 0, 3, 3, 2, 2, 1, 1, 1, 1, 0, 3, 2, 1, 1, 3, 0, 3], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 2, 1, 2, 1, 2, 0, 1, 0, 2, 2, 0, 2, 2, 2, 4, 4, 3], [0, 2, 1, 1, 1, 0, 0, 0, 1, 2, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1], [5, 1, 2, 4, 5, 3, 3, 5, 1], [1, 1, 1], [], [0, 2, 0, 0, 3, 4, 3, 3, 2, 3, 4, 4, 4, 4, 2, 2, 0, 3, 3, 3, 2, 2, 4, 2, 2, 4, 4, 0, 1, 0, 0, 3, 1, 1, 0, 0], [0, 1, 1, 1, 3, 0, 1, 2], [5], [0, 0, 0, 2, 2, 0, 0, 1], [1, 0, 3], [12], [19], [], [11]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 0, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 30, 30, 28, 1, 104, 30, 19, 12, 19, 9, 3, 0, 36, 8, 1, 8, 3, 1, 1, 0, 1], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\nloopBreak% = 0\\nwhile in2 not in s1[divInt(( ( max(i2, min(( ( abs(divInt(i0,int(4.0))) * ( max(i1, i2) - mod(mod(i1,( i2 - divInt(int(8.0),abs(( i0 - max(divInt(i0,i0), ( abs(mod(divInt(min(mod(i0,mod(int(5.0),max(int(9.0), int(5.0)))), i0),int(7.0)),i1)) + mod(mod(int(7.0),i2),int(9.0)) )) ))) )),i2) ) ) + ( i0 + i1 ) ), mod(( int(7.0) - divInt(int(6.0),min(i0, i0)) ),int(4.0)))) * int(5.0) ) + int(9.0) ),int(2.0)):int(1.0)]:{:\\nb2 = s2 == (getCharFromString((((saveChr(i0) + saveChr(int(17.0)))[int(6.0):divInt(mod(int(9.0),int(3.0)),int(23.0))] + saveChr(( abs(i0) - i2 ))) + in1[int(6.0):][i2:abs(min(i1, int(0.0)))].strip((((getCharFromString(saveChr(abs(i0))[:abs(abs(divInt(mod(int(8.0),int(8.0)),int(2.0))))][int(7.0):i2], saveOrd(in2.capitalize()))[mod(int(9.0),int(9.0)):saveOrd(\"\"t\"\")][i2:] + in0) + in0) + (\"\"M\"\" + \"\"(\"\")))), len(in2)) + s1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [], [2], [], [5], [0], [], [], [], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 4, 3, 8, 0, 4, 3, 4, 4, 8, 1, 5, 1, 5, 1, 7, 8, 6, 8, 5, 5, 7, 1], [1, 2, 0, 2, 2, 1, 1, 0, 0, 1, 0, 0, 1, 1], [1], [2, 2, 3, 3, 2, 1, 0, 3, 2, 3, 2, 2, 2, 0, 3, 2, 3, 2, 3, 0, 1, 3, 3, 2, 3, 2, 1, 1, 0, 0, 3, 1, 1, 0, 3, 0, 3, 1, 1, 1, 2, 2, 1, 2, 1, 3, 0, 0, 3, 3, 3, 3, 3, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 0, 3, 0, 3, 3, 1, 2, 1, 1, 3, 1, 2, 2, 3, 1, 0, 0, 3, 0, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [2, 2, 2, 0, 2, 0, 0, 0, 4, 2, 3, 4, 2, 2, 4, 1, 3, 0, 1, 2, 3, 2, 2, 2, 2, 0, 4, 1, 4, 2, 4], [0, 0, 0, 0, 2, 1, 0, 2], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 2, 3, 2, 4, 2], [1, 1, 1], [], [0, 2, 2, 0, 2, 4, 4, 2, 4, 2, 2, 2, 4, 2, 1, 4, 0, 1, 2, 0, 1, 0, 0], [2, 2, 2, 1, 1], [], [1, 2, 2, 1, 0, 1, 2, 0, 2], [2, 0, 1], [20], [1], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 24, 24, 14, 0, 84, 20, 31, 8, 12, 6, 3, 0, 23, 5, 0, 9, 3, 1, 1, 1, 0], "tree_depth": 66, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s1.endswith(s2[divInt(mod(abs(abs(divInt(int(6.0),i1))),abs(( min(divInt(mod(divInt(i2,abs(divInt(min(( min(i0, int(643804.0)) + min(saveOrd(saveChr(divInt(abs(( int(3.0) + int(4.0) )),i2))[i2:][:len(\"\"2\"\"[int(4.0):int(8.0)])][i1:saveOrd(saveChr(i1))].capitalize()[:abs(int(1.0))].capitalize().capitalize()[int(5.0):]), int(1.0)) ), ( ( int(5.0) + ( int(1.0) + abs(i0) ) ) * i0 )),saveOrd(in0)))),max(len(\"\"U\"\"), min(max(int(7.0), abs(len(s2[divInt(abs(mod(abs(abs(divInt(abs(i1),min(i0, saveOrd(\"\"b\"\"))))),max(int(8.0), mod(int(6.0),int(8.0))))),saveOrd(in1)):]))), int(5.0)))),( ( abs(int(5.0)) - i0 ) + i1 )), saveOrd(s2)) * i1 ))),int(7.0)):][:int(1.0)])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 1], [0], [1, 0], [], [], [1], [], [1], [0, 1], [], [2, 4, 1], [2], [], [2], [0, 3], [25], [], [], [10]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 1, 2, 0, 3, 1, 0, 1, 2, 1, 0, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(3.0)\\ns1 = \"\"Z\"\\\\\"\"\".capitalize()[i1:]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1], [1, 2, 2, 2, 1, 0, 2, 2, 0, 0, 0, 1, 1], [2, 0, 2, 2, 1], [1, 1, 1, 2, 1, 2, 2, 0], [0], [0, 0, 0, 0], [], [], [1], [2], [0, 2, 2, 0, 1, 2, 2], [0], [0, 5, 3, 1], [1, 3], [0], [1], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [7, 3, 2, 4, 2, 1, 1, 4, 5, 8, 6, 6, 7, 4, 9, 1, 6, 8, 1, 2, 0, 9, 7, 9, 5, 5, 1, 9, 2, 1, 9, 4, 3, 1, 2, 4, 5], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 1, 1, 2, 1, 0, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 1, 2, 2, 2], [1, 0, 0, 0], [0, 1, 3, 2, 3, 0, 0, 0, 3, 3, 3, 0, 0, 2, 3, 2, 3, 3, 1, 1, 3, 2, 1, 3, 3, 3, 2, 2, 2, 2, 0, 2, 3, 3, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 0, 0, 2, 1, 3, 0, 1, 3, 0, 1, 2, 1, 0, 0, 0, 0, 3, 1, 1, 2, 3, 0, 0, 3, 3, 3, 2, 2, 0, 2, 1, 3, 1, 1, 1, 0, 2, 2, 2, 1, 1, 3, 0, 1, 1, 0, 2, 0, 1, 3, 2, 3, 1, 0, 3, 1, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [4, 3, 4, 1, 1, 3, 0, 2, 1, 0, 2, 2, 1, 0, 4, 4, 1, 3, 2, 3, 1, 4, 4, 3, 0, 3, 3, 2, 1, 0], [0, 1, 2, 0, 2, 1, 2, 2, 0, 0, 2, 2], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1], [2, 5, 4, 0, 1, 1, 5, 4, 4, 1, 1, 4, 5, 5, 2], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1], [0], [1, 4, 1, 2, 2, 2, 4, 4, 2, 4, 2, 4, 1, 2, 2, 2, 2, 4, 2, 4, 4, 1, 2, 0, 2, 0, 1, 0, 0, 1, 3, 0, 0, 0, 2, 1, 4, 1, 0, 3, 0, 3, 4, 3, 3, 1, 0, 1, 3, 1, 1, 4, 0, 3, 4, 1, 2, 1, 4, 2, 1, 2, 1, 4, 1], [1, 1, 1, 1, 3, 3, 0, 1, 1, 3, 3, 0, 0, 2], [2, 3, 0, 1], [2, 0, 1, 0, 1, 1, 1, 2, 1, 1, 2, 0, 1, 2, 1, 0, 2, 2], [1, 1, 3, 0, 0, 0, 1, 1, 0, 3, 0, 2, 1, 2, 2, 1, 2, 3, 1, 0, 2, 3, 2], [22, 21, 4, 15, 24, 3], [16, 1, 1, 1, 17, 20, 17, 2], [3, 9, 2, 6, 3, 1, 8], [29, 5, 20, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 13, 13, 5, 8, 1, 4, 0, 0, 1, 1, 7, 1, 4, 2, 1, 1, 1, 29, 29, 33, 4, 104, 22, 28, 12, 11, 15, 23, 1, 63, 13, 4, 16, 23, 6, 7, 6, 4], "tree_depth": 85, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nfor s2 in \"\"qb\"\":{:\\nloopBreak% = 0\\nwhile saveChr(int(73.0)) in \"\"^\"\":{:\\ni2 = saveOrd(saveChr(mod(len(saveChr(i0)),i1))[:i2][saveOrd(saveChr(max(max(i1, i2), ( len(\"\"W\"\".strip()[:( min(abs(int(2.0)), int(4.0)) - max(divInt(int(2.0),min(abs(abs(divInt(mod(( mod(i0,mod(max(min(int(1.0), i0), i0),i1)) * ( int(1.0) + saveOrd(getCharFromString(saveChr(divInt(saveOrd(\"\"V\"\"),i1)), i1)[:i2].lstrip(in2[( int(4.0) * max(i1, int(5.0)) ):])[:len(in1[i0:int(8.0)])][( int(6.0) - i1 ):][:i1][:i0]) ) ),i0),abs(int(6.0))))), int(7.0))), ( len(\"\"Eb\"\") * i2 )) )]) * i0 )))[max(saveOrd(s0), saveOrd(s1)):( divInt(i0,divInt(int(4.0),len(\"\"b\"\"))) + int(9.0) )]):int(1.0)][int(6.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile (s1 + in2).endswith(in1):{:\\nif ( divInt(( ( int(81.0) + int(2.0) ) * min(i0, int(0.0)) ),int(9.0)) == i0 and \"\"P\"\"[:( i1 * int(7.0) )] != saveChr(len(\"\"\"Y\"\")) ):{:\\nin1 = s1\\ni1 = mod(len((s1 + (((\"\"3\"\" + in1) + \"\"r\"\").lstrip() + (\"\"92\"\" + \"\"u\"\")))),int(9.0))\\nin2 = in2.rstrip()\\n:}\\ns2 = (getCharFromString(\"\"6\"\", i2) + \"\";\"\"[abs(int(5.0)):])\\nb1 = getCharFromString(\"\"rD3\"\"[:i2], int(51.0)) not in \"\"-1\"\"[int(92.0):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [14], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 12, 0, 34, 9, 8, 4, 5, 6, 1, 1, 11, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[len(in0):] not in getCharFromString(\"\"O\"\"[i0:abs(min(mod(i2,int(0.0)), divInt(i2,len(s0))))], i0)[( i2 + divInt(int(7.0),i2) ):( min(( i1 + ( i2 + divInt(int(5.0),i0) ) ), divInt(max(int(7.0), i0),min(int(2.0), i0))) - i1 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 2, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 3, 2, 1, 0, 2, 2, 3, 3, 1, 0, 2, 2, 2, 0, 3, 3, 2, 1, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 2, 1, 1, 1, 3, 2, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 1], [5, 5, 4, 4, 3, 0, 4, 5, 5], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0], [1, 0], [1, 2, 0, 0, 1], [3, 2, 2, 1], [17], [14], [3, 3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 10, 0, 52, 16, 13, 7, 9, 9, 4, 1, 17, 4, 1, 3, 4, 0, 1, 2, 1], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in getCharFromString(saveChr(mod(int(0.0),max(mod(i0,min(( int(3.0) + i2 ), mod(( len(s0[abs(int(5.0)):i2]) + divInt(( ( i0 * max(max(divInt(int(7.0),i1), divInt(max(len((\"\";\"\" + getCharFromString(in1, i2)).rstrip()), int(2.0)),int(1.0))), i1) ) - i2 ),mod(int(7.0),abs(int(7.0)))) ),abs(i2)))), divInt(( ( int(9.0) + int(8.0) ) * ( int(5.0) - i0 ) ),int(0.0))))), mod(len(\"\"33o\"\"),int(4.0)))\\nin2 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [2, 0], [], [0], [], [], [3], [], [2], [], [4], [], [], [], [], [], [], [2], [], [0], [], [], [], [], [1, 1, 5], [0, 0, 0, 0, 0, 0, 1, 1], [], [0, 1, 4, 3, 0, 1], [0], [], [], [3, 2, 2, 1, 2, 2, 1, 2], [], [25, 23], [2, 3, 6, 1, 6], [23]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 8, 0, 6, 1, 0, 0, 8, 0, 2, 5, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s1\\nres0 = \"\">23z61x\"\".startswith(getCharFromString((in2 + \"\"6\"\"), i2))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [2], [2], [], [0], [], [], [], [], [2], [], [4], [], [], [], [], [1, 0, 0, 0, 1, 0, 1, 0, 1], [3, 5, 6, 8, 9, 0, 9, 0, 9], [1, 1, 1], [], [2, 0, 3, 2, 1, 1, 2, 0, 3, 0, 1, 1], [1, 1, 1], [1, 0], [], [0, 0, 0], [5, 2, 5], [0, 1, 0, 0, 1], [], [0, 2, 3, 1, 0, 4, 3, 1, 4], [3, 1], [0], [1], [0, 3, 1, 0, 3], [10, 1], [14], [], [8, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 3, 0, 12, 3, 2, 0, 3, 3, 5, 0, 9, 2, 1, 1, 5, 2, 1, 0, 2], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2.startswith((\"\"K%\"\" + s2)[:divInt(i1,max(divInt(int(3.0),int(5689.0)), divInt(i1,min(i1, int(09.0)))))]):{:\\nin2 = (\"\"oB<\"\" + saveChr(int(09.0))).lstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1], [0, 1, 1], [3, 3, 2, 2, 0, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [1, 2, 1, 2, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 1, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [0, 0, 1, 0, 1], [0, 2], [17], [], [8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 49, 15, 9, 7, 8, 4, 2, 1, 14, 4, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):saveOrd(\"\"R\"\"[mod(mod(i0,int(0.0)),i2):int(7.0)])]:{:\\nres0 = saveChr(i2)[:int(5.0)].capitalize() == in1[abs(i0):( divInt(divInt(int(7.0),i1),divInt(min(( i2 - ( len((\"\"8\"\" + saveChr(divInt(min(i1, ( max(int(6.0), i2) * int(1.0) )),int(7.0)))).rstrip()) - i0 ) ), i0),mod(int(7.0),abs(int(9.0))))) * max(i1, divInt(( ( int(8.0) + int(5.0) ) - ( int(0.0) - i1 ) ),int(4.0))) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [0], [0], [0, 0], [], [1], [], [0], [], [0, 1, 1], [0, 3, 5], [1, 2], [], [1, 1, 0, 0], [], [], [], [], [3, 5], [0, 0, 0, 1], [0], [2, 2, 2, 2, 4, 1, 0], [3], [4], [1, 2, 1, 1], [0, 3, 2, 2], [24], [], [5, 9], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 0, 4, 0, 0, 0, 0, 2, 4, 0, 7, 1, 1, 4, 4, 1, 0, 2, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = \"\"Y@59\"\".rstrip(in2)[:int(03.0)][:int(5.0)][i1:][:i2]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0], [4], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 0, 1, 1, 1], [3, 4, 6, 7, 5, 4, 9, 0], [1, 1, 1], [1], [2, 0, 1, 2, 0, 3, 2, 0, 2, 2, 3, 3, 1, 1, 1], [1, 1, 1, 0, 1], [1, 3, 3], [0], [1, 0, 1, 0], [2], [1], [], [2, 0, 1], [], [], [2], [3], [], [], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 3, 0, 15, 5, 3, 1, 4, 1, 1, 0, 3, 0, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = mod(i1,int(3.0)) \\le divInt(i1,max(mod(i1,( divInt(len(s2[len(\"\"&\"\"):]),int(46754.0)) + int(9.0) )), int(0.0)))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [2, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 8, 6, 6, 6, 5, 5, 8, 0], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 1, 1, 0, 2], [0, 1, 1], [3, 3, 0, 2, 3, 2, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 2, 2, 3, 2, 0, 3, 3, 2, 2, 0, 2, 3, 1, 0, 1, 1, 2, 3, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1, 3, 1, 1, 0, 1, 1, 1, 2, 2, 3, 0, 3, 1, 1, 1, 1, 1, 3, 0, 2, 2, 0, 2, 2, 2, 3, 0, 3, 0, 2, 0, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0, 1, 0, 2, 3, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 1, 2], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 16], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 27, 27, 16, 0, 84, 28, 17, 14, 14, 7, 2, 1, 16, 3, 1, 4, 2, 2, 0, 0, 0], "tree_depth": 69, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:mod(abs(( ( int(2.0) + mod(int(7.0),min(i2, ( mod(( int(5.0) + ( divInt(len(saveChr(( i2 * min(max(divInt(divInt(i0,( abs(int(7.0)) - i1 )),int(7.0)), int(1.0)), ( max(( int(7.0) + min(divInt(max(i2, mod(mod(mod(int(7.0),int(9.0)),( int(8.0) * i1 )),int(5.0))),int(0.0)), int(4.0)) ), min(int(8.0), int(59.0))) - i2 )) ))),int(9.0)) - int(2.0) ) ),int(2.0)) * mod(divInt(abs(i0),len((\"\"R\"\" + in1.rstrip()))),int(8.0)) ))) ) + int(6.0) )),int(6.0))], int(65.0))[int(580.0):max(i0, ( divInt(i0,( ( ( saveOrd(\"\"Q\"\") + i2 ) - abs(i1) ) - divInt(i1,i0) )) * i2 ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 2, 0, 2, 2, 1, 0, 2, 1, 0, 2, 1, 1], [2, 0, 2, 0, 1, 0], [2, 0, 2, 2, 0, 2, 1, 2], [0, 0, 0], [0, 0, 0, 0], [], [], [2, 2], [0, 2], [2, 2, 2, 1, 1], [0, 0], [2, 3, 1], [], [], [0], [0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 9, 4, 4, 7, 2, 7, 6, 2, 7, 0, 8, 0, 3, 5, 8, 5, 4, 0, 3, 0, 8, 5, 7, 8, 1, 7, 9, 8, 6, 5, 1, 8, 1, 2, 9, 7, 6, 9, 5, 4, 4, 2, 4, 0, 5, 4, 6, 0, 0, 4, 6], [2, 2, 2, 2, 1, 1, 2, 0, 2, 2, 2, 0, 0, 2, 0, 2, 2, 0, 2, 0, 1, 1, 0, 2, 0, 2, 2, 0, 2, 2, 2, 0, 1, 1, 2, 2, 1, 1, 2, 1, 1, 0, 2, 2, 2, 2, 1, 0, 2, 1, 2], [0], [3, 2, 0, 0, 3, 0, 3, 2, 3, 1, 0, 0, 1, 2, 2, 3, 1, 2, 3, 2, 2, 3, 0, 1, 2, 0, 3, 3, 2, 1, 0, 3, 3, 1, 0, 0, 0, 1, 2, 2, 0, 3, 2, 2, 2, 2, 1, 1, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0, 3, 1, 0, 3, 1, 1, 2, 3, 1, 2, 1, 0, 0, 1, 3, 3, 2, 1, 0, 3, 0, 3, 2, 3, 3, 3, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 2, 0, 3, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 0, 2, 0, 2, 0, 3, 2, 3, 1, 0, 1, 2, 2, 2, 2, 1, 1, 0, 3, 0, 2, 2, 3, 0, 3, 1, 0, 3, 2, 1, 2, 3, 2, 0, 1, 1, 1, 0, 1, 3, 3, 2, 2, 2, 0, 3, 2, 2, 0, 0, 1, 1, 3, 0, 0, 2, 1, 1, 1, 3, 3, 3, 3, 0, 1, 3, 2, 1, 0, 0, 0, 2, 3, 1, 1, 0, 1, 2, 3, 1, 2, 3, 0, 0, 3, 2, 0, 3, 3, 1], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], [0, 4, 0, 1, 3, 3, 1, 4, 3, 2, 4, 0, 1, 2, 3, 1, 2, 1, 3, 3, 4, 2, 1, 0, 4, 1, 1, 4, 0, 2, 0, 4, 4, 1, 4, 3, 4, 4, 1, 2, 2, 1, 2, 1, 3, 2, 2, 2, 2, 3], [0, 2, 0, 1, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 0, 1, 1, 2, 1, 1, 2, 1, 2, 2, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 1, 1, 0, 5, 2, 3, 3, 0, 5, 2, 5, 4, 3, 5, 1, 5, 0, 1, 1, 2, 1, 1, 1, 4, 3, 3, 1, 0, 4, 2], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0], [0, 3, 1, 3, 2, 0, 3, 0, 0, 4, 3, 4, 0, 4, 2, 1, 4, 2, 4, 0, 2, 0, 4, 1, 1, 1, 4, 4, 2, 0, 4, 1, 0, 3, 0, 3, 3, 3, 0, 0, 4, 1, 1, 2, 0, 4, 0, 4, 2, 1, 1, 1, 3, 4, 3, 3, 3, 1, 0, 1, 4, 4, 0, 2, 1, 3, 4, 4, 3, 1, 1, 2, 2, 3, 2, 2, 1, 0, 3, 1, 4, 2, 0, 3, 3, 4, 3, 1, 4, 1, 4, 2, 2, 0, 1, 1, 4, 2, 2, 1, 1, 0, 2, 1, 0, 2, 2, 0, 4, 2, 1, 1, 4, 0, 1, 1], [3, 1, 1, 2, 3, 3, 1, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 3, 0, 0, 3, 0, 3, 3], [4, 4, 1, 4, 4, 0, 3], [0, 1, 2, 0, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0], [2, 2, 3, 3, 3, 1, 1, 3, 0, 2, 2, 3, 0, 1, 3, 1, 2, 1, 3, 1, 0, 0, 0, 0, 1, 2, 0, 2, 0, 2, 2, 2], [24, 23, 13, 4, 14, 25, 14, 17], [4, 25, 1, 24, 17, 7, 4], [7, 6, 5, 2, 7, 5, 6, 7, 4, 4], [19, 6, 20, 16, 0, 19, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 14, 14, 6, 8, 3, 4, 0, 0, 2, 2, 5, 2, 3, 0, 0, 0, 1, 52, 52, 51, 1, 205, 56, 50, 27, 29, 31, 32, 3, 116, 24, 7, 21, 32, 8, 7, 10, 7], "tree_depth": 82, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\nloopBreak% = 0\\nwhile (\"\"7\"\" + (s1[min(divInt(i2,i2), saveOrd((s0 + in2))):i2] + (saveChr(min(mod(max(int(89.0), i2),i1), int(4.0))) + s2).rstrip(saveChr(divInt(mod(len(\"\"6\"\"[:int(4.0)]),( len(in0.rstrip(in0[divInt(( max(i1, int(7.0)) + ( i2 * saveOrd(\"\":\"\".rstrip()) ) ),len(\"\"#\"\")):mod(int(2.0),i0)])[abs(saveOrd(\"\";\"\")):].capitalize()) + int(7.0) )),i2))))) == saveChr(i2):{:\\nloopBreak% = 0\\nfor s0 in in2[:i2].capitalize():{:\\nb2 = \"\"ez\"\".capitalize() != s2\\nloopBreak% = 0\\nwhile (in2 + (((in1 + in0) + getCharFromString(\"\"-\"\", int(6.0))) + \"\"Y5\"\")) not in in2[divInt(mod(i0,min(mod(( ( ( int(2.0) - int(7.0) ) + i0 ) + divInt(int(0.0),i2) ),int(8.0)), i0)),divInt(i2,int(0.0))):]:{:\\nloopBreak% = 0\\nfor s1 in getCharFromString(in2, i2):{:\\ns0 = getCharFromString(\"\"2\"\"[:max(int(3.0), i0)], abs(int(5.0)))\\ns1 = \"\"\"\"\\nif int(8.0) \\l ( len(\"\"X\"\") - int(5.0) ):{:\\nb2 = ( int(4.0) - i2 ) == i0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = (saveChr(int(0.0)) + (((\"\"b\"\" + s2) + \"\":\"\") + saveChr(max(abs(( int(3.0) * i1 )), max(i1, len(saveChr(( len(s1) * saveOrd(\"\"y\"\"[:abs(i0)]) ))))))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s1 in ((\"\"7\"\" + \"\"r\"\").capitalize().capitalize() + (\"\"=h\"\"[int(0.0):][i2:] + s1)[:int(8.0)][i0:]):{:\\ni2 = i2\\nin1 = (\"\"N\"\" + in0[int(578.0):].rstrip(((getCharFromString((\"\"E\"\" + getCharFromString(\"\"O\"\", ( max(divInt(divInt(i0,min(( int(1.0) + ( ( ( int(7.0) + mod(int(9.0),mod(divInt(( divInt(int(8.0),int(6.0)) + saveOrd(in0[max(max(saveOrd(\"\"Z\"\"), i2), mod(i2,( i2 - min(divInt(abs(int(5.0)),i0), int(1.0)) ))):][mod(divInt(( mod(int(8.0),int(1.0)) + i1 ),min(i1, ( mod(saveOrd(\"\"e\"\"),i2) - saveOrd(getCharFromString(\"\"5\"\"[int(2.0):][i2:max(( int(9.0) - ( saveOrd(\"\"O\"\") * ( i1 - int(7.0) ) ) ), int(6.0))], int(9.0))) ))),i1):].rstrip(s1)) ),int(5.0)),len(\"\"6\"\"[saveOrd(s0):divInt(divInt(mod(i2,saveOrd(in1[( ( i1 - i1 ) * int(4.0) ):int(4.0)][max(i0, i2):divInt(int(2.0),int(4.0))])),int(0.0)),abs(abs(max(abs(i2), int(5.0)))))]))) ) - max(mod(int(4.0),i2), i2) ) * i1 ) ), ( len(\"\"R\"\"[int(6.0):int(0.0)].lstrip()) * i0 ))),int(0.0)), ( abs(int(4.0)) + ( abs(i2) + i1 ) )) + abs(mod(i2,abs(len(\"\"7\"\")))) ))), int(6.0)) + s2.lstrip(\"\"4\"\")) + \"\"4\"\")))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 0, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 1, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 3, 2, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 3, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 5, 4], [1, 0, 0, 1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 1], [0, 3, 3, 0], [17, 4], [], [], [20, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 11, 0, 52, 16, 9, 8, 8, 5, 4, 1, 16, 3, 1, 6, 4, 2, 0, 0, 2], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[min(int(0.0), int(7.0)):abs(mod(mod(int(5.0),( int(0.0) + len(s0) )),i0))]):][divInt(( divInt(int(2.0),i0) + ( len(getCharFromString(saveChr(( i2 * divInt(min(( int(1.0) - i0 ), divInt(max(int(7.0), i1),int(7.0))),int(9.0)) ))[:i2][:i1], mod(int(8.0),abs(int(5.0))))[max(i1, ( ( ( int(0.0) + int(4.0) ) * divInt(int(8.0),i0) ) - int(59.0) )):int(9.0)]) - i0 ) ),i1):]:{:\\nres0 = (\"\"R\"\" + in0.rstrip()) not in \"\";=E\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [0], [0], [0], [0], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [1, 1, 1, 1], [7, 7, 6, 4], [2, 2, 0, 2, 1, 0, 0, 2, 1, 0], [], [3, 3, 2, 3, 1, 2, 0, 0, 0, 3, 1, 0, 1, 2, 1, 2, 0, 0, 0, 2, 0, 0, 2, 0, 3], [0, 0, 1, 0, 1, 1], [1, 1, 3, 1, 4], [2, 0, 2], [0, 0, 1], [2, 2, 2, 4], [0, 0, 0, 1, 1], [0], [3, 3, 1, 2, 3, 4, 0, 4, 2, 2, 0, 4, 3, 4, 0, 1], [3, 1, 1, 1], [4], [2, 1, 0], [1, 1, 3, 0, 0], [22, 25], [3, 18], [], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 4, 4, 10, 0, 25, 6, 5, 3, 3, 4, 5, 1, 16, 4, 1, 3, 5, 2, 2, 0, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in ((\"\"ds.W\"\" + (s2.rstrip(saveChr(max(max(( len(s2[int(7.0):( i2 * i2 )][:i0]) + max(int(7.0), i2) ), int(6.0)), divInt(int(4.0),( i1 * i0 ))))) + saveChr(i0))[divInt(i2,i1):]) + (saveChr(mod(i0,saveOrd(in1))) + \"\"Z\"\")):{:\\nb0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [1, 0], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 0, 8, 8, 3, 0, 6, 4, 8, 2, 0, 7, 7, 7, 6, 3], [0, 0, 2, 0, 2, 2, 0, 2, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 2, 0, 2, 0, 0, 1, 1, 1, 2, 2, 2, 1, 0, 0], [0, 1, 1], [0, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 2, 1, 0, 0, 1, 3, 0, 0, 1, 0, 3, 1, 0, 2, 3, 2, 0, 3, 2, 2, 1, 2, 3, 2, 2, 1, 2, 0, 1, 0, 0, 3, 1, 3, 0, 2, 1, 1, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 2, 1, 0, 2, 3, 0, 3, 3, 0, 3, 0, 3, 3, 1, 3, 3, 2, 0, 1, 2, 1, 2, 3, 3, 3, 1, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 4, 4, 1, 1, 2, 0, 4, 4, 3], [0, 0, 2, 1, 0, 2, 1, 2, 2, 0, 0, 1, 0, 2, 2, 2, 0, 2, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4, 3, 0, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 3, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 2, 4, 0, 0, 4, 0, 1, 3, 0, 2, 0], [0, 1, 3, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0, 3, 3], [17], [], [], [20, 5]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 34, 34, 33, 0, 133, 39, 31, 19, 20, 11, 3, 0, 28, 5, 2, 6, 3, 1, 0, 0, 2], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[i0:] not in in2:{:\\nb1 = ( max(i0, mod(len((in1 + getCharFromString(in1[( i2 + int(0.0) ):( int(7.0) + abs(min(( divInt(divInt(int(5.0),i0),( len(saveChr(( i2 * min(max(divInt(int(7.0),i2), abs(( int(7.0) - int(1.0) ))), int(7.0)) ))) + int(7.0) )) * i0 ), i2)) )], divInt(int(9.0),max(divInt(max(i1, ( ( ( int(8.0) - int(5.0) ) * mod(int(0.0),i0) ) * int(4.0) )),min(i0, divInt(max(mod(mod(int(8.0),i0),mod(divInt(int(59.0),i1),i1)), int(9.0)),min(i1, i0)))), int(2.0))))[i1:min(int(2.0), i0)])[divInt(min(( i0 + min(divInt(mod(int(0.0),( min(divInt(( int(8.0) + ( i2 - int(8.0) ) ),i0), i2) + len((\"\"R\"\" + in0.rstrip())) )),int(3.0)), len(\"\";\"\")) ), i0),( int(0.0) * int(6.0) )):]),i0)) != ( i1 * ( int(4820.0) * i1 ) ) or ( s0.endswith(saveChr(( min(divInt(i1,( int(7.0) + i2 )), mod(min(i2, max(saveOrd(in1), i2)),saveOrd(in0))) * i1 ))[:max(max(int(7.0), abs(min(( i0 + int(7.0) ), mod(int(6.0),divInt(saveOrd(s0.lstrip()),saveOrd(\"\"\"\"\")))))), len((s0 + in1[int(3.0):i0])))]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 5, 1], [0, 1], [], [4, 0, 1], [3], [3], [], [1, 0], [24], [19], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 3, 1, 1, 0, 2, 1, 1, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2.lstrip(\"\"tY\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [0], [0], [], [], [0, 3], [], [0, 2, 0], [], [5], [3, 1], [0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [7, 7, 7, 6, 0, 3, 7, 7, 2, 4, 2], [2, 1, 2, 2, 0, 1], [], [3, 3, 2, 2, 1, 1, 1, 2, 3, 3, 3, 0, 1, 2, 0, 1, 1, 3, 0, 2, 3, 3, 3, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0], [0, 1, 3, 0, 0, 1, 2, 3, 0], [2, 2, 1, 0], [0], [3, 1], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [], [4, 3, 2, 2, 1, 4, 4, 2, 1, 1, 3, 3, 3, 0, 1, 1, 2, 0, 1], [2, 0, 2], [], [0, 2, 1, 0], [3, 3, 1, 0, 2, 1, 1, 1, 1, 0, 3], [2, 10], [8, 24, 18, 16, 11], [2], [29, 23, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 3, 0, 1, 2, 1, 1, 0, 11, 11, 6, 0, 30, 5, 9, 4, 1, 2, 11, 0, 19, 3, 0, 4, 11, 2, 5, 1, 3], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( (\"\"^\"\"[min(max(( divInt(int(7.0),int(7.0)) * int(7.0) ), ( len(getCharFromString(\"\">\"\"[:min(min(i2, int(6.0)), ( i1 * int(0.0) ))].capitalize(), int(3.0))) - max(i2, ( abs(len(\"\"i\"\")) + min(int(7.0), int(7.0)) )) )), i2):][i0:i1] + (((in0 + \"\"C\"\") + \"\"2y\"\") + s1[int(2.0):int(42.0)])).capitalize().endswith(\"\"sqlK-\"\") and False )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 0, 2, 0, 0, 2, 0, 1, 1], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 3, 3, 3, 1, 3, 2, 2, 0, 2, 0, 3, 1, 3, 3, 0, 0, 0, 2, 0, 2, 0, 1], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3, 2, 1, 3, 1, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4, 0], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [16], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 17, 17, 20, 0, 73, 21, 16, 10, 11, 8, 2, 1, 16, 2, 0, 4, 2, 1, 1, 0, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[i1:] not in in0:{:\\nres0 = ( i2 != int(0.0) or ( s0[max(mod(i2,int(7.0)), mod(int(5.0),abs(i0))):( ( ( min(i1, ( len(in1[divInt(i2,divInt(divInt(divInt(int(7.0),i1),mod(min(int(4.0), i2),int(1.0))),int(7.0))):i0]) + i0 )) + divInt(int(7.0),max(int(9.0), abs(i1))) ) * ( ( mod(int(8.0),int(5.0)) - mod(int(0.0),i2) ) + int(4.0) ) ) * max(i0, len(getCharFromString((\"\"R\"\" + saveChr(abs(max(int(8.0), len(s0))))), ( ( i2 - ( i0 - max(int(59.0), max(min(i0, i2), i0)) ) ) * ( i1 + mod(i1,int(9.0)) ) )))) )].endswith(\"\"q\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [], [1, 2, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [4, 7, 4, 5, 8, 9, 8, 2, 7, 7, 9, 9, 6, 4, 2, 3, 6, 9, 8, 1, 0, 1, 5, 1, 6], [1, 2, 2, 2, 1, 2, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0], [1, 2, 2, 0, 0, 3, 2, 2, 0, 2, 2, 2, 2, 0, 3, 0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 0, 2, 3, 2, 1, 1, 3, 3, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 1, 0, 3, 0, 1, 3, 1, 2, 2, 1, 0, 3, 3, 2, 1, 3, 1, 1, 2, 2, 3, 0, 3, 0, 3, 1, 2, 2, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0], [1, 4, 1, 0, 1, 1, 4, 0, 2, 3, 0, 3, 0], [2, 1, 1, 2, 2, 1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 1, 2, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [5, 0, 3, 0, 5], [0, 1], [], [4, 0, 3, 2, 1, 2, 0, 0, 0], [1], [], [2, 1], [3, 3], [], [], [], [6, 6]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 18, 2, 76, 27, 13, 18, 10, 5, 2, 0, 9, 1, 0, 2, 2, 0, 0, 0, 2], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= int(47.0)\\nin2 = saveChr(( ( i2 - i2 ) - max(( divInt(i2,divInt(( ( mod(i1,saveOrd(s0)) * i2 ) * i1 ),( mod(i1,( int(4.0) - int(5.0) )) + divInt(( ( int(8.0) * i0 ) + divInt(max(( int(9.0) * int(8.0) ), min(max(( int(2.0) + i0 ), mod(int(7.0),int(7.0))), ( int(9.0) + mod(int(9.0),int(6423.0)) ))),i0) ),max(i1, int(69.0))) ))) + saveOrd((\"\"##\"\"[int(8.0):] + in0[:( divInt(int(1.0),i0) + min(abs(( int(0.0) + len(s0) )), int(1.0)) )])) ), int(5.0)) ))\\ni0 = ( ( min(i0, len(in2)) - i1 ) * min(int(1.0), mod(( int(6.0) - i1 ),i1)) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0, 0, 1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 1], [21], [18, 14], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 4, 3, 1, 6, 0, 0, 2, 3, 1, 2, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(0.0):] not in \"\"Vso\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 2, 1, 1], [1, 0], [1, 1], [0], [], [], [], [], [], [2], [], [3], [], [], [], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 4, 8, 0, 9, 8, 4, 3, 3, 3, 4, 8, 9, 2, 5, 6, 0, 9, 6, 0, 1, 7, 8, 4, 2, 3, 8, 7, 6, 4, 1, 9, 9, 4, 7, 8, 9, 7, 9, 3, 7, 4, 5, 7, 3, 5, 7, 2, 8, 3, 6, 2, 0, 7, 6], [2, 1, 1, 0, 0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1, 2, 2, 0, 2, 2, 0, 1, 2, 2, 2, 2, 0, 2, 0, 2, 2, 1, 0, 0, 2, 2], [1, 0], [1, 0, 2, 0, 1, 0, 2, 3, 3, 3, 1, 0, 1, 2, 2, 1, 3, 3, 2, 3, 2, 1, 0, 2, 1, 2, 3, 3, 2, 3, 3, 2, 3, 2, 3, 1, 3, 3, 2, 2, 2, 3, 2, 0, 2, 3, 2, 0, 3, 2, 0, 0, 2, 1, 2, 0, 2, 0, 1, 1, 2, 1, 2, 1, 0, 0, 1, 0, 1, 3, 2, 1, 0, 0, 3, 3, 3, 0, 1, 2, 1, 1, 1, 3, 2, 1, 1, 2, 3, 2, 1, 3, 1, 3, 1, 3, 0, 3, 2, 0, 2, 1, 3, 2, 3, 3, 2, 0, 1, 2, 2, 2, 1, 1, 0, 3, 1, 3, 2, 2, 0, 0, 0, 2, 0, 0, 3, 2, 1, 3, 2, 2, 1, 0, 1, 2, 2, 1, 0, 1, 0, 3, 1, 1, 1, 2, 2, 2, 0, 0, 1, 0, 1, 3, 1, 0, 1, 0, 1, 3, 1, 3, 3, 2, 3, 3, 3, 1, 1, 1, 3, 1, 3, 3, 0, 1, 1, 0, 2, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0], [3, 0, 3, 2, 1, 0, 3, 2, 2, 2, 4, 4, 3, 2, 0, 3, 4, 1, 0, 1, 1, 3, 1, 4, 4, 2, 3, 0, 2, 2, 4, 3, 2, 0, 1, 3, 3, 2, 4, 0, 1, 3, 4, 1, 4], [0, 0, 2, 2, 1, 2, 1, 0, 1, 2, 2, 1, 2, 0, 0, 0, 1, 2, 2, 1, 1, 1, 2, 2, 0, 2, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [4, 5, 2, 0, 5, 4, 5, 3, 0, 3, 2, 4, 0, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0], [4, 4, 4, 3, 0, 4, 4, 3, 2, 0, 2, 1, 0, 4, 4, 2, 1, 2, 4, 2, 1, 4, 4, 2, 1, 1, 4, 1, 0, 4, 2, 2, 4, 4, 4, 2, 0, 4, 4, 0, 2, 3, 0, 2, 2, 3, 3, 0, 4, 3, 3, 0, 1, 0, 1, 3, 4, 2, 2, 4, 0, 2, 3, 1, 3, 3, 4, 2, 0, 1, 0, 1, 4, 1, 2, 2, 4, 2, 1, 0, 0], [0, 2, 3, 0, 3, 1, 0, 1, 1, 1, 3, 1, 0, 1, 2, 0, 2, 2, 1, 2, 2, 2, 0], [1, 3, 2], [2, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 1, 0, 2, 0, 0, 0, 2], [1, 3, 3, 2, 2, 2, 0, 1, 3, 0, 1, 1, 2, 1, 2, 3, 3, 2, 2, 2, 1], [7, 16], [16, 22, 15, 19, 21, 17], [3, 4, 2, 8, 2, 8, 6, 1], [21, 9, 31, 1, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 55, 55, 39, 2, 181, 48, 45, 28, 21, 16, 21, 1, 81, 23, 3, 19, 21, 2, 6, 8, 5], "tree_depth": 85, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif getCharFromString((in1 + getCharFromString((in2[int(0.0):] + \"\"q\"\"[i2:( i1 + int(4.0) )]).lstrip(s2), i1)).rstrip().capitalize(), divInt(len(saveChr(min(len(getCharFromString(\"\"<\"\"[int(8.0):i0], int(0.0))), ( mod(int(9.0),abs(max(( min(divInt(int(8.0),i0), ( int(4.0) + ( len(saveChr(abs(( abs(abs(mod(saveOrd(\"\"&\"\"[divInt(saveOrd(saveChr(int(3.0))),len(saveChr(abs(( ( ( min(divInt(i0,( len(\"\"3\"\"[( i2 * saveOrd(\"\"4\"\") ):( i1 * i0 )]) - mod(int(3.0),( i0 * ( i1 - int(3.0) ) )) )), int(4.0)) + divInt(int(8.0),divInt(int(9.0),i1)) ) - i2 ) * int(2.0) ))))):i0]),int(5.0)))) * max(divInt(int(6.0),i0), i2) )))[min(max(max(i2, int(0.0)), divInt(int(9.0),int(6.0))), int(0.0)):len(\"\"2\"\".strip())]) - ( int(1.0) * int(7.0) ) ) )) + divInt(max(divInt(int(8.0),saveOrd(s0)), int(4.0)),saveOrd(saveChr(int(2.0)))) ), abs(i1)))) + len(getCharFromString(saveChr(( i2 + ( int(3.0) - min(( abs(abs(divInt(i2,int(8.0)))) * divInt(( mod(int(7.0),int(6.0)) * i0 ),saveOrd(in2[:int(4.0)].capitalize())) ), len(getCharFromString(in1.capitalize(), ( divInt(i2,i2) - i0 )))) ) )), ( i1 - i2 ))[abs(divInt(int(1.0),min(( divInt(int(9.0),i2) - int(9.0) ), ( mod(int(4.0),i2) * int(7.0) )))):i2][:max(int(8.0), int(9.0))]) )))),int(7.0))) != (in2 + ((in0 + ((s0 + \"\"H\"\") + in0).capitalize()) + \"\"w`Q\"\")[:( divInt(( i0 * i2 ),int(937.0)) + i0 )][int(4.0):])[len((saveChr(int(57.0)) + s2.capitalize()[i2:int(3.0)][:i2])):int(5.0)]:{:\\nloopBreak% = 0\\nfor in1 in (\"\"pt8v2\\\\\\n`\"\" + ((s0[len(\"\"8\"\"):int(7.0)].capitalize() + in0) + \"\"6\"\"))[abs(saveOrd(\"\"1\"\".capitalize())):]:{:\\ni1 *= ( min(max(len(getCharFromString(\"\"r\"\"[int(2.0):], int(8.0))[int(3.0):saveOrd(in0)][int(6.0):max(saveOrd(in0), i0)]), int(2.0)), int(07.0)) - i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = ( int(6.0) + i2 )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 1, 2, 0, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1], [2, 1, 2, 2, 2, 1, 2, 2, 0, 2, 0, 0, 2, 1, 0, 1], [0, 0], [0, 0], [], [], [2, 1, 0, 2], [1, 5, 5], [1, 1, 2, 1, 2, 0], [0, 0, 0], [3, 2], [1], [], [1], [1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 8, 7, 6, 1, 1, 0, 2, 3, 4, 0, 3, 7, 1, 4, 5, 8, 2, 3, 3, 9, 0, 2, 7, 1, 0, 3, 7, 3, 5, 3, 9, 2, 9, 8, 9, 4, 7, 8, 5, 2, 0, 3, 8, 0, 0, 4, 4, 3, 9], [2, 1, 1, 2, 2, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 1, 2, 1, 1, 0, 1, 0, 1, 2, 0, 0, 1, 2, 0], [1, 0, 0, 0], [0, 2, 0, 0, 2, 0, 0, 1, 3, 0, 3, 2, 0, 1, 1, 3, 3, 0, 1, 2, 1, 2, 1, 1, 0, 3, 3, 0, 2, 1, 2, 1, 1, 0, 3, 3, 1, 0, 1, 0, 1, 0, 0, 2, 3, 1, 1, 1, 1, 2, 1, 2, 3, 2, 2, 0, 0, 2, 1, 1, 0, 2, 1, 3, 1, 3, 3, 0, 0, 1, 0, 3, 2, 0, 2, 1, 3, 2, 0, 1, 1, 1, 2, 0, 2, 3, 2, 1, 3, 2, 2, 3, 1, 1, 2, 0, 3, 1, 2, 1, 1, 0, 1, 2, 1, 0, 1, 3, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 4, 2, 1, 0, 0, 1, 4, 4, 2, 2, 4, 1, 4, 0, 0, 1, 4, 3, 3], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 2, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0], [0, 3, 0, 3, 1, 5, 3, 3, 0, 3, 0, 1, 1, 2, 1, 5, 2, 5, 1, 5, 4, 3, 5, 1], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0], [3, 1, 0, 0, 4, 4, 4, 2, 1, 0, 2, 2, 0, 1, 2, 0, 4, 4, 1, 2, 4, 4, 0, 1, 2, 2, 1, 4, 2, 3, 1, 3, 4, 2, 4, 0, 1, 2, 3, 1, 1, 0, 0, 2, 2, 0, 4, 0, 4, 2, 4, 0, 2, 1, 3, 0, 0, 4, 1], [3, 0, 3, 2, 0, 0, 2, 1, 3, 0, 0, 2, 2, 0], [1, 1, 1], [2, 0, 0, 2, 0, 2, 2, 1, 0, 0, 0, 2, 0, 2], [0, 1, 3, 3, 3, 3, 1, 2, 2, 0, 0, 3, 0, 2, 0, 0], [17, 0, 10, 11, 13, 15], [11, 5], [7, 5, 5], [27, 1, 2, 23, 23]], "fitness": 9223372036854775807, "mapping_values": [1, 20, 20, 4, 16, 2, 2, 0, 0, 4, 3, 6, 3, 2, 1, 0, 1, 2, 50, 50, 31, 4, 109, 25, 20, 17, 9, 24, 16, 2, 59, 14, 3, 14, 16, 6, 2, 3, 5], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (\"\"R\"\" + in0)\\ni2 += i1\\nloopBreak% = 0\\nfor s0 in in0:{:\\ns1 = getCharFromString(\"\"l\"\"[mod(i1,i2):].rstrip(), mod(i2,i1)).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in in0:{:\\nin0 = s0[int(08.0):min(i0, saveOrd(\"\"\\\\\\\\\"\"))][( i0 - int(76.0) ):int(11023.0)]\\nin0 = s0[abs(max(i0, int(4.0))):]\\ni0 = divInt(int(0.0),( int(3714.0) - int(5.0) ))\\ns1 = getCharFromString(\"\"\\\\\\n\"\", i1).capitalize()\\ns1 = getCharFromString(s2.capitalize(), min(min(i0, mod(int(8.0),( int(2.0) - int(3.0) ))), i0))[max(saveOrd(\"\"\\\\\\t>f7\"\"), int(3.0)):i2]\\nif int(902.0) \\g i1:{:\\nb2 = int(71.0) != i0\\n:}else:{:\\ns1 = \"\"5A\"\"[i0:][( saveOrd(saveChr(int(0.0))) - int(37.0) ):]\\nif (\"\"K\"\" + (getCharFromString(in2, int(3.0))[int(5.0):mod(int(3.0),divInt(abs(( ( i1 - i2 ) - ( int(9.0) - int(2.0) ) )),i1))].rstrip() + \"\">\"\"))[:divInt(int(9.0),abs(int(8.0)))] != (\"\"L\"\" + \"\"5\"\")[saveOrd(s2):max(i1, i0)]:{:\\nb1 = int(9.0) != i1\\nb0 = in2 == s1[saveOrd(getCharFromString(in2, divInt(i0,( int(4.0) - min(( i1 + int(7.0) ), int(8.0)) )))):][int(5.0):( i2 + ( min(divInt(int(2.0),max(( ( saveOrd(in1.capitalize()[int(0.0):int(3.0)].capitalize()) + ( i0 + len(\"\"N\"\"[int(8.0):]) ) ) + ( int(0.0) - int(0.0) ) ), i0)), int(4.0)) * ( int(4.0) - i1 ) ) )]\\nin0 = (in2 + s1)\\ni2 = int(3.0)\\nb2 = False\\n:}\\ni0 = len(getCharFromString(\"\"P\"\", int(9.0)))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1], [0], [0], [], [], [], [], [1], [], [], [], [], [], [], [1, 0, 1], [8, 5, 2], [2, 1, 0, 2], [0, 0], [0, 2, 0, 1], [0], [], [2], [0], [0], [1], [0], [1], [], [], [], [2], [], [16], [3], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 2, 4, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"3\"\":{:\\ni2 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = ( i2 * int(8.0) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1, 1], [2, 5, 8, 7, 7], [1, 1, 0, 1, 2], [], [1, 2, 2, 1, 2, 2, 2, 0, 3, 0, 2, 0, 0, 1, 2, 1, 0], [1, 1, 1, 0, 0, 1, 0], [4], [1, 0, 1], [1, 1, 0, 0], [5, 3], [1], [], [2, 2, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1], [], [0, 2], [1], [], [12], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 17, 7, 1, 3, 4, 2, 1, 0, 4, 0, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in0[int(2.0):][mod(mod(int(58.0),divInt(( ( i1 - saveOrd(\"\"m\"\") ) + i1 ),divInt(i0,i1))),int(7.0)):( int(7.0) - i2 )]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 1, 1, 0, 2, 0, 0, 2, 2, 0, 1, 0, 2, 1, 0, 1, 0, 0, 0, 2, 2, 1, 0, 2, 0], [0, 1, 1, 1, 2, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 2, 1, 0, 2, 2, 1, 2, 0, 2, 1], [0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [1, 1, 0, 3], [0, 4, 1, 0, 1], [1, 2, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 2, 2, 1, 0, 2], [0, 0, 0, 0, 0], [4, 4, 1, 0, 5, 3], [3, 2, 2, 1, 3, 2], [1, 0], [1], [0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 3, 6, 5, 2, 6, 9, 1, 7, 8, 3, 3, 8, 1, 7, 7, 4, 8, 5, 2, 1, 8, 3, 9, 4, 9, 0, 5, 6, 4, 6, 0, 9, 5, 4, 3, 0, 3, 8, 8, 8, 4, 8, 6, 4, 5, 3, 8, 7, 2, 7, 8, 5, 5, 5, 7, 1, 0, 7, 8, 2, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0, 2, 2, 0, 0, 2, 1, 0, 2, 2, 0, 2, 0, 1, 1, 2, 1, 0, 0, 1, 0, 1, 1, 0, 2, 2, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0], [2, 0, 1, 1, 2, 0, 3, 1, 0, 3, 1, 0, 2, 0, 1, 0, 1, 1, 0, 2, 0, 2, 3, 1, 0, 2, 0, 1, 1, 2, 0, 3, 3, 1, 3, 0, 1, 1, 1, 3, 3, 2, 2, 0, 2, 1, 0, 2, 0, 1, 3, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 1, 1, 3, 1, 0, 2, 2, 2, 3, 3, 2, 2, 1, 1, 3, 3, 1, 3, 2, 1, 2, 0, 3, 0, 0, 3, 1, 0, 0, 3, 3, 0, 0, 3, 2, 1, 1, 2, 2, 1, 0, 0, 2, 1, 2, 1, 1, 1, 3, 0, 2, 0, 1, 2, 0, 3, 2, 1, 3, 2, 0, 3, 1, 2, 0, 3, 0, 2, 2, 3, 3, 0, 2, 3, 2, 2, 2, 0, 1, 1, 0, 0, 1, 3, 3, 3, 0, 1, 3, 0, 1, 1, 0, 0, 2, 2, 2, 0, 1, 0, 3, 3, 3, 0, 1, 3, 3, 1, 1, 0, 2, 3, 2, 2, 1, 0, 2, 3, 0, 2, 3, 3, 1, 1, 0, 1, 0, 0, 2, 0, 2, 1, 1, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 3, 0, 0, 4, 2, 2, 4, 1, 3, 1, 2, 0, 3, 0, 4, 4, 1, 1, 3, 0, 4, 2, 3, 3, 3, 0, 0, 4, 3, 2, 1, 4, 4, 0, 2, 4, 4, 4, 0, 3], [0, 2, 0, 1, 1, 0, 0, 0, 2, 0, 1, 2, 2, 2, 1, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1, 2, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0], [2, 1, 1, 0, 2, 4, 1, 2, 0, 4, 0, 2, 2, 3, 2, 0, 5, 4, 1, 2, 4, 2, 3, 4, 5, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0], [0, 4, 4, 1, 4, 0, 3, 0, 3, 1, 0, 4, 2, 0, 4, 1, 0, 1, 1, 2, 4, 4, 1, 2, 4, 2, 4, 2, 2, 0, 4, 1, 0, 4, 4, 2, 0, 2, 0, 4, 1, 2, 1, 1, 2, 3, 0, 4, 1, 4, 2, 2, 1, 2, 0, 2, 0, 2, 1, 4, 1, 2, 2, 4, 0, 1, 0, 1, 2, 1, 2, 2, 0, 1, 4, 2, 4, 4, 4, 4, 1, 2, 2, 0, 4, 1, 2, 0, 2, 4, 4, 4, 0, 1], [3, 3, 2, 2, 0, 3, 0, 1, 3, 1, 2, 3, 3, 2, 1, 3, 1, 0, 2, 3, 2, 1, 3, 0, 3, 2], [2, 1, 1, 0, 4, 2, 0, 2, 3, 5], [0, 0, 1, 1, 2, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 0, 0, 2, 2, 0, 0, 1, 2, 0, 1], [1, 0, 2, 3, 3, 3, 3, 0, 2, 1, 1, 2, 1, 0, 1, 3, 3, 0, 3, 0, 0, 1, 2, 3, 3], [0, 5, 6, 11, 3, 1], [5, 1, 19, 10, 1, 23], [5, 5, 1, 3], [30, 22, 6, 4, 30, 10, 15, 27, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 25, 25, 8, 17, 2, 11, 0, 0, 4, 5, 17, 5, 6, 6, 2, 1, 5, 62, 62, 59, 8, 195, 48, 41, 28, 23, 26, 25, 2, 94, 26, 10, 25, 25, 6, 6, 4, 9], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s1:{:\\nb1 = mod(i0,int(03.0)) \\l int(6526.0)\\ni1 = mod(i0,min(int(9.0), i0))\\ni0 = len(\"\"f\"\".rstrip().strip())\\nif s1.capitalize().startswith((s0 + (\"\"A\"\" + s2))):{:\\ni1 += int(1.0)\\ni0 = i1\\nif ( divInt(i0,int(7.0)) \\le i1 or int(8.0) \\g int(3.0) ):{:\\nif i0 \\l divInt(i2,( min(int(3.0), i0) * ( i1 + int(8.0) ) )):{:\\ni2 = int(1.0)\\n:}else:{:\\nb1 = in1[( i2 - min(saveOrd(getCharFromString(\"\"5\"\", int(7.0))), abs(i1)) ):int(7.0)].capitalize().startswith(s1)\\n:}\\n:}else:{:\\ns2 = \"\"_\"\"\\nloopBreak% = 0\\nwhile \"\"=\"\" not in getCharFromString(\"\"#\"\", int(4.0)).rstrip()[int(8.0):abs(saveOrd(saveChr(( divInt(i1,( int(5.0) - i0 )) + ( i0 + int(2.0) ) ))[:max(int(1.0), mod(( int(8.0) + i0 ),( int(3.0) * int(9.0) )))]))]:{:\\ni0 += mod(int(4.0),int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = not not False\\ns0 = in1[int(0.0):len(saveChr(int(5.0)))][i2:].lstrip()[:mod(divInt(( max(abs(divInt(divInt(int(6.0),int(4.0)),min(len(\"\"!\"\"), int(6.0)))), min(( int(0.0) - ( i1 * saveOrd(s0) ) ), i1)) * i0 ),saveOrd(s2[:int(9.0)].rstrip(s2[:i2]).capitalize())),i2)]\\nin0 = \"\"F\"\".strip()\\n:}\\ni0 *= max(max(i0, i2), len(\"\"5\"\"[( int(5.0) - int(4.0) ):divInt(divInt(int(3.0),i1),i0)]))\\ns2 = \"\"b\"\"\\n:}\\nloopBreak% = 0\\nfor s0 in (in2 + \"\"t1k\"\".capitalize())[:( int(0.0) - ( int(388.0) - int(84.0) ) )]:{:\\nif ( saveChr(int(8.0)) in \"\"G\"\"[:min(i2, ( i2 + int(6.0) ))][mod(i0,saveOrd(in1[( int(4.0) + abs(divInt(i2,len(s1[int(5.0):mod(i0,len(\"\"b\"\"[:i1]))]))) ):( mod(len(\"\"_\"\".lstrip()),min(i1, divInt(min(mod(( ( i2 - int(3.0) ) * int(8.0) ),i1), i0),int(7.0)))) - saveOrd(saveChr(len(s2))[abs(i0):int(2.0)][max(i1, int(7.0)):int(8.0)]) )])):] and \"\"\"\\\\\"\"\".endswith(in1) ):{:\\nres0 = i0 \\g i1\\n:}\\ns2 = \"\"L,D\"\"\\nif not \"\"B\"\"[( divInt(( i1 - int(5.0) ),i0) - saveOrd(in0[saveOrd(\"\"x\"\"):min(i2, int(5.0))][abs(saveOrd(getCharFromString(saveChr(int(5.0)).capitalize().strip().capitalize()[int(7.0):i2], ( saveOrd(\"\"3\"\") - mod(( int(1.0) * i1 ),divInt(saveOrd(in1[i0:][:( min(len(\"\"\\\\\\\\\"\".lstrip(in2[int(0.0):int(7.0)])), i0) - int(8.0) )]),i1)) )))):]) ):] != getCharFromString(in1.capitalize().strip(\"\"-\"\"), i0)[:divInt(i1,( int(2.0) + int(0.0) ))]:{:\\ni0 = i0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 1, 1], [], [2, 2, 0], [], [0], [], [], [3], [], [2], [], [2], [], [], [], [], [1, 0, 1, 0, 1, 0, 0, 1], [2, 4, 1, 1, 1, 3, 6, 0], [0], [], [1, 1, 1, 1, 0], [], [], [], [], [5, 2, 0, 1, 4, 5], [1], [], [0, 0, 3, 1, 2, 3, 4, 0, 2, 0], [1], [], [0, 0], [0], [8], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 1, 0, 5, 0, 0, 0, 0, 6, 1, 0, 10, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\ns0 = s1\\nres0 = (\"\"I\"\" + (saveChr(int(2.0)) + in1)[int(41.0):int(11.0)]) == in2[int(360.0):i0]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 1, 1, 2, 1, 2, 1, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 3, 0, 1, 1, 2, 0, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 2, 2, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 1, 0, 1, 2, 1, 3], [1, 0, 2, 1, 0, 2, 0, 0, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 4, 3, 4], [1, 1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 0], [4, 2], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 10, 0, 40, 10, 10, 5, 5, 6, 2, 1, 16, 3, 1, 5, 2, 2, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nb1 = in1[:len(getCharFromString(in1[:i0], int(0.0))[saveOrd(saveChr(mod(i0,int(0.0)))):mod(int(5.0),min(i1, int(7.0)))][( divInt(int(2.0),i1) - divInt(max(( i2 + ( min(( int(1.0) * i1 ), divInt(max(abs(i2), int(7.0)),int(7.0))) - ( i1 + i0 ) ) ), int(9.0)),max(int(8.0), len((\"\"E\"\" + in0.rstrip())))) ):i0])] not in \"\"C\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 1, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 0, 3, 0, 0, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 2], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [7], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 8, 8, 11, 0, 35, 10, 6, 6, 4, 7, 2, 1, 16, 3, 0, 4, 2, 1, 1, 0, 0], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[int(0.0):] not in in0:{:\\nres0 = ( i0 != len(getCharFromString(s0[abs(mod(i2,int(2.0))):( int(7.0) + min(i2, ( mod(( int(7.0) + i1 ),divInt(len(saveChr(( i1 * ( divInt(( int(8.0) - i2 ),i1) + min(i2, i0) ) ))),int(1.0))) * int(7.0) )) )], i0)[i2:int(7.0)]) or ( (\"\"R\"\" + in1.capitalize()).endswith(\"\"h\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [1, 2, 1, 1], [1], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [3, 7, 7, 5, 9, 5, 3, 3, 1, 7, 4, 9], [2, 1, 0, 1, 0, 1, 1, 0, 0, 0, 2, 0], [1, 0], [3, 1, 0, 0, 2, 3, 1, 2, 0, 0, 3, 0, 0, 0, 0, 0, 3, 1, 3, 2, 1, 3, 1, 1, 0, 3, 3, 1], [1, 0, 1], [3, 4, 1, 1, 1, 1, 3, 4], [2, 2], [1, 0], [1, 3, 2, 2], [1, 0, 1, 1, 0, 1], [], [4, 0, 0, 4, 2, 4, 2, 4, 4, 2, 4, 4, 2, 4, 4, 1, 4, 0, 1, 3, 1, 1], [3, 1, 1, 0, 0, 0, 1, 3, 2, 3], [2, 5, 5], [2, 2, 0, 0], [0, 1, 2, 3, 1, 3], [18], [17, 24], [5], [18, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 12, 12, 12, 2, 28, 3, 8, 2, 2, 4, 6, 0, 22, 10, 3, 4, 6, 1, 2, 1, 2], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= len(s1.strip())\\nif in0 in saveChr(int(37.0)):{:\\ni1 = i0\\n:}\\ns2 = saveChr(i1)[mod(saveOrd(getCharFromString(getCharFromString(getCharFromString(saveChr(int(75953.0)), ( i0 * i1 ))[max(i1, i0):i0], i0), i2)[max(int(3.0), max(divInt(int(1.0),max(int(7.0), int(4.0))), i0)):]),len(\"\"S\"\".capitalize().strip(s2.strip(\"\"r5\"\"))[saveOrd((\"\"/\"\" + \"\"y&\"\")):int(9.0)])):]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 0, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 4, 8, 7, 9, 6], [1, 2, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 0, 1, 2, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 0, 1, 2, 3, 2, 2, 1, 2, 3, 1, 1, 3, 3, 0, 3, 0, 2, 3, 1, 2, 1, 1, 1, 0, 2, 0, 0, 3, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 4, 3, 1, 2, 3, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 2, 1], [1, 0, 0, 1, 1], [0], [2, 0, 0, 2, 4, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 0, 2, 4, 4, 4, 4, 2, 2, 2, 2, 0, 2, 4, 2, 2, 1, 2, 0], [3, 1, 3, 1, 2, 3, 3, 2, 2], [1, 0, 0, 1], [2, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 2, 2], [0, 0, 1, 3, 3], [17, 4], [17], [], [20, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 24, 24, 24, 1, 84, 23, 16, 10, 13, 9, 5, 1, 35, 9, 4, 14, 5, 2, 1, 0, 2], "tree_depth": 54, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i1):]:{:\\nres0 = saveChr(i2)[len(in1[:( i0 + int(0.0) )]):( int(7.0) + abs(int(5.0)) )][divInt(( divInt(int(7.0),i0) * ( min(( i1 - len((\"\"R\"\" + saveChr(min(divInt(i2,i1), ( i0 + int(7.0) )))).lstrip()) ), i0) * int(1.0) ) ),i0):i0].rstrip()[:i0] not in in0\\nloopBreak% = 0\\nwhile ( divInt(int(7.0),max(divInt(abs(i0),( ( ( int(7.0) - int(9.0) ) - mod(int(8.0),i0) ) * int(5.0) )), i0)) != max(i1, int(0.0)) or ( \"\"Er;\"\".endswith(s0) and True ) ):{:\\ni1 = divInt(max(divInt(divInt(int(4.0),divInt(saveOrd(in1),int(8.0))),int(59.0)), len(s2[:max(i1, abs(i2))][:mod(len(\"\"/\"\"[int(9.0):][:( int(2.0) + int(2.0) )].capitalize()[int(4.0):i0]),divInt(i1,i2))][:saveOrd(s1[i0:])][:i0].capitalize().rstrip().lstrip().capitalize()[int(8.0):int(7.0)])),int(96.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 1], [2, 2, 1, 1, 1, 1, 1, 1, 1], [2, 1], [2, 1, 1, 0, 2, 2, 1], [], [0], [], [], [1, 1, 3], [0], [0, 0, 1, 0, 2, 0, 2], [0], [5, 0], [3, 0, 3, 0], [0, 1], [], [1], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [5, 7, 5, 7, 1, 6, 8, 4, 0, 9, 6, 3, 9, 9, 7, 5, 9, 0, 1, 0, 7, 5, 5, 2, 3, 2, 7, 2, 9, 1, 4, 7, 7, 2, 5, 7, 4, 8, 6, 6, 6], [1, 2, 0, 2, 1, 0, 2, 2, 2, 2, 1, 2, 1, 1, 0, 1, 2, 0, 0, 2], [1, 0, 0], [1, 3, 2, 0, 2, 3, 3, 1, 2, 1, 0, 2, 2, 1, 2, 0, 1, 3, 3, 1, 0, 1, 3, 2, 0, 2, 1, 2, 2, 3, 1, 3, 1, 3, 2, 1, 1, 2, 0, 1, 2, 3, 2, 1, 2, 0, 3, 0, 1, 2, 0, 2, 1, 0, 1, 1, 2, 2, 1, 1, 2, 3, 2, 0, 3, 1, 0, 3, 3, 3, 3, 0, 2, 1, 1, 0, 3, 2, 1, 1, 2, 2, 1, 3, 2, 1, 0, 1, 2, 1, 2, 0, 0, 2, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [1, 3, 2, 1, 2, 2, 2, 2, 2, 0, 2, 2, 4, 2, 0, 3, 4, 0, 0], [0, 0, 2, 0, 0, 2, 1, 0, 2, 1, 2, 2, 0], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [2, 2, 2, 5, 0, 4, 4, 1, 4, 4, 2, 4, 2, 2, 0, 4, 4], [1, 1, 1, 0, 1], [], [3, 0, 4, 4, 0, 0, 0, 3, 0, 0, 2, 2, 0, 4, 4, 0, 0, 4, 0, 2, 2, 0, 3, 3, 1, 3, 1, 4, 1, 0, 1, 4, 2, 0, 0], [3, 0, 3, 0, 1, 3, 3], [5, 0, 4, 3], [1, 0, 0, 0, 0], [3, 3, 0, 1, 0], [23, 6], [8], [], [18, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 2, 7, 0, 0, 0, 0, 3, 1, 7, 1, 2, 4, 2, 0, 1, 41, 41, 20, 3, 96, 29, 19, 13, 17, 17, 5, 0, 35, 7, 4, 5, 5, 2, 1, 0, 2], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( b1 and int(5.0) \\l max(( i1 + ( len((s2 + getCharFromString(s2, abs(int(7.0))).strip(s2))) + ( int(5.0) * i2 ) ) ), mod(mod(int(7.0),( i0 + int(168.0) )),max(abs(int(40.0)), i2))) ):{:\\nif ( in2.endswith((s0 + in1)) or b1 ):{:\\nin1 = s1[int(9.0):abs(mod(i1,( int(6.0) + ( mod(abs(int(3.0)),abs(int(9.0))) * abs(divInt(int(9.0),int(7.0))) ) )))][:divInt(i0,int(5.0))]\\ni2 -= ( min(divInt(int(9.0),mod(i2,abs(i2))), int(0.0)) + mod(i2,( int(1.0) * i1 )) )\\n:}else:{:\\ni2 = int(0.0)\\n:}\\nres0 = getCharFromString(in1, int(7.0)).lstrip() in in1\\ns2 = saveChr(mod(( int(552.0) - int(32.0) ),( abs(divInt(i1,saveOrd(in1))) * int(72.0) )))\\ns2 = s2[i1:abs(min(len(((\"\"/\"\" + (\"\".\"\" + \"\"X\"\".rstrip(s0))) + \"\"iG\"\")), saveOrd(in1[i0:divInt(int(9.0),int(1.0))].lstrip(in1))))][i1:min(divInt(int(4.0),int(7.0)), ( mod(int(72.0),min(mod(int(5.0),i2), int(7.0))) * divInt(int(486.0),( i0 + i0 )) ))]\\ni2 = mod(int(6.0),int(6.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 4, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 1, 0, 1], [0], [0], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 0, 9, 2, 2, 0, 2, 3, 1, 1, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):saveOrd(\"\"A\"\"[mod(int(0.0),i0):])]:{:\\nres0 = mod(i1,int(7.0)) != i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [1, 0, 1], [], [0], [], [], [1], [2], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [6, 7, 0, 7, 8, 1, 5, 1, 4, 6], [1, 0, 2, 1, 0, 1, 2, 1], [0, 0], [3, 2, 3, 1, 0, 2, 3, 0, 1, 2, 1, 0, 3, 3, 2, 1, 1, 2, 1, 2, 0, 3, 3, 1, 3, 1], [1, 1, 1, 1, 1, 0], [1, 1, 3, 1, 3, 2, 4, 2], [2, 1, 0], [0, 0, 1, 0, 1], [2, 5, 4, 4, 5, 2], [1, 1], [], [0, 3, 4, 0, 4, 4, 3, 0, 4, 0, 0, 2, 0, 1, 1], [2, 3, 3, 3], [3, 4, 4], [0], [2, 1], [], [24], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 10, 10, 6, 2, 26, 6, 8, 1, 5, 6, 2, 0, 15, 4, 3, 1, 2, 0, 1, 1, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = max(divInt(max(int(6.0), i0),divInt(len(s2),i2)), int(70.0))\\nb1 = mod(int(7.0),i1) == max(len((in2.capitalize() + (in1 + in1.rstrip(in2)).rstrip(s2[divInt(int(8.0),int(1.0)):mod(int(5.0),( i0 * abs(saveOrd(\"\"5\"\")) ))]).lstrip(\"\"y\"\"))), int(1.0))\\ni1 = abs(int(46.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [2, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 0, 2, 4, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 1, 1], [25], [3, 18], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 7, 0, 34, 10, 8, 4, 6, 4, 3, 1, 14, 4, 1, 3, 3, 1, 2, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),len(getCharFromString(in1, i0)[abs(( int(0.0) + int(7.0) )):])):]:{:\\nres0 = \"\"Z\"\" not in saveChr(divInt(int(5.0),min(i1, divInt(( ( int(7.0) + i2 ) - divInt(len(\"\"d\"\"[int(7.0):i0]),max(max(divInt(int(1.0),i1), divInt(len((\"\"s\"\" + saveChr(int(7.0))).rstrip()),( int(7.0) - int(9.0) ))), i2)) ),i1))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 2, 0, 0, 0, 2, 2, 1, 1], [0, 0, 0], [1, 2, 2, 0, 1, 1, 1, 1], [0, 0, 0], [0, 0, 0], [], [], [0, 3], [3], [0, 1], [0], [], [1], [], [1], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1], [4, 1, 2, 0, 5, 4, 6, 9, 3, 5, 3, 1, 6, 8, 6, 9, 6, 2, 5, 9, 9, 1], [0, 1, 1, 1, 2, 0, 0, 2, 1, 2, 1, 0, 0, 1, 2, 1, 2, 1, 0, 0, 2, 0, 1, 2, 1, 2], [1, 1, 0, 1, 1], [0, 1, 0, 3, 2, 3, 0, 1, 0, 1, 3, 0, 1, 2, 0, 3, 0, 2, 0, 0, 2, 1, 1, 2, 2, 0, 3, 0, 0, 1, 2, 1, 3, 3, 0, 2, 0, 0, 1, 1, 0, 1, 0, 0, 0, 3, 1, 1, 3, 0, 2, 3, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 1, 4, 4, 3, 2, 0, 4, 4, 2], [2, 2, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1], [2, 1, 1, 5, 5, 3, 1, 5, 2, 4, 0, 0, 2, 5], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0], [4, 3, 4, 0, 4, 3, 3, 4, 4, 1, 1, 4, 4, 4, 3, 4, 2, 2, 4, 2, 4, 4, 1, 1, 4, 0, 4, 2, 1, 2, 2, 2, 2, 2, 4, 1, 1, 3, 2, 2, 1, 1, 0, 1, 2, 3, 0, 3, 1, 0, 3, 4, 0, 4, 2, 3, 0, 0, 3, 0, 1], [3, 1, 3, 3, 1, 0, 0, 3, 3, 1, 2, 1, 0, 3, 3, 0, 3], [5, 2, 0, 4, 2, 4, 1, 5], [0, 2, 1, 2, 1, 2, 1, 0, 1, 0, 0, 1, 2], [1, 1, 0, 0, 0, 3, 0, 0, 2, 3, 3, 2, 3, 3, 3], [24, 3, 4, 3, 24], [12, 8], [5, 9], [16, 14, 12, 18, 13, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 3, 8, 3, 3, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 22, 22, 26, 5, 54, 9, 10, 8, 5, 14, 15, 3, 61, 17, 8, 13, 15, 5, 2, 2, 6], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i1\\ns2 = (saveChr(int(412.0)) + s1).strip(((saveChr(i1).lstrip() + \"\"m\"\") + \"\"iYD\"\").strip())\\ns1 = getCharFromString(getCharFromString((saveChr(len(saveChr(( max(i1, int(0.0)) * i2 )).capitalize()[:int(5.0)]))[saveOrd(\"\"E\"\"):][i0:int(4.0)].strip() + \"\"-\"\").rstrip(getCharFromString(in2, mod(i0,saveOrd(\"\"D\"\"[i2:].rstrip(\"\"Y\"\".rstrip()[:( i1 + i2 )][divInt(int(6.0),int(9.0)):mod(divInt(i1,len(\"\"5\"\")),i0)][:i0][int(3.0):][:( int(5.0) - abs(min(i1, ( i2 + i1 ))) )]))))), int(3.0)), int(1.0))\\nloopBreak% = 0\\nfor in2 in (\"\"+\"\"[i2:int(68.0)][i1:i0] + \"\")\"\"):{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += i2\\ni0 = saveOrd(in0)\\nloopBreak% = 0\\nfor s1 in \"\"9\"\":{:\\nloopBreak% = 0\\nfor in2 in (s2 + (\"\"/*\"\" + in1))[:int(6.0)]:{:\\ni1 += int(9625.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += saveOrd((getCharFromString(s0, i1) + (s0 + s2)[mod(abs(int(991.0)),i2):].strip((in2 + \"\"-\"\"))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 6, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [1, 0, 2, 2, 0, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [1], [17], [14], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 3, 1, 1, 5, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nres0 = \"\"o\"\" not in in1[int(0.0):]\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [1, 2], [2, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 0, 0, 1, 2, 1, 0, 0, 0], [1], [1, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0, 1, 1], [0], [1, 1, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 0, 0, 0, 1], [1, 0, 0], [17, 14], [17], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 2, 3, 0, 3, 0, 0, 0, 3, 2, 1, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif \"\"rR\"\" not in \"\"O\"\":{:\\ns0 = in2\\n:}\\ni2 += int(0.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 0], [2], [2], [], [0], [], [], [0], [2, 3], [1, 1], [0, 0], [], [], [], [], [0], [1, 1, 1], [5, 6, 3], [1, 0, 0, 2], [], [0, 0, 1, 3, 1, 1, 0, 0], [1], [1, 0], [], [1], [2, 0, 4], [1], [], [3, 2, 2, 3, 0, 3, 0, 1, 2, 4], [1], [], [2, 1, 2], [1], [], [14], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 0, 6, 0, 1, 0, 0, 3, 1, 0, 10, 1, 0, 3, 1, 0, 1, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = ((s0 + (in1 + \"\"o\"\"))[:i1][i0:] + saveChr(int(5.0))[max(int(6.0), int(3.0)):])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1], [1, 2, 1, 0], [0, 1], [0, 0, 2], [0], [0], [], [], [0, 1], [3], [1, 2], [0], [0], [1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [7, 2, 8, 2, 6, 6, 6, 9, 1, 3, 7, 9, 6, 3, 6, 7, 2, 6, 5, 3, 0, 4, 7, 6, 9, 6, 8, 6, 8, 3, 7, 2, 5, 5, 9], [0, 0, 1, 1, 1, 1, 1, 0, 2, 1, 2, 1, 1, 2, 0, 0, 0, 0, 0, 2, 0, 2, 2, 1, 1], [0], [0, 1, 2, 0, 3, 3, 3, 1, 1, 3, 2, 3, 2, 1, 0, 3, 2, 2, 0, 0, 2, 2, 3, 3, 1, 1, 0, 1, 0, 0, 2, 3, 0, 0, 0, 2, 1, 2, 3, 1, 2, 1, 1, 1, 3, 3, 0, 0, 2, 1, 2, 2, 0, 2, 1, 0, 1, 1, 2, 3, 0, 2, 3, 0, 2, 1, 2, 3, 1, 3, 1, 0, 2, 1, 0, 2, 0, 1, 3, 1, 3, 1, 2, 3, 2, 3, 2, 2, 1, 1, 3, 2, 3, 3, 0, 3, 1, 2, 0, 1, 1, 3, 1, 0, 2, 0, 3, 0, 3, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [3, 1, 3, 4, 3, 4, 0, 3, 3, 1, 1, 1, 1, 2, 3, 0, 2, 2, 1, 2, 3, 0, 1, 4, 4, 4, 2], [2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 2, 1, 2, 0, 0, 2, 1, 2], [1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 3, 0, 4, 3, 3, 2, 1, 0, 2, 5, 0, 4, 2, 4, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0], [3, 3, 3, 4, 4, 0, 0, 0, 1, 4, 4, 2, 2, 3, 0, 0, 3, 3, 1, 2, 2, 2, 0, 2, 2, 4, 4, 1, 1, 1, 2, 4, 0, 2, 1, 1, 3, 0, 3, 3, 4, 0, 0, 3, 4, 3, 3, 0, 3, 2, 2, 2, 3, 1, 1, 1, 0, 1, 4, 0, 4, 1, 2, 2, 0, 0], [1, 0, 0, 0, 0, 1, 1, 3, 1, 3, 2], [4, 2], [2, 2, 0, 0, 1, 2, 2, 0, 1, 0, 0, 0, 2, 1], [1, 0, 1, 2, 0, 0, 2, 0, 1, 1, 2, 3, 1], [16, 4, 23, 20], [2, 1, 18, 9, 22], [6, 8, 8], [1]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 35, 35, 25, 0, 111, 28, 27, 18, 10, 17, 13, 1, 66, 11, 2, 14, 13, 4, 5, 3, 1], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\ge int(7.0)\\nloopBreak% = 0\\nfor s0 in (((saveChr(mod(i0,len(getCharFromString(in0, max(len(s0), int(2.0)))))) + in1) + \"\"c\"\") + getCharFromString(getCharFromString((in0 + in0)[int(8.0):][saveOrd(((\"\"Q\"\" + s2[:divInt(len(getCharFromString(saveChr(divInt(int(2.0),i1)), saveOrd(\"\"b\"\"))[( ( i1 * i1 ) - ( ( min(len(\"\"6\"\"), int(6.0)) - int(6.0) ) - i1 ) ):][int(6.0):]),i1)][i0:( len(\"\"E\"\") + i2 )][i1:i2]) + saveChr(( int(9.0) + mod(max(int(1.0), ( int(3.0) + int(7.0) )),int(9.0)) ))[max(max(i1, i1), mod(int(6.0),( mod(i2,( int(3.0) - i0 )) + int(6.0) ))):int(7.0)])):], divInt(max(i0, ( abs(i0) - mod(int(2.0),( len(s1) * int(6.0) )) )),min(int(5.0), i0))), ( int(304.0) - i0 ))):{:\\nb1 = \"\"X\"\"[:divInt(i2,int(76.0))] in \"\"8\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = (s2 + ((in2.rstrip(s0) + (saveChr(abs(int(9.0))) + ((in1 + ((\"\"U\"\" + \"\"sj\"\")[abs(int(6.0)):mod(max(( abs(( ( int(8.0) * int(6.0) ) + len(\"\"8\"\") )) + ( min(max(i0, saveOrd(s2)), int(8.0)) * ( i2 - int(3.0) ) ) ), int(7.0)),saveOrd(\"\"\\\\\\n\"\"))][int(2.0):i2][( i1 * saveOrd(in1.strip()) ):i1] + \"\"w\"\".capitalize())) + in0[:abs(int(55.0))][int(9.0):]))) + in2))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 0, 2, 1, 0, 2, 3, 2, 0, 3, 1, 2, 1, 0, 3, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 3, 1, 0, 1, 3, 0], [0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 5, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 9, 9, 7, 0, 32, 7, 9, 5, 2, 6, 2, 0, 16, 3, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[len(in2):]:{:\\nres0 = ( i0 != i2 or ( getCharFromString(in0[abs(divInt(i2,int(0.0))):( int(5.0) + min(len(saveChr(( i0 + ( int(5.0) * i1 ) ))), divInt(min(( i2 - max(int(7.0), ( int(2.0) - i0 )) ), abs(len((\"\"R\"\" + s0.rstrip())))),int(5.0))) )], int(5.0))[int(5.0):int(9.0)].endswith(\"\"4\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 0], [], [0], [], [], [0, 2, 2], [2], [0, 1], [0], [], [0], [], [], [], [0, 0, 1, 0, 0, 1], [4, 2, 8, 1, 9, 4], [1, 1, 0, 0], [], [3, 2, 0, 2, 1, 1, 0, 3, 3, 0, 0], [0, 0], [0, 4, 2], [1, 0], [], [], [0, 0, 0, 0, 1, 1], [], [2, 4, 4, 3, 1, 1], [0, 2], [], [1], [3, 1, 1, 1, 1, 2], [], [14, 6, 5, 21], [7], [14]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 6, 6, 4, 0, 11, 2, 3, 2, 0, 0, 6, 0, 6, 2, 0, 1, 6, 0, 4, 1, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\nb2 = min(( i1 - ( int(428.0) + int(194.0) ) ), i1) == saveOrd(getCharFromString((\"\"+ogfv\"\" + \"\"7\"\").capitalize(), abs(i0))[:i0])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 6, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 2, 2, 2, 0, 2, 2, 1, 1, 2, 0, 1, 2], [0, 1, 1], [3, 1, 0, 1, 1, 2, 3, 0, 0, 1, 2, 0, 3, 2, 2, 1, 0, 2, 0, 2, 2, 2, 0, 2, 1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 3, 2, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 1, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 1, 3, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 1], [1, 5, 4, 2, 3, 0, 4], [1, 0, 1, 0, 0, 1], [0], [2, 0, 1, 2, 2, 4, 2, 1, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 1, 0, 0, 1, 1], [0, 0, 1, 2, 0, 3], [17, 17, 17], [14], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 18, 1, 54, 17, 7, 8, 9, 4, 6, 1, 15, 2, 0, 6, 6, 3, 1, 1, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(\"\"R\"\"):int(0.0)]:{:\\nloopBreak% = 0\\nwhile getCharFromString(\"\"Ro\"\"[i1:int(7.0)], int(5.0))[mod(len(in1[:i2]),i2):int(7.0)][:mod(i0,max(( mod(int(0.0),i0) + ( i1 + divInt(( ( i2 + divInt(int(1.0),i2) ) - ( i2 + i0 ) ),i2) ) ), divInt(i2,i1)))] not in (\"\"1R;\"\" + saveChr(i1))[:mod(int(7.0),max(( len(s2) * min(( ( divInt(int(7.0),int(9.0)) - mod(int(8.0),i2) ) - int(6.0) ), int(0.0)) ), max(int(4.0), i0)))]:{:\\ni1 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 1, 1, 0, 3, 0, 1, 2, 1, 3, 4, 3], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [0, 0, 0, 1, 0, 1, 1], [0], [2, 2, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [0, 1, 0, 0, 1, 2], [2, 1, 1, 0, 1, 3, 1], [17], [21, 22, 23, 20], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 14, 0, 52, 14, 12, 6, 8, 5, 7, 1, 17, 3, 1, 6, 7, 1, 4, 1, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:abs(max(i0, int(08.0)))][max(mod(int(2.0),min(mod(int(7.0),len(in1.capitalize())), i2)), ( mod(( int(2.0) + i2 ),mod(min(( i0 * divInt(i0,i1) ), int(1.0)),i1)) * divInt(max(i2, i0),abs(( i0 - i2 ))) )):mod(max(len(\"\"2vwR\"\"), int(7.0)),saveOrd(saveChr(i2)[mod(( int(4.0) + int(9.0) ),int(8.0)):( int(5.0) * i1 )]))]:{:\\nres0 = in1[int(0.0):int(4.0)] not in (\"\"x;\"\" + \"\"u\"\"[len(in0):].rstrip())[:i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 1, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 2, 1, 2, 0, 1, 1, 1, 2, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 2, 3, 2, 1, 0, 2, 2, 1, 0, 2, 1, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1, 2, 3, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 3, 2, 0, 3, 0, 1, 1, 2, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 1, 4, 4, 3, 0, 4], [1, 1], [0], [1, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 0, 2], [1, 0], [2, 2, 0, 1, 1], [0, 1], [17], [11], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 16, 1, 57, 19, 10, 8, 11, 6, 2, 0, 15, 4, 0, 2, 2, 1, 1, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile \"\"R\"\" not in s0:{:\\nres0 = ( max(len(s1), i0) != int(0.0) or ( in1[abs(mod(i0,int(7.0))):].endswith(in1) and True ) )\\ni2 = mod(int(5.0),min(i1, divInt(divInt(( int(7.0) + i2 ),( len(getCharFromString(in0[divInt(( divInt(min(( int(2.0) + i1 ), mod(divInt(int(1.0),i2),( int(7.0) * i0 ))),i1) - ( max(max(int(7.0), abs(i1)), ( divInt(divInt(int(9.0),int(8.0)),( int(1.0) + i1 )) * int(0.0) )) - i2 ) ),i2):].capitalize(), int(4.0))) - mod(saveOrd(getCharFromString((\"\"l\"\" + s0.capitalize()), i0)),i0) )),i1)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 7, 7, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 0], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1], [0, 1, 1], [3, 3, 3, 0, 3, 2, 3, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 2, 2, 2, 0, 1, 1, 3, 0, 0, 3, 2, 1, 3, 3, 1, 1, 3, 1], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 0, 2, 0, 3, 1, 1, 3, 1, 0, 2, 1, 4, 2, 1, 0, 2], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 4, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 0, 0], [17, 11, 21], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 20, 20, 12, 0, 68, 20, 17, 6, 14, 5, 3, 1, 15, 4, 1, 3, 3, 3, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1[min(abs(i0), min(mod(len(in1),int(0.0)), ( int(7.0) + max(i1, divInt(( ( int(7.0) + i2 ) - ( max(int(7.0), i0) - len(\"\"R\"\") ) ),max(divInt(int(7.0),i1), divInt(min(int(1.0), ( int(7.0) + int(7.0) )),i2)))) ))):]))[i1:]:{:\\nb1 = saveChr(( int(9.0) * abs(divInt(max(i2, divInt(mod(divInt(int(8.0),int(5.0)),mod(int(0.0),i0)),int(4.0))),divInt(divInt(mod(mod(i0,int(8.0)),int(59.0)),saveOrd(\"\"L\"\"[i2:i1])),abs(mod(int(9.0),max(min(int(2.0), int(2.0)), abs(int(0.0)))))))) )) not in (\"\"V\"\" + in0.capitalize()).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 1], [2, 0, 1, 2, 0, 1, 0, 1], [2, 0], [1, 2, 1, 2, 1, 1], [0], [0, 0, 0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 8, 9, 1, 0, 8, 1, 0, 3, 7, 0, 4, 3, 8], [1, 1, 1, 1, 0, 2, 1, 0, 1, 2], [1, 0, 1, 1], [3, 2, 1, 1, 1, 3, 0, 3, 3, 1, 0, 3, 3, 1, 2, 3, 3, 1, 1, 0, 3, 3, 1, 3, 3, 1, 2, 2, 1, 3, 1, 0, 3, 0, 0], [0, 0, 0, 1], [3, 0, 2, 2, 4, 1, 2, 1, 4, 4, 2, 2, 3, 3], [1, 0, 1, 1, 0, 2], [0], [2, 5, 1, 3, 1, 0, 5, 3, 3], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], [0], [0, 2, 4, 3, 1, 3, 1, 2, 2, 2, 1, 2, 1, 2, 4, 0, 1, 3, 3, 0, 0, 3, 4, 0, 1, 1, 0, 4], [2, 2, 0, 1], [], [2, 0, 1, 0, 1, 2], [1, 1, 2, 0, 1, 2, 3, 1, 1, 2, 0, 1, 3, 2], [3, 18], [0, 17, 20, 23, 10, 2], [7, 3, 9, 9], [20, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 2, 6, 1, 3, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 10, 4, 35, 4, 14, 6, 1, 9, 14, 1, 28, 4, 0, 6, 14, 2, 6, 4, 2], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile len(s2) \\g ( int(0.0) - int(8.0) ):{:\\ni1 += int(9.0)\\nin2 = (\"\"ar7\"\" + (\"\"Du\"\" + \"\"3\"\"[min(i1, abs(abs(int(1.0)))):i1][:saveOrd(\"\";\"\"[:max(int(0.0), ( abs(max(int(8.0), int(1.0))) - i1 ))])][saveOrd(s1.capitalize()[saveOrd(\"\"x\"\"):]):int(037.0)])).capitalize()[abs(abs(int(0.0))):]\\nloopBreak% = 0\\nfor in0 in ((s1 + s0) + (getCharFromString(in2, ( divInt(int(4.0),len(\"\"k\"\")) - int(38.0) )) + \"\"9Sc/9\"\")):{:\\ni0 = i2\\nin0 = in0\\ni1 += len(saveChr(i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= i2\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 7, 2, 0, 8], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 2], [0, 1, 1], [2, 3, 2, 0, 3, 2, 0, 2, 2, 1, 3, 0, 2, 2, 2, 1, 3, 2, 3, 2, 0, 3, 3, 2, 3, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 1, 2, 3, 1, 2, 2, 2, 3, 2, 1, 1, 0, 1, 0, 2, 1, 2, 3, 2, 3, 2, 3, 0, 2, 3, 3, 0, 2, 3, 3, 2, 3, 1, 0, 1, 3, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1, 0, 4, 1, 0, 2, 2, 0, 1, 0, 2, 4, 0, 1, 0, 4, 4, 4, 3, 2, 4, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2, 1, 2, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 5, 4, 4, 3, 0, 4, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 4, 1, 4, 1, 1, 1, 1, 1, 4, 0], [3, 1, 3, 0, 3, 3, 1], [1, 5, 3, 2], [2, 2, 0, 0, 1], [0, 1, 2, 0, 1, 0, 0, 2], [17, 16, 11, 8], [6, 4], [8, 3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 23, 23, 17, 0, 99, 30, 30, 17, 13, 9, 8, 1, 27, 7, 4, 3, 8, 4, 2, 2, 0], "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[mod(len(in1),( i0 + len(in1[( i2 + divInt(( int(1.0) * len(in0) ),i0) ):]) )):]:{:\\nres0 = saveChr(mod(( ( int(7.0) - min(divInt(len(s0[( i0 + min(max(divInt(min(int(5.0), divInt(max(int(7.0), i1),int(7.0))),i2), i1), i1) ):( int(1.0) * min(( saveOrd((\"\"R\"\" + getCharFromString(in1, i0)).strip(\"\"g\"\")) - ( mod(divInt(int(7.0),int(7.0)),divInt(int(9.0),i0)) - int(8.0) ) ), i1) )]),max(min(abs(abs(min(int(5.0), int(0.0)))), max(min(abs(int(4.0)), ( saveOrd(s1) * int(8.0) )), mod(( ( min(( int(59.0) + int(9.0) ), i0) + int(2.0) ) - i0 ),( int(2.0) * ( max(divInt(min(( saveOrd(\"\"8\"\".lstrip(\"\"Q\"\".strip())) - i0 ), divInt(saveOrd(\"\"e\"\"),saveOrd(\"\"L\"\"))),i0), ( len(\"\"I\"\") * abs(mod(saveOrd(\"\"3\"\"),int(7.0))) )) - i2 ) )))), int(2.0))), len(saveChr(int(0.0)))) ) + int(8.0) ),i2)).rstrip() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0, 1], [0, 1, 1], [2, 3, 2, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 2, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 3], [1, 0, 1], [2, 2, 0, 0, 1], [0, 1, 0, 0], [17, 22, 22], [8], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 11, 0, 33, 10, 6, 6, 4, 5, 4, 1, 16, 4, 3, 5, 4, 3, 1, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1.rstrip()[( i0 + len(saveChr(( i2 + int(0.0) ))[i0:int(7.0)]) ):abs(int(5.0))][divInt(( divInt(int(7.0),i0) * ( min(( i1 - len(in1[:min(divInt(i2,i1), ( i0 + int(7.0) ))]) ), i0) * int(1.0) ) ),i0):]),i1):]:{:\\nres0 = (\"\"R\"\" + in0.rstrip()).lstrip() not in \"\"iWW\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 1], [], [2, 0], [], [], [], [], [3, 2, 3], [], [0], [], [], [1], [], [1], [], [1], [0], [0, 0, 2, 0], [0], [0, 0, 1, 2, 2, 0, 0, 3], [0, 1], [3], [1], [1], [1, 4, 2, 0, 2, 4], [0, 1, 0, 0, 1, 1], [], [4, 4, 1, 2, 4, 3, 3, 1, 3, 4, 2, 0, 4, 4, 0, 2, 0, 0, 0, 1], [3, 3, 3, 2, 3, 3], [5, 1, 5, 2, 3], [2, 0, 1], [2, 0, 0, 2, 2, 2], [24, 9], [], [6, 3, 7, 0], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 0, 8, 2, 1, 1, 1, 6, 6, 0, 20, 6, 5, 3, 6, 2, 0, 4, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"6Y\"\".rstrip().strip(((\"\"J37\"\" + (in1[i0:i0].capitalize() + s2.lstrip(s0[:int(0.0)]).strip())) + s2).strip(in1)[( mod(i2,i0) - len(\"\"0\"\") ):])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 0, 0], [0], [0, 1, 0, 2], [0], [0, 0], [], [], [2, 1], [2], [1, 2], [0], [5], [1, 3, 1], [1], [0, 0], [], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [8, 5, 7, 1, 9, 7, 6, 1, 7, 7, 8, 2, 0, 5, 1], [0, 2, 0, 0, 2, 1], [1], [0, 1, 0, 2, 3, 1, 1, 0, 3, 1, 2, 1, 1, 2, 1, 3, 2, 1, 3, 0, 0, 1], [0, 1, 1, 1], [1, 1, 3, 1], [1, 0], [0, 1, 0], [5, 2], [1, 0, 0, 1], [0], [1, 2, 1, 4, 4], [1, 1, 1], [], [0], [0, 0, 0, 0], [2, 21, 12, 19], [], [], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 10, 10, 6, 1, 21, 4, 4, 2, 3, 1, 4, 1, 5, 2, 0, 1, 4, 4, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"C\"\":{:\\nb2 = i0 == int(8.0)\\ni2 -= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = \"\"VMT\"\"[( max(int(5.0), int(7.0)) + i0 ):max(int(1.0), divInt(int(9.0),int(76.0)))].endswith(saveChr(mod(int(1.0),len(saveChr(divInt(int(77.0),max(i2, i1)))))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [0], [0], [], [], [0], [0], [1], [0], [], [], [], [0], [], [0, 0, 0, 1, 0, 1], [7, 2, 1, 8, 9, 4], [1], [], [1, 1], [], [], [], [], [3], [1], [0], [1], [], [], [], [1], [], [14], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in \"\"o\"\":{:\\nb0 = int(7218.0) \\l int(94.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [2, 0, 2], [], [0, 0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [5, 6, 8, 9, 7, 0, 1, 2, 6, 7], [2, 1, 0, 0, 1], [], [0, 1, 3, 0, 0, 2, 1, 0, 3, 3, 3, 1, 1], [1], [2, 2, 4, 2], [], [0], [2, 3, 1, 3, 1, 0, 2, 0], [0, 1], [], [1, 2, 0, 2, 2, 2, 0, 0, 2, 3, 3, 4, 4, 0, 3, 0, 2, 3, 4, 2], [2, 3, 2, 1], [2], [0, 2, 1, 1], [0, 2], [18], [], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 5, 0, 1, 0, 0, 3, 2, 0, 3, 0, 0, 1, 2, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"S5\"\"\\nb0 = i2 == int(5.0)\\nin0 = s1[abs(i1):i0]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 2, 0, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 0, 2, 0], [0, 1, 2, 2, 1, 1, 2], [1, 1, 2, 2, 2, 0, 1, 2, 0], [0], [0, 0, 0], [], [], [0, 0], [0, 5, 1, 5, 3], [2, 0, 1, 0, 2, 1, 1, 2, 1, 2, 1, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0], [0, 0, 2, 5, 5], [3, 3, 2, 3, 2, 1], [1, 0, 1], [1], [1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 7, 7, 6, 2, 3, 3, 3, 4, 1, 8, 6, 7, 6, 4, 3, 1, 8, 6, 2, 5, 8, 1, 5, 2, 8, 1, 1, 6, 6, 5, 2, 5, 8, 6, 6, 3, 1, 9, 2, 9, 9, 3, 4, 4, 7, 0, 4, 2, 0, 7], [2, 1, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 2, 1, 1, 0, 1, 0, 1, 2, 0, 0, 2, 2, 2, 1, 0, 2, 0, 1, 1, 1, 0, 2, 1, 0, 0, 0, 0, 0, 2, 2, 2], [0, 1, 0], [1, 3, 2, 2, 1, 1, 1, 1, 2, 2, 0, 2, 1, 0, 2, 3, 3, 0, 3, 1, 3, 0, 0, 0, 3, 2, 1, 1, 0, 0, 1, 3, 0, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0, 3, 0, 2, 2, 2, 1, 0, 0, 3, 1, 1, 1, 3, 1, 2, 0, 3, 2, 3, 0, 1, 3, 0, 2, 0, 1, 2, 1, 3, 1, 3, 1, 3, 0, 3, 2, 3, 1, 2, 3, 0, 1, 2, 3, 1, 0, 2, 2, 3, 2, 3, 2, 1, 3, 3, 1, 2, 0, 3, 1, 0, 2, 3, 2, 1, 1, 3, 0, 3, 0, 2, 0, 2, 2, 3, 0, 3, 2, 1, 0, 2, 3, 1, 2, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 3, 2, 3, 2, 3, 2, 1, 3, 3, 1, 0, 0, 0, 3, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 3, 4, 4, 0, 4, 4, 4, 3, 1, 1, 0, 1, 2, 0, 3, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 2, 1, 3, 4, 1, 1, 3, 2, 2, 2], [1, 0, 1, 2, 2, 1, 0, 2, 2, 1, 1, 0, 2, 1, 1, 2, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0], [1, 4, 1, 2, 5, 0, 0, 0, 0, 4, 0, 4, 0, 5, 4], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0], [1, 1, 3, 2, 0, 3, 0, 2, 1, 4, 1, 2, 1, 4, 4, 2, 2, 4, 2, 4, 2, 1, 2, 4, 2, 1, 1, 1, 0, 4, 0, 2, 1, 4, 4, 1, 1, 1, 2, 0, 2, 1, 4, 1, 1, 1, 0, 2, 4, 4, 2, 4, 2, 0, 0, 2, 2, 4, 2, 4, 4, 4, 0, 2, 1, 4, 1, 4, 1, 1, 4, 2, 2, 4, 4, 2, 0], [3, 3, 1, 1, 2, 2, 1, 0, 1, 3, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 1, 2], [4, 5, 1, 5, 5], [2, 1, 2, 2, 2, 0, 0, 2, 2, 1, 2, 2, 2, 2, 0, 2, 1, 2, 0, 1, 0, 1], [0, 0, 1, 3, 2, 2, 3, 3, 2, 0, 2, 3, 0, 3, 3, 0, 1, 0, 3, 2, 3, 1, 3, 3, 3, 2, 2, 3, 1, 3, 0, 2, 3, 3, 3, 1], [4, 17, 11, 0, 18, 24, 3], [24, 14, 10, 6, 17], [6, 8, 0, 0, 8, 6, 0, 1], [12, 3, 17, 13, 4, 6, 24, 7, 18, 8, 7, 1, 26, 20, 26, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 16, 16, 7, 9, 1, 3, 0, 0, 2, 5, 16, 5, 5, 6, 3, 1, 3, 52, 52, 43, 3, 155, 34, 38, 18, 17, 15, 36, 1, 77, 22, 5, 22, 36, 7, 5, 8, 16], "tree_depth": 77, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(29.0)\\nloopBreak% = 0\\nfor s1 in \"\"E\"\":{:\\ni1 -= len(\"\"Ry)6\"\")\\nin1 = (s1[mod(mod(int(776.0),int(2.0)),int(3.0)):] + (s2 + \"\"8\"\"[:int(3341.0)]))\\nif \"\".\"\".rstrip(\"\"0L0*\"\"[mod(( i0 + ( int(8.0) - i1 ) ),mod(min(len(saveChr(i1).strip(saveChr(len(\"\"A\"\"[int(6.0):saveOrd(\"\"!\"\"[i0:].capitalize()[i0:])].capitalize()[i2:saveOrd(\"\"#\"\")]))[( int(7.0) * int(6.0) ):][i0:])), i0),int(4.0))):]) in \"\"SoY?8\"\":{:\\nloopBreak% = 0\\nwhile ( min(i0, i0) \\l saveOrd(in2) or ( saveChr(i2) in s0 and i1 != i1 ) ):{:\\ns0 = \"\"$k\"\"[:int(318.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile int(6.0) \\g i0:{:\\nif getCharFromString(saveChr(i1), i0) == \"\"/\"\":{:\\ns0 = \"\"%\"\"\\n:}\\nif saveOrd(\"\"$\"\") != i1:{:\\nb0 = s0[mod(( mod(int(2.0),i2) * i0 ),saveOrd(\"\"6\"\"[int(5.0):])):].endswith(\"\"0\"\".rstrip())\\n:}else:{:\\ni0 = int(8.0)\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = \"\"\\\\\\ng\"\"\\nloopBreak% = 0\\nwhile int(15.0) \\ge len(\"\"[D1\"\"):{:\\nb0 = not ( not False or s0.endswith(saveChr(int(2.0))[( i2 - max(divInt(max(i2, int(8.0)),min(i2, ( i1 + int(1.0) ))), ( int(1.0) * max(int(6.0), abs(int(6.0))) )) ):].strip(in1[min(i0, len(s0)):mod(min(int(5.0), ( min(i2, int(2.0)) * ( abs(int(5.0)) - i0 ) )),( ( saveOrd(getCharFromString(getCharFromString(in2, divInt(max(mod(int(8.0),min(saveOrd(\"\";\"\"[int(6.0):( i1 - len(getCharFromString(\"\"[\"\", int(6.0))) )]), i1)), ( max(divInt(int(3.0),int(1.0)), saveOrd(saveChr(i1))) + abs(i0) )),divInt(i2,mod(( max(i1, len(\"\"!\"\")) * ( int(9.0) - i0 ) ),divInt(saveOrd(\"\"r\"\"),int(2.0)))))).capitalize(), ( int(9.0) - ( int(9.0) * i0 ) ))[int(3.0):].capitalize()[:i0][int(4.0):]) - i0 ) - int(4.0) ))]).strip(saveChr(int(7.0))[int(0.0):max(mod(max(divInt(len(in1[:divInt(int(4.0),abs(abs(int(2.0))))].capitalize()),i0), i2),i2), abs(int(0.0)))][:i2].capitalize())[int(7.0):]) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 4, 2, 4, 0, 3, 0, 4, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 2, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 9, 0, 37, 11, 9, 6, 5, 7, 2, 1, 16, 4, 2, 4, 2, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(saveOrd(in1), mod(i0,abs(( i2 + int(0.0) )))):]:{:\\nin1 = in0[( int(7.0) + saveOrd(saveChr(i0).rstrip()) ):divInt(( mod(int(5.0),i0) * ( min(( i1 - len(s0[min(divInt(int(7.0),int(7.0)), ( saveOrd((\"\"R\"\" + getCharFromString(in1, int(1.0))).lstrip()) + i2 )):int(7.0)]) ), i1) * i1 ) ),i0)][divInt(int(7.0),len(\"\"9\"\")):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [1, 5, 4, 1, 3, 0, 4], [1, 1, 1, 1, 1], [0], [0, 4, 1, 3, 2, 4, 4, 4, 1, 1, 2, 2, 0, 2, 2, 4, 1], [0, 1, 3, 2, 0], [1, 0], [2, 2, 0, 0, 1], [0, 2, 2, 3, 3], [17], [], [8, 3], [20, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 13, 0, 51, 15, 10, 6, 9, 3, 4, 1, 17, 5, 1, 5, 4, 1, 0, 2, 1], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2:{:\\nres0 = getCharFromString(\"\"R\"\", len((saveChr(len(\"\"8\"\".capitalize().rstrip()))[i0:] + \"\"3\"\"))) not in in1[int(0.0):abs(mod(i2,int(4.0)))][mod(int(5.0),min(i2, ( divInt(( divInt(i0,( len(getCharFromString(\"\";\"\", ( i1 + divInt(min(max(int(7.0), i2), ( abs(int(2.0)) + i1 )),int(1.0)) ))[:int(0.0)][i2:i0]) * divInt(int(7.0),max(mod(abs(i0),( i1 - divInt(int(1.0),int(8.0)) )), divInt(int(5.0),i0))) )) + int(0.0) ),int(4.0)) + i2 ))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 4, 9, 9], [2, 2, 2, 0, 2, 2, 0, 2, 1, 0, 0, 0, 1, 1, 2, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 2, 1, 0, 0, 1, 1, 2, 2, 3, 3, 0, 1, 0, 2, 2, 1, 3, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0], [1, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 0, 0, 3, 4], [0, 0, 2, 1, 0, 2, 1, 2, 2, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 4, 4, 1, 3, 0, 4], [1, 1], [0], [2, 0, 0, 3, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 22, 22, 16, 0, 76, 24, 16, 14, 10, 7, 2, 1, 16, 3, 1, 3, 2, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[max(len(in1), i2):]:{:\\nres0 = (s1 + in0) not in getCharFromString(s0[i2:abs(mod(i2,int(0.0)))], ( int(7.0) + min(len(saveChr(( ( divInt(int(5.0),i0) + divInt(min(( i2 * max(abs(( int(7.0) - i2 )), max(divInt(int(7.0),int(1.0)), int(7.0))) ), int(7.0)),i0) ) + i2 ))), ( int(9.0) * max(divInt(min(i1, divInt(( ( int(8.0) - int(5.0) ) * ( int(0.0) * i0 ) ),int(4.0))),max(i0, mod(min(divInt(mod(int(8.0),i0),( ( int(59.0) + i1 ) + i1 )), int(9.0)),int(2.0)))), divInt(( min(len((\"\"R\"\" + in1.rstrip())), i2) - int(2.0) ),i1)) )) ))[( ( int(49.0) - saveOrd(\"\"5\"\") ) - int(9.0) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 0, 1, 0], [1], [1, 1, 2], [], [0, 0], [], [], [], [], [2], [0, 0], [5], [], [], [], [1], [0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 0, 7, 7, 7, 8, 6, 2, 2], [1, 0, 1, 2, 2, 1, 2, 2, 0, 2, 2, 0, 0], [1, 1], [0, 3, 3, 1, 0, 2, 3, 3, 0, 0, 1, 0, 3, 2, 2, 2, 2, 1, 3, 0, 1, 0, 3, 1, 2, 0, 0, 1, 3, 2, 0, 0], [0, 1, 1, 1, 0, 1, 1], [3, 3, 4, 0, 3, 0, 1, 2, 1], [1, 1, 1, 0], [0, 0, 0, 1, 0], [3, 3, 0, 2, 0, 0], [0, 1, 1, 1], [], [0, 3, 4, 1, 4, 0, 3, 0, 2, 4, 2, 1, 4, 4, 0, 2, 4, 0, 2, 1], [1, 1, 3, 0, 3, 1], [5, 3], [1, 2, 0, 2], [1, 0, 2, 0], [2, 4], [13], [2], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 9, 9, 13, 2, 32, 7, 8, 4, 5, 6, 4, 0, 20, 6, 2, 4, 4, 2, 1, 1, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in0.endswith((saveChr(i1) + \"\"nC\"\")):{:\\ni0 -= len(saveChr(len(in0)))\\ni1 -= int(2077.0)\\n:}else:{:\\ns0 = (s2 + \"\"2\"\"[i2:].strip(getCharFromString(s0.lstrip(saveChr(( saveOrd(s0) - min(i2, i1) ))[int(7.0):i2]), len(\"\"E\"\"[divInt(divInt(divInt(( int(8.0) + min(i2, int(6.0)) ),i0),max(int(2.0), mod(i2,i2))),int(2.0)):])))[:abs(divInt(i0,i0))])\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 4], [1], [], [1], [2, 1, 3], [], [], [2], [], [], [6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"6\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1, 0, 2, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 0, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 4, 2, 0, 3, 0, 1, 2, 1, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 1, 4, 3, 0, 4], [1, 0, 0, 0, 1], [0], [2, 0, 0, 3, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0, 3, 1, 1], [17, 4], [23, 23], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 15, 1, 53, 16, 11, 8, 8, 7, 5, 1, 16, 2, 0, 4, 5, 2, 2, 0, 1], "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[min(saveOrd(s1), i0):]:{:\\nres0 = (in1 + in0) not in s0[abs(min(mod(i2,int(6.0)), mod(int(7.0),len(getCharFromString((\"\"R\"\" + saveChr(i2)), ( divInt(( min(i0, divInt(max(( i1 + ( divInt(( int(5.0) + i2 ),divInt(abs(int(7.0)),i1)) * int(4.0) ) ), int(1.0)),i2)) - i0 ),mod(int(7.0),max(int(7.0), len(in1)))) + i0 )))))):( ( ( int(9.0) * int(8.0) ) - divInt(int(5.0),i1) ) - int(0.0) )][i1:i0][i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(\"\"E;xx\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 2], [], [0, 0], [], [], [2, 2], [], [0], [], [], [0], [], [], [], [1, 1], [4, 5], [0, 0], [1], [2, 0, 1], [0], [], [1, 2], [], [3], [0, 0, 1], [], [1], [], [], [], [3, 1, 2], [], [20], [3], [22]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 1, 0, 0, 0, 3, 0, 1, 1, 1], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b2\\nin0 = \"\"=u3\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [0, 3, 0, 1, 3, 1, 0, 1, 2, 1, 0, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 1, 2, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 1, 4, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 3, 2], [1, 0, 1], [0, 2, 2, 0], [0, 0, 0], [1, 20, 24], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 2, 2, 3, 0, 7, 0, 2, 0, 0, 4, 3, 0, 15, 5, 3, 3, 3, 3, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile \"\"B\"\"[i0:len(s0[i2:].rstrip())] != in2:{:\\nres0 = ( int(0.0) != len(saveChr(int(7.0))) or ( in1[i0:].lstrip().endswith((\"\"UY\"\" + in1.capitalize()).rstrip()) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 2, 2, 0, 1, 1, 0, 0, 0], [2, 1], [1, 2, 0, 2, 1, 1, 0], [], [0, 0, 0, 0, 0], [], [], [0, 3], [5, 0], [0, 0, 0, 2, 0, 0, 1, 1, 0, 2], [0, 0], [4, 2], [3, 3, 3, 1, 1, 1], [1, 0, 1], [1, 1, 1], [1], [1, 1, 1, 0, 1, 1], [3, 5, 7, 7, 7, 7], [2, 1, 2, 0, 1, 0, 1, 2, 0], [0, 1, 1], [1, 2, 2, 0, 0, 0, 0, 0, 0, 1, 2, 1, 1, 1], [1, 1, 1], [], [1, 1], [0, 1, 0], [0, 1, 5, 2, 5, 2], [0, 0, 0, 0, 1, 1], [], [0, 0, 1, 4, 0, 4, 0, 1], [2, 0], [], [], [0, 2, 3, 2, 0, 3], [9, 20], [], [2, 0], [7, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 2, 7, 0, 5, 0, 0, 2, 2, 10, 2, 2, 6, 3, 3, 1, 6, 6, 9, 3, 14, 3, 0, 2, 3, 6, 6, 0, 8, 2, 0, 0, 6, 2, 0, 2, 2], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(3.0)\\nloopBreak% = 0\\nwhile ( ( ( s0.startswith(s1) or False ) and False ) or divInt(mod(i1,i2),i0) != i1 ):{:\\nif i0 \\l i1:{:\\nin2 = \"\"J2$0U\"\"\\nb0 = False\\n:}else:{:\\ns2 = in2.capitalize()\\ni2 -= int(5.0)\\ni0 -= divInt(int(7.0),int(77.0))\\n:}\\nres0 = getCharFromString(s2, int(7.0)) == \"\"*\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [0, 2, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [3, 3, 1], [], [], [], [1, 1], [4, 9], [0, 2], [0, 1, 1], [3, 2, 3, 1, 3, 0], [0], [2, 3, 2], [0, 0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 0, 1], [0, 0, 0, 1], [0], [1, 3, 0, 0], [3, 0], [1], [], [2, 1, 3, 0], [7], [2], [6], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 1, 0, 0, 0, 4, 1, 1, 1, 1], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = \"\"6c#H\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 1, 0], [], [1, 0, 0], [], [0], [], [], [0, 2, 1], [5], [0, 2], [0], [2], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0, 2], [0, 1], [0, 0, 3, 2, 2, 2, 2, 2, 1, 0, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [0, 0], [1, 0, 0], [1], [1], [], [2, 2, 0, 1], [], [], [1, 2], [2], [], [], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 3, 0, 2, 0, 1, 1, 0, 0, 0, 2, 2, 8, 1, 16, 5, 2, 2, 3, 1, 1, 0, 4, 0, 0, 2, 1, 0, 0, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\nb0 = b2\\nb1 = s1[i2:][:abs(mod(( divInt(( divInt(int(7.0),i0) + i1 ),int(0.0)) + min(i1, i0) ),i2))] == \"\"4\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [1, 0], [], [], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 5, 3, 8, 9, 0, 7, 9, 0, 8, 1, 7, 1, 2, 8, 6], [0, 0, 1, 2, 0, 0, 0, 2, 0, 1, 0, 0, 2], [1], [1, 2, 1, 3, 1, 1, 2, 3, 2, 3, 0, 2, 3, 0, 3, 2, 0, 2, 2, 0, 1, 2, 3, 2, 1, 2, 2, 0, 3, 3, 0, 3, 2, 2, 1, 2, 1, 3, 0, 1, 2, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 3, 1, 3], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 1, 4, 1, 2, 2, 0, 1, 1, 1, 4], [2, 1, 1, 0, 2, 2, 2], [1, 0, 1, 1, 1, 0, 0, 1], [3, 4, 0, 2, 5], [1, 1], [], [3, 3, 2, 4, 2, 0, 1, 4, 2, 2, 3, 0, 4, 1, 0, 0], [0, 1, 2], [], [2, 2, 0, 0, 1], [2, 2], [], [], [2, 6], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 13, 0, 54, 15, 12, 7, 8, 5, 2, 0, 16, 3, 0, 4, 2, 0, 0, 2, 0], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = ((getCharFromString(in1[int(3.0):], ( int(8.0) * max(int(5.0), int(3.0)) ))[( len(\"\"2\"\") - mod(max(i0, divInt(saveOrd(saveChr(i0)),max(mod(i1,( mod(i2,int(890.0)) - ( abs(mod(int(79.0),( ( i0 + abs(min(i0, max(divInt(divInt(int(0.0),( int(8.0) * max(i0, int(1.0)) )),mod(int(7.0),i2)), i0))) ) * int(1.0) ))) * i1 ) )), int(2.0)))),int(8.0)) ):] + (s0 + \"\"6\"\".capitalize())[i0:i0][i2:max(int(6.0), saveOrd(s2))]) + in2)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 2, 1], [5], [1], [0], [], [], [], [], [], [1, 1, 0, 1], [4, 5, 0, 1], [0, 0, 1], [], [0, 2, 3, 3, 0, 3, 2, 2, 1, 0, 1, 0], [0, 0, 0, 1], [3, 3, 3], [1, 2, 0], [1], [5, 0, 2, 4], [1, 1], [], [3, 4, 4, 0, 0, 3, 1, 2, 0, 4, 1, 0], [3, 0, 3], [1, 5], [2, 1], [2, 0], [17], [], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 1, 3, 1, 0, 4, 2, 0, 12, 3, 2, 1, 2, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 != ( len((getCharFromString(in2, len(s0)).rstrip() + (\"\"9\"\" + s2[i0:]))) - len(\"\"R\"\".strip(in1)) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [4], [2], [0], [0], [], [], [], [], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 8, 8, 4, 7, 0, 1, 6, 9, 2], [2, 1, 0], [0], [2, 3, 0, 1, 1, 0, 3, 1, 3, 3, 1], [1], [3, 4, 2, 3], [], [0], [], [1, 0, 0, 0, 0, 1], [], [2, 2, 2, 1, 4, 1], [1], [], [1, 2, 2], [2, 3, 0, 2, 0, 3, 2, 2], [18, 8], [], [4, 6], [10, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 6, 1, 1, 0, 1, 0, 6, 0, 6, 1, 0, 3, 6, 2, 0, 2, 2], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = \"\"4\"\"[divInt(len(saveChr(i2)),int(388.0)):][int(4.0):][:i1] in \"\"\"\\\\\"S6I!\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1, 1], [2, 2, 0, 1, 0, 1], [0, 2], [1, 1, 1, 1], [0], [0, 0], [], [], [2], [2], [1, 0], [0], [], [1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [3, 5, 8, 7, 3, 3, 4, 8, 0, 1], [0, 2, 2, 0, 0, 1, 1, 2], [1, 0, 1, 0], [3, 0, 3, 3, 1, 2, 1, 0, 2, 3, 1, 3, 1, 0, 1, 1, 1, 2, 0, 1, 3, 1, 2, 1, 0, 3, 3], [0, 1, 0, 1, 0, 0], [0, 4, 0, 0, 4, 4, 3, 2, 4], [1, 2, 2, 1, 0], [0, 0], [4, 3, 1], [1, 1], [0], [1, 2, 4, 0, 2, 1, 4, 0, 0, 0], [2, 3, 2], [2], [2, 1], [0, 2], [20], [], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 6, 3, 17, 2, 5, 3, 1, 2, 2, 1, 6, 1, 0, 2, 2, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in \"\"U\"\":{:\\nloopBreak% = 0\\nwhile min(i0, saveOrd(in0.capitalize()[min(int(3.0), ( int(5.0) - i2 )):])) == divInt(min(int(8.0), saveOrd(\"\"9\"\"[:int(7.0)])),i2):{:\\ni0 *= int(3.0)\\ni0 = int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 3, 0, 0, 0, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 3, 1, 0, 1, 1, 1, 3, 2, 1, 1, 3, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 0, 4, 0, 0, 1, 4, 4, 1, 4, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [13], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 12, 0, 55, 15, 13, 11, 4, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(max(i0, i0), max(mod(i2,int(0.0)), ( ( min(int(7.0), ( ( ( int(5.0) + i0 ) + ( saveOrd(in1) * ( i1 - min(min(divInt(int(7.0),i2), ( max(int(7.0), i1) + int(1.0) )), saveOrd(in1[i2:])) ) ) ) * i0 )) - i0 ) - int(7.0) ))):]:{:\\nres0 = s1.endswith(getCharFromString(s0[saveOrd(saveChr(divInt(max(i2, divInt(( ( int(7.0) * int(9.0) ) + saveOrd((\"\"N\"\" + in1.rstrip())) ),int(8.0))),i2))):int(5.0)], int(0.0))[int(4.0):abs(( int(8.0) + int(59.0) ))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2, 1], [0], [2, 0, 3, 0, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [0, 2, 2, 5], [0, 1], [], [3, 4, 1, 4, 0, 0, 0], [1, 3, 2], [4], [], [2, 3], [], [], [1], [22]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 1, 1, 1, 0, 1, 2, 0, 3, 1, 0, 0, 2, 0, 0, 1, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (saveChr(( i1 - max(i2, i1) )) + \"\"1=\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 2, 3, 0, 4], [1], [0], [1, 0, 0, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [6], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"G\"\":{:\\nres0 = in2 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [2, 1, 1, 0, 1, 1, 2, 1, 2, 1, 2, 1, 0, 1], [1, 1, 2, 2], [1, 0, 2, 1, 2, 1, 2, 2, 0, 1], [], [0, 0], [], [], [2, 0, 2], [1, 1], [2, 2, 1, 2, 0, 0, 1], [0, 0], [3, 3, 4], [2, 0], [], [], [1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 1, 2, 6, 8, 9, 1, 8, 5, 1, 2, 7, 2, 2, 3, 7, 5, 6, 5, 5, 6, 2, 9, 6, 4, 3, 3, 3, 7, 8, 4, 9, 5, 6, 5, 5, 4, 2, 3, 0, 9, 6, 2, 8, 4, 7, 8, 4, 1, 6, 4, 5, 0, 3, 8, 0, 9, 8, 9, 4, 0, 8, 3, 5, 3, 7, 4, 6, 2, 2, 7, 6, 4, 1, 2], [0, 2, 1, 1, 0, 0, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 0, 0, 2, 2, 1, 0, 0, 2, 2, 2, 2, 0, 2, 1, 1, 0, 1, 0, 1, 2, 2, 1, 2, 2, 0, 1, 1, 0, 2, 2, 1, 0, 0, 1, 0, 0, 0, 2, 2, 2, 0], [1, 0, 1, 1], [3, 1, 1, 2, 3, 3, 2, 1, 2, 1, 0, 3, 2, 2, 0, 2, 1, 2, 3, 2, 3, 3, 2, 2, 3, 3, 1, 1, 3, 1, 1, 3, 0, 0, 1, 0, 3, 2, 3, 3, 2, 3, 0, 1, 0, 2, 0, 3, 0, 0, 0, 0, 3, 3, 1, 2, 3, 3, 1, 0, 0, 2, 1, 0, 1, 0, 0, 2, 0, 1, 3, 1, 0, 1, 2, 0, 1, 2, 1, 3, 0, 1, 2, 0, 2, 1, 1, 2, 1, 2, 2, 0, 2, 2, 1, 1, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 1, 3, 0, 1, 2, 1, 2, 2, 2, 1, 0, 1, 2, 3, 3, 1, 2, 3, 1, 1, 3, 0, 3, 0, 2, 1, 3, 3, 0, 0, 1, 0, 0, 3, 1, 2, 2, 3, 2, 2, 0, 3, 0, 2, 0, 0, 2, 2, 2, 2, 0, 2, 0, 1, 1, 2, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 1, 1, 2, 3, 0, 0, 1, 1, 1, 2, 1, 1, 2, 0, 1, 2, 0, 3, 2, 3, 3, 1, 1, 2, 2, 2, 2, 3, 3, 2, 0, 2, 3, 2, 0, 1, 1, 1, 2, 0, 1, 1, 3, 1, 3, 1, 1, 0, 0, 0, 3, 0, 2, 3, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1], [3, 3, 0, 4, 0, 2, 0, 3, 3, 0, 1, 1, 4, 2, 2, 0, 2, 4, 0, 1, 3, 2, 1, 0, 4, 2, 3, 2, 0, 4, 1, 2, 0, 1, 4, 0, 2, 0, 0, 4, 4, 2, 3, 3, 2, 4, 2], [1, 1, 0, 1, 0, 2, 0, 0, 0, 1, 2, 2, 0, 0, 2, 0, 1, 0, 2, 2, 1, 1, 2, 1, 0, 0, 2, 0, 0, 2, 2, 2, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 5, 4, 2, 1, 4, 4, 3, 2, 1, 5, 4, 3, 5, 5, 0, 4, 5, 2, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [0, 2, 0, 2, 0, 0, 0, 3, 0, 3, 0, 1, 1, 1, 2, 2, 0, 4, 0, 2, 2, 4, 0, 2, 1, 1, 1, 0, 4, 2, 0, 2, 3, 2, 3, 2, 4, 4, 0, 2, 2, 4, 1, 1, 4, 1, 2, 2, 2, 4, 0, 1, 4, 0, 4, 2, 2, 4, 4, 4, 2, 4, 0, 0, 2, 1, 4, 4, 4, 0], [3, 3, 2, 3, 0, 3, 1, 1, 1, 1, 0, 2, 0, 3, 3, 1, 2], [5, 5, 2, 5, 0, 0], [1, 0, 2, 0, 1, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 0, 0, 2, 2, 0], [0, 2, 0, 1, 0, 3, 2, 3, 3, 1, 0, 0, 1, 0, 0, 1, 3], [11, 21, 18, 2, 16, 25, 17], [6, 17, 9, 11], [3, 7], [10, 16, 20, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 14, 14, 4, 10, 0, 2, 0, 0, 3, 2, 7, 2, 3, 2, 0, 0, 2, 75, 75, 57, 4, 231, 69, 47, 34, 38, 22, 17, 0, 70, 17, 6, 20, 17, 7, 4, 2, 4], "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0 != s0[:len(in2[int(712.0):int(689185.0)])]:{:\\ni0 -= ( len(in1) - min(( int(12.0) + mod(int(7.0),i2) ), saveOrd(s2)) )\\nb2 = (s1 + (in1 + \"\"L\"\")) != \"\"3\"\"\\nin1 = \"\"VgS\"\\\\\"7-;\"\"\\ni1 = ( mod(i1,divInt(int(2237.0),mod(min(divInt(abs(min(( mod(len(in0[len(s2.strip(s1.strip(\"\"r\"\"[:int(5.0)])[int(6.0):min(int(5.0), int(5.0))][:max(i0, i0)])):int(6.0)][i2:]),max(( saveOrd(\"\"C\"\") - abs(divInt(abs(i2),int(2.0))) ), i1)) + ( i1 * min(i1, i2) ) ), i1)),i1), abs(saveOrd(\"\"Q\"\"))),int(96.0)))) + divInt(min(max(int(43.0), i2), i1),( int(3.0) + i0 )) )\\n:}else:{:\\nin2 = in1\\nif int(3.0) \\g i0:{:\\ni2 += i2\\n:}else:{:\\nloopBreak% = 0\\nwhile in0[:( i1 - int(7.0) )].capitalize().startswith(((getCharFromString(in2, len(\"\"j\"\".strip(\"\"Z\"\")[int(8.0):i0][int(4.0):])).strip()[( i0 * int(9.0) ):] + saveChr(mod(int(5.0),abs(i2))))[int(6.0):( i2 * mod(int(5.0),int(5.0)) )] + \"\"R\"\")[:divInt(int(4.0),( ( i2 + ( ( int(2.0) + int(3.0) ) * int(0.0) ) ) + max(int(9.0), divInt(( ( mod(divInt(mod(( divInt(i2,i0) - int(6.0) ),min(i2, int(2.0))),divInt(int(8.0),( ( mod(int(4.0),i1) + int(7.0) ) * ( saveOrd(saveChr(abs(int(8.0)))[divInt(len(in2),int(4.0)):int(1.0)][abs(i1):min(i0, divInt(int(6.0),saveOrd(\"\"l\"\")))][:max(i1, i0)]) * int(4.0) ) ))),i1) - i2 ) - abs(int(5.0)) ),mod(mod(min(( ( i2 * max(i1, ( i2 - i2 )) ) + mod(divInt(mod(mod(i0,( i1 + int(0.0) )),int(3.0)),divInt(( int(8.0) * i1 ),( i0 + ( int(0.0) + saveOrd(saveChr(mod(min(int(9.0), int(8.0)),mod(abs(i2),i2)))) ) ))),int(9.0)) ), int(4.0)),int(0.0)),mod(int(8.0),int(3.0))))) ))]):{:\\ns0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile not b0:{:\\nin2 = saveChr(mod(i1,int(5.0)))\\nb2 = divInt(i0,min(mod(min(saveOrd(getCharFromString(getCharFromString(s2.lstrip()[int(3.0):], int(7.0)).capitalize(), divInt(divInt(( mod(saveOrd(s1),abs(mod(i0,( len(\"\"*\"\"[( i1 * int(4.0) ):int(6.0)]) * int(2.0) )))) * ( i0 + int(2.0) ) ),int(7.0)),len(saveChr(int(6.0)).lstrip())))[abs(int(4.0)):][int(1.0):i0]), i0),i2), saveOrd(s0.capitalize()))) \\g i2\\ni2 += divInt(abs(int(2.0)),i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 2, 1, 2, 2, 1, 1, 2, 0, 1, 0, 2, 0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 0], [1, 1, 0, 2, 1, 2, 0, 1, 2, 0, 1], [1, 2, 0, 1, 0, 1, 2, 2, 2, 2, 0, 0, 1, 1], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [], [], [2, 2, 3, 1, 1, 1], [2, 3, 2, 1], [1, 0, 2, 0, 1, 0, 2, 1, 0, 0, 2, 2, 1, 0], [0, 0, 0, 0], [1, 4, 2, 3], [2, 0, 0, 2, 1, 1], [], [0, 0], [0, 1, 0, 1, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [8, 5, 3, 1, 4, 4, 9, 3, 4, 9, 3, 1, 0, 1, 8, 8, 2, 0, 3, 5, 5, 7, 5, 0, 8, 6, 6, 7, 0, 4, 1, 0, 4, 0, 3, 5, 8, 4, 7, 1, 8, 8, 6, 5, 6, 7, 9, 6, 8, 5, 5, 3, 6, 7, 6, 9, 7, 6, 2, 0, 0, 6, 2, 1, 3, 1, 1, 0, 5, 9, 8, 3, 8, 2, 4, 3, 5, 1, 2, 8, 0, 9, 9, 6, 1, 7, 7, 5, 6, 6, 3], [2, 2, 2, 1, 1, 2, 0, 2, 0, 1, 2, 0, 2, 1, 2, 2, 0, 2, 0, 2, 2, 0, 2, 2, 0, 0, 1, 0, 0, 2, 0, 0, 1, 2, 0, 2, 2, 2, 0, 2, 1, 2, 0, 2, 1, 1, 0, 1, 0, 2, 2, 0, 1, 1, 1, 2, 0, 2, 0, 1, 1, 2, 2, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 2, 0, 2, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 2], [1, 0, 1, 0, 0], [1, 0, 2, 1, 2, 3, 1, 2, 1, 1, 2, 1, 0, 3, 0, 3, 3, 1, 3, 3, 2, 2, 0, 1, 3, 2, 0, 2, 0, 2, 0, 0, 1, 0, 3, 2, 2, 3, 2, 1, 3, 2, 1, 1, 2, 0, 1, 3, 2, 3, 1, 2, 1, 2, 1, 3, 2, 1, 0, 0, 0, 2, 1, 3, 2, 2, 3, 0, 1, 1, 3, 0, 3, 1, 1, 1, 2, 2, 0, 2, 2, 0, 0, 3, 0, 3, 3, 3, 1, 2, 0, 0, 2, 2, 2, 2, 2, 0, 2, 0, 3, 0, 0, 0, 0, 2, 2, 3, 2, 3, 2, 3, 0, 1, 3, 3, 0, 1, 2, 2, 0, 1, 1, 2, 3, 0, 2, 0, 2, 3, 3, 2, 2, 1, 0, 0, 1, 0, 3, 1, 0, 3, 2, 2, 0, 2, 2, 3, 0, 1, 0, 2, 2, 2, 3, 1, 2, 3, 2, 0, 3, 2, 1, 3, 3, 1, 0, 2, 0, 0, 3, 3, 2, 1, 3, 3, 3, 0, 1, 2, 1, 2, 0, 2, 0, 3, 2, 2, 0, 3, 3, 2, 1, 2, 1, 1, 0, 0, 1, 1, 3, 1, 3, 3, 1, 1, 2, 1, 1, 2, 0, 3, 1, 0, 2, 2, 3, 3, 3, 0, 1, 2, 3, 3, 2, 3, 0, 0, 2, 2, 0, 3, 0, 1, 0, 3, 1, 0, 1, 0, 1, 3, 1, 3, 2, 2, 2, 3, 0, 3, 2, 2, 3, 0, 2, 0, 3, 2, 0, 1, 1, 0, 1, 3, 2, 2, 0, 1, 2, 0, 1, 1, 0, 1, 3, 0, 0, 2, 1, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 2, 0, 1, 1, 2, 1, 0, 2, 1, 1, 1, 2, 3, 1, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 3, 0, 2, 2, 1, 2, 0, 1, 1, 3, 1, 0, 0, 2, 2, 0, 0, 0, 1, 2, 3, 1, 0, 3, 2, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 4, 4, 0, 4, 4, 1, 1, 1, 2, 0, 4, 2, 4, 4, 4, 1, 3, 3, 0, 3, 0, 4, 2, 4, 0, 0, 3, 4, 0, 2, 3, 3, 4, 0, 3, 3, 4, 0, 4, 4, 3, 0, 0, 0, 2, 2, 2, 4, 1, 3, 1, 1, 0, 0, 4, 0, 3, 4, 1, 0, 4, 2, 0, 1, 3, 2, 3, 1, 1, 4, 3, 0, 1], [1, 2, 2, 2, 1, 0, 1, 2, 2, 2, 2, 0, 0, 1, 1, 2, 1, 1, 0, 1, 2, 2, 0, 0, 2, 2, 2, 0, 1, 0, 2, 0, 2, 1, 0, 1, 1, 0, 2, 0, 2, 1, 0, 1, 0, 2, 1, 0, 2, 0, 0, 1, 2, 2, 2, 0], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 4, 4, 1, 5, 5, 5, 3, 0, 4, 1, 3, 5, 1, 0, 3, 2, 4, 3, 1, 0, 1, 5, 5, 4, 2, 2, 0, 1, 1, 4, 4, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0], [4, 1, 0, 1, 3, 4, 1, 2, 4, 0, 2, 4, 0, 0, 2, 4, 0, 4, 4, 2, 4, 2, 1, 1, 1, 1, 0, 3, 1, 1, 4, 1, 0, 4, 1, 1, 3, 4, 2, 4, 4, 4, 2, 0, 2, 1, 4, 0, 2, 0, 4, 2, 4, 4, 4, 4, 2, 0, 1, 1, 4, 1, 0, 1, 1, 1, 0, 0, 2, 2, 1, 2, 2, 2, 2, 4, 4, 0, 0, 0, 4, 2, 2, 0, 0, 2, 2, 2, 2, 2, 4, 2, 4, 1, 2, 0, 1, 2, 0, 0, 4, 4, 4, 4, 2, 2, 4, 0, 0, 1, 2, 0, 0], [3, 1, 1, 3, 2, 0, 1, 1, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 3, 1, 3, 2, 1, 2, 2, 1, 0, 2, 2, 3, 1], [5, 5, 5, 1, 4, 0, 5, 0], [2, 0, 2, 2, 0, 1, 1, 0, 1, 2, 0, 2, 1, 2, 2, 2, 1, 0, 1, 2, 0, 2, 0, 1, 1, 1, 2, 0, 1, 0], [0, 3, 2, 2, 0, 3, 3, 1, 2, 0, 2, 2, 3, 3, 3, 3, 3, 3, 2, 1, 0, 0, 3, 2, 1, 1, 1, 2, 0, 2, 0, 0, 2], [19, 25, 3, 14, 16, 22, 2, 15], [14, 21, 12, 10, 20], [0, 8, 9, 9, 8, 6, 1, 1, 4, 8], [9, 27, 19, 31, 25, 27, 12, 19, 3, 27]], "fitness": 9223372036854775807, "mapping_values": [1, 25, 25, 11, 14, 3, 8, 0, 0, 6, 4, 14, 4, 4, 6, 0, 2, 5, 91, 91, 92, 5, 344, 101, 76, 56, 47, 34, 33, 3, 113, 31, 8, 30, 33, 8, 5, 10, 10], "tree_depth": 71, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(8.0)\\nif i2 == ( int(531.0) * divInt(max(int(449.0), ( int(3.0) * int(49.0) )),( int(31.0) * i2 )) ):{:\\nin0 = \"\"T&08Z\\\\\\\\\"\".strip(s0)\\nif not \"\":o9D\"\" not in (saveChr(min(i1, max(saveOrd(\"\"9\"\"), int(0.0)))) + saveChr(saveOrd(in1))[min(( ( i1 - int(1.0) ) + saveOrd(in1.strip(s1)[( i2 - mod(i0,divInt(i2,i0)) ):int(8.0)]) ), i1):]):{:\\nloopBreak% = 0\\nfor in2 in in2.capitalize()[saveOrd(getCharFromString(saveChr(mod(( max(mod(int(8.0),max(( int(2.0) * int(0.0) ), ( i2 * int(3.0) ))), max(( abs(int(5.0)) * divInt(int(5.0),( int(7.0) * min(mod(int(5.0),i0), i2) )) ), i1)) + ( int(0.0) + saveOrd(saveChr(( mod(abs(i2),int(8.0)) - int(6.0) ))[saveOrd(\"\"8\"\"[i2:saveOrd(\"\"`\"\")]):]) ) ),int(6.0))), int(7.0))):]:{:\\nb2 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(0.0)\\nloopBreak% = 0\\nwhile ( ( i2 - mod(mod(i0,i2),saveOrd(\"\"@\"\")) ) * i2 ) \\ge max(len(\"\"\\\\\\\\\"\"), len(in2)):{:\\nres0 = b1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 -= int(41.0)\\nin0 = (\"\")\"\" + \"\":\"\")\\nif getCharFromString(\"\"6v\"\", divInt(i2,i2)).startswith(s0):{:\\nin1 = \"\"O\"\".strip(\"\"Q\"\")\\ns1 = (saveChr(( ( ( mod(( i0 - divInt(i0,min(i1, i0)) ),i0) + i2 ) - ( ( len(in0[:mod(min(( saveOrd(\"\"\\\\\\\\\"\"[i0:int(0.0)]) * abs(saveOrd(in2.capitalize())) ), i0),int(4.0))]) * ( ( i1 + int(0.0) ) + int(3.0) ) ) * ( min(i2, divInt(i0,mod(min(len(s1[:mod(divInt(int(5.0),i2),i2)]), int(8.0)),i2))) * saveOrd(getCharFromString(getCharFromString(getCharFromString(saveChr(int(4.0)).lstrip(), i0), min(mod(divInt(i2,( ( abs(i1) * int(7.0) ) + i2 )),mod(mod(mod(len(s0[int(1.0):( len(\"\"1\"\") - ( i0 + saveOrd(\"\"m\"\") ) )]),mod(int(8.0),min(len(\"\"k\"\".strip(in0)), int(8.0)))),i2),( i1 * i1 ))), len(\"\"u\"\")))[saveOrd(\"\"1\"\"):], divInt(int(6.0),min(saveOrd(\"\"W\"\"), saveOrd(s2))))) ) ) ) + i0 )).capitalize().rstrip(in1)[:int(5.0)].rstrip() + \"\"4\"\"[:( int(6.0) * ( i1 - mod(i0,len(saveChr(divInt(divInt(i2,min(min(( int(7.0) + ( int(9.0) - int(6.0) ) ), i2), i0)),int(8.0))).capitalize()[:int(5.0)][min(int(5.0), abs(abs(int(3.0)))):][int(6.0):][( int(7.0) - int(6.0) ):])) ) )][mod(i1,abs(int(9.0))):])\\n:}\\n:}else:{:\\nloopBreak% = 0\\nwhile i1 == divInt(divInt(saveOrd(in0),max(len(s1), i1)),int(76.0)):{:\\nloopBreak% = 0\\nfor s0 in s1:{:\\nif not True:{:\\nloopBreak% = 0\\nwhile in2[:( max(max(( min(i2, i0) + ( ( i2 * min(i0, int(2.0)) ) + i1 ) ), saveOrd(in2)), int(0.0)) * i1 )][int(0.0):i2].capitalize() == saveChr(int(6.0))[:min(int(2.0), len(\"\"C\"\"))].capitalize()[:divInt(mod(( saveOrd(in1[:i2]) - max(mod(( min(i1, ( i1 + saveOrd(\"\"P\"\") )) - ( i1 + int(1.0) ) ),int(3.0)), i1) ),int(1.0)),abs(mod(mod(i0,int(1.0)),( i2 * int(0.0) ))))][int(5.0):i1][int(9.0):][min(i1, i1):divInt(int(8.0),i1)][max(int(3.0), len(s2[abs(len(s2)):])):]:{:\\ns0 = getCharFromString(saveChr(i2)[:mod(divInt(( int(8.0) - divInt(i0,int(2.0)) ),int(4.0)),divInt(int(3.0),i2))][( int(5.0) + int(1.0) ):int(2.0)].lstrip().capitalize().capitalize(), mod(max(int(8.0), divInt(i1,max(( ( ( i1 * i0 ) + ( divInt(saveOrd(s1),i1) + ( divInt(int(0.0),mod(i1,int(9.0))) - int(9.0) ) ) ) * len(s1) ), int(6.0)))),i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nfor in1 in \"\"8\"\":{:\\nif in1[i0:( ( i0 * i1 ) * i1 )] != s1:{:\\nb1 = int(1.0) \\g mod(min(int(7.0), i2),max(( i1 + int(7.0) ), i2))\\n:}else:{:\\nb1 = True\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\ni2 = int(5663.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 2, 0, 0, 1, 0, 1, 2], [0, 1, 1], [2, 2, 0, 1, 2, 0, 3, 0, 2, 3, 1, 3, 3, 2, 1, 3, 0, 3, 1, 0, 2, 3, 0, 3, 1, 3, 3, 2, 0, 1, 2, 3, 0, 3, 0, 1, 3, 3, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 2, 3, 0, 1, 2, 1, 0, 3, 3, 0, 2], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 2, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 1, 0, 0, 1, 2], [0, 2], [17], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 10, 0, 40, 8, 14, 3, 5, 7, 2, 1, 17, 3, 2, 6, 2, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(divInt(i0,int(0.0)),divInt(i2,len(in1[i0:divInt(len(in1[int(7.0):].rstrip()[:abs(abs(( int(5.0) * len(saveChr(i0)) )))][min(int(7.0), i1):divInt(max(i2, abs(int(7.0))),max(min(( i1 - int(1.0) ), ( len((\"\"R\"\" + in0.lstrip())) * i0 )), len(\"\"6\"\")))]),i2)][:int(7.0)]))):min(abs(int(7.0)), i0)]:{:\\ns0 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [2, 2, 0, 2, 0, 1, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 1, 1, 0, 0, 2, 2, 2, 1, 2, 2], [1, 1, 2, 2, 1, 1, 2, 2, 2, 1], [0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [1], [2, 3, 4, 4, 5], [2, 0, 1, 0, 2, 1, 1, 0, 0, 1, 1, 2, 2, 0, 2, 2], [0, 0, 0, 0, 0], [5, 4, 1, 0, 5, 5], [3, 0, 3, 3, 2], [1, 1, 1], [], [1, 1, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 7, 6, 1, 3, 0, 8, 8, 0, 3, 2, 3, 8, 4, 7, 3, 9, 1, 8, 8, 1, 7, 3, 1, 7, 7, 8, 4, 5, 4, 7, 1, 4, 8, 0, 8, 0, 5, 1, 6, 8, 0, 7, 0, 5, 3, 4, 7, 3, 1, 4, 1, 4, 1, 8, 7, 5, 0, 9, 2, 2, 6, 6, 4, 7, 3, 2, 4, 7, 0, 0, 3, 8, 3, 6, 5, 9, 6, 6, 7, 6, 2, 9, 5, 5, 8, 4, 9, 6, 7, 7, 0, 5, 3, 4, 4, 8, 5, 0, 8, 9, 5, 4, 1, 3, 5, 1, 9, 8, 7, 9, 6, 1, 1, 6, 5, 4, 7, 2, 7, 3, 7, 0, 0, 8, 6, 5, 4, 2, 6, 7, 0, 7, 3, 7, 7, 9, 2, 1, 5, 8, 0, 5, 0, 4, 3, 4, 8], [0, 2, 0, 1, 1, 0, 0, 1, 0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 1, 1, 1, 0, 0, 1, 2, 0, 1, 2, 1, 1, 2, 0, 0, 0, 1, 1, 2, 2, 2, 2, 1, 2, 0, 0, 0, 2, 0, 1, 0, 0, 1, 2, 0, 1, 2, 0, 2, 2, 2, 0, 1, 1, 0, 0, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 0, 0, 0, 2, 1, 1, 2, 0, 2, 0, 0, 0, 2, 0, 1, 1, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 1, 0, 0, 2, 2, 2, 1, 0, 0, 2, 2, 0, 0, 1, 1, 2, 1, 2, 2, 0, 2, 2, 2, 0, 1, 1, 2, 2, 2, 0, 0, 2, 0, 2, 1, 2, 2, 0, 2, 1, 0, 0, 2, 1], [0, 1, 1, 0, 1], [2, 1, 3, 2, 2, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 1, 0, 1, 3, 2, 2, 2, 0, 2, 1, 2, 3, 2, 3, 0, 1, 0, 3, 2, 2, 0, 0, 2, 3, 0, 2, 1, 2, 3, 2, 0, 2, 2, 1, 1, 2, 1, 2, 0, 2, 2, 1, 3, 1, 2, 0, 0, 2, 2, 3, 0, 3, 1, 3, 1, 3, 0, 2, 0, 2, 2, 0, 3, 0, 0, 1, 3, 2, 0, 2, 0, 1, 1, 3, 2, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 3, 3, 0, 2, 0, 1, 3, 2, 1, 1, 0, 2, 1, 3, 1, 3, 3, 0, 1, 0, 2, 1, 3, 0, 3, 1, 3, 1, 2, 2, 0, 3, 1, 0, 3, 2, 3, 1, 0, 2, 3, 0, 2, 1, 2, 2, 3, 1, 3, 1, 2, 3, 3, 2, 1, 3, 1, 3, 3, 1, 3, 1, 2, 1, 0, 1, 1, 1, 3, 0, 2, 2, 0, 2, 2, 2, 0, 2, 3, 2, 0, 0, 2, 1, 2, 2, 0, 1, 3, 2, 3, 3, 3, 1, 2, 2, 1, 0, 2, 3, 0, 1, 2, 3, 0, 0, 2, 0, 2, 2, 1, 0, 1, 0, 3, 1, 3, 0, 1, 2, 2, 1, 3, 3, 1, 0, 3, 2, 0, 3, 2, 0, 0, 2, 2, 0, 3, 2, 0, 0, 3, 3, 1, 0, 1, 0, 3, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2, 1, 3, 2, 1, 1, 2, 3, 2, 2, 1, 1, 2, 2, 0, 2, 2, 2, 3, 1, 1, 0, 2, 2, 0, 2, 0, 3, 0, 2, 1, 1, 2, 1, 1, 0, 0, 2, 0, 0, 0, 3, 3, 2, 2, 3, 0, 3, 1, 1, 2, 0, 3, 2, 0, 2, 2, 1, 1, 3, 3, 3, 0, 3, 3, 1, 2, 3, 3, 1, 0, 0, 2, 0, 0, 2, 3, 3, 1, 3, 2, 0, 3, 0, 0, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 1, 3, 1, 2, 2, 2, 2, 2, 3, 3, 2, 0, 0, 3, 3, 0, 3, 3, 0, 1, 1, 2, 0, 1, 0, 3, 3, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 1, 0, 0, 2, 2, 1, 3, 2, 0, 3, 0, 3, 0, 1, 2, 1, 1, 3, 2, 0, 3, 2, 2, 3, 0, 3, 3, 3, 3, 0, 3, 0, 0, 3, 2, 3, 0, 3, 3, 0, 0, 0, 2, 0, 3, 2, 1, 3, 2, 0, 0, 1, 2, 1, 2, 1, 3, 1, 0, 3, 2, 2, 0, 0, 1, 2, 0, 0, 2, 2, 1, 1, 1, 2, 1, 0, 0, 2, 2, 2, 1, 2, 3, 3, 1, 2, 2, 2, 3, 3, 3, 2, 0, 1, 3, 2, 2, 2, 2, 1, 0, 3, 0, 2, 2, 1, 2, 0, 3, 1, 3, 2, 1, 3, 3, 1, 1, 1, 2, 3, 2, 0, 2, 3, 2, 0, 1, 2, 3, 3, 1, 1, 0, 2, 0, 1, 0, 2, 3, 0, 3, 1, 3, 2, 1, 1, 3, 1, 2, 1, 2, 0, 3, 2, 1, 2, 1, 3, 1, 3, 3, 1, 2, 2, 2, 0, 0, 2, 1, 2, 1, 3, 2, 1, 2, 2, 0, 3, 0, 0, 2, 0, 2, 2, 2, 3, 0, 1, 0, 0, 2, 3, 1, 0, 0, 3, 2, 0, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [3, 3, 3, 3, 0, 3, 1, 4, 3, 4, 2, 1, 3, 3, 3, 3, 3, 4, 3, 1, 0, 0, 3, 4, 4, 0, 0, 2, 0, 2, 4, 2, 0, 0, 0, 2, 2, 1, 1, 4, 3, 2, 0, 0, 1, 0, 0, 4, 3, 0, 1, 3, 4, 3, 1, 1, 1, 1, 3, 2, 4, 4, 4, 4, 1, 1, 0, 1, 0, 4, 0, 3, 3, 3, 2, 4, 0, 2, 0, 4, 3, 3, 4, 1, 0, 4, 4, 4, 4, 4, 2, 1, 1, 2, 3, 1, 4, 2, 1, 0, 3, 1, 4, 4, 0, 2, 1, 3, 0, 4, 2, 2, 0, 2, 3, 3, 4, 1, 2, 2, 3, 4, 4, 4, 4, 0, 2, 3, 1, 3, 3, 2, 2, 3, 0, 1, 1], [1, 1, 1, 1, 1, 2, 2, 1, 2, 0, 0, 1, 0, 2, 1, 1, 1, 0, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 2, 2, 2, 2, 0, 1, 1, 2, 2, 2, 1, 1, 1, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 2, 2, 2, 0, 0, 2, 0, 2, 2, 0, 2, 2, 2, 0, 0, 2, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [3, 2, 3, 3, 2, 4, 0, 4, 4, 2, 1, 4, 0, 1, 5, 5, 0, 1, 0, 0, 2, 2, 2, 0, 5, 2, 4, 5, 0, 0, 0, 2, 3, 5, 3, 1, 1, 5, 1, 1, 1, 2, 4, 0, 3, 3, 5, 0, 4, 2, 4, 1, 1, 4], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0], [0, 2, 2, 4, 2, 3, 2, 0, 1, 4, 2, 0, 4, 2, 0, 0, 4, 0, 3, 4, 2, 2, 1, 1, 0, 4, 1, 3, 0, 4, 1, 4, 2, 4, 2, 2, 2, 1, 4, 4, 1, 0, 1, 0, 4, 4, 2, 0, 1, 1, 1, 4, 4, 0, 0, 1, 4, 3, 3, 2, 0, 0, 4, 3, 4, 3, 2, 4, 0, 2, 1, 1, 4, 4, 3, 2, 2, 1, 0, 4, 2, 4, 0, 0, 0, 4, 2, 0, 4, 1, 2, 4, 0, 1, 2, 0, 0, 1, 0, 0, 2, 1, 2, 4, 2, 2, 4, 1, 4, 2, 4, 2, 0, 0, 4, 4, 2, 2, 1, 1, 1, 2, 0, 1, 0, 2, 2, 4, 1, 2, 4, 2, 0, 4, 0, 2, 4, 1, 2, 4, 4, 2, 1, 4, 2, 1, 2, 0, 1, 4, 0, 2, 4, 1, 0, 1, 0, 2, 4, 2, 2, 0, 4, 1, 4, 4, 1, 2, 2, 1, 0, 2, 4, 2, 1, 1, 2, 0, 2, 2, 4, 4, 2, 2, 2, 0, 0, 2, 4, 1, 4, 4, 1, 1, 0, 2, 0, 1, 2, 4, 4, 4, 4, 1, 1, 2, 0, 0, 2, 1, 0, 0], [2, 0, 3, 3, 3, 3, 2, 3, 0, 1, 2, 0, 0, 2, 0, 1, 3, 1, 2, 1, 2, 2, 1, 2, 3, 0, 3, 0, 1, 2, 3, 3, 2, 0, 1, 1, 0, 0, 3, 1, 3, 3, 1, 3, 2, 2, 0, 1, 0, 3, 0, 2, 0, 0, 0], [4, 0, 4, 3, 0, 3, 5, 3, 5, 1, 5, 5, 2, 2, 4], [1, 0, 0, 1, 2, 2, 2, 0, 1, 1, 1, 2, 0, 1, 2, 1, 0, 1, 1, 0, 0, 1, 2, 0, 2, 1, 0, 2, 1, 1, 0, 1, 0, 2, 0, 2, 0, 1, 2, 0, 1, 1, 1, 2, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 2, 0, 1], [1, 2, 1, 3, 2, 3, 1, 1, 0, 3, 0, 3, 3, 2, 0, 2, 3, 2, 1, 3, 1, 0, 3, 2, 2, 2, 0, 0, 1, 2, 3, 0, 2, 2, 2, 1, 2, 1, 2, 1, 3, 0, 0, 0, 2, 3], [1, 6, 22, 0, 12, 25, 23, 6, 4, 7], [24, 7, 23, 19, 2, 5, 16, 20, 0, 3], [6, 8, 1, 0, 8, 0, 6, 5, 2, 7, 0, 4, 2, 9, 4], [28, 19, 22, 30, 15, 2, 21, 23, 15, 4, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 21, 21, 11, 10, 2, 7, 0, 0, 1, 5, 16, 5, 6, 5, 3, 0, 3, 148, 148, 149, 5, 602, 178, 137, 87, 94, 54, 46, 2, 212, 55, 15, 59, 46, 10, 10, 15, 11], "tree_depth": 95, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in0.endswith((s2[:( int(5.0) - len(\"\"y\"\") )] + getCharFromString(in0[mod(divInt(len(in0[len(s2):].rstrip(in1.lstrip())),i0),i2):], int(76.0)))[len((\"\"6\"\"[( min(int(1.0), int(3.0)) - i0 ):i1][i1:].rstrip(\"\"h\"\") + s0)):i0].capitalize()[divInt(int(0.0),int(880.0)):int(3.0)][:i0]):{:\\nif ( int(2.0) == len(\"\"]8:\"\".lstrip((in1 + \"\"x\"\".capitalize()))) or b1 ):{:\\ni1 = ( ( divInt(i0,divInt(int(3.0),( max(divInt(saveOrd(getCharFromString(\"\"t\"\"[i1:][:int(8.0)][:i2], len(saveChr(mod(( i0 - i1 ),divInt(saveOrd(\"\"B\"\".capitalize()),i2)))))[:divInt(int(4.0),( abs(divInt(i2,mod(( int(7.0) - int(3.0) ),( int(9.0) - divInt(i0,( ( int(1.0) * max(int(8.0), ( i2 * i2 )) ) - ( ( len(in1) * i2 ) + len(\"\"=\"\") ) )) )))) + int(8.0) ))].lstrip()),len(s2)), int(1.0)) - len(getCharFromString(getCharFromString(s1[i1:mod(i1,( mod(i1,len(\"\"G\"\")) + i0 ))], i0), int(7.0))) ))) * saveOrd(\"\"_\"\") ) - ( i1 - ( i2 - int(3.0) ) ) )\\nif \"\",\"\".startswith(getCharFromString(in1, int(1.0)).capitalize()):{:\\ni0 += len(s0)\\n:}else:{:\\ns1 = \"\"1\"\"\\nin2 = saveChr(divInt(max(min(int(7.0), int(7.0)), int(8.0)),int(4.0)))\\n:}\\ni1 += int(54.0)\\ni2 = int(7.0)\\n:}else:{:\\nin2 = ((s0[:int(14.0)] + s1) + (saveChr(int(8.0)) + (s0.capitalize()[int(0.0):] + \"\"W\"\"[:int(8.0)])).lstrip(\"\"0\\\\\\t\"\"))\\nloopBreak% = 0\\nfor s0 in saveChr(i1):{:\\nloopBreak% = 0\\nfor s2 in (\"\"8\"\"[:mod(int(0.0),min(len(s2), i1))][divInt(i2,int(5.0)):saveOrd(saveChr(divInt(int(1.0),int(6.0)))[:i0].capitalize())] + s2).capitalize():{:\\nloopBreak% = 0\\nwhile ( int(8.0) * saveOrd(s0) ) \\ge int(0.0):{:\\nloopBreak% = 0\\nwhile min(min(i0, int(7.0)), i0) \\le ( int(0.0) * abs(i1) ):{:\\nloopBreak% = 0\\nwhile ( ( min(int(5.0), abs(int(3.0))) \\le ( divInt(i1,saveOrd(in2)) - int(4.0) ) or i2 != abs(divInt(min(int(7.0), i2),( min(i2, mod(int(3.0),( ( min(int(1.0), abs(int(4.0))) * divInt(abs(max(( int(1.0) * max(int(4.0), saveOrd(s2[len(\"\"c\"\".strip(getCharFromString(in1, int(1.0))[abs(int(8.0)):( int(7.0) * i2 )])):int(5.0)].capitalize())) ), int(0.0))),int(9.0)) ) - min(i1, divInt(( i2 - mod(( mod(i0,mod(min(( i0 - i0 ), mod(int(2.0),divInt(divInt(i2,int(2.0)),max(( min(min(saveOrd(\"\"<\"\"), int(6.0)), mod(( int(6.0) + i0 ),( len(in2[:i1]) - int(4.0) ))) - mod(min(i0, i0),( i1 + mod(divInt(int(7.0),i2),int(3.0)) )) ), i0)))),max(int(2.0), len(s0)))) - i1 ),int(4.0)) ),( divInt(int(7.0),saveOrd(\"\"f\"\")) - len(s0) ))) ))) + int(0.0) ))) ) or s0 not in \"\"A\"\"[i2:] ):{:\\nif getCharFromString(\"\">\"\", max(divInt(i0,max(divInt(i2,i2), ( ( i2 * max(( i0 * i1 ), max(len(saveChr(int(0.0))), i1)) ) * int(3.0) ))), i0))[:abs(int(8.0))][int(3.0):].lstrip(s2[int(6.0):].capitalize()[divInt(i0,int(5.0)):i2])[i1:mod(( int(9.0) * saveOrd(in0) ),( int(6.0) + int(6.0) ))] in \"\"0\"\"[:mod(saveOrd(\"\"6\"\"),( ( int(7.0) - int(6.0) ) - divInt(( i1 * mod(mod(( saveOrd(\"\"5\"\") * int(2.0) ),int(9.0)),i2) ),divInt(mod(i2,( i1 * saveOrd(in2[i2:mod(int(5.0),int(5.0))]) )),( int(8.0) - int(4.0) ))) ))][:i1].rstrip().strip(\"\"M\"\"):{:\\nloopBreak% = 0\\nwhile not in0.endswith(\"\"Z\"\".capitalize()[i1:mod(i1,i2)][:i0]):{:\\nloopBreak% = 0\\nwhile getCharFromString(s1[max(max(( divInt(min(i0, max(int(9.0), int(6.0))),( i0 - min(( i2 - ( ( int(7.0) + int(7.0) ) - saveOrd(saveChr(min(len(s1), i1))) ) ), len(saveChr(len(\"\"q\"\"))[int(0.0):])) )) - divInt(abs(saveOrd(getCharFromString(getCharFromString(\"\"2\"\"[:int(5.0)], i1), i2)[( i0 * i2 ):divInt(min(abs(int(3.0)), min(mod(i0,saveOrd(\"\",\"\"[i0:].strip(in2[i0:int(4.0)]))), i2)),( mod(divInt(divInt(mod(mod(len(\"\"X\"\"),int(4.0)),int(8.0)),len(saveChr(int(5.0)))),( ( ( ( mod(saveOrd(s1),max(( i0 - i1 ), min(saveOrd(\"\"7\"\".strip(s1)[:i1]), saveOrd(\"\"0\"\")))) * saveOrd(s1) ) + i0 ) + int(0.0) ) + int(8.0) )),mod(i2,int(9.0))) + i0 ))])),saveOrd(s2[saveOrd(saveChr(i2)):][:i0].strip()[:i0])) ), i0), int(5.0)):int(4.0)], ( mod(( mod(int(1.0),i2) - i0 ),mod(divInt(int(3.0),abs(( i0 * max(i0, max(i2, int(5.0))) ))),mod(int(1.0),int(9.0)))) + abs(divInt(i1,len(\"\"4\"\"))) ))[mod(mod(max(i1, saveOrd(\"\"u\"\".capitalize().strip())),abs(max(min(i0, len(\"\"2\"\"[:i0][i2:max(divInt(saveOrd(in1),i2), saveOrd(\"\"a\"\"[min(i2, i1):i0].capitalize()[mod(i0,abs(( int(8.0) - max(mod(i2,i2), int(7.0)) ))):( int(9.0) + mod(int(6.0),len(\"\"9\"\")) )]))])), int(1.0)))),i0):].endswith(s0[min(( divInt(i0,i1) + int(1.0) ), ( i1 + i2 )):mod(( int(6.0) - int(5.0) ),int(4.0))]):{:\\nin0 = getCharFromString(saveChr(divInt(int(7.0),i1)), i2)[:divInt(mod(( int(2.0) + ( saveOrd(in0[:abs(int(7.0))][:( divInt(( abs(min(abs(( i2 - int(3.0) )), len(in2))) - divInt(( mod(divInt(int(7.0),i0),len(getCharFromString(\"\"d\"\", i2)[mod(( int(0.0) - divInt(i2,saveOrd(getCharFromString(\"\"!\"\", int(0.0)).rstrip(\"\"G\"\"))) ),max(( int(8.0) * abs(abs(int(6.0))) ), int(5.0))):int(4.0)])) * ( len(s0) * mod(i2,( saveOrd(in1[:( i0 + int(2.0) )]) + divInt(saveOrd(\"\"E\"\"),saveOrd(getCharFromString(getCharFromString(getCharFromString(\"\"H\"\", int(6.0)), int(7.0)), i1).capitalize()[mod(i1,int(0.0)):])) )) ) ),i2) ),mod(saveOrd(\"\"4\"\"),i2)) * min(int(7.0), abs(( int(3.0) + int(7.0) ))) )][:len(s2[int(7.0):divInt(int(9.0),mod(i2,max(( int(2.0) * divInt(int(1.0),len(in1)) ), int(5.0))))])]) * len(\"\",\"\"[:abs(int(8.0))]) ) ),mod(( divInt(i0,i0) + mod(int(0.0),mod(int(5.0),abs(divInt(int(0.0),( divInt(i2,len(s1)) * i0 ))))) ),i2)),( i1 * divInt(( ( min(i2, int(4.0)) * i2 ) + i0 ),( max(int(3.0), i2) + i1 )) ))][max(( i0 * i0 ), int(4.0)):int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = in1\\ni2 += i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 0, 1], [1, 2, 1, 2, 1, 1], [0, 1], [0, 2, 0, 1], [0], [0], [], [], [0, 2], [5, 2], [1, 2, 1], [0, 0], [0], [1], [1, 0], [0], [0], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [7, 2, 5, 0, 5, 8, 3, 8, 9, 6, 3, 0, 5, 0, 8, 1, 4, 1, 2, 2, 9, 2, 0, 4, 7, 7, 9, 8, 9, 5, 5, 1, 6, 3, 4, 4, 8, 7, 2, 8, 7, 2, 0, 4, 6, 2, 9, 6, 5, 4, 7, 5, 2, 8, 6, 9, 0, 6, 5, 2, 8, 2, 2, 7, 3, 1, 6, 9, 0, 1, 4, 3, 3, 7, 3, 1, 9, 1, 7, 0, 7, 4, 2, 2, 6, 9, 9, 3, 7, 9, 7, 1, 3, 7, 9, 3, 1, 5, 6, 0, 2, 3, 2, 0, 7, 5, 4, 6, 4, 6, 2, 8, 1, 0, 5, 5, 2, 3, 4, 7, 3, 3, 1, 4, 4, 5, 3, 0, 1], [0, 0, 1, 1, 2, 0, 2, 1, 1, 1, 2, 2, 1, 1, 0, 0, 1, 0, 1, 2, 0, 0, 1, 0, 0, 1, 1, 2, 2, 2, 0, 0, 2, 1, 2, 0, 1, 1, 1, 0, 2, 2, 1, 2, 0, 1, 1, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 2, 0, 1, 1, 1, 1, 1, 2, 1, 0, 0, 0, 0, 1, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 0, 2, 0, 2, 0, 2, 1, 1, 0, 1, 0, 1, 2, 1, 0, 2, 1, 1, 0], [0], [0, 0, 2, 2, 2, 0, 2, 1, 1, 0, 1, 1, 1, 3, 0, 2, 0, 3, 3, 2, 3, 3, 2, 1, 0, 0, 0, 3, 2, 3, 2, 2, 1, 0, 0, 2, 3, 0, 0, 3, 1, 3, 3, 3, 2, 0, 1, 0, 2, 1, 1, 3, 2, 0, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 0, 3, 1, 3, 2, 2, 3, 1, 3, 1, 2, 3, 3, 3, 2, 1, 2, 3, 1, 2, 2, 2, 1, 0, 1, 3, 1, 2, 0, 2, 2, 3, 1, 1, 2, 0, 2, 0, 1, 1, 3, 3, 1, 2, 1, 3, 1, 3, 2, 1, 3, 1, 3, 3, 2, 3, 2, 0, 2, 2, 0, 0, 2, 2, 2, 0, 3, 2, 3, 3, 2, 1, 0, 1, 1, 3, 2, 1, 3, 0, 1, 1, 0, 3, 0, 3, 0, 2, 3, 2, 2, 3, 3, 2, 0, 2, 3, 2, 3, 3, 2, 2, 1, 0, 0, 2, 1, 2, 1, 3, 0, 3, 3, 2, 1, 2, 3, 2, 3, 0, 1, 0, 0, 3, 0, 0, 3, 3, 2, 1, 3, 2, 3, 3, 2, 0, 1, 1, 3, 2, 3, 0, 0, 3, 3, 1, 2, 1, 2, 3, 0, 1, 0, 2, 2, 3, 3, 0, 1, 3, 1, 3, 3, 1, 1, 2, 1, 2, 1, 3, 0, 3, 0, 1, 1, 1, 0, 3, 2, 2, 0, 3, 3, 2, 1, 1, 2, 2, 2, 0, 1, 1, 2, 3, 2, 1, 3, 1, 2, 2, 1, 0, 0, 0, 3, 1, 3, 1, 2, 1, 0, 1, 2, 1, 2, 2, 3, 3, 1, 3, 3, 3, 1, 2, 1, 3, 1, 3, 2, 0, 0, 3, 2, 0, 0, 3, 2, 3, 0, 1, 3, 3, 2, 1, 1, 2, 0, 3, 2, 0, 2, 0, 3, 0, 2, 2, 3, 0, 2, 1, 3, 1, 2, 0, 1, 1, 0, 1, 2, 3, 1, 0, 2, 1, 2, 3, 2, 2, 3, 1, 2, 1, 1, 1, 2, 2, 0, 2, 2, 1, 3, 0, 0, 2, 2, 2, 1, 1, 3, 1, 0, 2, 3, 2, 3, 1, 0, 2, 0, 1, 1, 2, 2, 2, 0, 3, 3, 0, 0, 2, 0, 1, 3, 2, 3, 3, 1, 0, 2, 3, 2, 1, 2, 1, 0, 3, 2, 1, 2, 2, 1, 1, 0, 2, 3, 0, 3, 0, 3, 0, 0, 2, 2, 3, 2, 3, 1, 2, 1, 3, 0, 3, 2, 1, 3, 1, 2, 1, 1, 3, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1, 1, 3, 0, 2, 1, 2, 2, 3, 2, 3, 0, 2, 1, 1, 0, 3, 2, 1, 3, 2, 0, 2, 2, 2, 2, 1, 1, 0, 2, 2, 3, 0, 3, 0, 3, 2, 1, 1, 1, 1, 3, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [4, 2, 0, 0, 2, 2, 1, 1, 3, 1, 3, 4, 2, 4, 0, 3, 4, 3, 4, 4, 1, 4, 1, 3, 1, 3, 1, 4, 0, 4, 1, 0, 2, 4, 1, 3, 2, 3, 2, 0, 2, 4, 0, 4, 1, 2, 1, 1, 0, 3, 3, 3, 0, 4, 1, 2, 1, 2, 0, 1, 0, 0, 2, 0, 2, 1, 2, 3, 4, 4, 1, 2, 1, 3, 1, 4, 4, 3, 2, 0, 4, 3, 2, 4, 3, 1, 0, 2, 4, 0, 0, 4, 1, 4, 2, 0, 2, 0, 3, 3, 4, 4, 2, 0, 3, 0, 3, 0, 4, 1, 1, 1, 2, 4, 1, 3, 1, 3, 1, 3, 4, 3], [1, 0, 2, 0, 1, 2, 0, 1, 0, 1, 0, 0, 2, 1, 0, 1, 1, 1, 2, 2, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 1, 1, 1, 2, 0, 2, 1, 1, 1, 2, 2, 1, 0, 2, 1, 0, 2, 2, 2, 2, 0, 2, 0, 0, 2, 0, 0, 0, 1, 1, 2, 0, 0, 2, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 3, 0, 4, 5, 0, 4, 2, 2, 3, 1, 4, 3, 0, 0, 2, 2, 5, 2, 0, 0, 2, 1, 2, 3, 5, 1, 0, 3, 0, 5, 4, 0, 5, 0, 1, 4, 2, 4, 3], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0], [3, 3, 3, 4, 4, 0, 0, 4, 4, 2, 1, 3, 1, 3, 1, 1, 1, 3, 3, 1, 2, 3, 4, 2, 2, 2, 3, 1, 2, 2, 4, 2, 2, 4, 2, 0, 0, 1, 0, 0, 4, 2, 0, 2, 2, 1, 1, 0, 2, 0, 1, 0, 2, 4, 0, 0, 4, 1, 2, 0, 2, 0, 0, 4, 0, 0, 1, 2, 4, 0, 0, 3, 2, 3, 3, 3, 2, 1, 2, 0, 2, 2, 0, 2, 2, 1, 2, 2, 1, 2, 4, 1, 4, 4, 2, 0, 4, 2, 0, 4, 4, 0, 4, 0, 2, 1, 1, 4, 3, 2, 4, 2, 1, 2, 1, 4, 0, 0, 0, 2, 3, 2, 0, 0, 1, 1, 1, 1, 3, 2, 1, 3, 0, 2, 4, 0, 4, 4, 4, 1, 0, 0, 4, 0, 0, 2, 4, 1, 0, 0], [1, 3, 1, 0, 0, 1, 3, 1, 1, 0, 3, 0, 1, 2, 0, 0, 2, 0, 1, 1, 1, 2, 2, 0, 3, 0, 3, 2], [0, 1, 5, 4, 3], [2, 2, 0, 0, 1, 0, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 0, 1, 0, 2, 0, 2, 2, 1, 0, 2, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2], [2, 0, 0, 3, 1, 3, 2, 2, 0, 0, 3, 2, 3, 3, 2, 1, 1, 0, 1, 2, 1, 1, 0, 0, 2, 0, 2, 3, 2, 0, 3, 0, 2, 2, 2], [20, 15, 14, 10, 20, 9, 20, 2, 17, 7], [18, 7, 23, 18, 5, 21], [2, 4, 2, 8, 1, 7, 9, 5, 2, 5, 5, 2], [2, 31, 27, 20, 9, 23, 17]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 0, 0, 0, 2, 2, 3, 2, 1, 0, 0, 0, 1, 129, 129, 102, 1, 489, 144, 122, 70, 74, 40, 35, 1, 150, 28, 5, 39, 35, 10, 6, 12, 7], "tree_depth": 69, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 != i0\\nloopBreak% = 0\\nfor s0 in (((saveChr(( divInt(divInt(i1,( int(7.0) - int(2.0) )),i1) + int(5.0) )) + in0.lstrip()) + s0) + saveChr(int(058.0))):{:\\nin1 = getCharFromString(\"\"2\"\"[int(38.0):], saveOrd((\"\"U\"\" + (\"\"P\\\\\\t\"\" + \"\"s\"\"))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif \"\"`\"\" in ((\"\"4\"\" + (getCharFromString((\"\"2\"\" + saveChr(i2)[divInt(i0,abs(min(mod(min(abs(( int(9.0) * i2 )), i1),i1), abs(divInt(max(divInt(mod(int(6.0),i1),i2), ( max(i2, i1) + len(in2[:int(3.0)].rstrip()[max(len(s0), saveOrd(\"\"O\"\")):][mod(i1,int(0.0)):]) )),i0))))):][( int(5.0) - int(0.0) ):abs(divInt(i0,int(8.0)))])[:mod(( int(1.0) * ( int(4.0) + int(1.0) ) ),mod(divInt(int(2.0),i1),saveOrd(in1)))][int(2.0):min(mod(mod(len(s2),int(9.0)),saveOrd(saveChr(int(2.0)))), mod(len(s2[:saveOrd(\"\"K\"\"[saveOrd(\"\"\\\\\\\\\"\"):( int(0.0) - ( max(int(4.0), divInt(( ( int(7.0) + i0 ) - int(7.0) ),saveOrd(in0))) + int(9.0) ) )][:( i1 + divInt(( max(int(8.0), int(9.0)) * ( i2 - mod(i0,int(5.0)) ) ),int(5.0)) )])]),len(s1[max(int(1.0), mod(int(6.0),len(\"\"8\"\"))):int(3.0)])))][max(( int(4.0) + saveOrd(in1) ), int(4.0)):min(saveOrd(saveChr(mod(max(( i0 - ( mod(i1,i0) - ( divInt(divInt(i0,min(divInt(abs(saveOrd(in0)),mod(int(8.0),i1)), int(7.0))),int(2.0)) - max(divInt(int(8.0),len(s0)), i1) ) ) ), int(7.0)),int(2.0)))[i2:abs(i2)]), len(getCharFromString(\"\";\"\", i2)))], divInt(abs(( divInt(min(abs(( i0 * mod(saveOrd(s0[mod(min(saveOrd(s2[( ( int(0.0) * i0 ) + i2 ):]), divInt(int(4.0),divInt(int(6.0),max(i1, abs(max(( int(2.0) * mod(max(divInt(min(i2, int(9.0)),i0), i1),len(s2)) ), i1)))))),i1):len(in2.strip(s2))]),len(\"\"&\"\")) )), mod(int(6.0),min(divInt(saveOrd(getCharFromString(s0, max(( i0 + int(5.0) ), int(4.0)))[abs(divInt(max(i2, i2),abs(min(int(7.0), ( int(5.0) - ( max(i1, int(2.0)) * i2 ) ))))):( mod(min(min(i0, int(8.0)), abs(int(6.0))),min(abs(int(9.0)), int(0.0))) + divInt(int(6.0),( int(5.0) - max(i1, abs(i1)) )) )]),int(2.0)), int(8.0)))),int(2.0)) * i0 )),len(s0))) + ((((\"\"1\"\"[( mod(i1,saveOrd(s2[saveOrd(s1[mod(int(2.0),int(7.0)):][( ( ( i2 + int(3.0) ) - int(1.0) ) - divInt(max(( int(6.0) - abs(int(9.0)) ), ( mod(int(0.0),i1) - i1 )),i1) ):max(int(1.0), len(\"\"h\"\"[:int(4.0)][mod(int(3.0),i1):]))]):])) * int(3.0) ):( int(7.0) + divInt(( max(saveOrd(\"\"x\"\"[int(3.0):][saveOrd(saveChr(len(\"\"U\"\"))[abs(int(1.0)):]):( int(9.0) * min(int(1.0), saveOrd(getCharFromString(s2[( i0 - i0 ):len(getCharFromString(in0[( i0 - i0 ):abs(mod(saveOrd(getCharFromString(in2, i1).capitalize()),int(7.0)))], len(saveChr(max(mod(int(0.0),int(7.0)), divInt(i2,min(( i0 - ( i1 * abs(i1) ) ), divInt(divInt(saveOrd(s1),i1),( int(4.0) * min(int(2.0), ( i1 - int(2.0) )) )))))))))], int(6.0)).capitalize())) )]), i1) + int(9.0) ),( min(int(9.0), i2) * divInt(int(3.0),mod(saveOrd(\"\"s\"\"[:divInt(( max(int(7.0), mod(int(9.0),int(7.0))) - int(1.0) ),( ( i1 + mod(( int(3.0) * saveOrd(\"\"7\"\") ),i0) ) * i0 ))]),mod(mod(( int(7.0) * int(9.0) ),abs(int(3.0))),i0))) )) )] + saveChr(( min(mod(abs(int(1.0)),i0), ( i1 * int(5.0) )) + int(6.0) ))) + (saveChr(( ( ( i2 * min(len(\"\"f\"\"[i0:i1]), mod(i2,int(0.0))) ) + len(\"\"v\"\"[:mod(saveOrd(s0.capitalize()),saveOrd(in0))]) ) + int(2.0) ))[i1:( abs(( int(3.0) * ( int(2.0) + i1 ) )) + min(( int(0.0) + ( divInt(int(7.0),int(5.0)) - i0 ) ), ( len(s0) - i0 )) )] + (in2[min(i2, len(in1)):i2] + \"\"J\"\")[i0:( ( min(divInt(saveOrd(\"\"U\"\"),int(4.0)), divInt(int(6.0),max(i2, max(( int(4.0) * max(int(6.0), divInt(int(2.0),int(8.0))) ), abs(int(1.0)))))) + i0 ) + ( i2 * i0 ) )])) + \"\"9C5>\"\")[:i2] + \"\"2\"\"))[i1:]) + (\"\"R.H5\"\"[divInt(i1,i0):divInt(i1,int(0.0))] + (s0 + in2.capitalize()[int(5.0):saveOrd(getCharFromString(getCharFromString(\"\"5\"\", i0).rstrip(s0), ( int(523.0) + divInt(( max(divInt(len(s1),i1), ( int(4.0) + int(7.0) )) - i2 ),max(mod(int(3.0),len(in1.lstrip(s2))), ( i1 - mod(mod(mod(divInt(int(3.0),int(1.0)),i0),( ( max(i2, len(\"\"2\"\".capitalize()[i1:])) - saveOrd(in1) ) + divInt(int(4.0),int(4.0)) )),int(5.0)) ))) )))]))):{:\\nb2 = int(301.0) == len(in0)\\ni1 = i0\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [1], [], [2], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 0, 5], [0, 1], [], [3, 0, 0, 1], [2], [], [], [1, 0], [6], [16], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 4, 0, 0, 0, 2, 1, 1, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = (in0 + s0) == \"\"qG\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 1], [2, 2], [0, 2], [], [0], [], [], [2, 0], [5], [0, 2, 1], [0], [1], [0], [], [], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 8, 7, 3, 5, 1, 6, 7, 0, 0, 7, 9, 5, 5, 5], [2, 2, 0, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1], [], [3, 0, 3, 2, 1, 2, 1, 0, 3, 3, 3, 1, 2, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 2, 3, 1, 0, 0, 0, 2, 0, 1, 0, 2, 3, 0, 2, 3, 0, 0, 3, 3, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [1, 1, 3, 1, 4, 2, 2, 1, 1, 0, 0, 0, 2, 0], [0, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 1, 3, 5, 3, 2], [1], [], [2, 2, 4, 0, 0, 0, 0, 1], [3], [5], [1, 1], [3], [], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 0, 0, 0, 0, 2, 1, 3, 1, 1, 1, 0, 0, 0, 8, 8, 5, 0, 22, 6, 5, 4, 2, 4, 1, 0, 8, 1, 1, 2, 1, 0, 0, 0, 1], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b2:{:\\nloopBreak% = 0\\nwhile s1.strip(s1)[:max(i2, max(( int(6.0) + mod(int(87.0),i2) ), len(in0)))][:max(saveOrd(in2), int(35.0))] not in \"\")\"\":{:\\nb0 = ( int(1.0) + ( mod(i0,i1) - int(6.0) ) ) != ( i1 + int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0], [3], [1], [0], [], [], [], [], [], [0, 0, 0, 1], [5, 5, 1, 3], [1], [], [1, 0], [], [], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [], [2], [1], [], [1], [], [], [], [1], [], [2], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\"c\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 1, 1, 2, 1, 2, 2, 2, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1], [1, 0, 2, 1, 0, 1, 1], [0], [0, 0], [], [], [3, 0], [2, 3], [0, 2, 0, 1, 2, 1, 0, 2], [0, 0], [5, 2, 3], [1, 1, 2], [], [1, 1], [0, 0, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1], [5, 1, 9, 8, 4, 5, 0, 3], [0, 2, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 2, 1, 0, 2, 0, 2], [0, 0, 0, 1], [3, 0, 1, 1, 2, 2, 3, 2, 3, 0, 0, 0, 3, 2, 0, 1, 1, 2, 0, 2, 2, 2, 1, 2, 0, 1, 0, 3, 3, 0, 3, 1, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 0, 1, 0], [0, 1, 0, 4, 1, 2, 4, 1, 0], [1, 2, 0, 0, 2], [0, 0, 1, 1, 1], [0, 4, 2, 5, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1], [0], [0, 1, 3, 1, 3, 2, 1, 2, 0, 0, 0, 1, 0, 1, 4, 4, 2, 1, 1], [3, 2], [0], [1, 2, 0], [1, 3, 2, 1, 3, 0, 1], [1], [5, 12, 15], [9], [22, 13]], "fitness": 9223372036854775807, "mapping_values": [1, 13, 13, 6, 7, 1, 2, 0, 0, 2, 2, 8, 2, 3, 3, 0, 2, 5, 8, 8, 22, 4, 43, 9, 9, 5, 5, 7, 7, 1, 19, 2, 1, 3, 7, 1, 3, 1, 2], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif False:{:\\nloopBreak% = 0\\nfor s0 in in1:{:\\ni0 = min(i2, int(51.0))\\nres0 = \"\"f\"\".endswith((\"\"=\"\" + (\"\"9\"\"[:int(9.0)] + s2[( divInt(max(divInt(min(i0, i0),i0), saveOrd(in2)),mod(i0,int(8.0))) - int(4.0) ):])))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif False:{:\\ns1 = s0\\nif ( i0 * mod(( mod(int(5.0),( i1 + int(0.0) )) + i0 ),max(abs(i1), saveOrd(\"\"m\"\"))) ) == int(3.0):{:\\nif s1 == \"\"*\"\":{:\\nif i1 \\ge i0:{:\\ni1 = i1\\n:}\\n:}\\n:}else:{:\\nb0 = not \"\"B\"\"[i0:max(min(i1, i2), i1)].capitalize().lstrip() != \"\"p\"\"\\n:}\\ni0 = i2\\n:}\\ni0 *= i2\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [1, 1, 0, 1, 1], [1, 9, 1, 9, 6], [0, 2, 0, 0, 1, 1, 1, 1, 1, 2, 2, 1, 1], [1], [0, 3, 0, 0, 3, 2, 2, 3, 2, 0, 1, 0, 3, 2, 0, 0, 0, 3, 0, 2, 1, 0, 1, 3, 1, 2, 0, 2, 0, 3, 0], [1, 0, 0, 1, 0, 1, 1], [1, 0, 1, 0, 0, 2, 3], [2, 0, 0], [0, 1, 1, 1], [0, 1], [0, 0, 0, 0, 0, 1], [], [3, 1, 4, 2, 2, 2, 2, 0, 4], [2, 1], [], [1, 0, 2, 2], [0, 1, 2, 2, 0, 1], [22, 25], [18, 5], [8, 2], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 13, 0, 31, 7, 7, 3, 4, 2, 6, 0, 9, 2, 0, 4, 6, 2, 2, 2, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (\"\"Ws82Zf\"\" + s1[i0:][max(i2, i0):][min(divInt(( max(( i0 * int(1.0) ), i1) + min(mod(i1,i1), i1) ),min(i1, ( int(9.0) + i2 ))), int(19.0)):abs(int(6.0))][:mod(i2,mod(i1,len(saveChr(i1))))].capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 9, 2, 5, 4, 5, 9, 0, 3, 9, 4, 1, 4, 9, 8, 8, 6, 9, 1, 3, 3, 9, 0, 8, 4, 4, 3, 5], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2, 2, 2], [0, 0], [2, 2, 2, 1, 0, 2, 3, 3, 1, 1, 1, 2, 3, 3, 3, 3, 1, 0, 1, 3, 1, 0, 0, 3, 1, 2, 3, 1, 1, 3, 2, 1, 0, 3, 3, 3, 3, 0, 0, 2, 0, 2, 2, 3, 3, 1, 2, 2, 3, 2, 2, 3, 2, 3, 1, 1, 1, 3, 3, 3, 1, 1, 2, 0, 0, 3, 1, 1, 1, 2, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 2, 3, 0, 2, 0, 0, 3, 0, 1, 4, 3, 0, 0, 4, 4, 2, 2, 3, 2, 4], [1, 0, 2, 0, 2, 2, 0, 2, 2, 1, 2], [0, 0, 1, 0, 0, 1], [0, 2, 3, 4, 4], [1, 1, 1, 1, 1, 1, 1], [], [4, 0, 2, 2, 2, 4, 0, 4, 3, 1, 3, 3, 3, 0, 0, 0, 4, 4, 2, 4, 1, 1, 4, 1, 1, 2, 2, 2, 2, 1, 1], [3, 2, 0, 1, 2, 0, 0], [1], [0, 0, 1, 2, 2, 0, 0, 1], [0, 1, 3, 0, 0, 0, 3], [1, 2, 5, 16], [19], [], [23, 15]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 28, 15, 2, 74, 17, 23, 11, 6, 5, 7, 0, 31, 7, 1, 8, 7, 4, 1, 0, 2], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( ( ( int(29.0) - i2 ) + divInt(min(abs(int(2.0)), int(54.0)),int(5.0)) ) * divInt(len(s0.rstrip()),abs(len(s2.capitalize()[:min(int(9.0), i1)][int(0394.0):abs(int(1.0))][i0:i1]))) )\\ni2 = min(int(4.0), ( min(int(9.0), int(886.0)) + len(getCharFromString((\"\"B\"\" + (((in0 + in1) + in1) + saveChr(mod(int(9.0),i1)))), min(max(saveOrd(getCharFromString(\"\"t\"\", len(\"\">\"\"))[i2:].capitalize()), i0), ( i0 * ( ( min(min(int(1.0), ( divInt(saveOrd(getCharFromString(\"\"C\"\", divInt(( saveOrd(\"\"F\"\") * mod(abs(int(3.0)),int(3.0)) ),int(9.0)))),abs(len(\"\"Q\"\"[:abs(int(0.0))][int(8.0):( i0 + i1 )][saveOrd(\"\",\"\"):int(4.0)][int(4.0):]))) * int(3.0) )), ( i2 * int(5.0) )) - i2 ) * i2 ) )))) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1, 3], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 0], [17, 12], [23], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 13, 13, 13, 1, 49, 14, 10, 8, 6, 6, 3, 0, 15, 2, 1, 4, 3, 2, 1, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( i0 != i2 or ( \"\"R\"\"[abs(int(0.0)):i2].rstrip()[int(7.0):mod(int(5.0),min(i0, divInt(( divInt(int(7.0),i2) + ( len(in0) + ( i2 * min(max(( int(2.0) - i1 ), ( min(int(5.0), i2) + int(5.0) )), int(5.0)) ) ) ),i0)))].endswith((\"\"xM\"\" + saveChr(i0))) and True ) )\\n:}else:{:\\ni0 = divInt(int(9.0),max(( len(s0) - i1 ), divInt(divInt(( int(4.0) - int(5.0) ),( int(0.0) + i2 )),int(4.0))))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [3], [], [4], [1], [], [5, 2], [1], [], [0, 1], [], [], [], [3], [], [], [], [17]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 2, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= saveOrd(in2)\\ns2 = \"\".\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0, 0], [], [], [0], [1], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1], [1, 1, 5, 7, 7, 5, 2, 8, 1, 1, 6, 8, 3, 2, 1, 0, 8, 8, 8, 4, 9], [0, 0, 2, 1, 2, 1, 1, 1, 2], [], [1, 3, 2, 2, 2, 1, 3, 1, 0, 0, 3, 1, 2, 3, 2, 3, 3, 3, 0, 0, 0, 1, 2, 2, 2, 0, 1, 0, 0, 2, 1, 2, 1, 3, 2, 2, 3, 2, 0, 1, 2, 1, 1, 3, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 0, 4, 3, 4, 1, 4], [0, 0, 1, 1, 2, 2, 0, 1, 0, 2], [1, 0, 0, 0, 0], [5, 5, 3, 4], [1], [], [1, 0, 2, 0, 0, 0, 1], [3], [0], [1, 2], [2], [], [], [8], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 5, 0, 22, 5, 7, 2, 3, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = int(1.0) \\g max(mod(( divInt(int(1.0),max(int(5.0), i0)) + i0 ),max(int(77.0), divInt(max(( min(saveOrd(\"\"8\"\"), len(in2)) + i2 ), i1),i2))), int(5.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 5, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 8, 8, 10, 0, 34, 10, 6, 4, 6, 6, 2, 1, 16, 3, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = ( ( int(0.0) != divInt(int(7.0),i0) or True ) and in2[mod(i2,int(5.0)):] != (in0[( int(7.0) * len(saveChr(i2)) ):i0].capitalize()[divInt(divInt(int(6.0),i1),divInt(abs(( i2 + ( min(divInt(len((\"\"R\"\" + s0.rstrip())),i1), ( min(int(1.0), i2) + int(7.0) )) + int(7.0) ) )),i0)):i0] + \"\"3\"\") )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [3], [4], [1], [], [], [], [], [], [], [0, 0, 1], [1, 3, 0], [1, 2], [1], [1, 0], [], [], [0], [], [4, 4, 4, 4, 3, 3, 5], [0, 1], [], [1], [], [], [], [2, 1], [], [4], [9], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 0, 2, 0, 1, 1, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"9e\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 3, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 0, 2, 1, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3, 3, 3], [17], [], [], [20, 31, 14]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 4, 1, 7, 0, 0, 2, 4, 1, 0, 0, 3], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in0):]:{:\\nres0 = \"\"R\"\"[len(in1):] not in \"\";`+\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [2, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 1, 0, 1], [0], [14], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 9, 1, 2, 0, 1, 4, 1, 1, 10, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):saveOrd(\"\"O\"\"[mod(int(0.0),i0):])]:{:\\nres0 = saveChr(int(7.0))[:i2].capitalize() == in0[int(5.0):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1, 1], [1, 2, 0, 1, 2, 0], [1, 0], [2, 0, 2, 1], [0], [0, 0], [], [], [2, 2], [], [0, 0], [], [], [1, 0], [], [1], [1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [7, 0, 1, 0, 1, 3, 7, 2, 6, 3], [2, 1, 2, 1, 0], [1], [3, 0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 0, 1, 0, 1], [1, 1, 0, 0], [3], [2, 0, 1], [1, 0], [3, 3, 5, 3, 3, 5], [1, 1, 0, 0, 0, 1], [0], [0, 3, 2, 3, 2, 2, 0, 2, 1, 1, 0, 1], [], [], [1, 0, 2, 0], [3, 0, 1, 2, 1, 0], [23, 21], [11, 25], [6], [27]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 1, 1, 10, 10, 5, 1, 15, 4, 1, 3, 2, 6, 6, 1, 12, 0, 0, 4, 6, 2, 2, 1, 1], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0\\nif False:{:\\nb2 = b2\\n:}else:{:\\nin2 = ((in0[len(\"\"\\\\\\\\\"\"[i2:i1]):][mod(int(7010.0),divInt(int(1.0),( int(3.0) * ( int(7.0) + i2 ) ))):int(26.0)] + \"\"X\"\")[:i1] + in0)\\nloopBreak% = 0\\nfor in2 in \"\"l6zV\"\":{:\\ni0 -= int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [], [2], [], [3], [], [], [], [], [1], [5], [0, 2], [0, 1, 1], [2, 1, 3, 0], [0], [3], [2, 1], [1], [3, 5, 0], [0, 0, 0, 1, 0, 1], [], [0, 3, 3, 0, 2, 0, 4, 1, 1], [2], [], [0], [0, 1, 1, 0, 1, 1], [14, 23], [21, 15, 4, 22], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 3, 6, 0, 9, 1, 0, 1, 6, 2, 4, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = in0 != ((in2 + s0[( int(5.0) * len(\"\"OvpX\"\".capitalize()) ):i0]) + \"\"ew\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [0, 1, 1], [3, 3, 0, 0, 0, 2, 3, 1, 1, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [1], [18], [15], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 9, 1, 3, 0, 1, 5, 1, 1, 10, 1, 1, 4, 1, 0, 1, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[:len(in0)] not in \"\"p\"\"[i2:i0].rstrip()[i2:mod(abs(int(7.0)),int(7.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 3], [5], [0, 0, 2], [0], [0], [3, 0], [1], [], [], [], [], [2, 1], [1], [0, 0], [], [2], [1], [], [2, 3], [1], [], [3, 0, 1, 0], [], [], [0], [1], [], [6], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 3, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 4, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( res0 or (s2 + \"\"g\"\") in in0 )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 1, 1], [2, 2, 0, 2, 0, 2, 2, 1, 1], [2, 2, 1, 2, 0], [1, 1, 1, 2], [0], [0, 0], [], [], [], [3], [0, 1, 2, 2, 0], [0], [3, 0], [2, 1], [], [1], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [4, 6, 0, 1, 3, 9, 1, 6, 8, 4, 9, 8, 7, 6, 1, 9, 5, 2, 2, 6], [2, 1, 1, 2, 1, 2, 1, 2, 2], [0, 1, 1], [1, 2, 0, 2, 2, 3, 2, 0, 0, 1, 2, 2, 3, 1, 1, 1, 0, 0, 2, 3, 1, 2, 0, 1, 1, 1, 1, 1, 3, 1, 0], [0, 1, 0, 1, 1, 1, 1, 0, 1], [1, 2, 1, 4, 2], [1, 1, 2, 0, 0], [1, 0, 1, 0, 1, 1], [3, 2, 2, 5, 3, 1, 0, 3, 3, 0], [1], [0], [2, 4, 4, 3, 4, 0, 3, 0, 0, 0, 4, 0, 0, 0, 2, 0, 1], [1, 3, 3, 2], [1, 3], [0, 2], [1], [], [2], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 5, 4, 1, 2, 0, 0, 0, 1, 5, 1, 2, 2, 0, 1, 1, 20, 20, 9, 3, 30, 8, 4, 5, 5, 10, 1, 1, 17, 4, 2, 2, 1, 0, 1, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not int(4.0) \\ge ( i2 - mod(( max(divInt(i1,i1), int(60.0)) - mod(divInt(abs(int(13.0)),int(9.0)),int(1.0)) ),i2) ):{:\\nloopBreak% = 0\\nwhile saveChr(i1)[mod(max(int(6.0), ( i2 * int(8.0) )),int(4.0)):int(9876195.0)] != (in0.lstrip((s2 + s2)) + in2).rstrip():{:\\ni1 = int(2.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif in0.capitalize() in s1:{:\\ni2 += int(2.0)\\n:}else:{:\\nloopBreak% = 0\\nwhile False:{:\\nloopBreak% = 0\\nfor s0 in in0:{:\\ni2 += saveOrd(in0[int(6.0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = \"\"c\"\"\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1], [0, 5, 8, 7, 7, 7, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0, 2], [0, 1, 1], [3, 3, 1, 0, 3, 2, 2, 1, 2, 2, 3, 0, 2, 0, 2, 1, 0, 3, 3, 3, 0, 3, 3, 2, 1, 0, 2, 3, 1, 3, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 0, 1, 2, 1, 0, 0, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 0, 2, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 1, 1], [3, 0, 1], [17], [21], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 37, 9, 12, 3, 6, 6, 3, 1, 17, 3, 1, 5, 3, 1, 1, 0, 1], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[:len(\"\";\"\"[len(in1):])]:{:\\nres0 = in1.startswith(in0[:int(0.0)].capitalize()[i0:abs(divInt(divInt(int(5.0),mod(divInt(len(saveChr(i1)),( i2 + mod(int(8.0),i2) )),len((\"\"R\"\" + \"\"v\"\"[:min(max(i1, abs(max(( int(7.0) + i2 ), ( min(int(7.0), min(int(7.0), i1)) * i0 )))), i0)].rstrip())))),divInt(int(7.0),len(s0))))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 4, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2, 7, 3, 0], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1, 0, 1, 2, 2, 1, 1, 2, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 3, 3, 2, 2, 1, 0, 2, 3, 2, 0, 3, 1, 2, 1, 0, 3, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2, 3, 2, 0, 2, 0, 3, 1, 2, 3, 2, 3, 2, 0, 1, 2, 0, 3, 1, 3, 1, 1, 0, 3, 0, 2, 1, 3, 2, 3, 2, 3, 2, 0, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 0, 1, 0, 1, 3, 0, 1, 4, 0, 3, 0, 1, 0, 3, 2, 3], [0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4, 4], [1, 1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 3, 1, 1, 1], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1, 3, 2, 2], [17], [9], [1, 3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 22, 22, 22, 0, 97, 30, 24, 13, 17, 8, 5, 1, 21, 3, 1, 4, 5, 1, 1, 2, 1], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):].startswith(getCharFromString(s0[divInt(i0,abs(( i2 + int(0.0) ))):( int(7.0) + min(len(saveChr(min(( divInt(int(5.0),i2) * divInt(max(( i0 - abs(int(7.0)) ), ( int(8.0) - i1 )),min(max(int(1.0), divInt(( int(4.0) * i2 ),i0)), divInt(int(7.0),min(divInt(max(i2, i1),( mod(int(9.0),int(8.0)) - divInt(int(5.0),i0) )), int(0.0))))) ), len((\"\"R\"\" + in1.rstrip()))))), i0) )], mod(min(divInt(divInt(int(4.0),i0),( i1 - int(8.0) )), i1),( max(( i0 - mod(i1,saveOrd(\"\"j\"\")) ), int(59.0)) + mod(min(( len(in1) + ( i2 - int(7.0) ) ), ( i2 - min(int(2.0), max(int(2.0), int(7.0))) )),i1) )))[min(i1, mod(int(3.0),len((\"\";\"\" + \"\"1\"\")))):mod(abs(divInt(len(\"\"3\"\"),mod(i2,i0))),int(0.0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [1, 2, 1, 0], [0], [2, 0, 2], [0], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [1], [3], [2], [], [1, 0], [], [], [], [], [2, 1, 4, 2, 0], [0, 1], [0], [0, 1, 4, 0], [3], [0], [], [1, 1], [], [17, 11], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 5, 2, 1, 4, 1, 1, 0, 2, 0, 2, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1\\nloopBreak% = 0\\nfor in1 in \"\"rl\"\":{:\\nb0 = int(3.0) != i2\\ns2 = s0.lstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}]