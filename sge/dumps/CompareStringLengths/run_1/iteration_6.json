[{"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(int(5.0),min(i2, ( divInt(( int(7.0) + i0 ),divInt(len(saveChr(( i1 + ( min(divInt(int(2.0),i2), ( max(int(1.0), i1) * int(7.0) )) - int(7.0) ) ))),i2)) + i0 ))):divInt(int(9.0),abs(int(8.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 38, 11, 8, 5, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(( i2 * min(max(( int(7.0) - i1 ), divInt(abs(int(7.0)),i2)), int(1.0)) ))),int(7.0))) + i0 )) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 9, 8, 5, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 10, 1, 3, 0, 1, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[:int(7.0)][int(7.0):i0][mod(i2,int(5.0)):abs(int(2.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 1, 8, 1, 3, 0, 1, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[int(0.0):int(7.0)]\\ni1 = abs(mod(i1,int(5.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 3, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 8, 9, 5, 3, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[abs(int(7.0)):], i0)[min(i2, int(7.0)):len(saveChr(min(max(i2, mod(divInt(( int(5.0) + i0 ),divInt(min(( i1 + ( i2 - ( int(2.0) - i1 ) ) ), ( max(int(2.0), i2) + int(5.0) )),int(7.0))),i0)), i0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 3, 3, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 9, 1, 2, 0, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], int(0.0))[mod(i2,int(9.0)):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 2, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 38, 12, 8, 4, 8, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in saveChr(mod(mod(i0,( i2 + int(0.0) )),divInt(int(7.0),abs(i2))))[i0:divInt(divInt(int(5.0),i1),( min(( i2 + divInt(len(s0[( min(i1, mod(max(int(7.0), i2),int(6.0))) * int(1.0) ):]),i0) ), i0) - divInt(int(7.0),abs(int(7.0))) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 12, 1, 5, 0, 1, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[abs(int(7.0)):], i0)[mod(i2,int(7.0)):min(int(5.0), len(saveChr(int(2.0))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"[int(0.0):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 6, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 1, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 34, 9, 8, 5, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(i0, ( divInt(( int(5.0) + i1 ),divInt(len(saveChr(( int(7.0) * min(max(( int(7.0) - i2 ), divInt(abs(int(6.0)),i1)), int(7.0)) ))),int(7.0))) + i2 )) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):divInt(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 4, 0, 3, 4, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 0, 1, 4, 1, 1, 0], [3, 0, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 3, 0, 0, 7, 0, 1, 12, 3, 2, 3, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], len(in1.lstrip())).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 0, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 2, 2, 1, 1, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\".capitalize()[mod(i0,i2):( i2 + int(0.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i0:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in2[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 2, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1, 0], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 10, 0, 34, 9, 6, 5, 4, 6, 1, 1, 15, 2, 0, 6, 1, 1, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString((\"\"R\"\" + saveChr(int(7.0))), int(7.0))[i0:mod(i2,int(5.0))][:abs(int(2.0))][min(i2, divInt(( divInt(int(2.0),i0) + ( len(s0) + ( i1 - ( i2 - ( int(5.0) + i1 ) ) ) ) ),divInt(min(int(7.0), i2),int(5.0)))):int(9.0)][i0:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [1, 5], [3, 3, 1], [], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(\"\"R\"\", i1)[:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 12, 1, 5, 0, 1, 6, 0, 1, 11, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in in0[abs(i0):min(i2, i0)].rstrip()[int(4.0):divInt(int(7.0),len(saveChr(i0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[int(0.0):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 2, 0, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 12, 0, 49, 16, 9, 4, 12, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[divInt(( i2 + abs(i0) ),divInt(divInt(int(5.0),i1),divInt(min(mod(i2,divInt(len(saveChr(mod(min(i1, ( max(int(7.0), i2) + int(6.0) )),int(1.0)))),i0)), i0),( int(7.0) * abs(int(7.0)) )))):max(i2, divInt(divInt(( int(9.0) - int(8.0) ),divInt(int(5.0),i0)),int(0.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 8, 1, 3, 0, 1, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i1:int(07.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = abs(mod(i1,int(5.0)))\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i0:int(07.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 0, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(0.0))))[( int(7.0) + min(i0, ( mod(( int(5.0) + i1 ),divInt(len(saveChr(( i2 * min(max(abs(int(7.0)), i1), ( max(i2, i0) - int(7.0) )) ))),int(1.0))) + i0 )) ):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 11, 0, 34, 8, 9, 5, 3, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 0, 0, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 7, 0, 16, 3, 4, 3, 0, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(\"\"R\"\"[i0:int(0.0)], abs(( i2 + int(7.0) )))[( i2 + min(i0, ( i2 * i2 )) ):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 11, 6, 5, 6, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[mod(int(0.0),i0):( i2 * int(7.0) )].capitalize()[( int(5.0) + mod(i2,i0) ):divInt(divInt(int(7.0),i1),( abs(( i2 * divInt(min(( len(saveChr(i1)) - divInt(min(int(6.0), i2),int(1.0)) ), int(7.0)),i0) )) + i0 ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 4, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 0, 4, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i2:max(min(i1, i1), int(0.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 1, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 3, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 33, 9, 7, 5, 4, 6, 1, 1, 14, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[int(7.0):][abs(i0):mod(i2,int(7.0))][min(int(1.0), len((\"\"R\"\" + saveChr(i2)).capitalize())):divInt(( divInt(int(2.0),i0) + ( min(( i1 + ( i2 - ( int(2.0) - i1 ) ) ), divInt(max(int(5.0), i2),int(7.0))) + int(5.0) ) ),i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 2, 1, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 1, 0, 8, 1, 2, 0, 1, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[:int(9.0)][int(7.0):mod(int(5.0),i0)][int(2.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 2, 0, 2, 0, 1, 3, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 10, 0, 34, 11, 6, 6, 5, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[abs(divInt(i0,divInt(i2,int(7.0)))):], min(int(7.0), ( i2 + divInt(( ( int(5.0) + i0 ) - ( len(saveChr(( i1 - divInt(i2,( int(2.0) + i1 )) ))) * divInt(min(int(2.0), i2),int(5.0)) ) ),int(7.0)) )))[i0:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i1:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = int(07.0)\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s1[mod(int(0.0),i0):( i2 + int(7.0) )].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 2, 3, 0, 1, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 33, 9, 7, 5, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i1:i2], abs(mod(i2,int(0.0))))[( ( min(i0, int(7.0)) + divInt(( int(5.0) + i1 ),int(7.0)) ) * len(saveChr(divInt(i2,( min(( int(7.0) - i1 ), divInt(max(int(3.0), i2),int(7.0))) + int(7.0) )))) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 3, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 7, 0, 1, 10, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in (s0 + in1[i1:int(0.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 3, 2, 1, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 0, "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i2], abs(mod(i2,int(9.0))))[( int(7.0) + min(i0, ( divInt(( int(5.0) + i1 ),divInt(( ( i2 * len(saveChr(divInt(int(7.0),int(2.0)))) ) - i1 ),( min(int(1.0), i2) + max(int(7.0), i0) ))) * i0 )) ):divInt(int(7.0),abs(divInt(max(i1, ( ( ( int(9.0) - int(8.0) ) - mod(int(5.0),i2) ) * int(0.0) )),int(4.0))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 0, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 50, 16, 9, 9, 7, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0]}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(07.0):] not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 166}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 3, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 1, 2, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[mod(max(int(7.0), i0),divInt(i2,int(7.0))):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 167}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in1), i0):]:{:\\nres0 = in1[int(07.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 167}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 9, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 5, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 3, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1[abs(int(7.0)):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 166}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(len(in1)):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 8, 3, 1, 3, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( ( int(0.0) + i0 ) - ( i2 * i1 ) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1[i1:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 4, 1, 7, 7, 9, 6, 5, 0, 2, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 1, 1, 2, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [3, 1, 0, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 12, 0, 56, 19, 10, 12, 7, 6, 1, 1, 10, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = (\"\"R\"\" + in1) not in in0[max(i0, mod(min(( i2 + int(9.0) ), ( int(7.0) + min(i2, ( mod(divInt(len(s0[i0:( min(( i2 * divInt(( ( int(5.0) - i2 ) + divInt(max(int(7.0), i1),int(4.0)) ),int(1.0)) ), i2) * i0 )]),( int(7.0) - abs(int(7.0)) )),max(i0, ( ( ( int(9.0) - int(6.0) ) * divInt(int(5.0),i2) ) + int(0.0) ))) + mod(abs(int(2.0)),int(8.0)) )) )),( i2 - int(59.0) ))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 236}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 0, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[abs(i1):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 6, 7, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 0, 0, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), i0):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 0, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 4, 3, 1, 3, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[max(len(in1), mod(int(07.0),i0)):]:{:\\nres0 = in1.capitalize() not in in0[mod(( int(1.0) + divInt(int(7.0),abs(i0)) ),i2):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 230}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 8, 0, 33, 10, 8, 4, 6, 7, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] not in s0.capitalize()[mod(int(0.0),max(divInt(i2,int(1.0)), ( int(5.0) + min(i2, i2) ))):divInt(divInt(int(7.0),i1),divInt(len(in1),( i1 + ( min(divInt(max(i2, ( abs(int(6.0)) * i1 )),int(1.0)), int(7.0)) - i2 ) )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 234}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 6, 2, 1, 2, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( ( int(0.0) + i0 ) - int(7.0) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 2, 0, 1, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in0[len(saveChr(mod(int(84.0),i0))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 234}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i1):]:{:\\nres0 = in1[int(3.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 182}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(len(in1)):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i2\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] not in s0[mod(int(0.0),i0):( i2 + int(7.0) )].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 0, 0, 4, 0, 3, 0, 0, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( saveOrd(\"\"R\"\") \\l abs(int(0.0)) or True ) and in1 not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) - abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [4, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[min(int(0.0), i0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i0):]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), i0):]:{:\\nres0 = in1 not in in0\\ni2 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(len(in1)):]:{:\\nres0 = in1[i0:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, mod(i0,int(0.0))) not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 212}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 1, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[abs(mod(int(0.0),i0)):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[int(0.0):i0].rstrip()[abs(i2):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = ( ( len(\"\"R\"\") != mod(int(0.0),i0) or True ) and in1 not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 9, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(s0):] not in s0[mod(int(0.0),i0):mod(i2,int(4.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 219}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 4, 0, 1, 8, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.rstrip()[abs(i0):] not in saveChr(int(7.0))[i2:mod(i2,int(7.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[( i0 + int(0.0) ):] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 1, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 2, 1, 7, 0, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(\"\"R\"\"):] not in \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[i1:]) != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 8, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 3, 1, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 1, 0, 0, 1, 2, 1, 0, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 0, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 10, 0, 51, 14, 11, 7, 7, 6, 1, 1, 15, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(saveChr(i1)[abs(max(mod(i2,int(0.0)), mod(int(2.0),min(i2, ( divInt(( int(7.0) + i0 ),divInt(min(divInt(i1,( max(( int(8.0) + i2 ), ( abs(max(int(2.0), int(1.0))) * int(7.0) )) - i1 )), i2),int(7.0))) + int(9.0) ))))):min(int(8.0), saveOrd(in1[i0:divInt(mod(( int(5.0) * int(0.0) ),( int(4.0) - i0 )),int(8.0))]))]))[:int(59.0)] not in getCharFromString((\"\"R\"\" + s0.rstrip()), int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 0, 2, 0, 0, 5, 0, 1, 10, 3, 2, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in saveChr(len(in0[i0:int(0.0)].lstrip()[:i2])).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 1, 1, 8, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(\"\"R\"\"))[i0:] not in saveChr(int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [2, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 6, 0, 15, 3, 3, 2, 1, 4, 1, 1, 10, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[i0:] not in getCharFromString(saveChr(i2)[int(0.0):len(\"\"R\"\"[( i2 * int(7.0) ):mod(int(5.0),abs(i0))])], ( i2 + i2 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[min(mod(int(0.0),i0), mod(i2,int(7.0))):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 1, 8, 1, 3, 1, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in s2[len(s0[i0:int(0.0)]):]\\ni1 = abs(( i1 + int(7.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 0, 32, 9, 6, 5, 4, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(getCharFromString(in0[:int(7.0)][int(7.0):i0][mod(i2,int(5.0)):abs(int(2.0))], min(i2, divInt(( divInt(int(2.0),i0) + ( len(saveChr(( i1 + ( i2 - ( int(5.0) - i1 ) ) ))) + divInt(min(int(7.0), i2),int(5.0)) ) ),int(9.0))))):] not in (\"\"R\"\" + s0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[i1:]) != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 1, 1, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(s0)] not in \"\"R\"\".capitalize()[:mod(int(2.0),i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 0, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 2, 4, 2, 2, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 10, 1, 2, 0, 1, 5, 0, 1, 11, 3, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in getCharFromString(saveChr(len(in0[i0:i2][i2:mod(i0,int(0.0))].rstrip()[:int(7.0)])), int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 1, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 2, 1, 7, 0, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[len(\"\"R\"\"):] not in \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 4, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 7, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(in0)) not in saveChr(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 1, 0, 1, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 1, 3, 1, 0, 3, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 9, 0, 36, 9, 9, 5, 4, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[:len(in1)] not in getCharFromString(s0[i0:abs(min(mod(i2,int(0.0)), ( int(0.0) + i2 )))], i0)[( mod(( int(7.0) + i1 ),int(7.0)) * abs(divInt(i2,divInt(min(( int(2.0) - i1 ), ( max(i2, int(1.0)) + abs(int(7.0)) )),i0))) ):max(int(7.0), int(9.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 3, 3, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 7, 0, 31, 12, 6, 4, 8, 7, 0, 1, 10, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = in1.capitalize() not in in2[mod(mod(int(0.0),i0),( divInt(int(7.0),divInt(int(1.0),max(i0, i0))) + divInt(( int(7.0) + i0 ),( len(saveChr(divInt(i1,( len(s0) * mod(max(i2, divInt(saveOrd(in1),int(6.0))),i1) )))) - int(1.0) )) )):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(saveChr(mod(int(0.0),i0))[mod(i2,int(7.0)):( int(5.0) * abs(i2) )].capitalize()):] not in s0[:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 3, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 2, 4, 0, 2, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(\"\"R\"\"):] not in in0[mod(int(0.0),i0):abs(i2)].capitalize()[int(7.0):mod(int(5.0),min(i2, i0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 4, 0, 3, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[:len(in0)] not in \"\"R\"\"\\ni0 = abs(i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 2, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 12, 1, 5, 0, 1, 6, 1, 1, 15, 4, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.rstrip()[abs(i0):] not in in0[int(7.0):i1].capitalize()[divInt(i2,int(7.0)):abs(min(len((\"\"R\"\" + s0.capitalize()).lstrip()), i0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 240}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 10, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = in1 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 1, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[len(in0):] not in s0[:( int(0.0) + i1 )].capitalize()[divInt(i2,int(7.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 136}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 6, 1, 2, 1, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in2[len(in0):] not in s0[:( int(0.0) + i2 )].capitalize()[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 136}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 136}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 3, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 4, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 2, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 12, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 34, 9, 9, 5, 4, 8, 1, 1, 17, 4, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[len(in0):] not in saveChr(mod(i0,len(s0[( i2 + int(1.0) ):( int(7.0) + saveOrd((getCharFromString(in1, i0)[divInt(( len(\"\"R\"\") * int(5.0) ),i0):divInt(min(( i1 - max(min(( int(7.0) + int(7.0) ), divInt(max(int(1.0), i2),int(7.0))), i1) ), i1),i0)] + in1).lstrip()) )]))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 136}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 14, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), i0):]:{:\\nres0 = in2[int(7.0):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 246}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 15, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[mod(saveOrd(s2),i0):]:{:\\nres0 = in1[int(07.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 233}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 3, 0, 4, 0, 3, 4, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1], [0, 5, 1, 4, 3, 0, 2], [1], [0], [2, 0, 0, 4, 0, 0, 4, 4, 2, 1, 4, 0, 1, 4, 1, 1, 0], [3, 1, 3, 0], [1, 5], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 15, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(s1):]:{:\\nres0 = in1.rstrip() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 249}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 0, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 7, 0, 32, 10, 8, 6, 4, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in1[divInt(i0,abs(( i2 + int(7.0) ))):]) != ( int(7.0) + min(i0, divInt(( mod(int(5.0),i0) * ( len(in0) - ( i1 + min(max(divInt(int(7.0),int(7.0)), ( abs(int(1.0)) * i2 )), int(7.0)) ) ) ),i1)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 253}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [0, 2, 0, 1, 0, 2, 0, 2, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 11, 0, 49, 16, 8, 9, 7, 5, 1, 1, 10, 0, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(\"\"R\"\"[int(07.0):i2][int(1.0):]):]:{:\\nres0 = in0 not in in1[max(( i2 + int(7.0) ), mod(int(4.0),abs(i2))):( mod(( min(i0, divInt(len(in0[:( i1 * ( divInt(( int(1.0) + i2 ),divInt(min(int(7.0), i1),int(7.0))) - int(9.0) ) )]),i2)) + i0 ),divInt(int(8.0),max(int(5.0), abs(i0)))) * ( ( ( int(0.0) + int(4.0) ) * mod(int(8.0),i2) ) - int(59.0) ) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 293}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 1, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 16, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = s1[( i0 + int(0.0) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 226}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 17, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 11, 1, 5, 0, 1, 7, 1, 1, 15, 3, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = (in1 + in0) not in getCharFromString(s0[i0:int(0.0)], len(saveChr(min(i2, int(7.0)))))[mod(int(5.0),len((\"\"R\"\" + in1.rstrip()))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 1, 3, 3, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 4, 1, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 8, 1, 3, 0, 1, 5, 1, 1, 9, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = (s1 + in0) not in getCharFromString(\"\"R\"\", max(int(0.0), int(8.0)))[:abs(mod(i0,int(5.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1], [1], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 4, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 8, 2, 3, 0, 2, 3, 1, 0, 8, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (s0 + getCharFromString(in2[mod(len(in1),len(\"\"R\"\")):], i0)) not in saveChr(abs(divInt(int(0.0),int(7.0))))\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 2, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 4, 0, 1, 0, 1], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 9, 0, 34, 10, 8, 6, 4, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(in2[mod(i0,( ( i2 + int(1.0) ) + divInt(int(7.0),max(i0, ( divInt(( int(5.0) * i0 ),( min(divInt(i1,saveOrd(in0)), min(max(int(7.0), int(7.0)), ( min(int(1.0), i2) + int(7.0) ))) + i1 )) * i1 ))) )):]) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 7, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 0, 1, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 1, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [2, 0, 2, 1, 2, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 5], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 0, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 8, 8, 7, 0, 31, 9, 7, 4, 5, 7, 1, 1, 14, 3, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[mod(i0,len(in0)):]) != divInt(i2,int(7.0)) or True ) and saveChr(( int(7.0) * min(i0, mod(( divInt(int(5.0),i0) + ( i1 * int(7.0) ) ),i2)) )).rstrip() not in s0[len((\"\"R\"\" + in2).lstrip()):min(( int(7.0) - int(9.0) ), divInt(max(int(7.0), i1),int(7.0)))] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 2, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 3, 0, 9, 3, 2, 2, 1, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[mod(len(in1),i0):]:{:\\nres0 = ( ( ( len(in1) + ( i2 + int(0.0) ) ) != i0 or True ) and in0.startswith(s0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [1, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 3, 4], [1], [0], [2, 2, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 0, 4, 1, 1, 1, 0, 3, 0, 1, 4, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( len(in1) + i0 ):][i2:]:{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = (s0 + in0) not in s0[max(i0, int(1.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1], [1], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 4, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 3, 1, 0, 8, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (s2 + getCharFromString(in2[len(in1):], len(\"\"R\"\"))) not in saveChr(abs(i0))\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 5, 1, 1, 0, 1, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[int(0.0):] not in \"\"R\"\"\\ni0 = divInt(int(7.0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [2, 3, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 8, 1, 7, 0, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 0, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 2, 3, 0, 2, 2, 2, 1, 2, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 0, 0], [0, 5, 4, 4, 1, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 2, 1], [3], [9], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 1, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = max(i1, int(3.0)) != abs(( i1 + int(7.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 3, 2, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 10, 1, 4, 0, 1, 6, 0, 1, 9, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):].startswith(getCharFromString(s0, i0)[i2:abs(min(mod(int(0.0),int(7.0)), int(2.0)))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2.capitalize() not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [3], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 0, 13, 3, 2, 1, 2, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[int(0.0):] not in saveChr(divInt(int(7.0),i0))[mod(i2,int(5.0)):( int(7.0) * len(in0[i2:i0]) )].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 1, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 1, 0, 2, 1, 1, 2, 2, 2, 1, 0, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 1, 2, 0, 3, 0, 2, 2, 2, 1, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 3, 0, 2, 2, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 2, 0, 1, 0, 3, 0, 3, 0, 1, 1, 2, 3, 1, 3, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0], [3, 3, 2, 0, 4, 0, 1, 2, 1, 0, 2, 0, 4, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 16, 16, 15, 0, 62, 18, 14, 9, 9, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(s1):]):][i1:]:{:\\nres0 = ( int(0.0) != abs(mod(int(7.0),int(5.0))) or mod(i2,min(i1, ( divInt(( int(7.0) + i1 ),( int(8.0) + saveOrd(in0[i0:]) )) * ( ( divInt(int(1.0),i2) - ( min(int(0.0), i1) + int(7.0) ) ) * max(i1, divInt(divInt(abs(max(int(9.0), min(i2, ( mod(( int(8.0) - int(5.0) ),divInt(mod(i2,int(0.0)),i2)) - abs(i1) )))),min(i0, int(4.0))),int(8.0))) ) ))) \\l ( saveOrd(s0[:int(59.0)]) * max(i2, i1) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 0, 0, 2, 0, 5, 1, 2, 1, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( len(in1) + i0 ):]:{:\\nres0 = ( ( i2 != len(in1) or True ) and in0.startswith(s0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [3, 5, 4, 0, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 19, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = s0[len(in2):].endswith(s0[int(0.0):i0].rstrip()[abs(i2):i0])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 255}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 3, 1, 0, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 2, 0, 10, 1, 5, 0, 1, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = ( ( max(i2, abs(min(mod(len(s0),int(2.0)), i2))) != int(7.0) or True ) and in0 not in s0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 1, 0, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 21, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 4, 4, 6, 0, 16, 2, 4, 1, 1, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( saveOrd(in1[i0:]) != int(2.0) or True ) and in0 not in getCharFromString(\"\"R\"\"[abs(( i2 + int(7.0) )):int(5.0)], i2)[min(i0, mod(i2,i2)):int(7.0)] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 280}, {"genotype": [[0], [1, 0, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0, 2], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4, 5], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 22, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 11, 1, 31, 9, 6, 5, 4, 8, 1, 1, 15, 3, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[divInt(len(in0),i0):]:{:\\nres0 = in1[i2:] not in in0\\ni0 = len(s0[( i0 + int(0.0) ):i1].rstrip()[int(7.0):abs(int(5.0))])\\nin1 = saveChr(( divInt(( int(7.0) + i2 ),divInt(min(( i1 * len((\"\"R\"\" + in2.lstrip())) ), min(( i0 - i0 ), divInt(i0,int(7.0)))),i2)) + int(1.0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 230}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 23, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = len(in1) != i0\\ni2 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 235}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 24, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 11, 0, 49, 15, 10, 8, 7, 6, 1, 1, 15, 4, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[saveOrd(s2):] not in getCharFromString(saveChr(i0)[int(8.0):abs(mod(i2,int(4.0)))], mod(int(5.0),min(i2, ( divInt(( divInt(i0,( len((\"\"R\"\" + s0.capitalize()).rstrip()) + ( i1 + divInt(min(max(int(7.0), i2), ( abs(int(2.0)) * i1 )),int(1.0)) ) )) - int(7.0) ),i2) + i0 ))))[divInt(int(7.0),max(int(1.0), abs(i0))):mod(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i1 ) ),int(4.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 254}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [1, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 24, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 1, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = in1[saveOrd(s2):] not in \"\"R\"\"\\ni0 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 254}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 1, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 12, 2, 3, 0, 2, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, int(87.0))[i2:] not in in0[int(1.0):max(mod(i2,int(7.0)), mod(int(4.0),abs(i2)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in0):]:{:\\nres0 = in1.rstrip() not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 301}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0], [3, 5, 3, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 12, 0, 53, 18, 8, 9, 9, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, int(07.0))[i2:] not in s1[int(1.0):max(( i2 + int(7.0) ), divInt(int(4.0),( i2 - mod(( divInt(abs(i0),( min(( i1 - divInt(( divInt(int(1.0),i2) - divInt(len(s0[int(7.0):i1]),int(7.0)) ),int(9.0)) ), i2) - i0 )) - ( int(8.0) - min(int(5.0), max(i0, ( ( mod(int(0.0),int(4.0)) - divInt(int(8.0),i1) ) + int(59.0) ))) ) ),divInt(abs(i1),int(9.0))) )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 12, 2, 3, 1, 1, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, int(07.0))[i2:] not in in0[int(1.0):max(( i1 + int(7.0) ), mod(int(4.0),abs(i2)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [0], [0, 1, 0, 0, 0, 0, 1, 0], [2, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 12, 2, 3, 1, 1, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, int(0.0))[i1:] not in in0[int(7.0):max(( i2 + int(1.0) ), divInt(int(7.0),abs(i2)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 7, 9, 7, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 1, 5, 9, 7, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 1], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 1, 3, 1, 2, 3, 3, 0, 3, 2, 1, 0, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1, 3, 1, 1, 2, 3], [2, 0, 2, 2, 1, 0, 1, 2, 2, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 27, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 25, 25, 13, 0, 67, 21, 14, 10, 11, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, divInt(i2,int(07.0)))[max(mod(i2,int(9.0)), ( int(7.0) * abs(i2) )):] not in in0[divInt(( divInt(min(i0, ( len(s0[( i1 + divInt(( divInt(int(5.0),i2) * mod(min(int(1.0), i1),int(7.0)) ),int(7.0)) ):i2]) * i0 )),( int(9.0) - max(int(8.0), abs(i0)) )) + ( ( divInt(int(5.0),int(0.0)) - mod(int(4.0),i1) ) * int(8.0) ) ),max(len(saveChr(int(59.0))), max(int(9.0), mod(max(abs(i2), len((\"\"R\"\" + in1.rstrip()))),( int(2.0) * i1 ))))):( int(2.0) + mod(int(15.0),int(9722.0)) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 307}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 9, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 3, 3, 2, 0, 2, 2, 2, 3, 0, 0, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 12, 3, 2, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = in1[len(in0):] not in s0[divInt(int(2.0),i0):( i0 + int(7.0) )].capitalize()[( int(5.0) + int(9.0) ):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 3, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 12, 1, 5, 0, 1, 6, 0, 1, 11, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in s0[abs(i0):min(i2, i0)].rstrip()[int(9.0):divInt(int(7.0),len(saveChr(i0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 2, 2, 0, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 0, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1)):{:\\nres0 = in1[len(in0):] not in saveChr(i0)[:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in s0[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):] not in s0[int(2.0):i0].rstrip()[abs(i2):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 2, 2, 0, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 0, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 28, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1)):{:\\nres0 = in1[len(in0):] not in saveChr(i0)[int(07.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 221}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1], [0], [2, 0, 0, 1, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(\"\"R\"\") != i1 or True ) and in1.startswith(in0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 6, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 3, 1, 3, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1, 4], [1, 1, 2, 0, 2, 1, 2, 2], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 10, 0, 50, 15, 10, 8, 7, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[saveOrd(in1):]:{:\\nres0 = getCharFromString(in1, int(06.0))[i2:] not in in0[int(5.0):max(mod(abs(int(6.0)),min(int(4.0), len(s0[i2:mod(( divInt(min(i2, ( max(divInt(i0,( ( divInt(int(1.0),i1) - ( abs(int(7.0)) - i2 ) ) * int(7.0) )), int(9.0)) + i1 )),i2) * divInt(int(8.0),max(int(5.0), saveOrd(saveChr(i0)))) ),mod(( ( int(0.0) - int(4.0) ) * ( int(8.0) * i0 ) ),int(59.0)))]))), int(9.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 314}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 8, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 2], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 0, 3, 0, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 3, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1.capitalize().endswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 291}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 2, 5, 1, 7, 7, 7, 8, 5, 0, 2, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 3, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 8, 0, 36, 11, 7, 4, 7, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1[len(\"\"R\"\"):] not in in0[mod(int(0.0),mod(( i2 + int(7.0) ),divInt(int(5.0),abs(int(2.0))))):i2].capitalize()[divInt(divInt(int(5.0),i2),( min(( i0 + divInt(len(saveChr(( min(i1, mod(max(int(1.0), i2),int(7.0))) * int(7.0) ))),i1) ), i2) - int(7.0) )):int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 3, 3, 2, 2, 0, 1, 0, 0, 3, 3, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 2, 0, 0, 1, 1, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = len(in1[i1:]) != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 2, 0, 0], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 10, 1, 3, 0, 1, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = in1[:len(in0)] not in s0[int(7.0):int(7.0)][i0:mod(i2,int(5.0))][abs(int(2.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 312}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 2, 2, 0, 2, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 2, 1, 0, 0, 1, 0, 3, 3, 0, 2, 0, 2, 1, 0, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [1, 4, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 0, 0, 4, 4], [2, 2, 1, 0, 0, 2, 1, 2, 0, 2, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 18, 0, 74, 22, 16, 11, 11, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(saveOrd(in1), i0):]:{:\\nres0 = in1[abs(min(mod(i1,int(0.0)), ( int(7.0) * len(in0) ))):] not in getCharFromString(s0[min(( ( divInt(int(5.0),i2) * divInt(max(( i0 - abs(max(( int(7.0) + i2 ), max(divInt(int(7.0),int(1.0)), int(7.0)))) ), int(7.0)),i2) ) + i0 ), ( int(9.0) * min(divInt(max(i2, divInt(( ( int(8.0) - int(5.0) ) * ( int(0.0) + i1 ) ),int(4.0))),min(i0, mod(min(divInt(mod(int(8.0),i0),mod(( int(59.0) * i0 ),i1)), int(9.0)),i1))), saveOrd(saveChr(saveOrd((\"\"R\"\" + in1.rstrip()))))) )):i0], ( i1 - mod(int(2.0),i0) ))[i1:int(2.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 1, 3, 0, 1, 5, 1, 1, 9, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[saveOrd(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(\"\"R\"\", i0)[int(47.0):abs(mod(i2,int(5.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 291}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 2, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[len(saveChr(int(7.0))):].capitalize()[i0:mod(i2,int(7.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 6, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 2, 0, 12, 4, 2, 2, 2, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(( divInt(int(8.0),i2) + ( i2 + int(6.0) ) )):]:{:\\nres0 = mod(int(5.0),len(in1)) != int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 465}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 0, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 0, 3, 0, 0, 6, 0, 1, 10, 1, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[saveOrd(in1):]:{:\\nres0 = in1[len(s0):] not in s0[i0:i2].rstrip()[abs(int(0.0)):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 311}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 29, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in s0[i0:int(07.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 292}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 6, 1, 2, 0, 1, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[saveOrd(in0):] != s0[mod(int(9.0),i0):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 7, 0, 1, 10, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nres0 = in1[len(in0):] not in s0[len(in1[i1:int(0.0)]):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 30, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[saveOrd(in0):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 302}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [0, 0], [], [5], [1], [], [1], [], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [5, 5, 4, 7, 9, 0, 7, 2, 2, 6, 1, 6, 7, 8], [0, 2, 0, 2, 2, 1, 2, 0, 0], [0], [1, 1, 0, 2, 2, 1, 1, 0, 2, 1, 2, 2, 2, 0, 0, 0, 1, 2, 1, 2, 1, 3, 0, 0], [0, 1, 1, 0, 1, 1], [1, 0], [0, 0], [1, 1, 0, 0], [3, 2], [1, 1], [], [2, 0, 2, 2, 3, 4, 0, 4], [1], [], [1, 0, 2, 0], [3, 1], [], [15], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = False\\ni0 = int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [1, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[:int(0.0)] not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [1], [1], [0, 0], [1], [3, 0, 1], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= max(i0, int(1.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 9, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 3, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [1, 2, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 9, 0, 36, 10, 8, 5, 5, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s2[len(s0):]:{:\\nres0 = in1[len(in0):] not in s0[divInt(int(5.0),int(7.0)):( i0 + int(5.0) )].capitalize()[( min(int(9.0), i2) + i2 ):mod(divInt(int(6.0),i0),divInt(min(( i1 * ( len(saveChr(divInt(min(i2, ( max(int(1.0), i1) - int(7.0) )),int(7.0)))) + i2 ) ), i0),abs(int(9.0))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 0, 1, 2, 1, 2, 0, 0, 1, 2, 2, 2, 0, 2, 0], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 3, 1, 2, 3, 2, 3, 1, 0, 0, 0, 3, 0, 3, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3, 1, 4, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [2, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 3, 0, 2, 0, 2, 1, 4, 1, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [15], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 0, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(s2):]:{:\\nb2 = max(i0, int(0.0)) != int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [1, 0], [], [0], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [2, 0], [0], [3], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1], [4, 6, 5, 1, 1, 6, 1, 1, 9, 0, 9, 7, 6], [1, 2, 0, 0, 2], [1, 0], [2, 3, 3, 0, 0, 1, 2, 1, 2, 1, 3, 1], [1, 0, 0, 1], [0, 4, 3], [1, 0, 0, 0], [0, 0], [5, 1], [], [], [2, 0, 2, 0], [], [], [2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 6, 1, 2, 1, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= divInt(min(saveOrd(in2[i2:]), i0),int(46.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 1, 5, 4, 5, 9, 0, 3, 9, 4, 1, 4], [2, 1, 0, 0, 2, 2, 2], [0, 1], [2, 2, 3, 2, 0, 3, 0, 3, 3, 1, 2, 2, 1, 3, 3, 3, 1, 0, 1, 3, 1, 0, 0, 3], [0, 1, 0, 1, 0], [0, 2, 0, 2, 3, 0, 2, 0], [1, 1, 2, 0], [0, 1], [0, 2], [], [], [4, 0, 2, 2, 2, 4, 0], [3, 2], [1], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 7, 2, 23, 5, 8, 4, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( divInt(min(( i1 - abs(i0) ), min(abs(int(32154.0)), mod(( int(5.0) - len(s0.rstrip()) ),min(abs(int(9.0)), i0)))),int(0394.0)) * min(int(1.0), i2) )\\ni2 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 2, 0, 0, 2, 2, 0, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 0, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 0, 3], [1, 0], [1, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 6, 6, 12, 1, 33, 11, 5, 6, 5, 6, 1, 0, 15, 5, 2, 2, 1, 1, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif getCharFromString(s0, len(in2)) not in in1[:mod(i0,i2)]:{:\\nres0 = ( mod(( i2 + i0 ),divInt(int(0.0),len(in1))) != i1 or ( saveChr(( divInt(( int(7.0) - i2 ),( abs(divInt(i1,( min(i2, int(5.0)) * i0 ))) - ( len(in0.rstrip()) + int(7.0) ) )) * i0 ))[int(2.0):].endswith(getCharFromString((\"\"R\"\" + s0.lstrip()), int(1.0))) and True ) )\\n:}else:{:\\ni2 = i2\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0, 3], [0, 3], [0, 1, 1], [0, 0], [4], [3, 0], [1], [], [], [1, 1, 0, 1, 1, 1], [8, 4, 9, 2, 8, 3], [2, 1, 0], [], [1, 0, 0, 3, 2, 2, 3, 0, 3, 2, 1, 1, 1, 1], [1, 0, 1], [0, 4, 0], [0, 1], [0, 0], [5, 5], [], [], [0, 0, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 6, 6, 3, 0, 14, 3, 3, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( int(8.0) \\l i2 or i1 \\ge min(divInt(( saveOrd(in2) + i0 ),min(divInt(int(4.0),int(92.0)), int(8.0))), int(3.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2], [0], [0], [1, 0], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [0], [2], [0], [0], [], [], [0], [2], [2], [], [5], [], [], [], [], [], [], [2, 0, 2, 1, 0], [], [0], [], [], [], [], [4, 1, 0], [], [0], [0, 0, 0], [1], [], [2, 2, 0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 2, 2, 1, 3, 0, 2, 2, 2, 1, 0, 1, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 2, 1, 0, 0, 1, 0], [3, 1, 3, 0], [4, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1], [0, 9, 6, 9, 5, 6, 8, 2], [2, 2, 0, 0, 2, 0, 1, 2, 1, 1, 2], [1], [3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 0, 2, 2, 3, 0, 2, 2, 2, 0, 1, 1, 3, 2, 3, 1, 0, 0, 0, 3, 0, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 1, 3, 2, 3, 4, 2, 1, 0, 1], [0, 0, 0, 0, 0, 2, 2, 2, 0, 2], [0, 1, 0, 1], [1, 1, 1, 2], [1, 1], [], [3, 0, 0, 4, 4, 1, 2, 0, 4, 2, 0, 2, 4, 1], [0, 3, 3, 2, 1], [4], [2, 2, 1], [1, 1], [], [17, 0], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 0, 2, 1, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += max(len((s1 + s1)), int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 2, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 3, 1, 1, 6, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = len(in1[mod(int(0.0),i0):mod(i2,int(7.0))][( int(5.0) + abs(i2) ):]) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(i2,i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 1, 1, 2, 1, 0, 2, 2, 0, 0, 2, 2, 0, 1, 0, 1, 1, 2, 1, 0, 1, 0, 1, 1, 0, 2, 2, 0, 1, 1, 2, 0, 1], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 1, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 3, 3, 1, 0, 4], [1], [0], [2, 0, 0, 3, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 0, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in0):]:{:\\ni0 = max(i2, i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [3, 3], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 2, 2, 3, 3, 1, 1, 0, 0, 0], [1, 1, 1], [4, 0, 2], [1], [1, 0, 1], [4, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 9, 2, 3, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd(saveChr(mod(divInt(min(abs(int(3.0)), int(3.0)),i2),i0)).capitalize())\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 1, 1, 1, 0, 1], [], [], [], [], [], [], [], [], [2, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [4], [1], [0], [], [], [], [], [], [1, 0, 1], [4, 0, 2], [1, 0], [1], [2, 1, 0, 1], [1], [], [2], [1], [4, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = mod(int(4.0),i1) \\le int(02.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0, 0], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [0, 0, 0, 0, 0, 1, 1, 1], [6, 2, 5, 3, 7, 5, 0, 7], [0, 1, 0, 0], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= int(625375.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 2, 0], [], [2, 0, 2], [], [0, 0], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [5, 1, 8, 9, 2, 5, 1, 2, 6, 7], [2, 1, 0, 1, 1, 1, 0], [], [0, 1, 3, 0, 0, 2, 0, 0, 3, 3, 3, 1, 1, 1, 2, 2, 2, 1, 1], [1, 0, 1], [2, 2, 2, 2], [], [0, 0, 0], [2, 3, 1, 3, 2, 0, 2, 0], [], [], [4, 2, 0, 2, 2, 2, 0, 0, 2, 3, 3, 4, 4, 0, 3, 0, 2, 3, 4, 2], [2, 3, 2, 1], [2], [0, 1, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[i2:int(5.0)].capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1], [0, 1, 1], [3, 3, 2, 1, 3, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 1, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 12, 1, 50, 15, 11, 7, 8, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(s1):]:{:\\ni0 = len(in1[mod(int(0.0),abs(mod(i2,min(( int(7.0) + len(saveChr(i2)[i0:divInt(divInt(int(5.0),i1),divInt(min(( i2 + ( max(divInt(abs(i1),( max(int(7.0), i2) * int(6.0) )), int(1.0)) - i0 ) ), i0),mod(int(7.0),max(int(7.0), saveOrd(s0[i2:divInt(( ( int(9.0) + int(8.0) ) * ( int(5.0) - i1 ) ),int(0.0))])))))].capitalize()) ), int(4.0))))):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [0], [], [0], [], [], [2], [], [1], [], [], [], [2, 0, 1, 1], [0], [3, 0, 3, 0, 0], [1], [1, 1], [2], [0], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(i0, max(i1, i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 0, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = \"\"R\"\"[len(in1):] not in in0[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[len(in1):] not in in0[i1:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [2, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1, 2], [0, 1, 1], [0, 3, 0, 1, 2, 2, 0, 1, 1, 1, 3, 2, 2, 2, 3, 1, 0, 2, 3, 3, 2, 2, 3, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [3, 3, 2, 4, 3, 0, 1, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 != len(s0[i2:]):{:\\nin2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[mod(len(in0),i0):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 6, 2, 9, 0, 4, 3, 0, 8, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 2, 0, 3, 2, 2, 3, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 1], [1, 1, 2, 1, 2, 0], [1, 0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 4, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [1, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 3, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 1, 0, 0, 1, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in1[int(8.0):]\\ni0 = mod(i2,int(4.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [0, 1, 1, 1], [], [1, 1, 2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 3, 7, 2, 5], [0, 2, 1, 1, 1, 0, 2, 1], [1, 1], [1, 0, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 3, 1, 0, 1], [0, 1, 1, 0], [4, 1, 0], [0, 2, 2, 2], [0, 0], [0, 3, 2], [1], [], [2, 0, 4], [], [], [0], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(0.0)\\ni2 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 5, 0, 13, 3, 2, 2, 1, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s1[len(in0):] not in in0[:mod(int(0.0),i0)][( i2 + int(7.0) ):( int(5.0) + i2 )][i0:i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 0], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 2, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[mod(len(in0),i0):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 1], [], [1, 1, 1], [], [], [], [], [], [], [1], [], [], [], [], [], [], [1], [5], [0, 2, 0, 1, 2, 0, 2], [0, 0, 0], [0, 0, 2, 0, 0, 0], [1, 0], [], [1, 1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 6], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 1, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 3, 2, 3, 1, 3, 0, 2, 3, 3, 2, 0, 1, 0, 2, 1, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [3, 3, 2, 0, 2, 0, 1, 2, 1, 2, 1, 3, 0, 3, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 20, 20, 14, 0, 68, 19, 16, 10, 9, 6, 1, 0, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[:len(in1)]:{:\\nres0 = ( i0 != abs(min(mod(i2,int(0.0)), mod(( abs(i2) + divInt(( divInt(int(0.0),i0) + divInt(min(( i1 * ( max(( int(7.0) - i2 ), divInt(abs(i1),int(7.0))) + int(2.0) ) ), int(1.0)),i2) ),i0) ),int(7.0)))) or ( saveChr(int(7.0))[max(int(9.0), abs(i0)):mod(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i0 ) ),int(4.0))].endswith(in1[int(8.0):max(len(saveChr(divInt(min(int(59.0), len((\"\"R\"\" + s0.rstrip()))),i0))), mod(max(max(( i1 * int(9.0) ), i2), ( int(2.0) + int(2.0) )),int(6.0)))]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = len(in1[i1:]) != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [1, 1, 0, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 1], [], [0, 2, 0, 1, 0, 3, 2, 2, 1, 0, 1, 0], [1, 0, 0, 1], [3, 3], [1, 2, 0], [1], [5, 0, 2], [1], [], [3, 4, 4, 0, 0, 3, 1, 2, 0], [3, 0], [1], [2, 1], [2], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 != mod(i0,int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 4, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 4, 1, 1, 10, 3, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(s0):]:{:\\nres0 = getCharFromString(in1, len(saveChr(i0))) not in in1[int(0.0):i2].rstrip()[:mod(i2,int(7.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1, 0], [4], [0, 1, 0], [0], [], [3, 0], [0, 0], [], [], [1], [3], [2, 0], [1], [0, 0, 3], [1], [], [0], [1], [], [1], [], [], [], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 3, 1, 0, 2, 1, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( i2 \\le i0 and b0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [0, 2], [0], [4], [2], [], [1], [], [1, 1], [0, 8], [2], [], [1, 0, 3, 1], [0], [1], [1], [], [1, 4, 1, 5], [], [], [0, 3, 4, 2, 0, 0, 2], [0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 3, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not s1.startswith((getCharFromString(in1[:int(0.0)], i2) + s1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 2], [], [0], [], [], [0, 2, 2], [5], [1, 0], [0], [], [0], [], [], [], [1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1], [1, 5, 2, 5, 8, 5, 5, 1, 8, 9, 5, 7, 0, 2, 8], [2, 2, 0, 1, 1], [], [2, 3, 1, 0, 2, 1, 0, 1, 3, 2, 1, 1, 2, 3, 2, 3, 0, 3, 3, 3, 2, 2, 1, 3, 3, 1, 1, 0, 1, 1, 2, 2, 3, 1, 0], [1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 3, 2, 1, 0, 2, 0, 3], [0, 0], [0, 1, 1, 0, 1, 1, 1], [5, 3, 2], [], [], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 15, 15, 5, 0, 35, 9, 10, 2, 7, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = divInt(min(int(1.0), i2),mod(int(5.0),i2)) != int(2.0)\\nin2 = saveChr(min(mod(int(58.0),int(551.0)), ( min(divInt(len(in0),i0), abs(max(min(( mod(int(8.0),abs(min(int(9.0), int(5.0)))) + i1 ), int(7.0)), int(02.0)))) + mod(mod(len(s2),int(8.0)),i1) )))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0, 2], [], [], [], [], [], [], [], [], [1], [2], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 1, 0, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s0[saveOrd(in1):]:{:\\nres0 = s1[len(in0):abs(int(0.0))].startswith(\"\"R\"\"[i0:( i2 + int(7.0) )])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 2, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 2, 2, 2, 0, 0, 3, 3, 4, 0, 12, 2, 3, 1, 1, 7, 0, 1, 11, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in s2[( len(in1) + i1 ):]:{:\\nres0 = ( ( i2 != len(in1) or in0.startswith(s0) ) and in1[mod(i0,int(0.0)):i0].rstrip()[:int(7.0)].endswith(saveChr(abs(int(5.0)))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 2, 4, 1, 1, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(s0, len(in0[i0:int(0.0)]))[abs(( i1 + int(7.0) )):] not in s0[mod(int(5.0),saveOrd(saveChr(i1))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 0, 3, 0, 4], [1], [0], [2, 1, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 3, 3, 0, 0, 3, 0, 0, 0, 0, 3, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\"[int(2.0):]:{:\\nres0 = ( ( int(7.0) != int(5.0) or True ) and in2 not in in1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 2, 2, 0, 0], [1], [3, 3, 0, 1, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 0, 3, 3, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 0], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 1, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), i0):]:{:\\ni1 += int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [3, 8], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [1], [3, 1, 2, 3, 3, 1, 1, 2, 0, 0], [1, 1, 1], [4, 0, 2], [1], [1, 0, 1], [4, 2], [], [], [4, 4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= saveOrd(saveChr(int(3.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [0, 3, 1, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 2, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 2, 1, 2, 2, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 0, 12, 2, 3, 1, 1, 4, 1, 1, 11, 2, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[:i0][len(s1[int(0.0):][i2:len(in1)]):]:{:\\nres0 = in1[:mod(i0,int(75.0))].rstrip() not in saveChr(( int(7.0) + abs(i0) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 0, 2, 2, 1, 0, 2, 1, 2, 0, 0, 1, 2, 1, 0, 3, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 2, 2, 1, 1, 0, 1, 3, 0], [0, 0, 2, 2, 1, 2, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 1, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 3, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 2, 2, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s2 not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(\"\"R\"\"[:i1])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 1], [0, 3, 1], [1, 1, 1], [0, 0], [1, 3, 0], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(031.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [0, 8], [0], [], [2, 0, 3, 1, 1], [0], [1], [1], [], [5, 3], [], [], [4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = getCharFromString(in0, ( i0 - max(int(0.0), int(8.0)) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 4, 0, 2, 0, 2, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 4, 1, 1, 7, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1.capitalize() not in in1[:i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [], [0, 4, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 4, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 1, 0, 8, 1, 3, 1, 0, 4, 1, 1, 8, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):len(getCharFromString(in1, int(97.0)))]:{:\\nres0 = \"\"R\"\" not in saveChr(int(5.0))[abs(( i0 + int(7.0) )):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [8, 2], [2], [0], [1], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(82.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 2, 4], [1], [0], [2, 0, 0, 2, 0, 0], [0, 1, 3], [1, 0], [2, 2, 2, 2, 1], [0], [19], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( saveOrd(s0[len(s0):]) != i1 or True ) and in1[int(3.0):] not in in1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 0, 3, 0, 0, 5, 1, 1, 10, 1, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1[int(0.0):])]:{:\\nres0 = in0 not in \"\"R\"\"[i0:abs(i0)].rstrip()[int(7.0):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 0, 1], [4, 5, 0, 1], [2, 0, 1], [], [0, 2, 0, 0, 0, 3, 2, 2, 1, 0, 1, 0], [1, 0, 0, 1], [3, 3], [1, 2, 0], [1], [5, 0, 2], [1], [0], [3, 4, 4, 0, 0, 3, 1, 2, 0], [3, 0], [1], [2, 1], [2], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i2 == mod(i0,i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 3, 0, 8, 2, 2, 2, 0, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in s1[( len(in1) + i0 ):i2]:{:\\nb2 = ( ( len(in1) != ( i0 + int(0.0) ) or True ) and \"\"R\"\".startswith(in0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [1], [0, 2], [0], [4], [2], [], [1], [], [1, 1], [0, 8], [], [], [1, 3, 3, 1], [0], [3], [1], [], [1, 2, 1, 5], [], [], [0, 3, 4, 2, 0, 0, 0], [0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 4, 0, 0, 7, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not s1.startswith((getCharFromString(s2[:int(0.0)], len(s1)) + in2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = len(in1.capitalize()) \\l i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 5, 4, 3, 0, 4], [1], [0], [3, 3, 0, 0, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 6, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ((s0 + s2) + in2) in \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 4, 0, 4, 2, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 3, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0[len(\"\"R\"\"):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 5, 7, 7, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [0, 1, 2, 0, 0, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 1, 2, 3, 0, 3, 3, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 3, 0], [0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 11, 0, 50, 13, 13, 7, 6, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(s0[i0:i1], abs(divInt(i2,int(0.0))))[( int(9.0) + min(len(saveChr(( ( divInt(int(5.0),i0) + divInt(min(( i0 * max(int(7.0), ( abs(i2) - max(max(int(7.0), int(3.0)), int(7.0)) )) ), int(7.0)),i0) ) - i2 ))), divInt(int(9.0),min(( max(i1, i0) * divInt(divInt(int(8.0),int(5.0)),( int(0.0) - i0 )) ), int(4.0)))) ):len((\"\"R\"\" + in1.rstrip()))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [6, 1], [0, 2], [1], [3, 0, 1, 1], [], [0], [1], [], [2, 3], [], [], [2, 0], [], [], [1], [0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= min(i2, int(6.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[min(len(in2), i0):] not in in1[int(8.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 6, 2, 1, 2, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[( ( int(0.0) + i0 ) - int(5.0) ):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 1, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 1, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 2, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[abs(len(in2)):]:{:\\nb2 = in1[i0:] == in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [1], [2, 0], [], [0, 0], [], [], [1, 0], [], [2, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [3, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3, 5], [], [], [4, 0, 0, 2, 0, 2, 4, 0, 4], [1, 0, 1], [], [2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 1, 3, 3, 2, 0, 9, 1, 3, 0, 1, 5, 0, 0, 9, 3, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveChr(abs(i1)) != in0:{:\\ns2 = in2\\nb1 = in0[abs(int(9.0)):] in getCharFromString(in2, int(4.0))[mod(saveOrd(saveChr(int(7.0))),i0):]\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [1, 1, 0, 1], [4, 5, 0, 1], [0, 0, 1], [], [0, 3, 0, 1, 0, 3, 2, 2, 1, 0, 1, 0], [1, 0, 0, 1], [3, 3], [1, 2, 0], [1], [5, 0, 2], [1], [], [3, 4, 4, 0, 0, 3, 1, 2, 0], [3, 0], [1], [], [2], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 2, 0, 0, 5, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 != len((getCharFromString(in2, i0).rstrip() + s0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [3, 0], [], [0], [], [], [0], [], [], [], [0, 0, 0, 1, 0, 1], [2, 4, 5, 7, 6, 4], [1, 1, 2, 1, 0], [0], [2, 2, 0, 1, 2, 2, 2, 0, 0, 0, 1], [0, 1, 0, 0, 1], [0], [0, 1, 1], [1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 5, 1, 11, 5, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = ( mod(i1,int(2457.0)) + ( ( divInt(i2,i1) - i0 ) - int(64.0) ) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [1], [0], [], [], [1], [], [], [], [0], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 5, 4, 3, 0, 4], [1], [0], [0, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0 not in in2:{:\\nres0 = ( abs(len(in2)) != i0 or ( in1.endswith(in0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [], [0, 0], [], [], [1, 2, 0], [4, 3], [0, 0, 1, 1], [0, 0], [], [0, 3], [1], [0], [], [0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 6, 6, 7, 5, 0, 5, 0, 9], [2, 1], [], [1, 3, 2, 0, 1, 3, 2, 1, 0, 1], [1, 1], [3, 0], [], [1, 0], [0], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 3, 2, 4, 2, 0, 2, 1, 0, 0, 9, 9, 2, 0, 10, 2, 2, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b2\\nb0 = ( int(066750.0) \\le len(s0) or mod(i2,int(5.0)) \\ge min(divInt(int(0.0),i1), int(9.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 8, 1, 1, 7, 7, 2, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 0, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 2, 1], [0, 1, 1], [3, 0, 2, 0, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 1, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 1, 1, 1, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 3, 2, 2, 1, 1, 2, 1, 0, 3, 0, 0, 2, 0, 2, 1, 0], [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [3, 0, 3, 0, 3, 4, 1, 2, 1, 2, 3], [0, 0, 2, 1, 1, 2, 0, 1, 0, 2, 2], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 4, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2, 1], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 7, 0, 31, 11, 5, 2, 9, 4, 0, 1, 6, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(saveChr(i0).capitalize()):mod(i1,i1)]:{:\\nres0 = mod(divInt(int(0.0),mod(int(4.0),min(i0, i1))),( divInt(int(5.0),int(8.0)) + divInt(len(in1),( i2 + mod(min(divInt(len(in1),i1), mod(int(1.0),int(1.0))),int(7.0)) )) )) != int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s2[len(s1):] not in \"\"R\"\"\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [1, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [], [1, 0], [1, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 4, 0, 3, 1, 0, 3, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\ni0 = len(\"\"R\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= abs(int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [2, 2], [1], [0], [0], [], [0], [], [], [], [0, 1], [7, 0], [1, 0, 1, 2], [], [2, 0, 2, 0, 0, 2, 0, 1], [0, 0, 1], [], [0, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 2, 2], [0, 1, 1], [3, 0, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 14, 1, 50, 14, 9, 8, 6, 5, 0, 1, 11, 2, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[min(i0, i2):][i2:len(in1[int(0.0):i0])]:{:\\nres0 = in1 not in in0[:int(7.0)].rstrip()[mod(int(1.0),abs(i1)):( ( divInt(int(7.0),i2) + ( min(divInt(i1,len(saveChr(max(( int(2.0) + i2 ), ( max(int(1.0), i0) * int(7.0) ))))), int(7.0)) - i0 ) ) + i0 )]\\ni0 = divInt(int(9.0),abs(( max(i2, divInt(divInt(( int(8.0) * int(5.0) ),( int(0.0) - i2 )),int(4.0))) - int(8.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 3, 2, 1, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb1 = in1[len(s0):] not in s0[( int(8.0) + int(1.0) ):mod(i0,int(5.0))].capitalize()[( int(7.0) + abs(i2) ):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0, 1, 0], [], [1, 0, 1], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 9, 0, 9, 5, 8, 3, 4, 9, 2, 1, 7, 3, 4, 6, 6], [2, 1, 2, 2, 1, 0, 1], [0, 0], [1, 2, 2, 3, 1, 1, 0, 1, 2, 0, 2, 0, 3, 1, 1, 2, 3, 3, 1, 3, 1, 2, 0, 3, 1, 0, 2, 1, 1], [1, 1, 1, 0, 1, 1, 0], [0, 0, 4, 1, 1, 3], [1, 0, 0], [1, 1, 0, 0, 0], [4, 5], [], [], [0, 4, 3, 3, 4, 0, 4], [0, 1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [7], [2, 1], [], [2, 0, 1, 0], [1], [], [], [1], [4], [], [], [4, 4], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 1, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = getCharFromString(saveChr(mod(i2,int(7.0))), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1], [], [2], [], [0], [], [], [2], [], [0], [], [], [2], [], [1], [], [1], [5], [2], [0], [1], [], [], [2], [1, 1, 1, 0, 0, 0, 1, 0], [5], [], [0], [4, 4], [3, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(5.0)).lstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 1, 1, 2, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 2, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 1, 1, 0, 0, 2, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 14, 0, 58, 18, 11, 9, 9, 6, 1, 1, 14, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = in1[len(in0):] not in s0[:i1][abs(min(mod(i1,mod(( int(0.0) + len(getCharFromString((\"\"R\"\" + saveChr(i1)), divInt(( ( int(7.0) + i1 ) * ( min(max(i0, ( abs(divInt(int(5.0),i2)) - ( max(int(7.0), i1) + int(2.0) ) )), int(1.0)) * i1 ) ),divInt(divInt(int(7.0),min(int(7.0), min(i2, ( ( ( int(9.0) - int(8.0) ) - mod(int(5.0),i1) ) * int(0.0) )))),divInt(i1,int(4.0)))))) ),int(8.0))), i2)):][i1:mod(int(59.0),i2)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 1, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 1, 1], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [0], [], [], [], [], [], [1, 2, 2, 0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0, 2], [], [0], [], [], [1], [], [0], [], [], [], [2, 0, 2], [0], [0], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 9, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 2, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 1, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [2, 3, 0, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(s0)):]:{:\\nb0 = in1[divInt(int(0.0),i0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [0], [2, 0], [0], [0, 0], [], [], [0, 2], [2], [2, 0], [], [5], [1], [], [0], [], [0, 1, 1], [4, 4, 3], [2, 0, 2, 1, 0], [], [1], [], [], [], [], [2, 0, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(int(44.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 7, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 1, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 7, 0, 32, 9, 6, 5, 4, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = in1[len(getCharFromString(in0[:int(7.0)][int(7.0):int(7.0)][mod(i0,int(2.0)):abs(int(2.0))], min(i2, divInt(( divInt(int(5.0),i2) + ( len(saveChr(( i0 + ( i1 - ( int(7.0) - i2 ) ) ))) + divInt(min(int(5.0), i1),int(9.0)) ) ),int(8.0))))):] != (\"\"R\"\" + s0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [0, 0], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[abs(len(in1)):]:{:\\nb1 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 0, 0, 1, 2, 1, 1, 0], [0, 1, 1], [2, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 1, 3, 0, 2, 0, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 1, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 4, 1, 0, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[mod(i2,i0):]:{:\\nres0 = in1 not in in1[int(0.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [17], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [0, 1], [], [0], [], [], [1, 0], [4], [0, 1, 1], [0], [], [2, 0], [0, 0], [], [], [1, 1], [3, 0], [2, 0, 2], [1], [1, 0, 3, 2, 0, 3, 1], [0, 1], [1, 3], [0, 2], [1], [], [1], [], [1], [], [], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 3, 1, 7, 1, 2, 2, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not int(3.0) \\le i2\\ni0 += max(( i2 * len(\"\"R\"\") ), int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 2, 1], [0], [0, 0, 1, 0, 0], [], [0, 0, 0], [], [], [0, 2, 3, 3], [2, 5], [0, 1, 0], [0, 0], [], [1, 0], [], [1], [], [1], [5], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [1], [0, 1, 0, 0], [], [], [0], [], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [0], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\nb2 = i0 == int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 1, 2, 0, 8, 5, 0, 4, 3, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4, 3], [1], [0], [4, 0, 0, 3, 0, 0, 1, 0, 2, 0, 4, 3, 1, 4, 2, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = len(getCharFromString(s0, int(7.0))) != i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 2, 1], [2], [0, 1], [], [0], [], [], [1, 1], [4], [1, 0], [0], [2], [0], [], [], [], [1, 1], [0, 2], [1, 0, 0], [0], [2, 3, 0, 1, 1, 0], [1, 1], [3], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 2, 3, 1, 6, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = divInt(len(saveChr(i1)),int(0.0)) \\le int(2.0)\\nloopBreak% = 0\\nwhile b1:{:\\ni0 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0], [1], [], [0], [1], [3], [0], [], [], [1, 1, 1, 1, 1, 1, 1, 1], [4, 6, 3, 0, 1, 7, 8, 3], [2, 0, 2, 1, 2, 2], [1], [3, 0, 1, 3, 0, 3, 3, 2, 1, 2, 3, 1, 2, 0, 3, 0, 1, 1, 3, 3, 2, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0], [4, 1, 0, 2, 0, 0, 1, 0, 1], [2, 2, 0], [0, 1, 0], [4, 4, 5], [], [], [3, 0, 2, 0], [0], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 2, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= saveOrd((in1 + in1[:i0]))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1, 1, 1], [], [], [], [], [3, 0], [], [0], [], [], [0], [], [0], [], [0, 1], [6, 8], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(68.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 4, 4, 0, 2, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 0, 1, 4, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nin1 = getCharFromString(saveChr(len(in1)), abs(i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [], [], [1, 0], [0], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 2, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 0, 4, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 0, 0, 2, 1, 0, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s2[i1:] not in in2:{:\\ni2 = len(\"\"R\"\"[i2:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [], [], [0, 2], [1], [0], [], [], [2], [], [5, 1], [], [], [0], [], [], [], [0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 2, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 3, 1, 3, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[( ( int(0.0) + ( int(7.0) - i0 ) ) * i2 ):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 8, 5, 3, 9, 9, 0, 7, 9, 0], [0, 0], [1], [1, 0, 1, 3, 1, 1], [0], [1], [1], [], [5, 0, 2], [1], [], [1, 0, 2, 0], [1], [], [0], [0], [10], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [1], [1], [], [0], [], [], [2, 2], [5], [0, 1], [0], [], [2, 0], [], [], [0], [], [], [1, 2, 0, 0, 2], [0], [2, 0, 0, 0, 0], [1], [], [], [0], [], [], [], [], [], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 5, 1, 5, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif not divInt(i1,i2) != i0:{:\\ni0 = i2\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 2, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 0, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [2, 2, 0], [0], [2, 2, 3, 3, 0, 0, 1], [1, 0], [2, 2], [1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 7, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(( abs(abs(i2)) - i0 ),int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 1, 11, 2, 5, 2, 1, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[:abs(len(in2))] not in in1[:abs(i0)]\\ni1 += min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in1) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [8, 9, 1], [1], [1], [1], [], [], [1], [], [1, 0], [], [], [0], [], [], [], [3, 0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(89.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [1], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nb0 = in1 not in in1[:max(i2, int(0.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 1, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 4, 4, 2, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 1, 9, 0, 3, 0, 0, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = in1 not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = len(s1[:i1][int(0.0):abs(int(7.0))][int(5.0):int(7.0)][:i2])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 1, 3, 0, 3, 3, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 4, 1, 1, 3, 1], [1, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = int(07.0) != len(in1[i0:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [17], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = (in2 + \"\"R\"\")\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 33, 9, 8, 5, 4, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(s0, len(in1[len(in1):]))[i1:]:{:\\nres0 = in0[int(0.0):abs(mod(i1,int(7.0)))] not in s0[mod(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len(saveChr(min(i0, ( max(( int(2.0) + i2 ), divInt(abs(int(1.0)),i1)) * int(7.0) )))) - int(7.0) )) + i1 ))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in (in1 + s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1], [], [0, 1], [0], [], [], [], [1], [], [0], [], [], [1], [], [1], [], [1, 1, 1], [6, 9, 1], [2, 0, 2], [0, 1, 1], [1, 3, 1, 0], [], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0], [3], [2], [0], [1], [], [], [1], [], [0, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 0], [0], [0, 0], [0], [], [0], [], [], [], [1, 0, 1, 1], [9, 3, 4, 0], [], [], [1, 2, 1, 1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [2], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [17], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1], [8], [2, 2, 1], [0], [0, 1, 3, 3, 0, 0, 0], [1, 1], [0, 3], [0], [0, 1], [0], [1], [], [1, 0], [2], [], [], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = \"\"r\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 1, 8, 1, 3, 0, 1, 5, 1, 1, 8, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(s1):]:{:\\nb1 = in1[len(in1):] not in in0[i1:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = abs(mod(i1,int(7.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [0], [0], [], [], [], [], [], [], [], [3, 3, 1], [], [], [], [], [], [], [], [], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 3, 2, 1, 0, 4, 0, 1, 0, 1, 4, 4, 2, 0, 2, 2, 2, 0, 4], [], [], [2, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 0], [], [2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveChr(i1) != in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 0], [0], [0, 0], [0], [], [0], [], [], [], [1, 0, 1, 1], [9, 3, 4, 0], [], [], [1, 2, 1, 1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [1], [3], [], [3], [0], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [0], [1], [0], [], [0], [], [], [], [1, 0, 1], [8, 3, 4], [1, 2], [], [2, 2, 0, 0, 3, 2, 1, 1], [1, 0, 1], [3], [0], [1, 0], [5, 2], [], [], [3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 8, 3, 1, 1, 2, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = mod(( i1 + i2 ),len((in2 + s2))) \\l divInt(int(8.0),int(34.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0], [0, 2], [2, 1], [0], [0, 0], [], [], [2], [2], [1, 0], [0], [], [1], [], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [3, 2, 8, 7, 6, 3, 4, 4, 0, 1, 4, 3, 2, 9, 2], [0, 2, 2, 1, 0, 1, 1, 0], [1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 4, 1, 3, 2, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 4, 3, 1, 1], [1], [0], [4, 2, 4, 1, 0, 0, 0], [3, 2], [2], [2], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 1, 31, 9, 8, 6, 4, 5, 1, 1, 7, 2, 1, 1, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in \"\"U\"\".capitalize()[min(max(i0, int(3.0)), min(( i2 + int(28.0) ), mod(int(7.0),min(i2, mod(( ( int(6.0) + i1 ) * ( saveOrd(in1) - max(i0, ( len(in0) + divInt(int(3.0),i1) )) ) ),divInt(abs(int(4.0)),i1)))))):].strip():{:\\ns1 = s1\\ni0 *= int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 5, 0, 6, 1, 7, 7, 9, 8, 7, 3, 4, 8, 5, 0, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 0], [0, 1, 1], [3, 0, 2, 1, 0, 2, 0, 2, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 1, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 1, 3, 2, 2, 1, 2, 2, 1, 2, 1, 1, 0, 0, 3], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 4, 2, 0, 3, 0, 1, 2, 1, 3, 1, 2, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 12, 4, 2, 3, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(i0, ( int(1.0) + i2 )):]:{:\\nres0 = in1 not in in1[( i2 + ( mod(int(0.0),saveOrd(in0)) * i0 ) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 2, 6, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [0, 1, 0, 0, 0, 0, 1, 0], [5, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 12, 2, 3, 0, 2, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, int(87.0))[:i2] not in in0[int(2.0):max(divInt(i2,int(6.0)), mod(int(5.0),abs(i2)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 3, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 3, 0, 0, 2, 1, 0, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):abs(i0)] not in \"\"R\"\"[abs(i2):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 4, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in \"\"R\"\"[len(in2):]:{:\\nb1 = in1[int(0.0):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 2, 0, 0, 2, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 2, 2, 1, 1, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 1, 3, 2, 2, 1, 2, 2, 1, 2, 1, 1, 0, 0, 3], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 4, 2, 0, 3, 0, 1, 2, 1, 3, 1, 2, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 1, 12, 4, 2, 3, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(saveOrd(in1), ( int(1.0) + i0 )):]:{:\\ni2 = ( i2 + ( mod(int(7.0),int(5.0)) * i0 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 0], [0, 2], [0, 2], [], [0, 0], [], [], [2], [], [0], [], [], [1], [], [0], [], [1], [6], [1, 1], [1], [0], [], [], [2], [], [4, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = True\\nin1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [], [], [], [], [], [], [], [], [3, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [3], [], [], [2], [], [1, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 1, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[:saveOrd(in1)]:{:\\ns1 = in0[abs(i1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 3, 2, 1, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 4, 4, 2, 0, 4, 3, 1, 0, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0[len(\"\"R\"\"):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 1, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 17, 17, 11, 0, 51, 14, 10, 7, 7, 5, 0, 0, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[:len(in1)]:{:\\nres0 = ( i0 != abs(min(divInt(i2,int(1.0)), mod(int(2.0),abs(i2)))) or ( getCharFromString(in1[min(( divInt(int(7.0),i0) + ( divInt(divInt(i1,( max(( int(7.0) + i2 ), ( abs(i1) * int(2.0) )) - int(1.0) )),int(7.0)) + i2 ) ), i0):int(7.0)], int(9.0))[max(int(8.0), min(i0, divInt(mod(( int(5.0) * int(0.0) ),( int(4.0) - i2 )),int(8.0)))):int(59.0)].endswith(saveChr(int(9.0))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 0, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 0, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 7, 1, 2, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):min(mod(int(0.0),i0), i2)]:{:\\nres0 = in1[i2:] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1):]:{:\\nres0 = in1.startswith(in0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 1, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 5, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[max(len(in2), i0):] not in s1[int(7.0):]\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 0, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[:min(len(in1), i0)]:{:\\nres0 = in1[i2:] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1, 1, 0], [], [0, 0, 1], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 9, 0, 9, 5, 8, 3, 4, 9, 2, 1, 7, 3, 4, 6, 6], [2, 1, 2, 2, 1, 0, 1], [1, 0], [1, 2, 2, 3, 1, 1, 0, 1, 2, 0, 2, 0, 3, 1, 1, 2, 3, 3, 1, 3, 1, 2, 0, 3, 1, 0, 2, 1, 1], [1, 1, 1, 0, 1, 1, 0], [0, 0, 4, 1, 1, 3], [1, 0, 0], [1, 1, 0, 0, 0], [4, 5], [], [], [0, 4, 3, 3, 4, 0, 4], [0, 1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 1, 0, 8, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(0.0) \\ge mod(mod(min(int(90.0), int(9.0)),i2),int(5.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [0, 1, 1, 2, 2, 1, 0, 2], [1, 1, 0, 0, 0, 0, 1, 0, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 12, 0, 53, 17, 9, 8, 9, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in0):]:{:\\nres0 = getCharFromString(in1, mod(i2,int(87.0)))[max(mod(i2,int(5.0)), ( int(7.0) + abs(i2) )):] not in in0[divInt(( divInt(min(i0, ( len(s0[( i1 - divInt(( divInt(int(4.0),i2) - mod(min(int(1.0), i1),int(7.0)) ),int(7.0)) ):i2]) * i0 )),( int(9.0) * max(int(8.0), abs(i0)) )) - ( ( divInt(int(5.0),int(0.0)) + divInt(int(4.0),i2) ) * int(8.0) ) ),max(int(59.0), int(9.0))):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 1, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"R\"\" not in in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [0, 0, 1], [4, 6, 0], [2, 1, 2, 0, 1, 0, 1, 1], [1], [3, 2, 2, 2, 2, 0, 0, 3, 0, 2, 0, 0, 2, 3, 0, 1, 0], [1, 0, 1, 0, 0, 0], [1, 3, 0], [0, 0, 2, 0, 1], [1, 1, 1], [4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 8, 1, 17, 6, 3, 5, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += max(mod(( mod(( i1 + i2 ),len(in1)) * i0 ),( i1 + i0 )), ( min(i1, int(460.0)) - i1 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [5, 9, 7, 4, 8, 8, 0, 0, 1, 6, 7], [2, 0, 2, 1, 1, 2], [0], [3, 2, 1, 3, 0, 2, 3, 0, 2, 0, 1, 3, 0, 0, 0], [0, 1, 0], [1, 1, 4, 2], [2, 0], [1], [5], [], [], [2, 0], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 5, 5, 6, 0, 15, 3, 4, 2, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(( int(5.0) * max(i2, mod(saveOrd(in2[i0:( i2 + int(9748.0) )]),abs(i1))) ), i1) \\ge i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [9], [0], [0], [1], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nb1 = in1[len(s0):] not in s0[mod(int(0.0),i0):divInt(i2,int(1.0))].capitalize()[( int(5.0) * abs(i2) ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [2, 2], [1, 1, 2], [0], [0, 0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [], [0], [4, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 2, 6, 0, 3, 1, 0, 2, 0, 0, 5, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1.rstrip() not in saveChr(abs(len(in2[i0:]))):{:\\ni2 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += abs(int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 1, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 0, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\ni0 = len(in1[i2:int(8.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2], [0, 1, 1], [2, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 4, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[divInt(len(in1),int(0.0)):]:{:\\nres0 = in1[:i2] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [0, 2, 0], [0], [2, 0, 0], [1], [], [1], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(i2,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [0], [0], [], [], [0, 0], [], [0, 2], [], [3, 0], [0], [], [], [], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [5, 1], [2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [4], [], [], [1], [1], [], [4, 1], [2], [], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"R\"\".capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 1, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 3, 3, 6, 2, 12, 2, 3, 1, 2, 2, 1, 0, 6, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif getCharFromString(s0, len(\"\"R\"\"[i0:]))[i2:] not in in2:{:\\ni2 = int(0.0)\\ni0 += max(mod(i1,int(7.0)), mod(int(5.0),abs(i2)))\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 0, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 1, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 2, 3], [1, 0], [2, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 10, 1, 4, 0, 1, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s1):]:{:\\nres0 = in1[len(in0):].startswith(saveChr(i1)[abs(min(mod(i1,i2), int(6.0))):int(7.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 0, 2, 1, 0, 2, 0, 1, 1, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 3, 0, 1, 2, 1, 1, 0, 0, 3, 0], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 2, 1, 2, 0, 6, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:max(i0, ( int(0.0) + i2 ))]:{:\\nloopBreak% = 0\\nwhile in1 not in getCharFromString(in1, ( i2 + int(6.0) )):{:\\nin0 = s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [1, 2, 0, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 1, 0, 0, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(3.0):]:{:\\nres0 = in1 not in in1[mod(i0,int(7.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 1, 2, 0, 8, 5, 0, 4, 3, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [1, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4, 3], [1], [0], [4, 0, 0, 3, 0, 0, 1, 0, 2, 0, 4, 3, 1, 4, 2, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = getCharFromString(s0, int(7.0)) not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 1, 0, 0], [0, 2], [2, 1, 2], [0], [0, 0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 0, 0, 0, 0, 0, 1, 2, 0, 2, 2, 2, 2, 0], [0, 1, 1], [0, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 0, 0, 2, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [3, 0, 3, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 19, 1, 52, 17, 8, 7, 10, 6, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + (in1[i1:] + saveChr(len(in1[i2:]))[i0:min(mod(i0,int(0.0)), ( int(7.0) * divInt(i1,divInt(( divInt(int(2.0),i2) - ( abs(divInt(i0,abs(len(saveChr(divInt(int(7.0),i0)))))) * ( min(i0, i0) - mod(i0,i1) ) ) ),i2)) ))][divInt(int(5.0),max(( abs(i0) + ( ( divInt(int(1.0),int(7.0)) * divInt(int(7.0),i2) ) - int(9.0) ) ), i2)):i2])):{:\\nin2 = (\"\"R\"\" + s0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 3, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [1, 0, 3, 0, 0, 3, 2], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 2, 1, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 2, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2[int(0.0):]\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [2, 2, 3], [5, 0, 0], [2, 2, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 0, 2, 0, 2, 0, 0, 0, 1, 4, 4, 4, 1, 13, 3, 3, 1, 2, 5, 0, 0, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[len(in2):]:{:\\nb2 = in0.endswith(saveChr(mod(int(0.0),i0))[mod(i2,int(7.0)):( int(5.0) + abs(i2) )].capitalize())\\n:}else:{:\\ni0 = int(7.0)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 2, 0, 0, 1, 0, 1, 2], [0, 1, 1], [0, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 2, 0, 2, 3, 1, 2, 1, 0, 0, 0, 3, 0, 3, 3, 3, 0, 2, 0, 3, 1, 1, 2, 1, 0, 1, 1, 3, 0, 1, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 2, 3, 0, 1, 2, 1, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:len(in1)]:{:\\nin1 = in0[:i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0, 2], [], [0], [], [], [1], [], [0], [], [], [], [1, 1], [0], [0], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1, 0], [], [0], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1], [0], [1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [2, 3, 2, 0, 1, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 4, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 2, 2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 8, 3, 1, 2, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(len(in2[( i2 + int(1.0) ):]),( i1 + int(7.0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 4], [2, 0, 0, 0, 0], [1], [2, 1, 3, 3, 0, 3, 2, 0, 0, 0], [1, 0], [2, 1, 1], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 1, 10, 2, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += divInt(int(2.0),abs(max(i0, max(( i0 * i0 ), i0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [], [], [2, 0], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 1], [], [0], [], [], [0], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1], [4, 2], [1], [1], [1, 2, 3, 3, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 4, 4, 2, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):len(in1)]:{:\\ns2 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 2, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 1, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 4, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in1[:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [0, 1, 0, 0, 0, 0, 1, 0], [3, 1, 3, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 11, 2, 2, 0, 2, 4, 1, 1, 8, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s1[saveOrd(\"\"R\"\"):]:{:\\nres0 = getCharFromString(in0, int(07.0))[i2:] not in in1[int(5.0):max(divInt(i2,int(7.0)), mod(int(5.0),i2))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [4, 5], [1, 1], [0], [0, 1, 1], [], [], [], [], [5, 0, 2], [1], [], [3, 4, 1, 0, 1, 3, 0, 2, 0], [2, 0], [0], [2, 1], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 4, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = (\"\"R\"\".capitalize() + s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 0, 0, 0, 2, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 13, 2, 4, 1, 1, 4, 2, 1, 10, 1, 0, 4, 2, 1, 0, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[len(in1):] not in \"\";\"\"[i0:int(0.0)].capitalize()[abs(( i2 + int(7.0) )):mod(i2,min(i0, i2))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 8, 1, 1, 7, 7, 2, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 1, 2, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1], [0, 1, 1], [2, 0, 2, 0, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 1, 2, 3, 2, 0, 2, 3, 2, 3, 1, 2, 3, 1, 0, 1, 2, 0, 0, 2, 1, 3, 1, 3, 0, 3, 2, 2, 0, 1, 2, 1, 0, 3, 0, 0, 2, 0, 2, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [3, 0, 3, 0, 3, 4, 1, 2, 1, 2, 3], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2, 1], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 12, 0, 48, 17, 8, 6, 11, 6, 1, 1, 15, 5, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(i0,mod(i1,i1)):divInt(mod(int(0.0),( int(4.0) + len(in1[i1:].capitalize()) )),i1)]:{:\\nres0 = in1 not in saveChr(divInt(( int(5.0) + int(8.0) ),( min(divInt(i2,mod(len(s2.rstrip()),divInt(min(int(1.0), mod(len((\"\"R\"\" + saveChr(int(1.0))).capitalize()),i1)),int(7.0)))), ( i0 * i0 )) - ( int(7.0) + saveOrd(s0) ) )))[int(2.0):max(i0, abs(( divInt(i0,int(8.0)) - divInt(int(5.0),i1) )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 6, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 0, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 4, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [2, 2], [5], [0, 1], [0], [], [0, 0], [], [], [], [1], [7], [2, 1, 1, 0, 2, 2], [], [2, 0, 2, 0, 0, 3, 0, 2, 0, 2, 0, 3, 0], [1, 0, 1, 1], [0, 2], [0], [0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 0, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):mod(int(0.0),i0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 0, 0, 0, 1], [0, 2, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0], [3, 2, 2, 1, 1, 2, 3, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [0, 2], [], [0], [], [], [1, 2, 2], [5], [1, 0], [0], [], [0], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [1, 5, 2, 8, 4, 7, 5, 8, 7, 4], [0, 2], [], [1, 2, 1, 3, 3, 1, 0, 1], [1], [0, 2], [], [0], [2, 5], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 7, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(1.0) != divInt(int(5.0),min(abs(int(2.0)), i0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [4, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 4, 4, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[saveOrd(in2):] not in \"\"R\"\"\\n", "other_info": {}, "test_fitness": 351}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2, 2, 1], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 11, 0, 50, 17, 9, 10, 7, 7, 1, 0, 15, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[( saveOrd(in2) + i0 ):] not in in1[int(0.0):]:{:\\nres0 = ( len(in1) != mod(i1,int(7.0)) or ( in0[:( int(5.0) + abs(i1) )].endswith(s0[mod(( ( int(7.0) * i1 ) * ( saveOrd(getCharFromString((\"\"R\"\" + saveChr(len(in1))), i0)) + ( min(divInt(int(2.0),i2), ( max(int(1.0), i1) * divInt(int(7.0),i1) )) - divInt(( int(5.0) - abs(int(9.0)) ),max(i2, ( ( divInt(int(8.0),int(5.0)) * mod(int(0.0),i2) ) + int(4.0) ))) ) ) ),i1):]) or True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1], [], [0], [], [], [1], [], [], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [3, 3], [], [0], [], [], [0], [], [], [], [1], [7], [2, 2, 1], [], [0, 1, 2, 3, 3, 2, 0, 2, 3, 0, 3, 0], [1, 1, 1, 0], [4, 4, 3, 2], [2], [0, 1, 1], [3, 3, 2, 3, 1], [1, 0, 1], [], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [], [], [0, 1], [3, 0, 3], [24], [], [], [6, 23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in0[i2:int(7.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2[len(in2):] not in in1[i0:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[abs(len(in1)):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len((s0 + in2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 2, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [3, 3, 1], [], [], [], [1, 1], [4, 9], [0, 2], [1], [3, 2, 2, 1, 3, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2], [1, 0], [0, 1, 0, 0, 0, 0, 1, 0], [0, 4, 0, 1], [], [0], [4, 4, 0, 0], [1, 0], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 7, 2, 2, 0, 2, 2, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = saveChr(abs(divInt(mod(int(4.0),len(getCharFromString(in1, i0))),int(9.0))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 0, 1], [8], [2, 2, 1], [0], [0, 1, 3, 3, 0, 0, 0], [1, 1], [0, 3], [0], [0, 1], [0], [], [], [1, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [3, 2, 3], [], [], [], [], [], [], [], [], [], [], [1, 1], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [0, 2], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [8, 2], [2], [0], [1], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 0], [1], [0], [], [3], [1], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [2], [1], [], [0], [], [], [0], [], [0, 0], [], [2], [2, 1], [], [0], [], [0, 0, 1, 1], [4, 6, 9, 9], [0, 2, 2, 0], [1], [3, 1, 1, 0, 2, 0, 2, 3, 0], [1, 1, 0], [0, 3], [1, 2], [1, 1], [0, 0, 4], [], [0], [0, 3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 4, 4, 1, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not True:{:\\ni0 -= min(int(469.0), int(9.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [0, 1, 2], [], [0], [], [], [2], [], [2], [], [1], [], [], [], [], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [4, 6, 5, 1, 1, 6, 1, 1, 9, 0, 9, 7, 6], [1, 2, 0, 0, 2], [1, 0], [2, 3, 0, 0, 0, 1, 2, 1, 2, 1, 1, 1], [1, 0, 0, 1], [0, 4, 3], [1, 0, 0, 0], [0, 0], [5, 1, 5, 4], [], [], [2, 0, 2, 0, 0, 0, 0], [], [], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 3, 0, 11, 3, 1, 2, 1, 2, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in2[divInt(min(i1, i2),i0):] not in s1[int(4651.0):( int(1.0) - ( int(611.0) + int(90976.0) ) )]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [2, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s2[len(in1):]:{:\\nres0 = in1 not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 4], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 0], [1, 1, 1], [3, 1, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 3, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 4, 1, 4, 0, 1, 0], [1, 1, 1], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 14, 14, 13, 1, 50, 14, 10, 9, 6, 5, 0, 0, 12, 3, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[:saveOrd(in2)] not in in1[int(0.0):]:{:\\nres0 = ( int(7.0) != i0 or ( in1.startswith(saveChr(len(s1[i2:i2]))[int(1.0):mod(int(7.0),abs(i0))]) and True ) )\\n:}else:{:\\ni1 += ( ( divInt(int(2.0),i2) + ( min(divInt(i1,len(saveChr(max(( int(1.0) * i2 ), ( max(int(7.0), abs(int(7.0))) - int(9.0) ))))), i0) + i0 ) ) * divInt(int(8.0),max(( saveOrd(saveChr(i0)) - divInt(divInt(( int(5.0) - int(0.0) ),( int(4.0) * i0 )),int(8.0)) ), i0)) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 1], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 4, 0, 1, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 2, 0, 0, 5, 1, 1, 8, 1, 1, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1.rstrip())]:{:\\nb2 = \"\"R\"\" not in in0[int(0.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [0, 1], [], [], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1], [0, 4, 2], [2, 1, 2, 1], [1, 0], [3, 0, 2, 1, 3, 1, 3, 0, 1], [0], [2, 0, 1], [0, 2], [], [], [], [], [], [], [], [1, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 9, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = abs(i2) == ( int(0.0) + min(int(4.0), max(i1, int(2.0))) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1], [1, 2, 0, 1, 0, 0, 0], [2], [1, 0, 2, 2, 2, 2], [], [0, 0, 0, 0], [], [], [0], [2], [0, 0], [0], [], [1], [], [1], [], [1, 1, 1], [6, 2, 6], [0, 0, 1, 2, 0, 1, 1, 1], [0, 1, 0], [3, 2, 0, 0, 1, 1, 2, 0, 1, 0, 0], [0, 0], [4], [2, 1, 1], [], [0, 0, 1, 0, 3], [], [], [3, 0, 0, 0], [3], [4], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd((s0 + s0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 1, 2], [], [0], [], [], [0], [4], [2, 0, 1, 0, 2, 0], [0], [5], [1], [], [1], [], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [5, 8, 7, 6, 5, 5, 6, 2, 2, 3, 7, 6, 8], [1], [], [1, 0, 1, 3, 3, 1, 1, 1], [], [4, 1], [], [], [2, 0, 5], [1], [], [2, 0, 4, 3, 0, 4, 3, 3, 1, 4, 4, 2, 0], [0, 1, 1, 2], [], [0, 1], [1], [], [17], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 1, 0, 8, 0, 2, 0, 0, 3, 1, 0, 13, 4, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s2[int(587.0):i1].endswith(getCharFromString((s0 + saveChr(int(65.0))), saveOrd(((\"\"r\"\" + saveChr(max(int(56.0), int(2237.0)))) + in2[:int(6.0)].capitalize()))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in2[len(in2):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 2], [1], [1, 1], [], [0], [], [], [1, 0], [], [1, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [2, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 2, 10, 2, 3, 1, 2, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), mod(int(77.0),i0)):]:{:\\ni2 = divInt(i2,int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 += abs(int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 4, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 0, 3, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[min(saveOrd(in2), i0):] not in in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [], [2, 0, 1, 0, 2, 0], [0, 0], [], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 4, 9, 8, 1, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 2, 2, 0, 1, 2, 1, 1], [0, 1, 1], [0, 3, 2, 1, 3, 1, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 0, 0, 2, 2, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 1, 1, 2, 1], [], [1, 1, 1, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 2, 3, 1, 4, 0, 1, 0], [3, 1, 3], [3, 0], [2, 2, 2], [0], [22], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[i0:]:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni2 = max(i2, int(1.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 8, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 1], [0, 1, 1], [3, 2, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1, 3, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [1, 5, 4, 1, 3, 3, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 1, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 13, 0, 52, 16, 10, 6, 10, 4, 0, 1, 6, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1[mod(int(5.0),int(8.0)):max(mod(i0,int(5.0)), ( int(7.0) + abs(i2) ))]):][divInt(( divInt(( i2 + ( min(divInt(i0,( len(s1) * min(int(2.0), i1) )), divInt(max(int(1.0), i2),int(0.0))) - int(7.0) ) ),i1) + i2 ),mod(int(1.0),abs(( max(i0, divInt(i0,divInt(int(8.0),int(5.0)))) * divInt(int(0.0),i1) )))):int(4.0)]:{:\\nb0 = abs(i0) != i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 0], [0, 2], [2, 1], [0], [0, 0], [], [], [], [], [2], [], [1], [], [], [], [], [], [], [1, 1], [0], [0], [], [], [], [], [3, 2, 5, 4], [], [0], [4, 0, 0, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s2.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1], [1, 4, 1], [2], [0], [3, 1, 1], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(int(1.0), int(41.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1], [0, 2, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [1, 2, 1, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 2, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 0, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 1, 11, 3, 2, 2, 1, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s1[int(0.0):]:{:\\nres0 = \"\"R\"\" not in in1[mod(int(25.0),i0):abs(( i2 + int(7.0) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = ( int(7.0) + len(in1) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2], [0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [2], [2], [1], [0], [], [], [], [], [], [1], [3], [1], [0], [1, 0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [1, 0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [0, 6, 2, 0, 0, 4, 3, 0, 7, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 3, 2, 2, 3, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [2, 1], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [4, 0], [1], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [0], [1, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [4, 2, 2, 5], [], [0], [4, 4, 4, 4, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(int(5.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 9, 1, 8, 5, 8, 9, 7, 6, 2, 7, 0, 1, 5, 7, 8, 4, 6, 9, 2, 5, 4, 7, 6, 8, 0, 4, 2, 1, 9, 7, 0, 0, 8, 5], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 3, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\ni0 = len(in1[i1:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [2], [0], [1], [0], [4], [3, 3, 1], [], [], [], [0, 1, 0, 1], [0, 5, 5, 7], [1, 1], [1], [3, 1, 2, 0, 2, 2, 3, 0, 3, 3], [0, 1, 1], [2, 3, 4, 4], [1], [0, 1], [2, 5], [], [], [4, 4, 0, 0], [1, 2], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= abs(int(05.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0], [1], [0], [], [], [0], [], [4, 5], [1], [], [3, 0, 1], [], [], [], [0], [], [], [], [23]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [], [0], [0], [], [1], [], [0], [], [], [], [0, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 2, 1, 1, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 1, 0, 0, 3, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 3, 0, 3, 0, 1, 2, 1, 0, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 2, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 16, 2, 57, 17, 11, 9, 9, 6, 1, 1, 14, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in0 + in1)):][max(i2, int(07.0)):]:{:\\ni1 = len(in0[divInt(i2,int(57.0)):mod(int(4.0),min(i0, ( divInt(( len(s0[i1:divInt(min(( i2 + ( divInt(( int(1.0) + i1 ),divInt(max(int(7.0), i2),int(7.0))) * int(9.0) ) ), i0),i0)]) - mod(int(8.0),abs(int(5.0))) ),max(i1, ( ( ( int(0.0) + int(4.0) ) * divInt(int(8.0),i2) ) - int(59.0) ))) - divInt(min(int(9.0), i2),i1) )))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= saveOrd(getCharFromString((\"\"R\"\" + saveChr(i1)), int(2.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [2], [], [0], [], [], [], [], [0], [], [], [1], [], [0], [0], [1], [0], [2], [], [1, 0], [], [], [], [], [2, 4], [], [], [0, 2], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile True:{:\\ns2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [2], [1], [], [0], [], [], [0, 2], [], [0], [], [], [1], [], [0], [], [], [], [1, 1], [0], [0], [], [], [], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile True:{:\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 1, 12, 3, 3, 0, 3, 3, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):mod(i0,int(7.0))]:{:\\nres0 = len(\"\"R\"\") != mod(i0,int(7.0))\\ni0 = divInt(int(5.0),abs(i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 0], [], [2, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [2, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 4, 0, 2, 0, 2, 4, 0], [1, 3], [0], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 1, 1, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveChr(mod(i1,abs(int(9.0)))) != in0.lstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [3, 4, 7, 9, 5, 0, 1, 6, 4, 0, 4, 2, 3], [2, 0, 2, 1, 1], [0], [3, 2, 1, 3, 0, 2, 1, 0, 2, 0, 1, 3, 1, 0, 0], [1, 1, 1], [1, 1, 3, 2], [2, 0], [0, 1, 0], [5], [], [], [2, 0], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 4, 0, 14, 3, 3, 0, 3, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = max(divInt(int(3.0),max(i2, mod(int(4795.0),i0))), divInt(i2,int(016404.0))) \\ge len(in2[int(23.0):i1])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 1], [7, 7], [2, 1], [], [3, 2, 1, 0, 1, 0], [1, 1], [0], [], [1, 1], [5, 2, 2], [], [], [4, 3, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = min(mod(int(7.0),i2), int(7.0)) \\ge i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [1, 1], [], [0], [], [], [1, 0], [], [1, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [3, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 3, 2, 1, 1, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 0, 0, 1, 1, 0, 0, 1, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 11, 2, 5, 0, 2, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), i0):]:{:\\nin1 = in0[abs(min(mod(i1,len(s0)), mod(int(0.0),int(2.0)))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 2, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\ni0 = abs(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 0, 0, 1, 2, 1, 0, 0, 0], [1, 1, 1], [1, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 3, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 1, 0, 4, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1[int(0.0):])[len(in1):]:{:\\ni1 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 0], [0, 0], [1, 5], [3, 3, 1, 1], [1, 0], [0, 0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 1, 3, 7, 8, 8, 9, 7, 8, 4, 2, 9, 3, 3, 6, 6], [0, 2, 2, 0, 2, 2, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 2, 1, 0, 0, 0, 1, 0, 0, 3, 3, 1, 2, 2, 0, 3, 3, 1, 1, 1, 1, 2, 2, 2, 0, 1, 2, 1, 3, 2, 2, 0, 2, 2, 0, 1, 3, 2, 1, 1, 2, 0, 3, 1, 3, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0], [1, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 0, 0, 2, 0, 2, 2, 1, 1, 2], [0, 2, 0, 1, 1, 0, 0, 0, 0, 2, 0, 2, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 1, 7, 1, 2, 4, 2, 2, 1, 34, 34, 23, 0, 106, 32, 21, 13, 19, 5, 0, 0, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s1[max(len(in2), i0):] not in in1[i2:]:{:\\nloopBreak% = 0\\nwhile ( abs(mod(i2,int(0.0))) != ( int(7.0) + min(len(in1), ( ( divInt(int(5.0),i0) * divInt(min(( i2 + max(abs(( int(7.0) - i2 )), max(divInt(int(7.0),int(1.0)), int(7.0))) ), int(7.0)),i0) ) - i2 )) ) or ( getCharFromString(in0[( int(9.0) + max(divInt(min(i1, divInt(( ( int(8.0) + int(5.0) ) + ( int(0.0) + i0 ) ),int(4.0))),max(i0, mod(min(divInt(mod(int(8.0),i0),mod(( int(59.0) * i1 ),i1)), i0),int(9.0)))), i2) ):i1], min(abs(int(2.0)), divInt(mod(i1,min(abs(int(2.0)), int(1.0))),int(3.0))))[int(7.0):divInt(mod(divInt(i1,int(8.0)),divInt(int(8.0),abs(mod(( i0 + ( mod(i1,int(9.0)) * max(divInt(int(7.0),int(8.0)), ( i0 - max(int(4.0), abs(int(2.0))) )) ) ),i1)))),int(933.0))].endswith(saveChr(int(66.0))) and True ) ):{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 0, 1, 2, 0, 3, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 2], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 2, 4, 0, 0, 4], [1], [0], [2, 0, 3, 2, 0, 4, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 7, 1, 1, 0, 1, 5, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[int(0.0):]:{:\\nb2 = (s2[i2:] + saveChr(int(75.0))[mod(i2,len(in1)):i2].capitalize()) not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 0, 1], [], [1, 1, 2, 2], [], [0, 0], [], [], [2, 1], [0], [0, 0, 1, 0], [0], [3], [1, 3, 1], [1], [0, 0], [], [1, 1, 1, 1], [0, 2, 7, 1], [0, 2, 0, 0, 2, 1, 0], [1, 1, 0], [2, 1, 0, 2, 3, 1, 1, 0, 1, 3, 2, 0, 3, 0, 0, 3], [0, 1, 0], [1, 1, 2, 3], [1, 0, 2, 0], [0], [5, 2, 1], [1], [], [1, 2, 4, 0], [1], [], [0], [3], [], [], [], [6]], "fitness": 31, "mapping_values": [1, 4, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 7, 2, 16, 3, 4, 4, 1, 3, 1, 0, 4, 1, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= ( int(0.0) + i2 )\\ni0 *= divInt(max(int(2.0), int(7.0)),i0)\\nin2 = \"\"#\"\"\\ns2 = saveChr(int(1.0))[max(( i2 + abs(i1) ), i0):len(s1)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 6, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 0, 1, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 0, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 4, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = getCharFromString(in2, int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 2, 2], [0, 1, 1], [3, 3, 2, 1, 3, 3, 0, 1, 2, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 0, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 13, 0, 51, 16, 10, 6, 10, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = in1[:len(in0)].endswith(getCharFromString(s0[mod(int(0.0),max(min(i0, int(7.0)), mod(( len(saveChr(i2)) + divInt(( divInt(int(5.0),i2) + divInt(min(( i0 * mod(max(( i1 - i2 ), mod(abs(int(7.0)),i1)),int(2.0)) ), int(1.0)),i2) ),i0) ),divInt(int(7.0),max(int(7.0), len((\"\"R\"\" + in1.rstrip()))))))):i0], mod(( ( int(9.0) + int(8.0) ) * mod(int(5.0),i0) ),int(0.0)))[i2:i2])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2, 1], [], [0], [], [], [0], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1], [4, 2], [1], [1], [1, 2, 3, 3, 1], [1], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 3, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 10, 0, 32, 9, 7, 5, 4, 6, 0, 1, 11, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i0):]:{:\\nb0 = in1[len(in0):] in s0[abs(( i2 + int(0.0) )):i0].rstrip()[int(7.0):min(int(5.0), ( divInt(( int(7.0) + i0 ),divInt(len(saveChr(( i1 * min(max(( i2 - i1 ), divInt(i0,int(7.0))), i0) ))),int(1.0))) + i0 ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 2, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 0, 3, 2, 3, 1, 0, 1, 3, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 2, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nin1 = in0[len(\"\"R\"\"):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 10, 1, 3, 0, 1, 4, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nres0 = getCharFromString(in1, i0)[int(7.0):] not in saveChr(i0)[mod(i0,int(7.0)):abs(int(5.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 6, 0, 1, 8, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nres0 = in1[len(in0):] not in s0[i0:i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 225}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 2, 0, 6, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2, 2, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 0, 0, 1, 3, 0, 2, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 3, 2, 0, 1, 0, 0, 3, 3], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 1, 1], [1], [21], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 4, 4, 2, 0, 10, 1, 3, 0, 1, 6, 0, 1, 10, 0, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(s1):]):][i1:]:{:\\nres0 = ( ( int(0.0) != abs(mod(int(7.0),int(5.0))) or True ) and in0[:i1] not in s0[:int(7.0)] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 0, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 2, 3], [1, 0], [2, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nin1 = in0[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 4], [], [], [0], [0, 1, 3, 2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 0, 0, 3, 3, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nb1 = in1.startswith(in1[len(in0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [2], [0], [1], [0], [4], [], [], [], [], [0, 1, 0, 1], [0, 5, 5, 7], [1, 1], [1], [3, 1, 2, 0, 2, 2, 3, 0, 3, 3], [0, 1, 1], [2, 3, 4, 4], [0], [0, 1], [2, 5], [], [], [4, 4, 0, 0], [1, 2], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += abs(int(05.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 11, 2, 5, 0, 2, 6, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nin1 = s0\\ni0 = max(i2, abs(min(mod(i2,int(2.0)), mod(int(7.0),len(s0)))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 6, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0], [0, 1, 1], [3, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 4, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in1[abs(saveOrd(in0)):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 1, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nb2 = len(in1[len(in0):]) != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 2, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 3, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 4, 0, 1, 0, 0, 4, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in1[i0:i2] + in1)):]:{:\\ni2 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [1, 1, 0], [], [0, 0], [], [], [3], [], [2], [], [1], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 9, 1, 5, 4, 5, 9, 0, 3, 9, 4, 1, 4], [2, 1, 0, 1, 2, 2], [1, 0], [1, 0, 2, 2, 0, 3, 0, 3, 1, 1, 2, 0, 1, 3, 3, 3, 1, 0, 1, 3, 1, 0, 0, 3], [1, 0, 0, 1], [3, 2, 3, 2, 3, 0, 2, 0], [1, 0, 1, 0], [0], [0, 2, 0, 4], [], [], [4, 0, 2, 2, 2, 4, 0, 0, 0], [3, 2], [1], [0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 6, 2, 14, 3, 3, 3, 1, 4, 0, 0, 9, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(2.0)\\ni1 = i0\\nres0 = s0.rstrip() not in s2.capitalize()[:divInt(( i1 + len(s0) ),i2)][abs(int(9.0)):int(1.0)][( i2 - int(5.0) ):len(in1)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [1, 1, 0, 1], [4, 5, 0, 1], [0, 0, 1], [], [0, 2, 0, 1, 0, 3, 2, 2, 1, 0, 1, 0], [1, 0, 0, 1], [3, 3], [1, 2, 0], [1], [5, 0, 2], [1], [], [3, 4, 4, 0, 0, 3, 1, 2, 0], [3, 0], [1], [2, 1], [2], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i0 != mod(i0,int(4.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [1], [0], [2], [0], [], [1], [], [1], [], [1], [0], [0, 2], [1], [2, 0, 1, 0], [1], [], [0], [1], [3, 0], [], [], [2, 0], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 1, 0, 0, 1, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s0[mod(i0,int(0.0)):i2]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 2, 0, 2, 1, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 3, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 1, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nb2 = s0 not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 1, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 1, 3, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 4, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 5, 0, 1, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(s1):]:{:\\nres0 = in0[i0:i2] not in getCharFromString(in2, int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1], [7], [2], [1], [1], [], [], [0], [], [5], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = saveChr(abs(i0))[int(7.0):] not in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [2], [], [0], [], [], [2], [], [1], [], [1], [5], [2], [0], [1], [], [2, 3, 1, 0, 3, 0, 1, 2, 1], [2], [1, 1, 1, 0, 0, 0, 1, 0], [5], [], [0], [4, 4], [3, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(5.0)).lstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [1], [3, 0], [], [2], [2, 1, 2, 1, 2, 0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= abs(i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [1, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [5], [1], [], [1], [], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1], [4, 2, 6, 0, 9, 0, 7, 2, 2, 1, 5, 6, 7, 8, 2], [0, 2, 2, 2, 2, 1, 2, 0, 0], [0], [1, 1, 0, 2, 3, 1, 1, 1, 2, 1, 0, 2, 0, 0, 0, 0, 1, 2, 1, 2, 1, 3, 0, 0, 0], [0, 1, 1, 0, 1, 0], [1, 0], [2, 1, 2], [1, 1, 0, 0], [3, 2, 5], [1, 1], [], [2, 0, 2, 2, 3, 2, 0, 4, 3, 0, 4], [0, 1], [], [1, 0, 2, 0], [3, 1], [], [15], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 7, 1, 17, 3, 1, 1, 2, 3, 0, 0, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = in0[:int(4.0)].endswith((s2[int(2.0):i0] + getCharFromString((in2 + saveChr(( max(int(6.0), int(090.0)) * int(72.0) ))), mod(int(21.0),i2)))[mod(i2,i2):][i2:i1])\\ni2 = int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 0], [], [], [], [], [0, 3], [3], [0, 1], [0], [], [1], [], [1], [], [0, 0, 1], [4, 6, 2], [0, 0, 0], [1, 1], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\nb0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 0, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 4, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in1[len(in1):]:{:\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [1, 1, 1, 0], [2], [0, 0, 2], [], [0], [], [], [1, 2], [2, 1], [1, 0, 1], [0, 0], [], [1], [], [1], [], [1, 1, 1, 1, 1], [0, 8, 9, 8, 5], [1, 2, 0, 1, 2, 1, 2, 2], [], [2, 0, 3, 1, 2, 1, 0, 2, 0, 3, 1, 3, 0, 3, 0, 0, 1, 3, 0, 2, 2, 0, 1, 1], [0, 1, 0, 0, 0, 1], [4, 1, 4, 0, 1, 2], [2, 0, 2, 1], [1, 1], [1, 1], [1], [], [0, 1], [], [], [], [0], [16], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( i1 * saveOrd(s1) ) == int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [0, 1, 2, 1], [1], [3, 3, 0, 0, 2], [0], [1, 4], [1, 0], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5], [], [], [4, 0, 0], [3], [5], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 1, 0, 2, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= max(saveOrd(s2.strip(in2)), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 1, 1], [], [], [], [], [2, 0], [], [0], [], [], [0], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [2, 2], [1, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [1, 1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [2, 4, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 3, 9, 4, 7, 2, 5, 6, 6, 7, 5, 0, 5, 8, 7, 6, 2, 5, 0, 0], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 0, 1, 2, 2, 1, 0], [0, 1, 1], [3, 3, 2, 2, 1, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 3, 1, 2, 3, 2, 3, 1, 0, 0, 0, 3, 0, 3, 0, 1, 2, 3, 3, 1, 2, 3, 2, 2, 0, 3, 1, 0, 2, 0, 1, 2, 2, 1, 0, 0, 0, 2, 1, 0, 2, 3, 2, 2, 3, 2, 2, 1, 3, 1, 3, 3, 0, 1, 3, 2, 1, 1, 1, 1, 1, 0, 2, 1, 2, 3, 3, 0, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 2, 0, 3, 0, 1, 2, 1, 3, 0, 0, 3, 1, 1, 3, 1, 1, 4, 4, 3, 0, 4, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2, 0, 2], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 38, 38, 27, 1, 118, 38, 24, 15, 23, 7, 1, 0, 15, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile max(max(divInt(mod(int(2.0),( i2 + int(45.0) )),divInt(int(7.0),abs(i2))), ( divInt(( ( i2 + divInt(i0,( i1 * divInt(mod(( int(4.0) - i2 ),( min(int(1.0), i1) + int(7.0) )),int(7.0)) )) ) * i2 ),i0) - ( int(9.0) - len(s0[min(max(i0, divInt(divInt(( int(8.0) * int(5.0) ),( int(0.0) + abs(int(4.0)) )),divInt(max(mod(len(in2),int(8.0)), i0),i1))), i2):]) ) )), min(i1, min(i1, int(59.0)))) != ( len(in2[:max(int(9.0), divInt(max(divInt(( i2 + len(in1) ),int(2.0)), i2),mod(i2,int(2.0))))]) - ( mod(int(3.0),i2) * i1 ) ):{:\\nloopBreak% = 0\\nwhile i1 \\l divInt(int(947256.0),i0):{:\\ni1 = divInt(max(( ( max(divInt(mod(int(6.0),saveOrd(in0[int(7.0):saveOrd(s0[:len(getCharFromString((\"\"R\"\" + saveChr(i2)), int(5.0)))])])),min(divInt(int(0.0),int(5.0)), int(8.0))), int(7.0)) + int(6.0) ) * i2 ), divInt(int(25.0),mod(saveOrd(in1),min(i1, divInt(int(0.0),i0))))),int(0.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [0], [3], [], [3], [0], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = len(in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [1, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 2, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 12, 2, 5, 1, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = len(in1[abs(i0):]) \\g min(mod(int(4.0),int(7.0)), ( int(5.0) + abs(i1) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 8, 2, 7, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 3, 5, 3, 4, 5, 1, 2, 9, 9, 6, 6, 9, 1, 7, 2, 8, 5, 1], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 2, 0, 0, 2, 2, 2, 1], [0, 1, 1], [2, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 2, 1, 3, 3, 1, 2, 1, 1, 2, 0, 0, 1, 0, 3, 2, 1, 3, 3, 2, 3, 1, 3, 0, 0, 1, 3, 1, 2, 2, 2, 1, 1, 1, 2, 3, 2, 3, 2, 1, 0, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0], [2, 1, 2, 0, 3, 0, 1, 2, 1, 2, 3, 0, 2, 2, 0, 0, 2], [1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 1, 2, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 0, 0, 1, 2, 7, 2, 2, 3, 2, 1, 1, 37, 37, 19, 1, 94, 29, 17, 14, 15, 5, 0, 0, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in0[divInt(int(08.0),i2):] not in in2:{:\\nloopBreak% = 0\\nwhile ( int(2.0) != abs(mod(i2,int(7.0))) or ( getCharFromString(in0, ( int(5.0) - max(i2, divInt(( divInt(abs(i0),( min(( i1 + divInt(( divInt(int(1.0),i2) + mod(len(in1[int(7.0):i1]),int(7.0)) ),int(9.0)) ), i2) * i0 )) - ( int(8.0) - min(int(5.0), max(i0, ( ( divInt(int(0.0),int(4.0)) - mod(int(8.0),i1) ) * int(59.0) ))) ) ),int(9.0))) ))[divInt(mod(int(2.0),abs(max(int(2.0), mod(int(3.0),int(5.0))))),mod(i0,i2)):].endswith(in0[int(3.0):i0]) and True ) ):{:\\nres0 = abs(( int(45.0) * len(saveChr(min(( abs(int(1.0)) * abs(i0) ), i2))) )) \\l int(29.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni2 = min(int(96.0), ( ( ( int(69.0) - int(1.0) ) * int(7.0) ) + mod(min(divInt(abs(( int(2.0) + i2 )),i1), int(8.0)),int(51.0)) ))\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [1], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0, 1, 1], [8, 5, 3, 9, 2, 1], [0, 2, 1], [1], [2, 1, 3, 2, 1, 0, 3, 2, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 2], [0, 0, 2], [1, 0], [1, 4], [], [0], [4, 0], [2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 3, 1, 11, 3, 2, 3, 1, 2, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in1.capitalize():{:\\ni0 += ( int(8.0) + min(( int(53.0) * i2 ), min(mod(int(92.0),int(1.0)), i1)) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [1, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 3, 0, 2, 0, 1, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 4, 2, 1, 7, 0, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in (in2 + in1[i0:])[len(\"\"R\"\"):]:{:\\nin1 = \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 1, 0, 0, 0, 1, 0], [0, 4, 4, 4, 2, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 4, 4, 5, 1, 12, 0, 4, 0, 0, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nres0 = ( ( len(in1) != i0 or True ) and s2 not in getCharFromString(s1[int(4.0):abs(int(7.0))], i1)[int(5.0):i2][:int(7.0)] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = saveOrd(saveChr(i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [0, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nin1 = s2\\ni2 = len(in0[i0:])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 2, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [25], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 1, 8, 2, 3, 2, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\ni0 += mod(len(in1[i1:]),abs(( int(07.0) + int(5.0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 1, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0], [], [], [], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 1, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 1, 1, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len((s0 + in0))\\ni1 += i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [2, 1], [0], [0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [], [], [], [3, 3], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [], [1, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1], [1], [2, 1, 2], [0, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 2, 2, 0], [0, 0], [4, 5], [3, 3, 1], [0, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 2, 2, 2, 0, 0, 3, 3, 4, 0, 12, 2, 3, 2, 0, 7, 0, 1, 11, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s2[( len(in1) + i0 ):]:{:\\nres0 = ( ( i2 != len(in1) and in0.startswith(s0) ) or in1[( i0 + int(0.0) ):i0].rstrip()[int(7.0):].endswith(saveChr(abs(int(5.0)))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [2, 0, 2], [], [0, 0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [5, 1, 8, 9, 2, 0, 1, 2, 6, 7], [1, 1, 0, 1, 1, 0, 0], [], [0, 1, 3, 0, 3, 2, 0, 0, 3, 3, 3, 1, 2, 0, 2, 0, 2, 1, 1, 0], [1, 1, 1, 1], [2, 2, 1, 2, 4], [], [0, 0, 0, 0], [2, 3, 1, 3, 2, 0, 2, 0], [], [], [4, 2, 0, 2, 2, 2, 0, 0, 2, 3, 3, 4, 4, 0, 3, 0, 2, 3, 4, 2], [2, 3, 2, 1], [2], [0, 1, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 7, 0, 20, 4, 5, 0, 4, 5, 0, 0, 8, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[i1:int(5.0)].capitalize()\\nb0 = abs(i1) == abs(divInt(i0,i1))\\ns1 = in0[:max(abs(saveOrd(s2)), int(1.0))][:divInt(i1,divInt(i0,divInt(int(8.0),int(9201.0))))][:i0]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 8, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 0, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[saveOrd(in1):]:{:\\nb0 = \"\"R\"\"[int(0.0):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1], [1, 1, 0, 0], [], [1, 2, 2, 1], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [4, 3], [2, 0, 0, 0], [1, 0], [0, 0, 1], [], [], [2], [], [4, 4, 4], [1], [], [0, 1], [], [], [0], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 3, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i0\\nin1 = in1\\nin1 = \"\"U\"\"\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [9, 7, 7], [0, 2, 1], [1, 0], [0, 1], [], [], [2, 2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i2\\ni1 = int(9.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [5, 7, 2, 4, 6, 8, 5, 3, 8, 9, 5, 5, 0, 1, 6, 9, 7, 1, 2, 1], [1, 0, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 1], [0], [3, 3, 3, 2, 3, 2, 2, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [1, 2, 2, 1, 2, 2, 0, 1, 1, 0, 1, 0, 3, 1], [2, 2, 2, 0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0], [5], [], [], [3, 2, 4, 2, 0], [1], [], [2, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 20, 17, 1, 61, 17, 14, 10, 7, 1, 0, 0, 5, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = max(abs(abs(( max(divInt(( int(5.0) * i0 ),int(7.0)), abs(i1)) * divInt(( mod(int(2.0),i2) * ( abs(( i1 + divInt(min(divInt(int(4.0),i2), ( max(int(6.0), i2) - int(8.0) )),int(5.0)) )) - i1 ) ),i2) ))), max(int(3.0), min(max(min(i2, divInt(( ( int(8.0) - int(9.0) ) - ( int(5.0) - i1 ) ),int(5.0))), int(0169712.0)), ( i1 + len((saveChr(max(int(1.0), i1))[divInt(i0,i0):] + in2[i0:i1])) ))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [1], [1], [1], [0], [], [], [], [], [0], [1], [1], [1], [0], [3, 3, 1, 0], [], [4, 4], [0], [], [1, 4], [], [], [0, 4, 4], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = saveOrd(s1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 3, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 4, 0, 0, 6, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1[len(in1):]))[i0:]:{:\\nres0 = in0.capitalize()[i2:abs(abs(i2))].startswith(s0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 0], [], [2, 0, 1, 0, 2, 0], [], [1, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [0, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveChr(i0) not in in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [1], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [1, 2, 2], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 0, 0, 1, 1, 1], [6, 9, 2, 6, 9, 5, 4, 8, 9], [0, 2, 0], [1], [1, 2, 2, 3, 1, 1, 2, 0, 2, 0, 0, 1], [1, 1, 0, 1], [0], [0], [0, 0, 1], [5, 2], [], [], [2, 0, 0, 2, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2[:int(69.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 0, 0, 2, 0, 5, 1, 2, 1, 0, 6, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[( len(in1) + i0 ):]:{:\\nb0 = ( ( i2 != len(in1) or True ) and in0.startswith(s0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [2, 0, 1, 0, 2, 0], [], [], [], [], [], [], [1], [1], [2], [], [1, 0], [1, 0, 1, 1, 0], [], [], [], [3, 1, 2, 5], [], [], [3, 4, 3, 0, 0, 0], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = (getCharFromString((s1 + s2), int(1.0)) + in2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 9, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 3, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 4, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( len(s0.capitalize()) != len(in2) or True ) and s0[divInt(int(0.0),i0):] not in in1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 0, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 3, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 0, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 4, 9, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 1, 0, 0, 1, 2, 0, 1, 2, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 0, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 2, 2, 4, 3, 0, 4], [1], [0], [2, 0, 1, 4, 0, 0, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 3, 1, 1, 3, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[max(int(0.0), i0):]:{:\\ns2 = \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [2, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 4, 0, 1, 1, 0, 4, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):int(0.0)]:{:\\ni0 = i1\\ni1 *= int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0, 1, 2], [], [0], [], [], [3, 2], [3], [1, 0, 1], [0], [], [3, 1], [0], [], [], [1, 0, 1], [7, 4, 1], [1, 0], [], [0, 1, 1, 0], [0], [4], [0], [], [5, 1], [], [], [3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i1 \\ge int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 4, 1, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in \"\"R\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 8, 8, 10, 0, 40, 12, 10, 5, 7, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1[max(i0, abs(min(mod(i2,int(1.0)), mod(int(7.0),len(in1))))):]):]:{:\\nres0 = i2 != ( divInt(( min(i0, divInt(max(( i1 + ( divInt(( int(5.0) + i2 ),divInt(abs(int(7.0)),i1)) * int(4.0) ) ), int(1.0)),i2)) - i0 ),mod(int(7.0),max(int(7.0), saveOrd(s0)))) + i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0], [2], [0], [0], [], [], [0], [2], [2], [0, 0], [5], [], [], [], [], [], [], [2, 0, 2, 1, 0], [], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [], [], [], [4, 1, 0, 5], [], [0], [0, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in s1:{:\\ns0 = in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [1, 1], [], [0], [], [], [1, 0], [], [1, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [0], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [3, 0], [0], [0, 0], [0], [], [0], [], [], [], [1, 0, 1, 1], [9, 3, 4, 0], [], [], [1, 2, 1, 1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1], [0], [0], [0], [2], [], [], [], [], [1, 1], [0, 2], [2, 0, 1, 2], [0], [2, 2, 0, 3, 0, 0, 0], [0, 0], [3], [1, 1], [0, 1, 0, 0, 0, 0, 1, 0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 6, 2, 1, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = ( ( i0 - len(saveChr(i1)) ) - i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 1], [2], [0, 2], [], [0], [], [], [2, 0], [3], [0, 2, 1], [0], [0], [0], [], [], [1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [8, 8, 7, 3, 5, 1, 6, 7, 0, 0, 7, 9, 5, 5, 5], [2, 2, 0, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1], [], [3, 0, 3, 2, 3, 2, 1, 2, 0, 3, 3, 1, 2, 1, 2, 2, 0, 0, 1, 2, 0, 2, 0, 2, 3, 1, 0, 0, 0, 2, 0, 1, 0, 2, 3, 0, 2, 3, 0, 0, 3, 3, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 3, 1, 2, 2, 2, 1, 1, 0, 0, 0, 2, 0], [0, 0, 1, 0, 0, 2], [0, 1, 0, 0, 0], [1, 1, 3, 5, 3, 2], [], [], [2, 4, 2, 0, 0, 0, 0], [3, 0], [1], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 7, 7, 8, 0, 28, 9, 6, 6, 3, 3, 0, 0, 6, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile b2:{:\\nb0 = s1[:min(i2, max(( len(s1) + divInt(int(8.0),( i2 + max(abs(int(87.0)), ( int(35.0) - mod(( i0 + i1 ),int(1.0)) )) )) ), divInt(i1,( i2 + ( abs(int(6.0)) * i1 ) ))))].rstrip()[:i0] in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 3, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 1, 10, 1, 2, 0, 1, 5, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[:abs(len(in1))]:{:\\nres0 = in1 not in (getCharFromString(saveChr(i0)[:int(0.0)], i2) + in0[mod(i2,int(7.0)):int(5.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 1], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 3, 3, 1, 0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 16, 16, 13, 0, 55, 16, 11, 9, 7, 6, 1, 0, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in getCharFromString(in1, i0)[i2:]:{:\\nres0 = ( int(0.0) != max(mod(i2,int(7.0)), mod(int(5.0),abs(i0))) or ( in1[( divInt(divInt(min(i1, ( len(in0[( i2 + ( ( divInt(int(7.0),i1) + ( min(int(4.0), i2) * int(1.0) ) ) - int(7.0) ) ):i0]) + i0 )),( int(7.0) * max(int(9.0), abs(i0)) )),divInt(( ( int(8.0) - int(5.0) ) - mod(int(0.0),i0) ),int(4.0))) * int(8.0) ):max(len(saveChr(abs(int(59.0)))), i1)].endswith((\"\"R\"\" + s0.rstrip())) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 1, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s0[saveOrd(in2):]) != ( int(0.0) + i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 1, 0, 2, 2, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 12, 0, 40, 11, 8, 4, 7, 4, 1, 1, 11, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[min(mod(int(0.0),i0), mod(i2,int(7.0))):( int(5.0) + i2 )][i0:] not in in1[:i1].capitalize()[divInt(divInt(int(7.0),i2),divInt(abs(( i1 + ( min(divInt(len(saveChr(i2)),( min(int(6.0), i0) * int(1.0) )), int(7.0)) - i0 ) )),i2)):mod(int(7.0),max(int(9.0), abs(i2)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [1, 2, 2], [], [], [], [], [], [], [], [], [0, 1, 0, 0, 0, 0, 1, 1, 1], [4, 5, 2, 6, 9, 5, 4, 8, 9], [0, 2, 0], [1], [1, 2, 2, 3, 1, 1, 2, 0, 2, 0, 0, 1], [1, 1, 0, 1], [0], [0], [0, 0, 1], [2, 2], [], [], [2, 0, 0, 2, 0, 3, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s2[:int(45.0)]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 1, 0, 0, 1, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 4, 4, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [3, 0, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 6, 0, 3, 0, 0, 3, 1, 1, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s0[len(in1):]:{:\\nres0 = len(\"\"R\"\"[int(4.0):i0]) != abs(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 9, 1, 2, 0, 1, 4, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:abs(len(in1[:i0]))]:{:\\nres0 = in1 not in getCharFromString(saveChr(int(0.0))[i2:mod(i2,int(7.0))], int(5.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [2], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 2, 1], [0, 1], [0], [0], [0], [], [], [0], [3], [1, 2], [0], [], [1], [1, 0], [0], [0], [1, 1], [7, 2], [0, 0], [0], [0, 3, 2, 1, 1], [1], [2], [], [0], [0, 3, 0, 4], [1], [0], [3, 3, 3, 4, 4, 0, 0], [1], [], [2, 2, 0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\ge abs(divInt(int(7.0),int(2.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 0, 0], [2], [0, 1], [0], [0, 0], [], [], [2], [2], [1, 0], [0], [], [1], [], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [3, 2, 8, 7, 3, 3, 4, 4, 0, 1, 4, 3, 2, 9, 2], [0, 2, 2, 1, 0, 1, 1], [1, 1], [3, 2, 0, 0, 1, 2, 1, 0, 2, 0, 1, 3, 1, 0, 3, 1, 1, 2, 3, 1, 3, 1, 2, 0, 0, 3, 3], [0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 4, 1, 3, 2, 4], [2, 2, 2, 1, 0], [0, 0], [4], [1], [0], [4, 2, 4, 1], [3, 2], [2], [2], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 8, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = min(( i0 * i2 ), int(3.0)) == divInt(int(28.0),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [4, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 3, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in0[:saveOrd(in1)]:{:\\ns1 = in0[i2:len(s0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 2, 7], [2, 1, 2, 2, 2, 1], [], [3, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 3, 3, 0, 2, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0], [4], [1, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1], [1, 3, 3], [], [], [2, 2, 0, 0], [], [0, 2], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 15, 6, 1, 2, 4, 3, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in0[saveOrd(in0):mod(i2,mod(int(1.0),( int(3.0) - divInt(i1,int(9.0)) )))][:mod(( i2 + i2 ),int(4.0))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 9, 0, 33, 9, 6, 5, 4, 6, 1, 1, 14, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1[int(7.0):])]:{:\\nres0 = in0 not in s0[:int(7.0)][i0:mod(i2,int(5.0))][abs(int(2.0)):min(i2, divInt(( divInt(int(2.0),i0) + ( len(getCharFromString((\"\"R\"\" + saveChr(( i1 + ( i2 - ( int(5.0) - i1 ) ) ))), divInt(min(int(7.0), i2),int(5.0)))) + int(9.0) ) ),i0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [0], [1], [1], [0, 0], [], [], [], [], [], [1, 1], [1, 4], [2], [], [0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i2 \\g int(1.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [0, 1, 0, 0], [], [0, 1, 0, 2], [], [0, 0], [], [], [2, 1], [], [2, 0], [], [1, 5], [1], [], [1], [], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [4, 5, 4, 0, 9, 0, 7, 2, 2, 6, 1, 6, 7, 8, 5, 7, 7, 1, 2], [0, 2, 0, 2, 2, 1, 2, 0, 0, 1, 0, 2, 2, 2], [0], [1, 1, 0, 2, 3, 1, 1, 0, 2, 1, 0, 2, 2, 0, 0, 0, 1, 2, 2, 2, 3, 3, 1, 0, 2, 3, 0, 1, 2, 1, 2, 1, 3, 0, 3, 2, 1, 2, 3, 1, 2, 1, 1, 3, 3, 3, 2, 0, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0], [1, 0, 1, 2, 2, 2, 2, 4], [2, 0, 1, 0, 1, 2, 0], [1, 1, 0, 0, 1, 0, 1, 1], [3, 4, 1], [1, 1], [], [2, 4, 2, 4, 3, 2, 0, 4, 4, 2, 0], [1, 3, 1], [0], [1, 0, 2, 0, 0], [3, 1], [], [15], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 7, 1, 17, 4, 1, 2, 2, 1, 0, 0, 8, 3, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = saveChr(int(4.0))[:int(5.0)] not in (in0[i0:] + saveChr(( max(int(4.0), int(090.0)) * i2 ))).lstrip()[mod(int(72.0),i0):mod(( i2 + i2 ),i1)]\\ni2 = int(26.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 0, 7, 3, 6, 1, 4, 3, 0, 5, 8, 1], [1, 0, 0, 0, 2, 1, 2, 2, 0], [0, 0], [1, 2, 0, 0, 1, 0, 2, 2, 0, 1, 3, 2, 2, 2, 3, 0, 1, 2, 2, 1, 0, 2, 0, 3, 1, 1, 2, 1, 1, 0, 1, 2, 2, 1, 2, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 2, 4, 0], [2, 2, 2, 1, 2, 0, 2, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [1, 1], [1], [], [2, 4, 1], [1], [], [0], [1], [], [20], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 2, 4, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(4.0)\\ni0 = divInt(i0,i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 0], [], [0, 0], [], [], [1], [], [0], [], [], [1], [], [0], [], [1], [], [1, 2], [1], [0], [], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 *= i2\\nb1 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [], [2, 0, 1, 0, 2, 0], [0], [3], [], [], [], [], [], [], [0, 0], [0], [0], [], [], [], [], [0], [], [], [0, 4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s0 != saveChr(i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [0], [1, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [3, 2, 2, 5], [], [], [0, 4, 4, 4, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [0], [0], [], [], [3, 2], [3], [1, 0, 0], [0], [], [3, 0, 1], [0], [0], [], [1, 0, 0, 1], [1, 4, 1, 0], [0, 0], [], [2, 1, 1, 0], [0], [4], [1], [], [5, 1, 4], [], [0], [3, 0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 1, 0, 4, 1, 0, 1, 0, 3, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in (s1 + in1):{:\\nres0 = ( int(1.0) - int(410.0) ) \\ge i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 2, 2], [0], [2, 3, 0, 0, 0], [0], [2, 0], [0], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = ( abs(i1) + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [0, 1, 0, 2, 1], [1], [2, 0, 2, 0, 1, 0, 0], [1, 1, 0], [], [1, 1], [0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 5, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= divInt(i1,divInt(i0,int(0.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 1, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 0, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 38, 12, 8, 6, 6, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[abs(abs(i0)):int(0.0)]:{:\\nres0 = s2 not in in1[abs(mod(i2,int(7.0))):mod(i2,min(i0, ( divInt(( ( i1 + ( len(in0) + ( i2 * mod(min(( int(5.0) - i1 ), divInt(max(int(7.0), i2),int(2.0))),int(1.0)) ) ) ) + i1 ),i0) * divInt(int(7.0),abs(int(7.0))) )))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [0, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 0, 3, 0, 4], [1], [0], [2, 1, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 3, 0, 12, 2, 5, 0, 2, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\"[len(in2):]:{:\\nres0 = ( ( max(i0, abs(min(mod(i2,int(2.0)), mod(int(7.0),len(in1))))) != i2 and True ) and s0 not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nin1 = in0[abs(i1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [2, 1], [], [0], [], [], [0, 3], [], [], [0], [], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1], [3, 6, 2, 3, 2, 6, 8, 4], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 0], [1, 3, 3, 3, 2, 2, 3, 1, 2, 3, 2, 0, 2, 0, 2, 1, 2, 3, 1, 1, 3, 2, 1, 3, 1, 3, 3, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 4, 4, 2, 1, 4, 4, 3, 3, 4], [2, 0, 2, 0, 1, 1], [0, 0, 0], [4, 4, 4, 4, 3, 3, 5, 5], [1], [], [4, 0, 0, 2, 0, 0, 0, 4, 0, 4, 2, 0], [3], [1], [1, 2, 2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in1.rstrip()\\ni0 = int(3.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 4, 0, 2, 0, 2, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\":{:\\nb0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [0], [0], [], [], [], [], [], [], [], [], [], [0], [], [0, 1], [], [1, 1], [1], [0], [], [], [2], [], [0, 1], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 3, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = (in2 + in1[max(len(in1), i0):])[int(0.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [1, 1, 1], [2, 3, 0, 0, 3, 2, 0, 2, 2, 2, 2, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 3, 0, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 1, 2, 1, 0, 2, 1, 1, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [2, 0, 2, 0, 3, 0, 1, 2, 1, 1, 0, 0, 3, 0], [0, 0, 1, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 2, 0, 0, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 14, 1, 60, 22, 9, 10, 13, 3, 0, 1, 4, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(abs(i0),i2):][:min(divInt(i2,( divInt(divInt(( int(0.0) + ( ( divInt(int(6.0),i1) + ( abs(divInt(i1,divInt(min(( int(5.0) - i2 ), len(in1)),i0))) + int(7.0) ) ) + int(8.0) ) ),int(1.0)),int(7.0)) * i2 )), i1)]:{:\\ni0 -= ( int(7.0) - min(( max(i0, divInt(mod(divInt(int(9.0),int(8.0)),mod(int(5.0),i0)),int(0.0))) * abs(i1) ), divInt(max(int(4.0), mod(int(8.0),i1)),( int(59.0) + int(9.0) ))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0, 0], [], [1, 0, 1], [], [0, 0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1], [0, 9, 0, 9, 5, 8, 3, 4, 9, 2, 1, 7, 3, 4, 6, 6, 4, 7, 8, 2, 0, 8], [0, 1, 2, 2, 1, 0, 1, 0, 0], [1, 0], [3, 2, 2, 3, 1, 1, 0, 1, 2, 0, 2, 0, 3, 3, 1, 2, 3, 3, 1, 3, 1, 2, 0, 3, 1, 0, 2, 1, 1, 0, 2, 3, 3, 1, 2, 0, 1, 1, 0, 1], [1, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 4, 1, 1, 3, 1, 0, 0, 0], [1, 0, 0, 0, 1], [1, 1, 1, 0, 0], [4, 5], [], [], [0, 4, 3, 3, 4, 0, 4], [0, 1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 22, 22, 9, 1, 40, 9, 10, 5, 5, 2, 0, 0, 7, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= min(mod(mod(min(int(0.0), int(90.0)),i1),int(9.0)), mod(i2,( i2 + saveOrd(in1) )))\\nb1 = max(int(58.0), divInt(max(len(getCharFromString(((saveChr(int(3.0)) + in2) + saveChr(max(int(492.0), divInt(i1,min(int(173.0), i0))))), ( int(4.0) + int(6.0) ))), i1),( min(min(int(6.0), ( i0 + int(47.0) )), int(8.0)) - i0 ))) \\ge int(208.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0], [], [], [], [], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [0], [1], [0], [], [], [], [0], [], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 4, 5, 7, 1, 7, 5, 3, 6, 8, 9, 0, 2], [0, 0, 2, 0, 0], [], [3, 1, 1, 2, 0, 3, 2, 2, 0, 2, 3, 0, 1, 3, 0, 1, 3, 0, 3, 1, 1], [0, 1, 1, 0], [1, 1, 4, 0, 4, 2, 0], [0, 1], [1, 1], [3, 2, 3], [], [], [3, 4, 4, 2, 0, 0, 4, 4, 4], [3, 1, 2, 0, 1], [4], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 5, 0, 21, 4, 6, 2, 2, 2, 0, 0, 9, 5, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = max(int(6.0), int(4.0)) \\l ( i0 + max(mod(mod(i0,( saveOrd((saveChr(i2).rstrip(in0[int(57.0):]) + s2)) - min(i0, int(1.0)) )),saveOrd(getCharFromString(saveChr(i0), abs(int(753.0))).capitalize())), int(68902.0)) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 8, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 1, 2], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 3, 2, 2, 1, 2, 1, 1, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [4, 1, 0, 0, 3, 0, 1, 2, 1], [0, 0, 1, 1, 0, 1, 2, 1, 1, 2, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1], [4, 5, 3, 4, 3, 0, 4], [1], [0], [2, 3, 0, 2, 1, 0, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 14, 0, 60, 21, 9, 12, 9, 6, 1, 1, 10, 0, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in (in2 + \"\"R\"\"[saveOrd(in0):mod(i2,int(028.0))])[max(mod(i2,int(7.0)), ( int(4.0) + min(i2, divInt(( divInt(min(i0, ( len(in1) + ( i1 - divInt(( divInt(int(1.0),i2) - mod(min(int(7.0), i1),int(7.0)) ),int(9.0)) ) )),i2) + i0 ),( int(8.0) - max(int(5.0), abs(i0)) ))) )):]:{:\\nb0 = in0 not in s0[( ( divInt(int(0.0),int(4.0)) * mod(int(8.0),i0) ) - int(59.0) ):( i1 - max(( ( int(9.0) * ( int(2.0) + int(2.0) ) ) + i1 ), i2) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0], [0, 0], [], [], [], [], [], [1], [9], [0, 0], [0], [3, 0, 1], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = max(i0, int(9.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 1, 9, 1, 7, 7, 9, 8, 1, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [0, 0, 2, 1, 0, 2, 2, 3, 2, 0, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 2, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 4, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize()[i0:]:{:\\nb0 = in1[i2:].endswith(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 2, 1], [0, 1], [0], [0], [0], [], [], [0], [3], [1, 2], [0], [], [1], [1, 0], [0], [0], [1, 1], [7, 2], [0, 0], [0], [0, 1, 2], [], [], [], [], [0, 3, 0, 4], [], [], [3, 3, 3, 4, 4, 0, 0], [1], [], [2, 2, 0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\ge int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 2, 3, 2, 3, 3, 4], [1], [0], [1, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 2, 0, 8, 2, 3, 1, 1, 5, 1, 1, 8, 2, 1, 1, 1, 1, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\":{:\\nres0 = ( ( len(s2) != len(in0) or True ) and s2[mod(i0,len(in0)):] not in saveChr(( i2 + int(1.0) )).rstrip() )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [2], [3], [1], [0], [], [], [], [], [], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [3, 4, 7, 9, 5, 0, 1, 6, 4, 0, 4], [2, 0, 2, 1, 1, 2], [0], [3, 0, 2, 3, 0, 2, 3, 0, 2, 0, 1, 3, 1, 3, 2, 1, 0], [0, 1, 1, 0], [1, 1, 3, 2, 3], [2, 0], [1, 1], [5], [], [], [2, 0, 4], [1], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 6, 1, 17, 4, 5, 2, 2, 1, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = max(i0, ( max(i2, mod(len(in2[i1:mod(i1,int(3.0))]),abs(int(4795.0)))) * len(saveChr(( int(016404.0) + i2 ))) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 0, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 12, 3, 3, 1, 2, 5, 1, 1, 10, 1, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[len(in1):] == s0[:mod(int(0.0),i0)].capitalize()[mod(i2,i2):( int(7.0) * abs(i0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 2, 2, 0, 0, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 1, 0, 8, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile \"\"R\"\" not in s0:{:\\nres0 = ( len(in2[:len(in1)][:i1]) != i1 or ( in1.endswith(in0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0], [0], [1, 0, 0], [0], [0], [], [], [0, 2, 1], [5], [0, 2], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [2, 0, 2, 0, 1, 1, 0, 0], [0, 1], [0, 0, 3, 2, 2, 2, 2, 2, 1, 0, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [0, 0], [1, 0, 0], [0], [], [0], [4, 4, 4], [3, 0, 1], [2], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 2, 2, 8, 1, 16, 5, 2, 2, 3, 1, 0, 1, 3, 3, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(saveChr(i2), i0).strip():{:\\ni2 = abs(mod(( divInt(( divInt(int(7.0),i0) + i1 ),int(0.0)) + min(i1, i0) ),i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(\"\"R\"\")):]:{:\\nres0 = in1[mod(int(0.0),i0):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0], [1], [1], [], [0], [], [], [], [3], [1], [0], [], [], [], [], [0], [0, 1, 0, 1], [4, 8, 4, 4], [0, 2, 1, 2, 0, 2], [1], [2, 3, 0, 3, 3, 1, 2, 0, 0], [1, 1], [2, 0, 2], [1], [1, 1], [], [], [], [1], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 9, 2, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= mod(abs(i2),min(abs(int(48.0)), mod(i1,i2)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [1], [2], [], [0], [], [], [], [5, 0, 0], [0], [], [], [1], [], [1], [0], [1], [0], [2], [], [1, 0], [], [], [], [], [2, 4], [], [], [0, 2], [0, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 0], [2, 1, 2], [0, 0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [0], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4, 3], [1], [0, 0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 8, 0, 2, 8, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nloopBreak% = 0\\nfor in1 in (in0 + s0):{:\\nin1 = in0[int(7.0):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [2, 0, 1, 0, 2, 0], [], [], [], [], [0], [], [0, 1], [], [], [], [], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [], [], [], [0, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1, 0, 2], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 1, 3, 0, 3, 0, 1, 0, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4, 0], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 14, 1, 50, 14, 10, 8, 6, 8, 1, 1, 15, 3, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(max(i0, int(0.0))):]:{:\\nloopBreak% = 0\\nwhile in1 not in in1:{:\\nres0 = ( len(in0) != min(i2, int(7.0)) or ( s0.endswith(getCharFromString(in1[divInt(int(5.0),len(saveChr(i2))):divInt(( divInt(min(i1, ( int(7.0) + ( i1 + ( i2 * mod(int(2.0),i1) ) ) )),( max(int(5.0), i2) - int(7.0) )) + i0 ),i0)], i0)[( int(5.0) * min(int(9.0), max(i1, divInt(divInt(( int(8.0) - int(5.0) ),( int(0.0) - i0 )),int(4.0)))) ):]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = saveOrd((\"\"R\"\" + s0.rstrip()))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 2, 1], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [0, 0, 1, 0, 1, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2, 5, 2, 0, 3, 2, 1, 0, 3, 3, 2, 0, 12, 2, 5, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = ( ( abs(len(s0)) != abs(int(0.0)) or False ) and min(mod(i1,int(7.0)), mod(int(5.0),len(in2))) \\l i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 1, 0, 4, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 0, 11, 2, 5, 1, 1, 4, 1, 1, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = len(getCharFromString(in1, abs(i0))) != min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in1) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [0, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 2, 1, 0, 2, 2, 0, 0, 6, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s0[len(in2[int(0.0):].capitalize()):divInt(int(7.0),i0)] not in saveChr(mod(i0,int(5.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 4, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [3, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 7, 0, 4, 0, 0, 4, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in (in2 + in1):{:\\nb1 = abs(saveOrd(in1[abs(i2):])) != min(int(0.0), i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1, 0, 0, 0, 1], [2, 1, 4, 2, 9, 3, 5, 9, 6], [2, 0, 2, 2], [0], [2, 0, 1, 3, 0, 1, 0], [1, 0], [1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = divInt(i0,int(2.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 0, 2, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 3, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 3, 2, 0, 0, 4, 0, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [5, 0], [1, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 6, 1, 1, 11, 1, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len((in1[len(in1):] + getCharFromString(in0, i1)))]:{:\\nres0 = s0[int(0.0):abs(mod(i1,int(7.0)))] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [4, 0, 4, 2, 0, 1, 2, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 8, 0, 3, 0, 0, 3, 1, 1, 11, 5, 2, 3, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.rstrip():{:\\nb2 = saveChr(len(in1[saveOrd(\"\"R\"\"):])) not in getCharFromString(saveChr(int(0.0)), i0)[abs(i2):i1].lstrip()[int(75.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0, 0], [], [], [], [], [], [0, 1, 1], [0, 9, 1], [2], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(09.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 3, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 9, 1, 2, 0, 1, 5, 0, 1, 10, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len((in1 + in1))):]:{:\\nres0 = getCharFromString(saveChr(i0)[:int(0.0)], i2) == in0[mod(i2,int(7.0)):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 304}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [3], [0], [1], [1], [], [], [2], [], [0, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(getCharFromString(s0, len(in2)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0, 2], [0, 1, 1], [3, 3, 2, 0, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 11, 0, 34, 10, 7, 5, 5, 3, 0, 0, 6, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = len(s0[len(in2[( i0 + i2 ):mod(i0,int(0.0))]):( int(7.0) + abs(i0) )][i1:]) != mod(divInt(int(5.0),i2),divInt(min(( i1 * ( len(in1) - divInt(min(i0, ( max(int(7.0), i0) + int(6.0) )),int(1.0)) ) ), i0),i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 1, 2, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 2, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 3, 3, 2, 0, 0, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 1, 0, 3, 0, 0, 2, 1, 1, 0, 4], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 14, 1, 45, 12, 12, 4, 8, 3, 1, 1, 6, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2.capitalize()[abs(len(saveChr(i0))):]:{:\\nres0 = int(08.0) != max(mod(divInt(int(2.0),( int(7.0) + min(i2, mod(( mod(len(in1),i2) * min(min(( i0 * i0 ), i1), i1) ),int(2.0))) )),i2), divInt(abs(i0),i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = max(divInt(i2,i1), ( max(min(int(1.0), saveOrd(\"\"R\"\")), i0) - mod(mod(int(7.0),int(4.0)),int(9.0)) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 1, 2, 0, 1, 4, 0, 1, 8, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = in1.rstrip()[abs(i0):] not in saveChr(int(7.0))[i2:mod(i2,int(7.0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 3, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 3, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in2):]:{:\\nres0 = in1[i0:] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0], [2], [2, 2], [], [0, 0], [], [], [3, 2, 3], [], [0], [], [], [0], [], [], [], [], [], [1, 2, 1, 1, 2, 1], [0], [2, 2, 0, 0, 2, 0, 0], [0, 1, 1], [4], [0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 0, 4], [1], [], [0, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile res0:{:\\ns0 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [5, 1], [2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [4], [], [], [5, 0], [1], [], [4, 0], [2], [], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s0.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [0], [], [], [2], [], [1], [], [1], [7], [2], [0], [1], [], [], [2], [], [5], [], [], [4, 4], [3, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(7.0)).lstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 2, 4, 4, 3, 0, 4], [1], [0], [0, 4, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 1, 1, 6, 2, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s2:{:\\nres0 = getCharFromString(saveChr(len(in1)), len(\"\"R\"\")) not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 2], [0, 1, 1], [0], [1, 0], [], [1], [], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [], [], [2, 2], [1], [0, 0], [], [2], [1], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i2 != i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [], [], [], [], [], [], [], [1, 1], [9, 4], [1, 2], [], [1, 1, 1], [], [], [], [1], [1, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 6, 7, 0, 1, 3, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 2, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nb2 = ( ( len(in1) != i0 or True ) and \"\"R\"\"[i2:] not in in1 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [0, 1], [6, 5], [2, 1], [1], [0, 1], [], [2], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i2 != int(65.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [], [1], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [0, 1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [1, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 1, 12, 2, 5, 1, 1, 5, 1, 1, 7, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in1), abs(i0)):]:{:\\nb2 = getCharFromString(in1, min(mod(int(0.0),int(7.0)), ( int(5.0) + len(in0) ))) in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0 not in in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1], [3, 2, 2, 1, 2, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 3, 1, 2, 1, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[abs(( mod(int(0.0),( int(6.0) + i0 )) + i2 )):]:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [0], [0], [], [], [], [], [], [], [], [], [], [0], [], [0, 1], [], [1, 1], [0], [0], [], [], [2], [], [0, 5, 4, 4, 3, 0, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 6, 0, 1, 7, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in0[len(in0):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [1], [0], [2], [0], [1, 5], [1], [], [1], [], [1], [0], [0, 2], [1], [2, 0, 1, 0], [1], [], [0], [1], [], [1], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += mod(i2,int(0.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 0, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 3, 2, 1, 1, 2, 3, 2, 0, 3, 2, 2, 1, 1, 2, 3, 1, 0, 0, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 4, 4], [1], [0], [2, 0, 0, 0, 0, 0, 4, 4, 2, 0, 4, 3, 1, 0, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 4, 4, 3, 0, 17, 5, 5, 3, 2, 7, 1, 0, 14, 3, 2, 2, 1, 1, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1:{:\\nres0 = ( len(in1) != mod(i0,len(in0)) or ( saveChr(( i2 + int(4.0) )).rstrip().endswith(in1[( int(7.0) + min(i0, divInt(len((\"\"R\"\" + in1).lstrip()),( int(5.0) * int(0.0) ))) ):]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 0, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [4, 4, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 5, 0, 2, 0, 0, 3, 0, 1, 6, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(saveChr(len(in2[i2:][i2:])), int(0.0)):{:\\ni2 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [0, 0], [0], [0], [], [], [1], [], [5, 5, 4, 4, 3, 5, 4, 5], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 3, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 2, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 8, 0, 4, 0, 0, 4, 0, 1, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString(in1[len(in1):], i0)):]:{:\\nres0 = i2 != abs(min(i2, int(0.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [5, 1], [2], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [4], [], [], [1], [1], [], [4, 1], [2], [], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"R\"\".capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1, 1], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 3, 0, 8, 2, 2, 1, 1, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( mod(len(s0[i0:]),i2) != len(in2) or True ) and in1[:( i0 + int(0.0) )] not in in1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [1], [5, 0, 0], [1], [0], [], [], [1, 0], [], [0], [1], [1], [1], [0], [3, 3, 1, 0], [], [4, 4], [0], [], [1, 4], [], [], [0, 4, 4, 2, 0], [0, 3], [0], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 2, 0, 0, 5, 2, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveOrd(s1) != saveOrd(getCharFromString(in1[int(1.0):].lstrip(), i1))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2, 2, 2], [], [0], [], [], [2, 0], [], [0], [], [], [0], [], [1], [], [1], [8], [1, 0, 0, 0, 0, 1], [0], [1, 1, 3], [1], [4], [], [1], [0, 4], [], [], [0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 2, 1], [0], [0, 2, 1, 0, 0], [], [0, 0, 0], [], [], [0, 2, 3, 3], [2, 5], [1, 1, 0], [0, 0], [], [1, 0], [], [0], [], [1, 1, 1], [5, 6, 8], [2, 0, 1, 2], [1], [3, 3, 2, 0, 1, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1], [4, 0], [0], [0, 0, 1], [2, 2, 3, 0], [], [0], [0, 2, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 0, 11, 3, 2, 0, 3, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = saveOrd(s2) == min(divInt(i2,int(5.0)), divInt(i0,int(6.0)))\\ns2 = in0[mod(int(8.0),i1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [], [], [], [0, 3], [3], [0, 1], [0], [], [1], [], [1], [], [0, 0, 1], [4, 1, 2], [2, 0, 1], [1, 1], [0, 1], [], [], [2, 1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = False\\ni2 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [2], [1, 1], [], [0, 0], [], [], [0], [3], [0, 1], [0], [], [0], [], [], [], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [4, 6, 0, 1, 3, 7, 1, 6, 6, 4, 9, 8, 7, 6, 1, 2, 5, 2, 2], [2, 1, 1, 2, 1, 2, 1, 2], [0, 1, 1], [1, 2, 0, 2, 3, 3, 2, 2, 0, 1, 1, 0, 3, 1, 1, 1, 1, 0, 2, 2, 1, 2, 0, 1, 1, 1, 1, 1, 3, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1], [1, 2, 3, 4, 2], [1, 1, 2, 0, 0], [1, 1, 0, 0, 1, 1], [], [], [], [2, 4], [1], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 8, 8, 5, 2, 16, 4, 3, 4, 1, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(4.0)\\nloopBreak% = 0\\nwhile b0:{:\\ni1 -= ( i1 - ( max(abs(( mod(i2,int(60.0)) * int(13.0) )), i1) + len(saveChr(int(7.0))[int(1.0):int(6.0)]) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [8, 2], [2], [0], [1], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(82.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 0, 3, 0, 0, 6, 0, 1, 11, 2, 1, 4, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(in1[int(0.0):])]:{:\\nres0 = in0 not in s0[i0:len(saveChr(i2))].rstrip()[i2:int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [1, 0], [], [], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [0, 0], [0], [0], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 2, 0, 2, 3, 1, 0, 0, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 4, 2, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 4, 1, 1, 1, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in1[:len(s2)]:{:\\nb2 = in1[( i2 + int(07.0) ):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 1], [], [0, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [], [], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [2, 0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [0], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [0, 6, 2, 0, 0, 4, 3, 0, 7, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 3, 2, 2, 3, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [2, 1], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [4, 0], [1], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 3, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = in0[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1, 0], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 2, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [2, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 1, 0, 1, 2, 0], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 6, 1, 1, 4, 2, 1, 0, 17, 17, 11, 0, 50, 17, 7, 9, 8, 3, 0, 0, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( ( ( int(07.0) + i2 ) != int(1.0) or True ) and in0[max(mod(i2,int(2.0)), ( int(4.0) - max(i2, mod(( divInt(abs(i0),( min(( i1 * divInt(( divInt(int(1.0),i2) - divInt(len(in2),int(7.0)) ),i1) ), int(7.0)) - int(9.0) )) + i2 ),i0)) )):] not in getCharFromString(in0, ( int(8.0) - min(int(5.0), max(i0, ( ( mod(int(0.0),int(4.0)) * divInt(int(8.0),i0) ) + int(59.0) ))) ))[int(9.0):] ):{:\\nres0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [5], [0], [0], [], [1], [], [0], [], [], [], [2], [], [0], [], [], [], [], [4], [], [], [4, 4], [3, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = saveChr(i2).lstrip()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0], [5, 1], [2], [0], [3], [], [4], [], [1, 1, 0, 0, 0, 0, 1, 0], [0], [1], [], [1, 1], [2], [], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = \"\"R\"\"\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = max(saveOrd(s0), i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [1, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 5, 3, 0, 4], [1], [0], [0, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\ni0 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [0], [0], [], [], [0, 2], [], [0], [], [], [0], [], [], [], [1, 0, 0, 0, 0, 0, 1], [6, 6, 4, 3, 8, 0, 4], [1, 2], [1], [2, 2, 3], [1], [], [0], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [0, 2], [0], [], [], [], [], [0], [], [2], [], [5], [], [], [], [], [], [], [2, 0], [1], [0], [], [], [0], [], [0, 2], [], [], [0, 4], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = s0.endswith(saveChr(i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 8, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 2, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 1, 5, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = s1[:mod(int(9.0),int(8.0))] not in in2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 1, 0, 1, 2, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 1, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 13, 1, 50, 16, 10, 8, 8, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s1[len(in1):]:{:\\nres0 = in1 not in s0\\ni0 = max(i2, abs(min(mod(i2,int(2.0)), mod(int(7.0),max(i0, ( divInt(( min(i1, divInt(max(( i2 + ( divInt(( int(5.0) + i1 ),divInt(abs(int(7.0)),i2)) * int(4.0) ) ), int(1.0)),i0)) - i0 ),mod(int(7.0),max(int(7.0), min(i0, ( ( ( int(9.0) + int(8.0) ) * divInt(int(5.0),i1) ) - int(0.0) ))))) - i1 ))))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0], [0], [0], [0], [], [], [0], [0], [0], [], [], [1], [], [1], [], [0, 1], [0, 7], [], [], [1, 1], [], [], [], [], [4, 2, 5], [1, 0, 1], [0], [4, 0, 3, 1, 3, 2, 4, 3, 1, 1, 0], [2], [], [2], [0, 1, 0], [10, 3], [5], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in s2.capitalize():{:\\nb0 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 1], [2, 2, 0, 0, 0], [2, 0], [1, 1], [0], [0, 0], [], [], [2], [1], [1, 0], [0], [], [1], [], [0], [], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [3, 6, 8, 7, 3, 3, 4, 4, 0, 1, 4, 3, 2, 9, 2], [0, 2, 2, 1, 0, 1, 1], [1, 1], [3, 0, 3, 0, 1, 2, 1, 0, 2, 0, 1, 3, 1, 0, 3, 1, 1, 2, 3, 1, 3, 1, 2, 0, 0, 3, 3], [0, 1, 1, 0, 0, 0], [0, 2, 0, 0, 4, 1, 3, 2, 4], [1, 2, 2, 1, 0], [0, 0], [4], [1], [0], [4, 2, 4, 1], [3, 2], [2], [2], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 7, 2, 14, 2, 3, 3, 1, 1, 1, 1, 4, 2, 1, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile min(i0, abs(i2)) \\g int(3.0):{:\\nloopBreak% = 0\\nfor in1 in \"\"U\"\".capitalize()[( int(68.0) - i2 ):].strip():{:\\ni1 *= divInt(i0,int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= min(int(33.0), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 2, 2, 2, 1, 1, 2, 0, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2], [1, 2, 1, 2, 2, 1, 2, 0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 3, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 51, 16, 10, 8, 8, 7, 1, 1, 15, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = ((in1 + in0[max(i2, int(5.0)):]) + s0[abs(mod(i1,int(7.0))):mod(int(5.0),min(i1, ( divInt(( len(getCharFromString((\"\"R\"\" + saveChr(i2)), divInt(min(( i2 - ( divInt(( int(7.0) * i2 ),divInt(max(int(6.0), i1),int(1.0))) - int(7.0) ) ), i1),i2))) * mod(int(7.0),abs(int(9.0))) ),max(i0, ( ( ( int(8.0) * int(5.0) ) - divInt(int(0.0),i2) ) * int(4.0) ))) + abs(i2) )))]) not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 2, 1], [0], [2, 1], [0], [0], [], [], [], [], [], [], [], [3, 3, 1], [], [], [], [1, 1], [4, 9], [0, 2], [1], [3, 2, 0, 1, 3, 0], [0], [2, 3, 2], [1, 0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 4, 0, 1], [], [0], [4, 4, 0, 0], [1, 0], [1], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = saveChr(abs(( i0 - int(4.0) )))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 2, 1, 0, 2, 0, 1, 3, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 5, 1, 1, 0, 1, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nb1 = len(in1) != mod(int(0.0),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [0], [], [], [], [], [], [], [0, 0, 1, 1], [6, 9, 2, 5], [0], [0], [1, 0], [0], [2], [], [], [1, 2], [], [], [4, 4, 0], [2, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(692.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1], [1], [0], [], [], [0], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0, 2, 2, 2], [0, 1, 1], [3, 2, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [5, 5, 4, 1, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 14, 14, 15, 0, 54, 17, 9, 6, 11, 4, 1, 0, 10, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2[len(in2):] not in in1[mod(mod(int(0.0),max(( i0 + int(85.0) ), divInt(int(7.0),abs(i2)))),( divInt(( ( i2 + divInt(min(( i0 * divInt(len(s1),min(int(2.0), i1)) ), mod(max(int(1.0), i2),int(0.0))),int(7.0)) ) - i1 ),i2) + ( int(1.0) + abs(divInt(max(i0, divInt(i0,mod(int(8.0),int(5.0)))),divInt(int(0.0),i1))) ) )):]:{:\\nb1 = ( int(4.0) != int(8.0) or ( getCharFromString(\"\"R\"\", i0)[i2:i2].endswith(saveChr(i2)) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 3, 4], [1], [0], [1, 2, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"R\"\" not in s0[i0:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [1, 0, 1], [], [0, 1, 0], [], [0], [], [], [1, 0], [0], [0, 0], [0], [], [1, 1], [], [1, 0], [], [1], [0], [0, 2], [1], [2, 0, 1, 0], [1], [], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 1, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 1, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\ni0 += mod(i2,int(0.0))\\nb0 = True\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [1, 1, 1], [3, 1, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [4, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 9, 1, 38, 12, 8, 6, 7, 3, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[max(int(0.0), max(int(45.0), abs(divInt(i2,int(7.0))))):]:{:\\ni2 += mod(int(4.0),min(i2, ( divInt(( len(in2) + i0 ),divInt(min(( i1 * ( divInt(( int(1.0) - i2 ),divInt(max(int(7.0), i1),int(7.0))) + int(9.0) ) ), i2),i0)) * mod(int(8.0),abs(int(5.0))) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 2, 1], [0, 1], [0], [0], [0], [], [], [0], [3], [1, 2], [0], [], [1], [1, 0], [0], [0], [1, 1], [7, 2], [0, 0], [0], [0, 1, 2], [], [], [], [], [0, 3, 0, 4], [], [0], [3, 3, 3, 4, 4, 0, 0], [1], [], [2, 2, 0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i0 \\ge int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 2, 1, 0, 0, 2, 1, 3, 2, 2, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 3, 2, 1, 0], [0, 0, 1, 1, 0, 2, 2, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 3, 4, 1, 2, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = len(s1[mod(int(5.0),i0):]) != mod(i2,abs(( int(7.0) + min(i2, i0) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 2], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 0, 13, 3, 4, 1, 2, 4, 0, 1, 6, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(saveChr(min(( int(0.0) + i0 ), mod(i1,abs(divInt(int(7.0),min(i2, i0)))))).capitalize()):]:{:\\nb2 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 9, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 3, 1, 2, 0, 1, 2, 3, 2, 0, 0, 2, 2, 1, 0, 0, 3, 2, 0, 2, 3, 1, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [3, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 8, 0, 32, 9, 8, 4, 5, 7, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(s0):]:{:\\nres0 = in1[len(in0):divInt(min(int(0.0), ( i0 + int(7.0) )),( min(mod(i2,i2), divInt(divInt(int(5.0),i0),i1)) + len(s0) ))] not in in1[( i2 * ( min(int(9.0), max(i1, divInt(abs(int(6.0)),i2))) - int(1.0) ) ):int(7.0)].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [], [], [], [], [], [], [], [1, 1], [9, 4], [1, 2], [], [1, 1, 1], [], [], [], [1], [1, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 4, 9, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 1, 2, 0, 1, 2, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 0, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 1, 3, 3, 0, 4, 4], [1], [0], [4, 0, 3, 4, 0, 0, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 0, 6, 0, 1, 9, 3, 1, 0, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize():{:\\nloopBreak% = 0\\nwhile (saveChr(len(s1)) + in0) not in in0:{:\\ni0 = len(s0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [2, 0], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 3, 3, 1, 4], [1], [0], [4, 0, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 6, 1, 1, 8, 2, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in getCharFromString(in2, len(in1)):{:\\nin0 = in0[len(s1):]\\nres0 = \"\"R\"\" not in saveChr(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 5, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 2, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 1, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 3, 3, 3, 0, 9, 0, 3, 0, 0, 4, 0, 0, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[min(len(in2), i0):] not in in1:{:\\nres0 = ( int(0.0) != abs(int(7.0)) or ( s0.endswith(saveChr(i1)[int(5.0):][:i1]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 2, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 3, 3, 4, 0, 13, 3, 3, 1, 2, 6, 1, 1, 11, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nloopBreak% = 0\\nwhile \"\"R\"\" not in in2:{:\\nres0 = ( len(in0) != divInt(int(0.0),i0) or ( s0[divInt(i2,int(2.0)):].capitalize()[( int(5.0) + abs(i2) ):].endswith(saveChr(i0)) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 1], [], [1, 1], [], [], [], [], [0], [5], [0, 0], [0], [], [2], [], [], [], [1, 1, 0, 0, 1, 1], [1, 1, 5, 0, 6, 2], [1, 2, 1, 2, 2], [0, 1], [2, 3, 1, 1, 0, 3, 0, 3, 3, 1, 0, 2, 0, 1], [1, 0], [0, 0, 0, 2, 0], [1, 2], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 11, 1, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = mod(min(int(1.0), int(1.0)),i2)\\ni1 -= min(i2, min(abs(int(506.0)), i2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [2], [1], [1], [], [], [2], [1, 1, 0, 0, 0, 0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 1, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 0, 0, 1, 2, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [4, 4, 4, 4, 3, 0, 4], [1], [0], [2, 2, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 1, 7, 0, 2, 0, 0, 2, 0, 0, 6, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(in1[i0:i2][int(0.0):len(in1)][i1:][i1:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [0, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 0, 2, 1, 0, 3, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = len(s2) != len(\"\"R\"\")\\ni1 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 0], [], [0], [], [], [2, 2, 3], [1], [0, 1], [0], [], [0], [], [], [], [1, 1], [4, 5], [0, 0, 1], [1], [2, 0, 1, 2, 0, 0], [0, 1], [], [1, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 3, 1, 2, 1, 0, 1, 0, 0, 0, 1, 1, 3, 0, 6, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = b2\\nres0 = ( i0 - int(4.0) ) \\g divInt(i0,i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [0, 3, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 1, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 2, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1, 1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [0], [0, 1, 0, 2, 1], [1], [2, 0, 2, 2, 0, 0, 0], [1, 0, 0], [], [1, 1, 0], [0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 7, 3, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= divInt(i1,( ( i0 - i2 ) + i1 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1], [0], [0], [0], [], [], [], [1], [3], [1], [0], [], [], [], [], [], [0, 1], [], [0, 0], [0], [0, 0], [], [4], [], [], [0, 2], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2:{:\\nb1 = i0 \\ge i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 1], [], [1, 1, 1], [], [], [], [], [], [], [], [0, 0], [], [], [], [], [], [1], [5], [2, 1, 0, 1, 2, 0, 2], [1, 1, 0], [1, 0, 2, 0, 0, 0], [1, 0], [], [1, 2, 2], [1, 1, 1, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 -= int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[int(0.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1], [1, 2, 0, 1, 0, 0, 0], [2], [1, 0, 2, 2, 2, 2], [], [0, 0, 0, 0], [], [], [0], [2], [0, 0], [0], [], [1], [], [1], [], [1, 1, 1], [6, 2, 6], [0, 0, 1, 2, 0, 1, 1, 1], [0, 1, 0], [3, 2, 0, 0, 1, 1, 2, 0, 1, 0, 0], [0, 0], [4], [2, 1, 1], [], [4, 0, 1, 0, 3], [], [], [3, 0, 0, 0], [3], [4], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = saveOrd((in1 + s0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [0], [1, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [3, 2, 2, 5], [], [], [0, 4, 4, 4, 0, 0, 0], [1, 1, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 2, 4, 2, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[abs(len(in1)):]:{:\\nres0 = s2 not in in0\\ni0 = i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [0, 2], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1, 1], [9, 0], [2, 1, 1, 0, 1], [1], [0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 0], [0, 2, 0], [1, 0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len((s0 + s2))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in2),i0):]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 2, 4, 0, 3, 0, 4], [1], [0], [2, 0, 1, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 0, 0, 4, 0, 2, 0, 0, 4, 1, 1, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(\"\"R\"\"):]:{:\\nres0 = getCharFromString(in1, max(int(17.0), int(5.0))) not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [1], [], [0], [], [], [1], [], [1], [], [], [], [1, 2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0], [0, 1, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [2, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 4, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s2[len(in2):]) != i0\\ni2 = int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [5], [1], [0], [], [], [], [], [], [], [], [2, 1], [1], [0, 0], [], [2], [1], [], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = i2 != i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 2], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 2, 0, 0, 0, 3, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 5, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(\"\"R\"\"):] not in in2.capitalize()\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 0, 1], [2, 1, 9, 8, 6, 7], [2, 1, 2, 0], [0], [2, 1, 2, 2, 0, 2, 2, 0, 0, 2, 1, 1, 1], [1, 0, 0, 0, 1, 0], [], [1, 0, 0, 0], [1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 4, 1, 13, 6, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(int(2.0),( ( i1 - ( divInt(i2,i0) + ( int(1.0) + int(98.0) ) ) ) + int(67.0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 3, 3, 4, 1, 12, 3, 3, 1, 2, 6, 0, 0, 8, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[mod(i2,int(0.0)):]:{:\\nres0 = ( len(in1) != mod(i1,int(7.0)) or ( in0.endswith(s0) and True ) )\\n:}else:{:\\ni1 = ( int(5.0) + abs(i1) )\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [0, 2], [1], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += len(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1], [1, 6, 4, 3], [1], [0], [2, 1, 3, 2, 2, 1], [0, 1], [4], [1], [1, 1], [1, 3, 0], [], [], [4, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 1, 1, 1, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = saveChr(( int(1.0) - saveOrd(in0) ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 9, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 6, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\":{:\\nres0 = in2 not in in1[len(in1):].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 1, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 4, 4, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = len(s1[i2:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1, 0, 0, 0, 1], [2, 1, 4, 2, 9, 3, 5, 9, 6], [2, 0, 2, 2], [0], [2, 1, 1, 3, 0, 1, 0], [1, 0], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = mod(int(2.0),int(1.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 0, 0, 0, 0, 0, 1], [4, 2, 3, 1, 5, 9, 4, 8], [1, 2, 0], [1, 0], [1, 2, 3, 3, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 2], [0, 2], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 3, 2, 6, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(4.0)\\ni2 = ( abs(abs(int(2315948.0))) * i0 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0], [0, 1], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [4, 1], [0, 1], [0], [3, 0, 1, 1], [], [2], [2], [], [0, 0, 4, 4, 3, 0, 4], [1], [], [1, 0], [], [], [1], [1], [5], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = abs(i1)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3, 2, 2, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 0, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 5, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [1, 2, 1, 1], [0, 1], [0, 0, 1], [1], [], [1], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\ni1 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in s2[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 0], [], [0, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [1, 2, 2, 1, 0], [1], [3, 2, 5, 3], [], [0], [4, 0, 0, 2, 0, 2, 4, 0], [1, 0], [], [2, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 0, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 1, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[saveOrd(s1):] not in in1[int(8.0):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = in1[len(in0):] not in s0[int(7.0):int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [0], [0, 0], [], [], [1], [], [0], [], [], [1], [], [0], [], [1, 0], [4, 0], [2, 2], [1], [1], [], [], [0], [1, 0, 0, 0, 0, 0, 1, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = True\\ni2 += int(4.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [0, 2], [], [], [], [], [], [], [], [], [1], [2], [0], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 1], [0], [1, 1], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 1], [6, 5, 1, 7], [2, 2, 2, 0], [1, 0], [1, 3, 1, 0, 0, 1], [], [0], [1], [], [3, 4, 4], [], [0], [3, 2, 0, 0], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 2, 6, 0, 1, 1, 0, 3, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in (in1[int(6.0):min(int(51.0), i2)] + in1):{:\\ni2 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = int(7.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [0, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 4, 3, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[i0:]:{:\\nin1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 0, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [3, 0, 2, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 5, 0, 1, 0, 0, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s0[len(s2):]:{:\\nres0 = getCharFromString(in1, int(03.0))[i2:] not in in0[int(5.0):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [0, 0, 2, 2, 0, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in2[i1:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 3, 3, 1, 2, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in1):] not in s0[mod(int(0.0),i0):mod(i2,int(7.0))].capitalize()[( int(5.0) + abs(int(7.0)) ):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3, 3], [1], [0], [0], [], [0], [], [], [], [1, 1, 1], [1], [], [], [2, 3, 0, 1, 0, 0], [], [4, 4], [], [], [5, 3], [], [], [0, 4, 0], [0], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 1], [], [0, 1], [], [0], [], [], [3], [0], [1], [0], [], [], [], [], [], [1], [5], [1, 2, 1, 1], [0, 1], [0, 0, 1], [1], [], [1], [0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = i1 \\l i2\\ni1 = int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1], [], [0], [], [], [], [], [3, 1], [0], [0, 0], [0], [], [0], [], [], [], [1, 0, 1, 1], [9, 3, 4, 0], [], [], [1, 2, 1, 1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = b1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [0], [0], [0], [], [1], [], [1], [], [1], [0], [0, 2], [], [2, 0, 1, 0], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in \"\"R\"\":{:\\nin2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 2, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 2, 0, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 11, 2, 5, 1, 1, 6, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(in0), i0):]:{:\\nin1 = in0[abs(min(( i1 + int(0.0) ), mod(int(2.0),len(s0)))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [1, 3, 3, 1, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 8, 8, 9, 0, 33, 9, 7, 5, 4, 6, 1, 0, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[int(7.0):] not in in2:{:\\nres0 = ( len(in1[len(in1):]) != int(7.0) or ( in0[i0:].capitalize()[mod(i2,int(5.0)):abs(min(len(saveChr(i2)), divInt(( divInt(int(2.0),i0) + ( min(( i1 + ( i2 - ( int(2.0) - i1 ) ) ), divInt(max(int(5.0), i2),int(7.0))) + int(5.0) ) ),i0)))].endswith((\"\"R\"\" + s0.rstrip())) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [5], [2, 1], [0], [3, 0, 1], [], [0], [], [], [3, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = min(i1, int(5.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 9, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 0, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 2, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 4, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 1, 11, 1, 5, 0, 1, 3, 0, 1, 6, 3, 1, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(saveChr(len(in2.rstrip())), max(i0, abs(min(mod(i2,int(2.0)), i2))))[int(7.0):]:{:\\ni0 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 3, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 2, 0, 0, 1, 0, 1, 2], [0, 1, 1], [0, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 2, 0, 2, 3, 1, 2, 1, 0, 0, 0, 3, 0, 3, 3, 3, 0, 2, 0, 3, 1, 1, 2, 1, 0, 1, 1, 3, 0, 1, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 3, 2, 2, 3, 0, 1, 2, 1, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:len(in1)]:{:\\nin1 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 0, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 1, 2, 3, 2, 3, 1, 1, 0, 0, 1, 1, 3, 1, 3, 1, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 2, 2, 2, 0, 1, 2, 1, 4], [0, 0, 2, 1, 1, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 1, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 12, 2, 5, 2, 0, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[max(min(i0, abs(abs(( i2 + int(0.0) )))), ( int(2.0) + abs(i0) )):]:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 8, 3, 5, 6], [0, 1, 0, 0], [1], [3, 0, 2, 3, 3, 2, 1, 3, 3, 1, 2, 0, 3, 3, 3, 1, 2, 3, 1, 1, 3, 0], [0, 0, 0, 0], [0, 2, 1, 3, 3, 3, 0, 1, 3, 3], [2, 1, 2, 1, 2, 0], [], [3, 2, 4, 4], [], [], [0, 2, 2, 0, 4, 0, 0], [1], [], [0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 4, 1, 22, 4, 10, 5, 0, 4, 0, 0, 7, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= min(i1, ( abs(max(( int(0.0) - len(in0) ), len(s2[:int(8.0)][( i0 * len(saveChr(min(max(int(3.0), ( len(in1) - int(5.0) )), int(6.0)))) ):len(in1)]))) * i0 ))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [1, 2, 1], [], [1, 1, 2], [], [0], [], [], [3], [], [2], [], [0], [], [], [], [], [1, 0, 0, 1], [3, 1, 5, 1], [2, 1, 0], [1, 1], [3, 1, 0], [], [4], [0, 2], [], [1, 5, 2], [], [], [4, 0, 0, 4], [0, 1], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 1, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += saveOrd(getCharFromString(s1, int(3.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 4, 9, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 3, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 4, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 33, 9, 8, 4, 5, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = in1[len(in0):] not in getCharFromString(s0[i0:int(0.0)], abs(mod(i2,int(7.0))))[mod(int(5.0),min(i2, ( divInt(len(saveChr(int(7.0))),i0) + ( min(divInt(i1,( max(( int(2.0) + i2 ), divInt(saveOrd((\"\"R\"\" + in1.rstrip())),int(1.0))) * i1 )), int(4.0)) - int(9.0) ) ))):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [0, 0], [], [], [], [], [], [0, 1, 1], [0, 9, 1], [1], [1], [1], [], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= int(09.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 2, 2, 4, 2, 8, 2, 2, 1, 2, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in2[len(in2):] not in in1[len(in1):]:{:\\ni0 = mod(int(0.0),i1)\\n:}else:{:\\ni2 += mod(i0,int(7.0))\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [2, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1, 2], [0, 1, 1], [3, 3, 1, 1, 2, 1, 0, 1, 1, 1, 3, 2, 2, 2, 3, 1, 0, 2, 3, 3, 2, 2, 3, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [3, 3, 2, 4, 3, 0, 1, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 3, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 1, 0, 10, 1, 2, 0, 1, 5, 1, 0, 14, 3, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile (s0 + in2[len(in1):])[len(saveChr(int(0.0))[int(7.0):mod(int(17.0),i1)]):] not in s0[int(2.0):int(1.0)]:{:\\nin0 = (\"\"R\"\" + saveChr(int(7.0))).capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 1, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [1, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [3, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 1, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [3, 3, 3, 0], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 5, 1, 2, 0, 1, 3, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[int(1.0):len(in1)]:{:\\ni0 = mod(i2,len(\"\"R\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [1, 0, 1, 2, 0, 3, 2, 0, 2, 2, 1, 1, 3], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 2, 2, 0, 0, 4], [1], [0], [2, 0, 3, 2, 0, 0, 2, 3, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 4, 2, 1, 3, 7, 1, 1, 15, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nb2 = (s2[i2:] + s2) not in (s0 + s0)[int(7.0):divInt(i2,len((\"\"R\"\" + saveChr(mod(i2,( divInt(int(5.0),int(7.0)) + len(in1) )))).capitalize()))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 0], [], [0, 0], [], [], [3, 2, 3], [0], [1], [0], [], [], [], [], [], [], [], [1, 2, 1, 2, 2, 1], [1], [3, 2, 0, 0, 2, 0, 0], [0, 1], [4], [0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 3, 0], [], [], [0, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 1, 1, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in0\\nres0 = saveOrd(s0) \\l ( i1 + i2 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 16, 16, 10, 0, 50, 15, 10, 9, 6, 6, 1, 0, 14, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[:len(in1)]:{:\\nres0 = ( i0 != int(0.0) or ( in0[abs(mod(i1,int(7.0))):mod(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len(s0[min(i0, ( max(( int(2.0) + i2 ), divInt(abs(int(1.0)),i1)) * int(7.0) )):]) - int(7.0) )) + i1 )))].endswith(getCharFromString((\"\"R\"\" + saveChr(( divInt(int(9.0),max(int(8.0), abs(i2))) * divInt(( ( int(5.0) - int(0.0) ) - ( int(4.0) * i0 ) ),int(8.0)) ))), int(59.0))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 0, 0], [1], [3], [], [3], [0], [], [0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += len(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [1], [2], [], [0], [], [], [], [], [2, 0, 1, 0, 2, 0], [0, 0], [2], [1], [], [0], [0], [1, 1, 1], [1, 7, 3], [2, 2, 1, 0, 2, 1], [], [1, 0, 0, 2, 2, 3, 2, 0, 2, 0, 3, 1, 2, 1, 0, 0], [1, 1, 1, 0, 1], [2, 4], [2], [0, 1, 1, 1], [2, 4, 5], [0, 0, 0, 0, 1], [], [0, 2, 4, 2, 0, 4, 1], [0, 1], [], [1, 0], [3, 0, 0, 2, 3], [21, 14], [], [6], [27, 4]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [1, 3, 0, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(7.0):]:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [2, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 0], [0], [2, 0, 0, 2, 0, 1, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [0, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[i0:abs(i2)]:{:\\nres0 = in1 not in in1[int(8.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [2, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 2], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 2, 2, 2], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 5, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 9, 9, 9, 0, 33, 8, 7, 4, 4, 6, 1, 0, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1:{:\\nres0 = ( len(s0) == i0 or ( getCharFromString(in2[int(0.0):abs(int(7.0))], i2)[int(5.0):i2][:int(7.0)].endswith(saveChr(min(i0, mod(mod(( int(2.0) + i1 ),divInt(len((\"\"R\"\" + s1.rstrip())),( i2 * divInt(min(( int(1.0) * i1 ), ( max(int(7.0), i2) * int(7.0) )),int(9.0)) ))),i0)))) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 1, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 3, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 2, 2, 0, 2, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[abs(mod(i2,int(0.0))):]:{:\\nres0 = in1 not in in1[abs(mod(i2,int(7.0))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 8, 5, 3, 9, 9, 0, 7, 9, 0], [0, 0], [1], [1, 0, 1, 3, 1, 1], [0], [1], [1], [], [5, 0, 2], [1], [], [4, 0, 2, 0], [1], [], [0], [0], [20], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = saveChr(int(3.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [2], [3], [1], [0], [], [], [], [], [], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [3, 4, 7, 9, 5, 0, 1, 6, 4, 0, 4], [0, 0, 2, 1, 1], [1], [3, 0, 1, 3, 0, 2, 3, 0, 2, 0, 1, 3, 1], [0, 1], [1, 1, 3, 2], [2], [1], [5], [], [], [2, 0], [3, 1, 3], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 2, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= max(i0, int(34795.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [], [0], [0], [], [1], [], [1], [], [], [], [0, 1], [0], [0], [], [], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [2, 0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [0], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [0, 6, 2, 0, 0, 4, 3, 0, 7, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 3, 2, 2, 3, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [2, 1], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [4, 0], [1], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 7, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 3, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[:i2]:{:\\nres0 = in1 not in in1[saveOrd(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [0], [1], [0], [2], [], [], [], [], [1, 0, 1], [0, 0, 0], [2, 0, 0], [], [2, 2, 0, 1, 1, 0], [0, 1], [], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 2, 0, 6, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( divInt(i2,int(0.0)) - int(00.0) ) \\l i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 1], [], [2, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1], [3], [2, 0, 2, 1], [0, 0], [3, 0, 2, 0, 0], [0], [2], [0, 2], [], [5, 5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1, 2, 2], [0], [0], [], [], [2, 0], [], [0], [], [], [0], [], [1], [], [1], [8], [1, 0, 0, 0, 0, 1], [0], [1, 1, 3], [1], [4], [], [1], [0], [], [0], [4, 0], [2], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(8.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 0, 0, 1], [1, 4, 7, 0, 6], [0, 1, 1, 0, 0], [1], [1], [], [4], [0], [], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(14706.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1, 1], [0, 1, 1, 0], [2], [0, 0, 2], [], [0], [], [], [1, 2], [2, 1], [1, 0, 1], [0], [], [1], [], [], [], [1, 1, 1, 1, 1], [0, 8, 9, 8, 5], [1, 2, 0, 1, 2, 1, 2, 2], [], [3, 0, 3, 1, 2, 1, 0, 2, 0, 3, 1, 3, 0, 3, 0, 0, 1, 3, 0, 2, 2, 0, 1, 1], [1, 1, 0, 0, 0, 1], [3, 1, 4, 0, 1, 2], [2, 0, 2, 1], [1, 1], [1, 1], [1], [], [0, 1], [], [], [], [0], [16], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = len(s1) == i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 2, 0, 1, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = s0[len(in0[:mod(int(07.0),i0)]):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 0, 1, 0, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [25], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 2, 1, 11, 2, 5, 1, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\ni0 = len(in1[abs(i1):min(mod(int(07.0),int(57.0)), ( int(71.0) + len(s2) ))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [2, 1], [], [0, 0], [], [], [3, 2, 3], [], [], [], [], [], [], [], [], [], [], [1, 2, 1, 2, 2, 1], [0], [2, 2, 0, 0, 2, 0, 0], [0, 1, 1], [4], [0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 3, 0], [1], [], [0, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [], [0], [17], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = in0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nb0 = ( ( len(\"\"R\"\") != mod(int(9.0),i0) or True ) and in1 not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 1, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 1, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 1, 0, 1, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [3, 3, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [17], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 5, 1, 2, 0, 1, 4, 2, 1, 7, 0, 0, 2, 2, 1, 1, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\"[int(1.0):] not in in1\\ni0 = mod(i2,len(\"\"r\"\"))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [2, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 1, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb2 = len(in1[:i1]) != int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [0, 2], [2, 0], [], [0, 0], [], [], [3], [], [0], [], [], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [1, 5], [], [], [0], [], [3], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in2\\nres0 = False\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 6, 4, 2, 7], [2, 1, 1, 2, 2, 1], [], [3, 2, 0, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 3, 0, 2, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0], [2], [0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1], [2, 3], [], [], [2, 2, 0], [], [0, 2], [1, 0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 0, 16, 6, 1, 2, 4, 2, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in0[abs(mod(i2,mod(int(1.0),( int(3.0) + divInt(i1,int(6.0)) )))):mod(( i1 + i2 ),int(4.0))][:i2]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 2, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [0, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 4, 4, 4, 1, 12, 2, 3, 0, 2, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = ( in1[:int(0.0)] not in in0 and i0 != int(7.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = max(mod(i2,int(5.0)), mod(int(7.0),abs(i0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1], [], [1], [0], [0], [], [], [3], [4], [1], [0, 0], [], [], [], [], [], [0, 1, 1], [1, 3, 0], [1, 2], [1], [1, 0], [], [], [0], [1, 0, 0, 0, 0, 0, 1, 0], [], [], [], [], [], [1, 0], [2, 2, 0, 0, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 += int(13.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[saveOrd(in2):] not in in0[len(in1):i0]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 0, 5, 0, 4, 2, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 2, 0, 1, 2, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 4, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 12, 0, 50, 17, 8, 8, 9, 6, 0, 1, 10, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(getCharFromString((in1 + in1), max(i0, int(17.0)))):]:{:\\nb0 = in0[abs(mod(i2,int(5.0))):] not in s0[mod(int(7.0),min(i2, ( divInt(( abs(i1) + divInt(min(( i1 + ( divInt(( int(4.0) * i2 ),divInt(mod(int(1.0),i1),int(7.0))) - int(7.0) ) ), i2),i0) ),( int(9.0) + max(int(0.0), abs(i0)) )) - ( ( divInt(int(5.0),int(0.0)) - divInt(int(4.0),i1) ) - int(2.0) ) ))):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [5, 9], [0, 1, 0, 0], [1, 1, 1], [3, 3, 2, 0, 2, 0, 3, 0, 1, 0], [1, 0, 0], [0, 2, 3], [2, 1], [0, 1, 1], [5], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 8, 2, 3, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= min(abs(divInt(i1,( i0 - len(in2) ))), i0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [3], [1], [0], [2], [], [], [], [], [1], [2], [2, 0, 1], [], [2, 3, 0, 1, 0, 0], [0, 1], [4], [1, 1], [0], [5, 3], [], [], [4, 3, 0, 4, 3], [1, 2], [0], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 0, 5, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( saveOrd(saveChr(i2)) - int(2.0) ) \\ge i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 2, 0, 2, 3, 1, 0, 0, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [], [0], [0, 0, 0, 2, 0, 3, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 4, 1, 1, 0, 1, 5, 0, 1, 5, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2:{:\\nres0 = in1 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(in0[mod(i2,int(0.0)):])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 1], [], [2, 0], [], [0], [], [], [0], [5], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [0, 6, 2, 0, 0, 4, 3, 0, 7, 4, 4], [0, 0, 0, 1, 0, 0, 0, 2], [0], [0, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 2, 0, 1, 0, 3, 2, 2, 3, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [2, 1], [2, 1, 2, 1, 2, 0], [1, 0, 1, 1], [4, 0], [1], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [0, 2], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [], [0, 0], [], [0], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [2, 2], [2, 1, 2], [0], [0, 0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 0, 0, 2, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 1, 8, 1, 3, 0, 1, 5, 0, 0, 8, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0.rstrip() not in in2:{:\\nin1 = in1[len(in2):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(saveChr(i2)[i0:abs(mod(i0,int(0.0)))])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [3], [1], [0], [], [], [], [], [], [1], [8], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [2, 0, 3, 0, 2, 1, 0], [0, 1], [2], [1], [1, 0, 0, 0, 0, 0, 1, 0], [], [], [], [], [], [], [0], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 0, 7, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( i0 - abs(i1) ) \\ge mod(int(8.0),i2)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 0, 1, 1], [0, 2, 0, 0, 0], [2], [1, 2, 2, 1], [], [0, 0, 0, 0], [], [], [], [2], [1], [0], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2, 1, 0, 2, 1], [0, 1], [0, 0, 0, 1, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [0, 2, 2, 5, 1], [], [], [3, 4, 4, 4, 0, 0, 0], [2, 0, 2], [4], [], [0], [], [], [], []], "fitness": 31, "mapping_values": [1, 5, 5, 1, 4, 0, 4, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 6, 2, 5, 0, 0, 1, 0, 5, 0, 0, 7, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i2\\nloopBreak% = 0\\nwhile i1 == i0:{:\\ns0 = (getCharFromString(s2.capitalize(), int(5.0)).capitalize() + s2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = s1\\ni2 -= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [2, 0], [0], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [5, 0, 1, 1], [], [0], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in s0:{:\\ns1 = s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 1], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 49, 13, 11, 6, 7, 5, 1, 1, 14, 4, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):abs(i0)]:{:\\nres0 = in1.rstrip()[int(7.0):] not in saveChr(abs(min(i2, int(7.0))))[len(in0[min(max(i2, mod(divInt(( int(5.0) + i0 ),divInt(min(( i1 + ( i2 - ( int(2.0) - i1 ) ) ), ( max(int(2.0), i2) + int(5.0) )),int(7.0))),i0)), i0):divInt(int(5.0),len((\"\"R\"\" + saveChr(int(9.0))).lstrip()))]):max(i0, ( divInt(divInt(int(8.0),int(5.0)),mod(int(0.0),i1)) * int(4.0) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 2, 3, 0, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [], [], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = s0[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0], [9, 9, 0, 3], [1, 2, 0, 2], [1], [2, 0, 1, 2, 0, 1, 3, 3, 0, 0, 0], [0, 0], [1, 2], [1, 0], [1], [1, 4], [], [], [3, 2, 0], [], [], [1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 -= ( i2 + int(9.0) )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [0, 1, 2], [], [], [], [], [2, 3], [], [0], [], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [2, 4], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = res0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(len(in1)):]:{:\\nb1 = in1[i1:int(0.0)] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [0, 2], [], [0], [], [], [1], [], [0], [], [], [], [0, 2], [1], [0], [], [], [1], [], [], [], [], [], [], [], [], [0], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= i2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 3, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = i2\\ni2 += len(s0[i0:])\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 0, 1], [0, 1, 1, 1], [], [1, 1, 2, 2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1], [0, 3, 7, 2, 5], [0, 1, 1, 1, 1, 0, 2, 1], [1, 1], [1, 0, 2, 0, 1, 2, 1, 0, 2, 2, 0, 0, 3, 1, 0, 1], [0, 1, 1, 0], [4, 1, 0], [0, 2, 2, 2], [0, 0], [0, 3, 2], [1], [], [2, 0, 4], [], [], [0], [3], [], [], [], [15]], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(0.0)\\ni1 *= i1\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 1, 0, 0], [0, 2], [0, 2, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 0, 3, 3, 0, 3, 2, 1, 0, 0, 1, 3, 3, 1, 0, 2, 2, 2, 0, 3, 3, 2, 1, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 3, 1, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4, 5], [1], [0], [0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 4, 3, 4, 4, 0, 1, 0], [0, 3, 3, 0], [1, 0], [2, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2:{:\\nres0 = in1 not in in1\\nin0 = in2[len(in1):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 0, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 4, 1, 1, 5, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\ni0 = len(\"\"R\"\")\\ni1 = len(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 2], [0, 0], [1, 5, 3], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 2, 2, 0, 2, 1, 1, 0, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 1, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [2, 4, 4, 2, 1, 4, 5, 5], [1], [], [0, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 0, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 0, 0, 2], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 3, 2, 2, 0, 1, 8, 8, 11, 1, 34, 9, 7, 2, 7, 8, 1, 0, 16, 3, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s2 not in in1:{:\\nres0 = ( len(in1) != len(s2[:divInt(mod(i0,divInt(int(0.0),int(7.0))),i2)]) or ( s1.endswith(in1[int(5.0):abs(i2)].capitalize()[i0:divInt(divInt(int(7.0),i1),divInt(min(( i2 + ( len(saveChr(mod(min(i1, int(6.0)),max(int(1.0), i2)))) + int(7.0) ) ), int(7.0)),i0))]) and (in2 + in2.rstrip()) != \"\"R\"\" ) )\\n:}else:{:\\ni0 = i1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 0, 0], [], [2, 0, 2], [], [0, 0], [], [], [0], [2], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 8, 9, 7, 0, 1, 2, 6, 7, 5, 5, 2, 0], [0, 1, 0, 1, 1, 2, 2, 2, 0, 1, 0, 0], [], [0, 1, 1, 0, 0, 1, 2, 0, 0, 3, 3, 1, 1, 3, 0, 0, 2, 0, 3, 2, 2, 0, 2, 0, 3, 2, 1, 1, 1, 2, 1, 2, 0, 0, 2, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0], [1, 3, 4, 2, 1, 1], [1, 0, 2, 0, 1, 1], [0, 0, 0], [1, 3, 2, 3, 1, 1, 2, 0, 5], [], [], [4, 0, 0, 0, 2, 2, 0, 4, 2, 3, 3, 4, 4, 0, 3, 0, 2, 3, 4, 2, 4, 0, 0], [2, 3, 2, 1, 0], [1], [0, 1, 1, 1, 2, 1, 1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = in0.capitalize()\\nb0 = i0 == int(5.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in2):] not in s0[i0:int(0.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [1, 0, 1, 0, 1, 0, 1], [8, 5, 3, 9, 1, 1, 6], [0, 2, 1], [1], [3, 1, 3, 2, 1, 0, 3, 2, 1, 1, 3], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 2], [0, 0, 2], [1, 0], [1], [], [], [4, 0], [2], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 2, 1, 10, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += min(int(8.0), min(( int(53.0) + i2 ), abs(( int(91.0) * int(16.0) ))))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 2, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 4, 4, 3, 3, 3, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 8, 2, 3, 0, 2, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = in1[saveOrd(in1):mod(abs(int(07.0)),abs(mod(i1,int(5.0))))]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1], [], [], [], [], [], [5, 0], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [0, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 4, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 4, 0, 2, 0, 0, 3, 0, 1, 5, 2, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = len(saveChr(i2).capitalize()) \\l int(08.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 3, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 1, 0, 6, 0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s0[saveOrd(in1):]:{:\\nres0 = s1[i0:len(in0)] not in s0[int(0.0):abs(( i2 + int(7.0) ))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1], [5, 7, 5], [1, 2], [0], [0, 0], [0, 0, 0], [1, 3, 2], [1, 0, 2], [], [0, 2, 2, 5], [], [], [0], [1, 0, 2], [4], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 7, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [1, 0, 1], [], [0, 0], [], [], [1], [3], [1], [0], [], [], [], [], [], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 9, 0, 9, 5, 8, 3, 4, 9, 2, 1, 7, 3, 4, 6, 6], [0, 1, 2, 2, 1, 0, 1, 1], [1, 0], [3, 2, 2, 3, 1, 1, 3, 1, 2, 0, 2, 0, 3, 1, 1, 2, 3, 3, 1, 3, 1, 2, 0, 3, 1, 0, 2, 1, 1, 0, 2, 1, 0], [1, 1, 1, 0, 1, 1, 0, 0], [0, 0, 4, 1, 1, 3, 2, 2], [1, 0, 0, 0], [1, 1, 0, 0, 0], [4, 5], [], [], [0, 4, 3, 3, 4, 0, 4], [0, 1, 1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 16, 16, 8, 2, 33, 8, 8, 4, 5, 2, 0, 0, 7, 3, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= min(mod(mod(min(int(0.0), int(90.0)),saveOrd(in1)),int(9.0)), divInt(i1,( i2 + max(int(5.0), int(8.0)) )))\\nb1 = divInt(max(len(getCharFromString(((saveChr(int(3.0)) + in2) + saveChr(abs(int(492.0)))), divInt(i2,abs(int(173.0))))), i1),( int(4.0) + int(6.0) )) \\ge i0\\ni1 = ( int(6.0) + i1 )\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2, 0, 1, 0, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 2, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 1, 3, 0, 1, 0, 2, 1, 2, 0, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 1, 2, 1, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 16, 16, 16, 1, 57, 18, 9, 8, 10, 6, 1, 0, 15, 3, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(getCharFromString((in2 + in1), max(i0, int(1.0)))):] not in in1[abs(mod(i2,int(7.0))):]:{:\\nb0 = ( mod(int(5.0),max(i2, ( divInt(( len(in0[i0:divInt(( ( i1 + divInt(( divInt(int(7.0),i2) + mod(min(int(4.0), i1),int(1.0)) ),int(7.0)) ) * i2 ),i0)]) - ( int(7.0) + max(int(9.0), abs(i0)) ) ),( ( divInt(int(8.0),int(5.0)) * int(0.0) ) - max(i1, int(4.0)) )) - i2 ))) != divInt(int(8.0),mod(i0,i1)) or ( saveChr(i0).endswith((\"\"R\"\" + s0.rstrip())) and True ) )\\n:}else:{:\\ni2 = int(59.0)\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [5], [1], [0], [], [], [], [], [], [1, 1], [0, 1], [0], [], [0, 1], [], [], [1], [], [3, 3], [], [], [4, 2, 0], [2], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = i0 != int(0.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[i1:]) != int(0.0) or True ) and in0 == \"\"R\"\" )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [2, 0, 0, 3, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 9, 0, 40, 11, 10, 6, 5, 7, 1, 1, 15, 3, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = (in1 + in0) not in getCharFromString(s0[abs(i1):int(0.0)], abs(mod(i1,int(7.0))))[mod(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len(saveChr(min(i0, ( max(( int(2.0) + i2 ), divInt(abs(int(1.0)),i1)) * int(7.0) )))) - int(7.0) )) + i1 ))):( divInt(int(9.0),max(int(8.0), saveOrd((\"\"R\"\" + in1.rstrip())))) * i2 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 0, 1, 1], [0, 9, 6, 1, 3], [0, 1, 0, 2, 1], [1, 1], [2, 1, 2, 2, 0, 0, 0, 3, 2, 1, 1, 3, 1], [1, 1, 0, 0], [0, 2], [1, 1, 0, 1], [0, 1], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 2, 13, 4, 2, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= divInt(int(0.0),mod(( i1 - i0 ),i2))\\ni1 += min(( int(9.0) - int(61.0) ), abs(int(3.0)))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 1, 8, 5, 0, 4, 1, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 2, 1, 3, 0, 2, 1, 1, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 0, 2, 1, 1, 2, 3, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 0], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [], [0], [2, 0, 4, 3, 0, 0, 4, 0, 2, 0, 1, 3, 1, 4, 0, 1, 0], [0, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 6, 0, 3, 0, 0, 6, 0, 1, 10, 2, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString((in1 + in1), max(i0, int(17.0)))):]:{:\\nb0 = s2.rstrip() not in s0[abs(int(5.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1, 1], [1, 1, 0], [], [1, 1, 0], [], [0], [], [], [0, 2, 1], [5], [0, 2], [0], [], [0], [], [], [], [1, 1, 1], [7, 0, 6], [1, 0, 2, 0, 1, 1, 0], [0, 1], [0, 0, 3, 2, 2, 2, 2, 2, 1, 0, 0, 1, 3, 0, 0, 0], [1, 0, 1, 0, 1], [2, 0], [2, 0], [1, 0, 0], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = i0\\ni2 *= i0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [1, 2, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [0], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 3, 4, 3], [1], [0], [2, 0, 0, 3, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2[len(in1):]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 3, 2, 0, 0, 4, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 33, 9, 8, 7, 2, 6, 1, 1, 15, 4, 1, 3, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString((in2[len(in1):] + saveChr(len(in1))), i1)[int(0.0):]:{:\\nres0 = in0[abs(( i1 + int(7.0) )):divInt(int(5.0),min(i1, ( mod(( int(7.0) + i1 ),( len((\"\"R\"\" + saveChr(min(i0, ( max(( int(7.0) * i2 ), ( abs(int(1.0)) - i1 )) + int(7.0) )))).rstrip()) * int(7.0) )) - i1 )))] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 2, 2, 0, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 0, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 2, 0, 4], [1], [0], [0, 0, 0, 2, 0, 0, 2, 4, 4, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2:{:\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [0, 0], [], [1, 2], [], [0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [6, 1], [0, 2], [1], [3, 0, 1, 1], [], [0], [1], [], [2, 3], [], [], [2, 0], [], [], [1], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 -= min(i2, int(6.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [0, 1], [0, 0], [0], [2, 0], [0], [0, 0], [], [], [0, 2], [2], [2, 0], [], [5], [1], [], [0], [], [1, 0, 1], [4, 4, 3], [2, 0, 2, 1, 0], [], [1], [], [], [], [], [2, 0, 0], [], [0], [4, 0, 0], [1], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = saveChr(int(4.0))\\nb0 = s0.endswith(s0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 0, 13, 2, 3, 0, 2, 5, 0, 1, 11, 2, 0, 5, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(in1[len(in1):int(0.0)][int(7.0):]):]:{:\\nres0 = in0[:i0].capitalize()[mod(i2,int(5.0)):mod(int(7.0),abs(i2))] not in saveChr(i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s1[abs(len(in2)):] not in in1[i0:]\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [1], [], [1], [], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [0, 1], [2, 1], [0, 2, 1, 0], [0], [2, 3, 3, 0, 1, 2], [1], [4, 2], [1], [1], [5], [], [], [2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [], [], [2], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 5, 1, 2, 0, 1, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = mod(saveOrd(in2[abs(i2):]),int(21.0))\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1, 1], [1, 0], [0, 0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 1, 4, 2, 2, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( ( len(s0[:len(in2)]) != i1 or True ) and in1[int(0.0):] not in in1 ):{:\\nres0 = True\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 4, 4], [1], [0], [3, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 6, 0, 1, 8, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in0 + in1):{:\\nin1 = getCharFromString(in0, len(in1[i0:i2]))[int(0.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 4, 1, 7, 2, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0, 1, 0], [0, 1, 1], [3, 3, 0, 2, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 0, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 2, 2, 3, 1, 0, 1, 1, 2, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 1, 1, 3, 2, 0, 2, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 14, 14, 14, 0, 60, 21, 11, 12, 9, 5, 0, 1, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in1):]:{:\\nres0 = max(i0, mod(abs(( i2 + int(9.0) )),( int(7.0) + min(i2, ( mod(i0,len((in1 + in0))) * i1 )) ))) != divInt(min(( i2 - ( divInt(( int(5.0) + divInt(divInt(max(int(7.0), i1),int(4.0)),int(1.0)) ),( i2 * ( int(7.0) - abs(int(2.0)) ) )) - max(i0, ( ( mod(int(9.0),int(8.0)) * divInt(int(5.0),i0) ) + int(0.0) )) ) ), divInt(abs(int(4.0)),int(8.0))),min(( i2 + ( i0 - i1 ) ), i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1], [1, 0], [0], [2], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [], [5, 0, 1, 1], [], [0], [0, 0], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 6, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = s0\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 31, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[abs(len(in1)):i0]:{:\\nres0 = in1[i2:] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1], [0], [], [1], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 1], [1], [0], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "fitness": 31, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = int(2.0)\\n", "other_info": {}, "test_fitness": 317}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 7, 9, 6, 8, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 3, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 3, 3, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 1, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 32, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 49, 15, 9, 8, 7, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = in1[saveOrd(in0):] not in s0[divInt(int(0.0),i0):( i2 + int(7.0) )].capitalize()[( min(int(7.0), i2) + i0 ):mod(divInt(int(9.0),i1),divInt(min(( i2 * ( max(min(max(i1, divInt(( int(6.0) - i2 ),int(8.0))), int(7.0)), i0) + i0 ) ), divInt(int(7.0),abs(int(9.0)))),max(i0, mod(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i0 ) ),int(4.0)))))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 330}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 3, 1, 0, 0, 3, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 4, 1, 2, 1], [0, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 34, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 12, 2, 3, 2, 0, 6, 0, 1, 10, 1, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[( ( int(0.0) + saveOrd(in0) ) - int(7.0) ):] not in s0[i2:i2].capitalize()[min(int(5.0), i1):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 346}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 34, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 5, 0, 2, 0, 0, 4, 0, 1, 6, 1, 1, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[min(abs(i0), int(7.0)):]:{:\\nres0 = in1 not in in1.rstrip()[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 327}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [1, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 34, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 2, 2, 1, 0, 4, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = ( ( saveOrd(in1) != i1 or True ) and in1[int(7.0):].endswith(in0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 295}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 4, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 0, 0, 1, 3, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 35, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[abs(len(in1)):]:{:\\nres0 = getCharFromString(in1, i0).startswith(in2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 325}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 9, 7, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 0, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 4, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 36, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 12, 0, 34, 8, 7, 3, 5, 4, 1, 1, 11, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 26, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[abs(len(in1[i0:int(09.0)][min(mod(i2,int(7.0)), divInt(i2,min(i2, ( i2 + int(7.0) )))):])):]:{:\\nres0 = in1 not in getCharFromString(saveChr(int(2.0))[:i2], divInt(saveOrd(\"\"R\"\"),divInt(i2,divInt(i2,( int(5.0) + i0 )))))[( min(int(5.0), i0) * max(int(5.0), i0) ):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 547}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 3, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 4, 0, 4], [], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 36, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 5, 1, 2, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(int(0.0)):]:{:\\nres0 = in1 not in in1[divInt(int(6.0),len(in1)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 403}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [1, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 2, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 36, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 1, 0, 0, 4, 1, 1, 7, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[int(8.0):]:{:\\nres0 = in1 == getCharFromString(in1, len(\"\"R\"\"))[i0:]\\ni2 = int(4.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 346}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 2], [], [0, 0], [], [], [3, 2, 3], [], [2], [], [4], [], [], [], [], [], [], [1, 2, 1, 1, 2, 1], [0], [2, 2, 0, 0, 2, 0, 0], [0, 1, 1], [4], [0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 0, 4], [1], [], [0, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [], [0], [17], [], [], []], "fitness": 37, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0.startswith(in0)\\ns0 = in1\\n", "other_info": {}, "test_fitness": 296}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [2, 2, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 2, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 38, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 3, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[abs(abs(i0)):].startswith((in2 + in1)[int(1.0):])\\n", "other_info": {}, "test_fitness": 318}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 7, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [1, 3, 3, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 39, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(7.0):]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 584}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [0, 1, 0, 0, 0, 0, 1, 0], [3, 0, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 40, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 3, 0, 1, 0, 0, 3, 0, 0, 6, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[saveOrd(s0):] not in getCharFromString(in0, int(07.0))[i2:]\\n", "other_info": {}, "test_fitness": 557}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 40, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 13, 4, 3, 1, 3, 5, 0, 1, 8, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len(in0[mod(int(07.0),i0):])) in saveChr(mod(( int(1.0) + divInt(int(7.0),abs(i0)) ),i2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 332}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [], [17], [], [], [20]], "fitness": 41, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 5, 1, 1, 0, 1, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[int(0.0):mod(int(7.0),i0)] in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 339}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [2, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 42, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 1, 0, 0, 4, 0, 1, 5, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(int(0.0)):]:{:\\nres0 = in1.endswith(getCharFromString(in1, i0))\\ni2 = int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 359}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 1, 0, 1, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 42, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 3, 0, 12, 2, 3, 0, 2, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[mod(int(07.0),i2):]:{:\\nres0 = in0 not in getCharFromString(in1, int(5.0))[:saveOrd(in0[mod(i2,int(7.0)):max(int(0.0), abs(i2))])]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 569}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 5, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 1, 0, 1, 3, 2, 0, 1, 0, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [0, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 1, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 42, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 2, 0, 8, 2, 1, 0, 2, 5, 0, 1, 8, 1, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[divInt(int(07.0),i2):]:{:\\nres0 = in0 not in getCharFromString(in1, int(5.0))[saveOrd(s1[mod(i2,int(7.0)):]):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 574}, {"genotype": [[0], [1, 1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 0, 3, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 4, 0, 2, 2, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 2, 3], [1, 0], [2, 2, 0, 0, 1], [], [17], [], [], [20]], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 0, 8, 0, 3, 0, 0, 4, 0, 0, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = getCharFromString(s0, len(in2[len(in1.capitalize()[i0:i2]):i2][abs(i0):]))[int(5.0):].startswith(in1)\\n", "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [1, 1, 1], [0, 1], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0, 1, 0], [0, 0], [2, 5], [3, 3, 1, 3, 0], [1, 0, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 1, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 3, 2, 2, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 3, 1, 3, 3, 1, 3, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 3, 2, 2, 2, 0, 1, 2, 1, 2, 2, 1, 4, 4, 2, 1, 2], [0, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 3], [1], [0], [2, 0, 2, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 18, 18, 10, 0, 59, 15, 17, 11, 4, 4, 1, 0, 10, 0, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( min(len(s0[i2:int(0.0)]), abs(mod(i1,int(7.0)))) != int(5.0) or True ) and in0[int(7.0):abs(i1)][mod(( ( int(8.0) + i1 ) + ( abs(min(i0, ( ( ( int(1.0) * i2 ) - divInt(max(int(7.0), i1),int(7.0)) ) + int(9.0) ))) * abs(( ( max(abs(int(1.0)), abs(i1)) + divInt(( ( int(5.0) - int(0.0) ) * ( int(4.0) + i2 ) ),int(8.0)) ) + max(saveOrd(in1), saveOrd(\"\"R\"\"[int(59.0):])) )) ) ),abs(max(int(9.0), abs(i2)))):] == in1[:int(2.0)] )\\n", "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [1], [1], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 4, 2, 4, 0, 0, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 43, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 12, 2, 5, 1, 1, 3, 1, 0, 11, 4, 1, 2, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (s0 + getCharFromString(saveChr(len(in2))[len(in1):], abs(i0))) not in \"\"R\"\"[min(mod(int(0.0),int(7.0)), ( int(5.0) + len(saveChr(i1)) )):].rstrip()\\n", "other_info": {}, "test_fitness": 333}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 4, 0, 3, 4, 1], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1], [0, 5, 2, 4, 3, 4, 4], [1], [0], [2, 0, 0, 0, 2, 0, 4, 4, 2, 0, 4, 0, 1, 4, 1, 1, 0], [3, 2, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 0, 0, 6, 0, 1, 10, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):]:{:\\nres0 = in1 not in in0[len(in1[i0:i2].capitalize().rstrip()):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 9, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 3, 1, 0, 0, 1, 2, 1, 0, 3, 3, 2, 1, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 0, 3, 4, 0, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 45, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = in1[int(0.0):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 548}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 2, 1, 3, 2, 2, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 4, 0, 2, 0, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 1, 0, 1], [0], [17], [], [], [20]], "fitness": 46, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 8, 0, 38, 13, 8, 5, 8, 5, 1, 1, 9, 2, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1.capitalize() not in in1[mod(mod(int(07.0),len(saveChr(( divInt(int(1.0),divInt(int(7.0),abs(i0))) + i0 )))),divInt(( int(6.0) + i2 ),( min(divInt(i0,( len(in0) * mod(min(i1, divInt(max(int(1.0), i2),int(7.0))),int(7.0)) )), i1) - i2 ))):( int(9.0) + abs(int(8.0)) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 611}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 3, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 1, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [1, 2, 2, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [], [0], [0, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 47, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 6, 0, 4, 0, 0, 5, 0, 1, 6, 1, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1 not in getCharFromString(in1[max(abs(i0), int(0.0)):], abs(saveOrd(in0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 630}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [0, 3, 0, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i2\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [2, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 5, 1, 1, 0, 1, 4, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(abs(i0),int(0.0)):]:{:\\nres0 = in1 not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = i2\\n", "other_info": {}, "test_fitness": 651}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 3, 3, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 1, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 49, 14, 10, 7, 7, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):len(in1[abs(min(i0, mod(i2,int(7.0)))):])]:{:\\nres0 = in0 not in \"\"R\"\"[len(getCharFromString(saveChr(int(7.0)), min(i2, divInt(( divInt(int(5.0),i0) + ( max(( i1 + ( i2 - ( int(2.0) - i1 ) ) ), divInt(min(int(2.0), i2),int(5.0))) + int(7.0) ) ),i0)))):][i0:( int(5.0) * max(int(9.0), min(i0, divInt(divInt(mod(int(8.0),int(5.0)),( int(0.0) - i1 )),int(4.0)))) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [1, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1 not in in1[len(in0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 676}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [3, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 48, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in0[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 617}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 1, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [1, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 2, 1, 7, 0, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[:len(in1)]:{:\\nres0 = in1[len(\"\"R\"\"):] not in \"\";\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [0, 0, 3, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 3, 1, 1, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = in1 not in \"\"R\"\"[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 0, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 2, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 34, 10, 8, 3, 7, 5, 1, 1, 11, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = in2[:len(in1)] not in s0[mod(int(0.0),i2):mod(i2,int(7.0))].capitalize()[divInt(int(5.0),abs(min(i2, divInt(divInt(int(7.0),i0),divInt(len(saveChr(( i1 + ( min(mod(max(i2, ( abs(int(6.0)) + i1 )),int(1.0)), int(7.0)) * i2 ) ))),i0))))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 2, 2, 0, 0], [0, 1, 1], [1, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 0, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1 not in in1[len(s0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [0, 4, 0, 1, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 4, 1, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = in1.capitalize() not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 4, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 11, 3, 1, 1, 2, 4, 0, 1, 8, 2, 0, 3, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2.capitalize()[i0:]:{:\\nres0 = in1[len(s2):] not in saveChr(divInt(int(0.0),i2))[mod(i2,int(7.0)):( int(5.0) + int(7.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 1, 1, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0, 1, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(int(0.0)):]:{:\\nres0 = in1 not in in1[int(7.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 2, 1, 2, 0, 0, 2, 2, 1], [1, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 0, 0, 1, 0, 2, 0, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 1, 0, 3, 0, 3, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [0, 0, 0, 4, 0, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [1, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 4, 0, 2, 1, 0, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = abs(len(in1)) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += int(08.0)\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 7, 0, 3, 0, 0, 4, 0, 1, 8, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[:abs(len(in1[i0:].rstrip()))]:{:\\nres0 = in1 not in saveChr(int(9.0))[abs(int(7.0)):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 0, 2, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 2, 1, 0, 0, 2, 1, 3, 1, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1, 2, 1, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 1, 0, 1, 2, 1, 0, 3], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 16, 12, 0, 55, 17, 11, 7, 10, 6, 0, 1, 11, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1)]:{:\\nres0 = in1[len(in0):].endswith(s0[mod(int(0.0),i0):mod(i2,abs(( int(7.0) * min(i2, i0) )))].capitalize()[divInt(divInt(int(5.0),i1),divInt(max(( i2 + ( min(divInt(max(i1, ( abs(int(7.0)) * i0 )),mod(int(6.0),i2)), i0) - divInt(int(1.0),max(int(7.0), min(len(saveChr(( ( ( int(7.0) + int(9.0) ) * mod(int(8.0),i0) ) - int(5.0) ))), int(0.0)))) ) ), int(4.0)),divInt(int(8.0),int(59.0)))):i1])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 4, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [2, 1, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 0, 4, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 49, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 0, 1, 3, 1, 1, 5, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[abs(max(i0, int(0.0))):]:{:\\nres0 = in1 not in \"\"R\"\"[abs(mod(i2,int(4.0))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 655}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 3, 3, 3, 2, 3, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 2, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 1, 1, 0, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 50, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 11, 3, 3, 1, 2, 6, 0, 1, 10, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] in saveChr(mod(i0,len(s0[divInt(i2,int(7.0)):( int(7.0) + i0 )]))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 572}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 2, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 2, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 34, 9, 7, 5, 4, 4, 1, 1, 14, 5, 2, 4, 1, 1, 0, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[abs(len(saveChr(i0)[i0:].rstrip())):]:{:\\nres0 = in1 not in in1[mod(int(0.0),i2):int(7.0)].lstrip()[( int(1.0) + abs(i0) ):( divInt(( int(7.0) + i1 ),divInt(min(( i2 * len((\"\"R\"\" + saveChr(max(( int(2.0) - i1 ), divInt(max(int(1.0), i2),int(7.0))))).capitalize()) ), int(7.0)),i0)) + i0 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 659}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 3, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 2, 3, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 1, 2, 0, 3, 0, 1, 2, 1], [], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2:{:\\nres0 = in0 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 484}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 51, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 2, 0, 4, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( len(s0[i0:]) != i2 or True ) and in2 not in in1[int(0.0):] )\\n", "other_info": {}, "test_fitness": 570}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 3, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 53, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 8, 0, 33, 9, 8, 5, 4, 7, 1, 1, 15, 2, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = (in1 + in0[len(s0[i1:]):int(4.0)])[abs(mod(i1,int(7.0))):] not in getCharFromString((\"\"R\"\" + saveChr(mod(int(5.0),min(i1, ( divInt(( int(7.0) + i1 ),( len(in1) + min(i0, ( max(( int(2.0) * i2 ), divInt(abs(int(1.0)),i1)) - int(7.0) )) )) + int(7.0) ))))), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 53, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 4, 0, 12, 2, 3, 0, 2, 3, 0, 1, 5, 1, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString(in1[i0:], i2)):]:{:\\nres0 = int(0.0) != max(mod(i2,int(7.0)), mod(int(5.0),abs(i0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 659}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 2, 0, 2, 3, 1, 0, 0, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [4, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 54, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 2, 0, 1, 5, 1, 1, 7, 1, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in0, len(in1)):{:\\nres0 = in1[divInt(i0,len(in0)):] not in \"\"R\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 688}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 54, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[i1:]:{:\\nres0 = in1 not in in1[len(in0):]\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 688}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [0, 3, 0, 0, 3, 2, 0, 1, 2, 1, 1, 1, 2, 0, 3, 1, 3, 2, 0, 2, 0, 3, 1, 2, 1, 0, 3, 3, 0, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 0, 0, 3, 2, 1, 1, 0, 1, 3, 0], [0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 0, 12, 2, 2, 1, 1, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[i0:]:{:\\nres0 = getCharFromString(in0[len(in1):], i2).endswith(saveChr(i2)[len(in0[divInt(i0,int(0.0)):( int(7.0) + int(5.0) )]):int(7.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 1, 0, 1, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 8, 0, 33, 10, 6, 4, 6, 6, 1, 1, 15, 3, 1, 5, 1, 1, 0, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in1):mod(int(0.0),i0)][mod(i2,int(7.0)):]):]:{:\\nres0 = in0[:( int(5.0) + int(7.0) )].capitalize()[i2:int(6.0)] not in (\"\"R\"\" + saveChr(divInt(divInt(int(1.0),i0),divInt(abs(( i1 + ( min(divInt(len(s0),i2), ( min(int(7.0), i1) * int(7.0) )) - int(9.0) ) )),i2)))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [1, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 3, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in0 not in in1[len(in2):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 1, 3, 0, 4], [1], [0], [2, 0, 3, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 55, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 0, 6, 0, 2, 0, 0, 6, 0, 1, 10, 1, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(int(0.0), i0):]:{:\\nres0 = (in0[i2:] + s1) not in in0.rstrip()[len(s0):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 691}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2, 2, 0, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 2, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 12, 1, 51, 16, 10, 10, 6, 7, 1, 1, 15, 2, 0, 5, 1, 1, 0, 0, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(in1):i0][int(0.0):]):]:{:\\nres0 = in0[abs(( i1 + int(7.0) )):] not in s0[:mod(int(5.0),saveOrd(getCharFromString((\"\"R\"\" + saveChr(i1)), ( mod(( int(7.0) + i1 ),( len(in1) * min(i0, ( max(( int(2.0) * i2 ), divInt(abs(int(1.0)),i1)) + ( int(7.0) * i1 ) )) )) - divInt(divInt(int(5.0),max(int(9.0), max(i2, ( ( ( int(8.0) - int(5.0) ) * divInt(int(0.0),i2) ) + int(4.0) )))),i0) ))))]\\ni2 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 741}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 1, 1], [1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 0, 2, 2, 1, 3, 2, 3, 2, 0, 3, 1, 2, 1, 0, 3, 3, 1, 1, 1, 2, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 4, 0, 1, 2, 1, 1, 0, 1, 3, 0], [0, 0, 1, 1, 1, 2, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [0], [0], [3, 0, 0, 4, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 4, 1, 8, 1, 3, 1, 1, 6, 0, 1, 10, 2, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nres0 = getCharFromString(in1, len(in0)) not in saveChr(len(s0[i0:]))[i2:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 += abs(divInt(i0,int(0.0)))\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [3, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 1, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 8, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = (in1 + s0) not in in0[max(i0, int(3.0)):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 4, 4, 4, 3, 0, 4], [], [0], [2, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 8, 0, 3, 0, 0, 4, 0, 1, 8, 2, 1, 3, 0, 0, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in1[abs(len(in1[i0:i2].rstrip())):]:{:\\nres0 = in1 not in saveChr(abs(int(2.0)))[i2:int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 667}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 1, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [2], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 57, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0[len(s1):] not in in1\\n", "other_info": {}, "test_fitness": 604}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 1, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 2, 4, 4], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 4, 4, 0, 1, 0], [3, 3, 3, 0], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 4, 0, 13, 3, 4, 2, 1, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[:max(abs(mod(i0,saveOrd(in1))), ( i2 + int(1.0) ))]:{:\\nres0 = ( int(7.0) - saveOrd(in1[i0:]) ) != i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 10, 0, 34, 8, 8, 5, 3, 5, 0, 1, 11, 2, 1, 5, 0, 0, 0, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[min(len(in1), i0):]:{:\\nres0 = in1[i2:].startswith(in0[:abs(int(0.0))].rstrip()[i2:int(7.0)][mod(int(1.0),min(i0, ( ( divInt(int(7.0),i1) + ( len(saveChr(divInt(i2,max(max(( int(2.0) + i1 ), ( abs(int(1.0)) * i2 )), int(7.0))))) - int(7.0) ) ) + i0 ))):i0])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 2, 3, 0, 4], [1], [0], [2, 3, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 3, 0, 12, 2, 4, 1, 1, 6, 0, 1, 10, 0, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1[len(s2):])[len(in0[i0:int(07.0)]):]:{:\\nres0 = abs(( i1 + int(5.0) )) != mod(int(7.0),saveOrd(s0[i1:]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 671}, {"genotype": [[0], [1, 0, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [4, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 4, 1, 3, 0, 4], [1], [0], [3, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (s1 + in2) not in in1[saveOrd(s1):]\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 5, 4, 3, 0, 4], [1], [0], [0, 0, 0, 2, 4, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 5, 1, 2, 1, 0, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2:{:\\nres0 = len(in2) != abs(( int(0.0) + i0 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [1, 3, 3, 1, 0, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 2, 0, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 5, 0, 1, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[int(0.0):]:{:\\nres0 = in1.endswith(s1[len(in0):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 1], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 3, 2, 1, 3, 1, 3, 3, 1, 1, 3, 2, 3, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 2, 0, 3, 0, 1, 2, 1, 1, 0, 3, 2, 2, 3, 4], [0, 2, 2, 0, 1, 0, 1, 2, 2, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 20, 20, 12, 0, 64, 18, 16, 10, 8, 7, 1, 1, 15, 3, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[min(int(07.0), i2):]:{:\\nres0 = in0 not in getCharFromString(in1, int(5.0))[max(( i2 + int(7.0) ), abs(min(len(in0[i2:mod(( mod(min(i0, ( max(divInt(i1,( ( divInt(int(4.0),i2) * ( abs(int(1.0)) * i1 ) ) + int(7.0) )), int(7.0)) - i2 )),i0) + divInt(int(9.0),max(int(8.0), max(i0, divInt(( ( int(5.0) - int(0.0) ) * ( int(4.0) * i2 ) ),int(8.0))))) ),mod(i1,min(divInt(int(59.0),len(s0[int(9.0):abs(abs(int(2.0)))])), int(2.0))))]), len(saveChr(( saveOrd((\"\"R\"\" + in1.rstrip())) - int(1.0) )))))):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 2, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 0, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 5, 0, 2, 3, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 1, 1, 7, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s0):]:{:\\nres0 = ( ( \"\"R\"\".endswith(in1) or True ) or in0.endswith(s0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 4, 4, 8, 5, 3, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 2, 2], [0, 1, 1], [3, 3, 0, 1, 1, 2, 0, 1, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 0, 0, 2, 3, 0, 0, 1, 1, 3, 0, 2, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [5, 5, 3, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 1, 2, 0, 1, 5, 1, 1, 10, 1, 1, 4, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(\"\"R\"\"):]:{:\\nres0 = in0[:len(in1)].startswith(in0[i2:int(0.0)].rstrip()[int(7.0):mod(i2,int(5.0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 7, 1, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 2, 0, 3, 1, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 58, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 6, 0, 3, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[abs(len(\"\"R\"\")):]:{:\\nres0 = in1[i0:i2] != in1\\ni2 = abs(int(4.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 670}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [2, 0], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 0, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 60, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1):]:{:\\nin2 = in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = s0 not in \"\"R\"\"\\n", "other_info": {}, "test_fitness": 654}, {"genotype": [[0], [1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [1, 1, 0, 0, 3, 2, 0, 3, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 3, 3, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 61, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 4, 0, 1, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[int(0.0):]:{:\\nres0 = in0 not in in1[:int(7.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 689}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 1, 1, 0, 3, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 2, 0, 4], [1], [0], [2, 0, 4, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 63, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 3, 0, 11, 2, 2, 0, 2, 5, 0, 1, 10, 2, 0, 4, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in0[len(in1[len(in1):].capitalize()):]:{:\\nres0 = saveChr(mod(int(1.0),i0))[mod(i2,int(7.0)):int(5.0)] not in s2[int(7.0):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 704}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1, 2, 2, 2], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 2, 1, 1, 2, 2, 1, 1, 0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 1, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [3, 0, 0, 2, 3, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 64, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 18, 15, 1, 59, 20, 8, 8, 12, 6, 1, 1, 14, 2, 0, 3, 1, 1, 0, 0, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nres0 = (in1 + in0[min(i0, i2):])[int(0.0):] not in s0[max(mod(i2,int(7.0)), mod(int(5.0),abs(i0))):( divInt(divInt(min(i1, divInt(len(getCharFromString((\"\"R\"\" + saveChr(divInt(i2,( mod(( int(7.0) + i1 ),( min(int(4.0), i2) + int(1.0) )) * int(7.0) )))), i0)),i0)),( int(7.0) - max(int(9.0), abs(i1)) )),( divInt(divInt(int(8.0),int(5.0)),( int(0.0) + i1 )) * int(4.0) )) - divInt(i2,divInt(int(8.0),int(59.0))) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = ( divInt(int(9.0),int(2.0)) - i2 )\\n", "other_info": {}, "test_fitness": 682}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 9, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 1, 0, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 5, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 0, 1], [0], [5], [], [], [20]], "fitness": 68, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in1[len(in2):] not in in1[len(in1):]\\n", "other_info": {}, "test_fitness": 624}, {"genotype": [[0], [0, 1, 0, 0, 1], [0, 0, 0, 1, 1], [1, 2], [0, 1, 2, 1], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 3, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 1, 4, 5], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 7, 0, 3, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = min(len(s0[i0:]), int(0.0)) != abs(int(7.0))\\ni1 = i2\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [1, 1, 0], [], [0, 0], [], [], [3], [], [2], [], [4], [], [], [], [], [1], [9, 7, 7], [2, 2, 2], [1, 0], [0, 1], [], [], [2, 2], [], [2, 0], [], [], [0, 0], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i2\\ni2 = int(9.0)\\nres0 = s2.startswith(s0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 0], [], [0, 0], [], [], [0, 3], [1], [1, 0, 1, 0, 2, 0], [0], [], [1], [], [0], [], [], [], [1, 2, 1], [0], [0, 2, 0, 0], [0], [4], [2], [], [1, 2], [], [], [0], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 0, 0, 0, 3, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 11, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = i1 \\g ( i2 * i1 )\\nres0 = True\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [0, 0, 0], [0, 1, 1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 1, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 2, 3, 2, 0, 1, 1, 0, 0, 4, 4, 3, 0, 8, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( i0 \\l int(07.0) or divInt(int(2.0),i2) \\l mod(i2,int(1.0)) )\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [1, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 0, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1, 2, 1], [1, 0], [0, 0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [2, 3, 0, 0, 3, 2, 0, 1, 0, 1, 3, 1, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [24], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 6, 0, 1, 5, 2, 2, 0, 0, 0, 2, 0, 4, 1, 1, 1, 0, 3, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( ( True or not in1[( len(in2) + i0 ):].startswith(in1[i2:]) ) and True )\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[len(in2):].endswith(in1[len(in1):])\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 1, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 2, 4, 3, 0, 1, 2, 1], [0], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 1, 4], [1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 1, 3, 3, 4, 1, 9, 0, 3, 0, 0, 3, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif len(s0[max(i0, int(0.0)):]) != abs(int(7.0)):{:\\nres0 = ( i1 \\l int(5.0) or ( in2 not in in1 and True ) )\\n:}\\ni2 = i2\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 0, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [1, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 3, 2, 1, 1, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 2, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 0, 0], [], [1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = \"\"R\"\"[int(0.0):].endswith(s0)\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 1, 2, 1, 0, 7, 1, 8, 5, 8, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 0, 0, 1, 1, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 1, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 4, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 2, 4, 4, 3, 0, 4], [1], [0], [2, 0, 4, 2, 1, 0, 2, 4, 2, 4, 4, 3, 1, 1, 1, 1, 0], [0, 1, 3, 2], [1, 0], [1, 1, 0, 2, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 1, 0, 0, 2, 1, 0, 6, 1, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2[:saveOrd(getCharFromString(\"\"R\"\"[:i0], i2))] in s2\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [3], [0], [1], [0], [], [], [], [], [], [0, 1, 0, 0, 0, 0, 1], [6, 0, 2, 7, 0, 4, 2], [1, 0], [1], [1, 1, 0], [], [], [1], [], [], [1], [], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [], [], [], [], [], [], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 7, 7, 2, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = int(60.0) \\l int(27042.0)\\ni1 -= i0\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [0, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[:len(in2)].startswith(in1[len(in1):])\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [2, 0], [2], [0], [0], [0], [], [], [3], [3, 5], [0, 1, 1], [0, 0], [], [2], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 4, 3, 2, 7, 4, 8, 2, 4, 4, 0, 4], [0, 2, 1, 0, 0, 1, 1, 1, 0, 2, 2, 0, 1, 1, 2, 2, 0, 0, 1, 0], [1], [3, 0, 2, 2, 1, 2, 0, 1, 3, 3, 2, 3, 1, 3, 3, 1, 0, 0, 1, 2, 0, 2, 2, 0, 2, 2, 3, 0, 3, 2, 3, 0, 1, 3, 1, 3, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 2, 0, 3, 1, 1, 2, 1, 0, 2, 0, 0, 3, 0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [3, 3, 1, 0, 3, 0, 1, 2, 1, 0, 1, 4, 0, 1, 2], [2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [3, 1, 3, 4], [1], [], [2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [0, 2], [1, 1, 1], [1], [], [24], [], []], "fitness": 69, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 2, 3, 2, 0, 1, 0, 0, 0, 12, 12, 20, 0, 68, 21, 15, 10, 11, 4, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not len(in0[:i0]) \\ge mod(divInt(int(9.0),mod(i2,int(4.0))),len(s1)):{:\\nres0 = max(( min(int(3.0), len(in0[:min(int(2.0), i1)])) * i0 ), int(7.0)) != ( i0 + ( divInt(i1,( ( max(i1, abs(( max(i1, int(4.0)) - min(int(8.0), max(saveOrd(in1), divInt(i0,i2))) ))) + ( int(2.0) * min(( mod(( i2 - divInt(i0,i1) ),int(4.0)) * i1 ), mod(mod(i2,divInt(i2,max(int(4.0), int(0.0)))),( int(4.0) - i0 ))) ) ) - divInt(i0,i1) )) + abs(i0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 1, 3, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [1, 0, 0, 0, 1], [0], [17], [], [], [20]], "fitness": 69, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 8, 1, 3, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = len(s0[:min(int(3.0), abs(i0))]) != ( i2 + int(7.0) )\\n", "other_info": {}, "test_fitness": 683}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 4, 2, 0, 1, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 84, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 3, 2, 1, 8, 2, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(getCharFromString(in1[len(\"\"R\"\"):], i0)):]:{:\\nres0 = \"\";\"\" not in saveChr(int(8.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 976}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [2, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 4, 2, 0, 1, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 86, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 12, 4, 2, 2, 2, 3, 2, 1, 8, 2, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[( mod(i0,int(8.0)) + len(getCharFromString(in1[( i2 + int(4.0) ):], mod(int(5.0),len(\"\"R\"\")))) ):]:{:\\nres0 = \"\";\"\" not in saveChr(i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 980}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [2, 0, 1, 2, 0, 2, 1, 2, 0, 2, 2, 1, 2, 2, 1, 1, 1, 2, 0, 1, 0, 2, 0, 2, 2, 1, 1, 2, 0], [2, 0, 0, 1, 1, 1, 1, 1, 0, 0, 2, 0, 2], [2, 0, 2, 2, 1, 2, 0, 2, 2, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [2, 2, 1, 0, 3, 2, 2, 1], [2, 5, 1, 5, 2, 2, 1], [1, 0, 2, 0, 1, 1, 2, 0, 0, 0, 0, 1, 2, 0, 2, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [5, 0, 4, 2], [0, 3, 0, 3, 2, 1, 0, 2], [1, 1], [0], [0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 8, 8, 7, 8, 0, 1, 6, 1, 7, 6, 6, 3, 1, 1, 9, 4, 5, 0, 8, 3, 5, 5, 9, 8, 2, 0, 4, 4, 1, 0, 1, 2, 3, 0, 3, 4, 9, 5, 8, 8, 9], [1, 2, 1, 1, 2, 2, 0, 0, 2, 2, 1, 1, 2, 2, 1, 2, 2, 0, 0, 0, 2, 2, 0, 1, 0, 0, 2, 1, 0, 0, 2, 0, 1, 2, 0, 1, 1, 1, 2, 2, 1, 2, 2], [0, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 3, 2, 3, 2, 2, 2, 1, 2, 1, 3, 0, 0, 0, 3, 2, 3, 1, 3, 2, 0, 0, 0, 0, 2, 3, 0, 1, 2, 0, 0, 3, 1, 0, 0, 0, 2, 1, 2, 0, 1, 2, 3, 2, 0, 3, 2, 1, 1, 1, 0, 3, 2, 0, 1, 2, 3, 1, 2, 3, 0, 1, 1, 0, 2, 1, 2, 3, 2, 0, 0, 1, 0, 0, 2, 2, 0, 1, 0, 1, 2, 2, 2, 1, 1, 3, 1, 1, 2, 1, 1, 3, 0, 1, 0, 2, 3, 2, 2, 2, 0, 3, 3, 2, 0, 0, 3, 2, 3, 1, 2, 2, 0, 2, 1, 0, 0, 1, 0, 1, 3, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1], [4, 4, 0, 2, 0, 4, 3, 1, 3, 0, 2, 0, 4, 0, 0, 2, 3, 1, 4, 2, 2, 3], [0, 1, 1, 0, 0, 1, 1, 0, 2, 2, 2, 1, 1, 0, 0, 1, 0, 2, 2], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 5, 3, 5, 5, 3, 4, 0, 2, 5, 3, 1, 1, 2, 0, 3, 4, 5, 3, 5, 1, 5, 1, 3, 4, 3, 4, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 1, 0, 2, 0, 0, 0, 1, 2, 0, 4, 1, 0, 4, 4, 0, 1, 2, 0, 2, 4, 1, 0, 2, 2, 1, 2, 1, 1, 2, 1, 4, 0, 0, 1, 1, 0, 2, 2, 1, 0], [2, 3, 0, 1, 0], [1], [1, 0, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 2, 3, 1, 0, 1, 3, 2, 2, 2, 2], [21], [14, 10, 21, 14], [2, 9, 4, 1, 4], [23, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 29, 29, 13, 16, 5, 7, 0, 0, 8, 7, 19, 7, 4, 8, 2, 1, 5, 42, 42, 43, 5, 128, 35, 22, 19, 18, 28, 12, 5, 46, 5, 1, 10, 12, 1, 4, 5, 2], "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile i1 == int(78878.0):{:\\ns2 = in2\\nb2 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in0 in in2:{:\\nin2 = in0\\nloopBreak% = 0\\nfor in1 in s0:{:\\ns2 = ((\"\"o\"\" + in2) + in0[:i2])\\nif s1.endswith(s1):{:\\ni1 = int(0.0)\\nif ( int(1.0) != i1 or saveOrd(\"\"k\"\") \\g ( saveOrd(s2[( divInt(( int(6.0) + ( int(1.0) - min(i2, i2) ) ),i0) - abs(divInt(min(int(7.0), saveOrd(\"\"2\"\".capitalize())),( i0 + i2 ))) ):i2]) + i1 ) ):{:\\nif s0 in getCharFromString(in0, ( len(\"\">\"\") - i1 )).rstrip():{:\\nin1 = in2[int(6.0):divInt(i2,i2)]\\n:}else:{:\\nif b1:{:\\nif ( not True or max(int(6.0), i1) != i2 ):{:\\nb0 = saveChr(i2)[mod(int(3.0),( i0 - int(1.0) )):mod(len(\"\"v\"\"),mod(i0,min(divInt(int(1.0),int(9.0)), int(4.0))))].startswith(in0)\\n:}else:{:\\nin2 = \"\"V\"\"[:i0][:abs(divInt(i2,int(5.0)))]\\n:}\\n:}else:{:\\ns1 = \"\"o\"\"[divInt(min(int(0.0), mod(saveOrd(\"\"-\"\"),i2)),int(8.0)):]\\n:}\\n:}\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in \"\"9\"\"[int(3.0):i0]:{:\\nres0 = b2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\ni1 += ( int(55.0) * ( min(divInt(i0,i0), int(9.0)) * i2 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = getCharFromString(s1, i1) == in0\\nloopBreak% = 0\\nfor in1 in \"\"4\"\":{:\\ni0 *= divInt(( i0 - int(8.0) ),i2)\\nloopBreak% = 0\\nwhile int(20441.0) == mod(mod(divInt(int(0.0),int(1.0)),min(int(2.0), int(3.0))),( int(0.0) - int(3.0) )):{:\\nloopBreak% = 0\\nfor in0 in \"\"1\"\":{:\\ni0 = abs(i1)\\ni2 = int(4.0)\\nloopBreak% = 0\\nwhile not i0 == ( len(in1) + mod(( ( i1 + max(saveOrd(\"\"4\"\"[:( i1 - i1 )][abs(mod(abs(int(9.0)),( ( i2 + mod(int(5.0),i2) ) * i1 ))):int(8.0)]), i2) ) * int(8.0) ),len(in0)) ):{:\\nb1 = i2 \\g int(9.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 3, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 2, 4, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0, 2], [17, 3], [], [3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 5, 0, 15, 3, 5, 2, 1, 6, 3, 1, 15, 3, 1, 4, 3, 2, 0, 1, 0], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[len(in1):] not in getCharFromString(saveChr(i0)[int(0.0):abs(( i2 + int(7.0) ))], mod(i2,saveOrd(in0)))[len((\"\"D3\"\" + s0.rstrip())):( i0 + i2 )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [2, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 5, 6, 5], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0], [0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 2, 2, 3, 3, 1, 1, 2, 2, 2, 1, 3, 2, 1, 1, 0, 0, 2, 1, 2, 1, 2, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2, 4, 2, 3, 3], [0, 1, 0, 2, 1, 0, 2, 1, 2, 0, 0, 2], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 4, 4, 3, 0, 4, 1], [1, 1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 0], [3, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0, 2], [17], [], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 22, 22, 12, 0, 74, 27, 14, 12, 15, 8, 2, 1, 18, 3, 2, 5, 2, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[:len(in1)]:{:\\nres0 = in1[len(in0[:int(2.0)].rstrip()[i0:abs(i2)][int(7.0):int(5.0)]):] not in saveChr(divInt(int(7.0),min(i0, ( ( divInt(int(7.0),i0) + ( len((\"\"R\"\" + s0.lstrip())) - mod(( min(max(( int(1.0) + i1 ), divInt(abs(int(7.0)),( int(7.0) * i2 ))), divInt(i0,mod(int(9.0),max(( abs(i0) - ( ( divInt(int(8.0),int(5.0)) + divInt(int(0.0),i1) ) * int(4.0) ) ), saveOrd(\"\"1\"\"))))) - ( divInt(mod(abs(len(in1)),int(8.0)),int(59.0)) * divInt(divInt(divInt(int(9.0),len(s1)),( int(2.0) + int(2.0) )),i0) ) ),i0) ) ) + divInt(int(5.0),divInt(int(6.0),( i0 * int(5.0) ))) ))))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [3, 0, 0, 2, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3], [1, 0], [2, 2, 0, 2, 1], [0, 0], [17, 15], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 3, 0, 11, 2, 4, 1, 1, 6, 2, 1, 16, 4, 2, 3, 2, 2, 0, 0, 0], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nb0 = getCharFromString(in1, len(saveChr(len(in0[i0:i1]))[abs(( i1 + int(0.0) )):]))[mod(int(7.0),saveOrd((\"\"R\"\" + s0.lstrip()).rstrip())):] not in \"\"P\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0], [0, 1, 1], [2, 3, 1, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0], [0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 1, 2, 0, 0, 2, 1, 2, 4, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 4, 1, 7, 1, 2, 0, 1, 4, 2, 1, 8, 0, 0, 3, 2, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[divInt(len(\"\"R\"\"),int(07.0)):]:{:\\nres0 = in1[i0:] not in in1\\ni2 = len(\"\"4\"\"[i0:i0])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0, 4], [0, 0, 1, 0, 2, 0, 1, 1, 1], [0, 0, 0, 0], [1, 5], [3, 3, 3, 3], [1, 0, 1, 1], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2, 2, 2, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 3, 1, 1, 0, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 1, 0, 1, 1, 0, 2, 1, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 2, 3, 0, 0, 2, 1, 1, 3, 0, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 5, 4, 4, 3, 0, 3], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 0], [17, 2], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 4, 9, 4, 1, 4, 4, 0, 0, 18, 18, 14, 0, 60, 16, 13, 7, 9, 7, 2, 1, 15, 3, 1, 3, 2, 2, 0, 0, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[i1:]) != int(0.0) or ( in0 not in getCharFromString(\"\"R\"\", len(s0))[mod(i1,int(7.0)):mod(int(5.0),abs(i1))] and ( ( divInt(( int(7.0) + i1 ),( len(saveChr(min(min(divInt(divInt(mod(int(8.0),i0),i2),abs(int(1.0))), max(int(7.0), int(7.0))), i1))) + ( mod(int(1.0),max(i1, len((\"\"C\"\" + in0.rstrip())))) * i2 ) )) - divInt(( ( int(8.0) + int(5.0) ) * ( int(0.0) - i2 ) ),int(4.0)) ) \\l min(min(int(8.0), i2), int(59.0)) or int(9.0) \\l i2 ) ) ) or divInt(int(2.0),i2) \\le i2 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 7, 5, 7, 8, 1, 0, 7, 9, 5, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 1, 0, 2, 1, 1, 2, 2, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 3, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 2, 0, 1, 0, 0, 0, 3], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 3, 2, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 1, 1, 3, 0, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 2, 2, 2, 1], [0], [10], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 6, 6, 4, 0, 21, 6, 5, 3, 3, 6, 1, 1, 10, 0, 0, 4, 1, 1, 0, 0, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s1[len(s1):]):][:i1]:{:\\nres0 = ( ( int(9.0) != abs(mod(int(7.0),int(5.0))) or True ) and in0[mod(int(7.0),min(i2, ( divInt(( int(8.0) + i1 ),( int(1.0) + len(\"\"K\"\") )) * i1 ))):] not in s0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 2, 0, 1, 2, 1, 1, 1, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 2, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 2, 2, 2, 3, 0, 3, 3, 0, 3, 2, 1, 1, 0, 2, 2, 0, 2, 0, 2, 2, 2, 1, 0, 0, 2, 3, 1, 0, 0, 3, 3], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1, 3, 1, 1, 0, 3, 4, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 5, 4, 2, 3, 0, 4, 1, 4, 5], [1, 1], [0], [2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0, 2], [17], [], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 17, 17, 20, 0, 81, 28, 17, 13, 15, 10, 2, 1, 17, 2, 0, 3, 2, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):saveOrd(s2)]:{:\\nres0 = ( ( i0 != abs(min(mod(( int(2.0) + ( int(7.0) + len(in0) ) ),i2), mod(( divInt(min(i2, ( max(( i0 * divInt(( divInt(int(5.0),i1) - divInt(abs(int(7.0)),i2) ),int(4.0)) ), int(1.0)) + i1 )),i2) * ( int(7.0) - max(int(7.0), len(s0)) ) ),i0))) or True ) and in1[( ( mod(int(9.0),int(8.0)) - divInt(int(5.0),i0) ) * int(0.0) ):] not in s1[i0:divInt(( mod(max(i2, max(min(i2, len(getCharFromString((\"\"R\"\" + saveChr(divInt(int(4.0),int(8.0)))), i0))), ( divInt(i1,mod(i2,( ( mod(int(59.0),i1) + i1 ) + mod(saveOrd(in1),int(9.0)) ))) - i1 ))),i0) + saveOrd(\"\"1\"\") ),saveOrd(in2))] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2, 0], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 3, 3, 0, 4], [1, 0, 0, 1, 1, 0, 0, 1], [0], [4, 0, 0, 1, 0, 4, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2, 1, 0], [1, 0], [2, 2, 0, 0, 1], [0, 3, 1, 3, 1, 2, 3, 2], [17], [22, 4], [3, 4], [20, 26, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 1, 3, 0, 0, 2, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 12, 1, 49, 15, 10, 8, 7, 6, 8, 1, 16, 6, 1, 1, 8, 1, 2, 2, 3], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in getCharFromString(in2, len(in1)):{:\\nres0 = \"\"R\"\" not in in0\\ni0 = len(saveChr(i0))\\nin0 = \"\";w[\"\"\\nb2 = ( int(8.0) != abs(mod(i2,int(4.0))) or ( saveChr(mod(int(5.0),min(i0, ( divInt(( divInt(i1,( len((\"\"e\"\" + getCharFromString(s0, ( i2 + divInt(min(max(int(7.0), i1), ( abs(int(2.0)) + i2 )),int(1.0)) )))) * int(7.0) )) - i0 ),i0) + divInt(int(7.0),max(int(1.0), abs(i1))) )))).capitalize()[mod(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i0 ) ),int(4.0)):].rstrip().endswith(\"\"3!4\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [2], [1], [], [0], [], [], [3, 2, 3], [], [2], [], [4], [3, 3, 1], [], [0], [], [1], [0], [1, 1], [1], [1, 0, 1], [0], [], [1], [0], [1, 4], [0, 1], [], [3, 0, 2, 0, 4, 1], [2], [], [2], [0, 3], [15], [], [], [12]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 1, 0, 2, 2, 0, 6, 1, 0, 1, 2, 1, 0, 0, 1], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile (s1 + in1[int(0.0):]).startswith(\"\"P)\"\".capitalize()):{:\\ni1 -= i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 1], [2, 0, 2, 1, 0, 0], [2, 0], [0, 1, 0, 2], [0], [0, 0, 0], [], [], [2, 2], [0], [0, 1, 0], [0], [], [1, 1], [], [0, 0], [], [0, 1], [3, 9], [2, 1, 1, 0, 0, 2], [0], [3, 0, 0, 0, 0, 0, 2, 1, 3], [0], [1, 3], [0], [], [5, 0, 1, 1], [0, 1], [0], [0, 2, 0, 4, 1], [3], [0], [0], [0, 3], [24], [], [], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 2, 4, 1, 3, 0, 0, 2, 1, 3, 1, 0, 2, 0, 2, 0, 2, 2, 6, 1, 9, 1, 2, 1, 0, 4, 2, 1, 5, 1, 1, 1, 2, 1, 0, 0, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile True:{:\\nb2 = max(i2, i1) \\l i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in2 in s0:{:\\ni0 = i0\\nb2 = True\\ns1 = s1[i2:( int(39.0) + len(\"\"Y@\"\".lstrip()) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [4, 5, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 2], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [1, 1, 4, 4, 0, 0, 4], [1, 1], [0], [2, 0, 0, 2, 1, 0, 2, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 0, 0, 0, 1], [0, 1], [17], [15], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 49, 16, 8, 7, 9, 5, 2, 1, 14, 2, 0, 5, 2, 1, 1, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in s1[len(in1):]:{:\\nres0 = \"\"R\"\"[len(in1):mod(int(4.0),i0)] not in s0[:mod(i2,int(5.0))][( int(5.0) + divInt(i2,i0) ):divInt(divInt(int(7.0),i1),( abs(( i2 + divInt(min(( len((\"\"p\"\" + saveChr(i1)).capitalize()) * mod(min(int(6.0), i2),int(1.0)) ), int(7.0)),i0) )) - i0 ))][divInt(int(7.0),max(int(9.0), abs(i1))):( ( ( int(8.0) + int(5.0) ) * divInt(int(0.0),i2) ) - int(4.0) )]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0, 1, 2], [], [0], [], [], [1, 2], [], [0, 2], [], [2], [2], [], [], [], [1, 1], [2, 6], [0], [0], [1, 1], [], [], [], [], [], [0, 0, 0, 0, 0, 1], [], [4, 4, 2, 4, 1], [2, 2, 1], [], [1], [0, 0, 2, 2, 3, 1], [25, 10], [2], [8, 3], [21]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 6, 0, 5, 3, 0, 1, 6, 2, 1, 2, 1], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not saveChr(int(2.0))[:int(6.0)].capitalize().capitalize() == \"\"ZK83<c\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 2, 0, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 2, 0, 2, 3, 1, 0, 0, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0, 1], [0], [4, 0, 0, 2, 0, 0, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 11, 1, 35, 13, 6, 6, 7, 4, 2, 0, 7, 1, 0, 1, 2, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = getCharFromString(s0, len(in2)).endswith(in1[divInt(i0,len(in1)):])\\ni2 = max(mod(i0,int(0.0)), ( int(7.0) + min(i0, divInt(( divInt(int(5.0),i1) + ( len(\"\"R1\"\") * ( i2 - divInt(( divInt(mod(i1,( min(int(7.0), i2) + i0 )),int(2.0)) * i0 ),i0) ) ) ),int(1.0))) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 2, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [1], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 8, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 3, 3, 2, 2, 2, 1, 0, 0, 3, 1, 0, 1, 1, 1, 2, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [2, 1, 1, 2], [17], [4, 23], [8, 2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 2, 2, 2, 0, 0, 8, 8, 8, 0, 32, 8, 8, 4, 4, 7, 4, 1, 15, 3, 1, 3, 4, 0, 2, 2, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[saveOrd(in1):]:{:\\nres0 = ( ( len(in1[i1:]) != int(0.0) or in0 not in getCharFromString(\"\"8\"\", abs(mod(i1,int(6.0))))[mod(int(5.0),min(i1, i1)):( divInt(int(7.0),i0) + ( len(s0) + min(max(( ( divInt(int(8.0),i2) * i1 ) - abs(int(1.0)) ), i1), int(7.0)) ) )] ) and saveChr(int(7.0)).endswith((\"\"ex2\"\" + in0.rstrip())) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [2, 2, 0, 1, 2, 0, 0, 2, 1, 2, 0, 2, 1, 1, 1, 2, 0, 2, 1, 0, 2, 1, 2, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [1, 1, 1, 2, 2, 2, 0, 0, 1, 1, 2, 1, 0, 0, 2, 2, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 3, 1, 3, 2, 3, 0], [2], [0, 2, 0, 0, 0, 1, 2, 0, 0, 2, 2], [0], [3, 5, 0, 4], [3, 1, 0, 3, 0, 0], [0, 1], [1], [0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [9, 2, 7, 7, 9, 9, 4, 1, 6, 5, 8, 3, 8, 3, 2, 0, 1, 9, 0, 9, 5, 1, 3, 4, 0, 2, 4, 4, 8, 7, 9, 1, 5, 1, 5, 3, 0, 1, 8, 3, 9, 2, 0, 7, 0, 6, 0, 2, 8, 3, 7, 3, 4, 5, 8, 5, 5, 5, 9, 3, 3, 7, 1, 2, 5, 3, 4, 3], [0, 1, 2, 2, 0, 2, 1, 2, 1, 0, 0, 0, 2, 0, 1, 2, 1, 1, 1, 1, 2, 0, 2, 1, 2, 1, 0, 0, 0, 2, 2, 0, 1, 0, 1, 1, 0, 2, 2, 1, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 2, 0, 2, 0, 2, 2, 0, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0], [1, 2, 0, 2, 2, 3, 1, 3, 0, 0, 1, 0, 2, 2, 1, 1, 2, 3, 1, 1, 3, 2, 3, 1, 2, 0, 2, 3, 0, 3, 1, 0, 1, 1, 3, 3, 3, 1, 3, 3, 2, 3, 2, 0, 2, 2, 3, 2, 3, 0, 3, 1, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 3, 3, 3, 2, 3, 3, 3, 2, 0, 3, 3, 3, 1, 2, 3, 0, 1, 0, 3, 3, 2, 1, 3, 2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 3, 3, 3, 1, 2, 0, 3, 1, 2, 2, 2, 2, 1, 0, 0, 3, 1, 1, 3, 0, 0, 3, 2, 0, 3, 3, 0, 3, 2, 1, 3, 3, 1, 1, 2, 3, 2, 1, 0, 3, 2, 3, 1, 0, 3, 0, 3, 2, 3, 3, 2, 0, 0, 2, 1, 2, 0, 1, 2, 3, 3, 3, 0, 1, 3, 1, 1, 1, 0, 3, 3, 0, 0, 1, 3, 2, 3, 1, 1, 0, 0, 1, 3, 2, 3, 2, 1, 3, 1, 2, 2, 3, 0, 3, 3, 3, 3, 1, 3, 1, 3, 2, 2, 1, 0, 2, 2, 0, 1, 1, 1, 1, 2, 2, 3, 0, 1, 1, 1, 1, 1, 2, 0, 1, 1, 2, 3, 0, 1, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 2, 3, 3, 3, 0, 2, 0, 0, 0, 2, 0, 3, 1], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [4, 4, 4, 0, 4, 0, 3, 0, 0, 3, 3, 0, 1, 3, 0, 0, 4, 3, 3, 2, 0, 1, 0, 0, 3, 3, 2, 0, 1, 3, 3, 4, 2, 2, 1, 2, 4, 0, 0, 1, 0, 1, 0, 2, 3, 3, 0, 2, 0, 2, 3, 1, 0, 3, 2, 4, 0, 3, 4, 0, 0, 2, 0, 0, 2, 0, 3, 2, 2, 0, 3, 2, 2, 0, 2], [2, 0, 1, 2, 2, 0, 0, 0, 2, 1, 2, 1, 2, 1, 1, 1, 0, 1, 1, 2, 1, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [3, 5, 4, 2, 5, 1, 1, 3, 1, 3, 1, 2, 3, 0, 0, 2, 5, 4, 0, 3, 5, 3, 2, 4, 3, 3, 0, 5, 3, 5, 5, 0, 2, 0, 4, 4, 4, 0, 2, 3, 0, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 3, 4, 0, 2, 2, 1, 0, 4, 0, 2, 0, 1, 2, 4, 2, 1, 1, 2, 2, 4, 1, 4, 0, 4, 1, 1, 0, 0, 1, 4, 4, 2, 2, 2, 0, 1, 4, 0, 0, 4, 2, 1, 2, 2, 4, 0, 1, 4, 2, 1, 4, 2, 0, 0, 4, 0, 0, 2, 0, 1, 4, 2, 4, 2, 4, 0, 1, 0, 1, 0, 4, 0, 2, 4, 1, 0, 3, 2, 0, 3, 2, 4, 3, 0, 2, 0, 1, 3, 1, 1, 2, 0, 4, 2, 2, 1, 0, 0, 4, 4, 0, 2, 4, 1, 4, 2, 2, 1], [1, 3, 2, 3, 3, 3, 3, 2, 2, 3, 2, 2, 0, 3, 1, 3, 2, 1, 1, 0, 1, 3, 2, 2, 2], [0, 5, 1, 4, 5, 0, 2, 1, 3], [1, 0, 1, 1, 0, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 0, 1, 1, 0, 2, 1, 1, 0, 2, 0, 1, 2, 0], [1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 3, 1, 1, 0, 2, 1, 3, 0, 1, 3, 0, 1, 1, 3, 2], [11, 8, 19, 19, 8, 8, 14, 9, 22], [6, 17, 4, 18, 19, 10, 15, 5, 13], [9, 9, 7], [14, 7, 17, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 28, 28, 10, 18, 7, 8, 0, 0, 7, 1, 11, 1, 4, 6, 2, 1, 3, 68, 68, 62, 8, 247, 55, 75, 26, 31, 42, 25, 7, 109, 25, 9, 28, 25, 9, 9, 3, 4], "tree_depth": 62, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2:{:\\nloopBreak% = 0\\nfor in1 in (saveChr(int(92.0)) + s2):{:\\ni0 = ( i1 * divInt(mod(saveOrd(\"\"g\"\"[int(7.0):saveOrd(in2)][:i2]),i2),int(7.0)) )\\ni0 += i2\\nloopBreak% = 0\\nfor s1 in s1.lstrip():{:\\ni1 -= ( ( int(9.0) * int(9.0) ) * ( saveOrd(in0[:int(4.0)]) + int(1.0) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = \"\"L\"\"\\nloopBreak% = 0\\nfor in0 in \"\"9\"\"[min(divInt(saveOrd(\"\"I\"\"),int(6.0)), mod(i2,divInt(min(i1, len(\"\"r\"\".strip(s1.rstrip())[int(5.0):][i0:int(8.0)])),int(3.0)))):min(min(len(\"\"T\"\".rstrip(\"\"T\"\")), int(8.0)), len(s2))].capitalize()[:min(divInt(max(divInt(i0,divInt(( len(in0) + divInt(min(i0, min(int(3.0), saveOrd(\"\"e\"\"))),int(2.0)) ),int(0.0))), i2),( i0 + int(1.0) )), len(s0[int(9.0):][len(\"\"I\"\"):][abs(min(max(divInt(min(min(len(s0.capitalize()), divInt(i1,len(s2))), abs(min(int(0.0), divInt(max(i2, int(9.0)),i1)))),len(\"\"I\"\"[len(in2.capitalize()[mod(int(5.0),saveOrd(\"\"+\"\")):( i1 * divInt(int(1.0),int(3.0)) )][i1:]):].lstrip())), divInt(divInt(int(4.0),i1),abs(abs(max(int(0.0), mod(i2,abs(int(2.0)))))))), ( divInt(divInt(( int(4.0) - i0 ),i2),saveOrd(\"\"s\"\"[int(4.0):].capitalize())) * int(8.0) ))):min(i1, i2)].capitalize().strip(getCharFromString(in1[min(( i1 - max(min(i0, max(( int(7.0) * min(abs(int(9.0)), int(1.0)) ), mod(len(s0),( int(5.0) - i0 )))), len(in0.strip())) ), divInt(min(int(1.0), i0),abs(i2))):], min(divInt(abs(len(in2)),( i2 - i0 )), ( int(5.0) - ( i1 + int(3.0) ) ))))))]:{:\\nin0 = s2[( max(min(len(\"\"t\"\"), i0), int(0.0)) - abs(int(1.0)) ):int(8.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif ( saveChr(int(3.0)) != in1.capitalize()[:i1].rstrip()[:saveOrd(\"\"O\"\")] and False ):{:\\nin0 = in0\\n:}\\nif b0:{:\\nres0 = ( min(i1, i0) == int(9.0) or \"\"9\"\".endswith(s0) )\\n:}else:{:\\nb1 = res0\\ni2 = len(saveChr(( saveOrd(in2) - int(2.0) )))\\nloopBreak% = 0\\nfor in0 in saveChr(int(0.0))[i2:i1]:{:\\ni1 = int(7.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif b2:{:\\nin2 = \"\"k\"\"\\n:}\\ni2 = min(( min(divInt(int(0.0),abs(int(6.0))), mod(( min(i1, min(abs(min(len(in2), int(0.0))), abs(int(2.0)))) * abs(divInt(( int(8.0) - i1 ),mod(mod(i0,int(3.0)),int(7.0)))) ),int(3.0))) + int(4.0) ), ( ( min(i0, int(5.0)) + int(8.0) ) - int(5.0) ))\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s0 in (s2[int(55.0):] + (getCharFromString((s0 + in1[:int(9.0)]), mod(i0,int(3.0)))[:int(37.0)] + \"\"$Jp\"\")):{:\\nres0 = (\"\".W\"\" + \"\"f\"\") in in1[divInt(len(saveChr(i0)),int(1.0)):i2]\\nloopBreak% = 0\\nfor in1 in \"\"n\"\"[i1:i2][i0:]:{:\\nb0 = s0.startswith(s2)\\nin0 = s0.capitalize().lstrip(\"\"\"\".capitalize()[:i2])\\ns2 = \"\"7\"\"[int(2.0):( int(5.0) + i0 )][i2:].capitalize()\\ni2 = ( abs(abs(min(i0, divInt(i1,i0)))) + i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = divInt(i0,abs(int(343.0)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 0], [], [0, 0], [], [], [1, 1], [0], [1, 2], [0], [2], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 5, 3, 5, 2, 8, 0, 5, 1, 2], [2, 0, 0, 0, 2, 0, 2, 0], [], [2, 3, 0, 1, 1, 0, 2, 0, 2, 3, 2, 1, 2, 2, 0, 3, 1, 2, 2, 2, 3, 1, 2, 3, 0, 1, 1, 1, 2, 0, 3, 1, 1, 3, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 0, 3, 4, 3, 0, 1], [1, 1, 0, 0, 0, 2, 2], [0, 0, 0, 1], [5, 3, 3, 5], [1, 1, 1], [], [4, 3, 0, 4, 3, 1, 4, 4, 4, 2, 3, 0, 4, 4, 0, 4, 1, 4, 4, 0, 1], [1, 2, 2, 2, 0, 0, 2, 1, 0, 3], [0], [0], [2, 3, 1], [], [5], [1], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 11, 11, 8, 0, 37, 11, 7, 7, 4, 4, 3, 0, 21, 10, 1, 1, 3, 0, 1, 1, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = ( len(saveChr(i2)) - int(0.0) ) \\l int(2.0)\\nb1 = (in2 + (\"\"1\"\" + getCharFromString((in0 + getCharFromString(in0.capitalize(), i0))[divInt(i0,( min(( int(5.0) - divInt(divInt(i0,len(saveChr(int(3.0)))),( ( ( saveOrd(\"\"&\"\") + int(5.0) ) + ( len(getCharFromString(in2.lstrip(), i2)) + int(2.0) ) ) * int(8.0) )) ), int(0.0)) * mod(i0,min(int(5.0), int(1.0))) )):max(int(2.0), i2)], i0).capitalize().capitalize()).capitalize()) == \"\"f\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 1, 1, 2, 0, 0, 1, 0, 1], [0, 1, 1], [3, 1, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 3, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 0, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], [3, 1, 2, 0, 3, 0, 1, 4, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 3, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 0, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 22], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 13, 0, 51, 15, 10, 7, 8, 7, 2, 1, 16, 2, 0, 4, 2, 2, 0, 0, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len((in1[int(0.0):] + in1)):]:{:\\nres0 = in0[i0:int(7.0)] not in s0[max(mod(i2,int(5.0)), mod(int(7.0),abs(i2))):min(divInt(( len(getCharFromString((\"\"R\"\" + getCharFromString(in1, i0)), ( min(divInt(i1,divInt(divInt(( int(4.0) + i1 ),( max(saveOrd(\"\"W\"\"), i1) + int(1.0) )),int(7.0))), i2) * i0 ))) - mod(int(7.0),max(i0, max(i1, divInt(( ( int(9.0) + int(8.0) ) * ( int(5.0) - i0 ) ),int(0.0))))) ),int(4.0)), i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [0], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [3, 3, 2, 0, 3, 1, 1, 3, 1, 1, 3], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 0, 0, 4], [0, 1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0, 3, 0, 0], [17, 12, 12, 5], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 14, 14, 9, 0, 49, 15, 11, 10, 5, 5, 5, 0, 16, 3, 1, 3, 5, 4, 0, 0, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[len(s1):]:{:\\nb0 = ( abs(i0) != min(( int(0.0) + int(7.0) ), ( int(5.0) + len(\"\"RM\"\") )) or ( getCharFromString(\"\";\"\"[i1:( ( mod(int(7.0),i2) - ( max(int(7.0), i0) - max(len(saveChr(( int(1.0) + i1 ))), ( max(int(7.0), ( int(7.0) * int(9.0) )) - i2 )) ) ) - i1 )], divInt(int(8.0),max(divInt(len((\"\"M\"\" + s0.rstrip())),i2), ( divInt(divInt(int(5.0),int(0.0)),( int(4.0) * i0 )) + int(8.0) )))).endswith(\"\"F\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [1, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [5, 7, 5, 1, 2, 1, 0, 7, 1, 8, 5, 8, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 2, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 1, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 3, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2, 0, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [2, 2, 4, 4, 3, 0, 4], [1, 1, 1, 0, 0, 1], [0], [2, 0, 4, 2, 1, 0, 2, 4, 2, 4, 4, 3, 1, 1, 1, 1, 0], [0, 1, 3, 2], [1, 0], [2, 0, 0, 2, 1], [0, 2, 3, 1, 3, 2], [17], [4], [3, 8], [20, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 9, 0, 53, 16, 12, 8, 8, 2, 6, 0, 15, 4, 1, 4, 6, 1, 1, 2, 2], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s2[len(getCharFromString(\"\"R\"\"[len(s2):i0], int(5.0))):] not in saveChr(( mod(int(7.0),int(5.0)) + ( int(1.0) + abs(i2) ) ))[divInt(divInt(divInt(( i2 * ( min(divInt(i0,( len((\"\"3\"\" + \"\";\"\").capitalize().rstrip()[min(int(2.0), i1):]) - divInt(max(int(1.0), i2),int(0.0)) )), int(7.0)) + i1 ) ),i2),mod(int(1.0),abs(int(8.0)))),int(5.0)):max(( ( ( int(8.0) * int(4.0) ) - divInt(int(8.0),i0) ) - int(59.0) ), abs(min(saveOrd(\"\"e<8\"\"), int(9.0))))]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1, 1, 0, 1], [0], [2, 4, 4, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 3, 3], [17], [], [], [20, 25, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 10, 10, 11, 0, 40, 11, 8, 4, 7, 5, 4, 1, 17, 5, 2, 4, 4, 1, 0, 0, 3], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in saveChr(len(in2[int(0.0):])).capitalize()[divInt(int(7.0),i0):]:{:\\nloopBreak% = 0\\nwhile \"\"R\"\" not in in1[mod(i2,int(5.0)):( int(7.0) * len(saveChr(i2)) )].rstrip()[i0:divInt(divInt(int(6.0),i1),divInt(abs(( i2 + ( min(divInt(len((\"\";\"\" + in2.lstrip())),i1), ( min(int(1.0), i2) + int(7.0) )) + int(7.0) ) )),i0))]:{:\\nres0 = ( i0 != mod(int(9.0),max(int(8.0), abs(i0))) or ( \"\"@&\"\".endswith(in0) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [3, 0, 4, 2, 0, 0, 1, 1, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 3, 2], [17], [], [9], [20, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 3, 4, 0, 8, 1, 0, 1, 4, 1, 0, 1, 2], "tree_depth": 15, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (in2 + getCharFromString(in2[len(in1):], len(\"\"R\"\"))) not in \"\";<9\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [0], [0], [], [], [0, 3], [3], [0, 1], [0], [], [2], [], [], [], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1], [6, 6, 4, 3, 8, 0, 4, 3, 5, 7, 6, 3, 2, 8, 7, 7], [1, 2, 0, 1, 0, 0, 0, 0], [1], [2, 2, 3, 2, 2, 0, 2, 2, 0, 2, 1, 1, 3, 0, 2, 3, 2, 0, 0, 2, 3, 3, 0, 2, 3, 3, 1, 2, 1, 0, 1, 2, 3, 0, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 3, 1, 0, 4, 1, 3, 4], [0, 2], [0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0], [1, 0, 0, 1], [], [1, 0, 0, 1], [], [], [], [2, 3, 2, 0], [18], [], [9, 1], [30]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 16, 16, 8, 0, 36, 13, 8, 2, 11, 2, 4, 0, 4, 0, 0, 0, 4, 1, 0, 2, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not divInt(mod(min(mod(divInt(i1,( divInt(i2,mod(int(6.0),int(643804.0))) + len(\"\"9\"\") )),i0), mod(max(mod(i1,i0), divInt(min(saveOrd(s0), i0),divInt(max(len(s0), int(3.0)),divInt(int(5.0),i0)))),int(76.0))),( saveOrd(\"\"_1S\"\") * i0 )),int(3.0)) \\ge int(2877.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 0, 1, 3, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [0, 2, 0, 0, 1], [1], [17], [15], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 0, 1, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):abs(i0)]:{:\\nres0 = \"\"p\"\"[int(7.0):] not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 0, 0, 0, 1, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 0, 1, 2, 2, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 2, 3, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 1, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1], [3, 1, 2, 0, 3, 0, 1, 3, 1, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [4, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 2, 1, 0, 0, 0, 2, 0, 0, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [14], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 14, 12, 1, 54, 18, 11, 9, 9, 7, 2, 1, 14, 2, 0, 3, 2, 1, 1, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in \"\"R\"\"[len(in2):][max(i0, abs(min(mod(i2,int(2.0)), mod(( len(in1) + i2 ),divInt(( divInt(min(i2, ( max(( divInt(len(in1),( divInt(int(7.0),i1) + mod(max(int(5.0), i2),int(7.0)) )) * int(4.0) ), i1) - i2 )),( int(1.0) + saveOrd(in0[int(7.0):saveOrd(s0)]) )) * i0 ),( ( divInt(int(7.0),int(9.0)) - ( int(8.0) - i0 ) ) * int(5.0) )))))):]:{:\\nres0 = in1 not in getCharFromString((\"\"o\"\" + saveChr(divInt(i0,int(0.0)))), int(4.0))\\ni1 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 7, 8, 1, 7, 7, 9, 8, 5, 6, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 1, 1, 1, 2, 1, 1, 0, 2, 0, 1, 0, 1, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 3, 3, 3, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 1, 2, 1, 0, 2, 0, 1, 3, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 2, 0, 0, 0, 1, 0, 1, 0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 1, 2, 2, 3, 0, 1, 2, 1, 1, 2], [1, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 1, 1, 0, 2, 0, 1, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [1, 0, 2, 0, 1], [0, 3, 2], [17], [], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 14, 14, 14, 1, 56, 18, 11, 10, 8, 2, 3, 0, 5, 0, 0, 1, 3, 1, 0, 1, 1], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile mod(len(s0[:i0]),int(0.0)) != max(divInt(i2,int(8.0)), ( abs(abs(len(in2))) - ( ( divInt(min(i2, ( max(( i2 + divInt(int(5.0),( int(7.0) * i1 )) ), divInt(i1,int(8.0))) - abs(int(1.0)) )),int(7.0)) + i1 ) + i2 ) )):{:\\nres0 = ( mod(int(7.0),max(int(9.0), max(i1, ( ( ( int(8.0) - int(5.0) ) - divInt(int(6.0),i1) ) * int(4.0) )))) \\l abs(divInt(( i0 + i2 ),i0)) or ( \"\"R\"\" not in \"\";0\"\" and True ) )\\ni1 = int(8.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 3, 2, 3, 1, 0, 2, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1, 0, 3], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [3, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 10, 0, 50, 16, 11, 8, 8, 8, 2, 1, 17, 4, 2, 3, 2, 1, 0, 0, 1], "tree_depth": 46, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[len(in0):] not in saveChr(len(s0[mod(min(int(1.0), i0),divInt(( int(7.0) + len((\"\"R\"\" + getCharFromString(in1, i2)).lstrip()) ),divInt(( divInt(int(5.0),i0) + ( min(( i0 + max(min(divInt(int(7.0),int(7.0)), ( max(int(1.0), i1) - int(7.0) )), i2) ), i1) + i1 ) ),divInt(int(7.0),min(mod(len(\"\";\"\"),i0), ( ( ( int(9.0) * int(8.0) ) - divInt(int(5.0),i0) ) - int(0.0) )))))):int(4.0)])).lstrip(in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [3, 5], [3, 3, 1], [0, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 2, 1, 2, 0, 0, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 1, 0, 1, 2, 1, 3, 0, 2, 2, 3, 1, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 3, 0, 1, 1, 0, 1, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 3, 1, 0, 1, 2, 1, 3], [1, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 3, 4, 4, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0, 2], [12, 23], [], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 11, 11, 9, 0, 38, 8, 10, 5, 3, 6, 3, 1, 16, 3, 1, 5, 3, 2, 0, 1, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nb1 = ( ( mod(i1,int(0.0)) != len(in1[int(0.0):]) and True ) or getCharFromString(in1[:i2], int(5.0))[mod(int(7.0),max(i2, ( mod(len(saveChr(int(2.0))),i0) - ( max(( i0 + ( min(max(int(1.0), i2), ( abs(max(i1, int(7.0))) * int(7.0) )) - i2 ) ), int(9.0)) + i0 ) ))):int(8.0)][len((\"\"M\"\" + s0.rstrip())):int(5.0)] != \"\"X4\"\" )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [2, 2], [], [0, 0], [], [], [0, 3], [], [], [], [], [], [], [], [], [1], [3], [0], [1], [1], [], [], [2], [], [0, 2, 5, 1, 5], [0, 0, 0, 1], [], [0, 3, 0, 3, 1, 2, 0], [], [], [2], [0, 1, 3, 1], [12], [13, 16], [], [29]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 5, 4, 0, 7, 0, 0, 1, 4, 1, 2, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s2\\nin2 = (s1 + (\"\"Mn^q\"\" + in2[int(3.0):]))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 7, 7, 2, 1, 7, 7, 7, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 2, 3, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 3, 3, 2, 0, 2, 3, 2, 1, 1, 2, 3, 0, 0, 2, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 2, 1, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 4, 1, 4], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 1, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 1], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 11, 0, 55, 16, 12, 10, 6, 5, 2, 1, 14, 3, 0, 4, 2, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[max(len(\"\"R\"\"), divInt(abs(min(( i0 + int(0.0) ), ( int(2.0) + len(in1[i1:]) ))),mod(( divInt(int(7.0),i2) + min(max(( i0 * ( abs(( int(7.0) + int(2.0) )) * ( max(i1, i2) - divInt(int(1.0),i1) ) ) ), i2), int(7.0)) ),int(7.0)))):]:{:\\nres0 = in1.startswith(getCharFromString(in0[saveOrd(saveChr(int(7.0))):max(i0, divInt(( ( int(8.0) - int(5.0) ) * ( int(0.0) + i0 ) ),int(4.0)))], i0)[saveOrd((\"\"7\"\" + saveChr(divInt(int(8.0),int(59.0))))):int(9.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [3, 0, 4, 2, 1, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 8, 2, 3, 1, 1, 2, 2, 0, 8, 2, 0, 1, 2, 1, 0, 0, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (s0 + getCharFromString(\"\"R\"\"[len(in2):], mod(len(\"\";\"\"),i0))) not in saveChr(abs(( int(0.0) + int(7.0) )))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [2, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 4, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 2, 0], [17, 3], [], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 7, 0, 34, 9, 9, 3, 6, 4, 3, 1, 14, 4, 1, 3, 3, 2, 0, 1, 0], "tree_depth": 42, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in getCharFromString(in2, len(in1[len(in1):]))[abs(i0):]:{:\\nres0 = \"\"R\"\" == saveChr(min(mod(int(0.0),int(7.0)), ( int(5.0) + len(\"\"2\"\"[i1:divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len((\"\"D\"\" + saveChr(divInt(int(1.0),i1))).rstrip()), divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)) )),i1)]) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [0, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 8, 2, 7, 2, 1, 7, 4, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 0, 1, 0, 2, 3, 0, 0, 3, 2, 0, 0, 2, 3, 3, 1, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 0, 4], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 0], [0, 2, 4, 4, 3, 0, 4], [1, 1, 1], [0], [3, 0, 0, 4, 2, 1, 2, 4, 2, 0, 2, 3, 1, 4, 2, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 3, 1], [17], [23], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 13, 0, 49, 14, 11, 6, 8, 4, 3, 0, 17, 3, 1, 5, 3, 1, 1, 0, 1], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = (s0 + s2) not in \"\"R\"\"[len(saveChr(len(in1[i1:int(08.0)]))[:max(divInt(int(2.0),min(mod(int(7.0),len((\"\";\"\" + \"\"x\"\"[:i1].rstrip())[( divInt(( int(2.0) + i1 ),divInt(min(( i0 * divInt(i2,i2) ), int(1.0)),i2)) * mod(max(i0, i0),abs(( i0 - i2 ))) ):mod(max(min(int(7.0), saveOrd(in1)), i2),divInt(( int(4.0) + int(9.0) ),int(8.0)))])), ( int(5.0) * i0 ))), int(0.0))]):].capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [1, 0, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 1, 1, 1], [1, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 2], [1, 1, 1, 2, 0, 2, 1, 0, 0, 2, 1, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [], [], [2, 1, 2, 3, 3, 3, 0, 2, 3, 1, 1, 3, 3, 1], [0, 5, 2, 0, 0], [0, 0, 1, 0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2], [0, 0, 0, 0, 0], [4, 5, 5, 4, 4, 3, 0, 4, 0], [2, 3, 1, 0, 0, 0, 0, 1], [1], [0, 0], [1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [2, 9, 2, 5, 4, 5, 9, 0, 3, 9, 4, 1, 4, 6, 5, 3, 8, 0, 0, 5, 3, 3, 5, 8, 5, 7, 8, 0, 8, 7, 4, 5, 9, 5, 4, 7, 3, 1, 7, 1, 8, 6, 6, 2, 7, 4, 1, 2, 0, 3, 7, 5, 8], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 2, 1, 1, 0, 1, 2, 0, 0, 1, 1, 0, 0, 0, 1, 2, 1, 1, 1, 0, 0, 2, 2, 0, 1, 1, 2, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 1], [1, 2, 2, 1, 0, 2, 3, 1, 1, 1, 1, 2, 3, 3, 3, 3, 1, 0, 1, 3, 1, 0, 0, 3, 3, 1, 2, 1, 0, 1, 3, 0, 3, 1, 1, 0, 0, 3, 3, 0, 2, 2, 0, 0, 1, 2, 0, 2, 1, 0, 1, 1, 3, 0, 2, 0, 0, 1, 0, 1, 1, 2, 1, 3, 3, 1, 3, 0, 3, 3, 3, 0, 2, 3, 3, 1, 2, 1, 3, 0, 1, 0, 1, 2, 2, 1, 1, 0, 1, 3, 1, 1, 2, 3, 0, 3, 3, 2, 0, 3, 0, 1, 2, 2, 0, 2, 1, 2, 1, 3, 1, 0, 2, 3, 2, 0, 0, 3, 3, 1, 3, 0, 3, 0, 2, 2, 2, 2, 3, 2, 1, 1, 0, 1, 0, 3, 1, 0, 0, 2, 3, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 2, 0, 3, 3, 0, 3, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 2, 3, 2, 3, 0, 2, 0, 3, 0, 3, 4, 4, 4, 1, 3, 0, 1, 4, 0, 4, 3, 0, 3, 4, 1, 2, 3, 4, 4, 4, 1, 2, 2, 3, 0, 0, 3, 0], [1, 0, 2, 0, 1, 1, 0, 0, 1, 1, 2, 0, 2, 0, 1, 0, 1, 2, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 2, 4, 1, 5, 5, 1, 1, 4, 5, 0, 1, 4, 2, 5, 3, 0, 3, 0, 0, 0, 5, 1, 1, 4, 1, 1, 4, 1, 2, 4, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0], [4, 0, 2, 2, 2, 4, 0, 2, 2, 1, 0, 0, 3, 2, 0, 2, 0, 0, 2, 0, 3, 2, 2, 4, 0, 0, 1, 4, 0, 4, 0, 2, 4, 4, 4, 4, 1, 4, 2, 4, 2, 4, 1, 4, 4, 1, 2, 1, 1, 0, 0, 1, 0, 4, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 4, 1, 2, 4, 2, 0, 1, 2, 2, 2, 1, 4, 4, 2, 2, 4, 0, 1, 2, 1, 2, 2, 1, 4, 4, 1, 2, 1, 0, 0], [3, 2, 3, 0, 3, 1, 1, 1, 0, 2, 1, 0, 2, 3, 3, 0, 0, 3, 2, 2, 2, 1], [1, 1, 5, 4, 4, 0], [0, 0, 1, 0, 0, 0, 2, 1, 1, 2, 0, 0, 2, 1, 2, 2, 1, 1, 0, 1, 2, 1, 1, 0, 2, 1], [1, 1, 2, 0, 3, 0, 3, 0, 3, 2, 3, 2, 0, 3, 1, 1, 1, 3, 2, 3, 1, 3], [1, 17, 4, 7], [6, 4, 5, 7, 22, 14], [1, 3, 9, 8], [10, 16, 20, 3, 5, 11, 30, 9]], "fitness": 9223372036854775807, "mapping_values": [1, 34, 34, 12, 22, 3, 7, 0, 0, 14, 5, 22, 5, 9, 8, 1, 2, 6, 53, 53, 53, 8, 159, 31, 39, 20, 14, 32, 22, 3, 94, 22, 6, 26, 22, 4, 6, 4, 8], "tree_depth": 60, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 = int(29.0)\\ni2 = ( ( int(2.0) - i1 ) + ( min(int(54.0), int(590394.0)) * int(1.0) ) )\\nif not ( int(4.0) \\l divInt(abs(len(s0.rstrip())),abs(len(s2.capitalize()[:int(6.0)][i0:int(5.0)][min(int(3.0), i1):i2]))) or True ):{:\\ni1 += abs(min(int(8.0), ( int(0.0) - i2 )))\\nin1 = \"\"g\"\"[int(0.0):len(s1)][i0:min(int(5.0), int(3.0))]\\nb2 = b1\\nin2 = in2\\nloopBreak% = 0\\nwhile (s1[i0:i1] + s1[len(in1):]).startswith(in2[:saveOrd((s0.rstrip()[i1:][:mod(divInt(i1,i2),int(3.0))] + s1))]):{:\\nif \"\"e\"\".endswith(getCharFromString(in1, ( i1 - ( int(5.0) + i2 ) ))):{:\\ni1 = int(8.0)\\nif s2.strip(saveChr(int(5.0))[saveOrd(saveChr(i2)):mod(i1,i2)]).endswith(saveChr(int(7.0))):{:\\nloopBreak% = 0\\nfor in2 in getCharFromString(\"\"1\"\", i0):{:\\nb2 = saveChr(int(8.0))[int(0.0):( int(8.0) + saveOrd(getCharFromString(\"\"B\"\", max(int(7.0), len(\"\"\"\\\\\"\"\".rstrip(\"\"R\"\"[:i0]).capitalize())))[min(max(saveOrd(\"\"-\"\"), i0), divInt(min(saveOrd(in0), int(4.0)),( int(5.0) - len(s0) ))):]) )].capitalize().startswith(\"\"E\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif i2 != int(9.0):{:\\nloopBreak% = 0\\nfor in0 in s0:{:\\nres0 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nloopBreak% = 0\\nfor s0 in s0.rstrip(in2):{:\\ns1 = s1[i1:]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\nif in1.startswith(s1):{:\\ni1 -= int(5.0)\\n:}else:{:\\nif s1 != \"\";\"\":{:\\nin1 = \"\"3\"\"\\n:}else:{:\\ni0 = ( divInt(int(4.0),int(7.0)) * i1 )\\n:}\\n:}\\n:}\\nres0 = \"\"9\"\" in getCharFromString(\"\"H\"\", int(3.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = getCharFromString(s1[:min(int(1.0), int(7.0))], ( len(\"\"\"\"\") + i2 ))[saveOrd(\"\"f\"\"[:max(( i0 * abs(i0) ), int(1.0))][divInt(mod(i1,( int(8.0) + divInt(int(6.0),len(s2.capitalize()[:int(6.0)][i1:].capitalize().lstrip())) )),divInt(saveOrd(\"\"h\"\"),divInt(i0,i0))):saveOrd(\"\"w\"\"[:saveOrd(\"\"(\"\"[int(2.0):][max(i0, abs(i1)):( mod(( divInt(abs(mod(int(7.0),int(4.0))),i2) - int(1.0) ),i1) + len(saveChr(int(2.0)).capitalize()) )])])][:i1]):].startswith(\"\"8\"\")\\nb2 = res0\\ni1 = i0\\n:}else:{:\\nb1 = b1\\nres0 = True\\n:}\\nloopBreak% = 0\\nwhile ( min(i0, i2) - i2 ) == ( i0 * i1 ):{:\\nloopBreak% = 0\\nwhile i1 \\l int(0.0):{:\\nres0 = i2 \\l int(3.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = \"\"_o&\"\"[:( i1 - min(len(in1), i1) )] in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= min(int(758.0), i0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0, 1, 2], [], [], [], [], [3, 0], [], [0, 2, 2], [], [2, 5], [3], [0], [], [], [1], [0], [2, 1], [], [2, 0, 1, 0], [1], [], [], [1], [4, 1], [0, 0, 1], [], [4, 4, 0, 0, 4, 1], [0, 1, 2], [], [], [1, 2, 2], [], [17], [6, 4], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 3, 0, 2, 1, 1, 0, 0, 1, 1, 2, 0, 4, 1, 0, 0, 1, 2, 3, 0, 6, 3, 0, 0, 3, 0, 1, 2, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = ( getCharFromString(saveChr(mod(i2,int(0.0))), i1) == in1 and s1.endswith(\"\"r64\"\".capitalize()) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 1, 0], [2, 5, 4, 0, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 4, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 0], [0, 2, 3, 2, 1], [1, 0], [2, 2, 0, 2, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 8, 8, 10, 0, 34, 10, 6, 6, 4, 7, 2, 1, 18, 5, 1, 4, 2, 1, 0, 0, 1], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile getCharFromString(s0[len((\"\"R\"\" + saveChr(i0)).capitalize()):].rstrip()[int(7.0):i2].capitalize(), divInt(divInt(int(7.0),abs(int(5.0))),min(i2, ( mod(( int(2.0) + i0 ),( len(in0) + ( i1 - ( i2 - divInt(int(2.0),i1) ) ) )) + ( min(int(5.0), i2) * int(7.0) ) ))))[int(5.0):] not in \"\";\"\":{:\\nres0 = ( i0 != i0 or ( s0.endswith(in1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1], [], [2, 0], [], [0], [], [], [3, 2, 3], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [], [], [3, 1], [1, 1], [], [0, 1, 1], [], [], [], [2, 1], [17], [5], [5], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 3, 0, 0, 0, 2, 0, 1, 1, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin0 = s1\\nres0 = \"\"5\"\" in \"\"f\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 5, 7, 2, 1, 0, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 2, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 1, 2, 1, 0, 1, 2, 2, 2, 3, 1, 3, 2, 1, 1, 3], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 2, 3, 3], [0, 0, 2, 1, 0, 0, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1], [1, 5, 4, 1, 3, 3, 4], [1, 1, 0, 0, 1], [0], [2, 0, 0, 2, 3, 0, 2, 4, 1, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 1, 3, 0, 0], [17, 22, 18], [3], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 11, 0, 59, 20, 12, 10, 10, 6, 5, 1, 17, 4, 1, 3, 5, 3, 1, 0, 1], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = (s1 + getCharFromString(\"\"R\"\", mod(int(0.0),int(8.0)))[max(mod(i0,int(5.0)), ( int(7.0) + abs(i2) )):divInt(( ( ( i2 + divInt(min(divInt(i0,( len(saveChr(min(int(2.0), i1))) * divInt(max(int(1.0), i2),int(0.0)) )), int(7.0)),i1) ) - i2 ) + mod(int(1.0),abs(( max(i0, ( i0 + ( int(8.0) - int(5.0) ) )) - divInt(int(0.0),i1) ))) ),int(4.0))])[divInt(( ( abs(int(8.0)) * len((\"\"d\"\" + in0.capitalize()).rstrip()) ) + mod(int(59.0),int(9.0)) ),len(\"\";WS\"\")):] not in in0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 1], [2, 0, 2, 0, 0], [0, 2], [0, 1, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 6, 4, 7, 3, 7, 0, 6, 7, 2, 4, 6, 7], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 2, 1, 0, 1, 1, 0, 0, 2, 1], [1], [3, 3, 0, 1, 3, 1, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 3, 0, 3, 0, 2, 2, 0, 2, 3, 3, 1, 1, 2, 1, 2, 3, 3, 3, 3, 3, 2, 1, 3, 2, 0, 2, 0, 2, 1, 0, 2, 2, 1, 0, 3, 0, 2, 0, 0, 3, 3, 1, 3, 2, 0, 1, 3, 1, 3, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0], [3, 3, 2, 4, 3, 0, 1, 2, 1, 0, 1, 1, 2, 4, 3, 1, 4, 1, 3, 0, 1, 3, 1, 3, 1, 1, 1, 2, 3], [0, 2, 2, 1, 1, 2, 1, 1, 0, 1, 0, 1, 2, 1, 1, 0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 5, 4, 4, 2, 1, 4, 3, 1, 2, 1, 3, 2], [1, 0, 1, 1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 4, 4, 2, 2, 2, 0, 0, 2, 2, 4, 0, 1, 4, 0, 4], [0, 1, 3, 0, 3, 1, 1, 1], [1, 0], [2, 1, 0, 0, 1, 0, 1, 2, 1], [0, 1, 1, 3], [17], [3, 20], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 3, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 31, 31, 25, 1, 103, 25, 29, 16, 10, 13, 4, 1, 32, 8, 2, 9, 4, 1, 2, 0, 1], "tree_depth": 50, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1 not in s2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( len(getCharFromString(s1[i0:int(0.0)], abs(int(7.0)))[i1:int(5.0)][:saveOrd(saveChr(int(7.0)))]) != len((\"\"R\"\" + in1.rstrip())) or ( \"\"du\"\".endswith(in0) and True ) ):{:\\ni2 += i2\\ns1 = getCharFromString(s2[:mod(mod(( int(2.0) * i1 ),mod(min(( i2 * divInt(max(( int(1.0) - i1 ), ( abs(int(7.0)) - i0 )),int(7.0)) ), int(9.0)),i0)),i0)][max(int(8.0), min(max(max(i1, ( ( divInt(int(5.0),int(0.0)) * divInt(int(4.0),i1) ) - int(8.0) )), i0), abs(saveOrd(s1)))):i1][:len(saveChr(i1)[:( ( i1 - ( max(saveOrd(in0), int(59.0)) + int(9.0) ) ) - mod(int(2.0),divInt(max(len(\"\";\"\"), min(max(len(saveChr(( int(2.0) + max(( i2 - divInt(i1,( int(6.0) * i0 )) ), ( divInt(int(4.0),i1) - len(s2) )) ))), i1), ( i0 - i0 ))),max(max(int(7.0), max(( i2 + int(3.0) ), abs(int(7.0)))), len(saveChr(i1))))) )][int(06.0):])].lstrip(), int(72467.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 2, 2, 0, 1, 2, 1, 3, 1, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 3, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 0, 2, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 2, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [8], [20]], "fitness": 9223372036854775807, "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nb0 = in1[len(\"\"R\"\"):] not in saveChr(mod(int(0.0),mod(( i2 + int(1.0) ),divInt(int(5.0),abs(int(7.0))))))[:i2][divInt(divInt(int(6.0),i2),( min(( i0 + divInt(len((\"\"8\"\" + in0.rstrip())),( min(i1, mod(max(int(1.0), i2),int(7.0))) * int(7.0) )) ), i1) + i2 )):divInt(int(9.0),abs(int(8.0)))].capitalize()[max(i0, ( ( ( int(5.0) * int(0.0) ) * divInt(int(4.0),i0) ) - int(8.0) )):mod(int(59.0),abs(int(9.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 10, 0, 53, 17, 10, 7, 10, 5, 2, 1, 15, 3, 1, 5, 2, 1, 0, 1, 0]}, {"genotype": [[0], [0, 1, 1], [1, 2, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 0, 2], [0, 1, 1], [2, 3, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 2, 3, 3, 1, 2, 3, 3, 1, 3, 3, 2, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [3, 3, 2, 4, 3, 0, 1, 2, 1, 4, 0, 3, 1, 3, 4], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4, 5, 4], [1, 0, 0, 0, 0, 1, 1], [0], [2, 0, 0, 4, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0, 4, 4, 4, 0, 2, 1], [0, 1, 3, 3, 3, 1], [1, 0, 5], [2, 2, 0, 2, 1], [0, 2, 3, 2, 3, 1, 1], [17], [13, 23], [8, 0], [20, 30]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 17, 17, 13, 1, 63, 20, 15, 12, 8, 9, 7, 0, 23, 6, 3, 4, 7, 1, 2, 2, 2], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = s0[( len(in2) + int(0.0) ):] not in getCharFromString(in1, int(7.0))\\nloopBreak% = 0\\nwhile ( len(in1) != divInt(i0,int(5.0)) or ( in0[( int(7.0) + abs(i1) ):].endswith(s0[mod(( ( int(2.0) * i1 ) * ( saveOrd(saveChr(len((\"\"R\"\" + in1.rstrip())))) + i1 ) ),( min(mod(int(1.0),i0), ( max(int(7.0), i2) * mod(int(5.0),i1) )) - divInt(( int(9.0) - abs(int(8.0)) ),max(i1, ( ( divInt(int(5.0),int(0.0)) * divInt(int(4.0),i2) ) + int(8.0) ))) )):i0]) or True ) ):{:\\ni0 = mod(saveOrd(\"\"8;0_n\"\"),min(int(59.0), ( len(in2) + max(int(9.0), len(saveChr(saveOrd(in1)).strip(\"\"x\"\"[( i0 - i2 ):]).lstrip())) )))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 2, 0, 4, 1], [1, 1, 1], [0], [2, 0, 3, 2, 0, 0, 3, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0, 0, 4, 3, 4, 0, 0], [0, 1, 3, 0, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 0], [17, 12], [], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 10, 10, 7, 0, 34, 9, 8, 3, 6, 8, 3, 0, 23, 5, 2, 3, 3, 2, 0, 1, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in1[len((in2[int(0.0):] + in1)):] not in (getCharFromString(\"\"R\"\"[len(saveChr(i0)):abs(mod(int(7.0),int(5.0)))], ( int(7.0) + min(i1, divInt(divInt(( int(7.0) + i2 ),( len((\"\"0\"\" + in1.rstrip())) - int(1.0) )),i0)) )) + \"\"M\"\"):{:\\nres0 = ( max(max(divInt(int(7.0),i1), divInt(len(s2),int(7.0))), divInt(int(9.0),int(8.0))) != i2 or ( s0.endswith(getCharFromString((in1.lstrip() + s1), i1)) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 4, 3, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 2, 2, 0, 2, 0, 2, 0, 0, 2, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 1, 2, 3, 0, 2, 2, 2, 1, 0, 2, 2, 3, 0, 2, 3, 2, 0, 0, 2, 3, 2, 0, 1, 0, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 0, 0, 2, 2, 1, 2, 0, 2, 2, 3, 0, 3, 3, 0, 3, 0, 2, 2, 0, 1, 2, 0, 2, 0, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [3, 3, 1, 0, 3, 0, 1, 0, 1, 4, 2, 2, 2, 4], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [1, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 2, 3, 3], [17], [], [4], [20, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 23, 0, 74, 25, 14, 11, 14, 6, 4, 1, 16, 3, 1, 5, 4, 1, 0, 1, 2], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1[len(in1):i0])][int(0.0):]:{:\\nb1 = saveChr(max(mod(i2,int(7.0)), int(5.0)))[mod(min(i2, ( divInt(( int(7.0) + i0 ),divInt(( len(in0[:i1]) + ( min(divInt(i2,i1), ( max(mod(i2,int(2.0)), i0) * i0 )) + i0 ) ),mod(int(1.0),min(int(7.0), max(i2, ( ( ( int(4.0) + int(3.0) ) * divInt(i2,i2) ) - int(8.0) )))))) - i0 )),i2):mod(( int(5.0) * ( i0 + divInt(mod(saveOrd(saveChr(i2)),abs(abs(i0))),abs(i0)) ) ),( divInt(i2,int(0.0)) + mod(i2,mod(i2,saveOrd((\"\"R\"\" + s0.rstrip())))) ))].endswith(\"\"4;;\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 0, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 4, 3, 0, 1, 2, 1], [0], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 1, 4], [1, 0, 1], [0], [2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0, 0, 3], [17, 12], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 3, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 3, 3, 5, 1, 10, 0, 3, 0, 0, 7, 3, 0, 16, 3, 1, 4, 3, 2, 0, 0, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1:{:\\nres0 = ( len(in1) != i0 or ( getCharFromString(s2[int(0.0):], saveOrd(saveChr(int(7.0))))[i1:i2][:i2].endswith((\"\"R\"\" + s1.rstrip())) and True ) )\\ni1 = int(5.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin1 = \"\"M;\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [2], [3], [0, 0, 2], [0], [1], [3, 1], [1], [0], [], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [3, 4, 7, 9, 5, 3, 1, 6, 4, 0, 4, 5], [2, 0, 2, 1, 1, 0], [0], [3, 2, 1, 3, 0, 2, 2, 0, 2, 0, 1, 3, 1, 0, 0, 1, 2, 3, 0, 3, 1, 3], [0, 1, 0, 1, 1], [1, 1, 3, 2, 3, 4], [2, 0], [1, 1, 0], [5, 1, 0, 2, 1], [1, 1, 0, 1], [], [2, 0, 3, 0, 2, 0, 3, 2, 4, 2, 2, 0, 4, 1, 1, 0, 1], [2, 3], [4], [0, 1, 1, 0, 2], [0, 3, 1, 2], [24], [24], [2], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 3, 0, 1, 2, 1, 1, 0, 12, 12, 6, 0, 22, 5, 6, 2, 3, 5, 4, 0, 17, 2, 1, 5, 4, 1, 1, 1, 1], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( True or in2[max(( int(3.0) * max(i2, mod(( i0 + mod(i2,int(4.0)) ),len((s1 + s0[:int(795.0)])))) ), i1):i1] not in (s2[int(316404.0):][divInt(abs(i0),len(\"\"Y\"\".rstrip(\"\"#\"\"))):int(5.0)].capitalize()[:saveOrd(s1)] + \"\"y2\"\") )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 2, 5, 7, 9, 1, 5, 7, 6, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 1, 0, 0, 1, 1], [0, 1, 1], [3, 3, 3, 0, 0, 2, 0, 1, 2, 1, 0, 2, 0, 2, 2, 1, 0, 3, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 2, 1, 2, 0, 1, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 2, 3, 2, 0, 1, 1, 3, 1, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [4, 3, 0, 0, 3, 0, 1, 2, 1, 1, 0, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 5, 4, 0, 3, 3, 4], [1, 1, 1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 4, 0, 4, 3, 1, 4, 1, 1, 0], [2, 1, 1, 3], [1, 0], [1, 2, 0, 0, 1], [0, 0, 2], [17, 22], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 17, 17, 12, 0, 59, 18, 13, 8, 10, 5, 3, 1, 16, 4, 1, 4, 3, 2, 0, 1, 0], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:saveOrd(in1)]:{:\\nb1 = s0[len(saveChr(min(i0, i2)).capitalize()[mod(i2,int(0.0)):divInt(int(2.0),i0)]):( i1 + divInt(( int(5.0) + i2 ),min(len(in0), divInt(i1,( min(( max(i1, divInt(abs(int(7.0)),( int(9.0) * divInt(i0,int(1.0)) ))) - mod(int(5.0),max(int(7.0), max(i0, ( ( ( int(6.0) + int(8.0) ) * divInt(int(5.0),i1) ) - int(0.0) )))) ), int(4.0)) - divInt(min(divInt(i1,int(8.0)), int(59.0)),len(saveChr(int(9.0)))) )))) )][len((\"\"R\"\" + \"\"W\"\".rstrip())):] not in \"\"6\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [2], [17], [], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 0, 0, 1, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = s0[len(in0):].endswith(\"\"1\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 1, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 1, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 1, 2, 0, 3, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 2, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 4, 4, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 3, 3], [1, 0, 5], [2, 2, 0, 0, 1], [0, 2], [17], [], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 8, 0, 33, 10, 8, 4, 6, 6, 2, 1, 16, 5, 3, 3, 2, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1):]:{:\\nres0 = saveChr(len(in1)).capitalize().endswith(in0[mod(int(0.0),int(7.0)):mod(i0,abs(( int(5.0) + min(i2, i0) )))].rstrip()[divInt(divInt(int(7.0),i0),divInt(len((\"\"R\"\" + s0.strip(\"\"1\"\")).lstrip()),( i1 + ( min(divInt(max(i1, ( abs(int(1.0)) * i1 )),int(1.0)), int(7.0)) + i2 ) ))):])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [2], [], [0], [], [], [], [], [], [], [], [], [], [], [], [1, 1], [2, 1], [1], [0], [1], [], [], [], [], [4], [1], [], [1], [], [], [], [3], [], [], [], [8]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 8, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin1 = \"\"%\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [0], [], [], [2, 2], [5], [2, 1], [0], [2], [0, 0], [], [], [], [1], [7], [2, 1, 1, 0, 2, 2, 2], [], [2, 0, 2, 0, 0, 3, 0, 2, 0, 2, 0, 3, 0], [1, 0, 1, 1], [0, 2], [0], [0, 1, 1], [], [1], [], [4, 1, 4], [0, 1], [], [], [3], [], [], [], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 13, 4, 2, 1, 3, 0, 1, 0, 3, 2, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = getCharFromString(\"\"*\"\", divInt(i2,( i1 + i1 ))) == saveChr(min(i0, mod(i2,mod(i2,abs(i2)))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 0, 0, 0, 1], [0], [1, 2, 2, 2], [0], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [0, 1, 1, 0, 0, 1], [0, 2, 8, 2, 6, 8], [2, 1, 0], [0], [1, 0, 0, 1, 1, 3, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [], [], [2, 1, 5, 1, 5, 0, 4, 5, 4], [0, 1, 1], [0], [0, 2, 1, 2, 2, 2, 2, 2, 4, 1, 0, 0, 3, 0, 0], [2], [], [2, 1, 2, 1, 1, 2], [0, 1, 3], [6], [2], [], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 3, 1, 7, 0, 2, 0, 0, 9, 3, 1, 15, 1, 0, 6, 3, 1, 1, 0, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in s1:{:\\ni2 = int(02.0)\\nin2 = \"\"Gc\"\"[i1:]\\ns1 = \"\"]\"\".capitalize()[i0:][:int(8.0)][:int(268.0)][len(in2):][:len(s0)]\\nin1 = (in2 + in1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 2, 2], [0, 1, 1], [3, 0, 2, 0, 0, 0, 0, 2, 2, 1, 1, 3, 0, 2, 1, 3, 3, 3, 0, 2, 2, 2, 2, 3, 2, 0, 3, 0, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 2, 2, 0, 3, 3, 0, 2, 1, 3, 2, 3, 1, 1, 3, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 1, 3, 1, 3, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1, 1, 1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 1], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 2, 0], [17, 14], [], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 11, 0, 53, 13, 16, 6, 7, 7, 3, 1, 18, 3, 1, 5, 3, 2, 0, 1, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[:len(in1[i0:mod(i2,i2)])][i0:]:{:\\nres0 = in1.endswith(getCharFromString(s2[:i1], divInt(( int(0.0) + int(7.0) ),len(saveChr(i2))))[divInt(int(5.0),max(min(len((\"\"R\"\" + s0.rstrip())), i1), ( divInt(( ( min(divInt(i2,max(i0, abs(max(int(7.0), int(2.0))))), len(\"\"1\"\")) + max(int(1.0), int(7.0)) ) * int(7.0) ),int(9.0)) - ( divInt(i0,len(in1)) + max(i0, mod(int(8.0),len(\"\"O\"\"))) ) ))):( max(int(5.0), int(0.0)) * abs(int(4.0)) )])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 2], [0, 0], [1, 5, 0], [3, 3, 1], [1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 2, 1, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 1, 1, 0, 2, 1, 1, 2, 1, 2, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 2, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1, 1, 1], [0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 2, 0, 1, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 2, 1], [0, 2, 2], [17], [], [5, 5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 1, 7, 1, 3, 3, 2, 1, 0, 13, 13, 12, 0, 52, 16, 11, 10, 6, 7, 3, 0, 17, 2, 0, 4, 3, 1, 0, 2, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(\"\"R\"\"):][len(in2):] not in in1:{:\\nloopBreak% = 0\\nwhile ( i0 != int(1.0) or ( in1[:abs(( i1 + int(7.0) ))].endswith(in0[mod(int(5.0),saveOrd(getCharFromString((\"\"5\"\" + saveChr(i1)), ( mod(( int(7.0) + i1 ),( len(s0) * min(i0, ( max(( int(2.0) * i2 ), divInt(abs(int(1.0)),i1)) + ( int(7.0) * i1 ) )) )) - divInt(divInt(int(5.0),max(int(9.0), max(i2, ( ( ( int(8.0) - int(5.0) ) * divInt(int(0.0),i1) ) + int(4.0) )))),max(i2, i0)) )))):]) or True ) ):{:\\nres0 = \"\"5\"\" in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [21], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 5, 1, 1, 7, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in \"\"V\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 3, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 1, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1, 2, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 0, 2, 4, 4, 2, 0, 4, 3, 1, 0, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 1, 0], [17, 15], [24], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 12, 11, 0, 50, 16, 11, 9, 7, 7, 3, 1, 16, 3, 2, 4, 3, 2, 1, 0, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(saveChr(mod(i0,len(in0[( i2 + min(( int(7.0) + len((\"\"R\"\" + s0).lstrip()) ), i0) ):divInt(( mod(int(7.0),i0) * ( min(( i1 - max(min(divInt(int(5.0),int(7.0)), ( int(7.0) + int(1.0) )), i2) ), int(7.0)) * i1 ) ),i1)]))).rstrip()[i0:divInt(int(7.0),max(divInt(abs(i0),( ( ( int(9.0) - int(8.0) ) - mod(int(5.0),i0) ) * int(0.0) )), saveOrd(in1)))]):] not in \"\"yP\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [0, 1, 0], [], [1, 0, 0], [], [0, 0], [], [], [1, 0], [1], [1, 2], [0], [4], [], [], [], [0], [1, 0, 1, 1, 1, 0, 0, 1], [1, 2, 5, 1, 7, 9, 2, 1], [2, 1], [0], [1, 3, 1, 0, 2, 3, 1, 2, 1, 1], [0, 0], [4, 4], [0, 2], [], [1, 4], [0, 1], [], [0, 4, 4, 4, 4, 4, 0, 1], [0, 1, 1, 3, 2], [4], [], [2, 3], [], [], [2], [31]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 8, 8, 2, 1, 10, 2, 2, 2, 0, 2, 2, 0, 8, 5, 1, 0, 2, 0, 0, 1, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(1.0)\\nb1 = saveOrd(s1) \\g int(25.0)\\nb0 = getCharFromString(saveChr(i1), ( saveOrd(saveChr(int(1.0))) + ( int(7.0) * int(921.0) ) )).startswith(in1.capitalize().rstrip(\"\"2`\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 0, 0], [], [0, 0, 0], [], [0, 0], [], [], [0, 3, 0, 2, 1], [2], [0, 0, 1], [0], [], [0, 0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 4, 1, 3, 8, 3, 1, 5, 0, 6, 2, 2, 0, 5, 8, 1, 3, 0, 7, 2, 0, 7, 1, 0, 2, 5, 0, 2, 1, 0, 9, 4, 9, 9, 4, 4, 6, 7, 3, 3, 6, 2, 7, 6, 2, 0, 2, 5, 5, 9, 8, 7], [0, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 0, 2, 1, 0, 2, 0, 2, 2, 0, 0, 2, 2, 2, 1, 1, 1, 0, 2, 0, 2, 1, 2, 0, 2, 1, 2, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [], [2, 3, 2, 3, 3, 1, 0, 2, 2, 2, 2, 0, 3, 1, 1, 3, 3, 3, 3, 2, 2, 0, 1, 0, 3, 0, 0, 2, 3, 1, 2, 3, 1, 3, 0, 1, 2, 0, 2, 3, 2, 3, 3, 0, 3, 2, 3, 0, 2, 0, 2, 3, 0, 0, 2, 2, 3, 1, 1, 0, 1, 3, 0, 1, 3, 3, 1, 1, 0, 3, 1, 2, 0, 0, 0, 2, 0, 2, 2, 2, 0, 3, 3, 1, 3, 2, 2, 2, 3, 1, 1, 1, 1, 3, 3, 0, 2, 3, 2, 2, 2, 0, 0, 3, 2, 2, 3, 1, 2, 2, 3, 1, 0, 0, 1, 2, 0, 3, 2, 2, 0, 0, 1, 0, 3, 1, 3, 0, 1, 0, 2, 0, 2, 0, 3, 0, 0, 2, 1, 3, 2, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 0, 2, 1, 1, 3, 1, 3, 0, 2, 2, 2, 0, 1, 0, 2, 3, 0, 1, 2, 2, 1, 2, 1, 1, 1, 3, 1, 2, 2, 2, 3, 0, 2, 2, 3, 3, 2, 2, 2, 0, 3, 1, 3, 3, 0, 2, 3, 2, 2, 1, 0, 0, 3, 0, 2, 1, 1, 2, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [3, 4, 1, 1, 2, 0, 1, 1, 2, 1, 0, 3, 4, 2, 0, 3, 2, 2, 2, 1, 0, 1, 0, 3, 4, 2, 1, 4, 1, 1, 1, 0, 3, 4, 4, 3, 0, 2, 1, 1, 1, 1, 0, 2, 1, 3, 3, 4, 1, 3, 2, 4, 1, 3], [0, 1, 0, 2, 0, 1, 2, 0, 0, 2, 2, 1, 0, 2, 0, 2, 0, 0, 2, 1, 2, 2, 2, 0, 0, 0, 1, 1, 0, 2, 1, 0], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0], [5, 2, 1, 2, 3, 2, 3, 5, 2, 5, 5, 2, 4], [1, 1, 1, 1, 1, 1, 1], [], [3, 4, 3, 4, 4, 4, 0, 3, 0, 3, 0, 3, 2, 1, 0, 4, 0, 4, 2, 0, 0, 2, 1, 2, 0, 2, 1, 1, 2, 2, 2, 1, 4, 2, 0, 4, 4, 2, 2, 2, 0, 0, 0, 0, 1, 1], [0, 1, 2, 2, 1, 1, 2, 0, 2], [], [1, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 1], [2, 0, 2, 3, 3, 0, 2], [10, 2], [], [4, 9, 5], [13, 18]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 2, 0, 0, 5, 1, 3, 1, 0, 2, 0, 0, 0, 52, 52, 49, 0, 215, 65, 54, 32, 33, 13, 7, 0, 46, 9, 0, 12, 7, 2, 0, 3, 2], "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = res0\\nb0 = b2\\nb1 = ( len((getCharFromString((saveChr(mod(saveOrd(in2.capitalize().capitalize()),max(int(4.0), i0))) + (s2 + (s1 + (\"\"4\"\"[:( ( mod(( i2 + max(int(4.0), int(1.0)) ),abs(min(max(max(mod(mod(i2,int(3.0)),i1), abs(i2)), i1), mod(max(int(8.0), mod(min(int(3.0), len(s2)),i2)),int(1.0))))) - divInt(i1,( saveOrd(saveChr(( abs(min(i2, len(in0))) + ( abs(i1) * divInt(i1,( abs(i1) + i0 )) ) ))) - ( ( abs(int(5.0)) * int(0.0) ) + i2 ) )) ) + int(6.0) )] + saveChr(max(i1, int(2.0))))))), min(max(int(2.0), int(058.0)), i0)) + s2[min(int(13.0), ( i2 * i0 )):])) * i2 ) == mod(i2,divInt(( ( i0 - len(in0) ) + saveOrd(\"\"K\"\"[int(07.0):]) ),abs(divInt(( mod(max(int(2.0), int(0.0)),int(7.0)) * int(10.0) ),saveOrd(in2[max(i0, ( max(mod(( mod(i2,i2) + max(( mod(min(int(2.0), ( ( len(\"\"9\"\"[int(5.0):i2]) * i1 ) + int(0.0) )),( i1 + saveOrd(\"\"*\"\") )) * ( ( i1 - i0 ) * int(2.0) ) ), i2) ),saveOrd(\"\"/\"\"[int(1.0):][len(s2[i0:].capitalize()):int(0.0)][i2:mod(i1,( i2 * min(i0, i2) ))])), divInt(int(9.0),abs(( mod(int(4.0),int(9.0)) * max(max(( int(9.0) + int(4.0) ), max(max(( int(4.0) + i1 ), ( int(6.0) + int(7.0) )), min(int(3.0), abs(i2)))), mod(mod(divInt(i1,int(3.0)),i0),divInt(max(i1, int(6.0)),mod(( int(2.0) - mod(int(7.0),int(6.0)) ),int(2.0))))) )))) - len(getCharFromString(in2[:int(0.0)][( mod(( len(in2) + i0 ),mod(mod(saveOrd(s2),max(divInt(mod(mod(i1,len(in1)),int(2.0)),abs(saveOrd(\"\"C\"\"))), i1)),( max(mod(( int(5.0) * i1 ),i1), len(\"\"5\"\")) - i0 ))) + divInt(int(5.0),int(9.0)) ):][divInt(int(8.0),i1):].capitalize(), int(7.0))) )):i0])))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 4, 0, 2, 3, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 2], [17], [], [9], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 10, 1, 40, 11, 10, 6, 5, 7, 2, 1, 17, 3, 1, 4, 2, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = getCharFromString(in1, len((in0[i1:] + saveChr(int(07.0)))[abs(mod(i1,int(5.0))):mod(int(7.0),min(i1, ( divInt(( int(2.0) + i1 ),( len((\"\"R\"\" + s0.rstrip())) + min(i0, ( max(( int(1.0) * i2 ), divInt(abs(int(7.0)),i1)) - int(7.0) )) )) + int(9.0) )))]))[i1:] not in \"\"9\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 = ( divInt(int(8.0),max(int(5.0), saveOrd(in1))) * i1 )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 0, 0, 4], [1, 0, 1], [0], [2, 0, 1, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 1], [17], [23], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 12, 3, 2, 1, 2, 4, 3, 1, 10, 1, 0, 4, 3, 1, 1, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s1[len(\"\"R\"\"):]:{:\\nres0 = \"\";x\"\"[len(in1):] not in in1[mod(int(0.0),i0):mod(i2,int(3.0))].capitalize()[( int(5.0) + i2 ):i0]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 3, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [3, 5, 4, 5, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 1, 4, 4, 2, 0, 4, 3, 1, 0, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 11, 2, 5, 1, 1, 6, 2, 1, 14, 3, 2, 3, 2, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in2[len(\"\"R\"\"):] not in saveChr(mod(i0,len(in0[( i2 + int(7.0) ):min(int(7.0), len((\"\"4\"\" + s0).lstrip()))]))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 0], [1, 2, 1, 1, 0], [0, 2, 2, 2, 1, 2], [0], [0], [], [], [1], [3], [2, 2, 0, 2, 2, 0, 2, 0], [0], [2, 3, 1, 0, 0], [3, 2, 1], [0], [0], [1, 0, 0], [1, 1], [3, 7], [2, 1, 1, 2, 2, 2, 2, 0], [1], [3, 2, 1, 0, 1, 0, 0, 0, 0, 0, 3, 0], [1, 1], [0, 3], [2], [1, 1], [5, 2, 2, 5, 2, 4, 2, 3, 1, 2, 4, 2, 4, 5, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1], [0], [4, 3, 0, 0, 0, 1, 0, 0, 1, 3, 4, 2, 1, 0, 0, 2, 4, 1, 1, 1, 3, 3, 0, 4, 2, 1, 3, 1, 1, 0, 0, 4, 0], [1, 0, 3, 0, 0], [0], [1, 1, 1], [3, 3, 1, 0, 3, 1, 1, 1, 1, 1, 3, 2, 1, 0, 2, 2], [10, 11], [17, 11, 7, 17, 10, 9, 25], [2, 7, 3], [8, 4, 3, 25]], "fitness": 9223372036854775807, "mapping_values": [1, 11, 11, 5, 6, 1, 1, 0, 0, 1, 0, 8, 0, 5, 3, 1, 1, 3, 2, 2, 8, 1, 12, 1, 2, 1, 1, 16, 16, 1, 33, 5, 1, 3, 16, 2, 7, 3, 4], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif saveChr(min(mod(int(3.0),i2), int(7.0))) == (in2 + s2):{:\\nloopBreak% = 0\\nwhile s2 != \"\"%!r\"\":{:\\nif ( in2 not in s2 and \"\"K\"\" in (getCharFromString(\"\"l\"\"[:i1], i1) + in1) ):{:\\nb1 = not s2 in \"\"h\"\".lstrip()[:i2]\\n:}\\nin0 = \"\"r\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nif True:{:\\ns1 = \"\"kj@\"\"\\nloopBreak% = 0\\nfor s2 in ((in1 + getCharFromString(\"\"2\"\"[:i2], i2)) + (\"\"z\"\" + \"\"L73\"\")):{:\\ns2 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n:}\\ni2 *= len(in2)\\ns0 = getCharFromString(s1, i0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 6, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 2, 2, 2, 0, 2, 2, 1], [1, 1, 1], [3, 3, 0, 1, 1, 2, 3, 0, 0, 1, 2, 0, 3, 2, 2, 1, 0, 2, 0, 2, 2, 2, 0, 2, 1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 3, 2, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 1, 1, 3, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [1, 5, 0, 2, 3, 0, 4], [1, 1], [0], [2, 0, 1, 3, 0, 4, 2, 1, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [3, 0], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 5, 2, 10, 1, 3, 2, 1, 4, 2, 1, 8, 1, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(\"\";\"\"):]:{:\\ni0 += abs(i2)\\ni2 += int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns0 = (s2 + getCharFromString(\"\"R\"\"[:int(7.0)], mod(max(i0, i0),int(5.0))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [1, 1, 2], [1], [0, 1], [], [0], [], [], [1, 0], [], [2, 2], [], [3, 0], [0], [], [], [0], [1, 1, 1, 1], [9, 4, 7, 3], [1, 0, 0], [1], [0, 0, 3, 1, 1, 2, 3, 1, 0, 1, 3, 3, 1], [1, 0], [2, 2, 4, 2, 2], [0, 1], [1], [3, 2, 5, 3], [1], [], [0, 1], [1, 0], [], [2, 1], [0], [15], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 10, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = in0 != \"\"P\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [2], [0], [1], [0], [2], [], [], [], [], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 0, 1, 3, 1, 5, 3, 5, 7, 5, 2, 0, 3, 8, 4, 3, 8], [2, 1, 0, 2, 1, 2, 1, 0, 2, 2, 2, 1, 1, 1, 1, 0, 2, 2, 0, 0, 2, 1], [], [2, 2, 0, 2, 1, 0, 2, 2, 2, 3, 3, 2, 0, 1, 0, 2, 1, 1, 3, 0, 0, 2, 0, 3, 1, 3, 3, 0, 1, 2, 2, 2, 2, 0, 1, 0, 1, 3, 2, 2, 2, 0, 1, 2, 2, 2, 0, 0, 1, 2, 0, 3, 0, 3, 3, 2, 3, 1, 0, 1, 3, 0, 2, 2, 1, 3, 1, 0, 2, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [2, 4, 4, 2, 2, 2, 4, 3, 4, 0, 0, 4, 4], [1, 1, 1, 0, 1, 1, 2], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [5, 3, 2, 1, 0, 4, 2, 2, 1, 1], [1], [], [4, 3, 0, 4, 3, 0, 3, 0, 3, 4, 2, 4, 3, 4, 0, 3, 2, 4, 2, 0, 2, 1, 4, 0, 4, 0, 2, 4, 2, 0, 4, 0, 2, 4, 4, 4, 0, 4], [1, 2, 3, 1, 2, 3, 2, 1, 1, 3, 0, 3, 0, 1], [0, 3, 3, 5], [2, 0, 2, 0, 2, 0, 2], [0], [2], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 18, 18, 22, 0, 75, 24, 13, 7, 17, 10, 1, 0, 38, 14, 4, 7, 1, 1, 0, 0, 0], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = ( mod(i2,mod(int(0.0),i1)) - divInt(divInt(( abs(saveOrd(saveChr(divInt(i0,int(20.0))))) - i2 ),divInt(int(13.0),int(1.0))),saveOrd((in2 + (in0 + (s2 + (saveChr(i1)[i2:].lstrip() + (s1.capitalize() + (s0[mod(i1,abs(int(5.0))):].lstrip(\"\"C\"\"[abs(abs(i0)):int(3.0)])[divInt(( divInt(( i2 - int(5.0) ),i2) + int(7.0) ),saveOrd(in1.capitalize())):divInt(( divInt(i2,int(5.0)) - mod(divInt(( i1 - i1 ),int(2.0)),( i1 * len(saveChr(i1)) )) ),saveOrd(s2))] + saveChr(min(mod(min(int(0.0), i0),int(3.0)), saveOrd(s2[i2:mod(divInt(int(8.0),saveOrd(s1.lstrip(getCharFromString(getCharFromString(s1, int(4.0)).strip(saveChr(i2)), mod(int(3.0),i0))[i0:]))),int(8.0))])))[i2:]))))).capitalize()))) ) \\l i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 1], [], [0, 1], [], [0], [], [], [1], [4], [1], [0], [], [1], [], [1], [], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1], [5, 8, 7, 0, 1, 0, 8, 7, 3, 0, 6, 9, 4, 0, 7, 7], [1, 0, 2, 1, 0, 0, 0], [1], [1, 3, 1, 2, 1, 2, 0, 3, 2, 3, 1, 3, 2, 2, 1, 1, 3, 2, 2, 3, 3, 2, 0, 0, 1, 3, 2, 1, 3, 0, 0], [1, 1, 0, 0, 1, 1, 1, 0, 0], [4, 4, 4, 2, 2, 0, 4, 3], [1, 2, 0, 1, 0], [0, 0, 1, 1, 1], [4], [0, 0, 1, 1, 1, 1, 1, 1], [], [3, 3, 1, 2, 1, 4, 1, 1, 0, 1, 1], [0, 0], [], [0], [1, 0, 3, 1, 1, 1, 2, 2], [14], [25, 25, 16, 20], [3, 7], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 13, 13, 4, 1, 26, 8, 8, 4, 5, 1, 8, 0, 11, 1, 0, 1, 8, 1, 4, 2, 1], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(587.0) \\le saveOrd(((\"\"zO*\"\" + \"\"z\"\"[int(0.0):divInt(int(1.0),divInt(i1,saveOrd(getCharFromString(\"\"q\"\", ( saveOrd(\"\"u\"\") - int(08.0) )))))]) + in1))\\ni0 *= abs(( mod(int(7.0),int(306.0)) + abs(mod(mod(min(saveOrd(\"\"3\"\"), ( i2 - i1 )),int(94.0)),len(\"\"7\"\"))) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 0], [0], [1], [0], [0], [], [], [], [], [], [], [], [], [], [], [], [1], [2], [0, 0], [1], [3, 0, 1], [0], [3], [2, 2], [], [3, 2], [1], [0], [0, 1], [], [], [], [3], [], [], [], [28]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s2:{:\\ni0 *= len(\"\"]\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 2, 1], [0], [1, 2], [0], [0], [], [], [], [], [], [0, 0], [], [], [], [], [], [1], [0], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0], [1, 1, 1], [0, 1], [], [4], [2], [], [5, 3, 2], [0, 0, 1, 1], [0], [2, 0, 4, 3, 1, 1], [2], [1, 0], [2], [2, 0, 2, 2], [16], [], [8, 6, 9], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 0, 1, 0, 3, 4, 1, 6, 1, 0, 1, 4, 1, 0, 3, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= i2\\nloopBreak% = 0\\nfor in2 in in0[int(0.0):]:{:\\ns2 = (\"\"8Q6\"\" + \"\"9\"\").capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 7, 2, 2], [0, 1, 2, 0, 0, 2, 0, 2, 1, 0, 0, 0, 1, 1], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 3, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 1, 2, 1, 0, 3, 3, 1, 1, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 0, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 3, 2, 2, 1, 0, 2, 0, 1, 0, 2], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 1, 0, 1, 3, 0], [0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 2, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 2, 2, 0, 0, 2, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 13, 12, 0, 49, 13, 11, 7, 6, 5, 2, 1, 15, 3, 1, 5, 2, 1, 0, 0, 1], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s2[len(in1[len(in1):i0][i1:]):]:{:\\nres0 = getCharFromString(\"\"R\"\"[:abs(divInt(i2,int(0.0)))], ( int(7.0) + min(len(saveChr(( ( divInt(int(5.0),i0) + divInt(min(( i0 * max(int(7.0), ( int(7.0) - i2 )) ), abs(max(int(1.0), int(7.0)))),int(7.0)) ) - i0 ))), i2) ))[i1:divInt(int(9.0),max(( min(i0, i0) * divInt(divInt(int(8.0),int(5.0)),( int(0.0) - i0 )) ), int(4.0)))] not in (\"\";\"\" + in0.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 2, 1, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 2, 0, 4], [0, 1], [0], [2, 0, 0, 3, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [24], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 5, 2, 1, 7, 0, 0, 1, 2, 1, 1, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = (in1 + s2) not in \"\"Ry\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 2, 3, 2, 3, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1, 2, 2, 4, 2], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 0, 0, 1], [0], [2, 0, 0, 2, 4, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 1], [1, 0], [2, 2, 0, 0, 1], [0, 1, 3, 1, 3], [17], [16, 1], [], [20, 11]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 14, 14, 12, 0, 57, 18, 13, 6, 12, 5, 5, 1, 15, 4, 1, 3, 5, 1, 2, 0, 2], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(getCharFromString(in1, abs(i0))[min(mod(int(0.0),int(7.0)), ( int(5.0) + len(\"\"R\"\") )):]) != i1 or True ) and saveChr(divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len(\"\"q\"\"[divInt(int(1.0),i1):divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)]), i1) )),mod(int(8.0),abs(( abs(i2) - ( divInt(( int(5.0) + int(0.0) ),mod(int(4.0),i0)) * int(8.0) ) ))))) not in (\"\";b(\"\" + saveChr(mod(i0,mod(saveOrd(in0),divInt(abs(i1),i0))))).rstrip() )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 9, 6, 6, 4, 6, 5, 3, 1, 4, 5, 4, 7, 6, 3, 4, 2, 3, 4, 5, 9, 3], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 0, 2, 0, 2, 2, 0, 1, 0, 1, 1, 0, 1, 2, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 2, 3, 0, 2, 3, 2, 0, 1, 1, 2, 1, 2, 0, 1, 3, 2, 2, 1, 3, 2, 2, 2, 3, 3, 0, 3, 2, 3, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 2, 0, 0, 1, 2, 3, 0, 0, 1, 2, 0, 2, 2, 0, 2, 0, 1, 0, 1, 1, 3, 3, 1, 1, 0, 2, 3, 1, 3, 1, 0, 1, 3, 3, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1, 1, 1, 4, 2, 4, 3, 2, 3, 1, 0, 1, 0, 3, 0, 0, 3, 2, 0, 3], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1, 1, 2, 0, 2, 2, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], [0, 5, 2, 4, 2, 0, 4], [1, 1, 1, 0, 0, 0, 1, 1], [0], [2, 2, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0, 2, 2, 2, 2, 4, 2, 4, 0, 1], [0, 1, 3, 3, 1], [1, 0], [2, 0, 0, 0, 1, 0, 1, 2, 2], [0, 1, 2, 0, 0, 1, 1, 2], [25, 7, 25], [4, 5, 0], [9, 8], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 40, 24, 1, 123, 38, 28, 20, 18, 7, 8, 1, 26, 5, 2, 9, 8, 3, 3, 2, 0], "tree_depth": 48, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2[len(in1):mod(i0,abs(( int(07.0) + int(5.0) )))]):divInt(int(77.0),min(i0, divInt(( ( int(1.0) + i2 ) - divInt(len(\"\"Z\"\"),int(7.0)) ),i0)))][max(max(divInt(int(7.0),i1), divInt(len(getCharFromString(\"\"e\"\"[int(9.0):( int(8.0) - int(5.0) )], i2)),i1)), ( int(04.0) + max(( max(i2, ( ( mod(int(8.0),int(5.0)) * divInt(int(9.0),i0) ) - int(9.0) )) - max(mod(saveOrd(saveChr(i0)),( abs(mod(i0,int(2.0))) * int(2.0) )), mod(int(9.0),( i2 + int(6.0) ))) ), saveOrd((\"\"9\"\" + s2.rstrip()))) )):]:{:\\ni0 = ( divInt(int(6.0),len(\"\"HZfa\"\")) + ( ( ( abs(len(s0)) - i2 ) - max(mod(min(max(mod(int(4.0),int(6.0)), mod(min(( int(5.0) * int(3.0) ), mod(( i2 + i0 ),int(1.0))),divInt(len(saveChr(i1)[i0:].lstrip()[int(4.0):][:( i1 * ( ( i1 * ( i0 + int(5.0) ) ) + i1 ) )][int(4.0):int(7.0)][:min(min(int(6.0), int(3.0)), i2)]),mod(len(in1),int(4.0))))), abs(int(2.0))),i0), int(3.0)) ) + min(len(\"\"8\"\"), int(4593.0)) ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 1], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 7, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 1], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1, 0, 0, 1, 1, 0], [0, 1, 1], [3, 3, 0, 3, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 3, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 1, 2, 3, 0, 0, 1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 1, 3, 0, 0, 2, 0, 2, 2, 1, 3, 2, 3, 1, 2, 1, 0, 0, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 0, 3, 0, 1, 2, 1, 2, 0, 1, 4, 1, 1, 0, 3], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 0], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 0, 0, 1, 2, 7, 2, 2, 3, 2, 1, 1, 20, 20, 17, 0, 70, 17, 17, 9, 8, 6, 2, 0, 16, 3, 0, 4, 2, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[max(len(in0), i0):].startswith(in1[abs(min(mod(int(0.0),int(2.0)), mod(int(7.0),len(in1)))):]):{:\\nloopBreak% = 0\\nwhile ( i1 != ( divInt(min(int(7.0), i2),( max(abs(i0), divInt(max(( int(2.0) + int(1.0) ), ( abs(i1) + i2 )),int(7.0))) + int(7.0) )) - i1 ) or ( getCharFromString(in0[i2:int(9.0)], int(8.0))[min(int(5.0), max(i0, ( ( divInt(int(0.0),int(4.0)) + divInt(int(8.0),i0) ) * int(59.0) ))):saveOrd(saveChr(i2))].endswith((\"\"R\"\" + getCharFromString(s0, int(9.0)))) and True ) ):{:\\nres0 = max(i1, i0) \\l ( i0 - ( ( int(2.0) - max(mod(min(int(2.0), divInt(int(1.0),i1)),i1), len(\"\"1\"\")) ) * i0 ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [], [3, 3, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 1, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 2, 1, 7, 0, 0, 2, 2, 1, 0, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nres0 = ( ( len(in1[i0:]) != int(8.0) or True ) and \"\"R\"\" not in \"\";\"\" )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [0], [1], [0, 1], [0], [4], [2], [], [1], [], [1, 1, 0, 1, 1, 1, 1, 1], [0, 8, 8, 2, 1, 5, 8, 8], [0, 2, 0, 2, 2, 1, 2], [], [1, 3, 3, 0, 2, 1, 3, 3, 2, 3, 0, 3, 3, 0, 2, 0, 2, 2, 2, 1, 1, 2, 3, 3, 0, 0, 2, 3, 3, 0, 1, 1, 2, 1, 3], [0, 1, 1, 0, 0, 1, 1, 1, 0], [3, 0, 3, 3, 2, 2, 0, 3, 3, 0, 3, 4], [1, 2, 2, 1], [0, 1, 0, 1, 1], [1, 1, 1, 5], [1, 1, 1], [], [4, 2, 0, 4, 0, 4, 2, 2, 4, 0, 1, 1, 1], [0, 2, 1, 0], [], [1, 0, 1], [2, 2, 2], [], [], [3, 0, 3], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 0, 0, 8, 8, 7, 0, 35, 9, 12, 4, 5, 3, 3, 0, 13, 4, 0, 3, 3, 0, 0, 3, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = not int(0.0) \\g len(getCharFromString(s1[:min(i0, ( int(8.0) - len(s1.capitalize()) ))], len(saveChr(divInt(abs(i2),abs(min(i0, mod(i2,( ( divInt(int(82.0),int(1.0)) * mod(len(getCharFromString(s1, len(\"\"3\"\"))[:i2][i1:mod(min(len(\"\"0\"\"), i2),int(5.0))]),int(8.0)) ) * ( int(8.0) - saveOrd(\"\"3\"\") ) )))))))))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0, 1, 1], [0, 0, 0], [1, 5], [3, 3, 1, 3, 2], [1, 1, 1], [1], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 1, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2, 0, 1, 0, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 1, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 3, 2, 2, 3, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 3, 0, 2, 3, 0, 2, 3, 1, 0, 0, 0, 2, 1, 3, 3, 3], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [3, 3, 2, 2, 2, 0, 1, 2, 1, 0, 4, 2, 3, 0, 2, 3, 0, 4, 4], [0, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 3, 4, 1, 3, 0, 3], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 0, 2], [17, 12], [], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 3, 8, 3, 1, 4, 3, 1, 1, 16, 16, 15, 0, 67, 18, 19, 12, 6, 6, 3, 0, 16, 2, 0, 4, 3, 2, 0, 1, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif ( ( len(s0[len(in0):]) != i1 or False ) or in1[int(0.0):] not in s1 ):{:\\nres0 = ( abs(( i1 + int(7.0) )) \\l int(5.0) or abs(abs(i1)) \\l mod(( ( int(7.0) + i1 ) * ( min(max(i0, ( ( ( int(8.0) - i2 ) + mod(abs(int(1.0)),i1) ) * int(7.0) )), int(7.0)) + max(( ( min(saveOrd(\"\"R\"\"[int(9.0):abs(i1)]), divInt(( ( int(1.0) - int(5.0) ) * ( int(0.0) + i2 ) ),int(4.0))) + len(in0[i2:]) ) - min(i0, divInt(abs(i1),divInt(len(getCharFromString((\"\"M\"\" + saveChr(int(8.0))), i0)),i2))) ), i2) ) ),divInt(int(59.0),min(saveOrd(s0), saveOrd(\"\"4\"\")))) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [1, 0], [], [1, 0], [], [0], [], [], [2], [], [2], [], [2], [], [], [], [], [1, 1, 0, 0, 1], [8], [2, 2, 1], [1], [0, 1, 3, 3, 0, 0, 0], [1, 1], [0, 3], [0], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [0, 1], [], [1, 0], [2], [], [], [1, 1], [], [19, 6], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 1, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 += i2\\nb2 = \"\"tg\"\" == s0\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [], [0, 1], [], [0, 0], [], [], [1], [3], [1], [0], [], [1], [], [0], [], [1, 0, 1], [4, 0, 5], [1, 2], [1], [1, 3, 1], [], [4], [0], [], [], [1], [], [1], [], [], [], [0], [21], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(4.0) \\ge saveOrd(\"\"V\"\")\\ni1 += int(05.0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 0, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 2, 2, 1, 0, 2, 0, 3, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0], [3, 4, 0, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 2, 0, 4], [1], [0], [1, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 2, 1], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 3, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 14, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\";\"\":{:\\nres0 = in2 not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 2, 1, 2, 2, 0, 0, 2, 2, 2, 2], [0, 1, 1], [3, 2, 2, 0, 0, 2, 0, 3, 2, 1, 0, 0, 0, 2, 2, 2, 0, 2, 3, 1, 0, 2, 3, 2, 3, 0, 2, 2, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1, 3, 2, 2, 2, 2, 2, 0, 0, 3, 3, 1, 0, 2, 1, 3, 3, 1, 3, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 4, 0, 0, 3, 0, 0, 2, 1, 2, 4, 4, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 0, 4, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3, 1], [1, 0], [2, 2, 1, 0, 1], [0, 1, 1], [17], [12, 4], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 16, 16, 20, 0, 71, 23, 13, 12, 11, 7, 3, 1, 17, 4, 1, 4, 3, 1, 2, 0, 0], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[min(( ( i0 + i2 ) + ( i1 * saveOrd(in1) ) ), mod(int(0.0),i0)):]:{:\\nloopBreak% = 0\\nwhile in1[i1:] not in saveChr(i2)[:mod(divInt(( i1 - ( min(int(7.0), i2) + divInt(min(( len(in0[i0:divInt(divInt(int(5.0),i0),int(7.0))]) * int(6.0) ), i2),i1) ) ),( int(1.0) - min(int(7.0), min(i2, ( ( mod(int(7.0),int(9.0)) - divInt(int(8.0),i2) ) * int(5.0) ))) )),i0)].capitalize():{:\\nb1 = ( int(0.0) != abs(( mod(( divInt(( i0 + i2 ),max(abs(int(4.0)), i2)) + divInt(int(8.0),saveOrd((\"\"R\"\" + saveChr(saveOrd(s0))).rstrip())) ),int(59.0)) - min(i2, i2) )) or ( \"\"me\"\".endswith(in1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 3, 7, 7, 1, 5, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 2, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 3, 3, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 4, 0, 3, 4, 1, 4], [0, 0, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0], [0, 5, 5, 5, 3, 0, 3, 4], [1, 1, 1], [0], [2, 0, 0, 2, 4, 0, 4, 4, 2, 0, 2, 0, 1, 4, 1, 1, 0, 4, 2, 0], [3, 0, 3, 0, 3], [1, 0, 0], [2, 2, 0, 0, 1], [0, 0, 1], [17, 8], [8], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 8, 0, 33, 9, 10, 4, 5, 8, 3, 1, 20, 5, 3, 5, 3, 2, 1, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in2):]:{:\\nres0 = in2.rstrip()[len(getCharFromString(in0[i0:i2].lstrip(), len(s0[mod(i0,int(1.0)):mod(int(7.0),min(i2, ( mod(( int(3.0) + i1 ),mod(saveOrd(\"\"R\"\"),( i2 + min(len(getCharFromString(\"\"I\"\", ( int(7.0) * int(7.0) ))), divInt(saveOrd(\"\"i\"\"),int(1.0))) ))) - max(saveOrd(in0), i1) )))]))):] not in in1[:i1].lstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 5, 4, 3, 0, 4], [0, 1], [0], [2, 0, 0, 1, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 12], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 2, 1, 5, 0, 0, 1, 2, 2, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in s0[len(in2):]:{:\\nres0 = \"\"RM\"\" not in in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0, 4], [0, 0, 1, 0, 2, 0, 1, 0, 1, 1, 2], [0, 0, 0, 0], [1, 5], [3, 3, 3, 3, 3], [1, 0, 0, 1, 1], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 0, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 1, 1, 0, 2, 1, 1, 2, 2, 2, 1, 1, 2, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 1, 0, 0, 3, 2, 2, 1, 0, 2, 3, 1, 0, 1, 3, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 3], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 1, 1, 2, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 1, 3, 0, 4, 0], [1, 0, 1], [0], [2, 2, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0, 0, 0], [17, 25, 1], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 4, 11, 4, 2, 5, 5, 0, 0, 16, 16, 15, 0, 55, 15, 10, 9, 6, 8, 3, 1, 17, 2, 0, 5, 3, 3, 0, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1[len(s1):]):][i1:]:{:\\nres0 = ( ( int(0.0) != abs(mod(int(7.0),int(5.0))) or ( in0[:mod(int(7.0),min(i2, ( divInt(( int(8.0) + i1 ),( int(1.0) + i1 )) * i0 )))] not in s0[:len(getCharFromString((\"\"R\"\" + saveChr(( divInt(int(0.0),i2) - divInt(max(int(7.0), i1),int(9.0)) ))), max(i1, ( ( int(8.0) + abs(int(5.0)) ) * max(i2, divInt(( ( int(0.0) - int(4.0) ) - i2 ),( i2 * int(8.0) ))) ))))] and ( i1 \\l i1 and ( i2 \\l int(59.0) or i0 \\le saveOrd(in1) ) ) ) ) or \"\"ZB\"\".endswith(s0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [1, 0], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 2, 0, 4], [0, 1, 1], [0], [2, 1, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 3, 0], [17, 7], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 0, 4, 3, 1, 7, 0, 0, 2, 3, 2, 0, 0, 1], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in \"\"R;\"\"[len(in2):]:{:\\ni0 = saveOrd(in1[i2:])\\nres0 = in1.endswith(\"\"H\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 1, 2, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 0, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 1, 0, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 2, 3, 2], [17], [], [3, 8], [20, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 6, 0, 16, 3, 4, 2, 1, 4, 5, 1, 10, 1, 0, 4, 5, 1, 0, 2, 2], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(\"\"R\"\"):] not in getCharFromString(\"\";38\"\"[i0:int(0.0)], abs(( i2 + int(7.0) )))[mod(i2,min(i1, ( i2 + i2 ))):int(5.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 1, 2, 0, 0, 0, 1, 2, 1], [2, 2, 2], [2, 1, 0, 1, 2, 2], [0], [0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 1, 2], [0, 0], [4, 5, 3], [3, 3, 1], [0, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 7, 5, 9, 2, 1, 7, 7, 4, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 9, 4, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 0, 1, 0, 0, 0, 1, 2, 0, 2, 0], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 0, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1, 0, 1, 3, 1, 3, 3, 3, 1, 2, 3, 1, 2, 0, 3, 0, 1, 0, 2, 1, 3, 0, 3, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 3, 3, 3, 4, 4, 0, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 4, 4, 3, 0, 1, 3, 2, 4, 3, 0, 2, 5, 3, 4, 5], [1, 0, 1, 1, 1, 1, 1], [0], [2, 0, 0, 1, 0, 0, 2, 0, 2, 0, 4, 2, 1, 4, 0, 2, 0, 4, 2, 3, 0, 4, 1, 4, 2, 2, 0, 2, 0, 4, 1, 4, 1, 4, 0, 4, 3, 1, 1], [0, 1, 3, 2, 2, 0, 0, 3], [1, 0], [2, 2, 0, 2, 1, 0, 1, 2, 1], [0, 1, 0, 1, 2, 0, 1], [24, 11, 8], [9, 8, 21], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 9, 9, 3, 6, 0, 3, 0, 0, 1, 2, 8, 2, 3, 3, 2, 1, 0, 17, 17, 17, 2, 54, 15, 8, 10, 6, 12, 4, 0, 23, 4, 1, 6, 4, 2, 2, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[i1:].startswith(s0):{:\\nin1 = \"\"Y\"\"\\nloopBreak% = 0\\nwhile ( len(in1) != i1 and ( in0.endswith(s0[int(0.0):]) and True ) ):{:\\ni1 = len(s1[mod(i1,int(7.0)):mod(int(5.0),abs(i0))])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = ( divInt(( int(9.0) + i2 ),( min(len(getCharFromString(\"\"jL\"\"[i1:], divInt(min(( int(2.0) + i1 ), divInt(max(int(1.0), i2),int(7.0))),int(7.0)))), i0) * ( divInt(int(4.0),i1) - int(8.0) ) )) + abs(i0) ) \\l ( ( ( int(5.0) * int(0.0) ) - ( int(4.0) - i0 ) ) * int(8.0) )\\ni0 += i1\\nin0 = saveChr(i2)\\nloopBreak% = 0\\nwhile s2 != in1[:int(59.0)]:{:\\nin0 = (s0 + \"\"i\"\".capitalize())[i0:int(9.0)].rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0, 2, 2], [0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 1, 2, 2, 1, 1, 1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [2, 3, 2, 0, 3, 0, 1, 2, 1, 1, 3], [0, 0, 2, 2, 1, 1, 2, 2, 2, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [5, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 19, 19, 12, 0, 60, 19, 11, 10, 9, 6, 2, 0, 16, 3, 2, 4, 2, 1, 0, 0, 1], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[abs(len(in2)):] not in in1[int(0.0):]:{:\\nres0 = ( i0 != abs(i2) or ( in1.endswith(in0[int(7.0):int(5.0)].strip(saveChr(divInt(int(7.0),min(i0, ( ( divInt(int(7.0),i0) + ( len((\"\"R\"\" + s0.lstrip())) + mod(( min(max(( int(1.0) * i1 ), divInt(abs(int(7.0)),( int(7.0) * i2 ))), divInt(i0,mod(int(9.0),max(( max(i0, ( ( divInt(int(8.0),int(5.0)) - divInt(int(0.0),i1) ) - int(4.0) )) * len(\"\";\"\") ), i0)))) * int(8.0) ),( divInt(int(59.0),int(9.0)) * int(2.0) )) ) ) - int(2.0) )))))[i2:i2]) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0], [0, 1, 1], [3, 3, 0, 2, 3, 2, 1, 1, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 1, 0, 1, 2, 2, 2, 3, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [3, 2, 2, 0, 3, 0, 1, 2, 1, 2, 0, 1, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 5, 3, 0, 3, 3, 4], [1], [0], [2, 2, 0, 2, 0, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [3, 2, 3], [1, 0], [0, 2, 0, 0, 1], [3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 11, 0, 61, 19, 13, 10, 9, 7, 1, 1, 15, 3, 2, 4, 1, 0, 0, 0, 1], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0[abs(i0):mod(abs(( int(0.0) + int(7.0) )),int(2.0))]):][int(7.0):min(i2, ( divInt(( int(7.0) + i2 ),mod(len(s0),( i0 * min(max(abs(int(1.0)), i1), ( max(int(7.0), divInt(( int(7.0) - i2 ),i1)) + divInt(int(9.0),abs(divInt(min(i2, ( ( ( int(8.0) * int(5.0) ) - mod(int(0.0),i0) ) - int(4.0) )),int(8.0)))) )) ))) * max(int(59.0), i0) ))]:{:\\nres0 = in0.rstrip()[int(9.0):divInt(( mod(saveOrd(in0),int(2.0)) + int(2.0) ),i0)].startswith((\"\";\"\" + in1.lstrip()).capitalize())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2, 2], [0], [0, 0, 0], [], [], [1, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 4, 0, 4, 1], [1, 1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 1, 3, 1], [17], [15, 24], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 1, 4, 1, 3, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 13, 13, 13, 1, 50, 15, 10, 8, 7, 8, 4, 1, 16, 4, 1, 3, 4, 1, 2, 0, 1], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in1):]:{:\\nb1 = ( ( saveOrd(in1[i0:]) != int(8.0) or True ) and in1 not in \"\"R\"\" )\\ni0 = abs(mod(i2,int(4.0)))\\ns0 = getCharFromString(saveChr(mod(int(5.0),min(i0, ( divInt(( divInt(i1,( len((\"\"p\"\" + in1.capitalize()).rstrip()) + ( i2 + divInt(min(max(int(7.0), i1), ( abs(int(2.0)) * i2 )),int(1.0)) ) )) - int(7.0) ),i0) + i0 ))))[divInt(int(7.0),max(int(1.0), abs(i1))):mod(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i1 ) ),int(4.0))], i1)\\ns1 = \"\";y\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [7, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 9, 0, 1, 8, 5, 5, 7, 7, 1], [0, 0, 0, 0, 1, 2, 1, 2, 0, 0, 2, 1, 0, 1, 2, 0, 1, 2, 1], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 0, 2, 1, 0, 1, 2, 2, 3, 2, 2, 1, 2, 1, 0, 1, 2, 2, 3, 2, 1, 2, 0, 1, 1, 3, 0, 3, 0, 3, 2, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [4, 3, 2, 0, 3, 0, 1, 2, 1, 3, 0, 3, 1, 2], [2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [2, 3, 0, 1, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0, 0, 0], [17, 15, 17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 28, 28, 19, 1, 85, 29, 14, 12, 17, 5, 3, 1, 16, 3, 1, 4, 3, 3, 0, 0, 0], "tree_depth": 47, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + \"\"R\"\")[saveOrd(in1):mod(i0,int(7.0))]:{:\\nres0 = len(getCharFromString(in1[mod(i0,int(7.0)):( int(5.0) * abs(i0) )], divInt(( divInt(min(i0, ( len(saveChr(( i1 + divInt(( divInt(int(7.0),i2) * mod(min(int(4.0), i1),int(1.0)) ),int(7.0)) ))) - i2 )),i0) + ( int(7.0) * max(int(9.0), abs(i0)) ) ),( ( divInt(int(8.0),int(5.0)) - mod(int(0.0),i2) ) - int(4.0) )))[max(i1, ( int(8.0) * i0 )):int(59.0)][mod(( len((\"\"P\"\" + in0.rstrip())) + ( mod(int(9.0),mod(int(2.0),i1)) + int(2.0) ) ),( divInt(min(mod(int(9.0),mod(i2,int(0.0))), int(1.0)),len(\"\"R\"\")) - i0 )):]) != max(i1, abs(mod(divInt(int(8.0),i2),int(557.0))))\\ni1 = int(71.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 9, 1, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 0, 3, 1, 8, 6, 2, 1, 6, 7], [2, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 0], [0, 1, 1], [3, 1, 2, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1, 2, 2, 0, 3, 1, 2, 1, 2, 1, 3, 1, 3, 1, 2, 3, 2, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0], [4, 1, 2, 0, 3, 0, 1, 2, 1, 4, 3, 0], [0, 2, 0, 2, 0, 0, 0, 2, 2, 1, 2, 2, 0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [3, 5, 3, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 4, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 1], [17], [9], [1], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 28, 28, 14, 1, 71, 23, 12, 13, 10, 6, 3, 0, 16, 3, 1, 4, 3, 1, 1, 1, 0], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif in0[saveOrd(in2):] not in getCharFromString(in0, int(09.0))[( int(1.0) + max(mod(i2,int(7.0)), ( int(4.0) * abs(i2) )) ):]:{:\\nres0 = ( mod(( divInt(min(i2, ( len(in1[( i0 + divInt(( divInt(int(1.0),i1) * divInt(min(int(7.0), i2),int(7.0)) ),int(9.0)) ):i1]) + i2 )),( int(8.0) + max(int(5.0), abs(i0)) )) + ( ( mod(int(0.0),int(4.0)) * divInt(int(8.0),i0) ) * int(59.0) ) ),int(9.0)) != int(2.0) or ( in0[( ( i0 - max(int(2.0), divInt(int(0.0),( int(3.0) * saveOrd(saveChr(int(1.0))) ))) ) * len((\"\"R\"\" + s0.rstrip())) ):int(8.0)].endswith(\"\"1j\"\") and True ) )\\n:}else:{:\\ni1 = divInt(min(( i0 + int(6216.0) ), i0),int(7.0))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 1, 2, 1, 0, 1, 1, 0], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 0, 3, 0, 4, 0, 1, 0, 1], [0, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 0, 3, 0, 4], [1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [9], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = \"\"J\"\"[min(i2, int(0.0)):] not in s0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 1, 1], [0], [2, 0, 4, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 3], [1, 0], [2, 0, 0, 0, 1], [0, 1, 1, 3], [17], [21, 3], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 7, 0, 34, 9, 9, 3, 6, 5, 4, 1, 15, 4, 2, 3, 4, 1, 2, 0, 1], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(getCharFromString(in1[len(in1):abs(i0)], min(mod(int(0.0),int(7.0)), ( int(5.0) + len(\"\"R\"\") )))):]:{:\\nres0 = saveChr(i1) not in \"\"vd\"\"[divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len((\"\";\"\" + in0.lstrip()).rstrip()), divInt(int(1.0),i1)) )),divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)):i1]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 0, 0, 0], [2, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0, 2], [1, 1, 1], [3, 3, 0, 1, 3, 1, 0, 2, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 4, 3, 0, 1, 2, 1], [0, 1, 0, 1, 2, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 1, 4], [1, 1], [0], [2, 0, 0, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 9, 9, 11, 1, 36, 9, 8, 6, 4, 6, 2, 0, 17, 3, 1, 5, 2, 1, 0, 0, 1], "tree_depth": 32, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile s0[len(in2):] not in in1[:len(getCharFromString(in1[:i0], int(0.0))[abs(int(7.0)):i1][mod(i2,int(5.0)):saveOrd(saveChr(i2))])]:{:\\nres0 = ( mod(( mod(int(7.0),i1) + ( len((\"\"R\"\" + in0.rstrip())) - divInt(i2,( min(( int(2.0) + i1 ), ( max(int(1.0), i0) - int(7.0) )) * int(7.0) )) ) ),i0) != i0 or ( \"\";\"\".endswith(s1) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 -= abs(int(9.0))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 2, 1], [0, 1, 1], [1, 2, 2, 3, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 0, 0, 3, 0, 0, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [2, 5, 4, 4, 3, 0, 4], [1, 0, 1], [0], [2, 0, 1, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0, 3, 2], [17], [], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 0, 0, 6, 2, 1, 2, 0, 3, 3, 1, 6, 0, 0, 2, 3, 1, 0, 1, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in in2[int(0.0):]:{:\\nb1 = \"\"R\"\" in in1[( ( len(\"\";2\"\") + int(7.0) ) + int(5.0) ):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [1, 0], [], [0, 0], [], [0], [], [], [3, 2, 1, 1], [4], [0, 0, 2, 0, 0, 1, 0], [0], [2], [2, 3, 3, 0, 0], [1, 0], [1, 1], [], [1, 1, 1, 1, 1, 1, 1, 1], [3, 9, 9, 6, 6, 8, 9, 0], [1, 2, 2, 1, 0, 1, 2, 2, 0, 0, 2, 1, 2], [], [2, 2, 3, 2, 2, 2, 2, 3, 3, 2, 2, 2, 1, 3, 2, 3, 1, 1, 1, 3, 3, 3, 3, 1, 0, 2, 1, 3, 0, 2, 0, 0, 0, 2, 0, 0, 1, 2, 1, 0, 2, 2, 2, 0, 0, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0], [2, 3, 3, 3, 2, 4, 1, 4, 1, 0, 1, 3], [0, 0, 2, 0, 0, 1, 0, 2, 0, 1, 1, 0, 2], [1, 0, 1, 0], [0, 0, 2, 4, 0, 0, 4], [1, 1, 1], [], [1, 1, 0, 1, 2, 4, 0, 2, 0, 0, 4], [0, 1], [], [1, 2], [3, 3, 3], [], [], [], [9, 30, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 4, 1, 7, 1, 1, 5, 2, 0, 0, 8, 8, 13, 0, 50, 17, 12, 13, 4, 4, 3, 0, 11, 2, 0, 2, 3, 0, 0, 0, 3], "tree_depth": 44, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = not ( \"\"&\"\" == \"\"_\"\" or ( b2 and ( ( abs(( ( ( ( len(s0) + len(\"\";\"\") ) + ( mod(( int(3.0) * len(getCharFromString(s0, ( abs(int(9.0)) + int(9.0) ))[:int(6.0)]) ),saveOrd(s2[max(saveOrd(in1), max(int(6.0), i1)):])) + divInt(int(8.0),min(i2, ( i2 - i1 ))) ) ) + i0 ) * mod(i1,i2) )) + int(9.0) ) - ( int(0.0) - i2 ) ) \\le ( divInt(( i0 + i0 ),max(len(saveChr(i2)), i1)) * i2 ) ) )\\nb1 = b1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 0, 0, 4, 8, 5, 9, 9, 2, 2, 5, 2, 8, 8], [0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 1], [0, 1, 1], [3, 3, 1, 1, 3, 2, 3, 2, 2, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 0, 0, 2, 3, 1, 0, 1, 1, 1, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 2, 1, 2, 1, 0, 1, 0, 0, 0, 2, 3, 0, 2, 1, 1, 3, 2, 2, 3, 2, 2, 1, 3, 3, 0, 3, 2, 1, 1, 1, 3, 1, 2, 2, 2, 3, 3, 1, 2, 2, 3, 2, 1, 1, 0, 2, 0, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 1, 3, 0, 4, 3, 0, 4, 2, 4, 3], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2, 0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4, 5], [1, 1, 1, 0, 1, 1], [0], [2, 0, 0, 2, 1, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 2, 1, 2, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1, 2], [0, 0, 2, 1, 3, 3], [17, 8], [8], [0], [20, 2]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 23, 23, 19, 0, 92, 32, 19, 14, 18, 8, 6, 1, 22, 3, 1, 6, 6, 2, 1, 1, 2], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = \"\"R\"\"[:len(in1)].endswith(getCharFromString(in0[int(0.0):int(7.0)], max(mod(min(mod(( divInt(len(saveChr(i0)),( divInt(( int(5.0) + i2 ),( min(mod(i1,( i0 + mod(i1,i2) )), mod(max(int(7.0), i1),int(2.0))) - int(1.0) )) - int(7.0) )) + i2 ),( int(7.0) * abs(int(9.0)) )), max(i0, ( ( divInt(divInt(int(8.0),( int(0.0) - i0 )),int(0.0)) - i0 ) * i2 ))),i2), divInt(max(i2, ( int(4.0) + int(8.0) )),len((\"\"I\"\" + s0.rstrip())))))[divInt(divInt(min(mod(( int(59.0) + saveOrd(\"\"0\"\") ),len(in1)), i2),min(divInt(int(9.0),int(2.0)), int(2.0))),saveOrd(\"\"i;\"\"[:int(5.0)])):( ( mod(abs(saveOrd(\"\"\\\\\\t\"\"[int(2.0):])),divInt(( len(in2) - mod(int(8.0),int(8.0)) ),i2)) * divInt(i2,i0) ) + i1 )])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 6, 5, 7, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 3, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 0, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1], [0, 0, 2, 0, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [3, 5, 4, 4, 3, 4, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 2, 1, 0], [0, 1, 3], [1, 0], [2, 2, 1, 0, 1], [0, 1], [17], [2], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 6, 11, 0, 34, 9, 8, 6, 3, 6, 2, 1, 16, 3, 1, 5, 2, 1, 1, 0, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):] not in getCharFromString(in1[i2:int(0.0)], len(saveChr(mod(i0,int(6.0)))))[:divInt(min(len((\"\"R\"\" + \"\"c\"\"[:i1].rstrip())), ( divInt(( min(i1, ( max(( i0 + ( i1 + ( int(5.0) * i0 ) ) ), i1) + min(int(7.0), i1) )) + int(2.0) ),int(5.0)) * i0 )),i1)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 0], [0], [2, 0], [0], [0, 0], [], [], [0, 2], [2], [2, 0], [], [5], [1], [], [0], [], [0, 1, 1], [4, 4, 3], [2, 0, 2, 1, 0], [], [1], [], [], [], [], [2, 0, 0, 4], [1], [0], [2, 0, 0, 3, 0, 1], [1], [], [2], [2], [], [], [4], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 4, 1, 0, 6, 0, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s0[int(44.0):]\\nb0 = s0.endswith((in1 + \"\"4\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 4, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 2, 4, 2, 0, 4], [1, 0, 1, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0, 0, 0, 2], [25, 19, 15], [], [4], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 10, 10, 6, 0, 33, 9, 9, 3, 6, 6, 4, 1, 15, 3, 1, 3, 4, 3, 0, 1, 0], "tree_depth": 30, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(s2):len(in1[saveOrd(s2):])]:{:\\nres0 = \"\"Z\"\" not in getCharFromString(\"\"TP\"\"[i0:min(mod(int(07.0),int(5.0)), ( int(7.0) + len(saveChr(i1)) ))], divInt(divInt(( int(7.0) + i2 ),( max(int(1.0), i0) - max(len((\"\"4\"\" + s0.rstrip())), divInt(int(7.0),i1)) )),divInt(max(int(7.0), divInt(int(9.0),int(8.0))),i2)))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 1], [0, 1, 1], [3, 3, 0, 3, 1, 2, 3, 1, 2, 2, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 4, 3, 0, 4, 4], [1, 1, 1], [0], [1, 0, 0, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [0, 2, 0], [17, 21], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 10, 0, 50, 16, 11, 9, 7, 8, 3, 1, 16, 2, 0, 3, 3, 2, 0, 1, 0], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in \"\"R\"\":{:\\nloopBreak% = 0\\nwhile in2 not in in1:{:\\nres0 = ( len(in1[len(in0):]) != i1 or ( s0[abs(int(0.0)):].endswith(in1[mod(min(int(3.0), mod(( len(getCharFromString((\"\"6\"\" + saveChr(i1)), divInt(( ( int(5.0) + i1 ) + ( min(max(i1, ( abs(divInt(int(7.0),i0)) * ( max(int(2.0), i2) - int(1.0) ) )), int(7.0)) + i1 ) ),divInt(divInt(int(7.0),saveOrd(in1)),int(9.0))))) * len(\"\"V\"\") ),i1)),( ( ( int(8.0) - int(5.0) ) - mod(int(0.0),i2) ) * int(4.0) )):i1]) and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 2, 1, 2, 0, 1, 2, 0, 1, 2, 1], [2, 2, 0, 0, 2], [0, 1, 2, 1, 1, 0, 1], [0, 0], [0, 0, 0], [], [], [1, 2, 2, 3], [5, 2], [1, 0, 0, 2, 1, 0, 2], [0, 0], [2, 5], [0, 3, 0], [1], [], [], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 2, 9, 9, 6, 3, 0, 6, 0, 7, 9, 8, 4, 3, 8, 8, 7, 2, 5], [0, 2, 0, 0, 1, 0, 0, 2, 2, 1, 0, 2, 0, 1, 1, 0, 2, 1, 1, 1, 0, 0, 2, 0], [0, 1, 1, 0], [1, 3, 1, 0, 3, 1, 0, 1, 2, 3, 0, 3, 1, 1, 3, 0, 0, 3, 0, 3, 1, 3, 2, 0, 0, 0, 2, 1, 3, 3, 0, 0, 1, 2, 1, 3, 0, 0, 2, 1, 2, 1, 0, 3, 3, 0, 2, 1, 2, 1, 2, 1, 1, 0, 3, 0, 3, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 2, 1, 3, 1, 2, 0, 4, 4, 4, 3, 4], [1, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0], [2, 5, 3, 0, 4, 3, 4, 1, 5], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0], [4, 0, 3, 2, 2, 1, 2, 2, 1, 4, 0, 0, 4, 2, 4, 1, 1, 2, 4, 4, 3, 0, 4, 4, 4, 2, 1, 0, 2, 0, 2, 1, 2, 1, 3, 4, 4, 1, 3, 1, 1, 1, 1], [1, 3, 0, 0, 3, 1, 0, 3, 3, 2, 2], [5, 0, 3, 5], [1, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0, 1, 1, 1, 0, 0, 3, 2, 2, 1, 0, 1, 3, 0, 1, 1, 2, 3], [19, 14, 24, 14, 20], [8, 16, 16, 5, 0, 24, 18], [9, 8, 3], [14, 10, 31]], "fitness": 9223372036854775807, "mapping_values": [1, 12, 12, 5, 7, 2, 3, 0, 0, 4, 2, 7, 2, 2, 3, 1, 0, 0, 20, 20, 24, 4, 60, 9, 15, 3, 8, 9, 18, 2, 43, 11, 4, 10, 18, 5, 7, 3, 3], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = int(1.0) != min(int(5.0), i0)\\nloopBreak% = 0\\nwhile b2:{:\\nloopBreak% = 0\\nwhile ( saveChr(min(int(2.0), i2)) == s2 or int(99630.0) == divInt(min(i0, min(int(6.0), int(0.0))),abs(i0)) ):{:\\ni1 = i0\\nloopBreak% = 0\\nfor in2 in (\"\"T\"\"[max(i0, len(\"\"i\"\"[:int(7.0)][:max(divInt(i2,i2), i1)])):divInt(int(9.0),abs(min(i0, i2)))][:int(8.0)] + in0.strip(s0)):{:\\nin1 = getCharFromString(getCharFromString(\"\"q\"\", mod(int(4.0),saveOrd(\"\"q\"\")))[i0:], i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 -= mod(int(3.0),mod(int(8.0),i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor in0 in saveChr(saveOrd((in1 + getCharFromString(\"\"O\"\"[saveOrd(s1):i2].strip(in2[( int(8.0) - divInt(int(7.0),divInt(int(2.0),int(5.0))) ):]).lstrip(\"\"Y\"\"[:i1]), len(\"\"+\"\"[:i1]))))).lstrip()[saveOrd((\"\"9\"\".capitalize().capitalize() + (\"\"8f\"\" + \"\"O\"\"))):i1]:{:\\ni0 -= i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = res0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile \"\"a\"\\\\\"U\"\".endswith(\"\"ys3`\"\"):{:\\ni2 = i0\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [2, 0, 0, 0, 0, 2, 1, 2, 2, 0, 1, 2, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], [1, 2, 1, 2, 2, 2, 1, 2], [0, 1, 2, 0, 2, 1, 0, 0, 0, 2, 0, 0, 2, 0, 2], [0], [0, 0, 0, 0, 0, 0, 0, 0], [], [], [3, 2, 3, 1, 3, 0, 2, 2, 3, 1, 1], [5, 0, 0, 2, 5, 5, 4, 3, 1, 0], [2, 0, 1, 0, 2, 0, 1, 1, 1, 0, 2, 1, 1, 1, 1, 2, 0, 0, 1, 1, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 5, 2, 0, 5], [3, 3, 1, 0, 0, 2, 3, 0], [1, 0, 1], [0], [1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 7, 4, 4, 0, 4, 4, 9, 2, 1, 3, 4, 0, 5, 3, 9, 1, 0, 5, 1, 9, 9, 3, 8, 7, 3, 9, 0, 7, 6, 1, 9, 3, 8, 0, 1, 8, 5, 0, 5, 6, 3, 5, 8, 8, 5, 1, 2, 1, 8, 7, 2, 6, 2, 1, 2, 4, 9, 4, 3, 8, 4, 3, 5, 6, 4, 0, 1, 1, 1, 7, 3, 3, 1, 2, 9, 5, 2, 1, 7, 8, 8, 3, 6, 1, 8, 4, 9, 1], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 1, 2, 1, 2, 2, 2, 0, 0, 2, 1, 1, 2, 0, 0, 2, 2, 1, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 2, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 2, 2, 0, 1, 1, 1, 2, 1, 2, 1, 0, 2, 2, 0, 2, 1, 0, 0, 0, 0, 0, 2, 1, 0, 0, 1, 1, 0, 1, 1, 2, 2, 0, 1, 1], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 3, 2, 2, 1, 3, 2, 3, 1, 2, 0, 1, 0, 2, 3, 2, 3, 3, 1, 1, 2, 3, 2, 3, 3, 1, 3, 3, 3, 1, 1, 3, 2, 1, 2, 3, 2, 0, 1, 2, 2, 3, 1, 3, 3, 3, 1, 2, 0, 0, 2, 0, 1, 0, 0, 0, 1, 3, 2, 3, 3, 1, 1, 0, 2, 3, 2, 3, 1, 3, 1, 3, 2, 1, 2, 0, 2, 0, 2, 0, 3, 2, 0, 1, 0, 2, 1, 2, 2, 3, 1, 1, 3, 1, 1, 3, 1, 2, 3, 1, 3, 1, 1, 0, 0, 3, 1, 2, 0, 2, 1, 1, 2, 3, 0, 2, 0, 1, 0, 0, 1, 0, 2, 2, 3, 0, 3, 3, 1, 2, 1, 3, 2, 2, 2, 0, 2, 1, 2, 3, 0, 3, 1, 0, 0, 1, 3, 3, 1, 0, 2, 0, 2, 2, 3, 2, 2, 2, 2, 3, 0, 1, 0, 2, 3, 3, 2, 0, 2, 0, 3, 2, 0, 0, 3, 2, 1, 3, 3, 3, 1, 1, 2, 1, 0, 2, 1, 3, 0, 1, 0, 3, 0, 0, 1, 0, 2, 3, 2, 0, 2, 2, 0, 3, 0, 1, 0, 1, 3, 2, 1, 1, 2, 0, 1, 2, 2, 0, 0, 0, 1, 2, 2, 2, 0, 3, 1, 2, 2, 1, 1, 2, 2, 1, 0, 2, 3, 2, 0, 3, 2, 3, 2, 3, 1, 1, 3, 3, 2, 2, 1, 2, 2, 3, 0, 2, 0, 3, 0, 3, 0, 0, 0, 2, 2, 2, 2, 1, 2, 1, 1, 3, 3, 2, 3, 2, 0, 1, 0, 1, 0, 1, 3, 0, 1, 1, 0, 3, 3, 2, 0, 1, 0, 0, 1, 3, 0, 0, 2, 0, 3, 2, 3, 0, 1, 2, 0, 2, 2, 0, 1, 1, 3, 1, 1, 1, 3, 0, 0, 0, 3, 3, 1, 3, 2, 0, 3, 3, 1, 0, 0, 3, 0, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 1, 3, 1, 2, 4, 0, 1, 0, 2, 3, 1, 4, 4, 0, 4, 4, 4, 4, 2, 0, 0, 3, 4, 1, 0, 3, 3, 0, 2, 3, 4, 4, 0, 1, 0, 3, 1, 4, 1, 1, 0, 0, 3, 3, 1, 4, 1, 4, 4, 2, 3, 0, 2, 3, 1, 4, 0, 2, 2, 0, 2, 1, 1, 2, 1, 0, 1, 2, 4, 4, 4, 2, 1, 4, 3, 1, 4, 2, 2, 0, 1, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 1, 2, 0, 0, 1, 0, 1, 2, 0, 1, 2, 0, 0, 1, 1, 2, 0, 1, 1, 0, 2, 2, 2, 2, 1, 2, 0, 1, 1, 0, 1, 1, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0], [2, 5, 1, 0, 3, 0, 4, 3, 1, 0, 1, 4, 1, 5, 0, 5, 4, 2, 1, 3, 0, 5, 3, 3, 2, 0, 5, 2, 5, 1, 3, 3, 0, 2, 0, 1], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [2, 3, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0, 2, 4, 4, 4, 4, 1, 1, 4, 4, 0, 4, 4, 0, 3, 4, 0, 0, 2, 0, 0, 2, 3, 2, 1, 4, 0, 0, 0, 1, 0, 3, 1, 0, 2, 1, 1, 2, 1, 3, 1, 0, 4, 2, 2, 4, 0, 0, 0, 4, 2, 2, 1, 1, 1, 4, 4, 0, 4, 1, 4, 2, 0, 2, 1, 2, 4, 1, 0, 1, 2, 1, 1, 4, 0, 0, 2, 0, 1, 0, 2, 4, 0, 2, 3, 2, 2, 4, 2, 1, 3, 3, 4, 1, 4, 4, 1, 1, 2, 0], [0, 1, 3, 2, 1, 1, 0, 1, 3, 0, 0, 3, 2, 0, 3, 0, 0, 0, 1, 3, 0, 0, 0, 2, 3, 0], [1, 0, 3, 1, 3, 1], [2, 2, 0, 0, 1, 0, 2, 2, 0, 2, 2, 2, 2, 1, 2, 1, 0, 0, 1, 1, 1, 2, 0, 1], [0, 2, 3, 3, 3, 1, 1, 2, 3, 2, 3, 2, 2, 1, 1, 1, 1, 0, 3, 1, 3, 1, 1, 2, 2, 0, 0, 0, 0, 3, 2], [17, 4, 4, 1, 23, 12], [16, 0, 22, 12, 2, 0, 3, 18, 8], [0, 6, 4, 8, 8, 1, 2, 3], [20, 23, 23, 15, 6, 8, 20, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 23, 23, 8, 15, 0, 8, 0, 0, 11, 10, 23, 10, 5, 8, 3, 1, 3, 107, 107, 94, 2, 386, 109, 91, 65, 45, 36, 31, 0, 116, 26, 6, 24, 31, 6, 9, 8, 8], "tree_depth": 79, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif (s2 + (in2 + s1))[len(s0[i0:]):] not in in0[i2:int(1.0)]:{:\\nres0 = ( max(mod(i2,int(7.0)), mod(int(5.0),abs(i0))) != ( divInt(( min(i1, divInt(len(getCharFromString((\"\"R\"\" + saveChr(( i2 + ( divInt(( int(7.0) + i1 ),divInt(min(int(4.0), i2),int(1.0))) * int(7.0) ) ))), i0)),i0)) - mod(int(7.0),max(int(9.0), abs(i0))) ),( ( ( int(8.0) + int(5.0) ) * divInt(int(0.0),i0) ) - int(4.0) )) - mod(max(max(mod(( int(8.0) * len(s0) ),( max(int(59.0), divInt(i1,int(9.0))) + i2 )), ( abs(( saveOrd(\"\"0\"\") + min(int(2.0), int(2.0)) )) - mod(max(( min(abs(int(7.0)), len(in1)) - max(saveOrd(saveChr(int(4.0)).capitalize().rstrip()[int(4.0):saveOrd(saveChr(( int(0.0) * mod(min(( i1 + int(4.0) ), divInt(mod(saveOrd(\"\";\"\"),int(4.0)),saveOrd(\"\">\"\"))),saveOrd(getCharFromString(saveChr(saveOrd(in0)), int(9.0)))) )))]), ( i2 + i2 )) ), mod(i2,int(2.0))),i0) )), i0),i2) ) or ( getCharFromString(s1, int(1.0)).lstrip().endswith((getCharFromString(s0, abs(mod(min(min(int(3.0), int(4.0)), i1),( len(s1) - mod(saveOrd(in1[:int(0.0)]),max(int(5.0), min(( int(3.0) + ( i1 - ( i2 * mod(i0,len(s1)) ) ) ), ( i0 + int(9.0) )))) )))) + (\"\">\"\"[i2:] + in2.lstrip(s0))[( int(1.0) - ( ( len(in2) * int(0.0) ) + int(5.0) ) ):min(int(1.0), int(9.0))])) and True ) )\\n:}else:{:\\ni2 = abs(int(9.0))\\nin1 = \"\"qa6,4\"\"\\nb2 = divInt(len(s2),int(38.0)) \\l saveOrd((\"\"#88\"\" + s1))\\nloopBreak% = 0\\nwhile int(73.0) \\l int(9.0):{:\\nin0 = \"\"w\"\"[i1:]\\nif i1 == saveOrd(\"\"m\"\"):{:\\nloopBreak% = 0\\nwhile res0:{:\\ni2 += int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = \"\"c\"\"[( i1 - ( int(7.0) - int(6.0) ) ):mod(min(i1, ( i1 * int(1.0) )),i1)] == (\"\"a\"\" + s0)\\nloopBreak% = 0\\nwhile i0 != int(93.0):{:\\nloopBreak% = 0\\nwhile i0 != mod(( max(i0, min(len(getCharFromString(in2, int(8.0))[( int(0.0) + max(( divInt(( i0 - mod(int(1.0),divInt(saveOrd(in0),i1)) ),max(int(8.0), i1)) - i0 ), int(5.0)) ):][max(min(int(0.0), i1), ( i0 + ( ( min(( ( ( ( len(in0) * i0 ) * int(5.0) ) * i0 ) * ( len(\"\"E\"\"[max(divInt(i0,( i0 - saveOrd(\"\"%\"\") )), mod(i2,i2)):][max(mod(int(6.0),saveOrd(\"\"d\"\")), saveOrd(getCharFromString(getCharFromString(s2, abs(int(3.0))), int(5.0)))):].rstrip()) * mod(int(8.0),i2) ) ), ( int(8.0) + len(getCharFromString(\"\";\"\", i1)) )) - int(5.0) ) - i1 ) )):].capitalize()), min(i2, i0))) + int(1.0) ),i0):{:\\nif ( abs(( i0 - ( divInt(i1,len(saveChr(i0))) - int(2.0) ) )) + i2 ) \\le int(1.0):{:\\nres0 = max(mod(int(8.0),int(7.0)), ( i2 * int(2.0) )) \\ge divInt(divInt(i0,i1),i1)\\n:}else:{:\\nb0 = s0[:int(6.0)] in \"\"s\"\"[( ( mod(i1,saveOrd(\"\"i\"\".lstrip(in2)[:int(2.0)])) - ( ( int(1.0) - int(2.0) ) - divInt(mod(int(4.0),i2),( min(( i1 * abs(mod(abs(( min(int(9.0), int(4.0)) + abs(max(( mod(int(3.0),divInt(( max(i2, ( i1 + abs(i0) )) + max(i2, i2) ),i0)) + ( mod(mod(( int(8.0) - divInt(int(4.0),int(3.0)) ),min(max(( abs(( i2 * int(5.0) )) * i1 ), int(6.0)), i0)),int(4.0)) - saveOrd(\"\"1\"\") ) ), i0)) )),int(0.0))) ), int(1.0)) + i0 )) ) ) + saveOrd(\"\"2\"\"[saveOrd(\"\"E\"\"):( i0 - int(1.0) )]) ):]\\n:}\\ns2 = getCharFromString(in2, i0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nb2 = b2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = not i2 \\g int(173312.0)\\n:}\\nloopBreak% = 0\\nwhile abs(i1) \\l i0:{:\\ns1 = in0\\nb1 = ( b1 or in0[divInt(i0,max(( saveOrd(\"\"B\"\") + i1 ), int(95.0))):( i1 + ( ( i0 - int(2.0) ) + int(178.0) ) )].endswith(s0) )\\ns2 = getCharFromString(s0, len((getCharFromString(\"\"X\"\"[int(8.0):int(3.0)], int(6.0))[max(i1, i1):][:i2] + ((\"\"M\"\".capitalize() + getCharFromString(\"\"-\"\", saveOrd(\"\"3\"\")).rstrip()) + s1[:abs(int(1.0))]))[:abs(divInt(i2,min(max(int(8.0), i0), i1)))]))[:max(i1, divInt(int(49.0),int(1.0)))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [1, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 2, 0, 2, 0, 1, 1, 0, 1, 0, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 3, 3, 2, 0, 2, 2, 0, 2, 2, 0, 3, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0], [3, 3, 2, 0, 3, 1, 1, 3, 1, 1, 3, 0, 0, 4], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 5, 4, 4, 0, 0, 4], [1, 1, 1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 2, 2, 2], [17], [], [8, 5, 7], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 2, 6, 2, 1, 3, 2, 1, 0, 14, 14, 21, 0, 73, 24, 14, 10, 14, 6, 5, 1, 16, 3, 1, 3, 5, 1, 0, 3, 1], "tree_depth": 51, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile len(in1[abs(i0):]) != min(mod(int(0.0),int(1.0)), ( int(5.0) + len(s0) )):{:\\nres0 = ( i1 \\l divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len(\"\"R\"\"), divInt(int(1.0),i1)) )),divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2)) or ( getCharFromString(\"\";\"\"[i1:mod(int(8.0),max(divInt(len(saveChr(i2)),( mod(mod(int(5.0),int(0.0)),mod(int(4.0),i0)) - int(8.0) )), ( min(min(( i0 + mod(( i2 * ( mod(i0,saveOrd((\"\"8\"\" + s0.rstrip()))) - ( i2 - mod(i0,i1) ) ) ),i1) ), i0), ( i1 * i0 )) + i0 )))], i0) not in \"\"57\"\" and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 1, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 3, 3, 3, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 1, 3, 1, 0, 1, 0, 0, 0, 2, 1, 2, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 4, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 5, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 3], [1, 0], [2, 2, 1, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 8, 0, 31, 8, 10, 3, 5, 7, 2, 1, 16, 3, 2, 4, 2, 1, 0, 0, 1], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in1[len(in0):].endswith(in2[mod(int(0.0),i0):mod(i2,abs(min(len((\"\"R\"\" + in1.lstrip()).rstrip()), min(i2, i0))))].capitalize()[:( divInt(int(7.0),i1) + divInt(max(divInt(i2,( abs(( saveOrd(\"\";\"\") + i1 )) * int(1.0) )), min(int(7.0), i2)),int(6.0)) )])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [1], [], [1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 0, 1], [0, 9, 6, 9, 5, 6, 8, 2], [2, 2, 0, 0, 2, 0, 1, 2, 1, 1, 2], [1], [3, 3, 2, 1, 2, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 0, 2, 2, 3, 0, 2, 2, 2, 0, 1, 1, 3, 2, 3, 1, 0, 0, 0, 3, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 1, 3, 2, 3, 4, 2, 1, 0, 1], [2, 0, 0, 0, 0, 2, 2, 2, 0, 2], [0, 1, 0, 1], [5, 1, 1, 2], [1, 1], [], [3, 0, 0, 4, 4, 1, 2, 0, 4, 2, 0, 2, 4, 1], [0, 3, 3, 2, 1], [4, 0], [2, 2, 1], [1, 1], [], [17, 0], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 11, 1, 38, 11, 11, 10, 2, 4, 2, 0, 14, 4, 2, 3, 2, 0, 2, 0, 0], "tree_depth": 41, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 *= max(len((in2 + s1)), ( int(0.0) + ( ( abs(( max(len(getCharFromString(\"\"r\"\".rstrip(s1[abs(len(s2[( i2 + i0 ):].lstrip())):]), i0)), ( ( saveOrd(\"\"a\"\".capitalize()[:i2]) + ( divInt(( i0 + int(9.0) ),int(6.0)) * abs(mod(max(int(9.0), i1),i2)) ) ) * i1 )) * min(i1, int(5.0)) )) + i2 ) * int(6.0) ) ))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1], [2, 1, 1, 0, 1, 2, 0, 0], [0, 0], [1, 1, 1, 1, 0, 1], [0, 0], [0, 0, 0], [], [], [0], [], [2], [], [1], [], [], [], [], [1, 1, 1, 1, 1, 1, 1], [6, 9, 1, 7, 2, 1, 7], [2, 0, 2, 0, 0, 0, 1, 1, 1, 2, 1], [1, 0, 0, 0, 1], [1, 3, 1, 0, 3, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 3, 0, 0, 1, 0], [0, 1, 0, 0], [0, 3, 1], [1, 1, 1, 0, 2], [1], [4, 2, 1], [0, 0, 1, 0, 0, 1, 1, 1], [0, 0], [1, 4, 4, 0, 1, 3, 4, 2, 4, 1, 1], [1, 0, 2, 3], [2], [2], [1, 0, 1, 3, 3, 1, 2, 1], [16], [8, 3, 5, 24], [5], [11, 29]], "fitness": 9223372036854775807, "mapping_values": [1, 8, 8, 2, 6, 2, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 11, 5, 20, 4, 3, 5, 1, 3, 8, 2, 11, 4, 1, 1, 8, 1, 4, 1, 2], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in \"\"iQd\"\":{:\\ni2 -= int(6.0)\\ni0 = min(int(9.0), i2)\\ni0 = len(saveChr(int(1.0)))\\ni0 = i0\\nloopBreak% = 0\\nfor s2 in getCharFromString(s1, int(7.0)):{:\\nb0 = \"\"(^f\"\" not in (\"\"5\"\".strip()[( mod(int(2.0),i1) - ( int(1.0) - ( max(i1, i1) + int(7.0) ) ) ):].capitalize() + \"\"y\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni2 *= i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 3, 4, 3, 0, 4], [1, 1, 1, 1], [0], [2, 0, 0, 2, 0, 3, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 0, 1], [17, 3], [14], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 6, 0, 33, 9, 9, 3, 6, 5, 4, 1, 16, 3, 1, 3, 4, 2, 1, 0, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in0):]:{:\\nres0 = in1[len((\"\"R\"\" + getCharFromString(\"\";\"\"[abs(i0):min(mod(int(0.0),int(7.0)), ( int(5.0) + len(saveChr(i1)) ))], divInt(divInt(( int(7.0) + i2 ),( max(int(7.0), i0) - max(len((\"\"D\"\" + in0.rstrip())), divInt(int(1.0),i1)) )),divInt(max(int(7.0), divInt(int(7.0),int(9.0))),i2))))):].startswith(\"\"o\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [2, 0, 0, 0, 0, 2, 0, 1, 2, 0], [0, 2, 2], [0, 1, 2, 2, 2, 2, 0], [0], [0, 0, 0, 0, 0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 2, 2], [0, 0], [5, 5, 5, 4], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 9, 1, 4, 4, 0, 3, 7, 1, 0, 3, 0, 8, 0, 2, 9, 9, 5, 8], [0, 1, 2, 0, 1, 2, 1, 0, 0, 0, 2, 1, 0, 0, 2, 2, 0, 2, 1, 2, 1, 0, 0, 0, 1, 1, 2, 2, 1, 1, 0, 2, 0, 0, 1, 0, 1, 1, 2, 0], [0, 1, 1], [3, 3, 0, 1, 3, 1, 0, 0, 0, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 3, 1, 3, 3, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 0, 1, 3, 1, 2, 2, 0, 3, 0, 1, 0, 0, 2, 2, 0, 2, 3, 2, 3, 0, 0, 0, 3, 2, 2, 3, 1, 3, 2, 3, 1, 3, 3, 0, 0, 0, 2, 0, 0, 2, 2, 3, 1, 2, 3, 1, 3, 2, 0, 3, 1, 1, 1, 3, 2, 3, 2, 0, 0, 2, 1, 3, 1, 3, 3, 1, 3, 3, 0, 3, 3, 0, 1, 2, 3, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0], [3, 3, 2, 4, 3, 0, 1, 2, 1, 3, 1, 3, 3, 0, 2, 0, 4, 1, 4, 1, 2, 4, 0, 0, 0, 1, 4, 3, 4, 3, 3, 1, 1, 2, 2], [0, 2, 0, 1, 1, 0, 0, 1, 2, 1, 2, 2, 1, 2, 1, 1, 0, 2, 2], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 4, 4, 4, 2, 4, 4, 1, 3, 0, 2, 3, 2, 4, 0, 4, 0, 2, 1, 3, 4, 5, 4, 3], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0], [2, 1, 0, 4, 0, 4, 2, 4, 2, 3, 4, 3, 1, 4, 0, 1, 0, 3, 0, 2, 2, 2, 1, 2, 1, 2, 4, 2, 2, 1, 0, 3, 3, 1, 3, 0, 0, 3, 0, 4, 4, 3, 3, 3, 4, 2, 0, 4, 4, 2, 4, 0, 3, 3, 1, 4, 4, 2, 2, 0, 0, 2, 1, 0, 1, 1, 1, 4, 2, 4, 2, 1, 4, 1, 4, 1, 4, 1, 0, 0, 2, 0, 4, 1, 0, 2, 2, 3, 1, 0], [0, 1, 3, 1, 2, 3, 2, 0, 0, 0, 3, 1, 1, 3, 1, 1, 2, 2, 3, 3], [1, 0, 0, 4, 3, 0], [2, 1, 0, 0, 1, 2, 1, 1, 1, 0, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1], [0, 2, 1, 1, 1, 3, 2, 0, 3, 1, 1, 3, 0, 2, 3, 0, 1, 0, 2, 0, 0, 3, 1], [17, 25, 11, 7, 16, 2, 7], [1, 25, 21, 8, 2, 7, 20], [0, 5, 9, 0], [20, 15, 24, 16, 21]], "fitness": 9223372036854775807, "mapping_values": [1, 10, 10, 3, 7, 1, 6, 0, 0, 2, 1, 8, 1, 4, 3, 2, 1, 0, 37, 37, 40, 1, 137, 32, 35, 19, 13, 24, 23, 1, 90, 20, 6, 20, 23, 7, 7, 4, 5], "tree_depth": 49, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[len(in1):]:{:\\nres0 = getCharFromString(in1, len(saveChr(i0))).endswith((saveChr(int(0.0)) + (\"\"0\"\" + in1.capitalize()))[abs(int(7.0)):i1].rstrip()[:i2])\\ni0 = i1\\ns2 = \"\"b\"\"\\nin1 = in1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ( int(5.0) != saveOrd((s1 + \"\"z\"\"[i2:][:mod(mod(( int(7.0) + i1 ),mod(len(\"\"v\"\"[:( i0 * divInt(min(( int(2.0) + i0 ), ( max(int(1.0), i0) - int(7.0) )),int(7.0)) )]),i2)),i1)][abs(int(9.0)):max(len(\"\";\"\"[max(i0, ( ( divInt(int(8.0),int(5.0)) - divInt(int(0.0),i0) ) + int(4.0) )):i2][:i2].lstrip()[:int(8.0)]), len(in0))])) or ( ((\"\"5Z\"\" + (s0 + s2)) + (in0 + getCharFromString((((getCharFromString(s2[int(59.0):], ( ( i0 + len(getCharFromString(saveChr(i2)[int(9.0):].lstrip(), i1)) ) - i2 )) + in1) + ((\"\",\"\" + saveChr(( mod(i1,divInt(min(( abs(i0) * i0 ), i0),min(( ( saveOrd(s0[:int(2.0)][:max(( saveOrd(in1) - int(2.0) ), max(abs(i1), i1))].rstrip(\"\"i\"\"[:i2])) * ( i2 * i1 ) ) - divInt(mod(saveOrd(s0),int(9.0)),( min(int(1.0), min(( i1 * min(int(4.0), int(4.0)) ), int(0.0))) - max(divInt(saveOrd(\"\"c\"\"),divInt(i0,i2)), ( int(3.0) - len(\"\"?\"\") )) )) ), int(7.0)))) + saveOrd(\"\"L\"\") ))) + saveChr(len(saveChr(int(1.0))[len(\"\"9\"\"[max(i0, max(abs(i0), int(0.0))):( abs(i1) * divInt(int(3.0),i0) )]):i1])))) + \"\"-H\"\".capitalize()), ( int(080.0) * int(299.0) )).capitalize())).endswith(\"\"hQ\"\".capitalize()) and True ) ):{:\\ns2 = \"\"0C\"\".lstrip(s1)\\nin0 = in1\\nloopBreak% = 0\\nwhile in2[i1:i2].endswith(\"\"H<\"\".lstrip()):{:\\nb2 = in1.startswith((\"\"u\"\" + in0)[:i0][:int(58.0)])\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 7, 7, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 0, 2, 2], [0, 1, 1], [3, 3, 0, 2, 0, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 0, 1, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 3, 3, 0, 0, 1, 3], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 0, 1, 0, 3, 0, 1, 2, 1, 4, 3, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [4, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 2, 0, 0, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 1], [17], [8], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 11, 16, 1, 54, 16, 12, 8, 8, 7, 2, 1, 16, 3, 1, 4, 2, 1, 1, 0, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):][min(i0, mod(i1,mod(i2,int(2.0)))):]:{:\\nres0 = in1 not in in0\\ni0 = ( int(7.0) + max(i1, divInt(( divInt(min(i2, ( len(getCharFromString(s0[( i1 + divInt(( i2 * int(7.0) ),i0) ):divInt(min(max(i0, int(7.0)), int(4.0)),i0)], i1)[mod(int(1.0),abs(int(7.0))):max(i0, ( ( ( int(7.0) - int(9.0) ) + divInt(int(8.0),i0) ) * saveOrd(saveChr(len((\"\"R\"\" + in1.rstrip())))) ))]) - i2 )),i2) - int(5.0) ),saveOrd(\"\"i\"\"))) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [0], [], [], [2], [], [1], [], [1], [5], [2], [0], [3], [], [], [2], [1, 1, 1, 0, 0, 0, 1, 0], [5], [0, 1], [0], [4, 1], [3, 1], [0], [], [2, 1], [], [23], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 2, 1, 1, 0, 2, 0, 1, 1, 0], "tree_depth": 13, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nin2 = \"\"0x\"\".lstrip()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [0, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0], [1], [3, 3, 3, 0, 3, 2, 1, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 3, 1, 1, 3, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1, 1], [0], [3, 0, 0, 2, 0, 0, 3, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 2, 3], [17], [], [0], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 1, 0, 11, 2, 5, 1, 1, 6, 3, 1, 16, 3, 1, 2, 3, 1, 0, 1, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1):{:\\nb0 = in1[len(in0):] not in (getCharFromString(\"\"R\"\"[len(saveChr(abs(i0))):], min(mod(int(0.0),int(7.0)), ( int(5.0) + len((\"\"0\"\" + s0.rstrip())) ))) + \"\";\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 0, 1], [0], [2, 0], [0], [0, 0], [], [], [0, 2], [2], [2, 0], [], [5], [1], [], [0], [], [0, 1, 1], [4, 4, 3], [2, 0, 2, 1, 0], [], [1, 3, 3, 0, 0], [], [3, 2], [], [], [2, 0, 0, 4, 5, 1], [1, 1, 1, 1, 1], [0], [4, 2, 0, 1, 1, 4, 4, 2, 3, 3, 1, 4, 3, 2, 3, 4, 1, 1, 0, 0, 0], [1, 2, 3, 2, 3], [1, 3], [1, 2, 1], [2, 0, 1, 1, 2], [1], [6, 5], [7, 3], []], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 2, 0, 5, 0, 2, 0, 0, 6, 5, 1, 21, 5, 2, 3, 5, 1, 2, 2, 0], "tree_depth": 28, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s2 in saveChr(int(44.0)):{:\\ns0 = s0[:len(\"\"7\"\")]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = \"\"B\"\".endswith(((\"\"g\"\" + ((\"\"f\"\".lstrip(\"\"3\"\") + in1)[:abs(i2)] + in2).capitalize()) + s1)[i0:].rstrip().capitalize())\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 0], [], [2, 1], [], [0], [], [], [], [], [], [0], [], [], [], [], [], [], [], [2, 1, 1, 2, 2, 1], [1], [0, 2, 0, 0, 2, 0, 0], [0, 1], [], [0, 1], [1], [0, 3, 2], [0, 0, 0, 0, 1], [], [1, 0, 0, 0, 4, 4, 4, 2, 1], [3, 0, 3], [1, 1], [2], [0, 3, 2, 0, 2], [17, 24], [], [2, 9], [27]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 0, 1, 0, 0, 0, 5, 2, 0, 2, 1], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = \"\"R\\\\\\\\2Y9\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 1, 2, 1], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 2, 0, 2, 3, 0, 1, 3, 1, 1], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 5, 4, 4, 3, 0, 4], [0, 1], [0], [2, 0, 4, 2, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 17, 17, 16, 1, 59, 18, 10, 9, 9, 6, 2, 0, 15, 3, 1, 4, 2, 1, 0, 0, 1], "tree_depth": 43, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(getCharFromString(in2[i0:], i2)):] not in in1:{:\\nres0 = ( int(0.0) != max(mod(i2,int(7.0)), mod(int(5.0),abs(i0))) or ( in1[divInt(( divInt(min(i1, divInt(len(in0[( i2 + ( ( ( int(7.0) + i1 ) * divInt(min(int(4.0), i2),int(1.0)) ) - int(7.0) ) ):i0]),i0)),mod(int(7.0),max(int(9.0), abs(i2)))) + ( ( ( int(8.0) * int(5.0) ) - divInt(int(0.0),i2) ) - int(4.0) ) ),i1):( i1 * divInt(max(i2, int(8.0)),len(saveChr(int(59.0)))) )].endswith((\"\"R;\"\" + s0.rstrip())) and True ) )\\n:}else:{:\\ni1 = int(9.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 7, 5, 2, 2, 5, 7, 5, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 1, 1, 0, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 0, 1], [0, 0, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 5, 3, 4, 4, 0], [0, 0, 1, 1], [0], [2, 0, 0, 2, 0, 1, 1, 2, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 2], [0, 0, 3, 0], [17, 5, 22], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 4, 4, 1, 7, 0, 0, 2, 4, 3, 0, 0, 1], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s1 in in2[len(in0):]:{:\\nres0 = in1[saveOrd(\"\"RF;\"\"):] not in \"\"W\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1], [0], [2, 0, 0, 1, 0, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0], [13], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 1, 0, 5, 1, 2, 0, 1, 5, 1, 1, 6, 0, 0, 1, 1, 1, 0, 0, 0], "tree_depth": 21, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(\"\"N\"\") != mod(int(0.0),i0) or True ) and in1 not in in0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 2, 2, 1, 2, 0, 1, 1, 0, 2, 2, 2, 1], [0, 2, 1, 0, 1, 0, 1], [0, 2, 0, 1, 0, 2], [0, 0, 0], [0, 0], [], [], [1, 2, 3], [0, 4, 5, 5], [0, 1, 1, 2, 1, 0, 2, 1], [0, 0, 0, 0], [2, 1], [1, 2], [], [1], [0, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1], [9, 3, 7, 0, 7, 5, 9, 2], [0, 1, 2, 0, 1, 0, 0, 2, 1, 2, 1, 0, 2, 2, 0, 0, 0], [0], [0, 0, 2, 1, 3, 1, 0, 0, 2, 0, 0, 1, 0, 1, 0, 3, 0, 2, 3, 0, 0, 0, 2, 3, 3, 0, 2, 3, 3, 3, 0, 1, 0, 1, 3, 0], [0, 0, 1, 0, 0], [3, 1, 2, 2, 0, 0, 4, 1, 4], [2, 0, 2, 1], [0], [3, 1, 1, 2, 5, 5, 3, 4, 5, 3], [1, 1, 0, 1, 0, 0, 1], [0, 0, 0], [0, 0, 2, 4, 1, 1, 0, 1, 1, 2, 4, 4, 4, 0, 4, 2, 0, 4], [2, 3, 1, 1, 2, 1], [1], [0, 2, 2], [2, 1, 0, 1, 2, 1, 0], [0, 24], [24, 15, 1], [0, 3], []], "fitness": 9223372036854775807, "mapping_values": [1, 13, 13, 7, 6, 3, 2, 0, 0, 3, 4, 8, 4, 2, 2, 0, 1, 3, 8, 8, 17, 1, 36, 5, 9, 4, 1, 10, 7, 3, 18, 6, 1, 3, 7, 2, 3, 2, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in0 in s1:{:\\nloopBreak% = 0\\nwhile False:{:\\nif i0 \\l i1:{:\\nb1 = ( int(9.0) * len(s1) ) \\le int(3.0)\\nloopBreak% = 0\\nfor s2 in \"\"0\"\".capitalize()[i2:i0]:{:\\nin2 = \"\"y\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = in2 == \"\"Ap\"\"\\ni1 = ( i0 + i0 )\\nres0 = int(707.0) != i2\\nif not \"\"3bY\"\" not in saveChr(int(5.0)).rstrip()[i1:]:{:\\nloopBreak% = 0\\nfor in0 in saveChr(max(i2, divInt(abs(i1),i0))):{:\\nif i2 != ( abs(min(i2, ( min(saveOrd(in1), max(i0, int(9.0))) * i0 ))) - int(2.0) ):{:\\nin2 = in0[saveOrd(saveChr(i0)):].capitalize()\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [0, 1, 0, 0, 0], [0], [0, 1, 2], [0], [0], [], [], [2], [], [2], [], [5], [], [], [], [], [0, 1, 1], [2, 4, 1], [0, 0, 1, 1, 2], [], [3, 0, 2, 1, 0, 2, 3, 1, 2, 0, 0], [0, 1, 1], [1, 4], [0], [0, 0], [0, 2, 4, 4], [0, 0, 1], [0], [0, 2, 4, 0, 0, 1], [3], [4], [0], [2, 1, 0], [13], [13], [0], []], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 2, 0, 8, 2, 2, 1, 1, 3, 3, 0, 6, 1, 1, 1, 3, 1, 1, 1, 0], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb2 = s0.endswith(s2.rstrip(in1)[max(i0, ( int(24.0) + i0 )):divInt(saveOrd(\"\"0nN\"\"),int(1.0))])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 0, 1, 2, 1, 1, 2, 2, 1, 0, 2, 2, 0, 1, 1, 2, 0, 2, 0, 0, 1, 2, 2, 0, 0, 1, 0, 1, 1], [2, 1, 1, 1, 0, 2, 2, 0, 1, 2, 0, 0, 0, 2, 0], [1, 1, 0, 2, 1, 1, 1, 1, 0, 0, 2, 2, 1, 2, 0, 1, 2, 2, 2, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [0, 2, 0, 2, 3], [3, 1, 4], [1, 0, 0, 2, 2, 0, 2, 2, 2, 1, 1, 2, 2, 2], [0, 0, 0], [1, 3, 4, 4, 0, 2, 0, 2], [1, 1, 1], [], [0, 1, 1], [0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 7, 3, 0, 0, 4, 9, 0, 4, 5, 7, 9, 9, 4, 9, 5, 7, 8, 7, 4, 9, 6, 5, 6, 3, 0, 1, 7, 2, 6, 0, 8, 2, 1, 4, 1, 3, 8, 2, 1, 8, 7, 8, 5, 2, 8, 4, 8, 4, 3, 8, 6], [0, 2, 1, 0, 0, 0, 1, 0, 2, 2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 0, 1, 1, 2, 0, 2, 1, 2, 2, 0, 2, 0, 2, 2, 1, 0, 2, 1, 0, 1, 2, 1, 2, 0, 0, 2, 1, 0, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [2, 3, 0, 1, 2, 1, 0, 3, 0, 0, 1, 0, 3, 3, 3, 1, 0, 1, 2, 3, 1, 3, 3, 1, 0, 0, 3, 0, 3, 3, 0, 1, 1, 1, 2, 0, 0, 1, 1, 1, 2, 3, 0, 2, 0, 2, 1, 3, 3, 2, 3, 1, 2, 1, 0, 3, 1, 3, 2, 0, 1, 1, 3, 2, 1, 2, 2, 0, 1, 2, 2, 3, 1, 2, 3, 0, 3, 3, 2, 0, 2, 1, 0, 0, 1, 3, 0, 1, 0, 1, 3, 3, 1, 1, 3, 2, 3, 3, 1, 0, 1, 3, 3, 0, 0, 2, 1, 3, 1, 1, 2, 1, 2, 3, 1, 3, 0, 1, 1, 0, 0, 0, 2, 1, 0, 3, 3, 1, 0, 2, 2, 0, 2, 1, 2, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [3, 1, 3, 3, 4, 3, 0, 2, 3, 3, 2, 0, 1, 0, 3, 4, 1, 0, 1, 4, 1, 4, 1, 2, 2, 0, 4, 1, 3, 3, 0, 0, 2, 4, 4], [0, 0, 0, 2, 2, 1, 0, 1, 0, 2, 0, 0, 1, 1, 0, 1, 1, 1, 2, 1, 1, 2, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 4, 1, 3, 2, 4, 3, 2, 1, 2, 5, 0, 3, 2, 3, 3, 3, 1, 5, 0, 1, 3, 2, 1, 2, 3, 5, 2, 5, 1, 3, 1, 5, 4, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [4, 0, 0, 3, 4, 4, 1, 0, 1, 1, 2, 4, 0, 2, 4, 0, 2, 4, 2, 1, 2, 2, 0, 0, 2, 0, 1, 0, 4, 1, 1, 1, 1, 2, 1, 0, 4, 4, 2, 2, 1, 0, 0, 1, 0, 0, 4, 4, 4, 0, 2, 4, 2, 0, 0, 4, 1, 4, 0, 4, 4, 4, 1, 0, 1, 2, 2, 1, 2, 2, 1, 0, 4, 0, 4, 4, 4, 1, 4, 4, 2, 4, 0, 0, 1, 0, 4, 4, 1], [3, 2, 1, 3, 3, 0, 1, 3, 1, 0, 0, 0, 2, 3, 3, 2, 0, 3, 1, 3, 0, 3, 0, 0, 2, 0, 3], [0, 4, 2, 5, 1, 2, 2, 0, 0, 0], [2, 2, 1, 1, 1, 1, 2, 2, 0, 0, 1, 0, 1, 0, 2, 1, 2], [2, 0, 1, 2, 3, 1, 1, 2, 2, 0, 1, 3, 1, 2, 1, 2, 0, 3, 3, 0], [18, 13, 7, 25], [12, 4, 16, 2, 13, 20], [6, 6, 7, 5, 0, 2], [1, 30, 7, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 40, 40, 15, 25, 6, 9, 0, 0, 5, 3, 14, 3, 8, 3, 0, 3, 4, 52, 52, 48, 13, 140, 27, 35, 23, 14, 37, 20, 6, 89, 27, 10, 17, 20, 4, 6, 6, 4], "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile ( len(s0.lstrip()) + i0 ) \\ge int(07.0):{:\\ni2 += ( int(30.0) + i1 )\\ni0 *= max(i0, i0)\\nif True:{:\\nb0 = False\\ns1 = in1\\ni1 *= int(04.0)\\nif (saveChr(i0).capitalize() + \"\"6\"\") not in s1:{:\\nif \"\"S\"\" != \"\"m\"\":{:\\nloopBreak% = 0\\nfor in0 in s2.rstrip(in1.strip()[len(getCharFromString(\"\"6\"\"[:len(in0[:saveOrd(s2)][:int(9.0)])], i2)[:int(0.0)]):])[( len(s1[int(4.0):]) - min(abs(int(5.0)), i2) ):]:{:\\nloopBreak% = 0\\nwhile False:{:\\ni2 += i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\ni1 = len(\"\"\\\\\\n\"\")\\ni2 -= i1\\nloopBreak% = 0\\nwhile s2.startswith(saveChr(len(\"\"e\"\"))):{:\\nb2 = \"\"q\"\".startswith(\"\"7\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = \"\"5\"\" in \"\"N\"\"[abs(i1):]\\n:}else:{:\\nloopBreak% = 0\\nfor in2 in s0:{:\\nif int(7.0) \\g int(9.0):{:\\nin0 = saveChr(int(9.0)).strip(\"\"c\"\"[mod(i0,i1):int(4.0)][int(9.0):int(5.0)])\\n:}else:{:\\ns2 = in0\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile mod(min(i0, ( i0 + divInt(int(7.0),max(min(( len(in0) * int(8.0) ), mod(int(7.0),i1)), saveOrd(\"\"_\"\"))) )),int(4.0)) \\le max(( i1 + int(9.0) ), int(6.0)):{:\\nloopBreak% = 0\\nfor in0 in s1:{:\\ni2 += min(mod(int(5.0),divInt(divInt(i0,int(6.0)),divInt(( max(int(3.0), mod(saveOrd(in2),i2)) - max(saveOrd(getCharFromString(getCharFromString(getCharFromString(s0, mod(i1,divInt(int(0.0),i2))), i2), int(1.0))), max(i0, int(7.0))) ),i2))), int(2.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = in0[abs(abs(int(6.0))):int(0.0)].capitalize()[:min(( saveOrd(s2) - max(int(8.0), i0) ), int(2.0))]\\nb2 = \"\"n\"\".rstrip() == s1.strip()\\n:}\\nloopBreak% = 0\\nfor s2 in getCharFromString(\"\"0\"\".strip(), len(in0)).capitalize():{:\\ni2 += len(\"\"u\"\")\\nloopBreak% = 0\\nfor in2 in \"\"2\"\"[i2:i1][:( int(1.0) - min(int(4.0), int(1.0)) )]:{:\\ns2 = \"\"H\"\"[:( int(3.0) - divInt(min(int(8.0), abs(i0)),int(2.0)) )][int(1.0):]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = s1\\nin0 = saveChr(i2)\\nloopBreak% = 0\\nwhile s1 in getCharFromString(\"\"$\"\".lstrip(), i1).lstrip():{:\\nloopBreak% = 0\\nfor in2 in getCharFromString(getCharFromString(in1.capitalize()[i0:], divInt(int(8.0),i1)), saveOrd(s1)):{:\\ni2 -= saveOrd(\"\"\"\")\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nres0 = in0 == getCharFromString(\"\"Z\"\".lstrip(), int(7.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 = i2\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 *= ( ( i0 - ( int(8.0) - divInt(int(52.0),int(84843.0)) ) ) * i2 )\\ni1 = int(86.0)\\ni0 -= i1\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1], [0, 1, 0, 0], [], [1, 1], [], [0], [], [], [2, 1], [], [], [], [], [], [], [], [], [1, 1], [0, 9], [1, 2, 0, 2, 0, 1], [0, 1], [3, 1, 2, 0, 1, 0, 0, 3, 0], [1], [3, 3], [1, 2], [0], [5], [0, 0, 1], [], [4, 2, 2, 4, 3, 4, 4, 1], [0, 1, 3, 1], [2], [1, 1], [2, 1, 2], [], [25], [5, 4], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 6, 2, 9, 1, 2, 1, 1, 0, 3, 0, 8, 4, 1, 2, 3, 0, 1, 2, 0], "tree_depth": 20, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni1 = len(getCharFromString(saveChr(int(0.0))[:divInt(i2,int(9.0))][:i0], i2))\\ni0 -= len((saveChr(i1).strip() + \"\"5z4\"\"))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 7, 7, 1, 9, 4, 3, 9, 1, 3, 9], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 2, 1, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 2, 0, 2, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 1, 2, 1, 3, 2, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 1, 3, 3, 3, 0, 2, 1, 3, 2, 1, 3, 3, 1, 1, 0, 0, 2, 0, 1, 1, 0, 2, 2, 2, 0, 3, 3, 2, 3, 1, 3, 1, 3, 3, 3, 3, 2, 2, 0, 0, 1, 2, 3, 1, 1, 0, 1, 0, 0, 0, 2, 1, 3, 3, 0, 0, 2, 1, 2, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0], [3, 3, 2, 0, 1, 0, 1, 1, 1, 0, 4, 4, 3, 0, 0, 3, 3, 0, 2, 1, 0, 2, 2, 1, 3, 0, 4, 4], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 5, 4, 4, 3, 0, 4, 3, 2, 0, 2, 3], [1, 1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0, 2, 0, 2, 2, 3, 2, 2, 4, 0, 4, 4, 2, 0, 0, 2, 2, 1, 0], [0, 1, 3, 3, 0, 0], [1, 0], [2, 2, 0, 0, 1, 1, 1, 0, 1, 2, 2, 1], [0, 1, 2], [17], [24], [2], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 29, 29, 27, 0, 111, 29, 28, 13, 16, 12, 3, 0, 35, 6, 2, 12, 3, 1, 1, 1, 0], "tree_depth": 53, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):] not in in1[len(in1):]:{:\\nres0 = ( i0 != i2 or ( getCharFromString(in0[abs(mod(i2,int(0.0))):( int(7.0) + min(( divInt(( divInt(int(5.0),i0) + ( max(( i1 * min(max(divInt(int(7.0),i2), ( max(int(7.0), i1) - max(int(1.0), i2) )), i0) ), divInt(int(7.0),min(divInt(saveOrd(saveChr(i0)),( ( ( int(7.0) + int(9.0) ) * mod(int(8.0),i2) ) - int(5.0) )), int(0.0)))) - int(4.0) ) ),saveOrd((\"\"R\"\" + s0.rstrip()))) * len(\"\"y\"\") ), min(i2, divInt(int(8.0),min(divInt(int(59.0),len(in1)), len(in0[:int(9.0)]))))) )], int(2.0))[i1:i2].endswith((s2.lstrip()[:mod(i2,int(2.0))][int(7.0):i2] + getCharFromString(getCharFromString(s0[divInt(( divInt(i2,min(abs(divInt(max(int(7.0), min(int(1.0), abs(abs(max(len(s2), mod(( i1 + i0 ),int(9.0))))))),mod(min(int(4.0), int(3.0)),i2))), int(9.0))) + i1 ),i1):], i1), mod(int(1.0),saveOrd(\"\"2\"\"[:saveOrd(in0)][i2:]))))[:i0][:( int(39.0) - ( i2 - i0 ) )]) and True ) )\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [1, 0], [0], [2], [0], [0], [], [], [1], [2], [0], [0], [], [], [], [], [], [1, 1], [3, 7], [2, 0], [1], [0, 1, 0, 0], [], [0], [1], [1, 0, 0, 0, 0, 0, 1, 0, 1], [2, 0], [1], [0], [4, 2, 1], [2], [], [1], [3], [], [], [], [19]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 3, 1, 0, 1, 1, 0, 0, 0, 1], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = \"\":\"\"[:i2].capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [4, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 7, 2, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1, 0, 0, 0], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 0, 1, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 3, 1, 0, 2, 3, 1, 2, 2, 1, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 3, 1, 1, 1, 2, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4, 1, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 0, 0, 2, 2, 0, 2, 4, 0, 0, 4, 3, 1, 4, 0, 1, 0], [1, 2, 3], [1, 0], [2, 2, 0, 0, 1], [1, 1], [17], [8, 11], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 14, 14, 15, 1, 57, 16, 13, 9, 7, 6, 2, 0, 16, 3, 1, 4, 2, 0, 2, 0, 0], "tree_depth": 36, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[len(in2):].startswith(in1[len(saveChr(i1)[i1:abs(mod(i2,i0))]):int(6.0)][int(7.0):]):{:\\nres0 = ( min(i1, ( ( divInt(int(2.0),i2) + ( len(in1) + mod(i1,min(max(abs(int(7.0)), i2), ( max(int(7.0), ( divInt(int(1.0),i0) * i0 )) - ( int(7.0) + saveOrd(in0) ) ))) ) ) * divInt(max(i2, divInt(( ( int(7.0) - int(9.0) ) - ( int(8.0) * i1 ) ),int(5.0))),max(abs(int(0.0)), int(4.0))) )) != int(8.0) or ( (\"\"i\"\" + s0.rstrip()).capitalize().endswith(\"\"l\"\") and True ) )\\n:}else:{:\\ni0 = mod(i0,i0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 1, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [2, 0, 0, 0, 0, 0, 1, 2], [0, 1, 0, 0, 0, 0, 1, 0], [4, 5, 4, 5, 3, 0, 4], [1], [0], [2, 0, 0, 2, 0, 1, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0], [22], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1, 0, 0, 4, 1, 1, 6, 0, 0, 2, 1, 1, 0, 0, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(in1):]:{:\\nres0 = in2[int(0.0):] not in \"\"W\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 0, 1], [2, 2, 1, 0, 0], [0, 2], [0, 2, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 2, 0, 0, 1, 0, 2], [0, 1, 1], [3, 3, 0, 0, 3, 2, 0, 3, 2, 1, 0, 0, 1, 3, 3, 1, 0, 2, 2, 2, 0, 3, 3, 2, 1, 0, 2, 3, 3, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 3, 1, 1, 1, 4, 0, 0], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 5, 4, 5, 0, 2, 2, 5], [1, 1], [0], [2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 4, 3, 4, 4, 0, 1, 0, 2, 2, 4, 4, 1, 2, 4], [0, 3, 3, 0, 1, 1], [1, 0], [2, 2, 1, 0, 1, 2], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 13, 13, 14, 0, 51, 12, 12, 4, 8, 12, 2, 1, 24, 6, 2, 6, 2, 1, 0, 0, 1], "tree_depth": 34, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2[len(in1):]:{:\\nloopBreak% = 0\\nwhile in1[len(in0):] not in in2:{:\\nres0 = ( i0 != i2 or ( in1.endswith(in2[:max(mod(i2,min(mod(int(0.0),i0), i1)), int(3.0))]) and True ) )\\ns0 = getCharFromString((s2.lstrip().rstrip() + \"\"R\"\"), len(s2))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin2 = getCharFromString(saveChr(len(\"\";\"\")), int(5.0))[:i2][( mod(( i1 + max(max(divInt(int(7.0),i2), ( max(saveOrd(saveChr(i2)[int(2.0):]), int(1.0)) + i0 )), i0) ),( int(7.0) * min(int(7.0), min(i1, divInt(divInt(mod(int(9.0),int(8.0)),divInt(int(5.0),i0)),int(0.0)))) )) - int(4.0) ):i2]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [0, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 3, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 3, 2, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 1, 2, 0, 2, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 2, 2, 1], [17], [25], [0, 6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 4, 4, 0, 13, 2, 3, 0, 2, 5, 4, 1, 15, 3, 1, 5, 4, 1, 1, 2, 0], "tree_depth": 29, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(\"\"R\"\"):]:{:\\nres0 = in1[saveOrd(in1[:mod(int(0.0),i0)].capitalize()[mod(i2,int(7.0)):int(3.0)][int(7.0):abs(i2)]):] in (\"\"06z\"\" + getCharFromString(in0, i0)).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1], [1, 1, 1], [], [0, 1, 1], [0], [], [], [], [0, 0], [], [0], [], [], [0], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 4, 5, 0, 7, 2, 9, 6, 1, 2, 2, 3, 8, 9, 8, 7, 4, 4, 1, 1, 4, 2, 9, 9, 8, 1, 8, 5, 8, 7, 2, 0, 2, 2, 9, 1, 8, 2, 0, 2, 4, 1, 9, 2, 5, 9, 8, 7], [1, 2, 0, 2, 0, 1, 1, 0, 2, 0, 2, 2, 1, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0, 2, 0, 2, 1, 0, 0, 1, 1, 1, 1, 1, 2, 0, 0, 1, 2, 2], [1, 1], [0, 2, 2, 3, 1, 2, 3, 2, 2, 2, 2, 3, 2, 0, 3, 2, 0, 3, 0, 1, 3, 3, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 3, 1, 2, 1, 1, 3, 1, 0, 3, 1, 0, 0, 0, 0, 3, 0, 1, 1, 1, 3, 2, 3, 0, 3, 0, 1, 2, 2, 3, 2, 0, 1, 3, 3, 2, 2, 1, 3, 0, 1, 1, 3, 3, 2, 3, 2, 0, 3, 2, 1, 3, 3, 3, 2, 2, 1, 3, 1, 3, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 3, 2, 0, 1, 1, 2, 3, 2, 1, 0, 1, 1, 3, 2, 3, 0, 3, 2, 0, 2, 2, 1, 3, 2, 2, 0, 1, 1, 3, 2, 3, 1, 1, 1, 0, 1, 2, 3, 1, 1, 1, 0, 1, 2, 1, 3, 1, 3, 3, 0, 3, 1, 2, 0, 3, 3, 0, 0, 1, 0, 0, 3, 0, 2, 0, 2, 0, 1, 2, 0, 1, 3, 3, 3, 0, 3, 3, 0, 1, 2, 0, 3, 1, 2, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1], [1, 4, 4, 2, 2, 3, 3, 1, 4, 4, 1, 4, 1, 1, 2, 3, 4, 4, 1, 0, 4, 2, 4, 0, 0, 3, 1, 0, 4, 0, 0, 2, 4, 2, 3, 2, 4, 3, 3, 4, 1, 4, 3, 4, 1, 0, 1, 1, 2, 2, 3, 4, 1, 0, 3, 3, 0], [1, 1, 1, 2, 1, 0, 2, 1, 0, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 0, 1, 2, 2, 0, 0, 1, 2, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 3, 3, 0, 1, 5, 2, 5, 1, 1, 4, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [], [0, 2, 0, 1, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 4, 0, 2, 0, 1, 4, 2, 1, 2, 1, 4, 0, 0, 2, 2, 2, 1, 2, 2, 2, 0, 2, 2, 0, 4, 0, 0, 1, 0, 4, 4, 4, 1, 1, 0, 1, 3, 1, 4, 4, 4, 2, 1], [3, 2, 0, 2, 1, 1, 2, 2, 1, 1, 1], [4], [0, 0, 0, 1, 0, 2, 1, 0, 2, 1, 0, 1, 2, 0, 0, 1, 2, 0, 1, 0, 1, 0], [0, 0, 1, 1, 3, 3, 0, 0, 2, 0, 1, 3], [13, 25, 7, 9, 24], [9, 21, 21], [3], [20, 10, 16]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 0, 3, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 49, 49, 40, 2, 188, 48, 57, 30, 20, 12, 12, 0, 58, 11, 1, 22, 12, 5, 3, 1, 3], "tree_depth": 89, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb0 = b0\\ni1 -= i2\\ni0 -= ( ( max(int(0.0), ( saveOrd(s0) - ( mod(divInt(mod(saveOrd(in0[mod(i2,abs(divInt(i0,abs(i1)))):int(3.0)]),len(\"\"N\"\")),len(\"\"Z\"\"[:max(saveOrd(in0.capitalize()), saveOrd(s0[max(( int(4.0) * saveOrd(\"\"j\"\") ), max(max(abs(len(getCharFromString(\"\"v\"\"[:int(5.0)], ( int(0.0) - int(7.0) )))), saveOrd(\"\";\"\"[int(2.0):])), i1)):saveOrd(s1.capitalize())]))][int(9.0):][i0:i2][:i0][i2:][max(i2, int(6.0)):int(1.0)][:int(2.0)][min(divInt(saveOrd(in2),i1), abs(i2)):int(2.0)][( ( saveOrd(\"\"\"\\\\\"\"\"[:( i0 + int(3.0) )][min(min(( ( int(8.0) * len(s2[:i1][int(9.0):int(8.0)][max(min(mod(saveOrd(in2[:( i2 - min(divInt(int(7.0),min(abs(saveOrd(saveChr(divInt(mod(int(4.0),abs(int(4.0))),len(s1))))), mod(divInt(( ( ( ( i0 + ( divInt(i2,i1) - abs(( i0 * int(1.0) )) ) ) * int(1.0) ) - ( saveOrd(s1) - ( int(4.0) - i0 ) ) ) * int(2.0) ),int(9.0)),len(\"\"H\"\")))), mod(len(in1),i0)) )][saveOrd(saveChr(( i2 - mod(mod(int(9.0),max(( ( i0 - int(8.0) ) * int(1.0) ), saveOrd(\"\"J\"\".capitalize().capitalize()))),( len(\"\"3\"\") * int(8.0) )) ))):int(5.0)]),int(8.0)), i2), int(7.0)):]) ) * divInt(saveOrd(s0),int(2.0)) ), int(0.0)), int(2.0)):i1][int(2.0):( int(9.0) + max(int(1.0), min(max(i0, max(int(8.0), mod(i0,abs(abs(i1))))), i1)) )]) - int(2.0) ) * i1 ):i1].rstrip(\"\"Y\"\"))),len((\"\"v\"\" + saveChr(i1)))) * divInt(i2,( i0 + int(02.0) )) ) )) + ( i0 - int(4.0) ) ) * saveOrd(saveChr(max(min(i1, len(saveChr(len(\"\"-\"\"[i2:int(1.0)])))), ( i2 - min(int(925.0), mod(int(9.0),int(87.0))) )))) )\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 1, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 0, 0, 0], [0, 1, 1], [0, 3, 1, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 2, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 4, 4, 3, 0, 4], [1, 1], [0], [2, 2, 1, 2, 3, 0, 0, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 2, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 8, 1, 2, 0, 1, 5, 2, 1, 15, 3, 2, 4, 2, 1, 0, 0, 1], "tree_depth": 27, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in \"\"R\"\"[:i0][len((s1 + in1)[int(0.0):i2]):]:{:\\nres0 = in1[len(saveChr(mod(i0,int(75.0)))):].rstrip() not in (\"\";\"\" + in0.lstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 8, 8, 0, 5], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0, 1, 1, 1, 1, 0, 2, 0, 0, 0, 2, 2, 1, 0, 1, 0], [0, 1, 1], [2, 0, 0, 0, 3, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 2, 3, 3, 2, 1, 0, 2, 3, 1, 2, 1, 0, 2, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 3, 1, 0, 3, 3, 3, 2, 3, 1, 2, 1, 1, 3, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1, 3, 0, 0, 0, 2, 0, 3, 3, 2, 0, 3, 3, 3, 1, 3, 0, 3, 3, 1, 3, 0, 3, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1, 3, 2, 2, 1, 2, 0, 2, 4, 0, 1, 1, 1, 2, 3, 0, 2], [0, 0, 1, 1, 0, 1, 2, 0, 2, 1, 2, 2, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 5, 1, 4, 3, 0, 4], [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0], [2, 0, 2, 2, 0, 0, 2, 1, 2, 4, 4, 3, 1, 4, 0, 1, 0, 3, 3, 1, 1, 1, 1], [3, 1, 3], [1, 0], [0, 2, 0, 0, 1], [0, 0, 2, 0, 1, 2, 0, 0, 2, 3, 3, 3, 3], [17, 13, 7, 12, 0], [22], [7, 6, 3], [20, 23, 18, 28]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 23, 23, 25, 1, 95, 26, 25, 13, 13, 5, 13, 0, 23, 3, 2, 5, 13, 5, 1, 3, 4], "tree_depth": 56, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[divInt(i0,i2):i0] not in in2[len(s1):i0][i1:]:{:\\nres0 = ( int(0.0) != ( int(7.0) + len(\"\"R\"\"[i2:( divInt(( int(5.0) + i0 ),mod(max(( ( min(len(saveChr(divInt(int(7.0),i0)).rstrip()[:( min(int(7.0), mod(int(1.0),i1)) - mod(i0,( int(7.0) - max(( abs(i1) + ( divInt(mod(int(7.0),int(9.0)),( int(8.0) - i1 )) * int(5.0) ) ), max(int(0.0), i1)) )) )]), len((\"\"N\"\" + in1.lstrip()))) + abs(abs(mod(max(int(4.0), ( int(8.0) * int(59.0) )),abs(( int(9.0) - i1 ))))) ) * ( mod(int(2.0),divInt(i0,i2)) * int(2.0) ) ), min(i0, i0)),i0)) + divInt(i2,abs(saveOrd(\"\"7\"\"))) )]) ) or ( in0.endswith(((\"\"Hw6\"\" + \"\"M\"\") + \"\"A3;>/\"\")) and True ) )\\n:}else:{:\\ni2 = divInt(i1,min(max(max(int(88.0), max(i0, abs(len(\"\"]\"\")))), int(05.0)), min(i1, abs(i0))))\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [1, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 0, 1, 7, 7, 9, 8, 6, 0, 4, 8, 5, 9, 9, 2, 2], [1, 2, 2, 0, 0, 1, 2, 2, 2, 0, 2, 2, 1], [0, 1, 1], [2, 3, 0, 1, 1, 2, 3, 0, 0, 1, 2, 0, 3, 2, 2, 1, 0, 2, 0, 2, 2, 2, 0, 2, 1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 3, 2, 3, 3, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 2, 1, 1, 3, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0], [0, 5, 0, 2, 3, 0, 4], [1], [0], [2, 0, 1, 3, 0, 4, 2, 1, 2, 0, 2, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 1, 0, 0, 1], [2], [17], [], [5], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 4, 1, 1, 0, 1, 2, 1, 1, 3, 0, 0, 1, 1, 0, 0, 1, 0], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(\"\"5\"\"),i1):]:{:\\ni2 = int(0.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1], [2, 1], [0], [2, 2], [0], [], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [3, 0, 9, 6, 8, 1, 6, 7, 3, 9, 4, 9, 6, 7, 4, 0, 1, 9], [2, 0, 2, 1, 1, 1, 2, 0, 2, 0, 2, 2, 1, 2, 0, 1, 0], [0, 0], [3, 0, 2, 0, 0, 2, 2, 2, 0, 0, 2, 0, 2, 1, 0, 0, 2, 0, 0, 2, 0, 2, 3, 0, 1, 2, 3, 2, 0, 2, 3, 3, 0, 1, 1, 2, 2, 0, 2, 2, 2, 1, 1, 2, 1, 3, 0, 2, 0, 2, 3, 1, 1, 3, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0], [2, 3, 1, 3, 4, 4, 3, 4], [0, 2, 0, 0, 1, 1, 2, 2, 2, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0], [5, 5, 0, 2, 1, 0, 5], [1, 1, 1, 1], [0], [0, 2, 2, 2, 4, 4, 3, 2, 0, 0, 2, 4, 1, 1, 4, 2, 0, 2, 4, 1, 0, 1], [3, 2, 0, 2, 1], [4], [0, 0, 0, 2, 2, 1, 0], [0, 3, 1, 2], [23], [24], [2], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 17, 0, 56, 20, 8, 10, 10, 7, 4, 1, 22, 5, 1, 7, 4, 1, 1, 1, 1], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2:{:\\ns0 = (s2[abs(i2):] + s1).capitalize().rstrip(getCharFromString(\"\"X\"\", ( i0 + i2 ))[mod(( ( i1 * i1 ) + mod(i1,( int(3.0) + i2 )) ),i0):])[( i2 - i0 ):divInt(i2,mod(len(\"\"#\"\"),i2))][int(0.0):divInt(max(divInt(i1,mod(len(s0[:saveOrd(saveChr(i2)[int(9.0):int(6.0)])].capitalize()),divInt(mod(i0,( ( ( int(8.0) - int(1.0) ) * ( int(6.0) * saveOrd(\"\"y\"\") ) ) * i1 )),divInt(i0,( len(in2) - int(7.0) ))))), int(3.0)),saveOrd(\"\"2\"\"))][int(9.0):int(49674019.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 5, 7, 2, 5, 5, 5, 9, 4, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 0, 3, 0, 2, 0, 1, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 3, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 0, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 3, 2, 0, 4, 0, 1, 0, 1], [0, 0, 2, 1, 0, 1, 1, 0, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [1, 1], [0], [2, 1, 0, 2, 0, 0, 2, 4, 2, 1, 1, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 5, 5, 0, 16, 3, 4, 1, 2, 4, 2, 1, 10, 1, 0, 4, 2, 1, 0, 0, 1], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in \"\"R\"\"[saveOrd(in2):]:{:\\nres0 = in1[len(in1):] not in getCharFromString(\"\";\"\"[i0:int(17.0)], abs(mod(i2,int(5.0))))[divInt(i2,min(i2, ( i2 + int(7.0) ))):int(2.0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [3], [], [2], [], [2], [], [], [], [], [1, 0, 1], [5, 8, 3], [0, 2], [1], [1, 3, 1], [0], [3], [1, 1], [1], [3, 2], [0, 0, 0, 1], [], [0, 3, 1, 2, 0, 4], [1], [], [0], [0, 0, 2, 3], [3, 5], [], [9], [13]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 1, 0, 0, 2, 4, 0, 6, 1, 0, 1, 4, 2, 0, 1, 1], "tree_depth": 18, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nres0 = in0 == (\"\"DF9*\"\" + s2[int(5.0):len(saveChr(int(83.0)))])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2, 2, 0], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 2, 1, 0, 2, 1, 0, 1, 2, 0, 2, 1, 2, 1, 0], [0, 1, 1], [2, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 3, 0, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 3, 1, 3, 3, 2, 0, 0, 0, 2, 0, 2, 1, 3, 2, 2, 1, 0, 3, 2, 2, 0, 2, 3, 2, 3, 3, 3, 3, 3, 2, 2, 2, 0, 0, 3, 0, 1, 3, 1, 3, 0, 3, 3, 2, 0, 3, 1, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1], [3, 1, 2, 0, 3, 0, 1, 2, 1, 0, 1, 1, 4, 4, 2, 2, 1, 2, 0, 1, 2, 3, 0, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1, 2], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 5, 4, 0, 3, 1, 4, 2, 1], [1, 1, 1], [0], [2, 0, 0, 3, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0, 1], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 3], [17], [], [], [20, 8]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 21, 21, 24, 0, 100, 31, 25, 13, 18, 9, 3, 1, 18, 2, 0, 3, 3, 1, 0, 0, 2], "tree_depth": 66, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[mod(len(in1),i0):]:{:\\nres0 = ( ( int(1.0) != max(mod(i2,int(7.0)), ( int(5.0) + abs(i2) )) or True ) and (s0 + in0) not in s1[divInt(( divInt(min(i0, ( len(in1[( i1 + divInt(( divInt(int(7.0),i2) * mod(min(int(4.0), i1),int(1.0)) ),int(7.0)) ):i2]) - i0 )),( int(7.0) + max(int(9.0), abs(i0)) )) * ( ( divInt(int(8.0),int(5.0)) - divInt(int(0.0),i2) ) - int(4.0) ) ),divInt(int(8.0),max(int(59.0), min(max(( i1 * i0 ), i2), divInt(i1,mod(int(9.0),max(( ( int(2.0) + i0 ) + saveOrd(getCharFromString((\"\"R\"\" + saveChr(mod(divInt(i1,divInt(saveOrd(s2),( abs(abs(max(abs(min(mod(divInt(( i2 - i0 ),max(i2, int(2.0))),abs(int(2.0))), len(\"\";\"\"))), i1))) * min(len(s1), divInt(i2,len(\"\"%\"\"))) ))),int(0.0)))), i1)) ), i0))))))):] )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1, 1], [2, 1, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 4, 5, 7, 2, 1, 7, 7, 1, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 1, 2, 0, 1, 2, 1, 2, 0, 0, 1, 1, 0, 0, 2], [0, 1, 1], [3, 0, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 0, 2, 3, 2, 0, 2, 3, 3, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 0, 3, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 4, 2, 0, 3, 0, 1, 2, 1, 2], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [1, 5, 4, 4, 2, 0, 4], [1, 1, 1], [0], [2, 2, 0, 2, 0, 0, 1, 4, 2, 4, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3, 2], [1, 0], [2, 2, 0, 0, 1], [0, 2, 1], [17], [2], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 2, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 1, 13, 13, 15, 1, 52, 15, 10, 8, 7, 6, 3, 0, 17, 4, 1, 4, 3, 1, 1, 1, 0], "tree_depth": 45, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s1[saveOrd(in2[i0:i1]):][int(8.0):] not in in1:{:\\nres0 = ( saveOrd(\"\"R\"\") != mod(i2,int(4.0)) or ( getCharFromString(saveChr(mod(int(5.0),abs(i0)))[( divInt(( divInt(i1,( min(( i2 + divInt(len((\"\"6\"\" + in1.capitalize()).rstrip()),min(int(7.0), i1)) ), ( max(int(2.0), i2) + int(1.0) )) * int(7.0) )) - i0 ),i0) + divInt(int(7.0),abs(int(1.0))) ):max(i1, mod(( ( int(8.0) * int(5.0) ) - ( int(0.0) - i1 ) ),int(4.0)))], i0).endswith(\"\"c\"\") and True ) )\\ni0 = abs(i2)\\n:}else:{:\\ns2 = s0\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 7, 7, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [2, 0, 1, 0, 1, 2, 1, 1, 0, 0, 1, 2, 0, 0, 2, 2], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 0, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 2, 0, 2, 0, 1, 3, 3, 2, 1, 1, 2, 2, 1, 1, 0, 2, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [3, 3, 2, 0, 3, 0, 1, 0, 1, 0, 0], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 0, 1], [0], [2, 0, 0, 2, 4, 4, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 2, 1, 3], [4, 0, 0], [0, 0, 0, 0, 1], [0, 1, 3, 0, 1], [17, 12], [14, 2], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 19, 16, 0, 67, 22, 11, 12, 10, 5, 5, 1, 16, 6, 3, 3, 5, 2, 2, 0, 1], "tree_depth": 35, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):len(saveChr(mod(i2,abs(( i0 + int(1.0) )))).rstrip(in1[( int(7.0) * i1 ):i0].capitalize().lstrip())[divInt(( mod(int(7.0),i1) * ( min(( i2 - len(saveChr(min(divInt(int(7.0),int(7.0)), ( max(int(1.0), i1) + int(7.0) )))) ), i1) * i0 ) ),i0):divInt(int(7.0),min(divInt(max(i1, ( ( ( int(9.0) - int(8.0) ) - mod(int(5.0),i2) ) * int(0.0) )),divInt(i0,( i0 + int(4.0) ))), min(min(divInt(int(8.0),int(59.0)), ( mod(int(9.0),int(2.0)) + i2 )), ( int(2.0) - i2 ))))])]:{:\\nres0 = (\"\"R\"\" + in0.lstrip()) not in \"\"o;Mc\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 2, 1, 0, 2, 1, 2, 0, 2, 2, 2, 2, 2, 0, 0, 1, 1, 2, 0, 1, 0], [0, 2, 1, 2, 0, 1, 0, 0, 1], [1, 2, 0, 0, 2, 0, 1, 2, 0, 2, 2, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [], [], [0, 3, 0, 2], [3, 5, 0, 3], [0, 1, 1, 2, 2, 2, 2, 0, 2, 1, 1], [0, 0, 0, 0], [5, 5, 2, 4, 4], [1, 3], [1], [1], [1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 6, 8, 6, 9, 4, 6, 0, 0, 1, 7, 9, 7, 1, 6, 0, 1, 0, 0, 0, 2, 3, 2, 9, 7, 3, 5, 9, 7, 6, 1, 1, 6, 9, 1], [0, 0, 0, 1, 2, 0, 0, 2, 0, 1, 0, 0, 2, 1, 1, 2, 2, 1, 1, 2, 2, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 2, 0], [1, 1, 1, 0], [0, 1, 1, 2, 3, 1, 1, 3, 3, 1, 0, 0, 0, 3, 0, 1, 0, 0, 1, 0, 2, 3, 0, 2, 0, 2, 1, 2, 2, 3, 0, 0, 1, 1, 2, 2, 3, 3, 1, 1, 3, 2, 2, 1, 0, 0, 1, 1, 3, 3, 1, 2, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 1, 1, 2, 1, 2, 1, 0, 1, 1, 2, 1, 3, 3, 1, 0, 1, 0, 0, 3, 2, 2, 2, 2, 0, 2, 1, 0, 0, 2, 0, 3, 2, 2, 0, 3, 2, 1, 2, 0, 1, 3, 1, 0, 0, 3, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [3, 4, 2, 1, 1, 2, 4, 2, 3, 0, 0, 1, 4, 4, 2, 0, 3, 2], [2, 2, 1, 2, 2, 0, 2, 2, 2, 0, 2, 0, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [4, 5, 3, 2, 5, 0, 0, 4, 0, 1, 2, 4, 2, 4, 0, 4, 3, 1, 3, 3, 0, 3, 0, 4, 2, 5, 0, 1], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0], [0, 3, 0, 1, 0, 1, 2, 4, 1, 4, 2, 4, 0, 3, 0, 3, 0, 4, 4, 0, 0, 0, 4, 2, 2, 2, 1, 4, 0, 1, 0, 0, 4, 2, 1, 4, 2, 0, 2, 2, 2, 4, 2, 0, 0, 2, 1, 0, 4, 2, 0, 1, 2, 0, 0, 1], [2, 3, 2, 0, 2, 3, 3, 1, 2, 1, 3], [0, 0, 1, 5], [2, 1, 0, 1, 1, 0, 1, 2, 0, 0, 2, 1, 1, 1], [3, 2, 0, 3, 2, 0, 3, 0, 0, 3, 3, 0, 2, 3, 0, 3, 0, 0], [15, 0, 3, 22, 11, 12, 6, 24], [], [4, 9, 6], [15, 29, 26, 4, 13, 7, 12]], "fitness": 9223372036854775807, "mapping_values": [1, 22, 22, 9, 13, 4, 6, 0, 0, 4, 4, 11, 4, 5, 2, 1, 1, 3, 35, 35, 35, 4, 108, 29, 18, 16, 16, 28, 18, 4, 56, 11, 4, 14, 18, 8, 0, 3, 7], "tree_depth": 59, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 *= i0\\nin1 = in2\\nloopBreak% = 0\\nfor in0 in (s2 + \"\",\"\"):{:\\nb0 = False\\nres0 = int(468.0) \\ge int(69.0)\\nloopBreak% = 0\\nwhile ( len(in2) * int(4.0) ) != int(60.0):{:\\ns0 = \"\"4P^\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif \"\"9\"\".capitalize()[saveOrd(s0.capitalize()[:abs(int(0.0))].lstrip()):].endswith((in1 + (s0 + getCharFromString(s1.capitalize(), i0)))):{:\\nb0 = s2.endswith(in1)\\n:}else:{:\\nloopBreak% = 0\\nwhile \"\"A\"\"[:i1][:i2][max(i0, int(1.0)):i0].lstrip() == s2.rstrip():{:\\nloopBreak% = 0\\nfor in1 in \"\"[\"\":{:\\nif s0.startswith(in1):{:\\nloopBreak% = 0\\nfor in0 in saveChr(i2):{:\\nloopBreak% = 0\\nfor s1 in \"\"D\"\"[int(7.0):i0]:{:\\ni1 -= ( max(i0, mod(i0,( int(9.0) * divInt(( abs(i2) * i1 ),int(7.0)) ))) + int(1.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nin0 = in0[:mod(mod(saveOrd(saveChr(abs(int(6.0)))[int(0.0):len(s0[divInt(mod(int(1.0),i1),i2):])][int(0.0):int(0.0)][min(min(int(0.0), mod(( ( divInt(( int(2.0) * i2 ),( i1 * i1 )) * i2 ) + int(3.0) ),int(2.0))), ( int(9.0) * divInt(int(7.0),i2) )):]),int(3.0)),int(5.0))].capitalize()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\nb2 = ( in0.startswith(\"\"W\"\"[:( int(9.0) + max(saveOrd(s0), int(7.0)) )]) or i0 \\l int(61.0) )\\nin1 = s2[:i1].strip(\"\"!*L6$M\"\")\\nif i0 \\ge saveOrd(in2[:mod(mod(mod(( i0 + divInt(int(1.0),i1) ),i0),divInt(i0,abs(divInt(( i1 - min(divInt(int(6.0),( i1 - int(9.0) )), len(s0)) ),int(1.0))))),i1)]):{:\\ns1 = \"\")GY\"\"\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 -= i0\\ni2 = abs(i0)\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [2, 7, 5, 7, 4, 1, 7, 7, 9, 8, 5, 6, 4, 7, 5, 9, 9, 2, 2, 2, 1], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0, 0, 1, 0, 1, 2, 0, 2, 2, 0, 0, 2, 2, 0, 1, 0, 2], [0, 1, 1], [3, 3, 1, 3, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 3, 3, 2, 3, 2, 3, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 3, 1, 2, 1, 0, 1, 2, 0, 1, 1, 3, 3, 0, 2, 0, 3, 3, 2, 3, 0, 2, 3, 2, 0, 3, 3, 2, 0, 3, 0, 0, 1, 2, 3, 3, 2, 0, 0, 1, 2, 0, 3, 2, 3, 0, 1, 3, 1, 2, 3, 1, 0, 2, 3, 2, 0, 3, 0, 0, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0], [3, 1, 2, 0, 3, 0, 1, 2, 1, 4, 3, 0, 2, 2, 1, 3, 3, 2, 4, 0, 3, 2, 0, 4, 1, 3, 3, 1, 4, 4, 3], [0, 2, 1, 1, 0, 1, 1, 1, 2, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0], [4, 5, 0, 4, 3, 0, 4, 0, 3, 2, 5], [1, 1, 1, 1, 1, 1], [0], [2, 2, 0, 0, 0, 0, 2, 0, 2, 0, 4, 3, 1, 4, 0, 1, 0, 4, 2, 2, 2, 0, 4, 1, 1, 4, 4, 2, 3, 2, 4, 2, 0, 1, 1], [0, 1, 3, 2, 2, 1, 1], [1, 0], [0, 2, 0, 0, 1, 1, 2, 2, 0, 0], [0, 2, 2, 0, 3, 2], [17, 21], [], [7, 8, 3], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 21, 21, 26, 1, 104, 28, 31, 13, 15, 11, 6, 1, 35, 7, 1, 10, 6, 2, 0, 3, 1], "tree_depth": 52, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in1 in in2[len(s0):][max(int(2.0), abs(min(divInt(i0,int(7.0)), len(in1)))):int(5.0)]:{:\\nres0 = in0 not in s0[min(i2, divInt(( divInt(max(abs(( max(( saveOrd(in1[( ( divInt(int(7.0),i2) + ( len(getCharFromString((\"\"R\"\" + saveChr(int(4.0))), i0)) * int(1.0) ) ) - int(7.0) ):i1]) - i2 ), divInt(int(7.0),min(int(9.0), abs(i1)))) + divInt(( ( abs(int(8.0)) - mod(int(5.0),i2) ) - int(6.0) ),divInt(i0,int(4.0))) )), int(7.0)),max(len(s0), i0)) - divInt(i0,len(\"\"7\"\")) ),abs(( saveOrd(in0) * i1 )))):( min(divInt(i0,len(s2[abs(divInt(i1,min(i2, i0))):][:int(59.0)][:mod(saveOrd(\"\"8\"\".capitalize()),max(mod(i2,i2), int(9.0)))].rstrip())), ( i0 + len(\"\"V\"\") )) + mod(len(saveChr(i0).capitalize()),int(2.0)) )]\\ni2 = max(int(2.0), ( saveOrd((saveChr(int(2.0))[i2:divInt(saveOrd(in2[( i0 - len(\"\";\"\") ):i1]),i0)] + \"\"3\"\")[int(1.0):]) + i2 ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [0], [], [0], [], [], [1], [1], [0, 2], [0], [4], [2], [], [1], [], [0, 1], [0, 8], [], [], [1, 3, 3, 1], [0], [4], [1], [], [1, 4, 1, 5], [0, 0, 0, 1], [], [0, 1, 4, 2, 0, 0, 0], [0], [], [0], [0, 2, 0, 3], [24, 22], [], [6], [5]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 2, 0, 0, 0, 4, 2, 0, 1, 1], "tree_depth": 16, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = not s1.startswith(\"\"Y6W\"\"\")\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [1, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 0], [0, 1, 1], [3, 3, 0, 2, 0, 2, 0, 1, 1, 1, 2, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 2, 3, 0, 1, 2, 1], [2, 1, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [0, 4, 4, 4, 3, 3, 4], [1, 1], [0], [2, 0, 0, 2, 0, 0, 2, 2, 2, 1, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 1, 0, 0, 1], [0, 3], [17], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 7, 9, 0, 32, 10, 6, 4, 6, 5, 2, 1, 14, 2, 1, 5, 2, 1, 0, 0, 1], "tree_depth": 40, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in1[len(in1):]:{:\\nb1 = in1[:len(in0)] not in \"\"R\"\"[:i1][mod(i1,( i2 * int(0.0) )):int(7.0)][int(5.0):divInt(i0,divInt(( divInt(int(7.0),i0) - divInt(abs(( i1 * abs(len((\"\";\"\" + saveChr(divInt(int(7.0),i0))).rstrip())) )),( min(int(1.0), i0) - int(7.0) )) ),i0))]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 0, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [0, 3, 0, 1, 3, 2, 0, 1, 3, 1, 3, 0, 2, 2, 2, 1, 0, 3, 3, 2, 0, 3, 3, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 4, 2, 0, 3, 0, 1, 2, 1], [0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 0], [0, 5, 4, 0, 3, 4, 4], [1], [0], [2, 3, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 1, 1], [1], [17], [19], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 3, 0, 10, 1, 3, 0, 1, 6, 1, 1, 15, 3, 1, 4, 1, 0, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (in2 + in1[i0:])[len(s0):]:{:\\nres0 = getCharFromString(in0[:i0], int(0.0))[saveOrd(saveChr(mod(i2,int(7.0)))):abs(int(5.0))] not in (\"\"t\"\" + in1.rstrip())\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 1], [2], [0, 1, 2], [], [], [], [], [2], [5], [2, 1], [0], [1], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 0, 8, 9, 8, 7, 2, 9, 5, 5, 3, 5, 7, 2, 1], [0, 1, 2, 0, 2, 2, 1, 2, 0, 0, 2, 1, 0, 1, 0, 2, 0, 0, 0, 0], [0], [0, 2, 2, 2, 3, 0, 3, 2, 2, 3, 2, 0, 2, 2, 3, 0, 0, 2, 1, 0, 2, 0, 2, 1, 3, 2, 0, 3, 2, 0, 0, 2, 1, 2, 2, 3, 2, 2, 2, 1, 3, 1, 3, 1, 2, 0, 0, 2, 1, 0, 2, 0, 2, 0, 0, 2, 2, 1, 2, 2, 3, 0, 0, 1, 1, 1, 0, 1, 0, 3, 1, 3], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], [1, 0, 2, 1, 2, 1, 2, 3, 1, 0, 2, 3], [0, 2, 1, 1, 1, 0, 0, 0, 1, 2, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [5, 1, 5], [1], [], [0, 1, 0, 0], [], [], [1], [0], [9], [], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 13, 13, 20, 0, 72, 27, 12, 11, 16, 3, 1, 0, 4, 0, 0, 0, 1, 1, 0, 0, 0], "tree_depth": 57, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in2 not in \"\"J\"\":{:\\nb2 = i0 != ( ( divInt(max(i1, min(( ( abs(divInt(i2,( mod(max(i0, i2),divInt(int(4.0),i2)) + ( i1 * divInt(int(0.0),abs(( i2 - max(divInt(i0,i0), ( int(8.0) - divInt(divInt(abs(divInt(mod(mod(int(9.0),len(s1)),int(8.0)),max(int(7.0), mod(i2,i1)))),( int(2.0) - i0 )),mod(i1,( i0 + i2 ))) )) ))) ) ))) + divInt(divInt(int(9.0),( mod(min(i0, i0),int(5.0)) + int(5.0) )),int(3.0)) ) - i0 ), int(5.0))),i0) * abs(int(7.0)) ) + len(in2) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [0, 0, 1, 0, 2, 0], [0, 0], [5, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 8, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [1, 1, 1, 1, 0, 2, 1, 1, 2, 2], [0, 1, 1], [3, 3, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 3, 0, 2, 2, 2, 1, 0, 2, 3, 1, 0, 1, 1, 0, 2, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 5, 4, 4, 3, 0, 3], [1], [0], [2, 0, 0, 4, 0, 0, 1, 4, 2, 1, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 2, 1], [1], [17], [6], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 5, 1, 1, 3, 2, 1, 0, 1, 1, 1, 0, 4, 0, 2, 0, 0, 5, 1, 1, 7, 1, 0, 1, 1, 0, 1, 0, 0], "tree_depth": 22, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = ( ( len(getCharFromString(in1, i1)) != int(0.0) or True ) and in0.endswith(\"\"g\"\") )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [1], [], [0], [], [], [], [], [1], [], [2], [], [5], [], [], [], [], [1, 1, 1, 1], [1, 6, 4, 3], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0], [2, 3, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [0, 1, 1, 1], [3], [1], [1, 1, 0], [0, 1], [0, 1], [], [4, 0, 3, 1, 4, 2, 4, 0], [1, 3, 0], [0], [0], [1, 3], [], [6], [], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 3, 4, 0, 12, 4, 1, 1, 3, 2, 2, 0, 8, 3, 1, 1, 2, 0, 1, 0, 1], "tree_depth": 19, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = saveChr(( len(s0) - mod(int(1.0),i0) )).endswith((\"\"g@\"\" + getCharFromString(s1, mod(i2,int(6.0)))[divInt(int(4.0),i2):i0].lstrip()))\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [0, 2, 0], [0], [1, 0], [0], [0, 0], [], [], [2], [1], [1], [0], [], [], [], [0], [], [0, 1, 1, 0, 0, 1], [1, 9, 2, 3, 1, 1], [0], [1], [1, 1, 2, 3, 1], [1], [4], [0, 0, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1], [0], [1, 4], [1, 1], [0], [1, 4, 3, 1, 0], [2], [], [], [1, 3], [], [0], [], [26]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 6, 1, 1, 5, 1, 1, 1, 1, 2, 2, 1, 5, 1, 0, 0, 2, 0, 1, 0, 1], "tree_depth": 23, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni0 += int(19.0)\\nloopBreak% = 0\\nfor s1 in \"\"a\"\":{:\\nb2 = int(2.0) \\g divInt(saveOrd((\"\"[\"\" + in1).capitalize()),int(311.0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [0], [], [], [1], [], [1], [], [], [], [2], [], [0], [], [], [], [], [0], [0, 1], [], [2, 1], [], [], [1], [2, 3], [], [], [8], [25]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 0, 2, 0, 0, 1, 2, 0, 0, 1, 1], "tree_depth": 12, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = \"\"8@\"\"[:i2]\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [3, 2, 0, 1, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 2, 2, 0, 2, 3, 1, 0, 0, 1, 0, 0, 1, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [5, 5, 4, 4, 3, 0, 4], [0, 1], [0], [0, 0, 1, 2, 0, 3, 1, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [0, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 0], [17, 9], [], [], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 4, 1, 1, 0, 1, 4, 2, 1, 5, 0, 0, 1, 2, 2, 0, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor in2 in in2:{:\\nres0 = in1 not in \"\"RJ\"\"\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni0 = len(in1[mod(i2,int(0.0)):])\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 0, 1], [0, 1, 1, 2, 1, 0], [0, 2], [2, 0, 0, 1, 0], [0], [0, 0], [], [], [2, 1, 1, 2], [5], [2, 0, 1, 0, 2, 0], [0], [0, 0], [3, 0], [0], [], [], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [3, 7, 4, 4, 5, 9, 1, 5, 5, 9, 3, 6], [2, 0, 0, 0, 2, 2, 2], [1], [1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 0, 3, 1, 3, 0, 3, 1, 1], [0, 0], [1, 1, 1], [2, 2, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 3, 4, 3, 1, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1], [0], [0, 0, 1, 4, 0, 2, 3, 2, 4, 2, 3, 0, 0, 1, 3, 3, 4, 1, 1, 1, 0], [3, 2, 0], [4], [2, 2, 0], [3, 2, 3, 2, 1, 1, 0, 2, 2], [10], [7, 25], [2, 5, 4, 2], [8, 4]], "fitness": 9223372036854775807, "mapping_values": [1, 6, 6, 1, 5, 1, 2, 0, 0, 4, 1, 5, 1, 2, 2, 1, 0, 0, 12, 12, 7, 1, 18, 2, 3, 3, 0, 8, 9, 1, 21, 3, 1, 3, 9, 1, 2, 4, 2], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns0 = s0\\nb2 = s0 in \"\"%2\"\"\\nb1 = ( int(37.0) != int(44.0) and b1 )\\nloopBreak% = 0\\nfor in0 in in1.rstrip(((in0 + s1)[int(5.0):( ( i2 * i0 ) * i0 )].capitalize()[i0:] + \"\"!\"\")[int(915.0):]):{:\\ni2 -= i2\\nb2 = ((getCharFromString(\"\"5hz\"\", max(int(59.0), max(i2, max(int(3.0), int(6.0))))) + \"\"K4\"\") + \"\"2\"\") in s1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 2, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 5, 7, 6, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 1, 2, 1, 2, 0, 0], [0, 1, 1], [2, 3, 2, 1, 0, 2, 0, 1, 2, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 3, 2, 3, 0, 2, 3, 1, 0, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4], [1, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [2, 1, 3], [1, 0], [2, 2, 2, 1, 1], [0, 2, 2], [17], [], [7, 6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 0, 0, 1, 1, 6, 1, 2, 3, 2, 1, 0, 7, 7, 10, 0, 34, 11, 6, 4, 7, 7, 3, 1, 16, 3, 1, 4, 3, 1, 0, 2, 0], "tree_depth": 38, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[divInt(len(in1),divInt(int(0.0),i0)):]:{:\\nloopBreak% = 0\\nwhile in2[( i2 + int(7.0) ):] not in in0:{:\\nres0 = ( divInt(int(5.0),len(s0[:i2].capitalize()[i0:])) != divInt(divInt(int(7.0),i1),( abs(( i2 + divInt(min(( len(saveChr(i1)) * mod(min(int(6.0), i2),int(1.0)) ), int(7.0)),i0) )) - i0 )) or ( (\"\"R\"\" + in1.rstrip()).endswith(\"\"76\"\") and True ) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [], [], [], [], [], [], [], [], [1, 1], [9, 4], [1, 2], [], [1, 1, 1], [], [], [], [1], [1, 2], [1], [], [1], [], [], [], [3], [], [], [], [3]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], "tree_depth": 9, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns1 = \"\"\"\"\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1], [1, 2, 2, 1, 2, 1, 0], [0, 1, 0], [0, 2, 0, 0], [0, 0], [0], [], [], [1, 0, 1, 1], [2, 3], [0, 0, 0, 1, 1, 0], [0, 0], [], [0, 1, 3, 1], [1], [0, 1], [0], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 1, 2, 9, 4, 2, 5, 3, 2, 9, 5, 9, 9, 7, 7, 0], [0, 1, 2, 0, 2, 2, 2, 0], [], [2, 1, 0, 3, 1, 1, 1, 0, 1, 1, 1, 0, 1, 2, 1, 2, 3, 0, 3, 1, 0, 1, 2, 0, 3, 3, 1, 2, 0, 1, 2, 0, 3, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [3, 1, 0, 2, 2, 2], [1, 1, 0], [1, 1, 0], [5, 1, 1, 4, 2, 0, 3], [1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0], [3, 4, 4, 3, 4, 2, 2, 4, 2, 4, 4, 4, 4, 1, 3, 1, 0, 4, 0, 0, 4, 3, 1, 3, 3, 4, 1, 4, 1, 2, 2, 1, 3, 4, 4, 1, 0], [3, 3, 0, 1, 3, 3, 2, 2, 1, 0, 2, 3, 1, 2], [5, 3, 0, 1, 3], [1, 1, 0, 1, 0], [3, 1, 3, 0, 2, 0, 2, 1, 3], [1, 16], [9, 17], [7, 0], [21, 27, 22]], "fitness": 9223372036854775807, "mapping_values": [1, 7, 7, 3, 4, 2, 1, 0, 0, 4, 2, 6, 2, 0, 4, 1, 2, 1, 16, 16, 8, 0, 35, 6, 6, 3, 3, 7, 9, 2, 37, 14, 5, 5, 9, 2, 2, 2, 3], "tree_depth": 39, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nb1 = b0\\nloopBreak% = 0\\nfor in2 in ((getCharFromString(saveChr(mod(int(9.0),i0))[:len(\"\"<\"\".capitalize().capitalize().rstrip().lstrip()[int(1.0):int(2.0)])][:int(94.0)], i1) + (\"\"j\"\" + s1)).lstrip(saveChr(int(2.0))).strip(s1) + in1):{:\\nif True:{:\\ns2 = getCharFromString((\"\"\\\\\\\\B7\"\" + ((\"\"Q\"\".capitalize() + \"\"0\"\".lstrip(\"\"r\"\"[int(5.0):int(3.0)][:i2])) + (saveChr(int(2.0)) + \"\"=\"\".capitalize()))), ( int(9.0) - ( max(i0, min(int(5.0), i2)) - int(9.0) ) ))\\nloopBreak% = 0\\nfor s0 in in0:{:\\nb1 = ( mod(i2,abs(abs(int(9.0)))) == ( i2 + int(7.0) ) or divInt(i0,abs(int(7.0))) \\ge int(0.0) )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb1 = False\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1], [0], [], [2], [], [0], [], [], [2], [2], [1], [0], [], [], [], [], [], [1, 1, 1, 1, 1, 1], [1, 3, 9, 4, 2, 3], [0, 1, 1, 0, 2, 1], [], [3, 2, 3, 2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 3, 0, 2, 0, 2, 1, 1, 2, 2, 2, 0, 3, 3, 3, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0], [1, 2, 1, 3, 3, 2], [0, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 1], [2, 1, 2, 2], [0, 1, 0, 0, 1], [], [4, 2, 0, 0, 3, 3, 1, 0, 1], [2], [0, 2], [1, 0], [1, 3, 0, 1, 0], [21, 8], [13, 17], [], [9]], "fitness": 9223372036854775807, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 29, 11, 6, 6, 5, 4, 5, 0, 9, 1, 0, 1, 5, 2, 2, 0, 1], "tree_depth": 24, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = s1[:max(mod(abs(mod(int(1.0),( int(3.0) + mod(i0,int(9.0)) ))),divInt(( i1 * i1 ),max(i0, ( i2 * ( int(4.0) * int(2.0) ) )))), mod(( ( i1 * len(s2) ) - len(((\"\"n&\"\" + s2) + \"\"VrI\"\")) ),abs(int(3.0))))].capitalize()\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 0, 1], [2, 1, 0], [2], [2, 0], [], [0], [], [], [1], [4], [0, 2, 1], [0], [4], [2], [], [], [], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1], [8, 2, 1, 7, 7, 7, 9, 6, 2, 5, 2, 8], [1, 2, 2, 0, 1, 2, 1, 2, 0, 0, 1, 0], [], [1, 3, 2, 3, 3, 1, 1, 3, 3, 3, 2, 3, 3, 2, 2, 2, 0, 2, 1, 1, 0, 0, 3, 3, 0, 1, 0], [1, 0, 0, 0, 1, 0], [4, 1, 4, 0, 3, 2, 2, 1, 2, 3], [2, 2, 2, 2], [0, 0], [2, 4, 4, 1, 5], [0, 0, 1, 1, 1, 0, 0, 1], [], [0, 2, 3, 1, 1, 1, 0, 4, 1, 2, 2, 0, 0], [2], [], [0, 2, 1], [1, 2, 3, 3, 3, 0, 0, 3], [1, 4], [14], [5], [13, 13, 1, 20]], "fitness": 9223372036854775807, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 0, 12, 12, 5, 0, 27, 6, 10, 4, 2, 5, 8, 0, 13, 1, 0, 3, 8, 2, 1, 1, 4], "tree_depth": 37, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile not s2.startswith((\"\"o5*\"\" + \"\"*\"\")[int(8.0):saveOrd(\"\"\\\\\\n\"\")]):{:\\nin1 = in1\\nb1 = divInt(max(saveOrd(\"\"BE;\"\".capitalize()), int(217.0)),int(7.0)) \\le min(len(s1[:abs(( abs(max(( ( divInt(i1,( int(7.0) * int(9.0) )) * i2 ) * i2 ), abs(len(in2)))) * i0 ))][int(62528.0):]), i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 0, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 5, 7, 7, 1, 6, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 1, 1, 0, 0], [0, 1, 1], [3, 3, 2, 0, 3, 2, 0, 1, 2, 1, 3, 0, 2, 2, 2, 1, 3, 2, 3, 2, 0, 3, 3, 2, 1, 1, 2, 3, 1, 0, 1, 0, 0, 0, 2, 1, 3, 2, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 3, 0, 3, 0, 1, 0, 1, 3, 3], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [0, 5, 4, 5, 3, 0, 4, 5], [1, 1], [0], [2, 0, 0, 2, 0, 0, 4, 4, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3, 0], [1, 0], [2, 2, 0, 0, 1], [0, 2], [17], [], [6], [20]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 8, 9, 0, 40, 12, 11, 5, 7, 8, 2, 1, 17, 4, 2, 3, 2, 1, 0, 1, 0], "tree_depth": 58, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in in2[len(in1):]:{:\\nres0 = in2[len(in0):] not in saveChr(mod(i0,len(s0[( i2 + int(1.0) ):( int(1.0) + min(i0, divInt(( divInt(int(5.0),len((\"\"R\"\" + getCharFromString(in1, ( min(( i0 * max(min(mod(int(7.0),int(7.0)), divInt(max(int(1.0), i1),int(6.0))), i2) ), i1) - i1 ))).lstrip())) + divInt(int(7.0),len(\"\"6\"\")) ),mod(len(in2),i0))) )]))).rstrip()\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [0, 2, 0, 0], [0], [1, 1, 1], [0], [0, 0, 0], [], [], [], [], [], [], [], [], [], [], [], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 5, 3, 3, 2, 5, 4, 0, 8, 2, 6, 6, 4, 7, 6, 0, 5], [2, 2, 2, 0, 0, 2, 2, 1, 0, 1, 1, 0, 1, 1, 2, 2, 1, 2, 2, 0, 0, 2, 2, 0, 1, 0, 0, 2, 1, 2, 1, 1, 0, 1, 1], [0, 1, 0], [1, 1, 2, 0, 0, 3, 2, 2, 3, 0, 3, 2, 2, 0, 2, 3, 2, 2, 0, 0, 2, 1, 2, 3, 0, 0, 0, 2, 2, 1, 3, 1, 2, 2, 2, 0, 2, 2, 1, 3, 3, 0, 3, 2, 3, 2, 2, 2, 0, 1, 3, 2, 2, 1, 3, 0, 2, 0, 3, 1, 2, 0, 3, 1, 3, 3, 0, 1, 0, 1, 2, 3, 0, 3, 0, 3, 3, 3, 1, 2, 3, 0, 2, 1, 2, 3, 2, 1, 0, 3, 0, 3, 2, 2, 0, 1, 3, 0, 0, 3, 1, 0, 0, 0, 0, 1, 2, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0], [3, 3, 2, 0, 4, 3, 1, 3, 1, 3, 3, 1, 4, 2, 3, 1, 3, 4, 1, 0, 1, 3, 0, 1, 3, 1, 1], [1, 0, 2, 2, 0, 1, 2, 2, 2, 0, 2, 0, 0, 2, 0, 1, 2, 1, 2], [1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [4, 2, 0, 1, 3, 3, 0, 0, 1, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0], [4, 3, 4, 2, 0, 3, 3, 0, 4, 3, 4, 4, 1, 3, 1, 3, 4, 1, 2, 4, 1, 1, 4, 4, 0, 4, 4, 4, 0, 4, 2, 4, 4, 0, 1, 1, 0, 1, 2, 1, 3, 0, 3, 0, 3, 0, 4, 0], [3, 0, 2, 2, 3, 1, 0, 0, 1, 0, 0, 1, 3, 1, 0, 3], [2, 0, 1, 0], [2, 1, 1, 0], [1, 0, 1, 0, 1, 0, 2, 3, 2], [19, 1, 6], [3, 16, 0], [3, 5], [6]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 35, 3, 110, 33, 27, 19, 15, 11, 9, 1, 48, 16, 4, 4, 9, 3, 3, 2, 1], "tree_depth": 81, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ni2 = int(2.0)\\nloopBreak% = 0\\nfor in1 in (getCharFromString(s2[int(1.0):], mod(i2,i2)) + ((s0 + (\"\"d\"\".lstrip().capitalize() + (\"\"T\"\" + (saveChr(len(\"\"q\"\")) + getCharFromString(\"\"B\"\", ( ( len(\"\"a\"\") - i0 ) + abs(( ( i0 * ( min(mod(( i2 * i2 ),mod(int(5.0),divInt(saveOrd(getCharFromString(saveChr(i1), i0)),i1))), mod(divInt(int(3.0),len(s1)),int(3.0))) + ( ( mod(i1,divInt(( int(2.0) - max(len(getCharFromString(getCharFromString(saveChr(i0), max(mod(len(in0),mod(( ( i1 * int(5.0) ) * len(saveChr(divInt(( int(4.0) * max(i1, divInt(i2,saveOrd(getCharFromString(in0, int(0.0))))) ),( i2 + abs(int(8.0)) )))[:len(\"\"G\"\")].rstrip()) ),max(i1, int(2.0)))), i2)), int(6.0))), ( len(\"\"3\"\") * i2 )) ),saveOrd(s0))) + i0 ) + max(min(max(int(6.0), divInt(len(\"\"#\"\"),i0)), divInt(int(4.0),( min(( int(7.0) * i2 ), max(i2, len(\"\"5\"\"[mod(( i0 + int(6.0) ),max(i1, i0)):max(int(0.0), i0)]))) - i2 ))), i1) ) ) ) * i2 )) ))[:int(5.0)]))).capitalize()) + (s0 + (s1 + (in1 + in1.lstrip()))))).strip():{:\\ni1 -= ( i1 * i0 )\\ni1 = i1\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1], [2, 1, 0, 0, 0], [0, 2], [0, 1, 2], [0], [0], [], [], [3, 2, 3], [5, 0, 0], [2, 0, 1, 0, 2, 0], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [], [1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 7, 5, 7, 2, 1, 7, 7, 9, 8, 5, 7, 4, 8, 5, 9, 9, 2, 2], [0, 2, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 1], [0], [3, 3, 0, 1, 0, 2, 0, 1, 1, 1, 3, 0, 0, 2, 2, 1, 0, 2, 3, 2, 0, 2, 0, 2, 1, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 1, 0, 3, 0, 1, 2, 1], [0, 0, 2, 1, 0, 2, 1, 1, 2, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [0, 5, 2, 2, 3, 0, 4], [1, 0, 0, 0, 0, 0, 1, 1], [0], [2, 3, 3, 3, 0, 4, 2, 4, 2, 0, 0, 3, 1, 4, 0, 1, 0, 2, 3, 1, 4], [0, 1, 3, 1], [1, 0], [2, 1, 0, 0, 1], [0, 2, 0, 1, 3, 2, 3, 3], [17, 23], [2], [5, 1], [20, 23, 3]], "fitness": 9223372036854775807, "mapping_values": [1, 2, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 9, 5, 0, 13, 1, 3, 0, 1, 6, 8, 1, 21, 4, 1, 4, 8, 2, 1, 2, 3], "tree_depth": 25, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nfor s0 in (((in2 + getCharFromString(saveChr(len(s2[len(s2):i0]))[:int(0.0)], i2)) + (\"\"R\"\" + in0.rstrip())) + \"\"5Xc;1>\"\")[mod(i2,int(757.0)):]:{:\\nres0 = s0 not in (\"\"\"\" + saveChr(int(2177.0)))[int(9.0):max(i0, i0)]\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 1, 0, 1], [0, 2, 1, 1], [1], [2, 1, 1], [], [0], [], [], [], [], [2], [], [1], [], [], [], [0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [7, 8, 0, 2, 8, 6, 1, 9, 5, 5, 2], [0, 2, 0, 1, 1], [0, 0], [2, 0, 1, 2, 1, 2, 1, 0, 0, 1], [0, 1, 1], [], [0, 0], [0, 0], [2, 5], [1, 1], [], [2, 2, 0, 1, 1], [2], [], [1, 1], [1, 1], [], [17, 7], [], []], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 1, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 11, 11, 5, 2, 10, 3, 0, 1, 2, 2, 2, 0, 5, 0, 0, 2, 2, 0, 2, 0, 0], "tree_depth": 17, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\ns2 = in2[:( i0 + int(780.0) )][:divInt(int(2861.0),divInt(int(9.0),i2))]\\nif \"\"r\"\" not in \"\"h\"\":{:\\ni0 = i1\\ni1 = int(552.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [1, 1, 1, 1], [2, 2, 0, 0, 0], [1, 2], [0, 1, 2], [0], [0, 0], [], [], [3], [5, 0, 0], [2, 0, 1, 0, 2, 0, 1], [0, 0], [1, 5], [3, 3, 1], [1, 0], [0], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 8, 0, 7, 7, 1, 7, 7, 9, 8, 5, 0, 4, 8, 5, 9, 9, 2, 2], [0, 2, 0, 0, 1, 2, 0, 0, 1, 0, 1, 1, 2, 0, 2, 0, 1], [0, 1, 1], [2, 3, 0, 1, 2, 2, 0, 0, 2, 1, 3, 0, 2, 2, 2, 0, 0, 2, 3, 2, 0, 2, 3, 0, 1, 0, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 3, 1, 3, 0, 2, 2, 2, 1, 1, 2, 1, 0, 1, 1, 3, 1, 3, 3, 2, 0, 3, 2, 0, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1], [3, 3, 2, 0, 3, 0, 1, 2, 1, 4, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 2], [0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 5, 4, 4, 3, 0, 4], [1, 0, 0, 1], [0], [2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 4, 3, 1, 4, 0, 1, 0], [3, 1, 3], [1, 0], [2, 2, 0, 0, 1], [0, 3, 2, 3], [17], [], [4], [20, 1]], "fitness": 9223372036854775807, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 0, 0, 1, 2, 7, 2, 2, 3, 2, 1, 1, 17, 17, 17, 1, 62, 19, 11, 10, 9, 6, 4, 0, 15, 2, 1, 4, 4, 1, 0, 1, 2], "tree_depth": 33, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nif s0[divInt(len(in2),i0):] not in in1[int(0.0):]:{:\\nloopBreak% = 0\\nwhile ( divInt(( i2 + i0 ),divInt(int(8.0),len(in1))) != i0 or ( \"\"R\"\"[( divInt(( i1 + i2 ),( abs(divInt(i0,( min(i0, int(0.0)) + i1 ))) - ( len(in0[int(7.0):mod(int(7.0),int(1.0))]) + i0 ) )) + i1 ):( int(7.0) + min(int(7.0), max(i1, ( ( mod(int(9.0),int(8.0)) + mod(int(5.0),i2) ) - int(0.0) ))) )].endswith((\"\";4\\\\\\n\"\" + saveChr(int(4.0))).rstrip()) and True ) ):{:\\nres0 = abs(int(8.0)) \\l max(saveOrd(s0), ( i0 * max(divInt(i2,i0), int(59.0)) ))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\ni1 = int(9.0)\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 2, 0, 2, 2, 0, 2, 1, 0, 1, 0, 0, 2, 1, 2, 0, 2, 0, 2, 1, 1, 2, 1, 2, 0, 0, 2, 2, 1, 2, 0, 1, 0, 2, 2, 2, 0, 2, 1, 0, 0, 1, 0, 2, 1, 0], [2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 0, 2, 0, 2, 2], [1, 0, 2, 2, 0, 0, 2, 1, 1, 2, 2, 2, 0, 1, 0, 1, 1, 2, 1, 1, 1, 1, 0, 0, 0, 2, 1], [0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [], [], [1, 1, 0, 2, 2, 3, 0, 3, 2, 0, 1, 3], [2, 4, 1, 1, 2, 3, 3, 3, 4], [2, 0, 1, 0, 2, 0, 2, 0, 1, 2, 1, 1, 1, 2, 0, 2, 0, 2, 2, 1, 2, 2, 0, 0, 1, 2, 2, 0, 1, 0, 2, 0, 0, 2, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 3, 4, 1, 1, 1, 2, 5, 2, 0, 5, 2, 5], [2, 0, 1, 2, 3, 0, 3, 0, 1, 3, 0, 3], [0, 0, 0, 0], [1, 1], [0, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 3, 2, 5, 9, 5, 2, 3, 7, 7, 5, 4, 4, 0, 9, 0, 8, 9, 3, 8, 0, 7, 9, 0, 2, 8, 1, 3, 8, 2, 0, 7, 2, 3, 0, 3, 9, 7, 4, 2, 1, 3, 1, 8, 3, 7, 3, 6, 9, 7, 4, 2, 3, 4, 5, 6, 2, 1, 9, 1, 8, 2, 0, 2, 1, 5, 2, 9, 0, 1, 0, 9, 8, 7, 9, 4, 2, 1, 2, 4, 8, 3, 1, 6, 9, 3, 7, 9, 6, 0, 3, 5, 9, 8, 7, 4, 5, 7, 2, 0, 0, 7, 8, 3, 0, 0, 5, 9, 7, 2, 6, 7, 6, 3, 1, 0, 4, 3, 9, 6, 4, 1, 9, 5, 8, 7, 2, 6, 6, 4, 2, 7, 3, 0, 5], [0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 0, 0, 2, 2, 0, 0, 0, 2, 0, 1, 2, 0, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 2, 0, 1, 1, 1, 0, 0, 2, 0, 1, 1, 0, 2, 2, 2, 2, 0, 2, 1, 0, 1, 1, 1, 0, 1, 2, 0, 2, 1, 2, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 0, 2, 1, 1, 1, 2, 1, 1, 0, 1, 2, 0, 2, 1, 1, 0, 2, 2, 1, 1, 2, 0, 1, 2, 1, 2, 1, 0, 0, 0, 1, 2, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0], [1, 2, 3, 3, 3, 1, 3, 0, 0, 1, 2, 3, 3, 0, 2, 1, 2, 1, 0, 1, 0, 2, 3, 3, 3, 2, 0, 0, 2, 3, 3, 1, 2, 1, 3, 3, 0, 0, 1, 3, 0, 1, 1, 1, 0, 1, 3, 2, 0, 1, 1, 3, 1, 0, 2, 2, 2, 3, 2, 0, 2, 0, 3, 0, 1, 0, 3, 3, 0, 0, 2, 0, 2, 3, 2, 1, 3, 2, 1, 3, 2, 2, 0, 0, 2, 3, 3, 2, 3, 0, 2, 3, 3, 1, 0, 3, 0, 3, 0, 3, 2, 0, 1, 0, 1, 3, 3, 2, 2, 2, 0, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0, 3, 0, 1, 2, 2, 1, 2, 1, 2, 2, 1, 3, 0, 3, 3, 3, 0, 0, 1, 3, 0, 1, 1, 2, 1, 0, 2, 2, 0, 1, 1, 2, 1, 1, 2, 0, 0, 0, 1, 2, 0, 0, 0, 3, 0, 0, 1, 3, 2, 1, 2, 2, 1, 0, 0, 3, 2, 2, 3, 1, 3, 3, 1, 0, 2, 1, 2, 1, 2, 0, 0, 3, 3, 3, 2, 2, 2, 0, 0, 0, 1, 3, 3, 3, 3, 0, 3, 3, 1, 3, 0, 1, 3, 2, 0, 0, 0, 3, 3, 1, 0, 1, 3, 2, 1, 1, 2, 1, 1, 0, 3, 3, 3, 1, 1, 2, 1, 0, 2, 0, 3, 1, 1, 0, 2, 2, 1, 0, 1, 3, 2, 2, 2, 3, 3, 1, 3, 2, 0, 3, 0, 3, 2, 1, 2, 2, 1, 3, 1, 0, 3, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 2, 2, 0, 2, 2, 2, 2, 0, 1, 3, 2, 0, 2, 0, 1, 1, 1, 3, 3, 2, 0, 0, 0, 2, 1, 3, 2, 1, 0, 3, 1, 2, 3, 3, 3, 2, 0, 1, 3, 3, 0, 3, 0, 3, 1, 3, 2, 2, 0, 2, 3, 2, 2, 1, 0, 3, 0, 0, 2, 3, 2, 0, 1, 0, 1, 1, 1, 0, 3, 3, 2, 3, 0, 0, 2, 2, 2, 1, 2, 1, 2, 0, 2, 3, 2, 1, 0, 0, 0, 3, 0, 1, 3, 3, 3, 2, 2, 3, 3, 3, 0, 1, 3, 3, 0, 1, 1, 3, 3, 0, 3, 1, 2, 1, 1, 3, 0, 0, 2, 2, 2, 3, 3, 2, 1, 2, 1, 2, 2, 3, 2, 1, 0, 2, 3, 1, 1, 3, 2, 1, 3, 1, 2, 3, 1, 1, 1, 1, 0, 2, 2, 1, 0, 2, 2, 0, 0, 0, 2, 1, 3, 1, 2, 3, 0, 0, 3, 2, 0, 1, 1, 2, 2, 3, 0, 0, 0, 3, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 2, 3, 2, 2, 1, 3, 3, 1, 3, 3, 3, 1, 2, 2, 2, 1, 1, 4, 2, 3, 4, 4, 4, 2, 2, 3, 0, 4, 2, 4, 3, 3, 3, 0, 3, 3, 0, 3, 4, 3, 0, 4, 2, 1, 2, 3, 4, 0, 2, 3, 4, 4, 2, 1, 0, 3, 4, 4, 2, 0, 4, 0, 2, 1, 1, 4, 4, 1, 4, 0, 4, 1, 2, 4, 1, 2, 1, 0, 3, 0, 3, 0, 3, 2, 2, 2, 3, 3, 4, 2, 0, 1, 3, 2, 1, 3, 4, 0, 3, 0, 0, 3, 2, 0, 3, 4, 2, 1, 0, 1, 4, 3, 1, 2, 1, 1], [2, 0, 1, 0, 1, 0, 0, 1, 2, 0, 1, 2, 2, 1, 2, 1, 1, 0, 0, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 1, 1, 1, 1, 2, 2, 2, 0, 1, 2, 0, 2], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1], [4, 2, 4, 4, 5, 5, 0, 2, 1, 1, 1, 0, 4, 3, 4, 3, 3, 0, 3, 5, 4, 4, 5, 3, 3, 4, 3, 2, 1, 0, 5, 1, 2, 1, 0, 3, 2, 0, 4, 4, 4, 0, 1, 5, 4, 1, 0, 0, 1, 1, 5, 2, 0, 3, 2, 4, 0, 0, 3, 3, 1, 2], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0], [0, 2, 3, 3, 0, 0, 3, 2, 1, 0, 2, 1, 1, 4, 2, 1, 0, 1, 0, 4, 4, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 0, 0, 1, 3, 2, 2, 4, 0, 3, 4, 3, 4, 2, 2, 0, 3, 3, 3, 4, 0, 4, 0, 4, 1, 1, 3, 2, 4, 0, 4, 2, 0, 1, 0, 3, 2, 3, 0, 4, 2, 1, 4, 2, 0, 0, 4, 4, 1, 4, 0, 1, 2, 3, 1, 4, 4, 4, 1, 2, 1, 1, 0, 2, 4, 4, 4, 2, 4, 2, 1, 2, 1, 1, 0, 0, 2, 2, 2, 0, 4, 4, 3, 4, 1, 1, 1, 3, 4, 4, 1, 0, 3, 3, 3, 3, 4, 4, 0, 4, 0, 1, 1, 4, 0, 1, 3, 3, 0, 4, 1, 1, 2, 1, 3, 2, 0, 1, 4, 4, 4, 2, 2, 1, 2, 4, 4, 2, 2, 1, 1, 4, 4, 2, 0, 0, 4, 1, 1, 2, 4, 2, 1, 0, 4, 1, 1, 1, 2, 1, 4, 2, 2, 2, 1, 0, 0, 1, 0, 4, 0, 1, 1, 1, 2, 0, 0, 4, 3, 3, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 4, 2, 0, 4, 4, 0, 1, 1, 1, 2, 1, 3, 4, 4, 4, 0, 4, 0, 1, 1, 1, 0, 2, 1, 4, 4, 1, 4, 1, 1, 2, 4, 2, 0, 0, 0, 2, 0, 4, 0, 0, 4, 1, 3, 3, 1, 1, 0, 1, 2, 0, 0, 3, 4, 1, 1], [2, 3, 3, 3, 2, 1, 0, 3, 0, 0, 3, 2, 2, 0, 3, 0, 0, 3, 0, 3, 0, 2, 3, 2, 0, 3, 3, 1, 0, 2, 2, 1, 2, 2, 0, 2, 3, 2, 0, 3, 3, 3, 2, 3, 2, 3, 3, 2, 2, 0, 0, 2, 3, 1, 3, 2, 1, 2, 1, 3], [0, 0, 5, 3, 3, 1, 4, 0, 5, 2, 3, 1, 2, 4, 0, 0, 3, 1, 3, 2, 2], [1, 2, 2, 2, 1, 1, 1, 1, 0, 1, 2, 2, 0, 0, 1, 2, 1, 0, 0, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 1, 1, 0, 0, 2, 0, 1, 2, 2, 0, 2, 2, 1, 1, 0, 1, 0, 0, 2, 1, 1, 2, 2, 0, 0, 0, 0], [0, 0, 1, 2, 1, 0, 1, 2, 0, 0, 1, 0, 2, 2, 1, 2, 2, 0, 1, 0, 2, 1, 0, 2, 2, 1, 2, 3, 0, 0, 3, 3, 0, 1, 2, 3, 3, 1, 2, 1, 1, 2, 2, 2, 2, 0, 1, 0, 2, 1, 3, 3, 1, 2, 2, 1, 1, 2, 3, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 3, 2, 3, 0, 0, 3, 1, 2, 3, 1, 1, 1, 3, 0, 1, 3], [12, 5, 13, 7, 23, 3, 17, 25, 24, 25, 19, 2, 8, 16, 17, 8, 2], [21, 3, 20, 16, 25, 7, 17, 9, 2, 20, 23, 19, 17, 10, 5, 1, 0, 24, 22, 2, 2, 10, 6, 6, 10, 6, 20], [4, 6, 1, 2, 0, 1, 3, 1, 1, 6, 5, 4, 1, 0, 0, 9, 9, 2, 0, 4, 8, 5, 1, 0, 2, 4, 4], [11, 31, 29, 22, 30, 14, 4, 28, 31, 12, 4, 9, 2, 26]], "fitness": 9223372036854775807, "mapping_values": [1, 46, 46, 19, 27, 2, 16, 0, 0, 12, 9, 35, 9, 14, 12, 4, 2, 6, 135, 135, 128, 11, 464, 119, 117, 54, 69, 62, 85, 2, 266, 60, 21, 56, 85, 17, 27, 27, 14], "tree_depth": 61, "phenotype": "b0 = bool(); b1 = bool(); b2 = bool()\\ni0 = int(); i1 = int(); i2 = int()\\ns0 = str(); s1 = str(); s2 = str()\\nres0 = bool()\\nloopBreak% = 0\\nwhile in1 == ((s2 + in1) + (\"\"MF\"\"[int(13.0):] + in1))[:mod(saveOrd(\"\"v4d\"\"[abs(len(\"\"N\"\")):]),int(2.0))]:{:\\nloopBreak% = 0\\nwhile not abs(i0) == i0:{:\\ni2 = int(5.0)\\nif b1:{:\\nif \"\"u\"\"[mod(abs(max(i1, ( int(9.0) * mod(int(5.0),i1) ))),int(2.0)):].capitalize() not in in2:{:\\nb1 = False\\nif \"\"6\"\" != in2:{:\\ns0 = \"\"H\"\".lstrip().lstrip()\\n:}\\ns2 = \"\"X\"\"[:i0]\\n:}else:{:\\nb0 = not ( len(\"\"q\"\") + len(\"\"D\"\") ) \\le max(mod(i0,i0), ( len(\"\"1\"\"[:len(\"\"2\"\"[:int(3.0)])]) - divInt(int(7.0),len(s1[:max(i2, i1)])) ))\\nb2 = s1.startswith(\"\"z\"\")\\n:}\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ns1 = (s0.strip(((saveChr(int(7.0)) + in1[abs(i1):][int(5.0):]).capitalize() + (((getCharFromString(in0, int(4.0)) + in1.lstrip(getCharFromString(\"\"0\"\", int(4.0)))) + \"\"1Rh\"\") + (getCharFromString(in0, i0)[int(0.0):abs(divInt(i0,int(9.0)))] + in0[int(0.0):abs(int(8.0))].lstrip(\"\"Z\"\")))))[:i2][( divInt(divInt(max(divInt(i2,( i0 + max(i0, int(9.0)) )), i0),saveOrd(s0)),abs(i2)) - i0 ):( i1 + mod(len(((in0 + \"\"3\"\"[divInt(int(3.0),saveOrd(in2[:divInt(int(8.0),saveOrd(in1))].capitalize())):].capitalize())[:( ( i2 + i0 ) - divInt(saveOrd(getCharFromString(\"\"r\"\".rstrip(), abs(mod(abs(i2),( len(getCharFromString(in1, min(int(0.0), i2))) * saveOrd(\"\"Y\"\") ))))),i2) )] + (\"\"1\"\" + getCharFromString(getCharFromString(\"\"1\"\", abs(i2)).rstrip(\"\"j\"\"[saveOrd(\"\"6\"\"):mod(i0,int(7.0))]), i0))[int(90.0):len(in2)])),len(getCharFromString(\"\"(\"\"[mod(mod(divInt(i0,int(2.0)),int(8.0)),mod(divInt(int(1.0),( ( int(3.0) + int(8.0) ) - int(2.0) )),i1)):].strip(\"\"Z\"\"[len(\"\"T\"\"):])[i0:].capitalize(), int(0.0)).lstrip()[( ( int(7.0) * mod(int(2.0),mod(( int(3.0) * min(i2, len(in0)) ),len(in0))) ) - min(i1, i2) ):int(03.0)])) )] + in1[len(getCharFromString((\"\"`\"\".strip() + \"\"^\"\"), i0).capitalize()):int(9.0)][int(7.0):][mod(int(42.0),i1):mod(( i1 * int(1.0) ),int(318373697.0))])\\nloopBreak% = 0\\nwhile ( int(4.0) - int(2345.0) ) \\g mod(i1,i0):{:\\ni0 -= i2\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nif int(6.0) \\g ( i0 + i1 ):{:\\ni1 = i0\\nloopBreak% = 0\\nwhile saveOrd(\"\"C\"\") == i2:{:\\nin0 = (saveChr(i2).lstrip(\"\"c5\"\") + s2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile ((((getCharFromString(s1.capitalize(), int(2.0)) + s0.capitalize()) + \"\"=\"\") + \"\"_\"\") + saveChr(len(in2))) not in \"\"u4\"\":{:\\ns1 = ((s2 + \"\"x\"\".capitalize()) + \"\"t1\"\")\\ns1 = \"\"00\"\"[( int(1.0) + divInt(mod(int(9.0),i2),i2) ):]\\nloopBreak% = 0\\nwhile ( (s0[min(( ( saveOrd(\"\"9\"\") * int(1.0) ) * abs(max(int(8.0), i0)) ), mod(int(2.0),divInt(int(0.0),( i2 - i1 )))):] + getCharFromString(\"\"I\"\"[:abs(len(\"\"r\"\"[saveOrd(\"\"Q\"\"):divInt(mod(divInt(i0,i1),i1),int(2.0))][min(abs(len(getCharFromString(in0[saveOrd(s2):].strip(), i1))), saveOrd(\"\"9\"\".rstrip(\"\"k\"\"))):abs(int(1.0))].capitalize().rstrip()[:max(i0, int(5.0))]))][min(( i1 * i2 ), i0):].capitalize(), len(\"\"+\"\"[:saveOrd(s0)].lstrip()[int(2.0):i2])).capitalize()) not in \"\"!\"\".capitalize() and b2 ):{:\\nres0 = \"\"f\"\" not in \"\"2\"\"\\nif \"\"0\"\"[int(9.0):] == \"\"b\"\"[saveOrd(in1):][( int(0.0) * int(1.0) ):( int(0.0) * int(9.0) )][i1:].lstrip():{:\\ni2 = abs(min(saveOrd(in1), int(8.0)))\\n:}\\nb0 = int(7.0) \\ge ( int(9.0) * i0 )\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile \"\"a\"\".endswith(in1):{:\\nif s0.capitalize() == \"\"4\"\":{:\\ni1 = ( i1 - min(int(4.0), int(2.0)) )\\nloopBreak% = 0\\nwhile ( res0 and i1 \\ge ( ( int(1.0) * i0 ) - int(2.0) ) ):{:\\ni0 = abs(mod(mod(divInt(max(max(int(4.0), saveOrd(\"\"]\"\")), ( i1 - saveOrd(\"\"8\"\") )),i0),max(mod(int(8.0),( ( int(3.0) - saveOrd(s1[int(1.0):]) ) - i1 )), min(int(6.0), i1))),i0))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}else:{:\\nin2 = in1\\ni0 *= i1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nfor s1 in ((\"\"y\"\"[mod(i1,i1):i1][:saveOrd(\"\"w\"\")][:i2] + s0[:( ( i1 * ( ( divInt(divInt(i0,int(9.0)),max(mod(i1,mod(i1,int(3.0))), int(7.0))) - int(9.0) ) + abs(saveOrd(s0.capitalize().capitalize())) ) ) * mod(i1,i2) )].rstrip()[:i2][mod(int(6.0),max(mod(int(0.0),i2), abs(int(3.0)))):][( max(min(len(\"\"5\"\"), ( i1 + int(5.0) )), min(len(\"\"1\"\"), i1)) - min(i2, len(\"\"c\"\")) ):int(9.0)][abs(( mod(i1,mod(abs(( divInt(int(8.0),i1) + abs(i1) )),i0)) - divInt(len(\"\"0\"\"[divInt(i2,int(7.0)):]),i1) )):int(4.0)][:int(5.0)]) + (getCharFromString(getCharFromString(s1.capitalize(), int(7.0)), i1) + s1.lstrip(\"\"c\"\"))).lstrip(\"\"2k\"\"):{:\\nloopBreak% = 0\\nwhile \"\"`\"\" in in2:{:\\nloopBreak% = 0\\nfor s2 in \"\"4\"\"[len(saveChr(saveOrd(\"\")\"\".strip()))):]:{:\\ni1 *= divInt(abs(i2),i1)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nloopBreak% = 0\\nwhile \"\"R\"\".capitalize().endswith(\"\"I\"\"):{:\\ni1 = divInt(mod(( int(2.0) - ( int(0.0) - ( i0 - ( min(divInt(int(0.0),i1), i2) - i0 ) ) ) ),max(i2, int(7.0))),len(saveChr(abs(max(mod(divInt(len(s0[saveOrd(in0):min(i1, int(8.0))]),len(s2)),min(i1, int(3.0))), int(0.0))))[min(len(in1[i0:abs(int(0.0))]), divInt(int(5.0),int(9.0))):min(i2, i2)]))\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\ni1 *= mod(divInt(( len(s0.capitalize()) * saveOrd(s0) ),( int(7.0) * ( int(2.0) + mod(( abs(divInt(int(6.0),i1)) - mod(max(int(7.0), int(6.0)),min(mod(int(3.0),max(int(1.0), mod(saveOrd(saveChr(int(0.0))),int(4.0)))), int(3.0))) ),int(9.0)) ) )),i2)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb2 = False\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\nb0 = divInt(( int(6.0) * i0 ),( divInt(i1,i2) + i1 )) \\ge mod(int(41.0),len(\"\"!g\"\"))\\nb1 = ( ((\"\"4&g\"\" + \"\"k\"\") + in0) == \"\"g\"\" and res0 )\\n:}else:{:\\nloopBreak% = 0\\nwhile ( in0[int(95.0):( max(i2, i1) * abs(divInt(i0,int(8.0))) )].endswith(s1) and int(7.0) \\le mod(mod(max(i0, i0),i1),max(int(2664.0), i2)) ):{:\\ns2 = (\"\"\\\\\\tC\"\".strip() + \"\"u[\"\")\\ni0 = int(27305.0)\\n\\nif loopBreak% \\g loopBreakConst or stop:{:\\nbreak\\n:}loopBreak% += 1\\n:}\\n:}\\n", "other_info": {}, "test_fitness": 9223372036854775807}]